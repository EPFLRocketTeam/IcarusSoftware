
icarus_software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b844  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  0800ba14  0800ba14  0001ba14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba90  0800ba90  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800ba90  0800ba90  0001ba90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba98  0800ba98  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba98  0800ba98  0001ba98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ba9c  0800ba9c  0001ba9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800baa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007fc0  20000088  0800bb28  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008048  0800bb28  00028048  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027e30  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000591b  00000000  00000000  00047ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b28  00000000  00000000  0004d808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018e0  00000000  00000000  0004f330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000276a3  00000000  00000000  00050c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000206ac  00000000  00000000  000782b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0363  00000000  00000000  0009895f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00178cc2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ef4  00000000  00000000  00178d18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000088 	.word	0x20000088
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b9fc 	.word	0x0800b9fc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000008c 	.word	0x2000008c
 800020c:	0800b9fc 	.word	0x0800b9fc

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000224:	f000 b96e 	b.w	8000504 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468c      	mov	ip, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	f040 8083 	bne.w	8000356 <__udivmoddi4+0x116>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d947      	bls.n	80002e6 <__udivmoddi4+0xa6>
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	b142      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025c:	f1c2 0020 	rsb	r0, r2, #32
 8000260:	fa24 f000 	lsr.w	r0, r4, r0
 8000264:	4091      	lsls	r1, r2
 8000266:	4097      	lsls	r7, r2
 8000268:	ea40 0c01 	orr.w	ip, r0, r1
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbbc f6f8 	udiv	r6, ip, r8
 8000278:	fa1f fe87 	uxth.w	lr, r7
 800027c:	fb08 c116 	mls	r1, r8, r6, ip
 8000280:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000284:	fb06 f10e 	mul.w	r1, r6, lr
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000292:	f080 8119 	bcs.w	80004c8 <__udivmoddi4+0x288>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8116 	bls.w	80004c8 <__udivmoddi4+0x288>
 800029c:	3e02      	subs	r6, #2
 800029e:	443b      	add	r3, r7
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b4:	45a6      	cmp	lr, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002be:	f080 8105 	bcs.w	80004cc <__udivmoddi4+0x28c>
 80002c2:	45a6      	cmp	lr, r4
 80002c4:	f240 8102 	bls.w	80004cc <__udivmoddi4+0x28c>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	2600      	movs	r6, #0
 80002d6:	b11d      	cbz	r5, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c5 4300 	strd	r4, r3, [r5]
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xaa>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	d150      	bne.n	8000394 <__udivmoddi4+0x154>
 80002f2:	1bcb      	subs	r3, r1, r7
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	fa1f f887 	uxth.w	r8, r7
 80002fc:	2601      	movs	r6, #1
 80002fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000302:	0c21      	lsrs	r1, r4, #16
 8000304:	fb0e 331c 	mls	r3, lr, ip, r3
 8000308:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800030c:	fb08 f30c 	mul.w	r3, r8, ip
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000314:	1879      	adds	r1, r7, r1
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0xe2>
 800031c:	428b      	cmp	r3, r1
 800031e:	f200 80e9 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 8000322:	4684      	mov	ip, r0
 8000324:	1ac9      	subs	r1, r1, r3
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000330:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x10c>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x10a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80d9 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e7bf      	b.n	80002d6 <__udivmoddi4+0x96>
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x12e>
 800035a:	2d00      	cmp	r5, #0
 800035c:	f000 80b1 	beq.w	80004c2 <__udivmoddi4+0x282>
 8000360:	2600      	movs	r6, #0
 8000362:	e9c5 0100 	strd	r0, r1, [r5]
 8000366:	4630      	mov	r0, r6
 8000368:	4631      	mov	r1, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f683 	clz	r6, r3
 8000372:	2e00      	cmp	r6, #0
 8000374:	d14a      	bne.n	800040c <__udivmoddi4+0x1cc>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0x140>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80b8 	bhi.w	80004f0 <__udivmoddi4+0x2b0>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0103 	sbc.w	r1, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	468c      	mov	ip, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0a8      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800038e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000394:	f1c2 0320 	rsb	r3, r2, #32
 8000398:	fa20 f603 	lsr.w	r6, r0, r3
 800039c:	4097      	lsls	r7, r2
 800039e:	fa01 f002 	lsl.w	r0, r1, r2
 80003a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a6:	40d9      	lsrs	r1, r3
 80003a8:	4330      	orrs	r0, r6
 80003aa:	0c03      	lsrs	r3, r0, #16
 80003ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b0:	fa1f f887 	uxth.w	r8, r7
 80003b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb06 f108 	mul.w	r1, r6, r8
 80003c0:	4299      	cmp	r1, r3
 80003c2:	fa04 f402 	lsl.w	r4, r4, r2
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x19c>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003ce:	f080 808d 	bcs.w	80004ec <__udivmoddi4+0x2ac>
 80003d2:	4299      	cmp	r1, r3
 80003d4:	f240 808a 	bls.w	80004ec <__udivmoddi4+0x2ac>
 80003d8:	3e02      	subs	r6, #2
 80003da:	443b      	add	r3, r7
 80003dc:	1a5b      	subs	r3, r3, r1
 80003de:	b281      	uxth	r1, r0
 80003e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb00 f308 	mul.w	r3, r0, r8
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x1c4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003fa:	d273      	bcs.n	80004e4 <__udivmoddi4+0x2a4>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d971      	bls.n	80004e4 <__udivmoddi4+0x2a4>
 8000400:	3802      	subs	r0, #2
 8000402:	4439      	add	r1, r7
 8000404:	1acb      	subs	r3, r1, r3
 8000406:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040a:	e778      	b.n	80002fe <__udivmoddi4+0xbe>
 800040c:	f1c6 0c20 	rsb	ip, r6, #32
 8000410:	fa03 f406 	lsl.w	r4, r3, r6
 8000414:	fa22 f30c 	lsr.w	r3, r2, ip
 8000418:	431c      	orrs	r4, r3
 800041a:	fa20 f70c 	lsr.w	r7, r0, ip
 800041e:	fa01 f306 	lsl.w	r3, r1, r6
 8000422:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000426:	fa21 f10c 	lsr.w	r1, r1, ip
 800042a:	431f      	orrs	r7, r3
 800042c:	0c3b      	lsrs	r3, r7, #16
 800042e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000432:	fa1f f884 	uxth.w	r8, r4
 8000436:	fb0e 1119 	mls	r1, lr, r9, r1
 800043a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043e:	fb09 fa08 	mul.w	sl, r9, r8
 8000442:	458a      	cmp	sl, r1
 8000444:	fa02 f206 	lsl.w	r2, r2, r6
 8000448:	fa00 f306 	lsl.w	r3, r0, r6
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x220>
 800044e:	1861      	adds	r1, r4, r1
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000454:	d248      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 8000456:	458a      	cmp	sl, r1
 8000458:	d946      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4421      	add	r1, r4
 8000460:	eba1 010a 	sub.w	r1, r1, sl
 8000464:	b2bf      	uxth	r7, r7
 8000466:	fbb1 f0fe 	udiv	r0, r1, lr
 800046a:	fb0e 1110 	mls	r1, lr, r0, r1
 800046e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45b8      	cmp	r8, r7
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x24a>
 800047a:	19e7      	adds	r7, r4, r7
 800047c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000480:	d22e      	bcs.n	80004e0 <__udivmoddi4+0x2a0>
 8000482:	45b8      	cmp	r8, r7
 8000484:	d92c      	bls.n	80004e0 <__udivmoddi4+0x2a0>
 8000486:	3802      	subs	r0, #2
 8000488:	4427      	add	r7, r4
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba7 0708 	sub.w	r7, r7, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454f      	cmp	r7, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	4649      	mov	r1, r9
 800049c:	d31a      	bcc.n	80004d4 <__udivmoddi4+0x294>
 800049e:	d017      	beq.n	80004d0 <__udivmoddi4+0x290>
 80004a0:	b15d      	cbz	r5, 80004ba <__udivmoddi4+0x27a>
 80004a2:	ebb3 020e 	subs.w	r2, r3, lr
 80004a6:	eb67 0701 	sbc.w	r7, r7, r1
 80004aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ae:	40f2      	lsrs	r2, r6
 80004b0:	ea4c 0202 	orr.w	r2, ip, r2
 80004b4:	40f7      	lsrs	r7, r6
 80004b6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ba:	2600      	movs	r6, #0
 80004bc:	4631      	mov	r1, r6
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e70b      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fd      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d0:	4543      	cmp	r3, r8
 80004d2:	d2e5      	bcs.n	80004a0 <__udivmoddi4+0x260>
 80004d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d8:	eb69 0104 	sbc.w	r1, r9, r4
 80004dc:	3801      	subs	r0, #1
 80004de:	e7df      	b.n	80004a0 <__udivmoddi4+0x260>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e7d2      	b.n	800048a <__udivmoddi4+0x24a>
 80004e4:	4660      	mov	r0, ip
 80004e6:	e78d      	b.n	8000404 <__udivmoddi4+0x1c4>
 80004e8:	4681      	mov	r9, r0
 80004ea:	e7b9      	b.n	8000460 <__udivmoddi4+0x220>
 80004ec:	4666      	mov	r6, ip
 80004ee:	e775      	b.n	80003dc <__udivmoddi4+0x19c>
 80004f0:	4630      	mov	r0, r6
 80004f2:	e74a      	b.n	800038a <__udivmoddi4+0x14a>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	4439      	add	r1, r7
 80004fa:	e713      	b.n	8000324 <__udivmoddi4+0xe4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	443c      	add	r4, r7
 8000500:	e724      	b.n	800034c <__udivmoddi4+0x10c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <pointer_inc>:
volatile int32_t can_buffer_pointer_rx = 0;
volatile int32_t can_buffer_pointer_tx = 0;

uint32_t can_readFrame(void);

uint32_t pointer_inc(uint32_t val, uint32_t size) {
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	6039      	str	r1, [r7, #0]
	return (val + 1) % size;
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	3301      	adds	r3, #1
 8000516:	683a      	ldr	r2, [r7, #0]
 8000518:	fbb3 f2f2 	udiv	r2, r3, r2
 800051c:	6839      	ldr	r1, [r7, #0]
 800051e:	fb01 f202 	mul.w	r2, r1, r2
 8000522:	1a9b      	subs	r3, r3, r2
}
 8000524:	4618      	mov	r0, r3
 8000526:	370c      	adds	r7, #12
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr

08000530 <can_addMsg>:

void can_addMsg(CAN_msg msg) {
 8000530:	b590      	push	{r4, r7, lr}
 8000532:	b085      	sub	sp, #20
 8000534:	af00      	add	r7, sp, #0
 8000536:	463c      	mov	r4, r7
 8000538:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	can_buffer[can_buffer_pointer_tx] = msg;
 800053c:	4b13      	ldr	r3, [pc, #76]	; (800058c <can_addMsg+0x5c>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a13      	ldr	r2, [pc, #76]	; (8000590 <can_addMsg+0x60>)
 8000542:	011b      	lsls	r3, r3, #4
 8000544:	4413      	add	r3, r2
 8000546:	461c      	mov	r4, r3
 8000548:	463b      	mov	r3, r7
 800054a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800054c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	can_buffer_pointer_tx = pointer_inc(can_buffer_pointer_tx, CAN_BUFFER_DEPTH);
 8000550:	4b0e      	ldr	r3, [pc, #56]	; (800058c <can_addMsg+0x5c>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2140      	movs	r1, #64	; 0x40
 8000556:	4618      	mov	r0, r3
 8000558:	f7ff ffd6 	bl	8000508 <pointer_inc>
 800055c:	4603      	mov	r3, r0
 800055e:	461a      	mov	r2, r3
 8000560:	4b0a      	ldr	r3, [pc, #40]	; (800058c <can_addMsg+0x5c>)
 8000562:	601a      	str	r2, [r3, #0]

	if (can_buffer_pointer_tx == can_buffer_pointer_rx) { // indicates overflow
 8000564:	4b09      	ldr	r3, [pc, #36]	; (800058c <can_addMsg+0x5c>)
 8000566:	681a      	ldr	r2, [r3, #0]
 8000568:	4b0a      	ldr	r3, [pc, #40]	; (8000594 <can_addMsg+0x64>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	429a      	cmp	r2, r3
 800056e:	d109      	bne.n	8000584 <can_addMsg+0x54>
		can_buffer_pointer_rx = pointer_inc(can_buffer_pointer_rx, CAN_BUFFER_DEPTH); // skip one msg in the rx buffer
 8000570:	4b08      	ldr	r3, [pc, #32]	; (8000594 <can_addMsg+0x64>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	2140      	movs	r1, #64	; 0x40
 8000576:	4618      	mov	r0, r3
 8000578:	f7ff ffc6 	bl	8000508 <pointer_inc>
 800057c:	4603      	mov	r3, r0
 800057e:	461a      	mov	r2, r3
 8000580:	4b04      	ldr	r3, [pc, #16]	; (8000594 <can_addMsg+0x64>)
 8000582:	601a      	str	r2, [r3, #0]
	}
}
 8000584:	bf00      	nop
 8000586:	3714      	adds	r7, #20
 8000588:	46bd      	mov	sp, r7
 800058a:	bd90      	pop	{r4, r7, pc}
 800058c:	200000a8 	.word	0x200000a8
 8000590:	20007500 	.word	0x20007500
 8000594:	200000a4 	.word	0x200000a4

08000598 <CAN_Config>:

/*
 * Configures CAN protocol for 250kbit/s without interrupt for reading (only polling).
 */
void CAN_Config(uint32_t id)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b08c      	sub	sp, #48	; 0x30
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]

    /*##-1- Configure the CAN peripheral #######################################*/
    // Done in MX_CAN1_Init()

    /*##-2- Configure the CAN Filter ###########################################*/
    sFilterConfig.FilterBank = 0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	61fb      	str	r3, [r7, #28]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80005a4:	2300      	movs	r3, #0
 80005a6:	623b      	str	r3, [r7, #32]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80005a8:	2301      	movs	r3, #1
 80005aa:	627b      	str	r3, [r7, #36]	; 0x24
    sFilterConfig.FilterIdHigh = 0x0000;
 80005ac:	2300      	movs	r3, #0
 80005ae:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterIdLow = 0x0000;
 80005b0:	2300      	movs	r3, #0
 80005b2:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterMaskIdHigh = 0x0000;
 80005b4:	2300      	movs	r3, #0
 80005b6:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterMaskIdLow = 0x0000;
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80005bc:	2300      	movs	r3, #0
 80005be:	61bb      	str	r3, [r7, #24]
    sFilterConfig.FilterActivation = ENABLE;
 80005c0:	2301      	movs	r3, #1
 80005c2:	62bb      	str	r3, [r7, #40]	; 0x28
    sFilterConfig.SlaveStartFilterBank = 14;
 80005c4:	230e      	movs	r3, #14
 80005c6:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 80005c8:	f107 0308 	add.w	r3, r7, #8
 80005cc:	4619      	mov	r1, r3
 80005ce:	4810      	ldr	r0, [pc, #64]	; (8000610 <CAN_Config+0x78>)
 80005d0:	f003 fe54 	bl	800427c <HAL_CAN_ConfigFilter>
        /* Filter configuration Error */
        //      _Error_Handler(__FILE__, __LINE__);
    }

    /*##-3- Start the CAN peripheral ###########################################*/
    if (HAL_CAN_Start(&hcan1) != HAL_OK)
 80005d4:	480e      	ldr	r0, [pc, #56]	; (8000610 <CAN_Config+0x78>)
 80005d6:	f003 ff31 	bl	800443c <HAL_CAN_Start>
        /* Start Error */
        //      _Error_Handler(__FILE__, __LINE__);
    }

    /*##-4- Activate CAN RX notification #######################################*/
    if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80005da:	2102      	movs	r1, #2
 80005dc:	480c      	ldr	r0, [pc, #48]	; (8000610 <CAN_Config+0x78>)
 80005de:	f004 f9aa 	bl	8004936 <HAL_CAN_ActivateNotification>
        /* Notification Error */
    	//_Error_Handler(__FILE__, __LINE__);
    }

    /*##-5- Configure Transmission process #####################################*/
    TxHeader.StdId = id;
 80005e2:	4a0c      	ldr	r2, [pc, #48]	; (8000614 <CAN_Config+0x7c>)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	6013      	str	r3, [r2, #0]
    TxHeader.ExtId = id; // not needed
 80005e8:	4a0a      	ldr	r2, [pc, #40]	; (8000614 <CAN_Config+0x7c>)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	6053      	str	r3, [r2, #4]
    TxHeader.RTR = CAN_RTR_DATA;
 80005ee:	4b09      	ldr	r3, [pc, #36]	; (8000614 <CAN_Config+0x7c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	60da      	str	r2, [r3, #12]
    TxHeader.IDE = CAN_ID_STD;
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <CAN_Config+0x7c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	609a      	str	r2, [r3, #8]
    TxHeader.DLC = 8;
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <CAN_Config+0x7c>)
 80005fc:	2208      	movs	r2, #8
 80005fe:	611a      	str	r2, [r3, #16]
    TxHeader.TransmitGlobalTime = DISABLE;
 8000600:	4b04      	ldr	r3, [pc, #16]	; (8000614 <CAN_Config+0x7c>)
 8000602:	2200      	movs	r2, #0
 8000604:	751a      	strb	r2, [r3, #20]
}
 8000606:	bf00      	nop
 8000608:	3730      	adds	r7, #48	; 0x30
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	20007900 	.word	0x20007900
 8000614:	200074cc 	.word	0x200074cc

08000618 <can_setFrame>:
 * Sends a frame of 8 bytes (payload) on the CAN bus using our predefined protocol.
 * byte 0..3 --> some uint32_t
 * byte 4    --> data_id, see CAN_communication.h
 * byte 5..7 --> timestamp
 */
void can_setFrame(uint32_t data, uint8_t data_id, uint32_t timestamp) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b08e      	sub	sp, #56	; 0x38
 800061c:	af00      	add	r7, sp, #0
 800061e:	60f8      	str	r0, [r7, #12]
 8000620:	460b      	mov	r3, r1
 8000622:	607a      	str	r2, [r7, #4]
 8000624:	72fb      	strb	r3, [r7, #11]
	uint8_t TxData[8] = {0};
 8000626:	2300      	movs	r3, #0
 8000628:	633b      	str	r3, [r7, #48]	; 0x30
 800062a:	2300      	movs	r3, #0
 800062c:	637b      	str	r3, [r7, #52]	; 0x34
	TxData[0] = (uint8_t) (data >> 24);
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	0e1b      	lsrs	r3, r3, #24
 8000632:	b2db      	uxtb	r3, r3
 8000634:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    TxData[1] = (uint8_t) (data >> 16);
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	0c1b      	lsrs	r3, r3, #16
 800063c:	b2db      	uxtb	r3, r3
 800063e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    TxData[2] = (uint8_t) (data >> 8);
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	0a1b      	lsrs	r3, r3, #8
 8000646:	b2db      	uxtb	r3, r3
 8000648:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    TxData[3] = (uint8_t) (data >> 0);
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	b2db      	uxtb	r3, r3
 8000650:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    TxData[4] = data_id;
 8000654:	7afb      	ldrb	r3, [r7, #11]
 8000656:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    TxData[5] = (uint8_t) (timestamp >> 16);
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	0c1b      	lsrs	r3, r3, #16
 800065e:	b2db      	uxtb	r3, r3
 8000660:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    TxData[6] = (uint8_t) (timestamp >> 8);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	0a1b      	lsrs	r3, r3, #8
 8000668:	b2db      	uxtb	r3, r3
 800066a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    TxData[7] = (uint8_t) (timestamp >> 0);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	b2db      	uxtb	r3, r3
 8000672:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	while (HAL_CAN_IsTxMessagePending(&hcan1, TxMailbox)) {
 8000676:	e002      	b.n	800067e <can_setFrame+0x66>
		osDelay(1);
 8000678:	2001      	movs	r0, #1
 800067a:	f009 f97b 	bl	8009974 <osDelay>
	while (HAL_CAN_IsTxMessagePending(&hcan1, TxMailbox)) {
 800067e:	4b13      	ldr	r3, [pc, #76]	; (80006cc <can_setFrame+0xb4>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4619      	mov	r1, r3
 8000684:	4812      	ldr	r0, [pc, #72]	; (80006d0 <can_setFrame+0xb8>)
 8000686:	f003 fff8 	bl	800467a <HAL_CAN_IsTxMessagePending>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d1f3      	bne.n	8000678 <can_setFrame+0x60>
	} // wait for CAN to be ready

	CAN_msg message = (CAN_msg) {data, data_id, timestamp, TxHeader.StdId};
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	623b      	str	r3, [r7, #32]
 8000694:	7afb      	ldrb	r3, [r7, #11]
 8000696:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	62bb      	str	r3, [r7, #40]	; 0x28
 800069e:	4b0d      	ldr	r3, [pc, #52]	; (80006d4 <can_setFrame+0xbc>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) == HAL_OK) {
 80006a4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80006a8:	4b08      	ldr	r3, [pc, #32]	; (80006cc <can_setFrame+0xb4>)
 80006aa:	490a      	ldr	r1, [pc, #40]	; (80006d4 <can_setFrame+0xbc>)
 80006ac:	4808      	ldr	r0, [pc, #32]	; (80006d0 <can_setFrame+0xb8>)
 80006ae:	f003 ff09 	bl	80044c4 <HAL_CAN_AddTxMessage>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d104      	bne.n	80006c2 <can_setFrame+0xaa>
    	can_addMsg(message);
 80006b8:	f107 0320 	add.w	r3, r7, #32
 80006bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006be:	f7ff ff37 	bl	8000530 <can_addMsg>

    } else { // something bad happen
    	// not sure what to do
    }
}
 80006c2:	bf00      	nop
 80006c4:	3738      	adds	r7, #56	; 0x38
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	200074c0 	.word	0x200074c0
 80006d0:	20007900 	.word	0x20007900
 80006d4:	200074cc 	.word	0x200074cc

080006d8 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
	can_readFrame();
 80006e0:	f000 f858 	bl	8000794 <can_readFrame>
	can_addMsg(can_current_msg);
 80006e4:	4b03      	ldr	r3, [pc, #12]	; (80006f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 80006e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006e8:	f7ff ff22 	bl	8000530 <can_addMsg>
}
 80006ec:	bf00      	nop
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	200074b0 	.word	0x200074b0

080006f8 <can_msgPending>:

uint32_t can_msgPending() {
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
	int32_t diff = can_buffer_pointer_tx - can_buffer_pointer_rx;
 80006fe:	4b09      	ldr	r3, [pc, #36]	; (8000724 <can_msgPending+0x2c>)
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <can_msgPending+0x30>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	1ad3      	subs	r3, r2, r3
 8000708:	607b      	str	r3, [r7, #4]
	if (diff < 0) {
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	2b00      	cmp	r3, #0
 800070e:	da02      	bge.n	8000716 <can_msgPending+0x1e>
		diff += CAN_BUFFER_DEPTH;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	3340      	adds	r3, #64	; 0x40
 8000714:	607b      	str	r3, [r7, #4]
	}

	return diff;
 8000716:	687b      	ldr	r3, [r7, #4]
}
 8000718:	4618      	mov	r0, r3
 800071a:	370c      	adds	r7, #12
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr
 8000724:	200000a8 	.word	0x200000a8
 8000728:	200000a4 	.word	0x200000a4

0800072c <can_readBuffer>:

CAN_msg can_readBuffer() {
 800072c:	b590      	push	{r4, r7, lr}
 800072e:	b087      	sub	sp, #28
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
	CAN_msg ret = {0};
 8000734:	f107 0308 	add.w	r3, r7, #8
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]

	if (can_msgPending() > 0) {
 8000742:	f7ff ffd9 	bl	80006f8 <can_msgPending>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d013      	beq.n	8000774 <can_readBuffer+0x48>
		ret = can_buffer[can_buffer_pointer_rx];
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <can_readBuffer+0x60>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a0f      	ldr	r2, [pc, #60]	; (8000790 <can_readBuffer+0x64>)
 8000752:	011b      	lsls	r3, r3, #4
 8000754:	4413      	add	r3, r2
 8000756:	f107 0408 	add.w	r4, r7, #8
 800075a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800075c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		can_buffer_pointer_rx = pointer_inc(can_buffer_pointer_rx, CAN_BUFFER_DEPTH);
 8000760:	4b0a      	ldr	r3, [pc, #40]	; (800078c <can_readBuffer+0x60>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2140      	movs	r1, #64	; 0x40
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff fece 	bl	8000508 <pointer_inc>
 800076c:	4603      	mov	r3, r0
 800076e:	461a      	mov	r2, r3
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <can_readBuffer+0x60>)
 8000772:	601a      	str	r2, [r3, #0]
	} else { // no message actually pending
		// do nothing, will return the {0} CAN_msg
	}


	return ret;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	461c      	mov	r4, r3
 8000778:	f107 0308 	add.w	r3, r7, #8
 800077c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800077e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8000782:	6878      	ldr	r0, [r7, #4]
 8000784:	371c      	adds	r7, #28
 8000786:	46bd      	mov	sp, r7
 8000788:	bd90      	pop	{r4, r7, pc}
 800078a:	bf00      	nop
 800078c:	200000a4 	.word	0x200000a4
 8000790:	20007500 	.word	0x20007500

08000794 <can_readFrame>:
 *
 * byte 0..3 --> some uint32_t
 * byte 4    --> data_id, see CAN_communication.h
 * byte 5..7 --> timestamp
 */
uint32_t can_readFrame(void) {
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
    uint32_t fill_level = HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0);
 800079a:	2100      	movs	r1, #0
 800079c:	482a      	ldr	r0, [pc, #168]	; (8000848 <can_readFrame+0xb4>)
 800079e:	f004 f8a2 	bl	80048e6 <HAL_CAN_GetRxFifoFillLevel>
 80007a2:	6078      	str	r0, [r7, #4]
    if (fill_level > 0) {
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d049      	beq.n	800083e <can_readFrame+0xaa>
        HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData);
 80007aa:	4b28      	ldr	r3, [pc, #160]	; (800084c <can_readFrame+0xb8>)
 80007ac:	4a28      	ldr	r2, [pc, #160]	; (8000850 <can_readFrame+0xbc>)
 80007ae:	2100      	movs	r1, #0
 80007b0:	4825      	ldr	r0, [pc, #148]	; (8000848 <can_readFrame+0xb4>)
 80007b2:	f003 ff86 	bl	80046c2 <HAL_CAN_GetRxMessage>

        can_current_msg.data = 0;
 80007b6:	4b27      	ldr	r3, [pc, #156]	; (8000854 <can_readFrame+0xc0>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
        can_current_msg.data += (uint32_t) RxData[0] << 24;
 80007bc:	4b25      	ldr	r3, [pc, #148]	; (8000854 <can_readFrame+0xc0>)
 80007be:	681a      	ldr	r2, [r3, #0]
 80007c0:	4b22      	ldr	r3, [pc, #136]	; (800084c <can_readFrame+0xb8>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	061b      	lsls	r3, r3, #24
 80007c6:	4413      	add	r3, r2
 80007c8:	4a22      	ldr	r2, [pc, #136]	; (8000854 <can_readFrame+0xc0>)
 80007ca:	6013      	str	r3, [r2, #0]
        can_current_msg.data += (uint32_t) RxData[1] << 16;
 80007cc:	4b21      	ldr	r3, [pc, #132]	; (8000854 <can_readFrame+0xc0>)
 80007ce:	681a      	ldr	r2, [r3, #0]
 80007d0:	4b1e      	ldr	r3, [pc, #120]	; (800084c <can_readFrame+0xb8>)
 80007d2:	785b      	ldrb	r3, [r3, #1]
 80007d4:	041b      	lsls	r3, r3, #16
 80007d6:	4413      	add	r3, r2
 80007d8:	4a1e      	ldr	r2, [pc, #120]	; (8000854 <can_readFrame+0xc0>)
 80007da:	6013      	str	r3, [r2, #0]
        can_current_msg.data += (uint32_t) RxData[2] << 8;
 80007dc:	4b1d      	ldr	r3, [pc, #116]	; (8000854 <can_readFrame+0xc0>)
 80007de:	681a      	ldr	r2, [r3, #0]
 80007e0:	4b1a      	ldr	r3, [pc, #104]	; (800084c <can_readFrame+0xb8>)
 80007e2:	789b      	ldrb	r3, [r3, #2]
 80007e4:	021b      	lsls	r3, r3, #8
 80007e6:	4413      	add	r3, r2
 80007e8:	4a1a      	ldr	r2, [pc, #104]	; (8000854 <can_readFrame+0xc0>)
 80007ea:	6013      	str	r3, [r2, #0]
		can_current_msg.data += (uint32_t) RxData[3] << 0;
 80007ec:	4b19      	ldr	r3, [pc, #100]	; (8000854 <can_readFrame+0xc0>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a16      	ldr	r2, [pc, #88]	; (800084c <can_readFrame+0xb8>)
 80007f2:	78d2      	ldrb	r2, [r2, #3]
 80007f4:	4413      	add	r3, r2
 80007f6:	4a17      	ldr	r2, [pc, #92]	; (8000854 <can_readFrame+0xc0>)
 80007f8:	6013      	str	r3, [r2, #0]

        can_current_msg.id = RxData[4];
 80007fa:	4b14      	ldr	r3, [pc, #80]	; (800084c <can_readFrame+0xb8>)
 80007fc:	791a      	ldrb	r2, [r3, #4]
 80007fe:	4b15      	ldr	r3, [pc, #84]	; (8000854 <can_readFrame+0xc0>)
 8000800:	711a      	strb	r2, [r3, #4]

        can_current_msg.timestamp = 0;
 8000802:	4b14      	ldr	r3, [pc, #80]	; (8000854 <can_readFrame+0xc0>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
        can_current_msg.timestamp += (uint32_t) RxData[5] << 16;
 8000808:	4b12      	ldr	r3, [pc, #72]	; (8000854 <can_readFrame+0xc0>)
 800080a:	689a      	ldr	r2, [r3, #8]
 800080c:	4b0f      	ldr	r3, [pc, #60]	; (800084c <can_readFrame+0xb8>)
 800080e:	795b      	ldrb	r3, [r3, #5]
 8000810:	041b      	lsls	r3, r3, #16
 8000812:	4413      	add	r3, r2
 8000814:	4a0f      	ldr	r2, [pc, #60]	; (8000854 <can_readFrame+0xc0>)
 8000816:	6093      	str	r3, [r2, #8]
        can_current_msg.timestamp += (uint32_t) RxData[6] << 8;
 8000818:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <can_readFrame+0xc0>)
 800081a:	689a      	ldr	r2, [r3, #8]
 800081c:	4b0b      	ldr	r3, [pc, #44]	; (800084c <can_readFrame+0xb8>)
 800081e:	799b      	ldrb	r3, [r3, #6]
 8000820:	021b      	lsls	r3, r3, #8
 8000822:	4413      	add	r3, r2
 8000824:	4a0b      	ldr	r2, [pc, #44]	; (8000854 <can_readFrame+0xc0>)
 8000826:	6093      	str	r3, [r2, #8]
		can_current_msg.timestamp += (uint32_t) RxData[7] << 0;
 8000828:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <can_readFrame+0xc0>)
 800082a:	689b      	ldr	r3, [r3, #8]
 800082c:	4a07      	ldr	r2, [pc, #28]	; (800084c <can_readFrame+0xb8>)
 800082e:	79d2      	ldrb	r2, [r2, #7]
 8000830:	4413      	add	r3, r2
 8000832:	4a08      	ldr	r2, [pc, #32]	; (8000854 <can_readFrame+0xc0>)
 8000834:	6093      	str	r3, [r2, #8]

        can_current_msg.id_CAN = RxHeader.StdId;
 8000836:	4b06      	ldr	r3, [pc, #24]	; (8000850 <can_readFrame+0xbc>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4a06      	ldr	r2, [pc, #24]	; (8000854 <can_readFrame+0xc0>)
 800083c:	60d3      	str	r3, [r2, #12]
    }
    return fill_level;
 800083e:	687b      	ldr	r3, [r7, #4]
}
 8000840:	4618      	mov	r0, r3
 8000842:	3708      	adds	r7, #8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20007900 	.word	0x20007900
 800084c:	200074c4 	.word	0x200074c4
 8000850:	200074e4 	.word	0x200074e4
 8000854:	200074b0 	.word	0x200074b0

08000858 <can_init>:


void can_init(void) {
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
	CAN_Config(CAN_ID_PROPULSION_BOARD);
 800085c:	2005      	movs	r0, #5
 800085e:	f7ff fe9b 	bl	8000598 <CAN_Config>
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
	...

08000868 <can_send_thread>:


void can_send_thread(void * arg) {
 8000868:	b580      	push	{r7, lr}
 800086a:	b090      	sub	sp, #64	; 0x40
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
	static TickType_t last_wake_time;
	static const TickType_t period = pdMS_TO_TICKS(CAN_HEART_BEAT);

	last_wake_time = xTaskGetTickCount();
 8000870:	f00a f91e 	bl	800aab0 <xTaskGetTickCount>
 8000874:	4603      	mov	r3, r0
 8000876:	4a1f      	ldr	r2, [pc, #124]	; (80008f4 <can_send_thread+0x8c>)
 8000878:	6013      	str	r3, [r2, #0]


	for(;;) {

		//SEND DATA HERE
		CM4_PAYLOAD_COMMAND_t cmd = control_get_cmd();
 800087a:	f107 030c 	add.w	r3, r7, #12
 800087e:	4618      	mov	r0, r3
 8000880:	f000 ff9e 	bl	80017c0 <control_get_cmd>
		can_setFrame((uint32_t) cmd.thrust, DATA_ID_THRUST_CMD, cmd.timestamp);
 8000884:	693b      	ldr	r3, [r7, #16]
 8000886:	4618      	mov	r0, r3
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	461a      	mov	r2, r3
 800088c:	2164      	movs	r1, #100	; 0x64
 800088e:	f7ff fec3 	bl	8000618 <can_setFrame>
		can_setFrame((uint32_t) cmd.dynamixel[0], DATA_ID_VANE_CMD_1, cmd.timestamp);
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	4618      	mov	r0, r3
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	461a      	mov	r2, r3
 800089a:	2165      	movs	r1, #101	; 0x65
 800089c:	f7ff febc 	bl	8000618 <can_setFrame>
		can_setFrame((uint32_t) cmd.dynamixel[1], DATA_ID_VANE_CMD_2, cmd.timestamp);
 80008a0:	69bb      	ldr	r3, [r7, #24]
 80008a2:	4618      	mov	r0, r3
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	461a      	mov	r2, r3
 80008a8:	2166      	movs	r1, #102	; 0x66
 80008aa:	f7ff feb5 	bl	8000618 <can_setFrame>
		can_setFrame((uint32_t) cmd.dynamixel[2], DATA_ID_VANE_CMD_3, cmd.timestamp);
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	4618      	mov	r0, r3
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	461a      	mov	r2, r3
 80008b6:	2167      	movs	r1, #103	; 0x67
 80008b8:	f7ff feae 	bl	8000618 <can_setFrame>
		can_setFrame((uint32_t) cmd.dynamixel[3], DATA_ID_VANE_CMD_4, cmd.timestamp);
 80008bc:	6a3b      	ldr	r3, [r7, #32]
 80008be:	4618      	mov	r0, r3
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	461a      	mov	r2, r3
 80008c4:	2168      	movs	r1, #104	; 0x68
 80008c6:	f7ff fea7 	bl	8000618 <can_setFrame>
		can_setFrame((uint32_t) cmd.position[2], DATA_ID_KALMAN_Z, cmd.timestamp);
 80008ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008cc:	4618      	mov	r0, r3
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	461a      	mov	r2, r3
 80008d2:	212a      	movs	r1, #42	; 0x2a
 80008d4:	f7ff fea0 	bl	8000618 <can_setFrame>
		can_setFrame((uint32_t) cmd.speed[2], DATA_ID_KALMAN_VZ, cmd.timestamp);
 80008d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008da:	4618      	mov	r0, r3
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	461a      	mov	r2, r3
 80008e0:	212d      	movs	r1, #45	; 0x2d
 80008e2:	f7ff fe99 	bl	8000618 <can_setFrame>



		vTaskDelayUntil( &last_wake_time, period );
 80008e6:	4b04      	ldr	r3, [pc, #16]	; (80008f8 <can_send_thread+0x90>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4619      	mov	r1, r3
 80008ec:	4801      	ldr	r0, [pc, #4]	; (80008f4 <can_send_thread+0x8c>)
 80008ee:	f009 ff21 	bl	800a734 <vTaskDelayUntil>
	for(;;) {
 80008f2:	e7c2      	b.n	800087a <can_send_thread+0x12>
 80008f4:	200000ac 	.word	0x200000ac
 80008f8:	0800ba68 	.word	0x0800ba68

080008fc <util_encode_u32>:
	data[0] = value;
	data[1] = value>>8;
	data[2] = 0x00;
	data[3] = 0x00;
}
static inline void util_encode_u32(uint8_t * data, uint32_t value) {
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
 8000904:	6039      	str	r1, [r7, #0]
	data[0] = value;
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	b2da      	uxtb	r2, r3
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	701a      	strb	r2, [r3, #0]
	data[1] = value>>8;
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	0a1a      	lsrs	r2, r3, #8
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	3301      	adds	r3, #1
 8000916:	b2d2      	uxtb	r2, r2
 8000918:	701a      	strb	r2, [r3, #0]
	data[2] = value>>16;
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	0c1a      	lsrs	r2, r3, #16
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	3302      	adds	r3, #2
 8000922:	b2d2      	uxtb	r2, r2
 8000924:	701a      	strb	r2, [r3, #0]
	data[3] = value>>24;
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	0e1a      	lsrs	r2, r3, #24
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	3303      	adds	r3, #3
 800092e:	b2d2      	uxtb	r2, r2
 8000930:	701a      	strb	r2, [r3, #0]
}
 8000932:	bf00      	nop
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr

0800093e <util_encode_i32>:
	data[0] = value;
	data[1] = value>>8;
	data[2] = 0x00;
	data[3] = 0x00;
}
static inline void util_encode_i32(uint8_t * data, int32_t value) {
 800093e:	b480      	push	{r7}
 8000940:	b083      	sub	sp, #12
 8000942:	af00      	add	r7, sp, #0
 8000944:	6078      	str	r0, [r7, #4]
 8000946:	6039      	str	r1, [r7, #0]
	data[0] = value;
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	b2da      	uxtb	r2, r3
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	701a      	strb	r2, [r3, #0]
	data[1] = value>>8;
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	121a      	asrs	r2, r3, #8
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	3301      	adds	r3, #1
 8000958:	b2d2      	uxtb	r2, r2
 800095a:	701a      	strb	r2, [r3, #0]
	data[2] = value>>16;
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	141a      	asrs	r2, r3, #16
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	3302      	adds	r3, #2
 8000964:	b2d2      	uxtb	r2, r2
 8000966:	701a      	strb	r2, [r3, #0]
	data[3] = value>>24;
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	161a      	asrs	r2, r3, #24
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	3303      	adds	r3, #3
 8000970:	b2d2      	uxtb	r2, r2
 8000972:	701a      	strb	r2, [r3, #0]
}
 8000974:	bf00      	nop
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <util_decode_u16>:

static inline uint8_t util_decode_u8(uint8_t * data) {
	return data[0];
}

static inline uint16_t util_decode_u16(uint8_t * data) {
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
	return (uint16_t) data[0] | data[1] << 8;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	b21a      	sxth	r2, r3
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	3301      	adds	r3, #1
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	021b      	lsls	r3, r3, #8
 8000996:	b21b      	sxth	r3, r3
 8000998:	4313      	orrs	r3, r2
 800099a:	b21b      	sxth	r3, r3
 800099c:	b29b      	uxth	r3, r3
}
 800099e:	4618      	mov	r0, r3
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr

080009aa <util_decode_u32>:

static inline uint32_t util_decode_u32(uint8_t * data) {
 80009aa:	b480      	push	{r7}
 80009ac:	b083      	sub	sp, #12
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	6078      	str	r0, [r7, #4]
	return (uint32_t) data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	461a      	mov	r2, r3
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	3301      	adds	r3, #1
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	021b      	lsls	r3, r3, #8
 80009c0:	4313      	orrs	r3, r2
 80009c2:	687a      	ldr	r2, [r7, #4]
 80009c4:	3202      	adds	r2, #2
 80009c6:	7812      	ldrb	r2, [r2, #0]
 80009c8:	0412      	lsls	r2, r2, #16
 80009ca:	4313      	orrs	r3, r2
 80009cc:	687a      	ldr	r2, [r7, #4]
 80009ce:	3203      	adds	r2, #3
 80009d0:	7812      	ldrb	r2, [r2, #0]
 80009d2:	0612      	lsls	r2, r2, #24
 80009d4:	4313      	orrs	r3, r2
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr

080009e2 <util_decode_i32>:

static inline int16_t util_decode_i16(uint8_t * data) {
	return (int16_t) data[0] | data[1] << 8;
}

static inline int32_t util_decode_i32(uint8_t * data) {
 80009e2:	b480      	push	{r7}
 80009e4:	b083      	sub	sp, #12
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
	return (int32_t) data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	461a      	mov	r2, r3
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	3301      	adds	r3, #1
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	021b      	lsls	r3, r3, #8
 80009f8:	431a      	orrs	r2, r3
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	3302      	adds	r3, #2
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	041b      	lsls	r3, r3, #16
 8000a02:	431a      	orrs	r2, r3
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	3303      	adds	r3, #3
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	061b      	lsls	r3, r3, #24
 8000a0c:	4313      	orrs	r3, r2
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
	...

08000a1c <cm4_global_init>:

/**********************
 *	DECLARATIONS
 **********************/

void cm4_global_init(void) {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
	cm4_busy_sem = xSemaphoreCreateMutexStatic(&cm4_busy_sem_buffer);
 8000a20:	4904      	ldr	r1, [pc, #16]	; (8000a34 <cm4_global_init+0x18>)
 8000a22:	2001      	movs	r0, #1
 8000a24:	f009 f983 	bl	8009d2e <xQueueCreateMutexStatic>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	4a03      	ldr	r2, [pc, #12]	; (8000a38 <cm4_global_init+0x1c>)
 8000a2c:	6013      	str	r3, [r2, #0]
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	200000b4 	.word	0x200000b4
 8000a38:	200000b0 	.word	0x200000b0

08000a3c <cm4_init>:

void cm4_init(CM4_INST_t * cm4) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af02      	add	r7, sp, #8
 8000a42:	6078      	str	r0, [r7, #4]
	static uint32_t id_counter = 0;
	cm4->id = id_counter++;
 8000a44:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <cm4_init+0x68>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	1c5a      	adds	r2, r3, #1
 8000a4a:	4916      	ldr	r1, [pc, #88]	; (8000aa4 <cm4_init+0x68>)
 8000a4c:	600a      	str	r2, [r1, #0]
 8000a4e:	687a      	ldr	r2, [r7, #4]
 8000a50:	6013      	str	r3, [r2, #0]
	cm4->garbage_counter = 0;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	f503 53a4 	add.w	r3, r3, #5248	; 0x1480
 8000a58:	3304      	adds	r3, #4
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	801a      	strh	r2, [r3, #0]
	cm4->rx_sem = xSemaphoreCreateBinaryStatic(&cm4->rx_sem_buffer);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8000a64:	331c      	adds	r3, #28
 8000a66:	2203      	movs	r2, #3
 8000a68:	9200      	str	r2, [sp, #0]
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	2001      	movs	r0, #1
 8000a70:	f009 f8b0 	bl	8009bd4 <xQueueGenericCreateStatic>
 8000a74:	4602      	mov	r2, r0
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8000a7c:	3318      	adds	r3, #24
 8000a7e:	601a      	str	r2, [r3, #0]
	msv2_init(&cm4->msv2);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	3304      	adds	r3, #4
 8000a84:	4618      	mov	r0, r3
 8000a86:	f001 fbef 	bl	8002268 <msv2_init>
	serial_init(&cm4->ser, &CM4_UART, cm4, cm4_decode_fcn);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	f503 5080 	add.w	r0, r3, #4096	; 0x1000
 8000a90:	3018      	adds	r0, #24
 8000a92:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <cm4_init+0x6c>)
 8000a94:	687a      	ldr	r2, [r7, #4]
 8000a96:	4905      	ldr	r1, [pc, #20]	; (8000aac <cm4_init+0x70>)
 8000a98:	f001 feba 	bl	8002810 <serial_init>


}
 8000a9c:	bf00      	nop
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	200000fc 	.word	0x200000fc
 8000aa8:	08000ab1 	.word	0x08000ab1
 8000aac:	20008000 	.word	0x20008000

08000ab0 <cm4_decode_fcn>:


SERIAL_RET_t cm4_decode_fcn(void * inst, uint8_t data) {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
 8000ab8:	460b      	mov	r3, r1
 8000aba:	70fb      	strb	r3, [r7, #3]
	CM4_INST_t * cm4 = (CM4_INST_t *) inst;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	60fb      	str	r3, [r7, #12]
	MSV2_ERROR_t tmp = msv2_decode_fragment(&cm4->msv2, data);
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	3304      	adds	r3, #4
 8000ac4:	78fa      	ldrb	r2, [r7, #3]
 8000ac6:	4611      	mov	r1, r2
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f001 fcc7 	bl	800245c <msv2_decode_fragment>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	72fb      	strb	r3, [r7, #11]
	if(tmp == MSV2_SUCCESS || tmp == MSV2_WRONG_CRC) {
 8000ad2:	7afb      	ldrb	r3, [r7, #11]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d002      	beq.n	8000ade <cm4_decode_fcn+0x2e>
 8000ad8:	7afb      	ldrb	r3, [r7, #11]
 8000ada:	2b02      	cmp	r3, #2
 8000adc:	d112      	bne.n	8000b04 <cm4_decode_fcn+0x54>
		if(cm4->msv2.rx.opcode & 0x80) { //CM4 is master
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	7a1b      	ldrb	r3, [r3, #8]
 8000ae2:	b25b      	sxtb	r3, r3
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	da03      	bge.n	8000af0 <cm4_decode_fcn+0x40>
			cm4_generate_response(cm4);
 8000ae8:	68f8      	ldr	r0, [r7, #12]
 8000aea:	f000 f811 	bl	8000b10 <cm4_generate_response>
 8000aee:	e009      	b.n	8000b04 <cm4_decode_fcn+0x54>
		} else { //HB is master
			xSemaphoreGive(cm4->rx_sem);
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8000af6:	3318      	adds	r3, #24
 8000af8:	6818      	ldr	r0, [r3, #0]
 8000afa:	2300      	movs	r3, #0
 8000afc:	2200      	movs	r2, #0
 8000afe:	2100      	movs	r1, #0
 8000b00:	f009 f930 	bl	8009d64 <xQueueGenericSend>
		}

	}
	return tmp;
 8000b04:	7afb      	ldrb	r3, [r7, #11]
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3710      	adds	r7, #16
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
	...

08000b10 <cm4_generate_response>:

void cm4_generate_response(CM4_INST_t * cm4) {
 8000b10:	b590      	push	{r4, r7, lr}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
	static uint8_t send_data[MSV2_MAX_DATA_LEN];
	static uint16_t length = 0;
	static uint16_t bin_length = 0;
	uint8_t opcode = cm4->msv2.rx.opcode;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	7a1b      	ldrb	r3, [r3, #8]
 8000b1c:	73fb      	strb	r3, [r7, #15]
	opcode &= ~CM4_SALVE_PREFIX;
 8000b1e:	7bfb      	ldrb	r3, [r7, #15]
 8000b20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b24:	73fb      	strb	r3, [r7, #15]
	if(opcode < response_fcn_max) {
 8000b26:	7bfb      	ldrb	r3, [r7, #15]
 8000b28:	b29a      	uxth	r2, r3
 8000b2a:	4b2f      	ldr	r3, [pc, #188]	; (8000be8 <cm4_generate_response+0xd8>)
 8000b2c:	881b      	ldrh	r3, [r3, #0]
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	d22c      	bcs.n	8000b8c <cm4_generate_response+0x7c>
		response_fcn[opcode](cm4->msv2.rx.data, cm4->msv2.rx.length, send_data, &length);
 8000b32:	7bfb      	ldrb	r3, [r7, #15]
 8000b34:	4a2d      	ldr	r2, [pc, #180]	; (8000bec <cm4_generate_response+0xdc>)
 8000b36:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	f103 0012 	add.w	r0, r3, #18
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	89d9      	ldrh	r1, [r3, #14]
 8000b44:	4b2a      	ldr	r3, [pc, #168]	; (8000bf0 <cm4_generate_response+0xe0>)
 8000b46:	4a2b      	ldr	r2, [pc, #172]	; (8000bf4 <cm4_generate_response+0xe4>)
 8000b48:	47a0      	blx	r4
		//length is in words
		bin_length = msv2_create_frame(&cm4->msv2, cm4->msv2.rx.opcode, length/2, send_data);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	1d18      	adds	r0, r3, #4
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	7a19      	ldrb	r1, [r3, #8]
 8000b52:	4b27      	ldr	r3, [pc, #156]	; (8000bf0 <cm4_generate_response+0xe0>)
 8000b54:	881b      	ldrh	r3, [r3, #0]
 8000b56:	085b      	lsrs	r3, r3, #1
 8000b58:	b29b      	uxth	r3, r3
 8000b5a:	b2da      	uxtb	r2, r3
 8000b5c:	4b25      	ldr	r3, [pc, #148]	; (8000bf4 <cm4_generate_response+0xe4>)
 8000b5e:	f001 fb97 	bl	8002290 <msv2_create_frame>
 8000b62:	4603      	mov	r3, r0
 8000b64:	461a      	mov	r2, r3
 8000b66:	4b24      	ldr	r3, [pc, #144]	; (8000bf8 <cm4_generate_response+0xe8>)
 8000b68:	801a      	strh	r2, [r3, #0]
		serial_send(&cm4->ser, msv2_tx_data(&cm4->msv2), bin_length);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	f503 5480 	add.w	r4, r3, #4096	; 0x1000
 8000b70:	3418      	adds	r4, #24
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	3304      	adds	r3, #4
 8000b76:	4618      	mov	r0, r3
 8000b78:	f001 fd64 	bl	8002644 <msv2_tx_data>
 8000b7c:	4601      	mov	r1, r0
 8000b7e:	4b1e      	ldr	r3, [pc, #120]	; (8000bf8 <cm4_generate_response+0xe8>)
 8000b80:	881b      	ldrh	r3, [r3, #0]
 8000b82:	461a      	mov	r2, r3
 8000b84:	4620      	mov	r0, r4
 8000b86:	f001 fe83 	bl	8002890 <serial_send>
		send_data[1] = MSV2_CRC_ERROR_HI;
		length = 2;
		bin_length = msv2_create_frame(&cm4->msv2, cm4->msv2.rx.opcode, length/2, send_data);
		serial_send(&cm4->ser, msv2_tx_data(&cm4->msv2), bin_length);
	}
}
 8000b8a:	e028      	b.n	8000bde <cm4_generate_response+0xce>
		send_data[0] = MSV2_CRC_ERROR_LO;
 8000b8c:	4b19      	ldr	r3, [pc, #100]	; (8000bf4 <cm4_generate_response+0xe4>)
 8000b8e:	22be      	movs	r2, #190	; 0xbe
 8000b90:	701a      	strb	r2, [r3, #0]
		send_data[1] = MSV2_CRC_ERROR_HI;
 8000b92:	4b18      	ldr	r3, [pc, #96]	; (8000bf4 <cm4_generate_response+0xe4>)
 8000b94:	22eb      	movs	r2, #235	; 0xeb
 8000b96:	705a      	strb	r2, [r3, #1]
		length = 2;
 8000b98:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <cm4_generate_response+0xe0>)
 8000b9a:	2202      	movs	r2, #2
 8000b9c:	801a      	strh	r2, [r3, #0]
		bin_length = msv2_create_frame(&cm4->msv2, cm4->msv2.rx.opcode, length/2, send_data);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	1d18      	adds	r0, r3, #4
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	7a19      	ldrb	r1, [r3, #8]
 8000ba6:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <cm4_generate_response+0xe0>)
 8000ba8:	881b      	ldrh	r3, [r3, #0]
 8000baa:	085b      	lsrs	r3, r3, #1
 8000bac:	b29b      	uxth	r3, r3
 8000bae:	b2da      	uxtb	r2, r3
 8000bb0:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <cm4_generate_response+0xe4>)
 8000bb2:	f001 fb6d 	bl	8002290 <msv2_create_frame>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	461a      	mov	r2, r3
 8000bba:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <cm4_generate_response+0xe8>)
 8000bbc:	801a      	strh	r2, [r3, #0]
		serial_send(&cm4->ser, msv2_tx_data(&cm4->msv2), bin_length);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	f503 5480 	add.w	r4, r3, #4096	; 0x1000
 8000bc4:	3418      	adds	r4, #24
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	3304      	adds	r3, #4
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f001 fd3a 	bl	8002644 <msv2_tx_data>
 8000bd0:	4601      	mov	r1, r0
 8000bd2:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <cm4_generate_response+0xe8>)
 8000bd4:	881b      	ldrh	r3, [r3, #0]
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	4620      	mov	r0, r4
 8000bda:	f001 fe59 	bl	8002890 <serial_send>
}
 8000bde:	bf00      	nop
 8000be0:	3714      	adds	r7, #20
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd90      	pop	{r4, r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000008 	.word	0x20000008
 8000bec:	20000000 	.word	0x20000000
 8000bf0:	20000300 	.word	0x20000300
 8000bf4:	20000100 	.word	0x20000100
 8000bf8:	20000302 	.word	0x20000302

08000bfc <cm4_response_ping>:

static void cm4_response_ping(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 8000bfc:	b480      	push	{r7}
 8000bfe:	b085      	sub	sp, #20
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	607a      	str	r2, [r7, #4]
 8000c06:	603b      	str	r3, [r7, #0]
 8000c08:	460b      	mov	r3, r1
 8000c0a:	817b      	strh	r3, [r7, #10]
	resp[0] = MSV2_OK_LO;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	22c5      	movs	r2, #197	; 0xc5
 8000c10:	701a      	strb	r2, [r3, #0]
	resp[1] = MSV2_OK_HI;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	3301      	adds	r3, #1
 8000c16:	225c      	movs	r2, #92	; 0x5c
 8000c18:	701a      	strb	r2, [r3, #0]
	*resp_len = 2;
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	2202      	movs	r2, #2
 8000c1e:	801a      	strh	r2, [r3, #0]
}
 8000c20:	bf00      	nop
 8000c22:	3714      	adds	r7, #20
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <cm4_response_command>:

static void cm4_response_command(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 8000c2c:	b5b0      	push	{r4, r5, r7, lr}
 8000c2e:	b09c      	sub	sp, #112	; 0x70
 8000c30:	af0a      	add	r7, sp, #40	; 0x28
 8000c32:	60f8      	str	r0, [r7, #12]
 8000c34:	607a      	str	r2, [r7, #4]
 8000c36:	603b      	str	r3, [r7, #0]
 8000c38:	460b      	mov	r3, r1
 8000c3a:	817b      	strh	r3, [r7, #10]
	CM4_PAYLOAD_COMMAND_t cmd = {0};
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	2234      	movs	r2, #52	; 0x34
 8000c42:	2100      	movs	r1, #0
 8000c44:	4618      	mov	r0, r3
 8000c46:	f00a fed1 	bl	800b9ec <memset>
	if(data_len == 50) {
 8000c4a:	897b      	ldrh	r3, [r7, #10]
 8000c4c:	2b32      	cmp	r3, #50	; 0x32
 8000c4e:	d172      	bne.n	8000d36 <cm4_response_command+0x10a>
		cmd.timestamp = util_decode_u32(data);
 8000c50:	68f8      	ldr	r0, [r7, #12]
 8000c52:	f7ff feaa 	bl	80009aa <util_decode_u32>
 8000c56:	4603      	mov	r3, r0
 8000c58:	617b      	str	r3, [r7, #20]
		cmd.thrust = util_decode_i32(data+4);
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	3304      	adds	r3, #4
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff febf 	bl	80009e2 <util_decode_i32>
 8000c64:	4603      	mov	r3, r0
 8000c66:	61bb      	str	r3, [r7, #24]

		cmd.dynamixel[0] = util_decode_i32(data+8);
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	3308      	adds	r3, #8
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff feb8 	bl	80009e2 <util_decode_i32>
 8000c72:	4603      	mov	r3, r0
 8000c74:	61fb      	str	r3, [r7, #28]
		cmd.dynamixel[1] = util_decode_i32(data+12);
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	330c      	adds	r3, #12
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f7ff feb1 	bl	80009e2 <util_decode_i32>
 8000c80:	4603      	mov	r3, r0
 8000c82:	623b      	str	r3, [r7, #32]
		cmd.dynamixel[2] = util_decode_i32(data+16);
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	3310      	adds	r3, #16
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff feaa 	bl	80009e2 <util_decode_i32>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
		cmd.dynamixel[3] = util_decode_i32(data+20);
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	3314      	adds	r3, #20
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff fea3 	bl	80009e2 <util_decode_i32>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	62bb      	str	r3, [r7, #40]	; 0x28

		cmd.position[0] = util_decode_i32(data+24);
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	3318      	adds	r3, #24
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff fe9c 	bl	80009e2 <util_decode_i32>
 8000caa:	4603      	mov	r3, r0
 8000cac:	62fb      	str	r3, [r7, #44]	; 0x2c
		cmd.position[1] = util_decode_i32(data+28);
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	331c      	adds	r3, #28
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff fe95 	bl	80009e2 <util_decode_i32>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	633b      	str	r3, [r7, #48]	; 0x30
		cmd.position[2] = util_decode_i32(data+32);
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	3320      	adds	r3, #32
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff fe8e 	bl	80009e2 <util_decode_i32>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	637b      	str	r3, [r7, #52]	; 0x34

		cmd.speed[0] = util_decode_i32(data+36);
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	3324      	adds	r3, #36	; 0x24
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff fe87 	bl	80009e2 <util_decode_i32>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	63bb      	str	r3, [r7, #56]	; 0x38
		cmd.speed[1] = util_decode_i32(data+40);
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	3328      	adds	r3, #40	; 0x28
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff fe80 	bl	80009e2 <util_decode_i32>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
		cmd.speed[2] = util_decode_i32(data+44);
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	332c      	adds	r3, #44	; 0x2c
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff fe79 	bl	80009e2 <util_decode_i32>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	643b      	str	r3, [r7, #64]	; 0x40

		cmd.state = util_decode_u16(data+48);
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	3330      	adds	r3, #48	; 0x30
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fe41 	bl	8000980 <util_decode_u16>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

		control_set_cmd(cmd);
 8000d04:	466d      	mov	r5, sp
 8000d06:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000d0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d12:	6823      	ldr	r3, [r4, #0]
 8000d14:	602b      	str	r3, [r5, #0]
 8000d16:	f107 0314 	add.w	r3, r7, #20
 8000d1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d1c:	f000 fd34 	bl	8001788 <control_set_cmd>

		resp[0] = MSV2_OK_LO;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	22c5      	movs	r2, #197	; 0xc5
 8000d24:	701a      	strb	r2, [r3, #0]
		resp[1] = MSV2_OK_HI;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	225c      	movs	r2, #92	; 0x5c
 8000d2c:	701a      	strb	r2, [r3, #0]
		*resp_len = 2;
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	2202      	movs	r2, #2
 8000d32:	801a      	strh	r2, [r3, #0]
	} else {
		resp[0] = MSV2_ERROR_LO;
		resp[1] = MSV2_ERROR_HI;
		*resp_len = 2;
	}
}
 8000d34:	e009      	b.n	8000d4a <cm4_response_command+0x11e>
		resp[0] = MSV2_ERROR_LO;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	22ce      	movs	r2, #206	; 0xce
 8000d3a:	701a      	strb	r2, [r3, #0]
		resp[1] = MSV2_ERROR_HI;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	3301      	adds	r3, #1
 8000d40:	22ec      	movs	r2, #236	; 0xec
 8000d42:	701a      	strb	r2, [r3, #0]
		*resp_len = 2;
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	2202      	movs	r2, #2
 8000d48:	801a      	strh	r2, [r3, #0]
}
 8000d4a:	bf00      	nop
 8000d4c:	3748      	adds	r7, #72	; 0x48
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000d54 <cm4_send>:



CM4_ERROR_t cm4_send(CM4_INST_t * cm4, uint8_t cmd, uint8_t * data, uint16_t length, uint8_t ** resp_data, uint16_t * resp_len) {
 8000d54:	b590      	push	{r4, r7, lr}
 8000d56:	b087      	sub	sp, #28
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	60f8      	str	r0, [r7, #12]
 8000d5c:	607a      	str	r2, [r7, #4]
 8000d5e:	461a      	mov	r2, r3
 8000d60:	460b      	mov	r3, r1
 8000d62:	72fb      	strb	r3, [r7, #11]
 8000d64:	4613      	mov	r3, r2
 8000d66:	813b      	strh	r3, [r7, #8]
	if (xSemaphoreTake(cm4_busy_sem, DRIV_TIMEOUT) == pdTRUE) {
 8000d68:	4b50      	ldr	r3, [pc, #320]	; (8000eac <cm4_send+0x158>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	21c8      	movs	r1, #200	; 0xc8
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f009 f984 	bl	800a07c <xQueueSemaphoreTake>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	f040 8092 	bne.w	8000ea0 <cm4_send+0x14c>
		uint16_t frame_length = msv2_create_frame(&cm4->msv2, cmd, length/2, data);
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	1d18      	adds	r0, r3, #4
 8000d80:	893b      	ldrh	r3, [r7, #8]
 8000d82:	085b      	lsrs	r3, r3, #1
 8000d84:	b29b      	uxth	r3, r3
 8000d86:	b2da      	uxtb	r2, r3
 8000d88:	7af9      	ldrb	r1, [r7, #11]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f001 fa80 	bl	8002290 <msv2_create_frame>
 8000d90:	4603      	mov	r3, r0
 8000d92:	82fb      	strh	r3, [r7, #22]
		serial_send(&cm4->ser, msv2_tx_data(&cm4->msv2), frame_length);
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	f503 5480 	add.w	r4, r3, #4096	; 0x1000
 8000d9a:	3418      	adds	r4, #24
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	3304      	adds	r3, #4
 8000da0:	4618      	mov	r0, r3
 8000da2:	f001 fc4f 	bl	8002644 <msv2_tx_data>
 8000da6:	4601      	mov	r1, r0
 8000da8:	8afb      	ldrh	r3, [r7, #22]
 8000daa:	461a      	mov	r2, r3
 8000dac:	4620      	mov	r0, r4
 8000dae:	f001 fd6f 	bl	8002890 <serial_send>
		if(cm4->rx_sem == NULL) {
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8000db8:	3318      	adds	r3, #24
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d108      	bne.n	8000dd2 <cm4_send+0x7e>
			xSemaphoreGive(cm4_busy_sem);
 8000dc0:	4b3a      	ldr	r3, [pc, #232]	; (8000eac <cm4_send+0x158>)
 8000dc2:	6818      	ldr	r0, [r3, #0]
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2100      	movs	r1, #0
 8000dca:	f008 ffcb 	bl	8009d64 <xQueueGenericSend>
			return CM4_LOCAL_ERROR;
 8000dce:	2308      	movs	r3, #8
 8000dd0:	e067      	b.n	8000ea2 <cm4_send+0x14e>
		}
		if(xSemaphoreTake(cm4->rx_sem, COMM_TIMEOUT) == pdTRUE) {
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8000dd8:	3318      	adds	r3, #24
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	210a      	movs	r1, #10
 8000dde:	4618      	mov	r0, r3
 8000de0:	f009 f94c 	bl	800a07c <xQueueSemaphoreTake>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d131      	bne.n	8000e4e <cm4_send+0xfa>
			cm4->garbage_counter = 0;
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	f503 53a4 	add.w	r3, r3, #5248	; 0x1480
 8000df0:	3304      	adds	r3, #4
 8000df2:	2200      	movs	r2, #0
 8000df4:	801a      	strh	r2, [r3, #0]
			if(cm4->msv2.rx.opcode == cmd) {
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	7a1b      	ldrb	r3, [r3, #8]
 8000dfa:	7afa      	ldrb	r2, [r7, #11]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d117      	bne.n	8000e30 <cm4_send+0xdc>
				if(resp_len != NULL && resp_data != NULL) {
 8000e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d00b      	beq.n	8000e1e <cm4_send+0xca>
 8000e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d008      	beq.n	8000e1e <cm4_send+0xca>
					*resp_len = cm4->msv2.rx.length;
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	89da      	ldrh	r2, [r3, #14]
 8000e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e12:	801a      	strh	r2, [r3, #0]
					*resp_data = cm4->msv2.rx.data;
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	f103 0212 	add.w	r2, r3, #18
 8000e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e1c:	601a      	str	r2, [r3, #0]
				}
				xSemaphoreGive(cm4_busy_sem);
 8000e1e:	4b23      	ldr	r3, [pc, #140]	; (8000eac <cm4_send+0x158>)
 8000e20:	6818      	ldr	r0, [r3, #0]
 8000e22:	2300      	movs	r3, #0
 8000e24:	2200      	movs	r2, #0
 8000e26:	2100      	movs	r1, #0
 8000e28:	f008 ff9c 	bl	8009d64 <xQueueGenericSend>
				return CM4_SUCCESS;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	e038      	b.n	8000ea2 <cm4_send+0x14e>
			} else {
				if(resp_len != NULL) {
 8000e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d002      	beq.n	8000e3c <cm4_send+0xe8>
					*resp_len = 0;
 8000e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e38:	2200      	movs	r2, #0
 8000e3a:	801a      	strh	r2, [r3, #0]
				}
				xSemaphoreGive(cm4_busy_sem);
 8000e3c:	4b1b      	ldr	r3, [pc, #108]	; (8000eac <cm4_send+0x158>)
 8000e3e:	6818      	ldr	r0, [r3, #0]
 8000e40:	2300      	movs	r3, #0
 8000e42:	2200      	movs	r2, #0
 8000e44:	2100      	movs	r1, #0
 8000e46:	f008 ff8d 	bl	8009d64 <xQueueGenericSend>
				return CM4_REMOTE_ERROR;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	e029      	b.n	8000ea2 <cm4_send+0x14e>
			}
		} else {
			cm4->garbage_counter++;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	f503 53a4 	add.w	r3, r3, #5248	; 0x1480
 8000e54:	3304      	adds	r3, #4
 8000e56:	881b      	ldrh	r3, [r3, #0]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	b29a      	uxth	r2, r3
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	f503 53a4 	add.w	r3, r3, #5248	; 0x1480
 8000e62:	3304      	adds	r3, #4
 8000e64:	801a      	strh	r2, [r3, #0]
			if(cm4->garbage_counter > GARBAGE_THRESHOLD) {
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	f503 53a4 	add.w	r3, r3, #5248	; 0x1480
 8000e6c:	3304      	adds	r3, #4
 8000e6e:	881b      	ldrh	r3, [r3, #0]
 8000e70:	2b0a      	cmp	r3, #10
 8000e72:	d90c      	bls.n	8000e8e <cm4_send+0x13a>
				serial_garbage_clean(&cm4->ser);
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000e7a:	3318      	adds	r3, #24
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f001 fd19 	bl	80028b4 <serial_garbage_clean>
				cm4->garbage_counter = 0;
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	f503 53a4 	add.w	r3, r3, #5248	; 0x1480
 8000e88:	3304      	adds	r3, #4
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	801a      	strh	r2, [r3, #0]
			}
			xSemaphoreGive(cm4_busy_sem);
 8000e8e:	4b07      	ldr	r3, [pc, #28]	; (8000eac <cm4_send+0x158>)
 8000e90:	6818      	ldr	r0, [r3, #0]
 8000e92:	2300      	movs	r3, #0
 8000e94:	2200      	movs	r2, #0
 8000e96:	2100      	movs	r1, #0
 8000e98:	f008 ff64 	bl	8009d64 <xQueueGenericSend>
			return CM4_TIMEOUT;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	e000      	b.n	8000ea2 <cm4_send+0x14e>
		}

	} else {
		return CM4_BUSY;
 8000ea0:	2304      	movs	r3, #4
	}

}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	371c      	adds	r7, #28
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd90      	pop	{r4, r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	200000b0 	.word	0x200000b0

08000eb0 <cm4_ping>:

CM4_ERROR_t cm4_ping(CM4_INST_t * cm4) {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af02      	add	r7, sp, #8
 8000eb6:	6078      	str	r0, [r7, #4]
	CM4_ERROR_t error = 0;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	73fb      	strb	r3, [r7, #15]
	uint8_t data[] = {0xc5, 0x5c};
 8000ebc:	f645 43c5 	movw	r3, #23749	; 0x5cc5
 8000ec0:	81bb      	strh	r3, [r7, #12]
	error |= cm4_send(cm4, CM4_MASTER_PING, data, 2, NULL, NULL);
 8000ec2:	f107 020c 	add.w	r2, r7, #12
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	9301      	str	r3, [sp, #4]
 8000eca:	2300      	movs	r3, #0
 8000ecc:	9300      	str	r3, [sp, #0]
 8000ece:	2302      	movs	r3, #2
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f7ff ff3e 	bl	8000d54 <cm4_send>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	461a      	mov	r2, r3
 8000edc:	7bfb      	ldrb	r3, [r7, #15]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	73fb      	strb	r3, [r7, #15]

	return error;
 8000ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3710      	adds	r7, #16
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <cm4_transaction>:


CM4_ERROR_t cm4_transaction(CM4_INST_t * cm4, CM4_PAYLOAD_SENSOR_t * sens, CM4_PAYLOAD_COMMAND_t * cmd) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b096      	sub	sp, #88	; 0x58
 8000ef0:	af02      	add	r7, sp, #8
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
	CM4_ERROR_t error = 0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t * recv_data;
	uint16_t recv_len = 0;
 8000efe:	2300      	movs	r3, #0
 8000f00:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	uint16_t send_len = 52;
 8000f04:	2334      	movs	r3, #52	; 0x34
 8000f06:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	uint8_t send_data[52];

	util_encode_u32(send_data, sens->timestamp);
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	f107 0310 	add.w	r3, r7, #16
 8000f12:	4611      	mov	r1, r2
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff fcf1 	bl	80008fc <util_encode_u32>
	util_encode_i32(send_data+4, sens->acc_x);
 8000f1a:	f107 0310 	add.w	r3, r7, #16
 8000f1e:	3304      	adds	r3, #4
 8000f20:	68ba      	ldr	r2, [r7, #8]
 8000f22:	6852      	ldr	r2, [r2, #4]
 8000f24:	4611      	mov	r1, r2
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff fd09 	bl	800093e <util_encode_i32>
	util_encode_i32(send_data+8, sens->acc_y);
 8000f2c:	f107 0310 	add.w	r3, r7, #16
 8000f30:	3308      	adds	r3, #8
 8000f32:	68ba      	ldr	r2, [r7, #8]
 8000f34:	6892      	ldr	r2, [r2, #8]
 8000f36:	4611      	mov	r1, r2
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff fd00 	bl	800093e <util_encode_i32>
	util_encode_i32(send_data+12, sens->acc_z);
 8000f3e:	f107 0310 	add.w	r3, r7, #16
 8000f42:	330c      	adds	r3, #12
 8000f44:	68ba      	ldr	r2, [r7, #8]
 8000f46:	68d2      	ldr	r2, [r2, #12]
 8000f48:	4611      	mov	r1, r2
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff fcf7 	bl	800093e <util_encode_i32>

	util_encode_i32(send_data+16, sens->gyro_x);
 8000f50:	f107 0310 	add.w	r3, r7, #16
 8000f54:	3310      	adds	r3, #16
 8000f56:	68ba      	ldr	r2, [r7, #8]
 8000f58:	6912      	ldr	r2, [r2, #16]
 8000f5a:	4611      	mov	r1, r2
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff fcee 	bl	800093e <util_encode_i32>
	util_encode_i32(send_data+20, sens->gyro_y);
 8000f62:	f107 0310 	add.w	r3, r7, #16
 8000f66:	3314      	adds	r3, #20
 8000f68:	68ba      	ldr	r2, [r7, #8]
 8000f6a:	6952      	ldr	r2, [r2, #20]
 8000f6c:	4611      	mov	r1, r2
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff fce5 	bl	800093e <util_encode_i32>
	util_encode_i32(send_data+24, sens->gyro_z);
 8000f74:	f107 0310 	add.w	r3, r7, #16
 8000f78:	3318      	adds	r3, #24
 8000f7a:	68ba      	ldr	r2, [r7, #8]
 8000f7c:	6992      	ldr	r2, [r2, #24]
 8000f7e:	4611      	mov	r1, r2
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fcdc 	bl	800093e <util_encode_i32>

	util_encode_i32(send_data+28, sens->baro);
 8000f86:	f107 0310 	add.w	r3, r7, #16
 8000f8a:	331c      	adds	r3, #28
 8000f8c:	68ba      	ldr	r2, [r7, #8]
 8000f8e:	69d2      	ldr	r2, [r2, #28]
 8000f90:	4611      	mov	r1, r2
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff fcd3 	bl	800093e <util_encode_i32>
	util_encode_i32(send_data+32, sens->cc_pressure);
 8000f98:	f107 0310 	add.w	r3, r7, #16
 8000f9c:	3320      	adds	r3, #32
 8000f9e:	68ba      	ldr	r2, [r7, #8]
 8000fa0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000fa2:	4611      	mov	r1, r2
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fcca 	bl	800093e <util_encode_i32>

	util_encode_i32(send_data+36, sens->dynamixel[0]);
 8000faa:	f107 0310 	add.w	r3, r7, #16
 8000fae:	3324      	adds	r3, #36	; 0x24
 8000fb0:	68ba      	ldr	r2, [r7, #8]
 8000fb2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000fb4:	4611      	mov	r1, r2
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff fcc1 	bl	800093e <util_encode_i32>
	util_encode_i32(send_data+40, sens->dynamixel[1]);
 8000fbc:	f107 0310 	add.w	r3, r7, #16
 8000fc0:	3328      	adds	r3, #40	; 0x28
 8000fc2:	68ba      	ldr	r2, [r7, #8]
 8000fc4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000fc6:	4611      	mov	r1, r2
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff fcb8 	bl	800093e <util_encode_i32>
	util_encode_i32(send_data+44, sens->dynamixel[2]);
 8000fce:	f107 0310 	add.w	r3, r7, #16
 8000fd2:	332c      	adds	r3, #44	; 0x2c
 8000fd4:	68ba      	ldr	r2, [r7, #8]
 8000fd6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000fd8:	4611      	mov	r1, r2
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff fcaf 	bl	800093e <util_encode_i32>
	util_encode_i32(send_data+48, sens->dynamixel[3]);
 8000fe0:	f107 0310 	add.w	r3, r7, #16
 8000fe4:	3330      	adds	r3, #48	; 0x30
 8000fe6:	68ba      	ldr	r2, [r7, #8]
 8000fe8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000fea:	4611      	mov	r1, r2
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff fca6 	bl	800093e <util_encode_i32>

	error |= cm4_send(cm4, CM4_MASTER_PAYLOAD, send_data, send_len , &recv_data, &recv_len);
 8000ff2:	f8b7 104c 	ldrh.w	r1, [r7, #76]	; 0x4c
 8000ff6:	f107 0210 	add.w	r2, r7, #16
 8000ffa:	f107 0346 	add.w	r3, r7, #70	; 0x46
 8000ffe:	9301      	str	r3, [sp, #4]
 8001000:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	460b      	mov	r3, r1
 8001008:	2102      	movs	r1, #2
 800100a:	68f8      	ldr	r0, [r7, #12]
 800100c:	f7ff fea2 	bl	8000d54 <cm4_send>
 8001010:	4603      	mov	r3, r0
 8001012:	461a      	mov	r2, r3
 8001014:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001018:	4313      	orrs	r3, r2
 800101a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if(recv_len == 50) {
 800101e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001022:	2b32      	cmp	r3, #50	; 0x32
 8001024:	d167      	bne.n	80010f6 <cm4_transaction+0x20a>
		cmd->timestamp = util_decode_u32(recv_data);
 8001026:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff fcbe 	bl	80009aa <util_decode_u32>
 800102e:	4602      	mov	r2, r0
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	601a      	str	r2, [r3, #0]
		cmd->thrust = util_decode_i32(recv_data+4);
 8001034:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001036:	3304      	adds	r3, #4
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff fcd2 	bl	80009e2 <util_decode_i32>
 800103e:	4602      	mov	r2, r0
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	605a      	str	r2, [r3, #4]

		cmd->dynamixel[0] = util_decode_i32(recv_data+8);
 8001044:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001046:	3308      	adds	r3, #8
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff fcca 	bl	80009e2 <util_decode_i32>
 800104e:	4602      	mov	r2, r0
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	609a      	str	r2, [r3, #8]
		cmd->dynamixel[1] = util_decode_i32(recv_data+12);
 8001054:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001056:	330c      	adds	r3, #12
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff fcc2 	bl	80009e2 <util_decode_i32>
 800105e:	4602      	mov	r2, r0
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	60da      	str	r2, [r3, #12]
		cmd->dynamixel[2] = util_decode_i32(recv_data+16);
 8001064:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001066:	3310      	adds	r3, #16
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff fcba 	bl	80009e2 <util_decode_i32>
 800106e:	4602      	mov	r2, r0
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	611a      	str	r2, [r3, #16]
		cmd->dynamixel[3] = util_decode_i32(recv_data+20);
 8001074:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001076:	3314      	adds	r3, #20
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff fcb2 	bl	80009e2 <util_decode_i32>
 800107e:	4602      	mov	r2, r0
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	615a      	str	r2, [r3, #20]

		cmd->position[0] = util_decode_i32(recv_data+24);
 8001084:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001086:	3318      	adds	r3, #24
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff fcaa 	bl	80009e2 <util_decode_i32>
 800108e:	4602      	mov	r2, r0
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	619a      	str	r2, [r3, #24]
		cmd->position[1] = util_decode_i32(recv_data+28);
 8001094:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001096:	331c      	adds	r3, #28
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff fca2 	bl	80009e2 <util_decode_i32>
 800109e:	4602      	mov	r2, r0
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	61da      	str	r2, [r3, #28]
		cmd->position[2] = util_decode_i32(recv_data+32);
 80010a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80010a6:	3320      	adds	r3, #32
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff fc9a 	bl	80009e2 <util_decode_i32>
 80010ae:	4602      	mov	r2, r0
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	621a      	str	r2, [r3, #32]

		cmd->speed[0] = util_decode_i32(recv_data+36);
 80010b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80010b6:	3324      	adds	r3, #36	; 0x24
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff fc92 	bl	80009e2 <util_decode_i32>
 80010be:	4602      	mov	r2, r0
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	625a      	str	r2, [r3, #36]	; 0x24
		cmd->speed[1] = util_decode_i32(recv_data+40);
 80010c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80010c6:	3328      	adds	r3, #40	; 0x28
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff fc8a 	bl	80009e2 <util_decode_i32>
 80010ce:	4602      	mov	r2, r0
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	629a      	str	r2, [r3, #40]	; 0x28
		cmd->speed[2] = util_decode_i32(recv_data+44);
 80010d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80010d6:	332c      	adds	r3, #44	; 0x2c
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff fc82 	bl	80009e2 <util_decode_i32>
 80010de:	4602      	mov	r2, r0
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	62da      	str	r2, [r3, #44]	; 0x2c

		cmd->state = util_decode_u16(recv_data+48);
 80010e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80010e6:	3330      	adds	r3, #48	; 0x30
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff fc49 	bl	8000980 <util_decode_u16>
 80010ee:	4603      	mov	r3, r0
 80010f0:	461a      	mov	r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	861a      	strh	r2, [r3, #48]	; 0x30

	}

	return CM4_SUCCESS;
 80010f6:	2300      	movs	r3, #0
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3750      	adds	r7, #80	; 0x50
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <cm4_boot>:

CM4_ERROR_t cm4_boot(CM4_INST_t * cm4) {
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
	allow_boot();
 8001108:	f000 f876 	bl	80011f8 <allow_boot>
	return CM4_SUCCESS;
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <cm4_is_ready>:

CM4_ERROR_t cm4_is_ready(CM4_INST_t * cm4, uint8_t * ready) {
 8001116:	b580      	push	{r7, lr}
 8001118:	b082      	sub	sp, #8
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
 800111e:	6039      	str	r1, [r7, #0]
	if(ready == NULL){
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d101      	bne.n	800112a <cm4_is_ready+0x14>
		return CM4_LOCAL_ERROR;
 8001126:	2308      	movs	r3, #8
 8001128:	e011      	b.n	800114e <cm4_is_ready+0x38>
	}
	*ready = 0;
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	2200      	movs	r2, #0
 800112e:	701a      	strb	r2, [r3, #0]
	if(is_booted()) {
 8001130:	f000 f850 	bl	80011d4 <is_booted>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d008      	beq.n	800114c <cm4_is_ready+0x36>
		if(cm4_ping(cm4) == CM4_SUCCESS) {
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff feb8 	bl	8000eb0 <cm4_ping>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d102      	bne.n	800114c <cm4_is_ready+0x36>
			*ready = 1;
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	2201      	movs	r2, #1
 800114a:	701a      	strb	r2, [r3, #0]
		}
	}
	return CM4_SUCCESS;
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <cm4_shutdown>:

CM4_ERROR_t cm4_shutdown(CM4_INST_t * cm4) {
 8001156:	b580      	push	{r7, lr}
 8001158:	b086      	sub	sp, #24
 800115a:	af02      	add	r7, sp, #8
 800115c:	6078      	str	r0, [r7, #4]
	//send shutdown command through uart
	uint8_t data[] = {0x00, 0x00};
 800115e:	2300      	movs	r3, #0
 8001160:	81bb      	strh	r3, [r7, #12]
	cm4_send(cm4, CM4_MASTER_SHUTDOWN, data, 2, NULL, NULL);
 8001162:	f107 020c 	add.w	r2, r7, #12
 8001166:	2300      	movs	r3, #0
 8001168:	9301      	str	r3, [sp, #4]
 800116a:	2300      	movs	r3, #0
 800116c:	9300      	str	r3, [sp, #0]
 800116e:	2302      	movs	r3, #2
 8001170:	2101      	movs	r1, #1
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff fdee 	bl	8000d54 <cm4_send>

	return CM4_SUCCESS;
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <cm4_is_shutdown>:

CM4_ERROR_t cm4_is_shutdown(CM4_INST_t * cm4, uint8_t * shutdown) {
 8001182:	b580      	push	{r7, lr}
 8001184:	b082      	sub	sp, #8
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
 800118a:	6039      	str	r1, [r7, #0]
	if(shutdown == NULL){
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d101      	bne.n	8001196 <cm4_is_shutdown+0x14>
		return CM4_LOCAL_ERROR;
 8001192:	2308      	movs	r3, #8
 8001194:	e00f      	b.n	80011b6 <cm4_is_shutdown+0x34>
	}
	if(!is_booted()) {
 8001196:	f000 f81d 	bl	80011d4 <is_booted>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d106      	bne.n	80011ae <cm4_is_shutdown+0x2c>
		//check wheter the CM4 answers
		//if answers
		hold_boot();
 80011a0:	f000 f838 	bl	8001214 <hold_boot>
		*shutdown = 1;
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	2201      	movs	r2, #1
 80011a8:	701a      	strb	r2, [r3, #0]
		return CM4_SUCCESS;
 80011aa:	2300      	movs	r3, #0
 80011ac:	e003      	b.n	80011b6 <cm4_is_shutdown+0x34>
	} else {
		*shutdown = 0;
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	2200      	movs	r2, #0
 80011b2:	701a      	strb	r2, [r3, #0]
		return CM4_SUCCESS;
 80011b4:	2300      	movs	r3, #0
	}
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <cm4_force_shutdown>:


CM4_ERROR_t cm4_force_shutdown(CM4_INST_t * cm4) {
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
	hold_boot();
 80011c6:	f000 f825 	bl	8001214 <hold_boot>
	return CM4_SUCCESS;
 80011ca:	2300      	movs	r3, #0
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <is_booted>:



static uint8_t is_booted(void) {
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
	return CM4_RUN_PG_PORT->IDR & CM4_RUN_PG_PIN ?1:0;
 80011d8:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <is_booted+0x20>)
 80011da:	691b      	ldr	r3, [r3, #16]
 80011dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	bf14      	ite	ne
 80011e4:	2301      	movne	r3, #1
 80011e6:	2300      	moveq	r3, #0
 80011e8:	b2db      	uxtb	r3, r3
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	40020400 	.word	0x40020400

080011f8 <allow_boot>:

static void allow_boot(void) {
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
	CM4_GLOBAL_EN_PORT->BSRR = CM4_GLOBAL_EN_PIN;
 80011fc:	4b04      	ldr	r3, [pc, #16]	; (8001210 <allow_boot+0x18>)
 80011fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001202:	619a      	str	r2, [r3, #24]
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	40020000 	.word	0x40020000

08001214 <hold_boot>:

static void hold_boot(void) {
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
	CM4_GLOBAL_EN_PORT->BSRR = CM4_GLOBAL_EN_PIN << 16;
 8001218:	4b04      	ldr	r3, [pc, #16]	; (800122c <hold_boot+0x18>)
 800121a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800121e:	619a      	str	r2, [r3, #24]
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	40020000 	.word	0x40020000

08001230 <control_thread>:

/**********************
 *	DECLARATIONS
 **********************/

void control_thread(void * arg) {
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
	static TickType_t last_wake_time;
	static const TickType_t period = pdMS_TO_TICKS(CONTROL_HEART_BEAT);



	led_init();
 8001238:	f000 ff96 	bl	8002168 <led_init>

	init_control(&control);
 800123c:	4814      	ldr	r0, [pc, #80]	; (8001290 <control_thread+0x60>)
 800123e:	f000 f8cc 	bl	80013da <init_control>
	servo_config(&tvc_servo);

	control.tvc_servo = &tvc_servo;
#endif

	cm4_global_init();
 8001242:	f7ff fbeb 	bl	8000a1c <cm4_global_init>

	static CM4_INST_t cm4;

	cm4_init(&cm4);
 8001246:	4813      	ldr	r0, [pc, #76]	; (8001294 <control_thread+0x64>)
 8001248:	f7ff fbf8 	bl	8000a3c <cm4_init>

	control.cm4 = &cm4;
 800124c:	4b10      	ldr	r3, [pc, #64]	; (8001290 <control_thread+0x60>)
 800124e:	4a11      	ldr	r2, [pc, #68]	; (8001294 <control_thread+0x64>)
 8001250:	619a      	str	r2, [r3, #24]


	init_idle(&control);
 8001252:	480f      	ldr	r0, [pc, #60]	; (8001290 <control_thread+0x60>)
 8001254:	f000 f8d2 	bl	80013fc <init_idle>



	last_wake_time = xTaskGetTickCount();
 8001258:	f009 fc2a 	bl	800aab0 <xTaskGetTickCount>
 800125c:	4603      	mov	r3, r0
 800125e:	4a0e      	ldr	r2, [pc, #56]	; (8001298 <control_thread+0x68>)
 8001260:	6013      	str	r3, [r2, #0]
		} else {
			servo_disable_led(control.tvc_servo, NULL);
		}
#endif

		control_update(&control);
 8001262:	480b      	ldr	r0, [pc, #44]	; (8001290 <control_thread+0x60>)
 8001264:	f000 f81e 	bl	80012a4 <control_update>


		if(control.state < CS_NUM && control.state >= 0) {
 8001268:	4b09      	ldr	r3, [pc, #36]	; (8001290 <control_thread+0x60>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b05      	cmp	r3, #5
 800126e:	d807      	bhi.n	8001280 <control_thread+0x50>
			control_fcn[control.state](&control);
 8001270:	4b07      	ldr	r3, [pc, #28]	; (8001290 <control_thread+0x60>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	461a      	mov	r2, r3
 8001276:	4b09      	ldr	r3, [pc, #36]	; (800129c <control_thread+0x6c>)
 8001278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800127c:	4804      	ldr	r0, [pc, #16]	; (8001290 <control_thread+0x60>)
 800127e:	4798      	blx	r3
		}
		vTaskDelayUntil( &last_wake_time, period );
 8001280:	4b07      	ldr	r3, [pc, #28]	; (80012a0 <control_thread+0x70>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4619      	mov	r1, r3
 8001286:	4804      	ldr	r0, [pc, #16]	; (8001298 <control_thread+0x68>)
 8001288:	f009 fa54 	bl	800a734 <vTaskDelayUntil>
		control_update(&control);
 800128c:	e7e9      	b.n	8001262 <control_thread+0x32>
 800128e:	bf00      	nop
 8001290:	20000304 	.word	0x20000304
 8001294:	200003a8 	.word	0x200003a8
 8001298:	20001830 	.word	0x20001830
 800129c:	20000030 	.word	0x20000030
 80012a0:	0800ba6c 	.word	0x0800ba6c

080012a4 <control_update>:
	}
}


static void control_update(CONTROL_INST_t * control) {
 80012a4:	b590      	push	{r4, r7, lr}
 80012a6:	b087      	sub	sp, #28
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6178      	str	r0, [r7, #20]

	control->last_time = control->time;
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	685a      	ldr	r2, [r3, #4]
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	609a      	str	r2, [r3, #8]
	control->time = HAL_GetTick();
 80012b4:	f002 feda 	bl	800406c <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	605a      	str	r2, [r3, #4]
	control->iter++;
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	695b      	ldr	r3, [r3, #20]
 80012c2:	1c5a      	adds	r2, r3, #1
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	615a      	str	r2, [r3, #20]

	if(control->counter_active) {
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	7c1b      	ldrb	r3, [r3, #16]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d06d      	beq.n	80013ac <control_update+0x108>
		control->counter -= (control->time - control->last_time);
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	4619      	mov	r1, r3
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	689a      	ldr	r2, [r3, #8]
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	440b      	add	r3, r1
 80012e2:	461a      	mov	r2, r3
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	60da      	str	r2, [r3, #12]
	}

#if USE_PIPELINE == 0
	while(can_msgPending()) {
 80012e8:	e060      	b.n	80013ac <control_update+0x108>
		control->msg = can_readBuffer();
 80012ea:	697c      	ldr	r4, [r7, #20]
 80012ec:	463b      	mov	r3, r7
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff fa1c 	bl	800072c <can_readBuffer>
 80012f4:	3428      	adds	r4, #40	; 0x28
 80012f6:	463b      	mov	r3, r7
 80012f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

		if(control->msg.id == DATA_ID_ALTITUDE){
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001304:	2b31      	cmp	r3, #49	; 0x31
 8001306:	d105      	bne.n	8001314 <control_update+0x70>
			control->sensor_payload.baro = (int32_t) control->msg.data;
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800130c:	461a      	mov	r2, r3
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	655a      	str	r2, [r3, #84]	; 0x54
 8001312:	e04b      	b.n	80013ac <control_update+0x108>
		} else if(control->msg.id == DATA_ID_ACCELERATION_X) {
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800131a:	2b01      	cmp	r3, #1
 800131c:	d105      	bne.n	800132a <control_update+0x86>
			control->sensor_payload.acc_x = (int32_t) control->msg.data;
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001322:	461a      	mov	r2, r3
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	63da      	str	r2, [r3, #60]	; 0x3c
 8001328:	e040      	b.n	80013ac <control_update+0x108>
		} else if(control->msg.id == DATA_ID_ACCELERATION_Y) {
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001330:	2b02      	cmp	r3, #2
 8001332:	d105      	bne.n	8001340 <control_update+0x9c>
			control->sensor_payload.acc_y = (int32_t) control->msg.data;
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001338:	461a      	mov	r2, r3
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	641a      	str	r2, [r3, #64]	; 0x40
 800133e:	e035      	b.n	80013ac <control_update+0x108>
		} else if(control->msg.id == DATA_ID_ACCELERATION_Z) {
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001346:	2b03      	cmp	r3, #3
 8001348:	d105      	bne.n	8001356 <control_update+0xb2>
			control->sensor_payload.acc_z = (int32_t) control->msg.data;
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800134e:	461a      	mov	r2, r3
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	645a      	str	r2, [r3, #68]	; 0x44
 8001354:	e02a      	b.n	80013ac <control_update+0x108>
		} else if(control->msg.id == DATA_ID_GYRO_X) {
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800135c:	2b04      	cmp	r3, #4
 800135e:	d105      	bne.n	800136c <control_update+0xc8>
			control->sensor_payload.gyro_x = (int32_t) control->msg.data;
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001364:	461a      	mov	r2, r3
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	649a      	str	r2, [r3, #72]	; 0x48
 800136a:	e01f      	b.n	80013ac <control_update+0x108>
		} else if(control->msg.id == DATA_ID_GYRO_Y) {
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001372:	2b05      	cmp	r3, #5
 8001374:	d105      	bne.n	8001382 <control_update+0xde>
			control->sensor_payload.gyro_y = (int32_t) control->msg.data;
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800137a:	461a      	mov	r2, r3
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001380:	e014      	b.n	80013ac <control_update+0x108>
		} else if(control->msg.id == DATA_ID_GYRO_Z) {
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001388:	2b06      	cmp	r3, #6
 800138a:	d105      	bne.n	8001398 <control_update+0xf4>
			control->sensor_payload.gyro_z = (int32_t) control->msg.data;
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001390:	461a      	mov	r2, r3
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	651a      	str	r2, [r3, #80]	; 0x50
 8001396:	e009      	b.n	80013ac <control_update+0x108>
		} else if(control->msg.id == DATA_ID_PRESS_2) {
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800139e:	2b56      	cmp	r3, #86	; 0x56
 80013a0:	d104      	bne.n	80013ac <control_update+0x108>
			control->sensor_payload.cc_pressure = (int32_t) control->msg.data;
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a6:	461a      	mov	r2, r3
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	65da      	str	r2, [r3, #92]	; 0x5c
	while(can_msgPending()) {
 80013ac:	f7ff f9a4 	bl	80006f8 <can_msgPending>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d199      	bne.n	80012ea <control_update+0x46>
	servo_sync(control->tvc_servo);
#endif

	//init error if there is an issue with a motor

	if(control_sched_should_run(control, CONTROL_SCHED_ABORT)) {
 80013b6:	2101      	movs	r1, #1
 80013b8:	6978      	ldr	r0, [r7, #20]
 80013ba:	f000 fa19 	bl	80017f0 <control_sched_should_run>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d006      	beq.n	80013d2 <control_update+0x12e>
		init_abort(control);
 80013c4:	6978      	ldr	r0, [r7, #20]
 80013c6:	f000 f8d0 	bl	800156a <init_abort>
		control_sched_done(control, CONTROL_SCHED_ABORT);
 80013ca:	2101      	movs	r1, #1
 80013cc:	6978      	ldr	r0, [r7, #20]
 80013ce:	f000 fa24 	bl	800181a <control_sched_done>
	}
}
 80013d2:	bf00      	nop
 80013d4:	371c      	adds	r7, #28
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd90      	pop	{r4, r7, pc}

080013da <init_control>:

static void init_control(CONTROL_INST_t * control) {
 80013da:	b480      	push	{r7}
 80013dc:	b083      	sub	sp, #12
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
	control->sched = CONTROL_SCHED_NOTHING;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2200      	movs	r2, #0
 80013e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	control->counter_active = 0;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2200      	movs	r2, #0
 80013ee:	741a      	strb	r2, [r3, #16]
}
 80013f0:	bf00      	nop
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <init_idle>:

static void init_idle(CONTROL_INST_t * control) {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	control->state = CS_IDLE;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	701a      	strb	r2, [r3, #0]
	led_set_color(LED_GREEN);
 800140a:	2200      	movs	r2, #0
 800140c:	21ff      	movs	r1, #255	; 0xff
 800140e:	2000      	movs	r0, #0
 8001410:	f000 fece 	bl	80021b0 <led_set_color>
	storage_disable();
 8001414:	f001 fb8e 	bl	8002b34 <storage_disable>
	cm4_force_shutdown(control->cm4);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff fece 	bl	80011be <cm4_force_shutdown>
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <idle>:

static void idle(CONTROL_INST_t * control) {
 800142a:	b580      	push	{r7, lr}
 800142c:	b082      	sub	sp, #8
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
	if(control_sched_should_run(control, CONTROL_SCHED_MOVE_TVC)) {
		servo_move(control->tvc_servo, control->tvc_mov_target);
		control_sched_done(control, CONTROL_SCHED_MOVE_TVC);
	}
#endif
	if(control_sched_should_run(control, CONTROL_SCHED_BOOT)) {
 8001432:	2102      	movs	r1, #2
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f000 f9db 	bl	80017f0 <control_sched_should_run>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d006      	beq.n	800144e <idle+0x24>
		init_boot(control);
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f000 f808 	bl	8001456 <init_boot>
		control_sched_done(control, CONTROL_SCHED_BOOT);
 8001446:	2102      	movs	r1, #2
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f000 f9e6 	bl	800181a <control_sched_done>
	}

}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <init_boot>:

static void init_boot(CONTROL_INST_t * control) {
 8001456:	b580      	push	{r7, lr}
 8001458:	b082      	sub	sp, #8
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
	//global enable
	//to boot the rpi
	led_set_color(LED_LILA);
 800145e:	224f      	movs	r2, #79	; 0x4f
 8001460:	2103      	movs	r1, #3
 8001462:	20ff      	movs	r0, #255	; 0xff
 8001464:	f000 fea4 	bl	80021b0 <led_set_color>
	control->state = CS_BOOT;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2201      	movs	r2, #1
 800146c:	701a      	strb	r2, [r3, #0]
	cm4_boot(control->cm4);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	699b      	ldr	r3, [r3, #24]
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff fe44 	bl	8001100 <cm4_boot>
}
 8001478:	bf00      	nop
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <boot>:

static void boot(CONTROL_INST_t * control) {
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
	//wait for the cm4 to start answering with concluent status packets
	uint8_t ready = 0;
 8001488:	2300      	movs	r3, #0
 800148a:	73fb      	strb	r3, [r7, #15]
	cm4_is_ready(control->cm4, &ready);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	f107 020f 	add.w	r2, r7, #15
 8001494:	4611      	mov	r1, r2
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff fe3d 	bl	8001116 <cm4_is_ready>
	if(ready) {
 800149c:	7bfb      	ldrb	r3, [r7, #15]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d002      	beq.n	80014a8 <boot+0x28>
		init_compute(control);
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f000 f804 	bl	80014b0 <init_compute>
	}
}
 80014a8:	bf00      	nop
 80014aa:	3710      	adds	r7, #16
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <init_compute>:

static void init_compute(CONTROL_INST_t * control) {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
	//start sending data to raspberry pi
	led_set_color(LED_BLUE);
 80014b8:	22ff      	movs	r2, #255	; 0xff
 80014ba:	2100      	movs	r1, #0
 80014bc:	2000      	movs	r0, #0
 80014be:	f000 fe77 	bl	80021b0 <led_set_color>
	control->state = CS_COMPUTE;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2202      	movs	r2, #2
 80014c6:	701a      	strb	r2, [r3, #0]
}
 80014c8:	bf00      	nop
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <compute>:

static void compute(CONTROL_INST_t * control) {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]

#if USE_PIPELINE == 0
	cm4_transaction(control->cm4, &control->sensor_payload, &control->command_payload);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6998      	ldr	r0, [r3, #24]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	3370      	adds	r3, #112	; 0x70
 80014e6:	461a      	mov	r2, r3
 80014e8:	f7ff fd00 	bl	8000eec <cm4_transaction>
#endif

	if(control_sched_should_run(control, CONTROL_SCHED_SHUTDOWN)) {
 80014ec:	2103      	movs	r1, #3
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f000 f97e 	bl	80017f0 <control_sched_should_run>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d006      	beq.n	8001508 <compute+0x38>
		init_shutdown(control);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f000 f808 	bl	8001510 <init_shutdown>
		control_sched_done(control, CONTROL_SCHED_SHUTDOWN);
 8001500:	2103      	movs	r1, #3
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f000 f989 	bl	800181a <control_sched_done>
	}
}
 8001508:	bf00      	nop
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <init_shutdown>:


static void init_shutdown(CONTROL_INST_t * control) {
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
	led_set_color(LED_ORANGE);
 8001518:	2207      	movs	r2, #7
 800151a:	210f      	movs	r1, #15
 800151c:	207f      	movs	r0, #127	; 0x7f
 800151e:	f000 fe47 	bl	80021b0 <led_set_color>
	control->state = CS_SHUTDOWN;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2203      	movs	r2, #3
 8001526:	701a      	strb	r2, [r3, #0]
	cm4_shutdown(control->cm4);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff fe12 	bl	8001156 <cm4_shutdown>
}
 8001532:	bf00      	nop
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <shutdown>:

static void shutdown(CONTROL_INST_t * control) {
 800153a:	b580      	push	{r7, lr}
 800153c:	b084      	sub	sp, #16
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
	uint8_t shutdown = 0;
 8001542:	2300      	movs	r3, #0
 8001544:	73fb      	strb	r3, [r7, #15]
	cm4_is_shutdown(control->cm4, &shutdown);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	699b      	ldr	r3, [r3, #24]
 800154a:	f107 020f 	add.w	r2, r7, #15
 800154e:	4611      	mov	r1, r2
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff fe16 	bl	8001182 <cm4_is_shutdown>
	if(shutdown) {
 8001556:	7bfb      	ldrb	r3, [r7, #15]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d002      	beq.n	8001562 <shutdown+0x28>
		init_idle(control);
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f7ff ff4d 	bl	80013fc <init_idle>
	}
}
 8001562:	bf00      	nop
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <init_abort>:

static void init_abort(CONTROL_INST_t * control) {
 800156a:	b580      	push	{r7, lr}
 800156c:	b082      	sub	sp, #8
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
	led_set_color(LED_PINK);
 8001572:	227f      	movs	r2, #127	; 0x7f
 8001574:	2100      	movs	r1, #0
 8001576:	207f      	movs	r0, #127	; 0x7f
 8001578:	f000 fe1a 	bl	80021b0 <led_set_color>
	control->shadow_state = control->state;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	781a      	ldrb	r2, [r3, #0]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	705a      	strb	r2, [r3, #1]
	control->state = CS_ABORT;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2204      	movs	r2, #4
 8001588:	701a      	strb	r2, [r3, #0]
#if USE_DYNAMIXEL == 1
	servo_move(control->tvc_servo, 2048); //2048 is the straight position
#endif
	control->counter_active=0;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2200      	movs	r2, #0
 800158e:	741a      	strb	r2, [r3, #16]
	storage_disable();
 8001590:	f001 fad0 	bl	8002b34 <storage_disable>
	cm4_force_shutdown(control->cm4);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff fe10 	bl	80011be <cm4_force_shutdown>
}
 800159e:	bf00      	nop
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <_abort>:

static void _abort(CONTROL_INST_t * control) {
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b082      	sub	sp, #8
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
	if(control_sched_should_run(control, CONTROL_SCHED_RECOVER)) {
 80015ae:	2105      	movs	r1, #5
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f000 f91d 	bl	80017f0 <control_sched_should_run>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d006      	beq.n	80015ca <_abort+0x24>
		init_idle(control);
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f7ff ff1d 	bl	80013fc <init_idle>
		control_sched_done(control, CONTROL_SCHED_RECOVER);
 80015c2:	2105      	movs	r1, #5
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f000 f928 	bl	800181a <control_sched_done>
	}
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <init_error>:

static void init_error(CONTROL_INST_t * control) {
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b082      	sub	sp, #8
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
	led_set_color(LED_RED);
 80015da:	2200      	movs	r2, #0
 80015dc:	2100      	movs	r1, #0
 80015de:	20ff      	movs	r0, #255	; 0xff
 80015e0:	f000 fde6 	bl	80021b0 <led_set_color>
	control->state = CS_ERROR;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2205      	movs	r2, #5
 80015e8:	701a      	strb	r2, [r3, #0]
	control->counter_active = 0;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	741a      	strb	r2, [r3, #16]
	storage_disable();
 80015f0:	f001 faa0 	bl	8002b34 <storage_disable>
}
 80015f4:	bf00      	nop
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <error>:

static void error(CONTROL_INST_t * control) {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
	//wait for user release
	if(control_sched_should_run(control, CONTROL_SCHED_RECOVER)) {
 8001604:	2105      	movs	r1, #5
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f000 f8f2 	bl	80017f0 <control_sched_should_run>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d006      	beq.n	8001620 <error+0x24>
		init_idle(control);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7ff fef2 	bl	80013fc <init_idle>
		control_sched_done(control, CONTROL_SCHED_RECOVER);
 8001618:	2105      	movs	r1, #5
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f000 f8fd 	bl	800181a <control_sched_done>
	}
}
 8001620:	bf00      	nop
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <control_move_tvc>:
CONTROL_STATE_t control_get_state() {
	return control.state;
}


void control_move_tvc(int32_t target) {
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
	control_sched_set(&control, CONTROL_SCHED_MOVE_TVC);
 8001630:	2104      	movs	r1, #4
 8001632:	4805      	ldr	r0, [pc, #20]	; (8001648 <control_move_tvc+0x20>)
 8001634:	f000 f90a 	bl	800184c <control_sched_set>
	control.tvc_mov_target = target;
 8001638:	4a03      	ldr	r2, [pc, #12]	; (8001648 <control_move_tvc+0x20>)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6213      	str	r3, [r2, #32]
}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000304 	.word	0x20000304

0800164c <control_boot>:

void control_boot(void) {
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
	control_sched_set(&control, CONTROL_SCHED_BOOT);
 8001650:	2102      	movs	r1, #2
 8001652:	4802      	ldr	r0, [pc, #8]	; (800165c <control_boot+0x10>)
 8001654:	f000 f8fa 	bl	800184c <control_sched_set>
}
 8001658:	bf00      	nop
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20000304 	.word	0x20000304

08001660 <control_shutdown>:

void control_shutdown(void) {
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
	control_sched_set(&control, CONTROL_SCHED_SHUTDOWN);
 8001664:	2103      	movs	r1, #3
 8001666:	4802      	ldr	r0, [pc, #8]	; (8001670 <control_shutdown+0x10>)
 8001668:	f000 f8f0 	bl	800184c <control_sched_set>
}
 800166c:	bf00      	nop
 800166e:	bd80      	pop	{r7, pc}
 8001670:	20000304 	.word	0x20000304

08001674 <control_abort>:

void control_abort() {
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
	control_sched_set(&control, CONTROL_SCHED_ABORT);
 8001678:	2101      	movs	r1, #1
 800167a:	4802      	ldr	r0, [pc, #8]	; (8001684 <control_abort+0x10>)
 800167c:	f000 f8e6 	bl	800184c <control_sched_set>
}
 8001680:	bf00      	nop
 8001682:	bd80      	pop	{r7, pc}
 8001684:	20000304 	.word	0x20000304

08001688 <control_recover>:

void control_recover() {
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
	control_sched_set(&control, CONTROL_SCHED_RECOVER);
 800168c:	2105      	movs	r1, #5
 800168e:	4802      	ldr	r0, [pc, #8]	; (8001698 <control_recover+0x10>)
 8001690:	f000 f8dc 	bl	800184c <control_sched_set>
}
 8001694:	bf00      	nop
 8001696:	bd80      	pop	{r7, pc}
 8001698:	20000304 	.word	0x20000304

0800169c <control_get_status>:

CONTROL_STATUS_t control_get_status() {
 800169c:	b4b0      	push	{r4, r5, r7}
 800169e:	b089      	sub	sp, #36	; 0x24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
	CONTROL_STATUS_t status = {0};
 80016a4:	f107 0308 	add.w	r3, r7, #8
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	605a      	str	r2, [r3, #4]
 80016ae:	609a      	str	r2, [r3, #8]
 80016b0:	60da      	str	r2, [r3, #12]
 80016b2:	611a      	str	r2, [r3, #16]
 80016b4:	615a      	str	r2, [r3, #20]
	status.state = control.state;
 80016b6:	4b17      	ldr	r3, [pc, #92]	; (8001714 <control_get_status+0x78>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	723b      	strb	r3, [r7, #8]
	status.tvc_error = control.tvc_servo->error;
 80016bc:	4b15      	ldr	r3, [pc, #84]	; (8001714 <control_get_status+0x78>)
 80016be:	69db      	ldr	r3, [r3, #28]
 80016c0:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 80016c4:	3318      	adds	r3, #24
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	737b      	strb	r3, [r7, #13]
	status.tvc_psu_voltage = control.tvc_servo->psu_voltage;
 80016ca:	4b12      	ldr	r3, [pc, #72]	; (8001714 <control_get_status+0x78>)
 80016cc:	69db      	ldr	r3, [r3, #28]
 80016ce:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 80016d2:	3310      	adds	r3, #16
 80016d4:	881b      	ldrh	r3, [r3, #0]
 80016d6:	817b      	strh	r3, [r7, #10]
	status.tvc_temperature = control.tvc_servo->temperature;
 80016d8:	4b0e      	ldr	r3, [pc, #56]	; (8001714 <control_get_status+0x78>)
 80016da:	69db      	ldr	r3, [r3, #28]
 80016dc:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 80016e0:	3312      	adds	r3, #18
 80016e2:	f993 3000 	ldrsb.w	r3, [r3]
 80016e6:	733b      	strb	r3, [r7, #12]
	status.tvc_position = control.tvc_servo->position;
 80016e8:	4b0a      	ldr	r3, [pc, #40]	; (8001714 <control_get_status+0x78>)
 80016ea:	69db      	ldr	r3, [r3, #28]
 80016ec:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 80016f0:	3314      	adds	r3, #20
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	613b      	str	r3, [r7, #16]

	return status;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	461d      	mov	r5, r3
 80016fa:	f107 0408 	add.w	r4, r7, #8
 80016fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001700:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001702:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001706:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	3724      	adds	r7, #36	; 0x24
 800170e:	46bd      	mov	sp, r7
 8001710:	bcb0      	pop	{r4, r5, r7}
 8001712:	4770      	bx	lr
 8001714:	20000304 	.word	0x20000304

08001718 <control_set_sens>:

void control_set_sens(CM4_PAYLOAD_SENSOR_t sens) {
 8001718:	b084      	sub	sp, #16
 800171a:	b4b0      	push	{r4, r5, r7}
 800171c:	af00      	add	r7, sp, #0
 800171e:	f107 040c 	add.w	r4, r7, #12
 8001722:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	control.sensor_payload = sens;
 8001726:	4b0a      	ldr	r3, [pc, #40]	; (8001750 <control_set_sens+0x38>)
 8001728:	f103 0438 	add.w	r4, r3, #56	; 0x38
 800172c:	f107 050c 	add.w	r5, r7, #12
 8001730:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001732:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001734:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001736:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001738:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800173a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800173c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001740:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	bcb0      	pop	{r4, r5, r7}
 800174a:	b004      	add	sp, #16
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	20000304 	.word	0x20000304

08001754 <control_get_sens>:

CM4_PAYLOAD_SENSOR_t control_get_sens(void) {
 8001754:	b4b0      	push	{r4, r5, r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
	return control.sensor_payload;
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	4b09      	ldr	r3, [pc, #36]	; (8001784 <control_get_sens+0x30>)
 8001760:	4615      	mov	r5, r2
 8001762:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8001766:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001768:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800176a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800176c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800176e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001770:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001772:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001776:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	bcb0      	pop	{r4, r5, r7}
 8001782:	4770      	bx	lr
 8001784:	20000304 	.word	0x20000304

08001788 <control_set_cmd>:

void control_set_cmd(CM4_PAYLOAD_COMMAND_t cmd) {
 8001788:	b084      	sub	sp, #16
 800178a:	b4b0      	push	{r4, r5, r7}
 800178c:	af00      	add	r7, sp, #0
 800178e:	f107 040c 	add.w	r4, r7, #12
 8001792:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	control.command_payload = cmd;
 8001796:	4b09      	ldr	r3, [pc, #36]	; (80017bc <control_set_cmd+0x34>)
 8001798:	f103 0470 	add.w	r4, r3, #112	; 0x70
 800179c:	f107 050c 	add.w	r5, r7, #12
 80017a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017ac:	682b      	ldr	r3, [r5, #0]
 80017ae:	6023      	str	r3, [r4, #0]
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bcb0      	pop	{r4, r5, r7}
 80017b6:	b004      	add	sp, #16
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	20000304 	.word	0x20000304

080017c0 <control_get_cmd>:

CM4_PAYLOAD_COMMAND_t control_get_cmd(void) {
 80017c0:	b4b0      	push	{r4, r5, r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
	return control.command_payload;
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	4b08      	ldr	r3, [pc, #32]	; (80017ec <control_get_cmd+0x2c>)
 80017cc:	4615      	mov	r5, r2
 80017ce:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80017d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017de:	6823      	ldr	r3, [r4, #0]
 80017e0:	602b      	str	r3, [r5, #0]
}
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bcb0      	pop	{r4, r5, r7}
 80017ea:	4770      	bx	lr
 80017ec:	20000304 	.word	0x20000304

080017f0 <control_sched_should_run>:


static uint8_t control_sched_should_run(CONTROL_INST_t * control, CONTROL_SCHED_t num) {
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	460b      	mov	r3, r1
 80017fa:	70fb      	strb	r3, [r7, #3]
	return control->sched == num;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001802:	78fa      	ldrb	r2, [r7, #3]
 8001804:	429a      	cmp	r2, r3
 8001806:	bf0c      	ite	eq
 8001808:	2301      	moveq	r3, #1
 800180a:	2300      	movne	r3, #0
 800180c:	b2db      	uxtb	r3, r3
}
 800180e:	4618      	mov	r0, r3
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <control_sched_done>:

static void control_sched_done(CONTROL_INST_t * control, CONTROL_SCHED_t num) {
 800181a:	b580      	push	{r7, lr}
 800181c:	b082      	sub	sp, #8
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
 8001822:	460b      	mov	r3, r1
 8001824:	70fb      	strb	r3, [r7, #3]
	if(control->sched == num) {
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800182c:	78fa      	ldrb	r2, [r7, #3]
 800182e:	429a      	cmp	r2, r3
 8001830:	d104      	bne.n	800183c <control_sched_done+0x22>
		control->sched = CONTROL_SCHED_NOTHING;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	} else {
		init_error(control);
	}
}
 800183a:	e002      	b.n	8001842 <control_sched_done+0x28>
		init_error(control);
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f7ff fec8 	bl	80015d2 <init_error>
}
 8001842:	bf00      	nop
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
	...

0800184c <control_sched_set>:

static void control_sched_set(CONTROL_INST_t * control, CONTROL_SCHED_t num) {
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	460b      	mov	r3, r1
 8001856:	70fb      	strb	r3, [r7, #3]
	if(num == CONTROL_SCHED_ABORT) { //ABORT ALWAYS TAKES OVER
 8001858:	78fb      	ldrb	r3, [r7, #3]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d103      	bne.n	8001866 <control_sched_set+0x1a>
		control->sched = num;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	78fa      	ldrb	r2, [r7, #3]
 8001862:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	}
	if(control->sched == CONTROL_SCHED_NOTHING) {
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800186c:	2b00      	cmp	r3, #0
 800186e:	d11c      	bne.n	80018aa <control_sched_set+0x5e>
		for(uint8_t i = 0; i < SCHED_ALLOWED_WIDTH; i++) {
 8001870:	2300      	movs	r3, #0
 8001872:	73fb      	strb	r3, [r7, #15]
 8001874:	e016      	b.n	80018a4 <control_sched_set+0x58>
			if(sched_allowed[control->state][i] == num) {
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	4618      	mov	r0, r3
 800187c:	7bfa      	ldrb	r2, [r7, #15]
 800187e:	490d      	ldr	r1, [pc, #52]	; (80018b4 <control_sched_set+0x68>)
 8001880:	4603      	mov	r3, r0
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	4403      	add	r3, r0
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	440b      	add	r3, r1
 800188a:	4413      	add	r3, r2
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	78fa      	ldrb	r2, [r7, #3]
 8001890:	429a      	cmp	r2, r3
 8001892:	d104      	bne.n	800189e <control_sched_set+0x52>
				control->sched = num;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	78fa      	ldrb	r2, [r7, #3]
 8001898:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				return;
 800189c:	e005      	b.n	80018aa <control_sched_set+0x5e>
		for(uint8_t i = 0; i < SCHED_ALLOWED_WIDTH; i++) {
 800189e:	7bfb      	ldrb	r3, [r7, #15]
 80018a0:	3301      	adds	r3, #1
 80018a2:	73fb      	strb	r3, [r7, #15]
 80018a4:	7bfb      	ldrb	r3, [r7, #15]
 80018a6:	2b05      	cmp	r3, #5
 80018a8:	d9e5      	bls.n	8001876 <control_sched_set+0x2a>
			}
		}
	}
}
 80018aa:	3714      	adds	r7, #20
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	2000000c 	.word	0x2000000c

080018b8 <util_encode_u8>:
static inline void util_encode_u8(uint8_t * data, uint8_t value) {
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	460b      	mov	r3, r1
 80018c2:	70fb      	strb	r3, [r7, #3]
	data[0] = value;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	78fa      	ldrb	r2, [r7, #3]
 80018c8:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	3301      	adds	r3, #1
 80018ce:	2200      	movs	r2, #0
 80018d0:	701a      	strb	r2, [r3, #0]
	data[2] = 0x00;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	3302      	adds	r3, #2
 80018d6:	2200      	movs	r2, #0
 80018d8:	701a      	strb	r2, [r3, #0]
	data[3] = 0x00;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	3303      	adds	r3, #3
 80018de:	2200      	movs	r2, #0
 80018e0:	701a      	strb	r2, [r3, #0]
}
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <util_encode_u16>:
static inline void util_encode_u16(uint8_t * data, uint16_t value) {
 80018ee:	b480      	push	{r7}
 80018f0:	b083      	sub	sp, #12
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
 80018f6:	460b      	mov	r3, r1
 80018f8:	807b      	strh	r3, [r7, #2]
	data[0] = value;
 80018fa:	887b      	ldrh	r3, [r7, #2]
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	701a      	strb	r2, [r3, #0]
	data[1] = value>>8;
 8001902:	887b      	ldrh	r3, [r7, #2]
 8001904:	0a1b      	lsrs	r3, r3, #8
 8001906:	b29a      	uxth	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3301      	adds	r3, #1
 800190c:	b2d2      	uxtb	r2, r2
 800190e:	701a      	strb	r2, [r3, #0]
	data[2] = 0x00;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3302      	adds	r3, #2
 8001914:	2200      	movs	r2, #0
 8001916:	701a      	strb	r2, [r3, #0]
	data[3] = 0x00;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3303      	adds	r3, #3
 800191c:	2200      	movs	r2, #0
 800191e:	701a      	strb	r2, [r3, #0]
}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <util_encode_u32>:
static inline void util_encode_u32(uint8_t * data, uint32_t value) {
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
	data[0] = value;
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	b2da      	uxtb	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	701a      	strb	r2, [r3, #0]
	data[1] = value>>8;
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	0a1a      	lsrs	r2, r3, #8
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	3301      	adds	r3, #1
 8001946:	b2d2      	uxtb	r2, r2
 8001948:	701a      	strb	r2, [r3, #0]
	data[2] = value>>16;
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	0c1a      	lsrs	r2, r3, #16
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	3302      	adds	r3, #2
 8001952:	b2d2      	uxtb	r2, r2
 8001954:	701a      	strb	r2, [r3, #0]
	data[3] = value>>24;
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	0e1a      	lsrs	r2, r3, #24
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	3303      	adds	r3, #3
 800195e:	b2d2      	uxtb	r2, r2
 8001960:	701a      	strb	r2, [r3, #0]
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <util_encode_i8>:
static inline void util_encode_i8(uint8_t * data, int8_t value) {
 800196e:	b480      	push	{r7}
 8001970:	b083      	sub	sp, #12
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
 8001976:	460b      	mov	r3, r1
 8001978:	70fb      	strb	r3, [r7, #3]
	data[0] = value;
 800197a:	78fa      	ldrb	r2, [r7, #3]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3301      	adds	r3, #1
 8001984:	2200      	movs	r2, #0
 8001986:	701a      	strb	r2, [r3, #0]
	data[2] = 0x00;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	3302      	adds	r3, #2
 800198c:	2200      	movs	r2, #0
 800198e:	701a      	strb	r2, [r3, #0]
	data[3] = 0x00;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3303      	adds	r3, #3
 8001994:	2200      	movs	r2, #0
 8001996:	701a      	strb	r2, [r3, #0]
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <util_encode_i32>:
static inline void util_encode_i32(uint8_t * data, int32_t value) {
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
	data[0] = value;
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	701a      	strb	r2, [r3, #0]
	data[1] = value>>8;
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	121a      	asrs	r2, r3, #8
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	3301      	adds	r3, #1
 80019be:	b2d2      	uxtb	r2, r2
 80019c0:	701a      	strb	r2, [r3, #0]
	data[2] = value>>16;
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	141a      	asrs	r2, r3, #16
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	3302      	adds	r3, #2
 80019ca:	b2d2      	uxtb	r2, r2
 80019cc:	701a      	strb	r2, [r3, #0]
	data[3] = value>>24;
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	161a      	asrs	r2, r3, #24
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	3303      	adds	r3, #3
 80019d6:	b2d2      	uxtb	r2, r2
 80019d8:	701a      	strb	r2, [r3, #0]
}
 80019da:	bf00      	nop
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr

080019e6 <util_decode_u32>:
static inline uint32_t util_decode_u32(uint8_t * data) {
 80019e6:	b480      	push	{r7}
 80019e8:	b083      	sub	sp, #12
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
	return (uint32_t) data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	461a      	mov	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3301      	adds	r3, #1
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	021b      	lsls	r3, r3, #8
 80019fc:	4313      	orrs	r3, r2
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	3202      	adds	r2, #2
 8001a02:	7812      	ldrb	r2, [r2, #0]
 8001a04:	0412      	lsls	r2, r2, #16
 8001a06:	4313      	orrs	r3, r2
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	3203      	adds	r2, #3
 8001a0c:	7812      	ldrb	r2, [r2, #0]
 8001a0e:	0612      	lsls	r2, r2, #24
 8001a10:	4313      	orrs	r3, r2
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <util_decode_i32>:
static inline int32_t util_decode_i32(uint8_t * data) {
 8001a1e:	b480      	push	{r7}
 8001a20:	b083      	sub	sp, #12
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
	return (int32_t) data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	021b      	lsls	r3, r3, #8
 8001a34:	431a      	orrs	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	3302      	adds	r3, #2
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	041b      	lsls	r3, r3, #16
 8001a3e:	431a      	orrs	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3303      	adds	r3, #3
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	061b      	lsls	r3, r3, #24
 8001a48:	4313      	orrs	r3, r2
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
	...

08001a58 <debug_decode_fcn>:
 *	DECLARATIONS
 **********************/


//Requires an instance of type debug
SERIAL_RET_t debug_decode_fcn(void * inst, uint8_t data) {
 8001a58:	b590      	push	{r4, r7, lr}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	460b      	mov	r3, r1
 8001a62:	70fb      	strb	r3, [r7, #3]
	static uint8_t send_data[MSV2_MAX_DATA_LEN];
	static uint16_t length = 0;
	static uint16_t bin_length = 0;
	DEBUG_INST_t * debug = (DEBUG_INST_t *) inst;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	60fb      	str	r3, [r7, #12]
	MSV2_ERROR_t tmp = msv2_decode_fragment(&debug->msv2, data);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	3304      	adds	r3, #4
 8001a6c:	78fa      	ldrb	r2, [r7, #3]
 8001a6e:	4611      	mov	r1, r2
 8001a70:	4618      	mov	r0, r3
 8001a72:	f000 fcf3 	bl	800245c <msv2_decode_fragment>
 8001a76:	4603      	mov	r3, r0
 8001a78:	72fb      	strb	r3, [r7, #11]

	if(tmp == MSV2_SUCCESS) {
 8001a7a:	7afb      	ldrb	r3, [r7, #11]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d15e      	bne.n	8001b3e <debug_decode_fcn+0xe6>
		if(debug->msv2.rx.opcode < debug_fcn_max) {
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	7a1b      	ldrb	r3, [r3, #8]
 8001a84:	b29a      	uxth	r2, r3
 8001a86:	4b30      	ldr	r3, [pc, #192]	; (8001b48 <debug_decode_fcn+0xf0>)
 8001a88:	881b      	ldrh	r3, [r3, #0]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d22e      	bcs.n	8001aec <debug_decode_fcn+0x94>

			debug_fcn[debug->msv2.rx.opcode](debug->msv2.rx.data, debug->msv2.rx.length, send_data, &length);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	7a1b      	ldrb	r3, [r3, #8]
 8001a92:	461a      	mov	r2, r3
 8001a94:	4b2d      	ldr	r3, [pc, #180]	; (8001b4c <debug_decode_fcn+0xf4>)
 8001a96:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	f103 0012 	add.w	r0, r3, #18
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	89d9      	ldrh	r1, [r3, #14]
 8001aa4:	4b2a      	ldr	r3, [pc, #168]	; (8001b50 <debug_decode_fcn+0xf8>)
 8001aa6:	4a2b      	ldr	r2, [pc, #172]	; (8001b54 <debug_decode_fcn+0xfc>)
 8001aa8:	47a0      	blx	r4
			//length is in words
			bin_length = msv2_create_frame(&debug->msv2, debug->msv2.rx.opcode, length/2, send_data);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	1d18      	adds	r0, r3, #4
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	7a19      	ldrb	r1, [r3, #8]
 8001ab2:	4b27      	ldr	r3, [pc, #156]	; (8001b50 <debug_decode_fcn+0xf8>)
 8001ab4:	881b      	ldrh	r3, [r3, #0]
 8001ab6:	085b      	lsrs	r3, r3, #1
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	b2da      	uxtb	r2, r3
 8001abc:	4b25      	ldr	r3, [pc, #148]	; (8001b54 <debug_decode_fcn+0xfc>)
 8001abe:	f000 fbe7 	bl	8002290 <msv2_create_frame>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4b24      	ldr	r3, [pc, #144]	; (8001b58 <debug_decode_fcn+0x100>)
 8001ac8:	801a      	strh	r2, [r3, #0]
			serial_send(&debug->ser, msv2_tx_data(&debug->msv2), bin_length);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	f503 5480 	add.w	r4, r3, #4096	; 0x1000
 8001ad0:	3418      	adds	r4, #24
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	3304      	adds	r3, #4
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f000 fdb4 	bl	8002644 <msv2_tx_data>
 8001adc:	4601      	mov	r1, r0
 8001ade:	4b1e      	ldr	r3, [pc, #120]	; (8001b58 <debug_decode_fcn+0x100>)
 8001ae0:	881b      	ldrh	r3, [r3, #0]
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	4620      	mov	r0, r4
 8001ae6:	f000 fed3 	bl	8002890 <serial_send>
 8001aea:	e028      	b.n	8001b3e <debug_decode_fcn+0xe6>
		} else {
			send_data[0] = CRC_ERROR_LO;
 8001aec:	4b19      	ldr	r3, [pc, #100]	; (8001b54 <debug_decode_fcn+0xfc>)
 8001aee:	22be      	movs	r2, #190	; 0xbe
 8001af0:	701a      	strb	r2, [r3, #0]
			send_data[1] = CRC_ERROR_HI;
 8001af2:	4b18      	ldr	r3, [pc, #96]	; (8001b54 <debug_decode_fcn+0xfc>)
 8001af4:	22eb      	movs	r2, #235	; 0xeb
 8001af6:	705a      	strb	r2, [r3, #1]
			length = 2;
 8001af8:	4b15      	ldr	r3, [pc, #84]	; (8001b50 <debug_decode_fcn+0xf8>)
 8001afa:	2202      	movs	r2, #2
 8001afc:	801a      	strh	r2, [r3, #0]
			bin_length = msv2_create_frame(&debug->msv2, debug->msv2.rx.opcode, length/2, send_data);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	1d18      	adds	r0, r3, #4
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	7a19      	ldrb	r1, [r3, #8]
 8001b06:	4b12      	ldr	r3, [pc, #72]	; (8001b50 <debug_decode_fcn+0xf8>)
 8001b08:	881b      	ldrh	r3, [r3, #0]
 8001b0a:	085b      	lsrs	r3, r3, #1
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	b2da      	uxtb	r2, r3
 8001b10:	4b10      	ldr	r3, [pc, #64]	; (8001b54 <debug_decode_fcn+0xfc>)
 8001b12:	f000 fbbd 	bl	8002290 <msv2_create_frame>
 8001b16:	4603      	mov	r3, r0
 8001b18:	461a      	mov	r2, r3
 8001b1a:	4b0f      	ldr	r3, [pc, #60]	; (8001b58 <debug_decode_fcn+0x100>)
 8001b1c:	801a      	strh	r2, [r3, #0]
			serial_send(&debug->ser, msv2_tx_data(&debug->msv2), bin_length);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f503 5480 	add.w	r4, r3, #4096	; 0x1000
 8001b24:	3418      	adds	r4, #24
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	3304      	adds	r3, #4
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f000 fd8a 	bl	8002644 <msv2_tx_data>
 8001b30:	4601      	mov	r1, r0
 8001b32:	4b09      	ldr	r3, [pc, #36]	; (8001b58 <debug_decode_fcn+0x100>)
 8001b34:	881b      	ldrh	r3, [r3, #0]
 8001b36:	461a      	mov	r2, r3
 8001b38:	4620      	mov	r0, r4
 8001b3a:	f000 fea9 	bl	8002890 <serial_send>
		}
	}

	return tmp;
 8001b3e:	7afb      	ldrb	r3, [r7, #11]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3714      	adds	r7, #20
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd90      	pop	{r4, r7, pc}
 8001b48:	20000074 	.word	0x20000074
 8001b4c:	20000048 	.word	0x20000048
 8001b50:	20001a34 	.word	0x20001a34
 8001b54:	20001834 	.word	0x20001834
 8001b58:	20001a36 	.word	0x20001a36

08001b5c <debug_init>:

void debug_init(DEBUG_INST_t * debug) {
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
	static uint32_t id_counter = 0;
	msv2_init(&debug->msv2);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	3304      	adds	r3, #4
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f000 fb7d 	bl	8002268 <msv2_init>
	serial_init(&debug->ser, &DEBUG_UART, debug, debug_decode_fcn);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f503 5080 	add.w	r0, r3, #4096	; 0x1000
 8001b74:	3018      	adds	r0, #24
 8001b76:	4b08      	ldr	r3, [pc, #32]	; (8001b98 <debug_init+0x3c>)
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	4908      	ldr	r1, [pc, #32]	; (8001b9c <debug_init+0x40>)
 8001b7c:	f000 fe48 	bl	8002810 <serial_init>
	debug->id = id_counter++;
 8001b80:	4b07      	ldr	r3, [pc, #28]	; (8001ba0 <debug_init+0x44>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	1c5a      	adds	r2, r3, #1
 8001b86:	4906      	ldr	r1, [pc, #24]	; (8001ba0 <debug_init+0x44>)
 8001b88:	600a      	str	r2, [r1, #0]
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	6013      	str	r3, [r2, #0]
}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	08001a59 	.word	0x08001a59
 8001b9c:	20007df8 	.word	0x20007df8
 8001ba0:	20001a38 	.word	0x20001a38

08001ba4 <debug_get_status>:

static void debug_get_status(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08c      	sub	sp, #48	; 0x30
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	607a      	str	r2, [r7, #4]
 8001bae:	603b      	str	r3, [r7, #0]
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	817b      	strh	r3, [r7, #10]
	CONTROL_STATUS_t status = control_get_status();
 8001bb4:	f107 0314 	add.w	r3, r7, #20
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff fd6f 	bl	800169c <control_get_status>
	util_encode_u16(resp, status.state);
 8001bbe:	7d3b      	ldrb	r3, [r7, #20]
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f7ff fe92 	bl	80018ee <util_encode_u16>
	util_encode_u16(resp+2, 0); //padding
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	3302      	adds	r3, #2
 8001bce:	2100      	movs	r1, #0
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff fe8c 	bl	80018ee <util_encode_u16>
	util_encode_i32(resp+4, status.counter);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	3304      	adds	r3, #4
 8001bda:	6a3a      	ldr	r2, [r7, #32]
 8001bdc:	4611      	mov	r1, r2
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff fee0 	bl	80019a4 <util_encode_i32>
	uint32_t memory = storage_get_used();
 8001be4:	f000 ff82 	bl	8002aec <storage_get_used>
 8001be8:	62f8      	str	r0, [r7, #44]	; 0x2c
	util_encode_u32(resp+8, memory);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	3308      	adds	r3, #8
 8001bee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff fe9b 	bl	800192c <util_encode_u32>
	util_encode_i32(resp+12, status.tvc_position);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	330c      	adds	r3, #12
 8001bfa:	69fa      	ldr	r2, [r7, #28]
 8001bfc:	4611      	mov	r1, r2
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff fed0 	bl	80019a4 <util_encode_i32>
	util_encode_u16(resp+16, status.tvc_psu_voltage);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	3310      	adds	r3, #16
 8001c08:	8afa      	ldrh	r2, [r7, #22]
 8001c0a:	4611      	mov	r1, r2
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff fe6e 	bl	80018ee <util_encode_u16>
	util_encode_u8(resp+18, status.tvc_error);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	3312      	adds	r3, #18
 8001c16:	7e7a      	ldrb	r2, [r7, #25]
 8001c18:	4611      	mov	r1, r2
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff fe4c 	bl	80018b8 <util_encode_u8>
	util_encode_i8(resp+19, status.tvc_temperature);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3313      	adds	r3, #19
 8001c24:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8001c28:	4611      	mov	r1, r2
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff fe9f 	bl	800196e <util_encode_i8>
	*resp_len = 20;
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	2214      	movs	r2, #20
 8001c34:	801a      	strh	r2, [r3, #0]
}
 8001c36:	bf00      	nop
 8001c38:	3730      	adds	r7, #48	; 0x30
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <debug_boot>:

static void debug_boot(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b084      	sub	sp, #16
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	60f8      	str	r0, [r7, #12]
 8001c46:	607a      	str	r2, [r7, #4]
 8001c48:	603b      	str	r3, [r7, #0]
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	817b      	strh	r3, [r7, #10]
	control_boot();
 8001c4e:	f7ff fcfd 	bl	800164c <control_boot>
	resp[0] = OK_LO;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	22c5      	movs	r2, #197	; 0xc5
 8001c56:	701a      	strb	r2, [r3, #0]
	resp[1] = OK_HI;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	225c      	movs	r2, #92	; 0x5c
 8001c5e:	701a      	strb	r2, [r3, #0]
	*resp_len = 2;
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	2202      	movs	r2, #2
 8001c64:	801a      	strh	r2, [r3, #0]
}
 8001c66:	bf00      	nop
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <debug_shutdown>:


static void debug_shutdown(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b084      	sub	sp, #16
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	60f8      	str	r0, [r7, #12]
 8001c76:	607a      	str	r2, [r7, #4]
 8001c78:	603b      	str	r3, [r7, #0]
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	817b      	strh	r3, [r7, #10]
	control_shutdown();
 8001c7e:	f7ff fcef 	bl	8001660 <control_shutdown>
	resp[0] = OK_LO;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	22c5      	movs	r2, #197	; 0xc5
 8001c86:	701a      	strb	r2, [r3, #0]
	resp[1] = OK_HI;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	225c      	movs	r2, #92	; 0x5c
 8001c8e:	701a      	strb	r2, [r3, #0]
	*resp_len = 2;
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	2202      	movs	r2, #2
 8001c94:	801a      	strh	r2, [r3, #0]
}
 8001c96:	bf00      	nop
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <debug_download>:

static void debug_download(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b086      	sub	sp, #24
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	60f8      	str	r0, [r7, #12]
 8001ca6:	607a      	str	r2, [r7, #4]
 8001ca8:	603b      	str	r3, [r7, #0]
 8001caa:	460b      	mov	r3, r1
 8001cac:	817b      	strh	r3, [r7, #10]
	//downloads 5 samples at a certain location
	if(data_len == DOWNLOAD_LEN) {
 8001cae:	897b      	ldrh	r3, [r7, #10]
 8001cb0:	2b04      	cmp	r3, #4
 8001cb2:	d11b      	bne.n	8001cec <debug_download+0x4e>
		uint32_t location = util_decode_u32(data);
 8001cb4:	68f8      	ldr	r0, [r7, #12]
 8001cb6:	f7ff fe96 	bl	80019e6 <util_decode_u32>
 8001cba:	6138      	str	r0, [r7, #16]
		for(uint8_t i = 0; i < 5; i++) {
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	75fb      	strb	r3, [r7, #23]
 8001cc0:	e00e      	b.n	8001ce0 <debug_download+0x42>
			storage_get_sample(location+i, resp+i*32);
 8001cc2:	7dfa      	ldrb	r2, [r7, #23]
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	441a      	add	r2, r3
 8001cc8:	7dfb      	ldrb	r3, [r7, #23]
 8001cca:	015b      	lsls	r3, r3, #5
 8001ccc:	4619      	mov	r1, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	440b      	add	r3, r1
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4610      	mov	r0, r2
 8001cd6:	f000 ff15 	bl	8002b04 <storage_get_sample>
		for(uint8_t i = 0; i < 5; i++) {
 8001cda:	7dfb      	ldrb	r3, [r7, #23]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	75fb      	strb	r3, [r7, #23]
 8001ce0:	7dfb      	ldrb	r3, [r7, #23]
 8001ce2:	2b04      	cmp	r3, #4
 8001ce4:	d9ed      	bls.n	8001cc2 <debug_download+0x24>
		}
		*resp_len = 32*5;
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	22a0      	movs	r2, #160	; 0xa0
 8001cea:	801a      	strh	r2, [r3, #0]
	}
}
 8001cec:	bf00      	nop
 8001cee:	3718      	adds	r7, #24
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <debug_tvc_move>:

static void debug_tvc_move(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	607a      	str	r2, [r7, #4]
 8001cfe:	603b      	str	r3, [r7, #0]
 8001d00:	460b      	mov	r3, r1
 8001d02:	817b      	strh	r3, [r7, #10]
	if(data_len == TVC_MOVE_LEN) {
 8001d04:	897b      	ldrh	r3, [r7, #10]
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	d111      	bne.n	8001d2e <debug_tvc_move+0x3a>
		int32_t target = util_decode_i32(data);
 8001d0a:	68f8      	ldr	r0, [r7, #12]
 8001d0c:	f7ff fe87 	bl	8001a1e <util_decode_i32>
 8001d10:	6178      	str	r0, [r7, #20]
		control_move_tvc(target);
 8001d12:	6978      	ldr	r0, [r7, #20]
 8001d14:	f7ff fc88 	bl	8001628 <control_move_tvc>
		resp[0] = OK_LO;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	22c5      	movs	r2, #197	; 0xc5
 8001d1c:	701a      	strb	r2, [r3, #0]
		resp[1] = OK_HI;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	3301      	adds	r3, #1
 8001d22:	225c      	movs	r2, #92	; 0x5c
 8001d24:	701a      	strb	r2, [r3, #0]
		*resp_len = 2;
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	2202      	movs	r2, #2
 8001d2a:	801a      	strh	r2, [r3, #0]
	} else {
		resp[0] = ERROR_LO;
		resp[1] = ERROR_HI;
		*resp_len = 2;
	}
}
 8001d2c:	e009      	b.n	8001d42 <debug_tvc_move+0x4e>
		resp[0] = ERROR_LO;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	22ce      	movs	r2, #206	; 0xce
 8001d32:	701a      	strb	r2, [r3, #0]
		resp[1] = ERROR_HI;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	3301      	adds	r3, #1
 8001d38:	22ec      	movs	r2, #236	; 0xec
 8001d3a:	701a      	strb	r2, [r3, #0]
		*resp_len = 2;
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	2202      	movs	r2, #2
 8001d40:	801a      	strh	r2, [r3, #0]
}
 8001d42:	bf00      	nop
 8001d44:	3718      	adds	r7, #24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <debug_abort>:

static void debug_abort(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b084      	sub	sp, #16
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	60f8      	str	r0, [r7, #12]
 8001d52:	607a      	str	r2, [r7, #4]
 8001d54:	603b      	str	r3, [r7, #0]
 8001d56:	460b      	mov	r3, r1
 8001d58:	817b      	strh	r3, [r7, #10]
	control_abort();
 8001d5a:	f7ff fc8b 	bl	8001674 <control_abort>
	resp[0] = OK_LO;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	22c5      	movs	r2, #197	; 0xc5
 8001d62:	701a      	strb	r2, [r3, #0]
	resp[1] = OK_HI;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3301      	adds	r3, #1
 8001d68:	225c      	movs	r2, #92	; 0x5c
 8001d6a:	701a      	strb	r2, [r3, #0]
	*resp_len = 2;
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	2202      	movs	r2, #2
 8001d70:	801a      	strh	r2, [r3, #0]
}
 8001d72:	bf00      	nop
 8001d74:	3710      	adds	r7, #16
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <debug_recover>:

static void debug_recover(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b084      	sub	sp, #16
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	60f8      	str	r0, [r7, #12]
 8001d82:	607a      	str	r2, [r7, #4]
 8001d84:	603b      	str	r3, [r7, #0]
 8001d86:	460b      	mov	r3, r1
 8001d88:	817b      	strh	r3, [r7, #10]
	control_recover();
 8001d8a:	f7ff fc7d 	bl	8001688 <control_recover>
	resp[0] = OK_LO;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	22c5      	movs	r2, #197	; 0xc5
 8001d92:	701a      	strb	r2, [r3, #0]
	resp[1] = OK_HI;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	3301      	adds	r3, #1
 8001d98:	225c      	movs	r2, #92	; 0x5c
 8001d9a:	701a      	strb	r2, [r3, #0]
	*resp_len = 2;
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	2202      	movs	r2, #2
 8001da0:	801a      	strh	r2, [r3, #0]
}
 8001da2:	bf00      	nop
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <debug_transaction>:

static void debug_transaction(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 8001daa:	b5b0      	push	{r4, r5, r7, lr}
 8001dac:	b0aa      	sub	sp, #168	; 0xa8
 8001dae:	af0a      	add	r7, sp, #40	; 0x28
 8001db0:	60f8      	str	r0, [r7, #12]
 8001db2:	607a      	str	r2, [r7, #4]
 8001db4:	603b      	str	r3, [r7, #0]
 8001db6:	460b      	mov	r3, r1
 8001db8:	817b      	strh	r3, [r7, #10]
	if(data_len == TRANSACTION_SENS_LEN) {
 8001dba:	897b      	ldrh	r3, [r7, #10]
 8001dbc:	2b20      	cmp	r3, #32
 8001dbe:	f040 80a9 	bne.w	8001f14 <debug_transaction+0x16a>
		CM4_PAYLOAD_SENSOR_t sens_data = {0};
 8001dc2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001dc6:	2238      	movs	r2, #56	; 0x38
 8001dc8:	2100      	movs	r1, #0
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f009 fe0e 	bl	800b9ec <memset>
		sens_data.acc_x = util_decode_i32(data);
 8001dd0:	68f8      	ldr	r0, [r7, #12]
 8001dd2:	f7ff fe24 	bl	8001a1e <util_decode_i32>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	64fb      	str	r3, [r7, #76]	; 0x4c
		sens_data.acc_y = util_decode_i32(data+4);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	3304      	adds	r3, #4
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff fe1d 	bl	8001a1e <util_decode_i32>
 8001de4:	4603      	mov	r3, r0
 8001de6:	653b      	str	r3, [r7, #80]	; 0x50
		sens_data.acc_z = util_decode_i32(data+8);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	3308      	adds	r3, #8
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff fe16 	bl	8001a1e <util_decode_i32>
 8001df2:	4603      	mov	r3, r0
 8001df4:	657b      	str	r3, [r7, #84]	; 0x54

		sens_data.gyro_x = util_decode_i32(data+12);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	330c      	adds	r3, #12
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff fe0f 	bl	8001a1e <util_decode_i32>
 8001e00:	4603      	mov	r3, r0
 8001e02:	65bb      	str	r3, [r7, #88]	; 0x58
		sens_data.gyro_y = util_decode_i32(data+16);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	3310      	adds	r3, #16
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff fe08 	bl	8001a1e <util_decode_i32>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	65fb      	str	r3, [r7, #92]	; 0x5c
		sens_data.gyro_z = util_decode_i32(data+20);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	3314      	adds	r3, #20
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff fe01 	bl	8001a1e <util_decode_i32>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	663b      	str	r3, [r7, #96]	; 0x60

		sens_data.baro = util_decode_i32(data+24);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	3318      	adds	r3, #24
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff fdfa 	bl	8001a1e <util_decode_i32>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	667b      	str	r3, [r7, #100]	; 0x64
		sens_data.cc_pressure = util_decode_i32(data+28);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	331c      	adds	r3, #28
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff fdf3 	bl	8001a1e <util_decode_i32>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	66fb      	str	r3, [r7, #108]	; 0x6c

		control_set_sens(sens_data);
 8001e3c:	466d      	mov	r5, sp
 8001e3e:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001e42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e4a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e4e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e52:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e58:	f7ff fc5e 	bl	8001718 <control_set_sens>

		CM4_PAYLOAD_COMMAND_t cmd_data = control_get_cmd();
 8001e5c:	f107 0314 	add.w	r3, r7, #20
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff fcad 	bl	80017c0 <control_get_cmd>

		util_encode_i32(resp, cmd_data.thrust);
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	4619      	mov	r1, r3
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7ff fd9a 	bl	80019a4 <util_encode_i32>
		util_encode_i32(resp+4, cmd_data.dynamixel[0]);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3304      	adds	r3, #4
 8001e74:	69fa      	ldr	r2, [r7, #28]
 8001e76:	4611      	mov	r1, r2
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff fd93 	bl	80019a4 <util_encode_i32>
		util_encode_i32(resp+8, cmd_data.dynamixel[1]);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	3308      	adds	r3, #8
 8001e82:	6a3a      	ldr	r2, [r7, #32]
 8001e84:	4611      	mov	r1, r2
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff fd8c 	bl	80019a4 <util_encode_i32>
		util_encode_i32(resp+12, cmd_data.dynamixel[2]);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	330c      	adds	r3, #12
 8001e90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e92:	4611      	mov	r1, r2
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff fd85 	bl	80019a4 <util_encode_i32>
		util_encode_i32(resp+16, cmd_data.dynamixel[3]);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	3310      	adds	r3, #16
 8001e9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ea0:	4611      	mov	r1, r2
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff fd7e 	bl	80019a4 <util_encode_i32>

		util_encode_i32(resp+20, cmd_data.position[0]);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	3314      	adds	r3, #20
 8001eac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001eae:	4611      	mov	r1, r2
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff fd77 	bl	80019a4 <util_encode_i32>
		util_encode_i32(resp+24, cmd_data.position[1]);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	3318      	adds	r3, #24
 8001eba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ebc:	4611      	mov	r1, r2
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff fd70 	bl	80019a4 <util_encode_i32>
		util_encode_i32(resp+28, cmd_data.position[2]);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	331c      	adds	r3, #28
 8001ec8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001eca:	4611      	mov	r1, r2
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff fd69 	bl	80019a4 <util_encode_i32>

		util_encode_i32(resp+32, cmd_data.speed[0]);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	3320      	adds	r3, #32
 8001ed6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ed8:	4611      	mov	r1, r2
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7ff fd62 	bl	80019a4 <util_encode_i32>
		util_encode_i32(resp+36, cmd_data.speed[1]);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3324      	adds	r3, #36	; 0x24
 8001ee4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ee6:	4611      	mov	r1, r2
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff fd5b 	bl	80019a4 <util_encode_i32>
		util_encode_i32(resp+40, cmd_data.speed[2]);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	3328      	adds	r3, #40	; 0x28
 8001ef2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001ef4:	4611      	mov	r1, r2
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff fd54 	bl	80019a4 <util_encode_i32>

		util_encode_i32(resp+44, cmd_data.state);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	332c      	adds	r3, #44	; 0x2c
 8001f00:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8001f04:	4611      	mov	r1, r2
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7ff fd4c 	bl	80019a4 <util_encode_i32>

		*resp_len = TRANSACTION_CMD_LEN;
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	222e      	movs	r2, #46	; 0x2e
 8001f10:	801a      	strh	r2, [r3, #0]
	} else {
		resp[0] = ERROR_LO;
		resp[1] = ERROR_HI;
		*resp_len = 2;
	}
}
 8001f12:	e009      	b.n	8001f28 <debug_transaction+0x17e>
		resp[0] = ERROR_LO;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	22ce      	movs	r2, #206	; 0xce
 8001f18:	701a      	strb	r2, [r3, #0]
		resp[1] = ERROR_HI;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	22ec      	movs	r2, #236	; 0xec
 8001f20:	701a      	strb	r2, [r3, #0]
		*resp_len = 2;
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	2202      	movs	r2, #2
 8001f26:	801a      	strh	r2, [r3, #0]
}
 8001f28:	bf00      	nop
 8001f2a:	3780      	adds	r7, #128	; 0x80
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bdb0      	pop	{r4, r5, r7, pc}

08001f30 <debug_sensor_write>:

static void debug_sensor_write(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 8001f30:	b5b0      	push	{r4, r5, r7, lr}
 8001f32:	b09c      	sub	sp, #112	; 0x70
 8001f34:	af0a      	add	r7, sp, #40	; 0x28
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	607a      	str	r2, [r7, #4]
 8001f3a:	603b      	str	r3, [r7, #0]
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	817b      	strh	r3, [r7, #10]
	if(data_len == TRANSACTION_SENS_LEN) {
 8001f40:	897b      	ldrh	r3, [r7, #10]
 8001f42:	2b20      	cmp	r3, #32
 8001f44:	d150      	bne.n	8001fe8 <debug_sensor_write+0xb8>
		CM4_PAYLOAD_SENSOR_t sens_data = {0};
 8001f46:	f107 0310 	add.w	r3, r7, #16
 8001f4a:	2238      	movs	r2, #56	; 0x38
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f009 fd4c 	bl	800b9ec <memset>
		sens_data.acc_x = util_decode_i32(data);
 8001f54:	68f8      	ldr	r0, [r7, #12]
 8001f56:	f7ff fd62 	bl	8001a1e <util_decode_i32>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	617b      	str	r3, [r7, #20]
		sens_data.acc_y = util_decode_i32(data+4);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	3304      	adds	r3, #4
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff fd5b 	bl	8001a1e <util_decode_i32>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	61bb      	str	r3, [r7, #24]
		sens_data.acc_z = util_decode_i32(data+8);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	3308      	adds	r3, #8
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff fd54 	bl	8001a1e <util_decode_i32>
 8001f76:	4603      	mov	r3, r0
 8001f78:	61fb      	str	r3, [r7, #28]

		sens_data.gyro_x = util_decode_i32(data+12);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	330c      	adds	r3, #12
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7ff fd4d 	bl	8001a1e <util_decode_i32>
 8001f84:	4603      	mov	r3, r0
 8001f86:	623b      	str	r3, [r7, #32]
		sens_data.gyro_y = util_decode_i32(data+16);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	3310      	adds	r3, #16
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff fd46 	bl	8001a1e <util_decode_i32>
 8001f92:	4603      	mov	r3, r0
 8001f94:	627b      	str	r3, [r7, #36]	; 0x24
		sens_data.gyro_z = util_decode_i32(data+20);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	3314      	adds	r3, #20
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff fd3f 	bl	8001a1e <util_decode_i32>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	62bb      	str	r3, [r7, #40]	; 0x28

		sens_data.baro = util_decode_i32(data+24);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	3318      	adds	r3, #24
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff fd38 	bl	8001a1e <util_decode_i32>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
		sens_data.cc_pressure = util_decode_i32(data+28);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	331c      	adds	r3, #28
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff fd31 	bl	8001a1e <util_decode_i32>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	637b      	str	r3, [r7, #52]	; 0x34

		control_set_sens(sens_data);
 8001fc0:	466d      	mov	r5, sp
 8001fc2:	f107 0420 	add.w	r4, r7, #32
 8001fc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fce:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fd2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fd6:	f107 0310 	add.w	r3, r7, #16
 8001fda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fdc:	f7ff fb9c 	bl	8001718 <control_set_sens>


		*resp_len = 2;
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	2202      	movs	r2, #2
 8001fe4:	801a      	strh	r2, [r3, #0]
	} else {
		resp[0] = ERROR_LO;
		resp[1] = ERROR_HI;
		*resp_len = 2;
	}
}
 8001fe6:	e009      	b.n	8001ffc <debug_sensor_write+0xcc>
		resp[0] = ERROR_LO;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	22ce      	movs	r2, #206	; 0xce
 8001fec:	701a      	strb	r2, [r3, #0]
		resp[1] = ERROR_HI;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	22ec      	movs	r2, #236	; 0xec
 8001ff4:	701a      	strb	r2, [r3, #0]
		*resp_len = 2;
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	2202      	movs	r2, #2
 8001ffa:	801a      	strh	r2, [r3, #0]
}
 8001ffc:	bf00      	nop
 8001ffe:	3748      	adds	r7, #72	; 0x48
 8002000:	46bd      	mov	sp, r7
 8002002:	bdb0      	pop	{r4, r5, r7, pc}

08002004 <debug_command_read>:

static void debug_command_read(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 8002004:	b580      	push	{r7, lr}
 8002006:	b092      	sub	sp, #72	; 0x48
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	607a      	str	r2, [r7, #4]
 800200e:	603b      	str	r3, [r7, #0]
 8002010:	460b      	mov	r3, r1
 8002012:	817b      	strh	r3, [r7, #10]

	CM4_PAYLOAD_COMMAND_t cmd_data = control_get_cmd();
 8002014:	f107 0314 	add.w	r3, r7, #20
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff fbd1 	bl	80017c0 <control_get_cmd>

	util_encode_i32(resp, cmd_data.thrust);
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	4619      	mov	r1, r3
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f7ff fcbe 	bl	80019a4 <util_encode_i32>
	util_encode_i32(resp+4, cmd_data.dynamixel[0]);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3304      	adds	r3, #4
 800202c:	69fa      	ldr	r2, [r7, #28]
 800202e:	4611      	mov	r1, r2
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff fcb7 	bl	80019a4 <util_encode_i32>
	util_encode_i32(resp+8, cmd_data.dynamixel[1]);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	3308      	adds	r3, #8
 800203a:	6a3a      	ldr	r2, [r7, #32]
 800203c:	4611      	mov	r1, r2
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff fcb0 	bl	80019a4 <util_encode_i32>
	util_encode_i32(resp+12, cmd_data.dynamixel[2]);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	330c      	adds	r3, #12
 8002048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800204a:	4611      	mov	r1, r2
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff fca9 	bl	80019a4 <util_encode_i32>
	util_encode_i32(resp+16, cmd_data.dynamixel[3]);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	3310      	adds	r3, #16
 8002056:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002058:	4611      	mov	r1, r2
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff fca2 	bl	80019a4 <util_encode_i32>

	util_encode_i32(resp+20, cmd_data.position[0]);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3314      	adds	r3, #20
 8002064:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002066:	4611      	mov	r1, r2
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff fc9b 	bl	80019a4 <util_encode_i32>
	util_encode_i32(resp+24, cmd_data.position[1]);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	3318      	adds	r3, #24
 8002072:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002074:	4611      	mov	r1, r2
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff fc94 	bl	80019a4 <util_encode_i32>
	util_encode_i32(resp+28, cmd_data.position[2]);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	331c      	adds	r3, #28
 8002080:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002082:	4611      	mov	r1, r2
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff fc8d 	bl	80019a4 <util_encode_i32>

	util_encode_i32(resp+32, cmd_data.speed[0]);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	3320      	adds	r3, #32
 800208e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002090:	4611      	mov	r1, r2
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff fc86 	bl	80019a4 <util_encode_i32>
	util_encode_i32(resp+36, cmd_data.speed[1]);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3324      	adds	r3, #36	; 0x24
 800209c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800209e:	4611      	mov	r1, r2
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff fc7f 	bl	80019a4 <util_encode_i32>
	util_encode_i32(resp+40, cmd_data.speed[2]);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	3328      	adds	r3, #40	; 0x28
 80020aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80020ac:	4611      	mov	r1, r2
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff fc78 	bl	80019a4 <util_encode_i32>

	util_encode_i32(resp+44, cmd_data.state);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	332c      	adds	r3, #44	; 0x2c
 80020b8:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80020bc:	4611      	mov	r1, r2
 80020be:	4618      	mov	r0, r3
 80020c0:	f7ff fc70 	bl	80019a4 <util_encode_i32>

	*resp_len = TRANSACTION_CMD_LEN;
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	222e      	movs	r2, #46	; 0x2e
 80020c8:	801a      	strh	r2, [r3, #0]

}
 80020ca:	bf00      	nop
 80020cc:	3748      	adds	r7, #72	; 0x48
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <debug_sensor_read>:

static void debug_sensor_read(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b092      	sub	sp, #72	; 0x48
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	60f8      	str	r0, [r7, #12]
 80020da:	607a      	str	r2, [r7, #4]
 80020dc:	603b      	str	r3, [r7, #0]
 80020de:	460b      	mov	r3, r1
 80020e0:	817b      	strh	r3, [r7, #10]

	CM4_PAYLOAD_SENSOR_t sens_data = control_get_sens();
 80020e2:	f107 0310 	add.w	r3, r7, #16
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7ff fb34 	bl	8001754 <control_get_sens>

	util_encode_i32(resp, sens_data.acc_x);
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	4619      	mov	r1, r3
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f7ff fc57 	bl	80019a4 <util_encode_i32>
	util_encode_i32(resp+4, sens_data.acc_y);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	3304      	adds	r3, #4
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4611      	mov	r1, r2
 80020fe:	4618      	mov	r0, r3
 8002100:	f7ff fc50 	bl	80019a4 <util_encode_i32>
	util_encode_i32(resp+8, sens_data.acc_z);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	3308      	adds	r3, #8
 8002108:	69fa      	ldr	r2, [r7, #28]
 800210a:	4611      	mov	r1, r2
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff fc49 	bl	80019a4 <util_encode_i32>

	util_encode_i32(resp+12, sens_data.gyro_x);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	330c      	adds	r3, #12
 8002116:	6a3a      	ldr	r2, [r7, #32]
 8002118:	4611      	mov	r1, r2
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff fc42 	bl	80019a4 <util_encode_i32>
	util_encode_i32(resp+16, sens_data.gyro_y);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	3310      	adds	r3, #16
 8002124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002126:	4611      	mov	r1, r2
 8002128:	4618      	mov	r0, r3
 800212a:	f7ff fc3b 	bl	80019a4 <util_encode_i32>
	util_encode_i32(resp+20, sens_data.gyro_z);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	3314      	adds	r3, #20
 8002132:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002134:	4611      	mov	r1, r2
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff fc34 	bl	80019a4 <util_encode_i32>

	util_encode_i32(resp+24, sens_data.baro);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3318      	adds	r3, #24
 8002140:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002142:	4611      	mov	r1, r2
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff fc2d 	bl	80019a4 <util_encode_i32>
	util_encode_i32(resp+28, sens_data.cc_pressure);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	331c      	adds	r3, #28
 800214e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002150:	4611      	mov	r1, r2
 8002152:	4618      	mov	r0, r3
 8002154:	f7ff fc26 	bl	80019a4 <util_encode_i32>

	*resp_len = TRANSACTION_SENS_LEN;
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	2220      	movs	r2, #32
 800215c:	801a      	strh	r2, [r3, #0]

}
 800215e:	bf00      	nop
 8002160:	3748      	adds	r7, #72	; 0x48
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
	...

08002168 <led_init>:

/**********************
 *	DECLARATIONS
 **********************/

void led_init(void) {
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
	LED_TIM.Instance->ARR = LED_MAX;
 800216c:	4b0f      	ldr	r3, [pc, #60]	; (80021ac <led_init+0x44>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002174:	62da      	str	r2, [r3, #44]	; 0x2c
	LED_TIM.Instance->CCR1 = 0;
 8002176:	4b0d      	ldr	r3, [pc, #52]	; (80021ac <led_init+0x44>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2200      	movs	r2, #0
 800217c:	635a      	str	r2, [r3, #52]	; 0x34
	LED_TIM.Instance->CCR2 = 0;
 800217e:	4b0b      	ldr	r3, [pc, #44]	; (80021ac <led_init+0x44>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2200      	movs	r2, #0
 8002184:	639a      	str	r2, [r3, #56]	; 0x38
	LED_TIM.Instance->CCR3 = 0;
 8002186:	4b09      	ldr	r3, [pc, #36]	; (80021ac <led_init+0x44>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2200      	movs	r2, #0
 800218c:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIMEx_PWMN_Start(&LED_TIM, TIM_CHANNEL_1);
 800218e:	2100      	movs	r1, #0
 8002190:	4806      	ldr	r0, [pc, #24]	; (80021ac <led_init+0x44>)
 8002192:	f006 f815 	bl	80081c0 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&LED_TIM, TIM_CHANNEL_2);
 8002196:	2104      	movs	r1, #4
 8002198:	4804      	ldr	r0, [pc, #16]	; (80021ac <led_init+0x44>)
 800219a:	f006 f811 	bl	80081c0 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&LED_TIM, TIM_CHANNEL_3);
 800219e:	2108      	movs	r1, #8
 80021a0:	4802      	ldr	r0, [pc, #8]	; (80021ac <led_init+0x44>)
 80021a2:	f006 f80d 	bl	80081c0 <HAL_TIMEx_PWMN_Start>
}
 80021a6:	bf00      	nop
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	20007c18 	.word	0x20007c18

080021b0 <led_set_color>:

void led_set_color(uint8_t r, uint8_t g, uint8_t b) {
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	4603      	mov	r3, r0
 80021b8:	71fb      	strb	r3, [r7, #7]
 80021ba:	460b      	mov	r3, r1
 80021bc:	71bb      	strb	r3, [r7, #6]
 80021be:	4613      	mov	r3, r2
 80021c0:	717b      	strb	r3, [r7, #5]
	LED_TIM.Instance->CCR1 = r;
 80021c2:	4b09      	ldr	r3, [pc, #36]	; (80021e8 <led_set_color+0x38>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	79fa      	ldrb	r2, [r7, #7]
 80021c8:	635a      	str	r2, [r3, #52]	; 0x34
	LED_TIM.Instance->CCR2 = g;
 80021ca:	4b07      	ldr	r3, [pc, #28]	; (80021e8 <led_set_color+0x38>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	79ba      	ldrb	r2, [r7, #6]
 80021d0:	639a      	str	r2, [r3, #56]	; 0x38
	LED_TIM.Instance->CCR3 = b;
 80021d2:	4b05      	ldr	r3, [pc, #20]	; (80021e8 <led_set_color+0x38>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	797a      	ldrb	r2, [r7, #5]
 80021d8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80021da:	bf00      	nop
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	20007c18 	.word	0x20007c18

080021ec <calc_field_CRC>:

/**********************
 *	DECLARATIONS
 **********************/

uint16_t calc_field_CRC(uint16_t *p_data_array, uint16_t length) {
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	460b      	mov	r3, r1
 80021f6:	807b      	strh	r3, [r7, #2]
	uint16_t shifter, c;
	uint16_t carry;
	uint16_t crc = 0;
 80021f8:	2300      	movs	r3, #0
 80021fa:	81bb      	strh	r3, [r7, #12]
	while (length--) {
 80021fc:	e028      	b.n	8002250 <calc_field_CRC+0x64>
		shifter = 0x8000;
 80021fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002202:	81fb      	strh	r3, [r7, #14]
		c = *p_data_array++;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	1c9a      	adds	r2, r3, #2
 8002208:	607a      	str	r2, [r7, #4]
 800220a:	881b      	ldrh	r3, [r3, #0]
 800220c:	817b      	strh	r3, [r7, #10]
		do {
			carry = crc & 0x8000;
 800220e:	89bb      	ldrh	r3, [r7, #12]
 8002210:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002214:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002218:	813b      	strh	r3, [r7, #8]
			crc <<= 1;
 800221a:	89bb      	ldrh	r3, [r7, #12]
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	81bb      	strh	r3, [r7, #12]
			if (c & shifter) crc++;
 8002220:	897a      	ldrh	r2, [r7, #10]
 8002222:	89fb      	ldrh	r3, [r7, #14]
 8002224:	4013      	ands	r3, r2
 8002226:	b29b      	uxth	r3, r3
 8002228:	2b00      	cmp	r3, #0
 800222a:	d002      	beq.n	8002232 <calc_field_CRC+0x46>
 800222c:	89bb      	ldrh	r3, [r7, #12]
 800222e:	3301      	adds	r3, #1
 8002230:	81bb      	strh	r3, [r7, #12]
			if (carry) crc ^= 0x1021;
 8002232:	893b      	ldrh	r3, [r7, #8]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d005      	beq.n	8002244 <calc_field_CRC+0x58>
 8002238:	89bb      	ldrh	r3, [r7, #12]
 800223a:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 800223e:	f083 0301 	eor.w	r3, r3, #1
 8002242:	81bb      	strh	r3, [r7, #12]
			shifter >>= 1;
 8002244:	89fb      	ldrh	r3, [r7, #14]
 8002246:	085b      	lsrs	r3, r3, #1
 8002248:	81fb      	strh	r3, [r7, #14]

		} while (shifter);
 800224a:	89fb      	ldrh	r3, [r7, #14]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d1de      	bne.n	800220e <calc_field_CRC+0x22>
	while (length--) {
 8002250:	887b      	ldrh	r3, [r7, #2]
 8002252:	1e5a      	subs	r2, r3, #1
 8002254:	807a      	strh	r2, [r7, #2]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1d1      	bne.n	80021fe <calc_field_CRC+0x12>

	}
	return crc;
 800225a:	89bb      	ldrh	r3, [r7, #12]
}
 800225c:	4618      	mov	r0, r3
 800225e:	3714      	adds	r7, #20
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <msv2_init>:

void msv2_init(MSV2_INST_t * msv2) {
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
	static uint32_t id_counter = 0;
	msv2->id = id_counter++;
 8002270:	4b06      	ldr	r3, [pc, #24]	; (800228c <msv2_init+0x24>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	1c5a      	adds	r2, r3, #1
 8002276:	4905      	ldr	r1, [pc, #20]	; (800228c <msv2_init+0x24>)
 8002278:	600a      	str	r2, [r1, #0]
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	6013      	str	r3, [r2, #0]
}
 800227e:	bf00      	nop
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	20001a3c 	.word	0x20001a3c

08002290 <msv2_create_frame>:

uint16_t msv2_create_frame(MSV2_INST_t * msv2, uint8_t opcode, uint8_t data_len, uint8_t * data) {
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	607b      	str	r3, [r7, #4]
 800229a:	460b      	mov	r3, r1
 800229c:	72fb      	strb	r3, [r7, #11]
 800229e:	4613      	mov	r3, r2
 80022a0:	72bb      	strb	r3, [r7, #10]
	uint16_t array_len = data_len+2; //we add 1 for the opcode and len fields and 1 for the crc
 80022a2:	7abb      	ldrb	r3, [r7, #10]
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	3302      	adds	r3, #2
 80022a8:	827b      	strh	r3, [r7, #18]
	msv2->tx.data_len = data_len;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	7aba      	ldrb	r2, [r7, #10]
 80022ae:	f883 280f 	strb.w	r2, [r3, #2063]	; 0x80f
	msv2->tx.opcode = opcode;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	7afa      	ldrb	r2, [r7, #11]
 80022b6:	f883 280e 	strb.w	r2, [r3, #2062]	; 0x80e
	msv2->tx.data[0] = DLE;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2290      	movs	r2, #144	; 0x90
 80022be:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
	msv2->tx.data[1] = STX;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2202      	movs	r2, #2
 80022c6:	f883 2813 	strb.w	r2, [r3, #2067]	; 0x813
	msv2->tx.data[2] = opcode;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	7afa      	ldrb	r2, [r7, #11]
 80022ce:	f883 2814 	strb.w	r2, [r3, #2068]	; 0x814
	msv2->tx.data[3] = data_len;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	7aba      	ldrb	r2, [r7, #10]
 80022d6:	f883 2815 	strb.w	r2, [r3, #2069]	; 0x815
	msv2->tx.crc_data[0] = (data_len<<8) | opcode;  //header bytes inverted
 80022da:	7abb      	ldrb	r3, [r7, #10]
 80022dc:	021b      	lsls	r3, r3, #8
 80022de:	b21a      	sxth	r2, r3
 80022e0:	7afb      	ldrb	r3, [r7, #11]
 80022e2:	b21b      	sxth	r3, r3
 80022e4:	4313      	orrs	r3, r2
 80022e6:	b21b      	sxth	r3, r3
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f8a3 2c12 	strh.w	r2, [r3, #3090]	; 0xc12
	uint16_t counter=4;
 80022f0:	2304      	movs	r3, #4
 80022f2:	82fb      	strh	r3, [r7, #22]
	for(uint16_t i = 0; i < data_len; i++) {
 80022f4:	2300      	movs	r3, #0
 80022f6:	82bb      	strh	r3, [r7, #20]
 80022f8:	e05b      	b.n	80023b2 <msv2_create_frame+0x122>
		msv2->tx.data[counter++] = data[2*i]; //bytes in data need to be inverted before
 80022fa:	8abb      	ldrh	r3, [r7, #20]
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	461a      	mov	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	441a      	add	r2, r3
 8002304:	8afb      	ldrh	r3, [r7, #22]
 8002306:	1c59      	adds	r1, r3, #1
 8002308:	82f9      	strh	r1, [r7, #22]
 800230a:	4619      	mov	r1, r3
 800230c:	7812      	ldrb	r2, [r2, #0]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	440b      	add	r3, r1
 8002312:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
		if(msv2->tx.data[counter-1] == DLE) {
 8002316:	8afb      	ldrh	r3, [r7, #22]
 8002318:	3b01      	subs	r3, #1
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	4413      	add	r3, r2
 800231e:	f893 3812 	ldrb.w	r3, [r3, #2066]	; 0x812
 8002322:	2b90      	cmp	r3, #144	; 0x90
 8002324:	d108      	bne.n	8002338 <msv2_create_frame+0xa8>
			msv2->tx.data[counter++] = DLE;
 8002326:	8afb      	ldrh	r3, [r7, #22]
 8002328:	1c5a      	adds	r2, r3, #1
 800232a:	82fa      	strh	r2, [r7, #22]
 800232c:	461a      	mov	r2, r3
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	4413      	add	r3, r2
 8002332:	2290      	movs	r2, #144	; 0x90
 8002334:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
		}
		msv2->tx.data[counter++] = data[2*i+1];
 8002338:	8abb      	ldrh	r3, [r7, #20]
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	3301      	adds	r3, #1
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	441a      	add	r2, r3
 8002342:	8afb      	ldrh	r3, [r7, #22]
 8002344:	1c59      	adds	r1, r3, #1
 8002346:	82f9      	strh	r1, [r7, #22]
 8002348:	4619      	mov	r1, r3
 800234a:	7812      	ldrb	r2, [r2, #0]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	440b      	add	r3, r1
 8002350:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
		if(msv2->tx.data[counter-1] == DLE) {
 8002354:	8afb      	ldrh	r3, [r7, #22]
 8002356:	3b01      	subs	r3, #1
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	4413      	add	r3, r2
 800235c:	f893 3812 	ldrb.w	r3, [r3, #2066]	; 0x812
 8002360:	2b90      	cmp	r3, #144	; 0x90
 8002362:	d108      	bne.n	8002376 <msv2_create_frame+0xe6>
			msv2->tx.data[counter++] = DLE;
 8002364:	8afb      	ldrh	r3, [r7, #22]
 8002366:	1c5a      	adds	r2, r3, #1
 8002368:	82fa      	strh	r2, [r7, #22]
 800236a:	461a      	mov	r2, r3
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	4413      	add	r3, r2
 8002370:	2290      	movs	r2, #144	; 0x90
 8002372:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
		}
		msv2->tx.crc_data[i+1] = (data[2*i+1]<<8) |  data[2*i];
 8002376:	8abb      	ldrh	r3, [r7, #20]
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	3301      	adds	r3, #1
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	4413      	add	r3, r2
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	021b      	lsls	r3, r3, #8
 8002384:	b21a      	sxth	r2, r3
 8002386:	8abb      	ldrh	r3, [r7, #20]
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	4619      	mov	r1, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	440b      	add	r3, r1
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	b21b      	sxth	r3, r3
 8002394:	4313      	orrs	r3, r2
 8002396:	b21a      	sxth	r2, r3
 8002398:	8abb      	ldrh	r3, [r7, #20]
 800239a:	3301      	adds	r3, #1
 800239c:	b291      	uxth	r1, r2
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	f203 6304 	addw	r3, r3, #1540	; 0x604
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	4413      	add	r3, r2
 80023a8:	460a      	mov	r2, r1
 80023aa:	815a      	strh	r2, [r3, #10]
	for(uint16_t i = 0; i < data_len; i++) {
 80023ac:	8abb      	ldrh	r3, [r7, #20]
 80023ae:	3301      	adds	r3, #1
 80023b0:	82bb      	strh	r3, [r7, #20]
 80023b2:	7abb      	ldrb	r3, [r7, #10]
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	8aba      	ldrh	r2, [r7, #20]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d39e      	bcc.n	80022fa <msv2_create_frame+0x6a>
	}
	msv2->tx.crc_data[array_len-1] = 0x0000;
 80023bc:	8a7b      	ldrh	r3, [r7, #18]
 80023be:	3b01      	subs	r3, #1
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	f203 6304 	addw	r3, r3, #1540	; 0x604
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	4413      	add	r3, r2
 80023ca:	2200      	movs	r2, #0
 80023cc:	815a      	strh	r2, [r3, #10]
	uint16_t crc = calc_field_CRC(msv2->tx.crc_data, array_len);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f603 4312 	addw	r3, r3, #3090	; 0xc12
 80023d4:	8a7a      	ldrh	r2, [r7, #18]
 80023d6:	4611      	mov	r1, r2
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff ff07 	bl	80021ec <calc_field_CRC>
 80023de:	4603      	mov	r3, r0
 80023e0:	823b      	strh	r3, [r7, #16]
	msv2->tx.data[counter++] = crc&0xff; //crc bytes are inverted (LSB first) !!
 80023e2:	8afb      	ldrh	r3, [r7, #22]
 80023e4:	1c5a      	adds	r2, r3, #1
 80023e6:	82fa      	strh	r2, [r7, #22]
 80023e8:	4619      	mov	r1, r3
 80023ea:	8a3b      	ldrh	r3, [r7, #16]
 80023ec:	b2da      	uxtb	r2, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	440b      	add	r3, r1
 80023f2:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
	if(msv2->tx.data[counter-1] == DLE) {
 80023f6:	8afb      	ldrh	r3, [r7, #22]
 80023f8:	3b01      	subs	r3, #1
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	4413      	add	r3, r2
 80023fe:	f893 3812 	ldrb.w	r3, [r3, #2066]	; 0x812
 8002402:	2b90      	cmp	r3, #144	; 0x90
 8002404:	d108      	bne.n	8002418 <msv2_create_frame+0x188>
		msv2->tx.data[counter++] = DLE;
 8002406:	8afb      	ldrh	r3, [r7, #22]
 8002408:	1c5a      	adds	r2, r3, #1
 800240a:	82fa      	strh	r2, [r7, #22]
 800240c:	461a      	mov	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	4413      	add	r3, r2
 8002412:	2290      	movs	r2, #144	; 0x90
 8002414:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
	}
	msv2->tx.data[counter++] = crc>>8;
 8002418:	8a3b      	ldrh	r3, [r7, #16]
 800241a:	0a1b      	lsrs	r3, r3, #8
 800241c:	b29a      	uxth	r2, r3
 800241e:	8afb      	ldrh	r3, [r7, #22]
 8002420:	1c59      	adds	r1, r3, #1
 8002422:	82f9      	strh	r1, [r7, #22]
 8002424:	4619      	mov	r1, r3
 8002426:	b2d2      	uxtb	r2, r2
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	440b      	add	r3, r1
 800242c:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
	if(msv2->tx.data[counter-1] == DLE) {
 8002430:	8afb      	ldrh	r3, [r7, #22]
 8002432:	3b01      	subs	r3, #1
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	4413      	add	r3, r2
 8002438:	f893 3812 	ldrb.w	r3, [r3, #2066]	; 0x812
 800243c:	2b90      	cmp	r3, #144	; 0x90
 800243e:	d108      	bne.n	8002452 <msv2_create_frame+0x1c2>
		msv2->tx.data[counter++] = DLE;
 8002440:	8afb      	ldrh	r3, [r7, #22]
 8002442:	1c5a      	adds	r2, r3, #1
 8002444:	82fa      	strh	r2, [r7, #22]
 8002446:	461a      	mov	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	4413      	add	r3, r2
 800244c:	2290      	movs	r2, #144	; 0x90
 800244e:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
	}
	return counter;
 8002452:	8afb      	ldrh	r3, [r7, #22]
}
 8002454:	4618      	mov	r0, r3
 8002456:	3718      	adds	r7, #24
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <msv2_decode_fragment>:

/*
 * 	d: received byte
 *
 */
MSV2_ERROR_t msv2_decode_fragment(MSV2_INST_t * msv2, uint8_t d) {
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	460b      	mov	r3, r1
 8002466:	70fb      	strb	r3, [r7, #3]
    //if a DLE in data is followed by STX, we start again
    if (msv2->rx.escape == 1 && d == STX) {
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	7a5b      	ldrb	r3, [r3, #9]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d10a      	bne.n	8002486 <msv2_decode_fragment+0x2a>
 8002470:	78fb      	ldrb	r3, [r7, #3]
 8002472:	2b02      	cmp	r3, #2
 8002474:	d107      	bne.n	8002486 <msv2_decode_fragment+0x2a>
    	msv2->rx.state = WAITING_OPCODE;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2202      	movs	r2, #2
 800247a:	721a      	strb	r2, [r3, #8]
    	msv2->rx.escape = 0;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	725a      	strb	r2, [r3, #9]
        return MSV2_PROGRESS;
 8002482:	2301      	movs	r3, #1
 8002484:	e0da      	b.n	800263c <msv2_decode_fragment+0x1e0>
    }

    if (msv2->rx.state == WAITING_DLE && d == DLE) {
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	7a1b      	ldrb	r3, [r3, #8]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d107      	bne.n	800249e <msv2_decode_fragment+0x42>
 800248e:	78fb      	ldrb	r3, [r7, #3]
 8002490:	2b90      	cmp	r3, #144	; 0x90
 8002492:	d104      	bne.n	800249e <msv2_decode_fragment+0x42>
    	msv2->rx.state = WAITING_STX;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	721a      	strb	r2, [r3, #8]
        return MSV2_PROGRESS;
 800249a:	2301      	movs	r3, #1
 800249c:	e0ce      	b.n	800263c <msv2_decode_fragment+0x1e0>
    }
    //escape in case a DLE is in the data
    if (d == DLE && msv2->rx.escape == 0) {
 800249e:	78fb      	ldrb	r3, [r7, #3]
 80024a0:	2b90      	cmp	r3, #144	; 0x90
 80024a2:	d108      	bne.n	80024b6 <msv2_decode_fragment+0x5a>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	7a5b      	ldrb	r3, [r3, #9]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d104      	bne.n	80024b6 <msv2_decode_fragment+0x5a>
    	msv2->rx.escape = 1;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	725a      	strb	r2, [r3, #9]
        return MSV2_PROGRESS;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e0c2      	b.n	800263c <msv2_decode_fragment+0x1e0>
    }
    //if it is doubled, it counts as data
    if (d == DLE && msv2->rx.escape == 1) {
 80024b6:	78fb      	ldrb	r3, [r7, #3]
 80024b8:	2b90      	cmp	r3, #144	; 0x90
 80024ba:	d106      	bne.n	80024ca <msv2_decode_fragment+0x6e>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	7a5b      	ldrb	r3, [r3, #9]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d102      	bne.n	80024ca <msv2_decode_fragment+0x6e>
    	msv2->rx.escape = 0;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	725a      	strb	r2, [r3, #9]

    }

    if (msv2->rx.state == WAITING_STX && d == STX) {
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	7a1b      	ldrb	r3, [r3, #8]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d107      	bne.n	80024e2 <msv2_decode_fragment+0x86>
 80024d2:	78fb      	ldrb	r3, [r7, #3]
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d104      	bne.n	80024e2 <msv2_decode_fragment+0x86>
    	msv2->rx.state = WAITING_OPCODE;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2202      	movs	r2, #2
 80024dc:	721a      	strb	r2, [r3, #8]
        return MSV2_PROGRESS;
 80024de:	2301      	movs	r3, #1
 80024e0:	e0ac      	b.n	800263c <msv2_decode_fragment+0x1e0>
    }

    if (msv2->rx.state == WAITING_OPCODE) {
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	7a1b      	ldrb	r3, [r3, #8]
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d107      	bne.n	80024fa <msv2_decode_fragment+0x9e>
    	msv2->rx.opcode = d;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	78fa      	ldrb	r2, [r7, #3]
 80024ee:	711a      	strb	r2, [r3, #4]
    	msv2->rx.state = WAITING_LEN;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2203      	movs	r2, #3
 80024f4:	721a      	strb	r2, [r3, #8]
        return MSV2_PROGRESS;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e0a0      	b.n	800263c <msv2_decode_fragment+0x1e0>
    }

    if (msv2->rx.state == WAITING_LEN) {
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	7a1b      	ldrb	r3, [r3, #8]
 80024fe:	2b03      	cmp	r3, #3
 8002500:	d11d      	bne.n	800253e <msv2_decode_fragment+0xe2>
    	msv2->rx.data_len = d; //legth in words
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	78fa      	ldrb	r2, [r7, #3]
 8002506:	715a      	strb	r2, [r3, #5]
    	msv2->rx.length = 2*d; //length in bytes
 8002508:	78fb      	ldrb	r3, [r7, #3]
 800250a:	b29b      	uxth	r3, r3
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	b29a      	uxth	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	815a      	strh	r2, [r3, #10]
    	msv2->rx.crc_data[0] = (msv2->rx.data_len<<8) | msv2->rx.opcode;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	795b      	ldrb	r3, [r3, #5]
 8002518:	021b      	lsls	r3, r3, #8
 800251a:	b21a      	sxth	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	791b      	ldrb	r3, [r3, #4]
 8002520:	b21b      	sxth	r3, r3
 8002522:	4313      	orrs	r3, r2
 8002524:	b21b      	sxth	r3, r3
 8002526:	b29a      	uxth	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
    	msv2->rx.counter = 0;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	819a      	strh	r2, [r3, #12]
    	msv2->rx.state = WAITING_DATA;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2204      	movs	r2, #4
 8002538:	721a      	strb	r2, [r3, #8]
        return MSV2_PROGRESS;
 800253a:	2301      	movs	r3, #1
 800253c:	e07e      	b.n	800263c <msv2_decode_fragment+0x1e0>
    }

    if (msv2->rx.state == WAITING_DATA) {
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	7a1b      	ldrb	r3, [r3, #8]
 8002542:	2b04      	cmp	r3, #4
 8002544:	d136      	bne.n	80025b4 <msv2_decode_fragment+0x158>
    	msv2->rx.data[msv2->rx.counter] = d;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	899b      	ldrh	r3, [r3, #12]
 800254a:	461a      	mov	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4413      	add	r3, r2
 8002550:	78fa      	ldrb	r2, [r7, #3]
 8002552:	739a      	strb	r2, [r3, #14]
    	if(msv2->rx.counter & 0x01) { //LSB == '1'
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	899b      	ldrh	r3, [r3, #12]
 8002558:	f003 0301 	and.w	r3, r3, #1
 800255c:	2b00      	cmp	r3, #0
 800255e:	d018      	beq.n	8002592 <msv2_decode_fragment+0x136>
    		msv2->rx.crc_data[msv2->rx.counter/2 + 1] = (msv2->rx.data[msv2->rx.counter - 1]) |  d<<8;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	899b      	ldrh	r3, [r3, #12]
 8002564:	3b01      	subs	r3, #1
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	4413      	add	r3, r2
 800256a:	7b9b      	ldrb	r3, [r3, #14]
 800256c:	b21a      	sxth	r2, r3
 800256e:	78fb      	ldrb	r3, [r7, #3]
 8002570:	021b      	lsls	r3, r3, #8
 8002572:	b21b      	sxth	r3, r3
 8002574:	4313      	orrs	r3, r2
 8002576:	b21a      	sxth	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	899b      	ldrh	r3, [r3, #12]
 800257c:	085b      	lsrs	r3, r3, #1
 800257e:	b29b      	uxth	r3, r3
 8002580:	3301      	adds	r3, #1
 8002582:	b291      	uxth	r1, r2
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	4413      	add	r3, r2
 800258e:	460a      	mov	r2, r1
 8002590:	80da      	strh	r2, [r3, #6]
    	}
    	msv2->rx.counter += 1;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	899b      	ldrh	r3, [r3, #12]
 8002596:	3301      	adds	r3, #1
 8002598:	b29a      	uxth	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	819a      	strh	r2, [r3, #12]
        //the length  is in WORDS, but we read BYTES
        if (msv2->rx.counter==msv2->rx.length) {
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	899a      	ldrh	r2, [r3, #12]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	895b      	ldrh	r3, [r3, #10]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d102      	bne.n	80025b0 <msv2_decode_fragment+0x154>
        	msv2->rx.state = WAITING_CRC1;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2205      	movs	r2, #5
 80025ae:	721a      	strb	r2, [r3, #8]
        }
        return MSV2_PROGRESS;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e043      	b.n	800263c <msv2_decode_fragment+0x1e0>
    }

    if (msv2->rx.state == WAITING_CRC1) {
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	7a1b      	ldrb	r3, [r3, #8]
 80025b8:	2b05      	cmp	r3, #5
 80025ba:	d108      	bne.n	80025ce <msv2_decode_fragment+0x172>
    	msv2->rx.crc = d;
 80025bc:	78fb      	ldrb	r3, [r7, #3]
 80025be:	b29a      	uxth	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	80da      	strh	r2, [r3, #6]
    	msv2->rx.state = WAITING_CRC2;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2206      	movs	r2, #6
 80025c8:	721a      	strb	r2, [r3, #8]
        return MSV2_PROGRESS;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e036      	b.n	800263c <msv2_decode_fragment+0x1e0>

    }

    if (msv2->rx.state == WAITING_CRC2) {
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	7a1b      	ldrb	r3, [r3, #8]
 80025d2:	2b06      	cmp	r3, #6
 80025d4:	d12e      	bne.n	8002634 <msv2_decode_fragment+0x1d8>
    	msv2->rx.crc |= d<<8;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	88db      	ldrh	r3, [r3, #6]
 80025da:	b21a      	sxth	r2, r3
 80025dc:	78fb      	ldrb	r3, [r7, #3]
 80025de:	021b      	lsls	r3, r3, #8
 80025e0:	b21b      	sxth	r3, r3
 80025e2:	4313      	orrs	r3, r2
 80025e4:	b21b      	sxth	r3, r3
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	80da      	strh	r2, [r3, #6]
    	msv2->rx.state = WAITING_DLE;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	721a      	strb	r2, [r3, #8]
    	msv2->rx.crc_data[msv2->rx.data_len+1] = 0;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	795b      	ldrb	r3, [r3, #5]
 80025f6:	3301      	adds	r3, #1
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	4413      	add	r3, r2
 8002602:	2200      	movs	r2, #0
 8002604:	80da      	strh	r2, [r3, #6]
    	uint16_t crc = calc_field_CRC(msv2->rx.crc_data, msv2->rx.data_len+2);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f203 420e 	addw	r2, r3, #1038	; 0x40e
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	795b      	ldrb	r3, [r3, #5]
 8002610:	b29b      	uxth	r3, r3
 8002612:	3302      	adds	r3, #2
 8002614:	b29b      	uxth	r3, r3
 8002616:	4619      	mov	r1, r3
 8002618:	4610      	mov	r0, r2
 800261a:	f7ff fde7 	bl	80021ec <calc_field_CRC>
 800261e:	4603      	mov	r3, r0
 8002620:	81fb      	strh	r3, [r7, #14]
    	if(msv2->rx.crc == crc) {
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	88db      	ldrh	r3, [r3, #6]
 8002626:	89fa      	ldrh	r2, [r7, #14]
 8002628:	429a      	cmp	r2, r3
 800262a:	d101      	bne.n	8002630 <msv2_decode_fragment+0x1d4>
    		return MSV2_SUCCESS;
 800262c:	2300      	movs	r3, #0
 800262e:	e005      	b.n	800263c <msv2_decode_fragment+0x1e0>
    	} else {
    		return MSV2_WRONG_CRC;
 8002630:	2302      	movs	r3, #2
 8002632:	e003      	b.n	800263c <msv2_decode_fragment+0x1e0>
    	}
    }
    msv2->rx.state=WAITING_DLE;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	721a      	strb	r2, [r3, #8]
    return MSV2_PROGRESS;
 800263a:	2301      	movs	r3, #1
}
 800263c:	4618      	mov	r0, r3
 800263e:	3710      	adds	r7, #16
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <msv2_tx_data>:

uint8_t * msv2_rx_data(MSV2_INST_t * msv2) {
	return msv2->rx.data;
}

uint8_t * msv2_tx_data(MSV2_INST_t * msv2) {
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
	return msv2->tx.data;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f603 0312 	addw	r3, r3, #2066	; 0x812
}
 8002652:	4618      	mov	r0, r3
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr

0800265e <util_buffer_u8_init>:
static inline void util_buffer_u8_init(UTIL_BUFFER_U8_t * bfr, uint8_t * buffer, uint16_t bfr_len) {
 800265e:	b480      	push	{r7}
 8002660:	b085      	sub	sp, #20
 8002662:	af00      	add	r7, sp, #0
 8002664:	60f8      	str	r0, [r7, #12]
 8002666:	60b9      	str	r1, [r7, #8]
 8002668:	4613      	mov	r3, r2
 800266a:	80fb      	strh	r3, [r7, #6]
	bfr->c_ix = 0;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2200      	movs	r2, #0
 8002670:	801a      	strh	r2, [r3, #0]
	bfr->l_ix = 0;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2200      	movs	r2, #0
 8002676:	805a      	strh	r2, [r3, #2]
	bfr->bfr_len = bfr_len;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	88fa      	ldrh	r2, [r7, #6]
 800267c:	809a      	strh	r2, [r3, #4]
	bfr->buffer = buffer;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	68ba      	ldr	r2, [r7, #8]
 8002682:	609a      	str	r2, [r3, #8]
}
 8002684:	bf00      	nop
 8002686:	3714      	adds	r7, #20
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <util_buffer_u8_add>:
static inline void util_buffer_u8_add(UTIL_BUFFER_U8_t * bfr, uint8_t d) {
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	460b      	mov	r3, r1
 800269a:	70fb      	strb	r3, [r7, #3]
	bfr->buffer[bfr->c_ix++] = d;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	881b      	ldrh	r3, [r3, #0]
 80026a4:	1c59      	adds	r1, r3, #1
 80026a6:	b288      	uxth	r0, r1
 80026a8:	6879      	ldr	r1, [r7, #4]
 80026aa:	8008      	strh	r0, [r1, #0]
 80026ac:	4413      	add	r3, r2
 80026ae:	78fa      	ldrb	r2, [r7, #3]
 80026b0:	701a      	strb	r2, [r3, #0]
	if(bfr->c_ix == bfr->bfr_len) bfr->c_ix = 0;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	881a      	ldrh	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	889b      	ldrh	r3, [r3, #4]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d102      	bne.n	80026c4 <util_buffer_u8_add+0x34>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	801a      	strh	r2, [r3, #0]
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <util_buffer_u8_get>:
static inline uint8_t util_buffer_u8_get(UTIL_BUFFER_U8_t * bfr) {
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
	uint8_t tmp = bfr->buffer[bfr->l_ix++];
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	885b      	ldrh	r3, [r3, #2]
 80026e0:	1c59      	adds	r1, r3, #1
 80026e2:	b288      	uxth	r0, r1
 80026e4:	6879      	ldr	r1, [r7, #4]
 80026e6:	8048      	strh	r0, [r1, #2]
 80026e8:	4413      	add	r3, r2
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	73fb      	strb	r3, [r7, #15]
	if(bfr->l_ix == bfr->bfr_len) bfr->l_ix=0;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	885a      	ldrh	r2, [r3, #2]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	889b      	ldrh	r3, [r3, #4]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d102      	bne.n	8002700 <util_buffer_u8_get+0x30>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	805a      	strh	r2, [r3, #2]
	return tmp;
 8002700:	7bfb      	ldrb	r3, [r7, #15]
}
 8002702:	4618      	mov	r0, r3
 8002704:	3714      	adds	r7, #20
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr

0800270e <util_buffer_u8_isempty>:
static inline uint8_t util_buffer_u8_isempty(UTIL_BUFFER_U8_t * bfr) {
 800270e:	b480      	push	{r7}
 8002710:	b083      	sub	sp, #12
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
	return bfr->l_ix == bfr->c_ix;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	885a      	ldrh	r2, [r3, #2]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	881b      	ldrh	r3, [r3, #0]
 800271e:	429a      	cmp	r2, r3
 8002720:	bf0c      	ite	eq
 8002722:	2301      	moveq	r3, #1
 8002724:	2300      	movne	r3, #0
 8002726:	b2db      	uxtb	r3, r3
}
 8002728:	4618      	mov	r0, r3
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <HAL_UART_RxCpltCallback>:

/*
 * UART RX ISR
 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800273c:	2300      	movs	r3, #0
 800273e:	60bb      	str	r3, [r7, #8]
	for(uint16_t i = 0; i < serial_devices_count; i++) {
 8002740:	2300      	movs	r3, #0
 8002742:	81fb      	strh	r3, [r7, #14]
 8002744:	e025      	b.n	8002792 <HAL_UART_RxCpltCallback+0x5e>
		if(serial_devices[i]->uart == huart) {
 8002746:	89fb      	ldrh	r3, [r7, #14]
 8002748:	4a1c      	ldr	r2, [pc, #112]	; (80027bc <HAL_UART_RxCpltCallback+0x88>)
 800274a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	429a      	cmp	r2, r3
 8002754:	d11a      	bne.n	800278c <HAL_UART_RxCpltCallback+0x58>
			util_buffer_u8_add(&serial_devices[i]->bfr, serial_devices[i]->dma_buffer);
 8002756:	89fb      	ldrh	r3, [r7, #14]
 8002758:	4a18      	ldr	r2, [pc, #96]	; (80027bc <HAL_UART_RxCpltCallback+0x88>)
 800275a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800275e:	f103 0210 	add.w	r2, r3, #16
 8002762:	89fb      	ldrh	r3, [r7, #14]
 8002764:	4915      	ldr	r1, [pc, #84]	; (80027bc <HAL_UART_RxCpltCallback+0x88>)
 8002766:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800276a:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 800276e:	4619      	mov	r1, r3
 8002770:	4610      	mov	r0, r2
 8002772:	f7ff ff8d 	bl	8002690 <util_buffer_u8_add>
			xSemaphoreGiveFromISR( serial_rx_sem, &xHigherPriorityTaskWoken );
 8002776:	4b12      	ldr	r3, [pc, #72]	; (80027c0 <HAL_UART_RxCpltCallback+0x8c>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f107 0208 	add.w	r2, r7, #8
 800277e:	4611      	mov	r1, r2
 8002780:	4618      	mov	r0, r3
 8002782:	f007 fbed 	bl	8009f60 <xQueueGiveFromISR>
			if(i==2) {
 8002786:	89fb      	ldrh	r3, [r7, #14]
 8002788:	2b02      	cmp	r3, #2
				break;
			}
			break;
 800278a:	e007      	b.n	800279c <HAL_UART_RxCpltCallback+0x68>
	for(uint16_t i = 0; i < serial_devices_count; i++) {
 800278c:	89fb      	ldrh	r3, [r7, #14]
 800278e:	3301      	adds	r3, #1
 8002790:	81fb      	strh	r3, [r7, #14]
 8002792:	4b0c      	ldr	r3, [pc, #48]	; (80027c4 <HAL_UART_RxCpltCallback+0x90>)
 8002794:	881b      	ldrh	r3, [r3, #0]
 8002796:	89fa      	ldrh	r2, [r7, #14]
 8002798:	429a      	cmp	r2, r3
 800279a:	d3d4      	bcc.n	8002746 <HAL_UART_RxCpltCallback+0x12>
		}
	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d007      	beq.n	80027b2 <HAL_UART_RxCpltCallback+0x7e>
 80027a2:	4b09      	ldr	r3, [pc, #36]	; (80027c8 <HAL_UART_RxCpltCallback+0x94>)
 80027a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	f3bf 8f4f 	dsb	sy
 80027ae:	f3bf 8f6f 	isb	sy
}
 80027b2:	bf00      	nop
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	20001a40 	.word	0x20001a40
 80027c0:	20001a84 	.word	0x20001a84
 80027c4:	20001a80 	.word	0x20001a80
 80027c8:	e000ed04 	.word	0xe000ed04

080027cc <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef * lol = huart;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	60fb      	str	r3, [r7, #12]
}
 80027d8:	bf00      	nop
 80027da:	3714      	adds	r7, #20
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <serial_global_init>:



void serial_global_init(void) {
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af02      	add	r7, sp, #8
	serial_rx_sem = xSemaphoreCreateBinaryStatic( &serial_rx_sem_buffer );
 80027ea:	2303      	movs	r3, #3
 80027ec:	9300      	str	r3, [sp, #0]
 80027ee:	4b06      	ldr	r3, [pc, #24]	; (8002808 <serial_global_init+0x24>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	2100      	movs	r1, #0
 80027f4:	2001      	movs	r0, #1
 80027f6:	f007 f9ed 	bl	8009bd4 <xQueueGenericCreateStatic>
 80027fa:	4603      	mov	r3, r0
 80027fc:	4a03      	ldr	r2, [pc, #12]	; (800280c <serial_global_init+0x28>)
 80027fe:	6013      	str	r3, [r2, #0]
}
 8002800:	bf00      	nop
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	20001a88 	.word	0x20001a88
 800280c:	20001a84 	.word	0x20001a84

08002810 <serial_init>:


void serial_init(SERIAL_INST_t * ser, UART_HandleTypeDef * uart, void * inst, SERIAL_RET_t (*decode_fcn)(void *, uint8_t)) {
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
 800281c:	603b      	str	r3, [r7, #0]
	ser->id = serial_devices_count;
 800281e:	4b1a      	ldr	r3, [pc, #104]	; (8002888 <serial_init+0x78>)
 8002820:	881b      	ldrh	r3, [r3, #0]
 8002822:	461a      	mov	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	601a      	str	r2, [r3, #0]
	ser->uart = uart;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	68ba      	ldr	r2, [r7, #8]
 800282c:	605a      	str	r2, [r3, #4]
	ser->inst = inst;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	609a      	str	r2, [r3, #8]
	ser->decode_fcn = decode_fcn;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	683a      	ldr	r2, [r7, #0]
 8002838:	60da      	str	r2, [r3, #12]
	util_buffer_u8_init(&ser->bfr, ser->buffer, SERIAL_FIFO_LEN);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f103 0010 	add.w	r0, r3, #16
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	331c      	adds	r3, #28
 8002844:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002848:	4619      	mov	r1, r3
 800284a:	f7ff ff08 	bl	800265e <util_buffer_u8_init>
	if(serial_devices_count < SERIAL_MAX_INST) {
 800284e:	4b0e      	ldr	r3, [pc, #56]	; (8002888 <serial_init+0x78>)
 8002850:	881b      	ldrh	r3, [r3, #0]
 8002852:	2b0f      	cmp	r3, #15
 8002854:	d80e      	bhi.n	8002874 <serial_init+0x64>
		HAL_UART_Receive_DMA(uart, &ser->dma_buffer, 1);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 800285c:	2201      	movs	r2, #1
 800285e:	4619      	mov	r1, r3
 8002860:	68b8      	ldr	r0, [r7, #8]
 8002862:	f005 ff7d 	bl	8008760 <HAL_UART_Receive_DMA>
		serial_devices[serial_devices_count] = ser;
 8002866:	4b08      	ldr	r3, [pc, #32]	; (8002888 <serial_init+0x78>)
 8002868:	881b      	ldrh	r3, [r3, #0]
 800286a:	4619      	mov	r1, r3
 800286c:	4a07      	ldr	r2, [pc, #28]	; (800288c <serial_init+0x7c>)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	}
	serial_devices_count++;
 8002874:	4b04      	ldr	r3, [pc, #16]	; (8002888 <serial_init+0x78>)
 8002876:	881b      	ldrh	r3, [r3, #0]
 8002878:	3301      	adds	r3, #1
 800287a:	b29a      	uxth	r2, r3
 800287c:	4b02      	ldr	r3, [pc, #8]	; (8002888 <serial_init+0x78>)
 800287e:	801a      	strh	r2, [r3, #0]
}
 8002880:	bf00      	nop
 8002882:	3710      	adds	r7, #16
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	20001a80 	.word	0x20001a80
 800288c:	20001a40 	.word	0x20001a40

08002890 <serial_send>:

void serial_send(SERIAL_INST_t * ser, uint8_t * data, uint16_t length) {
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	4613      	mov	r3, r2
 800289c:	80fb      	strh	r3, [r7, #6]
	HAL_UART_Transmit_DMA(ser->uart, data, length);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	88fa      	ldrh	r2, [r7, #6]
 80028a4:	68b9      	ldr	r1, [r7, #8]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f005 feee 	bl	8008688 <HAL_UART_Transmit_DMA>
	//HAL_UART_Transmit(ser->uart, data, length, 500);
}
 80028ac:	bf00      	nop
 80028ae:	3710      	adds	r7, #16
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <serial_garbage_clean>:

void serial_garbage_clean(SERIAL_INST_t * ser) {
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(ser->uart, &ser->dma_buffer, 1);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6858      	ldr	r0, [r3, #4]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 80028c6:	2201      	movs	r2, #1
 80028c8:	4619      	mov	r1, r3
 80028ca:	f005 ff49 	bl	8008760 <HAL_UART_Receive_DMA>
}
 80028ce:	bf00      	nop
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
	...

080028d8 <serial_thread>:

void serial_thread(void * arg) {
 80028d8:	b5b0      	push	{r4, r5, r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]

	serial_global_init();
 80028e0:	f7ff ff80 	bl	80027e4 <serial_global_init>

	for(;;) {
		if( xSemaphoreTake(serial_rx_sem, 0xffff) == pdTRUE ) {
 80028e4:	4b1b      	ldr	r3, [pc, #108]	; (8002954 <serial_thread+0x7c>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80028ec:	4618      	mov	r0, r3
 80028ee:	f007 fbc5 	bl	800a07c <xQueueSemaphoreTake>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d1f5      	bne.n	80028e4 <serial_thread+0xc>
			for(uint16_t i = 0; i < serial_devices_count; i++) {
 80028f8:	2300      	movs	r3, #0
 80028fa:	81fb      	strh	r3, [r7, #14]
 80028fc:	e023      	b.n	8002946 <serial_thread+0x6e>
				while(!util_buffer_u8_isempty(&serial_devices[i]->bfr)) {
					serial_devices[i]->decode_fcn(serial_devices[i]->inst, util_buffer_u8_get(&serial_devices[i]->bfr));
 80028fe:	89fb      	ldrh	r3, [r7, #14]
 8002900:	4a15      	ldr	r2, [pc, #84]	; (8002958 <serial_thread+0x80>)
 8002902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002906:	68dc      	ldr	r4, [r3, #12]
 8002908:	89fb      	ldrh	r3, [r7, #14]
 800290a:	4a13      	ldr	r2, [pc, #76]	; (8002958 <serial_thread+0x80>)
 800290c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002910:	689d      	ldr	r5, [r3, #8]
 8002912:	89fb      	ldrh	r3, [r7, #14]
 8002914:	4a10      	ldr	r2, [pc, #64]	; (8002958 <serial_thread+0x80>)
 8002916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800291a:	3310      	adds	r3, #16
 800291c:	4618      	mov	r0, r3
 800291e:	f7ff fed7 	bl	80026d0 <util_buffer_u8_get>
 8002922:	4603      	mov	r3, r0
 8002924:	4619      	mov	r1, r3
 8002926:	4628      	mov	r0, r5
 8002928:	47a0      	blx	r4
				while(!util_buffer_u8_isempty(&serial_devices[i]->bfr)) {
 800292a:	89fb      	ldrh	r3, [r7, #14]
 800292c:	4a0a      	ldr	r2, [pc, #40]	; (8002958 <serial_thread+0x80>)
 800292e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002932:	3310      	adds	r3, #16
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff feea 	bl	800270e <util_buffer_u8_isempty>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d0de      	beq.n	80028fe <serial_thread+0x26>
			for(uint16_t i = 0; i < serial_devices_count; i++) {
 8002940:	89fb      	ldrh	r3, [r7, #14]
 8002942:	3301      	adds	r3, #1
 8002944:	81fb      	strh	r3, [r7, #14]
 8002946:	4b05      	ldr	r3, [pc, #20]	; (800295c <serial_thread+0x84>)
 8002948:	881b      	ldrh	r3, [r3, #0]
 800294a:	89fa      	ldrh	r2, [r7, #14]
 800294c:	429a      	cmp	r2, r3
 800294e:	d3ec      	bcc.n	800292a <serial_thread+0x52>
		if( xSemaphoreTake(serial_rx_sem, 0xffff) == pdTRUE ) {
 8002950:	e7c8      	b.n	80028e4 <serial_thread+0xc>
 8002952:	bf00      	nop
 8002954:	20001a84 	.word	0x20001a84
 8002958:	20001a40 	.word	0x20001a40
 800295c:	20001a80 	.word	0x20001a80

08002960 <storage_init>:

/**********************
 *	DECLARATIONS
 **********************/

void storage_init() {
 8002960:	b5b0      	push	{r4, r5, r7, lr}
 8002962:	b09c      	sub	sp, #112	; 0x70
 8002964:	af02      	add	r7, sp, #8
	static STORAGE_HEADER_t header;
	flash_init();
 8002966:	f006 fdd2 	bl	800950e <flash_init>
	flash_read(HEADER_ADDR, (uint8_t *) &header, sizeof(STORAGE_HEADER_t));
 800296a:	2210      	movs	r2, #16
 800296c:	4936      	ldr	r1, [pc, #216]	; (8002a48 <storage_init+0xe8>)
 800296e:	2000      	movs	r0, #0
 8002970:	f006 fdf2 	bl	8009558 <flash_read>
	if(header.magic == MAGIC_NUMBER) {
 8002974:	4b34      	ldr	r3, [pc, #208]	; (8002a48 <storage_init+0xe8>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a34      	ldr	r2, [pc, #208]	; (8002a4c <storage_init+0xec>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d149      	bne.n	8002a12 <storage_init+0xb2>
		used_subsectors = header.used;
 800297e:	4b32      	ldr	r3, [pc, #200]	; (8002a48 <storage_init+0xe8>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	4a33      	ldr	r2, [pc, #204]	; (8002a50 <storage_init+0xf0>)
 8002984:	6013      	str	r3, [r2, #0]
		if(used_subsectors > 1) {
 8002986:	4b32      	ldr	r3, [pc, #200]	; (8002a50 <storage_init+0xf0>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d93d      	bls.n	8002a0a <storage_init+0xaa>
			STORAGE_DATA_t data = {0};
 800298e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002992:	2220      	movs	r2, #32
 8002994:	2100      	movs	r1, #0
 8002996:	4618      	mov	r0, r3
 8002998:	f009 f828 	bl	800b9ec <memset>
			STORAGE_DATA_t last_valid_data = {0};
 800299c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80029a0:	2220      	movs	r2, #32
 80029a2:	2100      	movs	r1, #0
 80029a4:	4618      	mov	r0, r3
 80029a6:	f009 f821 	bl	800b9ec <memset>
			uint32_t count = (used_subsectors-2)*SAMPLES_PER_SS;
 80029aa:	4b29      	ldr	r3, [pc, #164]	; (8002a50 <storage_init+0xf0>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	3b02      	subs	r3, #2
 80029b0:	01db      	lsls	r3, r3, #7
 80029b2:	667b      	str	r3, [r7, #100]	; 0x64
			data = read_data(count);
 80029b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029b8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80029ba:	4618      	mov	r0, r3
 80029bc:	f000 f878 	bl	8002ab0 <read_data>
			while(data.sample_id == count){
 80029c0:	e01a      	b.n	80029f8 <storage_init+0x98>
				last_valid_data = data;
 80029c2:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80029c6:	f107 0524 	add.w	r5, r7, #36	; 0x24
 80029ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029ce:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80029d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				data = read_data(++count);
 80029d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029d8:	3301      	adds	r3, #1
 80029da:	667b      	str	r3, [r7, #100]	; 0x64
 80029dc:	463b      	mov	r3, r7
 80029de:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80029e0:	4618      	mov	r0, r3
 80029e2:	f000 f865 	bl	8002ab0 <read_data>
 80029e6:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80029ea:	463d      	mov	r5, r7
 80029ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029f0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80029f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			while(data.sample_id == count){
 80029f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80029fa:	461a      	mov	r2, r3
 80029fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d0df      	beq.n	80029c2 <storage_init+0x62>
			}

			data_counter = count;
 8002a02:	4a14      	ldr	r2, [pc, #80]	; (8002a54 <storage_init+0xf4>)
 8002a04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a06:	6013      	str	r3, [r2, #0]
 8002a08:	e009      	b.n	8002a1e <storage_init+0xbe>
		} else {
			data_counter = 0;
 8002a0a:	4b12      	ldr	r3, [pc, #72]	; (8002a54 <storage_init+0xf4>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	e005      	b.n	8002a1e <storage_init+0xbe>
		}
	} else {
		write_header_used(1);
 8002a12:	2001      	movs	r0, #1
 8002a14:	f000 f828 	bl	8002a68 <write_header_used>
		data_counter = 0;
 8002a18:	4b0e      	ldr	r3, [pc, #56]	; (8002a54 <storage_init+0xf4>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	601a      	str	r2, [r3, #0]
	}
	record_active = 0;
 8002a1e:	4b0e      	ldr	r3, [pc, #56]	; (8002a58 <storage_init+0xf8>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	701a      	strb	r2, [r3, #0]
	restart_required = 0;
 8002a24:	4b0d      	ldr	r3, [pc, #52]	; (8002a5c <storage_init+0xfc>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	701a      	strb	r2, [r3, #0]
	storage_sem = xSemaphoreCreateBinaryStatic(&storage_sem_buffer);
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	4b0c      	ldr	r3, [pc, #48]	; (8002a60 <storage_init+0x100>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	2100      	movs	r1, #0
 8002a34:	2001      	movs	r0, #1
 8002a36:	f007 f8cd 	bl	8009bd4 <xQueueGenericCreateStatic>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	4a09      	ldr	r2, [pc, #36]	; (8002a64 <storage_init+0x104>)
 8002a3e:	6013      	str	r3, [r2, #0]
}
 8002a40:	bf00      	nop
 8002a42:	3768      	adds	r7, #104	; 0x68
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bdb0      	pop	{r4, r5, r7, pc}
 8002a48:	20001b2c 	.word	0x20001b2c
 8002a4c:	cbe0c5e6 	.word	0xcbe0c5e6
 8002a50:	20001ad0 	.word	0x20001ad0
 8002a54:	20001ad4 	.word	0x20001ad4
 8002a58:	20001ad8 	.word	0x20001ad8
 8002a5c:	20001ad9 	.word	0x20001ad9
 8002a60:	20001ae4 	.word	0x20001ae4
 8002a64:	20001ae0 	.word	0x20001ae0

08002a68 <write_header_used>:

}



static void write_header_used(uint32_t used) {
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
	static STORAGE_HEADER_t header;
	flash_read(HEADER_ADDR, (uint8_t *) &header, sizeof(STORAGE_HEADER_t));
 8002a70:	2210      	movs	r2, #16
 8002a72:	490c      	ldr	r1, [pc, #48]	; (8002aa4 <write_header_used+0x3c>)
 8002a74:	2000      	movs	r0, #0
 8002a76:	f006 fd6f 	bl	8009558 <flash_read>
	flash_erase_subsector(HEADER_ADDR);
 8002a7a:	2000      	movs	r0, #0
 8002a7c:	f006 fe64 	bl	8009748 <flash_erase_subsector>
	header.magic = MAGIC_NUMBER;
 8002a80:	4b08      	ldr	r3, [pc, #32]	; (8002aa4 <write_header_used+0x3c>)
 8002a82:	4a09      	ldr	r2, [pc, #36]	; (8002aa8 <write_header_used+0x40>)
 8002a84:	601a      	str	r2, [r3, #0]
	header.used = used;
 8002a86:	4a07      	ldr	r2, [pc, #28]	; (8002aa4 <write_header_used+0x3c>)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6053      	str	r3, [r2, #4]
	flash_write(HEADER_ADDR, (uint8_t *) &header, sizeof(STORAGE_HEADER_t));
 8002a8c:	2210      	movs	r2, #16
 8002a8e:	4905      	ldr	r1, [pc, #20]	; (8002aa4 <write_header_used+0x3c>)
 8002a90:	2000      	movs	r0, #0
 8002a92:	f006 fde2 	bl	800965a <flash_write>
	used_subsectors = used;
 8002a96:	4a05      	ldr	r2, [pc, #20]	; (8002aac <write_header_used+0x44>)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6013      	str	r3, [r2, #0]
}
 8002a9c:	bf00      	nop
 8002a9e:	3708      	adds	r7, #8
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	20001b3c 	.word	0x20001b3c
 8002aa8:	cbe0c5e6 	.word	0xcbe0c5e6
 8002aac:	20001ad0 	.word	0x20001ad0

08002ab0 <read_data>:



static STORAGE_DATA_t read_data(uint32_t id) {
 8002ab0:	b5b0      	push	{r4, r5, r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
	static STORAGE_DATA_t data;
	flash_read(ADDRESS(id), (uint8_t *) &data, sizeof(STORAGE_DATA_t));
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	3380      	adds	r3, #128	; 0x80
 8002abe:	015b      	lsls	r3, r3, #5
 8002ac0:	2220      	movs	r2, #32
 8002ac2:	4909      	ldr	r1, [pc, #36]	; (8002ae8 <read_data+0x38>)
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f006 fd47 	bl	8009558 <flash_read>
	return data;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a06      	ldr	r2, [pc, #24]	; (8002ae8 <read_data+0x38>)
 8002ace:	461c      	mov	r4, r3
 8002ad0:	4615      	mov	r5, r2
 8002ad2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ad4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ad6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002ada:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bdb0      	pop	{r4, r5, r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	20001b4c 	.word	0x20001b4c

08002aec <storage_get_used>:
		flash_erase_subsector(addr);
	}
	flash_write(addr, (uint8_t *) &data, sizeof(STORAGE_DATA_t));
}

uint32_t storage_get_used() {
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
	return data_counter;
 8002af0:	4b03      	ldr	r3, [pc, #12]	; (8002b00 <storage_get_used+0x14>)
 8002af2:	681b      	ldr	r3, [r3, #0]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	20001ad4 	.word	0x20001ad4

08002b04 <storage_get_sample>:

void storage_get_sample(uint32_t id, void * dest) {
 8002b04:	b5b0      	push	{r4, r5, r7, lr}
 8002b06:	b08a      	sub	sp, #40	; 0x28
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6278      	str	r0, [r7, #36]	; 0x24
 8002b0c:	6239      	str	r1, [r7, #32]
	*((STORAGE_DATA_t *)dest) = read_data(id);
 8002b0e:	6a3c      	ldr	r4, [r7, #32]
 8002b10:	463b      	mov	r3, r7
 8002b12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff ffcb 	bl	8002ab0 <read_data>
 8002b1a:	4625      	mov	r5, r4
 8002b1c:	463c      	mov	r4, r7
 8002b1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b22:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002b26:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8002b2a:	bf00      	nop
 8002b2c:	3728      	adds	r7, #40	; 0x28
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002b34 <storage_disable>:

void storage_enable() {
	record_active = 1;
}

void storage_disable() {
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
	record_should_stop = STORAGE_AFTER_SAVE;
 8002b38:	4b04      	ldr	r3, [pc, #16]	; (8002b4c <storage_disable+0x18>)
 8002b3a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002b3e:	601a      	str	r2, [r3, #0]
}
 8002b40:	bf00      	nop
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	20001adc 	.word	0x20001adc

08002b50 <storage_thread>:
		xSemaphoreGive(storage_sem);
	}
}


void storage_thread(void * arg) {
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]



	storage_init();
 8002b58:	f7ff ff02 	bl	8002960 <storage_init>




	for(;;) {
		last_time = time;
 8002b5c:	4b1b      	ldr	r3, [pc, #108]	; (8002bcc <storage_thread+0x7c>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a1b      	ldr	r2, [pc, #108]	; (8002bd0 <storage_thread+0x80>)
 8002b62:	6013      	str	r3, [r2, #0]
		time = HAL_GetTick();
 8002b64:	f001 fa82 	bl	800406c <HAL_GetTick>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	4a18      	ldr	r2, [pc, #96]	; (8002bcc <storage_thread+0x7c>)
 8002b6c:	6013      	str	r3, [r2, #0]
		if(restart_required) {
 8002b6e:	4b19      	ldr	r3, [pc, #100]	; (8002bd4 <storage_thread+0x84>)
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d008      	beq.n	8002b88 <storage_thread+0x38>
			write_header_used(1);
 8002b76:	2001      	movs	r0, #1
 8002b78:	f7ff ff76 	bl	8002a68 <write_header_used>
			data_counter = 0;
 8002b7c:	4b16      	ldr	r3, [pc, #88]	; (8002bd8 <storage_thread+0x88>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	601a      	str	r2, [r3, #0]
			restart_required = 0;
 8002b82:	4b14      	ldr	r3, [pc, #80]	; (8002bd4 <storage_thread+0x84>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	701a      	strb	r2, [r3, #0]
		}
		if(record_should_stop) {
 8002b88:	4b14      	ldr	r3, [pc, #80]	; (8002bdc <storage_thread+0x8c>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d014      	beq.n	8002bba <storage_thread+0x6a>
			record_should_stop -= time-last_time;;
 8002b90:	4b0f      	ldr	r3, [pc, #60]	; (8002bd0 <storage_thread+0x80>)
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	4b0d      	ldr	r3, [pc, #52]	; (8002bcc <storage_thread+0x7c>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	4a10      	ldr	r2, [pc, #64]	; (8002bdc <storage_thread+0x8c>)
 8002b9c:	6812      	ldr	r2, [r2, #0]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	4b0e      	ldr	r3, [pc, #56]	; (8002bdc <storage_thread+0x8c>)
 8002ba4:	601a      	str	r2, [r3, #0]
			if(record_should_stop<=0){
 8002ba6:	4b0d      	ldr	r3, [pc, #52]	; (8002bdc <storage_thread+0x8c>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	dc05      	bgt.n	8002bba <storage_thread+0x6a>
				record_active=0;
 8002bae:	4b0c      	ldr	r3, [pc, #48]	; (8002be0 <storage_thread+0x90>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	701a      	strb	r2, [r3, #0]
				record_should_stop=0;
 8002bb4:	4b09      	ldr	r3, [pc, #36]	; (8002bdc <storage_thread+0x8c>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	601a      	str	r2, [r3, #0]
			}
		}
		if(xSemaphoreTake(storage_sem, 0xffff) == pdTRUE) {
 8002bba:	4b0a      	ldr	r3, [pc, #40]	; (8002be4 <storage_thread+0x94>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f007 fa5a 	bl	800a07c <xQueueSemaphoreTake>
		last_time = time;
 8002bc8:	e7c8      	b.n	8002b5c <storage_thread+0xc>
 8002bca:	bf00      	nop
 8002bcc:	20001b6c 	.word	0x20001b6c
 8002bd0:	20001b70 	.word	0x20001b70
 8002bd4:	20001ad9 	.word	0x20001ad9
 8002bd8:	20001ad4 	.word	0x20001ad4
 8002bdc:	20001adc 	.word	0x20001adc
 8002be0:	20001ad8 	.word	0x20001ad8
 8002be4:	20001ae0 	.word	0x20001ae0

08002be8 <threads_init>:
 **********************/

/*
 * Create all the threads needed by the software
 */
void threads_init(void) {
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af04      	add	r7, sp, #16


	serial_global_init();
 8002bee:	f7ff fdf9 	bl	80027e4 <serial_global_init>
	static DEBUG_INST_t debug;
	debug_init(&debug);
 8002bf2:	4824      	ldr	r0, [pc, #144]	; (8002c84 <threads_init+0x9c>)
 8002bf4:	f7fe ffb2 	bl	8001b5c <debug_init>

	can_init();
 8002bf8:	f7fd fe2e 	bl	8000858 <can_init>
	/*
	 * Storage thread
	 * lowest priority
	 */

	CREATE_THREAD(storage_handle, storage, storage_thread, STORAGE_SZ, STORAGE_PRIO);
 8002bfc:	4b22      	ldr	r3, [pc, #136]	; (8002c88 <threads_init+0xa0>)
 8002bfe:	9302      	str	r3, [sp, #8]
 8002c00:	4b22      	ldr	r3, [pc, #136]	; (8002c8c <threads_init+0xa4>)
 8002c02:	9301      	str	r3, [sp, #4]
 8002c04:	2303      	movs	r3, #3
 8002c06:	9300      	str	r3, [sp, #0]
 8002c08:	2300      	movs	r3, #0
 8002c0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c0e:	4920      	ldr	r1, [pc, #128]	; (8002c90 <threads_init+0xa8>)
 8002c10:	4820      	ldr	r0, [pc, #128]	; (8002c94 <threads_init+0xac>)
 8002c12:	f007 fc41 	bl	800a498 <xTaskCreateStatic>
 8002c16:	4603      	mov	r3, r0
 8002c18:	4a1f      	ldr	r2, [pc, #124]	; (8002c98 <threads_init+0xb0>)
 8002c1a:	6013      	str	r3, [r2, #0]

	/*
	 *  Serial RX processing thread (Bottom half)
	 *  low priority
	 */
	CREATE_THREAD(serial_handle, serial, serial_thread, SERIAL_SZ, SERIAL_PRIO);
 8002c1c:	4b1f      	ldr	r3, [pc, #124]	; (8002c9c <threads_init+0xb4>)
 8002c1e:	9302      	str	r3, [sp, #8]
 8002c20:	4b1f      	ldr	r3, [pc, #124]	; (8002ca0 <threads_init+0xb8>)
 8002c22:	9301      	str	r3, [sp, #4]
 8002c24:	2305      	movs	r3, #5
 8002c26:	9300      	str	r3, [sp, #0]
 8002c28:	2300      	movs	r3, #0
 8002c2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c2e:	491d      	ldr	r1, [pc, #116]	; (8002ca4 <threads_init+0xbc>)
 8002c30:	481d      	ldr	r0, [pc, #116]	; (8002ca8 <threads_init+0xc0>)
 8002c32:	f007 fc31 	bl	800a498 <xTaskCreateStatic>
 8002c36:	4603      	mov	r3, r0
 8002c38:	4a1c      	ldr	r2, [pc, #112]	; (8002cac <threads_init+0xc4>)
 8002c3a:	6013      	str	r3, [r2, #0]

	/*
	 *  Main control thread
	 *  Highest priority
	 */
	CREATE_THREAD(control_handle, control, control_thread, CONTROL_SZ, CONTROL_PRIO);
 8002c3c:	4b1c      	ldr	r3, [pc, #112]	; (8002cb0 <threads_init+0xc8>)
 8002c3e:	9302      	str	r3, [sp, #8]
 8002c40:	4b1c      	ldr	r3, [pc, #112]	; (8002cb4 <threads_init+0xcc>)
 8002c42:	9301      	str	r3, [sp, #4]
 8002c44:	2306      	movs	r3, #6
 8002c46:	9300      	str	r3, [sp, #0]
 8002c48:	2300      	movs	r3, #0
 8002c4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c4e:	491a      	ldr	r1, [pc, #104]	; (8002cb8 <threads_init+0xd0>)
 8002c50:	481a      	ldr	r0, [pc, #104]	; (8002cbc <threads_init+0xd4>)
 8002c52:	f007 fc21 	bl	800a498 <xTaskCreateStatic>
 8002c56:	4603      	mov	r3, r0
 8002c58:	4a19      	ldr	r2, [pc, #100]	; (8002cc0 <threads_init+0xd8>)
 8002c5a:	6013      	str	r3, [r2, #0]

	/*
	 *  CAN send thread
	 *  Highest priority
	 */
	CREATE_THREAD(can_send_handle, can_send, can_send_thread, CAN_SZ, CAN_PRIO);
 8002c5c:	4b19      	ldr	r3, [pc, #100]	; (8002cc4 <threads_init+0xdc>)
 8002c5e:	9302      	str	r3, [sp, #8]
 8002c60:	4b19      	ldr	r3, [pc, #100]	; (8002cc8 <threads_init+0xe0>)
 8002c62:	9301      	str	r3, [sp, #4]
 8002c64:	2303      	movs	r3, #3
 8002c66:	9300      	str	r3, [sp, #0]
 8002c68:	2300      	movs	r3, #0
 8002c6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c6e:	4917      	ldr	r1, [pc, #92]	; (8002ccc <threads_init+0xe4>)
 8002c70:	4817      	ldr	r0, [pc, #92]	; (8002cd0 <threads_init+0xe8>)
 8002c72:	f007 fc11 	bl	800a498 <xTaskCreateStatic>
 8002c76:	4603      	mov	r3, r0
 8002c78:	4a16      	ldr	r2, [pc, #88]	; (8002cd4 <threads_init+0xec>)
 8002c7a:	6013      	str	r3, [r2, #0]



}
 8002c7c:	bf00      	nop
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	20001b84 	.word	0x20001b84
 8002c88:	20003fbc 	.word	0x20003fbc
 8002c8c:	20002fbc 	.word	0x20002fbc
 8002c90:	0800ba14 	.word	0x0800ba14
 8002c94:	08002b51 	.word	0x08002b51
 8002c98:	20001b7c 	.word	0x20001b7c
 8002c9c:	20005014 	.word	0x20005014
 8002ca0:	20004014 	.word	0x20004014
 8002ca4:	0800ba1c 	.word	0x0800ba1c
 8002ca8:	080028d9 	.word	0x080028d9
 8002cac:	20001b78 	.word	0x20001b78
 8002cb0:	2000606c 	.word	0x2000606c
 8002cb4:	2000506c 	.word	0x2000506c
 8002cb8:	0800ba24 	.word	0x0800ba24
 8002cbc:	08001231 	.word	0x08001231
 8002cc0:	20001b74 	.word	0x20001b74
 8002cc4:	200070c4 	.word	0x200070c4
 8002cc8:	200060c4 	.word	0x200060c4
 8002ccc:	0800ba2c 	.word	0x0800ba2c
 8002cd0:	08000869 	.word	0x08000869
 8002cd4:	20001b80 	.word	0x20001b80

08002cd8 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002cdc:	4b17      	ldr	r3, [pc, #92]	; (8002d3c <MX_CAN1_Init+0x64>)
 8002cde:	4a18      	ldr	r2, [pc, #96]	; (8002d40 <MX_CAN1_Init+0x68>)
 8002ce0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 8002ce2:	4b16      	ldr	r3, [pc, #88]	; (8002d3c <MX_CAN1_Init+0x64>)
 8002ce4:	2209      	movs	r2, #9
 8002ce6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002ce8:	4b14      	ldr	r3, [pc, #80]	; (8002d3c <MX_CAN1_Init+0x64>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002cee:	4b13      	ldr	r3, [pc, #76]	; (8002d3c <MX_CAN1_Init+0x64>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8002cf4:	4b11      	ldr	r3, [pc, #68]	; (8002d3c <MX_CAN1_Init+0x64>)
 8002cf6:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8002cfa:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8002cfc:	4b0f      	ldr	r3, [pc, #60]	; (8002d3c <MX_CAN1_Init+0x64>)
 8002cfe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002d02:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002d04:	4b0d      	ldr	r3, [pc, #52]	; (8002d3c <MX_CAN1_Init+0x64>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002d0a:	4b0c      	ldr	r3, [pc, #48]	; (8002d3c <MX_CAN1_Init+0x64>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002d10:	4b0a      	ldr	r3, [pc, #40]	; (8002d3c <MX_CAN1_Init+0x64>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8002d16:	4b09      	ldr	r3, [pc, #36]	; (8002d3c <MX_CAN1_Init+0x64>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002d1c:	4b07      	ldr	r3, [pc, #28]	; (8002d3c <MX_CAN1_Init+0x64>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002d22:	4b06      	ldr	r3, [pc, #24]	; (8002d3c <MX_CAN1_Init+0x64>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002d28:	4804      	ldr	r0, [pc, #16]	; (8002d3c <MX_CAN1_Init+0x64>)
 8002d2a:	f001 f9ab 	bl	8004084 <HAL_CAN_Init>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8002d34:	f000 fa2c 	bl	8003190 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8002d38:	bf00      	nop
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	20007900 	.word	0x20007900
 8002d40:	40006400 	.word	0x40006400

08002d44 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b08a      	sub	sp, #40	; 0x28
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d4c:	f107 0314 	add.w	r3, r7, #20
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]
 8002d54:	605a      	str	r2, [r3, #4]
 8002d56:	609a      	str	r2, [r3, #8]
 8002d58:	60da      	str	r2, [r3, #12]
 8002d5a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a2d      	ldr	r2, [pc, #180]	; (8002e18 <HAL_CAN_MspInit+0xd4>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d153      	bne.n	8002e0e <HAL_CAN_MspInit+0xca>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002d66:	2300      	movs	r3, #0
 8002d68:	613b      	str	r3, [r7, #16]
 8002d6a:	4b2c      	ldr	r3, [pc, #176]	; (8002e1c <HAL_CAN_MspInit+0xd8>)
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	4a2b      	ldr	r2, [pc, #172]	; (8002e1c <HAL_CAN_MspInit+0xd8>)
 8002d70:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d74:	6413      	str	r3, [r2, #64]	; 0x40
 8002d76:	4b29      	ldr	r3, [pc, #164]	; (8002e1c <HAL_CAN_MspInit+0xd8>)
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d7e:	613b      	str	r3, [r7, #16]
 8002d80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d82:	2300      	movs	r3, #0
 8002d84:	60fb      	str	r3, [r7, #12]
 8002d86:	4b25      	ldr	r3, [pc, #148]	; (8002e1c <HAL_CAN_MspInit+0xd8>)
 8002d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8a:	4a24      	ldr	r2, [pc, #144]	; (8002e1c <HAL_CAN_MspInit+0xd8>)
 8002d8c:	f043 0301 	orr.w	r3, r3, #1
 8002d90:	6313      	str	r3, [r2, #48]	; 0x30
 8002d92:	4b22      	ldr	r3, [pc, #136]	; (8002e1c <HAL_CAN_MspInit+0xd8>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	60fb      	str	r3, [r7, #12]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d9e:	2300      	movs	r3, #0
 8002da0:	60bb      	str	r3, [r7, #8]
 8002da2:	4b1e      	ldr	r3, [pc, #120]	; (8002e1c <HAL_CAN_MspInit+0xd8>)
 8002da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da6:	4a1d      	ldr	r2, [pc, #116]	; (8002e1c <HAL_CAN_MspInit+0xd8>)
 8002da8:	f043 0302 	orr.w	r3, r3, #2
 8002dac:	6313      	str	r3, [r2, #48]	; 0x30
 8002dae:	4b1b      	ldr	r3, [pc, #108]	; (8002e1c <HAL_CAN_MspInit+0xd8>)
 8002db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	60bb      	str	r3, [r7, #8]
 8002db8:	68bb      	ldr	r3, [r7, #8]
    /**CAN1 GPIO Configuration
    PA12     ------> CAN1_TX
    PB8     ------> CAN1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002dba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002dcc:	2309      	movs	r3, #9
 8002dce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dd0:	f107 0314 	add.w	r3, r7, #20
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	4812      	ldr	r0, [pc, #72]	; (8002e20 <HAL_CAN_MspInit+0xdc>)
 8002dd8:	f002 fce6 	bl	80057a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002ddc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002de0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de2:	2302      	movs	r3, #2
 8002de4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de6:	2300      	movs	r3, #0
 8002de8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dea:	2303      	movs	r3, #3
 8002dec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002dee:	2309      	movs	r3, #9
 8002df0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002df2:	f107 0314 	add.w	r3, r7, #20
 8002df6:	4619      	mov	r1, r3
 8002df8:	480a      	ldr	r0, [pc, #40]	; (8002e24 <HAL_CAN_MspInit+0xe0>)
 8002dfa:	f002 fcd5 	bl	80057a8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8002dfe:	2200      	movs	r2, #0
 8002e00:	2105      	movs	r1, #5
 8002e02:	2014      	movs	r0, #20
 8002e04:	f002 f8a4 	bl	8004f50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002e08:	2014      	movs	r0, #20
 8002e0a:	f002 f8bd 	bl	8004f88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8002e0e:	bf00      	nop
 8002e10:	3728      	adds	r7, #40	; 0x28
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	40006400 	.word	0x40006400
 8002e1c:	40023800 	.word	0x40023800
 8002e20:	40020000 	.word	0x40020000
 8002e24:	40020400 	.word	0x40020400

08002e28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002e2e:	2300      	movs	r3, #0
 8002e30:	607b      	str	r3, [r7, #4]
 8002e32:	4b27      	ldr	r3, [pc, #156]	; (8002ed0 <MX_DMA_Init+0xa8>)
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e36:	4a26      	ldr	r2, [pc, #152]	; (8002ed0 <MX_DMA_Init+0xa8>)
 8002e38:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e3e:	4b24      	ldr	r3, [pc, #144]	; (8002ed0 <MX_DMA_Init+0xa8>)
 8002e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e46:	607b      	str	r3, [r7, #4]
 8002e48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	603b      	str	r3, [r7, #0]
 8002e4e:	4b20      	ldr	r3, [pc, #128]	; (8002ed0 <MX_DMA_Init+0xa8>)
 8002e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e52:	4a1f      	ldr	r2, [pc, #124]	; (8002ed0 <MX_DMA_Init+0xa8>)
 8002e54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e58:	6313      	str	r3, [r2, #48]	; 0x30
 8002e5a:	4b1d      	ldr	r3, [pc, #116]	; (8002ed0 <MX_DMA_Init+0xa8>)
 8002e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e62:	603b      	str	r3, [r7, #0]
 8002e64:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8002e66:	2200      	movs	r2, #0
 8002e68:	2105      	movs	r1, #5
 8002e6a:	200c      	movs	r0, #12
 8002e6c:	f002 f870 	bl	8004f50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002e70:	200c      	movs	r0, #12
 8002e72:	f002 f889 	bl	8004f88 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8002e76:	2200      	movs	r2, #0
 8002e78:	2105      	movs	r1, #5
 8002e7a:	200e      	movs	r0, #14
 8002e7c:	f002 f868 	bl	8004f50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002e80:	200e      	movs	r0, #14
 8002e82:	f002 f881 	bl	8004f88 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8002e86:	2200      	movs	r2, #0
 8002e88:	2105      	movs	r1, #5
 8002e8a:	203a      	movs	r0, #58	; 0x3a
 8002e8c:	f002 f860 	bl	8004f50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002e90:	203a      	movs	r0, #58	; 0x3a
 8002e92:	f002 f879 	bl	8004f88 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 8002e96:	2200      	movs	r2, #0
 8002e98:	2105      	movs	r1, #5
 8002e9a:	2044      	movs	r0, #68	; 0x44
 8002e9c:	f002 f858 	bl	8004f50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8002ea0:	2044      	movs	r0, #68	; 0x44
 8002ea2:	f002 f871 	bl	8004f88 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	2105      	movs	r1, #5
 8002eaa:	2045      	movs	r0, #69	; 0x45
 8002eac:	f002 f850 	bl	8004f50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002eb0:	2045      	movs	r0, #69	; 0x45
 8002eb2:	f002 f869 	bl	8004f88 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	2105      	movs	r1, #5
 8002eba:	2046      	movs	r0, #70	; 0x46
 8002ebc:	f002 f848 	bl	8004f50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002ec0:	2046      	movs	r0, #70	; 0x46
 8002ec2:	f002 f861 	bl	8004f88 <HAL_NVIC_EnableIRQ>

}
 8002ec6:	bf00      	nop
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	40023800 	.word	0x40023800

08002ed4 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
	TIM5->CR1 = 0b1;
 8002ed8:	4b03      	ldr	r3, [pc, #12]	; (8002ee8 <configureTimerForRunTimeStats+0x14>)
 8002eda:	2201      	movs	r2, #1
 8002edc:	601a      	str	r2, [r3, #0]
}
 8002ede:	bf00      	nop
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr
 8002ee8:	40000c00 	.word	0x40000c00

08002eec <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
return TIM5->CNT;
 8002ef0:	4b03      	ldr	r3, [pc, #12]	; (8002f00 <getRunTimeCounterValue+0x14>)
 8002ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	40000c00 	.word	0x40000c00

08002f04 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	4a07      	ldr	r2, [pc, #28]	; (8002f30 <vApplicationGetIdleTaskMemory+0x2c>)
 8002f14:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	4a06      	ldr	r2, [pc, #24]	; (8002f34 <vApplicationGetIdleTaskMemory+0x30>)
 8002f1a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2280      	movs	r2, #128	; 0x80
 8002f20:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002f22:	bf00      	nop
 8002f24:	3714      	adds	r7, #20
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	2000711c 	.word	0x2000711c
 8002f34:	20007174 	.word	0x20007174

08002f38 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002f38:	b5b0      	push	{r4, r5, r7, lr}
 8002f3a:	b088      	sub	sp, #32
 8002f3c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128, defaultTaskBuffer, &defaultTaskControlBlock);
 8002f3e:	4b0a      	ldr	r3, [pc, #40]	; (8002f68 <MX_FREERTOS_Init+0x30>)
 8002f40:	1d3c      	adds	r4, r7, #4
 8002f42:	461d      	mov	r5, r3
 8002f44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f48:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002f4c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002f50:	1d3b      	adds	r3, r7, #4
 8002f52:	2100      	movs	r1, #0
 8002f54:	4618      	mov	r0, r3
 8002f56:	f006 fce8 	bl	800992a <osThreadCreate>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	4a03      	ldr	r2, [pc, #12]	; (8002f6c <MX_FREERTOS_Init+0x34>)
 8002f5e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002f60:	bf00      	nop
 8002f62:	3720      	adds	r7, #32
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bdb0      	pop	{r4, r5, r7, pc}
 8002f68:	0800ba44 	.word	0x0800ba44
 8002f6c:	20007928 	.word	0x20007928

08002f70 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002f78:	2001      	movs	r0, #1
 8002f7a:	f006 fcfb 	bl	8009974 <osDelay>
 8002f7e:	e7fb      	b.n	8002f78 <StartDefaultTask+0x8>

08002f80 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b088      	sub	sp, #32
 8002f84:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f86:	f107 030c 	add.w	r3, r7, #12
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	601a      	str	r2, [r3, #0]
 8002f8e:	605a      	str	r2, [r3, #4]
 8002f90:	609a      	str	r2, [r3, #8]
 8002f92:	60da      	str	r2, [r3, #12]
 8002f94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f96:	2300      	movs	r3, #0
 8002f98:	60bb      	str	r3, [r7, #8]
 8002f9a:	4b27      	ldr	r3, [pc, #156]	; (8003038 <MX_GPIO_Init+0xb8>)
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9e:	4a26      	ldr	r2, [pc, #152]	; (8003038 <MX_GPIO_Init+0xb8>)
 8002fa0:	f043 0301 	orr.w	r3, r3, #1
 8002fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fa6:	4b24      	ldr	r3, [pc, #144]	; (8003038 <MX_GPIO_Init+0xb8>)
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	60bb      	str	r3, [r7, #8]
 8002fb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	607b      	str	r3, [r7, #4]
 8002fb6:	4b20      	ldr	r3, [pc, #128]	; (8003038 <MX_GPIO_Init+0xb8>)
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fba:	4a1f      	ldr	r2, [pc, #124]	; (8003038 <MX_GPIO_Init+0xb8>)
 8002fbc:	f043 0304 	orr.w	r3, r3, #4
 8002fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fc2:	4b1d      	ldr	r3, [pc, #116]	; (8003038 <MX_GPIO_Init+0xb8>)
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc6:	f003 0304 	and.w	r3, r3, #4
 8002fca:	607b      	str	r3, [r7, #4]
 8002fcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fce:	2300      	movs	r3, #0
 8002fd0:	603b      	str	r3, [r7, #0]
 8002fd2:	4b19      	ldr	r3, [pc, #100]	; (8003038 <MX_GPIO_Init+0xb8>)
 8002fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd6:	4a18      	ldr	r2, [pc, #96]	; (8003038 <MX_GPIO_Init+0xb8>)
 8002fd8:	f043 0302 	orr.w	r3, r3, #2
 8002fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8002fde:	4b16      	ldr	r3, [pc, #88]	; (8003038 <MX_GPIO_Init+0xb8>)
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	603b      	str	r3, [r7, #0]
 8002fe8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GLOBAL_EN_GPIO_Port, GLOBAL_EN_Pin, GPIO_PIN_RESET);
 8002fea:	2200      	movs	r2, #0
 8002fec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002ff0:	4812      	ldr	r0, [pc, #72]	; (800303c <MX_GPIO_Init+0xbc>)
 8002ff2:	f002 fd6d 	bl	8005ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RUN_PG_Pin;
 8002ff6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ffa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003000:	2300      	movs	r3, #0
 8003002:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(RUN_PG_GPIO_Port, &GPIO_InitStruct);
 8003004:	f107 030c 	add.w	r3, r7, #12
 8003008:	4619      	mov	r1, r3
 800300a:	480d      	ldr	r0, [pc, #52]	; (8003040 <MX_GPIO_Init+0xc0>)
 800300c:	f002 fbcc 	bl	80057a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GLOBAL_EN_Pin;
 8003010:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003014:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003016:	2311      	movs	r3, #17
 8003018:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301a:	2300      	movs	r3, #0
 800301c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800301e:	2300      	movs	r3, #0
 8003020:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GLOBAL_EN_GPIO_Port, &GPIO_InitStruct);
 8003022:	f107 030c 	add.w	r3, r7, #12
 8003026:	4619      	mov	r1, r3
 8003028:	4804      	ldr	r0, [pc, #16]	; (800303c <MX_GPIO_Init+0xbc>)
 800302a:	f002 fbbd 	bl	80057a8 <HAL_GPIO_Init>

}
 800302e:	bf00      	nop
 8003030:	3720      	adds	r7, #32
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	40023800 	.word	0x40023800
 800303c:	40020000 	.word	0x40020000
 8003040:	40020400 	.word	0x40020400

08003044 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003048:	f000 ffda 	bl	8004000 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800304c:	f000 f822 	bl	8003094 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003050:	f7ff ff96 	bl	8002f80 <MX_GPIO_Init>
  MX_DMA_Init();
 8003054:	f7ff fee8 	bl	8002e28 <MX_DMA_Init>
  MX_TIM8_Init();
 8003058:	f000 fb68 	bl	800372c <MX_TIM8_Init>
  MX_TIM2_Init();
 800305c:	f000 fa7e 	bl	800355c <MX_TIM2_Init>
  MX_USART6_UART_Init();
 8003060:	f000 fd54 	bl	8003b0c <MX_USART6_UART_Init>
  MX_USART3_UART_Init();
 8003064:	f000 fd28 	bl	8003ab8 <MX_USART3_UART_Init>
  MX_QUADSPI_Init();
 8003068:	f000 f89a 	bl	80031a0 <MX_QUADSPI_Init>
  MX_TIM3_Init();
 800306c:	f000 fac2 	bl	80035f4 <MX_TIM3_Init>
  MX_CAN1_Init();
 8003070:	f7ff fe32 	bl	8002cd8 <MX_CAN1_Init>
  MX_USART1_UART_Init();
 8003074:	f000 fcf6 	bl	8003a64 <MX_USART1_UART_Init>
  MX_TIM5_Init();
 8003078:	f000 fb0a 	bl	8003690 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */



  threads_init();
 800307c:	f7ff fdb4 	bl	8002be8 <threads_init>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8003080:	f7ff ff5a 	bl	8002f38 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8003084:	f006 fc4a 	bl	800991c <osKernelStart>



  while (1)
  {
	osDelay(1000);
 8003088:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800308c:	f006 fc72 	bl	8009974 <osDelay>
 8003090:	e7fa      	b.n	8003088 <main+0x44>
	...

08003094 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b094      	sub	sp, #80	; 0x50
 8003098:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800309a:	f107 031c 	add.w	r3, r7, #28
 800309e:	2234      	movs	r2, #52	; 0x34
 80030a0:	2100      	movs	r1, #0
 80030a2:	4618      	mov	r0, r3
 80030a4:	f008 fca2 	bl	800b9ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80030a8:	f107 0308 	add.w	r3, r7, #8
 80030ac:	2200      	movs	r2, #0
 80030ae:	601a      	str	r2, [r3, #0]
 80030b0:	605a      	str	r2, [r3, #4]
 80030b2:	609a      	str	r2, [r3, #8]
 80030b4:	60da      	str	r2, [r3, #12]
 80030b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80030b8:	2300      	movs	r3, #0
 80030ba:	607b      	str	r3, [r7, #4]
 80030bc:	4b29      	ldr	r3, [pc, #164]	; (8003164 <SystemClock_Config+0xd0>)
 80030be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c0:	4a28      	ldr	r2, [pc, #160]	; (8003164 <SystemClock_Config+0xd0>)
 80030c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030c6:	6413      	str	r3, [r2, #64]	; 0x40
 80030c8:	4b26      	ldr	r3, [pc, #152]	; (8003164 <SystemClock_Config+0xd0>)
 80030ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d0:	607b      	str	r3, [r7, #4]
 80030d2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80030d4:	2300      	movs	r3, #0
 80030d6:	603b      	str	r3, [r7, #0]
 80030d8:	4b23      	ldr	r3, [pc, #140]	; (8003168 <SystemClock_Config+0xd4>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80030e0:	4a21      	ldr	r2, [pc, #132]	; (8003168 <SystemClock_Config+0xd4>)
 80030e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030e6:	6013      	str	r3, [r2, #0]
 80030e8:	4b1f      	ldr	r3, [pc, #124]	; (8003168 <SystemClock_Config+0xd4>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80030f0:	603b      	str	r3, [r7, #0]
 80030f2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80030f4:	2302      	movs	r3, #2
 80030f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80030f8:	2301      	movs	r3, #1
 80030fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80030fc:	2310      	movs	r3, #16
 80030fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003100:	2302      	movs	r3, #2
 8003102:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003104:	2300      	movs	r3, #0
 8003106:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003108:	2308      	movs	r3, #8
 800310a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 800310c:	2348      	movs	r3, #72	; 0x48
 800310e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003110:	2302      	movs	r3, #2
 8003112:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8003114:	2303      	movs	r3, #3
 8003116:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003118:	2302      	movs	r3, #2
 800311a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800311c:	f107 031c 	add.w	r3, r7, #28
 8003120:	4618      	mov	r0, r3
 8003122:	f003 fef9 	bl	8006f18 <HAL_RCC_OscConfig>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800312c:	f000 f830 	bl	8003190 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003130:	230f      	movs	r3, #15
 8003132:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003134:	2302      	movs	r3, #2
 8003136:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003138:	2300      	movs	r3, #0
 800313a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800313c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003140:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003142:	2300      	movs	r3, #0
 8003144:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003146:	f107 0308 	add.w	r3, r7, #8
 800314a:	2102      	movs	r1, #2
 800314c:	4618      	mov	r0, r3
 800314e:	f003 fc3b 	bl	80069c8 <HAL_RCC_ClockConfig>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d001      	beq.n	800315c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8003158:	f000 f81a 	bl	8003190 <Error_Handler>
  }
}
 800315c:	bf00      	nop
 800315e:	3750      	adds	r7, #80	; 0x50
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	40023800 	.word	0x40023800
 8003168:	40007000 	.word	0x40007000

0800316c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a04      	ldr	r2, [pc, #16]	; (800318c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d101      	bne.n	8003182 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800317e:	f000 ff61 	bl	8004044 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003182:	bf00      	nop
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	40010000 	.word	0x40010000

08003190 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003190:	b480      	push	{r7}
 8003192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003194:	bf00      	nop
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
	...

080031a0 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 80031a4:	4b12      	ldr	r3, [pc, #72]	; (80031f0 <MX_QUADSPI_Init+0x50>)
 80031a6:	4a13      	ldr	r2, [pc, #76]	; (80031f4 <MX_QUADSPI_Init+0x54>)
 80031a8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 100;
 80031aa:	4b11      	ldr	r3, [pc, #68]	; (80031f0 <MX_QUADSPI_Init+0x50>)
 80031ac:	2264      	movs	r2, #100	; 0x64
 80031ae:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80031b0:	4b0f      	ldr	r3, [pc, #60]	; (80031f0 <MX_QUADSPI_Init+0x50>)
 80031b2:	2201      	movs	r2, #1
 80031b4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80031b6:	4b0e      	ldr	r3, [pc, #56]	; (80031f0 <MX_QUADSPI_Init+0x50>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 26;
 80031bc:	4b0c      	ldr	r3, [pc, #48]	; (80031f0 <MX_QUADSPI_Init+0x50>)
 80031be:	221a      	movs	r2, #26
 80031c0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80031c2:	4b0b      	ldr	r3, [pc, #44]	; (80031f0 <MX_QUADSPI_Init+0x50>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80031c8:	4b09      	ldr	r3, [pc, #36]	; (80031f0 <MX_QUADSPI_Init+0x50>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80031ce:	4b08      	ldr	r3, [pc, #32]	; (80031f0 <MX_QUADSPI_Init+0x50>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80031d4:	4b06      	ldr	r3, [pc, #24]	; (80031f0 <MX_QUADSPI_Init+0x50>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80031da:	4805      	ldr	r0, [pc, #20]	; (80031f0 <MX_QUADSPI_Init+0x50>)
 80031dc:	f002 fc92 	bl	8005b04 <HAL_QSPI_Init>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80031e6:	f7ff ffd3 	bl	8003190 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80031ea:	bf00      	nop
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	20007b84 	.word	0x20007b84
 80031f4:	a0001000 	.word	0xa0001000

080031f8 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b08a      	sub	sp, #40	; 0x28
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003200:	f107 0314 	add.w	r3, r7, #20
 8003204:	2200      	movs	r2, #0
 8003206:	601a      	str	r2, [r3, #0]
 8003208:	605a      	str	r2, [r3, #4]
 800320a:	609a      	str	r2, [r3, #8]
 800320c:	60da      	str	r2, [r3, #12]
 800320e:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a34      	ldr	r2, [pc, #208]	; (80032e8 <HAL_QSPI_MspInit+0xf0>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d162      	bne.n	80032e0 <HAL_QSPI_MspInit+0xe8>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800321a:	2300      	movs	r3, #0
 800321c:	613b      	str	r3, [r7, #16]
 800321e:	4b33      	ldr	r3, [pc, #204]	; (80032ec <HAL_QSPI_MspInit+0xf4>)
 8003220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003222:	4a32      	ldr	r2, [pc, #200]	; (80032ec <HAL_QSPI_MspInit+0xf4>)
 8003224:	f043 0302 	orr.w	r3, r3, #2
 8003228:	6393      	str	r3, [r2, #56]	; 0x38
 800322a:	4b30      	ldr	r3, [pc, #192]	; (80032ec <HAL_QSPI_MspInit+0xf4>)
 800322c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	613b      	str	r3, [r7, #16]
 8003234:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003236:	2300      	movs	r3, #0
 8003238:	60fb      	str	r3, [r7, #12]
 800323a:	4b2c      	ldr	r3, [pc, #176]	; (80032ec <HAL_QSPI_MspInit+0xf4>)
 800323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323e:	4a2b      	ldr	r2, [pc, #172]	; (80032ec <HAL_QSPI_MspInit+0xf4>)
 8003240:	f043 0302 	orr.w	r3, r3, #2
 8003244:	6313      	str	r3, [r2, #48]	; 0x30
 8003246:	4b29      	ldr	r3, [pc, #164]	; (80032ec <HAL_QSPI_MspInit+0xf4>)
 8003248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	60fb      	str	r3, [r7, #12]
 8003250:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003252:	2300      	movs	r3, #0
 8003254:	60bb      	str	r3, [r7, #8]
 8003256:	4b25      	ldr	r3, [pc, #148]	; (80032ec <HAL_QSPI_MspInit+0xf4>)
 8003258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325a:	4a24      	ldr	r2, [pc, #144]	; (80032ec <HAL_QSPI_MspInit+0xf4>)
 800325c:	f043 0304 	orr.w	r3, r3, #4
 8003260:	6313      	str	r3, [r2, #48]	; 0x30
 8003262:	4b22      	ldr	r3, [pc, #136]	; (80032ec <HAL_QSPI_MspInit+0xf4>)
 8003264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003266:	f003 0304 	and.w	r3, r3, #4
 800326a:	60bb      	str	r3, [r7, #8]
 800326c:	68bb      	ldr	r3, [r7, #8]
    PB2     ------> QUADSPI_CLK
    PC9     ------> QUADSPI_BK1_IO0
    PC10     ------> QUADSPI_BK1_IO1
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800326e:	2304      	movs	r3, #4
 8003270:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003272:	2302      	movs	r3, #2
 8003274:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003276:	2300      	movs	r3, #0
 8003278:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800327a:	2303      	movs	r3, #3
 800327c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 800327e:	2309      	movs	r3, #9
 8003280:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003282:	f107 0314 	add.w	r3, r7, #20
 8003286:	4619      	mov	r1, r3
 8003288:	4819      	ldr	r0, [pc, #100]	; (80032f0 <HAL_QSPI_MspInit+0xf8>)
 800328a:	f002 fa8d 	bl	80057a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800328e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003292:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003294:	2302      	movs	r3, #2
 8003296:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003298:	2300      	movs	r3, #0
 800329a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800329c:	2303      	movs	r3, #3
 800329e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 80032a0:	2309      	movs	r3, #9
 80032a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032a4:	f107 0314 	add.w	r3, r7, #20
 80032a8:	4619      	mov	r1, r3
 80032aa:	4812      	ldr	r0, [pc, #72]	; (80032f4 <HAL_QSPI_MspInit+0xfc>)
 80032ac:	f002 fa7c 	bl	80057a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80032b0:	2340      	movs	r3, #64	; 0x40
 80032b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b4:	2302      	movs	r3, #2
 80032b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b8:	2300      	movs	r3, #0
 80032ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032bc:	2303      	movs	r3, #3
 80032be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 80032c0:	230a      	movs	r3, #10
 80032c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032c4:	f107 0314 	add.w	r3, r7, #20
 80032c8:	4619      	mov	r1, r3
 80032ca:	4809      	ldr	r0, [pc, #36]	; (80032f0 <HAL_QSPI_MspInit+0xf8>)
 80032cc:	f002 fa6c 	bl	80057a8 <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 5, 0);
 80032d0:	2200      	movs	r2, #0
 80032d2:	2105      	movs	r1, #5
 80032d4:	205c      	movs	r0, #92	; 0x5c
 80032d6:	f001 fe3b 	bl	8004f50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 80032da:	205c      	movs	r0, #92	; 0x5c
 80032dc:	f001 fe54 	bl	8004f88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 80032e0:	bf00      	nop
 80032e2:	3728      	adds	r7, #40	; 0x28
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	a0001000 	.word	0xa0001000
 80032ec:	40023800 	.word	0x40023800
 80032f0:	40020400 	.word	0x40020400
 80032f4:	40020800 	.word	0x40020800

080032f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032fe:	2300      	movs	r3, #0
 8003300:	607b      	str	r3, [r7, #4]
 8003302:	4b12      	ldr	r3, [pc, #72]	; (800334c <HAL_MspInit+0x54>)
 8003304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003306:	4a11      	ldr	r2, [pc, #68]	; (800334c <HAL_MspInit+0x54>)
 8003308:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800330c:	6453      	str	r3, [r2, #68]	; 0x44
 800330e:	4b0f      	ldr	r3, [pc, #60]	; (800334c <HAL_MspInit+0x54>)
 8003310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003312:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003316:	607b      	str	r3, [r7, #4]
 8003318:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800331a:	2300      	movs	r3, #0
 800331c:	603b      	str	r3, [r7, #0]
 800331e:	4b0b      	ldr	r3, [pc, #44]	; (800334c <HAL_MspInit+0x54>)
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	4a0a      	ldr	r2, [pc, #40]	; (800334c <HAL_MspInit+0x54>)
 8003324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003328:	6413      	str	r3, [r2, #64]	; 0x40
 800332a:	4b08      	ldr	r3, [pc, #32]	; (800334c <HAL_MspInit+0x54>)
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003332:	603b      	str	r3, [r7, #0]
 8003334:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003336:	2200      	movs	r2, #0
 8003338:	210f      	movs	r1, #15
 800333a:	f06f 0001 	mvn.w	r0, #1
 800333e:	f001 fe07 	bl	8004f50 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003342:	bf00      	nop
 8003344:	3708      	adds	r7, #8
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	40023800 	.word	0x40023800

08003350 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b08c      	sub	sp, #48	; 0x30
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003358:	2300      	movs	r3, #0
 800335a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800335c:	2300      	movs	r3, #0
 800335e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8003360:	2200      	movs	r2, #0
 8003362:	6879      	ldr	r1, [r7, #4]
 8003364:	2019      	movs	r0, #25
 8003366:	f001 fdf3 	bl	8004f50 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800336a:	2019      	movs	r0, #25
 800336c:	f001 fe0c 	bl	8004f88 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003370:	2300      	movs	r3, #0
 8003372:	60fb      	str	r3, [r7, #12]
 8003374:	4b1e      	ldr	r3, [pc, #120]	; (80033f0 <HAL_InitTick+0xa0>)
 8003376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003378:	4a1d      	ldr	r2, [pc, #116]	; (80033f0 <HAL_InitTick+0xa0>)
 800337a:	f043 0301 	orr.w	r3, r3, #1
 800337e:	6453      	str	r3, [r2, #68]	; 0x44
 8003380:	4b1b      	ldr	r3, [pc, #108]	; (80033f0 <HAL_InitTick+0xa0>)
 8003382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003384:	f003 0301 	and.w	r3, r3, #1
 8003388:	60fb      	str	r3, [r7, #12]
 800338a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800338c:	f107 0210 	add.w	r2, r7, #16
 8003390:	f107 0314 	add.w	r3, r7, #20
 8003394:	4611      	mov	r1, r2
 8003396:	4618      	mov	r0, r3
 8003398:	f003 fc30 	bl	8006bfc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800339c:	f003 fc1a 	bl	8006bd4 <HAL_RCC_GetPCLK2Freq>
 80033a0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80033a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033a4:	4a13      	ldr	r2, [pc, #76]	; (80033f4 <HAL_InitTick+0xa4>)
 80033a6:	fba2 2303 	umull	r2, r3, r2, r3
 80033aa:	0c9b      	lsrs	r3, r3, #18
 80033ac:	3b01      	subs	r3, #1
 80033ae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80033b0:	4b11      	ldr	r3, [pc, #68]	; (80033f8 <HAL_InitTick+0xa8>)
 80033b2:	4a12      	ldr	r2, [pc, #72]	; (80033fc <HAL_InitTick+0xac>)
 80033b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80033b6:	4b10      	ldr	r3, [pc, #64]	; (80033f8 <HAL_InitTick+0xa8>)
 80033b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80033bc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80033be:	4a0e      	ldr	r2, [pc, #56]	; (80033f8 <HAL_InitTick+0xa8>)
 80033c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80033c4:	4b0c      	ldr	r3, [pc, #48]	; (80033f8 <HAL_InitTick+0xa8>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033ca:	4b0b      	ldr	r3, [pc, #44]	; (80033f8 <HAL_InitTick+0xa8>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80033d0:	4809      	ldr	r0, [pc, #36]	; (80033f8 <HAL_InitTick+0xa8>)
 80033d2:	f004 f83f 	bl	8007454 <HAL_TIM_Base_Init>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d104      	bne.n	80033e6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80033dc:	4806      	ldr	r0, [pc, #24]	; (80033f8 <HAL_InitTick+0xa8>)
 80033de:	f004 f889 	bl	80074f4 <HAL_TIM_Base_Start_IT>
 80033e2:	4603      	mov	r3, r0
 80033e4:	e000      	b.n	80033e8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3730      	adds	r7, #48	; 0x30
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	40023800 	.word	0x40023800
 80033f4:	431bde83 	.word	0x431bde83
 80033f8:	20007bd0 	.word	0x20007bd0
 80033fc:	40010000 	.word	0x40010000

08003400 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003400:	b480      	push	{r7}
 8003402:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003404:	bf00      	nop
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr

0800340e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	af00      	add	r7, sp, #0
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */

	  led_set_color(LED_WHITE);
 8003412:	222f      	movs	r2, #47	; 0x2f
 8003414:	212f      	movs	r1, #47	; 0x2f
 8003416:	202f      	movs	r0, #47	; 0x2f
 8003418:	f7fe feca 	bl	80021b0 <led_set_color>
 800341c:	e7f9      	b.n	8003412 <HardFault_Handler+0x4>

0800341e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800341e:	b480      	push	{r7}
 8003420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003422:	e7fe      	b.n	8003422 <MemManage_Handler+0x4>

08003424 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003428:	e7fe      	b.n	8003428 <BusFault_Handler+0x4>

0800342a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800342a:	b480      	push	{r7}
 800342c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800342e:	e7fe      	b.n	800342e <UsageFault_Handler+0x4>

08003430 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003430:	b480      	push	{r7}
 8003432:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003434:	bf00      	nop
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
	...

08003440 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003444:	4802      	ldr	r0, [pc, #8]	; (8003450 <DMA1_Stream1_IRQHandler+0x10>)
 8003446:	f001 ff45 	bl	80052d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800344a:	bf00      	nop
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	20007d98 	.word	0x20007d98

08003454 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003458:	4802      	ldr	r0, [pc, #8]	; (8003464 <DMA1_Stream3_IRQHandler+0x10>)
 800345a:	f001 ff3b 	bl	80052d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800345e:	bf00      	nop
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	20007e3c 	.word	0x20007e3c

08003468 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800346c:	4802      	ldr	r0, [pc, #8]	; (8003478 <CAN1_RX0_IRQHandler+0x10>)
 800346e:	f001 fa88 	bl	8004982 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003472:	bf00      	nop
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	20007900 	.word	0x20007900

0800347c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003480:	4802      	ldr	r0, [pc, #8]	; (800348c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003482:	f004 f900 	bl	8007686 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003486:	bf00      	nop
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	20007bd0 	.word	0x20007bd0

08003490 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003494:	4802      	ldr	r0, [pc, #8]	; (80034a0 <USART1_IRQHandler+0x10>)
 8003496:	f005 f993 	bl	80087c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800349a:	bf00      	nop
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	20007fbc 	.word	0x20007fbc

080034a4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80034a8:	4802      	ldr	r0, [pc, #8]	; (80034b4 <USART3_IRQHandler+0x10>)
 80034aa:	f005 f989 	bl	80087c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80034ae:	bf00      	nop
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	20007df8 	.word	0x20007df8

080034b8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80034bc:	4802      	ldr	r0, [pc, #8]	; (80034c8 <DMA2_Stream2_IRQHandler+0x10>)
 80034be:	f001 ff09 	bl	80052d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80034c2:	bf00      	nop
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	20007d38 	.word	0x20007d38

080034cc <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80034d0:	4802      	ldr	r0, [pc, #8]	; (80034dc <DMA2_Stream5_IRQHandler+0x10>)
 80034d2:	f001 feff 	bl	80052d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 80034d6:	bf00      	nop
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	20007f5c 	.word	0x20007f5c

080034e0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 80034e4:	4802      	ldr	r0, [pc, #8]	; (80034f0 <DMA2_Stream6_IRQHandler+0x10>)
 80034e6:	f001 fef5 	bl	80052d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80034ea:	bf00      	nop
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	20007efc 	.word	0x20007efc

080034f4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80034f8:	4802      	ldr	r0, [pc, #8]	; (8003504 <DMA2_Stream7_IRQHandler+0x10>)
 80034fa:	f001 feeb 	bl	80052d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80034fe:	bf00      	nop
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	20007e9c 	.word	0x20007e9c

08003508 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800350c:	4802      	ldr	r0, [pc, #8]	; (8003518 <USART6_IRQHandler+0x10>)
 800350e:	f005 f957 	bl	80087c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003512:	bf00      	nop
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	20008000 	.word	0x20008000

0800351c <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 8003520:	4802      	ldr	r0, [pc, #8]	; (800352c <QUADSPI_IRQHandler+0x10>)
 8003522:	f002 fb6b 	bl	8005bfc <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 8003526:	bf00      	nop
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	20007b84 	.word	0x20007b84

08003530 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003534:	4b08      	ldr	r3, [pc, #32]	; (8003558 <SystemInit+0x28>)
 8003536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800353a:	4a07      	ldr	r2, [pc, #28]	; (8003558 <SystemInit+0x28>)
 800353c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003540:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003544:	4b04      	ldr	r3, [pc, #16]	; (8003558 <SystemInit+0x28>)
 8003546:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800354a:	609a      	str	r2, [r3, #8]
#endif
}
 800354c:	bf00      	nop
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	e000ed00 	.word	0xe000ed00

0800355c <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003562:	f107 0308 	add.w	r3, r7, #8
 8003566:	2200      	movs	r2, #0
 8003568:	601a      	str	r2, [r3, #0]
 800356a:	605a      	str	r2, [r3, #4]
 800356c:	609a      	str	r2, [r3, #8]
 800356e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003570:	463b      	mov	r3, r7
 8003572:	2200      	movs	r2, #0
 8003574:	601a      	str	r2, [r3, #0]
 8003576:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003578:	4b1d      	ldr	r3, [pc, #116]	; (80035f0 <MX_TIM2_Init+0x94>)
 800357a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800357e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 49;
 8003580:	4b1b      	ldr	r3, [pc, #108]	; (80035f0 <MX_TIM2_Init+0x94>)
 8003582:	2231      	movs	r2, #49	; 0x31
 8003584:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8003586:	4b1a      	ldr	r3, [pc, #104]	; (80035f0 <MX_TIM2_Init+0x94>)
 8003588:	2210      	movs	r2, #16
 800358a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800358c:	4b18      	ldr	r3, [pc, #96]	; (80035f0 <MX_TIM2_Init+0x94>)
 800358e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003592:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003594:	4b16      	ldr	r3, [pc, #88]	; (80035f0 <MX_TIM2_Init+0x94>)
 8003596:	2200      	movs	r2, #0
 8003598:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800359a:	4b15      	ldr	r3, [pc, #84]	; (80035f0 <MX_TIM2_Init+0x94>)
 800359c:	2200      	movs	r2, #0
 800359e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80035a0:	4813      	ldr	r0, [pc, #76]	; (80035f0 <MX_TIM2_Init+0x94>)
 80035a2:	f003 ff57 	bl	8007454 <HAL_TIM_Base_Init>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80035ac:	f7ff fdf0 	bl	8003190 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80035b6:	f107 0308 	add.w	r3, r7, #8
 80035ba:	4619      	mov	r1, r3
 80035bc:	480c      	ldr	r0, [pc, #48]	; (80035f0 <MX_TIM2_Init+0x94>)
 80035be:	f004 fa29 	bl	8007a14 <HAL_TIM_ConfigClockSource>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d001      	beq.n	80035cc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80035c8:	f7ff fde2 	bl	8003190 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035cc:	2300      	movs	r3, #0
 80035ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035d0:	2300      	movs	r3, #0
 80035d2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80035d4:	463b      	mov	r3, r7
 80035d6:	4619      	mov	r1, r3
 80035d8:	4805      	ldr	r0, [pc, #20]	; (80035f0 <MX_TIM2_Init+0x94>)
 80035da:	f004 feab 	bl	8008334 <HAL_TIMEx_MasterConfigSynchronization>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d001      	beq.n	80035e8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80035e4:	f7ff fdd4 	bl	8003190 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80035e8:	bf00      	nop
 80035ea:	3718      	adds	r7, #24
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	20007cf0 	.word	0x20007cf0

080035f4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b086      	sub	sp, #24
 80035f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80035fa:	f107 0308 	add.w	r3, r7, #8
 80035fe:	2200      	movs	r2, #0
 8003600:	601a      	str	r2, [r3, #0]
 8003602:	605a      	str	r2, [r3, #4]
 8003604:	609a      	str	r2, [r3, #8]
 8003606:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003608:	463b      	mov	r3, r7
 800360a:	2200      	movs	r2, #0
 800360c:	601a      	str	r2, [r3, #0]
 800360e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003610:	4b1d      	ldr	r3, [pc, #116]	; (8003688 <MX_TIM3_Init+0x94>)
 8003612:	4a1e      	ldr	r2, [pc, #120]	; (800368c <MX_TIM3_Init+0x98>)
 8003614:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003616:	4b1c      	ldr	r3, [pc, #112]	; (8003688 <MX_TIM3_Init+0x94>)
 8003618:	2200      	movs	r2, #0
 800361a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800361c:	4b1a      	ldr	r3, [pc, #104]	; (8003688 <MX_TIM3_Init+0x94>)
 800361e:	2200      	movs	r2, #0
 8003620:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1125;
 8003622:	4b19      	ldr	r3, [pc, #100]	; (8003688 <MX_TIM3_Init+0x94>)
 8003624:	f240 4265 	movw	r2, #1125	; 0x465
 8003628:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800362a:	4b17      	ldr	r3, [pc, #92]	; (8003688 <MX_TIM3_Init+0x94>)
 800362c:	2200      	movs	r2, #0
 800362e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003630:	4b15      	ldr	r3, [pc, #84]	; (8003688 <MX_TIM3_Init+0x94>)
 8003632:	2200      	movs	r2, #0
 8003634:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003636:	4814      	ldr	r0, [pc, #80]	; (8003688 <MX_TIM3_Init+0x94>)
 8003638:	f003 ff0c 	bl	8007454 <HAL_TIM_Base_Init>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8003642:	f7ff fda5 	bl	8003190 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003646:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800364a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800364c:	f107 0308 	add.w	r3, r7, #8
 8003650:	4619      	mov	r1, r3
 8003652:	480d      	ldr	r0, [pc, #52]	; (8003688 <MX_TIM3_Init+0x94>)
 8003654:	f004 f9de 	bl	8007a14 <HAL_TIM_ConfigClockSource>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800365e:	f7ff fd97 	bl	8003190 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003662:	2320      	movs	r3, #32
 8003664:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003666:	2300      	movs	r3, #0
 8003668:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800366a:	463b      	mov	r3, r7
 800366c:	4619      	mov	r1, r3
 800366e:	4806      	ldr	r0, [pc, #24]	; (8003688 <MX_TIM3_Init+0x94>)
 8003670:	f004 fe60 	bl	8008334 <HAL_TIMEx_MasterConfigSynchronization>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d001      	beq.n	800367e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800367a:	f7ff fd89 	bl	8003190 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800367e:	bf00      	nop
 8003680:	3718      	adds	r7, #24
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	20007ca8 	.word	0x20007ca8
 800368c:	40000400 	.word	0x40000400

08003690 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003696:	f107 0308 	add.w	r3, r7, #8
 800369a:	2200      	movs	r2, #0
 800369c:	601a      	str	r2, [r3, #0]
 800369e:	605a      	str	r2, [r3, #4]
 80036a0:	609a      	str	r2, [r3, #8]
 80036a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036a4:	463b      	mov	r3, r7
 80036a6:	2200      	movs	r2, #0
 80036a8:	601a      	str	r2, [r3, #0]
 80036aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80036ac:	4b1d      	ldr	r3, [pc, #116]	; (8003724 <MX_TIM5_Init+0x94>)
 80036ae:	4a1e      	ldr	r2, [pc, #120]	; (8003728 <MX_TIM5_Init+0x98>)
 80036b0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 7199;
 80036b2:	4b1c      	ldr	r3, [pc, #112]	; (8003724 <MX_TIM5_Init+0x94>)
 80036b4:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80036b8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036ba:	4b1a      	ldr	r3, [pc, #104]	; (8003724 <MX_TIM5_Init+0x94>)
 80036bc:	2200      	movs	r2, #0
 80036be:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80036c0:	4b18      	ldr	r3, [pc, #96]	; (8003724 <MX_TIM5_Init+0x94>)
 80036c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036c6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036c8:	4b16      	ldr	r3, [pc, #88]	; (8003724 <MX_TIM5_Init+0x94>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036ce:	4b15      	ldr	r3, [pc, #84]	; (8003724 <MX_TIM5_Init+0x94>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80036d4:	4813      	ldr	r0, [pc, #76]	; (8003724 <MX_TIM5_Init+0x94>)
 80036d6:	f003 febd 	bl	8007454 <HAL_TIM_Base_Init>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d001      	beq.n	80036e4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80036e0:	f7ff fd56 	bl	8003190 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80036ea:	f107 0308 	add.w	r3, r7, #8
 80036ee:	4619      	mov	r1, r3
 80036f0:	480c      	ldr	r0, [pc, #48]	; (8003724 <MX_TIM5_Init+0x94>)
 80036f2:	f004 f98f 	bl	8007a14 <HAL_TIM_ConfigClockSource>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d001      	beq.n	8003700 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80036fc:	f7ff fd48 	bl	8003190 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003700:	2300      	movs	r3, #0
 8003702:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003704:	2300      	movs	r3, #0
 8003706:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003708:	463b      	mov	r3, r7
 800370a:	4619      	mov	r1, r3
 800370c:	4805      	ldr	r0, [pc, #20]	; (8003724 <MX_TIM5_Init+0x94>)
 800370e:	f004 fe11 	bl	8008334 <HAL_TIMEx_MasterConfigSynchronization>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d001      	beq.n	800371c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8003718:	f7ff fd3a 	bl	8003190 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800371c:	bf00      	nop
 800371e:	3718      	adds	r7, #24
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	20007c60 	.word	0x20007c60
 8003728:	40000c00 	.word	0x40000c00

0800372c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b096      	sub	sp, #88	; 0x58
 8003730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003732:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003736:	2200      	movs	r2, #0
 8003738:	601a      	str	r2, [r3, #0]
 800373a:	605a      	str	r2, [r3, #4]
 800373c:	609a      	str	r2, [r3, #8]
 800373e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003740:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003744:	2200      	movs	r2, #0
 8003746:	601a      	str	r2, [r3, #0]
 8003748:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800374a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800374e:	2200      	movs	r2, #0
 8003750:	601a      	str	r2, [r3, #0]
 8003752:	605a      	str	r2, [r3, #4]
 8003754:	609a      	str	r2, [r3, #8]
 8003756:	60da      	str	r2, [r3, #12]
 8003758:	611a      	str	r2, [r3, #16]
 800375a:	615a      	str	r2, [r3, #20]
 800375c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800375e:	1d3b      	adds	r3, r7, #4
 8003760:	2220      	movs	r2, #32
 8003762:	2100      	movs	r1, #0
 8003764:	4618      	mov	r0, r3
 8003766:	f008 f941 	bl	800b9ec <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800376a:	4b4b      	ldr	r3, [pc, #300]	; (8003898 <MX_TIM8_Init+0x16c>)
 800376c:	4a4b      	ldr	r2, [pc, #300]	; (800389c <MX_TIM8_Init+0x170>)
 800376e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003770:	4b49      	ldr	r3, [pc, #292]	; (8003898 <MX_TIM8_Init+0x16c>)
 8003772:	2200      	movs	r2, #0
 8003774:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003776:	4b48      	ldr	r3, [pc, #288]	; (8003898 <MX_TIM8_Init+0x16c>)
 8003778:	2200      	movs	r2, #0
 800377a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 255;
 800377c:	4b46      	ldr	r3, [pc, #280]	; (8003898 <MX_TIM8_Init+0x16c>)
 800377e:	22ff      	movs	r2, #255	; 0xff
 8003780:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003782:	4b45      	ldr	r3, [pc, #276]	; (8003898 <MX_TIM8_Init+0x16c>)
 8003784:	2200      	movs	r2, #0
 8003786:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003788:	4b43      	ldr	r3, [pc, #268]	; (8003898 <MX_TIM8_Init+0x16c>)
 800378a:	2200      	movs	r2, #0
 800378c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800378e:	4b42      	ldr	r3, [pc, #264]	; (8003898 <MX_TIM8_Init+0x16c>)
 8003790:	2200      	movs	r2, #0
 8003792:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003794:	4840      	ldr	r0, [pc, #256]	; (8003898 <MX_TIM8_Init+0x16c>)
 8003796:	f003 fe5d 	bl	8007454 <HAL_TIM_Base_Init>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 80037a0:	f7ff fcf6 	bl	8003190 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80037a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037a8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80037aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80037ae:	4619      	mov	r1, r3
 80037b0:	4839      	ldr	r0, [pc, #228]	; (8003898 <MX_TIM8_Init+0x16c>)
 80037b2:	f004 f92f 	bl	8007a14 <HAL_TIM_ConfigClockSource>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d001      	beq.n	80037c0 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 80037bc:	f7ff fce8 	bl	8003190 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80037c0:	4835      	ldr	r0, [pc, #212]	; (8003898 <MX_TIM8_Init+0x16c>)
 80037c2:	f003 ff07 	bl	80075d4 <HAL_TIM_PWM_Init>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d001      	beq.n	80037d0 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80037cc:	f7ff fce0 	bl	8003190 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037d0:	2300      	movs	r3, #0
 80037d2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037d4:	2300      	movs	r3, #0
 80037d6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80037d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80037dc:	4619      	mov	r1, r3
 80037de:	482e      	ldr	r0, [pc, #184]	; (8003898 <MX_TIM8_Init+0x16c>)
 80037e0:	f004 fda8 	bl	8008334 <HAL_TIMEx_MasterConfigSynchronization>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d001      	beq.n	80037ee <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 80037ea:	f7ff fcd1 	bl	8003190 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80037ee:	2360      	movs	r3, #96	; 0x60
 80037f0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 128;
 80037f2:	2380      	movs	r3, #128	; 0x80
 80037f4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80037f6:	2300      	movs	r3, #0
 80037f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 80037fa:	2308      	movs	r3, #8
 80037fc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80037fe:	2300      	movs	r3, #0
 8003800:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003802:	2300      	movs	r3, #0
 8003804:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003806:	2300      	movs	r3, #0
 8003808:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800380a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800380e:	2200      	movs	r2, #0
 8003810:	4619      	mov	r1, r3
 8003812:	4821      	ldr	r0, [pc, #132]	; (8003898 <MX_TIM8_Init+0x16c>)
 8003814:	f004 f840 	bl	8007898 <HAL_TIM_PWM_ConfigChannel>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d001      	beq.n	8003822 <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 800381e:	f7ff fcb7 	bl	8003190 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003822:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003826:	2204      	movs	r2, #4
 8003828:	4619      	mov	r1, r3
 800382a:	481b      	ldr	r0, [pc, #108]	; (8003898 <MX_TIM8_Init+0x16c>)
 800382c:	f004 f834 	bl	8007898 <HAL_TIM_PWM_ConfigChannel>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d001      	beq.n	800383a <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 8003836:	f7ff fcab 	bl	8003190 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800383a:	2300      	movs	r3, #0
 800383c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800383e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003842:	2208      	movs	r2, #8
 8003844:	4619      	mov	r1, r3
 8003846:	4814      	ldr	r0, [pc, #80]	; (8003898 <MX_TIM8_Init+0x16c>)
 8003848:	f004 f826 	bl	8007898 <HAL_TIM_PWM_ConfigChannel>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 8003852:	f7ff fc9d 	bl	8003190 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003856:	2300      	movs	r3, #0
 8003858:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800385a:	2300      	movs	r3, #0
 800385c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800385e:	2300      	movs	r3, #0
 8003860:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003862:	2300      	movs	r3, #0
 8003864:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003866:	2300      	movs	r3, #0
 8003868:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800386a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800386e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003870:	2300      	movs	r3, #0
 8003872:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003874:	1d3b      	adds	r3, r7, #4
 8003876:	4619      	mov	r1, r3
 8003878:	4807      	ldr	r0, [pc, #28]	; (8003898 <MX_TIM8_Init+0x16c>)
 800387a:	f004 fdd7 	bl	800842c <HAL_TIMEx_ConfigBreakDeadTime>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d001      	beq.n	8003888 <MX_TIM8_Init+0x15c>
  {
    Error_Handler();
 8003884:	f7ff fc84 	bl	8003190 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003888:	4803      	ldr	r0, [pc, #12]	; (8003898 <MX_TIM8_Init+0x16c>)
 800388a:	f000 f891 	bl	80039b0 <HAL_TIM_MspPostInit>

}
 800388e:	bf00      	nop
 8003890:	3758      	adds	r7, #88	; 0x58
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	20007c18 	.word	0x20007c18
 800389c:	40010400 	.word	0x40010400

080038a0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b08c      	sub	sp, #48	; 0x30
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038a8:	f107 031c 	add.w	r3, r7, #28
 80038ac:	2200      	movs	r2, #0
 80038ae:	601a      	str	r2, [r3, #0]
 80038b0:	605a      	str	r2, [r3, #4]
 80038b2:	609a      	str	r2, [r3, #8]
 80038b4:	60da      	str	r2, [r3, #12]
 80038b6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038c0:	d10e      	bne.n	80038e0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80038c2:	2300      	movs	r3, #0
 80038c4:	61bb      	str	r3, [r7, #24]
 80038c6:	4b35      	ldr	r3, [pc, #212]	; (800399c <HAL_TIM_Base_MspInit+0xfc>)
 80038c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ca:	4a34      	ldr	r2, [pc, #208]	; (800399c <HAL_TIM_Base_MspInit+0xfc>)
 80038cc:	f043 0301 	orr.w	r3, r3, #1
 80038d0:	6413      	str	r3, [r2, #64]	; 0x40
 80038d2:	4b32      	ldr	r3, [pc, #200]	; (800399c <HAL_TIM_Base_MspInit+0xfc>)
 80038d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	61bb      	str	r3, [r7, #24]
 80038dc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80038de:	e058      	b.n	8003992 <HAL_TIM_Base_MspInit+0xf2>
  else if(tim_baseHandle->Instance==TIM3)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a2e      	ldr	r2, [pc, #184]	; (80039a0 <HAL_TIM_Base_MspInit+0x100>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d10e      	bne.n	8003908 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80038ea:	2300      	movs	r3, #0
 80038ec:	617b      	str	r3, [r7, #20]
 80038ee:	4b2b      	ldr	r3, [pc, #172]	; (800399c <HAL_TIM_Base_MspInit+0xfc>)
 80038f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f2:	4a2a      	ldr	r2, [pc, #168]	; (800399c <HAL_TIM_Base_MspInit+0xfc>)
 80038f4:	f043 0302 	orr.w	r3, r3, #2
 80038f8:	6413      	str	r3, [r2, #64]	; 0x40
 80038fa:	4b28      	ldr	r3, [pc, #160]	; (800399c <HAL_TIM_Base_MspInit+0xfc>)
 80038fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	617b      	str	r3, [r7, #20]
 8003904:	697b      	ldr	r3, [r7, #20]
}
 8003906:	e044      	b.n	8003992 <HAL_TIM_Base_MspInit+0xf2>
  else if(tim_baseHandle->Instance==TIM5)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a25      	ldr	r2, [pc, #148]	; (80039a4 <HAL_TIM_Base_MspInit+0x104>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d12c      	bne.n	800396c <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003912:	2300      	movs	r3, #0
 8003914:	613b      	str	r3, [r7, #16]
 8003916:	4b21      	ldr	r3, [pc, #132]	; (800399c <HAL_TIM_Base_MspInit+0xfc>)
 8003918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391a:	4a20      	ldr	r2, [pc, #128]	; (800399c <HAL_TIM_Base_MspInit+0xfc>)
 800391c:	f043 0308 	orr.w	r3, r3, #8
 8003920:	6413      	str	r3, [r2, #64]	; 0x40
 8003922:	4b1e      	ldr	r3, [pc, #120]	; (800399c <HAL_TIM_Base_MspInit+0xfc>)
 8003924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003926:	f003 0308 	and.w	r3, r3, #8
 800392a:	613b      	str	r3, [r7, #16]
 800392c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800392e:	2300      	movs	r3, #0
 8003930:	60fb      	str	r3, [r7, #12]
 8003932:	4b1a      	ldr	r3, [pc, #104]	; (800399c <HAL_TIM_Base_MspInit+0xfc>)
 8003934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003936:	4a19      	ldr	r2, [pc, #100]	; (800399c <HAL_TIM_Base_MspInit+0xfc>)
 8003938:	f043 0301 	orr.w	r3, r3, #1
 800393c:	6313      	str	r3, [r2, #48]	; 0x30
 800393e:	4b17      	ldr	r3, [pc, #92]	; (800399c <HAL_TIM_Base_MspInit+0xfc>)
 8003940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	60fb      	str	r3, [r7, #12]
 8003948:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800394a:	230f      	movs	r3, #15
 800394c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800394e:	2302      	movs	r3, #2
 8003950:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003952:	2300      	movs	r3, #0
 8003954:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003956:	2300      	movs	r3, #0
 8003958:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800395a:	2302      	movs	r3, #2
 800395c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800395e:	f107 031c 	add.w	r3, r7, #28
 8003962:	4619      	mov	r1, r3
 8003964:	4810      	ldr	r0, [pc, #64]	; (80039a8 <HAL_TIM_Base_MspInit+0x108>)
 8003966:	f001 ff1f 	bl	80057a8 <HAL_GPIO_Init>
}
 800396a:	e012      	b.n	8003992 <HAL_TIM_Base_MspInit+0xf2>
  else if(tim_baseHandle->Instance==TIM8)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a0e      	ldr	r2, [pc, #56]	; (80039ac <HAL_TIM_Base_MspInit+0x10c>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d10d      	bne.n	8003992 <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003976:	2300      	movs	r3, #0
 8003978:	60bb      	str	r3, [r7, #8]
 800397a:	4b08      	ldr	r3, [pc, #32]	; (800399c <HAL_TIM_Base_MspInit+0xfc>)
 800397c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397e:	4a07      	ldr	r2, [pc, #28]	; (800399c <HAL_TIM_Base_MspInit+0xfc>)
 8003980:	f043 0302 	orr.w	r3, r3, #2
 8003984:	6453      	str	r3, [r2, #68]	; 0x44
 8003986:	4b05      	ldr	r3, [pc, #20]	; (800399c <HAL_TIM_Base_MspInit+0xfc>)
 8003988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	60bb      	str	r3, [r7, #8]
 8003990:	68bb      	ldr	r3, [r7, #8]
}
 8003992:	bf00      	nop
 8003994:	3730      	adds	r7, #48	; 0x30
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	40023800 	.word	0x40023800
 80039a0:	40000400 	.word	0x40000400
 80039a4:	40000c00 	.word	0x40000c00
 80039a8:	40020000 	.word	0x40020000
 80039ac:	40010400 	.word	0x40010400

080039b0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b08a      	sub	sp, #40	; 0x28
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039b8:	f107 0314 	add.w	r3, r7, #20
 80039bc:	2200      	movs	r2, #0
 80039be:	601a      	str	r2, [r3, #0]
 80039c0:	605a      	str	r2, [r3, #4]
 80039c2:	609a      	str	r2, [r3, #8]
 80039c4:	60da      	str	r2, [r3, #12]
 80039c6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a21      	ldr	r2, [pc, #132]	; (8003a54 <HAL_TIM_MspPostInit+0xa4>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d13c      	bne.n	8003a4c <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039d2:	2300      	movs	r3, #0
 80039d4:	613b      	str	r3, [r7, #16]
 80039d6:	4b20      	ldr	r3, [pc, #128]	; (8003a58 <HAL_TIM_MspPostInit+0xa8>)
 80039d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039da:	4a1f      	ldr	r2, [pc, #124]	; (8003a58 <HAL_TIM_MspPostInit+0xa8>)
 80039dc:	f043 0301 	orr.w	r3, r3, #1
 80039e0:	6313      	str	r3, [r2, #48]	; 0x30
 80039e2:	4b1d      	ldr	r3, [pc, #116]	; (8003a58 <HAL_TIM_MspPostInit+0xa8>)
 80039e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	613b      	str	r3, [r7, #16]
 80039ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039ee:	2300      	movs	r3, #0
 80039f0:	60fb      	str	r3, [r7, #12]
 80039f2:	4b19      	ldr	r3, [pc, #100]	; (8003a58 <HAL_TIM_MspPostInit+0xa8>)
 80039f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f6:	4a18      	ldr	r2, [pc, #96]	; (8003a58 <HAL_TIM_MspPostInit+0xa8>)
 80039f8:	f043 0302 	orr.w	r3, r3, #2
 80039fc:	6313      	str	r3, [r2, #48]	; 0x30
 80039fe:	4b16      	ldr	r3, [pc, #88]	; (8003a58 <HAL_TIM_MspPostInit+0xa8>)
 8003a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	60fb      	str	r3, [r7, #12]
 8003a08:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PA7     ------> TIM8_CH1N
    PB14     ------> TIM8_CH2N
    PB15     ------> TIM8_CH3N
    */
    GPIO_InitStruct.Pin = LED_RED_Pin;
 8003a0a:	2380      	movs	r3, #128	; 0x80
 8003a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a0e:	2302      	movs	r3, #2
 8003a10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a12:	2300      	movs	r3, #0
 8003a14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a16:	2300      	movs	r3, #0
 8003a18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8003a1e:	f107 0314 	add.w	r3, r7, #20
 8003a22:	4619      	mov	r1, r3
 8003a24:	480d      	ldr	r0, [pc, #52]	; (8003a5c <HAL_TIM_MspPostInit+0xac>)
 8003a26:	f001 febf 	bl	80057a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_BLUE_Pin;
 8003a2a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003a2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a30:	2302      	movs	r3, #2
 8003a32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a34:	2300      	movs	r3, #0
 8003a36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a40:	f107 0314 	add.w	r3, r7, #20
 8003a44:	4619      	mov	r1, r3
 8003a46:	4806      	ldr	r0, [pc, #24]	; (8003a60 <HAL_TIM_MspPostInit+0xb0>)
 8003a48:	f001 feae 	bl	80057a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003a4c:	bf00      	nop
 8003a4e:	3728      	adds	r7, #40	; 0x28
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	40010400 	.word	0x40010400
 8003a58:	40023800 	.word	0x40023800
 8003a5c:	40020000 	.word	0x40020000
 8003a60:	40020400 	.word	0x40020400

08003a64 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003a68:	4b11      	ldr	r3, [pc, #68]	; (8003ab0 <MX_USART1_UART_Init+0x4c>)
 8003a6a:	4a12      	ldr	r2, [pc, #72]	; (8003ab4 <MX_USART1_UART_Init+0x50>)
 8003a6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003a6e:	4b10      	ldr	r3, [pc, #64]	; (8003ab0 <MX_USART1_UART_Init+0x4c>)
 8003a70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003a74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003a76:	4b0e      	ldr	r3, [pc, #56]	; (8003ab0 <MX_USART1_UART_Init+0x4c>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003a7c:	4b0c      	ldr	r3, [pc, #48]	; (8003ab0 <MX_USART1_UART_Init+0x4c>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003a82:	4b0b      	ldr	r3, [pc, #44]	; (8003ab0 <MX_USART1_UART_Init+0x4c>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003a88:	4b09      	ldr	r3, [pc, #36]	; (8003ab0 <MX_USART1_UART_Init+0x4c>)
 8003a8a:	220c      	movs	r2, #12
 8003a8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a8e:	4b08      	ldr	r3, [pc, #32]	; (8003ab0 <MX_USART1_UART_Init+0x4c>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a94:	4b06      	ldr	r3, [pc, #24]	; (8003ab0 <MX_USART1_UART_Init+0x4c>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8003a9a:	4805      	ldr	r0, [pc, #20]	; (8003ab0 <MX_USART1_UART_Init+0x4c>)
 8003a9c:	f004 fd9e 	bl	80085dc <HAL_HalfDuplex_Init>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003aa6:	f7ff fb73 	bl	8003190 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003aaa:	bf00      	nop
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	20007fbc 	.word	0x20007fbc
 8003ab4:	40011000 	.word	0x40011000

08003ab8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003abc:	4b11      	ldr	r3, [pc, #68]	; (8003b04 <MX_USART3_UART_Init+0x4c>)
 8003abe:	4a12      	ldr	r2, [pc, #72]	; (8003b08 <MX_USART3_UART_Init+0x50>)
 8003ac0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003ac2:	4b10      	ldr	r3, [pc, #64]	; (8003b04 <MX_USART3_UART_Init+0x4c>)
 8003ac4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003ac8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003aca:	4b0e      	ldr	r3, [pc, #56]	; (8003b04 <MX_USART3_UART_Init+0x4c>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003ad0:	4b0c      	ldr	r3, [pc, #48]	; (8003b04 <MX_USART3_UART_Init+0x4c>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003ad6:	4b0b      	ldr	r3, [pc, #44]	; (8003b04 <MX_USART3_UART_Init+0x4c>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003adc:	4b09      	ldr	r3, [pc, #36]	; (8003b04 <MX_USART3_UART_Init+0x4c>)
 8003ade:	220c      	movs	r2, #12
 8003ae0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ae2:	4b08      	ldr	r3, [pc, #32]	; (8003b04 <MX_USART3_UART_Init+0x4c>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ae8:	4b06      	ldr	r3, [pc, #24]	; (8003b04 <MX_USART3_UART_Init+0x4c>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003aee:	4805      	ldr	r0, [pc, #20]	; (8003b04 <MX_USART3_UART_Init+0x4c>)
 8003af0:	f004 fd27 	bl	8008542 <HAL_UART_Init>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003afa:	f7ff fb49 	bl	8003190 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003afe:	bf00      	nop
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	20007df8 	.word	0x20007df8
 8003b08:	40004800 	.word	0x40004800

08003b0c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003b10:	4b11      	ldr	r3, [pc, #68]	; (8003b58 <MX_USART6_UART_Init+0x4c>)
 8003b12:	4a12      	ldr	r2, [pc, #72]	; (8003b5c <MX_USART6_UART_Init+0x50>)
 8003b14:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8003b16:	4b10      	ldr	r3, [pc, #64]	; (8003b58 <MX_USART6_UART_Init+0x4c>)
 8003b18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003b1c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003b1e:	4b0e      	ldr	r3, [pc, #56]	; (8003b58 <MX_USART6_UART_Init+0x4c>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003b24:	4b0c      	ldr	r3, [pc, #48]	; (8003b58 <MX_USART6_UART_Init+0x4c>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003b2a:	4b0b      	ldr	r3, [pc, #44]	; (8003b58 <MX_USART6_UART_Init+0x4c>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003b30:	4b09      	ldr	r3, [pc, #36]	; (8003b58 <MX_USART6_UART_Init+0x4c>)
 8003b32:	220c      	movs	r2, #12
 8003b34:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b36:	4b08      	ldr	r3, [pc, #32]	; (8003b58 <MX_USART6_UART_Init+0x4c>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b3c:	4b06      	ldr	r3, [pc, #24]	; (8003b58 <MX_USART6_UART_Init+0x4c>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003b42:	4805      	ldr	r0, [pc, #20]	; (8003b58 <MX_USART6_UART_Init+0x4c>)
 8003b44:	f004 fcfd 	bl	8008542 <HAL_UART_Init>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d001      	beq.n	8003b52 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003b4e:	f7ff fb1f 	bl	8003190 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003b52:	bf00      	nop
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	20008000 	.word	0x20008000
 8003b5c:	40011400 	.word	0x40011400

08003b60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b08e      	sub	sp, #56	; 0x38
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	601a      	str	r2, [r3, #0]
 8003b70:	605a      	str	r2, [r3, #4]
 8003b72:	609a      	str	r2, [r3, #8]
 8003b74:	60da      	str	r2, [r3, #12]
 8003b76:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a4b      	ldr	r2, [pc, #300]	; (8003cac <HAL_UART_MspInit+0x14c>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	f040 80a2 	bne.w	8003cc8 <HAL_UART_MspInit+0x168>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003b84:	2300      	movs	r3, #0
 8003b86:	623b      	str	r3, [r7, #32]
 8003b88:	4b49      	ldr	r3, [pc, #292]	; (8003cb0 <HAL_UART_MspInit+0x150>)
 8003b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8c:	4a48      	ldr	r2, [pc, #288]	; (8003cb0 <HAL_UART_MspInit+0x150>)
 8003b8e:	f043 0310 	orr.w	r3, r3, #16
 8003b92:	6453      	str	r3, [r2, #68]	; 0x44
 8003b94:	4b46      	ldr	r3, [pc, #280]	; (8003cb0 <HAL_UART_MspInit+0x150>)
 8003b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b98:	f003 0310 	and.w	r3, r3, #16
 8003b9c:	623b      	str	r3, [r7, #32]
 8003b9e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	61fb      	str	r3, [r7, #28]
 8003ba4:	4b42      	ldr	r3, [pc, #264]	; (8003cb0 <HAL_UART_MspInit+0x150>)
 8003ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba8:	4a41      	ldr	r2, [pc, #260]	; (8003cb0 <HAL_UART_MspInit+0x150>)
 8003baa:	f043 0301 	orr.w	r3, r3, #1
 8003bae:	6313      	str	r3, [r2, #48]	; 0x30
 8003bb0:	4b3f      	ldr	r3, [pc, #252]	; (8003cb0 <HAL_UART_MspInit+0x150>)
 8003bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb4:	f003 0301 	and.w	r3, r3, #1
 8003bb8:	61fb      	str	r3, [r7, #28]
 8003bba:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = SERVO_TX_Pin;
 8003bbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003bc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003bc2:	2312      	movs	r3, #18
 8003bc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003bce:	2307      	movs	r3, #7
 8003bd0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SERVO_TX_GPIO_Port, &GPIO_InitStruct);
 8003bd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	4836      	ldr	r0, [pc, #216]	; (8003cb4 <HAL_UART_MspInit+0x154>)
 8003bda:	f001 fde5 	bl	80057a8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 8003bde:	4b36      	ldr	r3, [pc, #216]	; (8003cb8 <HAL_UART_MspInit+0x158>)
 8003be0:	4a36      	ldr	r2, [pc, #216]	; (8003cbc <HAL_UART_MspInit+0x15c>)
 8003be2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003be4:	4b34      	ldr	r3, [pc, #208]	; (8003cb8 <HAL_UART_MspInit+0x158>)
 8003be6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003bea:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003bec:	4b32      	ldr	r3, [pc, #200]	; (8003cb8 <HAL_UART_MspInit+0x158>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003bf2:	4b31      	ldr	r3, [pc, #196]	; (8003cb8 <HAL_UART_MspInit+0x158>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003bf8:	4b2f      	ldr	r3, [pc, #188]	; (8003cb8 <HAL_UART_MspInit+0x158>)
 8003bfa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003bfe:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c00:	4b2d      	ldr	r3, [pc, #180]	; (8003cb8 <HAL_UART_MspInit+0x158>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c06:	4b2c      	ldr	r3, [pc, #176]	; (8003cb8 <HAL_UART_MspInit+0x158>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003c0c:	4b2a      	ldr	r3, [pc, #168]	; (8003cb8 <HAL_UART_MspInit+0x158>)
 8003c0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c12:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003c14:	4b28      	ldr	r3, [pc, #160]	; (8003cb8 <HAL_UART_MspInit+0x158>)
 8003c16:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003c1a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c1c:	4b26      	ldr	r3, [pc, #152]	; (8003cb8 <HAL_UART_MspInit+0x158>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003c22:	4825      	ldr	r0, [pc, #148]	; (8003cb8 <HAL_UART_MspInit+0x158>)
 8003c24:	f001 f9be 	bl	8004fa4 <HAL_DMA_Init>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d001      	beq.n	8003c32 <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 8003c2e:	f7ff faaf 	bl	8003190 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a20      	ldr	r2, [pc, #128]	; (8003cb8 <HAL_UART_MspInit+0x158>)
 8003c36:	639a      	str	r2, [r3, #56]	; 0x38
 8003c38:	4a1f      	ldr	r2, [pc, #124]	; (8003cb8 <HAL_UART_MspInit+0x158>)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8003c3e:	4b20      	ldr	r3, [pc, #128]	; (8003cc0 <HAL_UART_MspInit+0x160>)
 8003c40:	4a20      	ldr	r2, [pc, #128]	; (8003cc4 <HAL_UART_MspInit+0x164>)
 8003c42:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8003c44:	4b1e      	ldr	r3, [pc, #120]	; (8003cc0 <HAL_UART_MspInit+0x160>)
 8003c46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003c4a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c4c:	4b1c      	ldr	r3, [pc, #112]	; (8003cc0 <HAL_UART_MspInit+0x160>)
 8003c4e:	2240      	movs	r2, #64	; 0x40
 8003c50:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c52:	4b1b      	ldr	r3, [pc, #108]	; (8003cc0 <HAL_UART_MspInit+0x160>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003c58:	4b19      	ldr	r3, [pc, #100]	; (8003cc0 <HAL_UART_MspInit+0x160>)
 8003c5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c5e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c60:	4b17      	ldr	r3, [pc, #92]	; (8003cc0 <HAL_UART_MspInit+0x160>)
 8003c62:	2200      	movs	r2, #0
 8003c64:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c66:	4b16      	ldr	r3, [pc, #88]	; (8003cc0 <HAL_UART_MspInit+0x160>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003c6c:	4b14      	ldr	r3, [pc, #80]	; (8003cc0 <HAL_UART_MspInit+0x160>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003c72:	4b13      	ldr	r3, [pc, #76]	; (8003cc0 <HAL_UART_MspInit+0x160>)
 8003c74:	2200      	movs	r2, #0
 8003c76:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c78:	4b11      	ldr	r3, [pc, #68]	; (8003cc0 <HAL_UART_MspInit+0x160>)
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003c7e:	4810      	ldr	r0, [pc, #64]	; (8003cc0 <HAL_UART_MspInit+0x160>)
 8003c80:	f001 f990 	bl	8004fa4 <HAL_DMA_Init>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d001      	beq.n	8003c8e <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8003c8a:	f7ff fa81 	bl	8003190 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a0b      	ldr	r2, [pc, #44]	; (8003cc0 <HAL_UART_MspInit+0x160>)
 8003c92:	635a      	str	r2, [r3, #52]	; 0x34
 8003c94:	4a0a      	ldr	r2, [pc, #40]	; (8003cc0 <HAL_UART_MspInit+0x160>)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	2105      	movs	r1, #5
 8003c9e:	2025      	movs	r0, #37	; 0x25
 8003ca0:	f001 f956 	bl	8004f50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003ca4:	2025      	movs	r0, #37	; 0x25
 8003ca6:	f001 f96f 	bl	8004f88 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8003caa:	e16d      	b.n	8003f88 <HAL_UART_MspInit+0x428>
 8003cac:	40011000 	.word	0x40011000
 8003cb0:	40023800 	.word	0x40023800
 8003cb4:	40020000 	.word	0x40020000
 8003cb8:	20007f5c 	.word	0x20007f5c
 8003cbc:	40026488 	.word	0x40026488
 8003cc0:	20007e9c 	.word	0x20007e9c
 8003cc4:	400264b8 	.word	0x400264b8
  else if(uartHandle->Instance==USART3)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a5a      	ldr	r2, [pc, #360]	; (8003e38 <HAL_UART_MspInit+0x2d8>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	f040 80c2 	bne.w	8003e58 <HAL_UART_MspInit+0x2f8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	61bb      	str	r3, [r7, #24]
 8003cd8:	4b58      	ldr	r3, [pc, #352]	; (8003e3c <HAL_UART_MspInit+0x2dc>)
 8003cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cdc:	4a57      	ldr	r2, [pc, #348]	; (8003e3c <HAL_UART_MspInit+0x2dc>)
 8003cde:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ce2:	6413      	str	r3, [r2, #64]	; 0x40
 8003ce4:	4b55      	ldr	r3, [pc, #340]	; (8003e3c <HAL_UART_MspInit+0x2dc>)
 8003ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cec:	61bb      	str	r3, [r7, #24]
 8003cee:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	617b      	str	r3, [r7, #20]
 8003cf4:	4b51      	ldr	r3, [pc, #324]	; (8003e3c <HAL_UART_MspInit+0x2dc>)
 8003cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf8:	4a50      	ldr	r2, [pc, #320]	; (8003e3c <HAL_UART_MspInit+0x2dc>)
 8003cfa:	f043 0304 	orr.w	r3, r3, #4
 8003cfe:	6313      	str	r3, [r2, #48]	; 0x30
 8003d00:	4b4e      	ldr	r3, [pc, #312]	; (8003e3c <HAL_UART_MspInit+0x2dc>)
 8003d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d04:	f003 0304 	and.w	r3, r3, #4
 8003d08:	617b      	str	r3, [r7, #20]
 8003d0a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	613b      	str	r3, [r7, #16]
 8003d10:	4b4a      	ldr	r3, [pc, #296]	; (8003e3c <HAL_UART_MspInit+0x2dc>)
 8003d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d14:	4a49      	ldr	r2, [pc, #292]	; (8003e3c <HAL_UART_MspInit+0x2dc>)
 8003d16:	f043 0302 	orr.w	r3, r3, #2
 8003d1a:	6313      	str	r3, [r2, #48]	; 0x30
 8003d1c:	4b47      	ldr	r3, [pc, #284]	; (8003e3c <HAL_UART_MspInit+0x2dc>)
 8003d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	613b      	str	r3, [r7, #16]
 8003d26:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = DEBUG_RX_Pin;
 8003d28:	2320      	movs	r3, #32
 8003d2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d30:	2300      	movs	r3, #0
 8003d32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d34:	2303      	movs	r3, #3
 8003d36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003d38:	2307      	movs	r3, #7
 8003d3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DEBUG_RX_GPIO_Port, &GPIO_InitStruct);
 8003d3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d40:	4619      	mov	r1, r3
 8003d42:	483f      	ldr	r0, [pc, #252]	; (8003e40 <HAL_UART_MspInit+0x2e0>)
 8003d44:	f001 fd30 	bl	80057a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DEBUG_TX_Pin;
 8003d48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d4e:	2302      	movs	r3, #2
 8003d50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d52:	2300      	movs	r3, #0
 8003d54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d56:	2303      	movs	r3, #3
 8003d58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003d5a:	2307      	movs	r3, #7
 8003d5c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DEBUG_TX_GPIO_Port, &GPIO_InitStruct);
 8003d5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d62:	4619      	mov	r1, r3
 8003d64:	4837      	ldr	r0, [pc, #220]	; (8003e44 <HAL_UART_MspInit+0x2e4>)
 8003d66:	f001 fd1f 	bl	80057a8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003d6a:	4b37      	ldr	r3, [pc, #220]	; (8003e48 <HAL_UART_MspInit+0x2e8>)
 8003d6c:	4a37      	ldr	r2, [pc, #220]	; (8003e4c <HAL_UART_MspInit+0x2ec>)
 8003d6e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003d70:	4b35      	ldr	r3, [pc, #212]	; (8003e48 <HAL_UART_MspInit+0x2e8>)
 8003d72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d76:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d78:	4b33      	ldr	r3, [pc, #204]	; (8003e48 <HAL_UART_MspInit+0x2e8>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d7e:	4b32      	ldr	r3, [pc, #200]	; (8003e48 <HAL_UART_MspInit+0x2e8>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003d84:	4b30      	ldr	r3, [pc, #192]	; (8003e48 <HAL_UART_MspInit+0x2e8>)
 8003d86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d8a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d8c:	4b2e      	ldr	r3, [pc, #184]	; (8003e48 <HAL_UART_MspInit+0x2e8>)
 8003d8e:	2200      	movs	r2, #0
 8003d90:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d92:	4b2d      	ldr	r3, [pc, #180]	; (8003e48 <HAL_UART_MspInit+0x2e8>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8003d98:	4b2b      	ldr	r3, [pc, #172]	; (8003e48 <HAL_UART_MspInit+0x2e8>)
 8003d9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d9e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003da0:	4b29      	ldr	r3, [pc, #164]	; (8003e48 <HAL_UART_MspInit+0x2e8>)
 8003da2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003da6:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003da8:	4b27      	ldr	r3, [pc, #156]	; (8003e48 <HAL_UART_MspInit+0x2e8>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003dae:	4826      	ldr	r0, [pc, #152]	; (8003e48 <HAL_UART_MspInit+0x2e8>)
 8003db0:	f001 f8f8 	bl	8004fa4 <HAL_DMA_Init>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d001      	beq.n	8003dbe <HAL_UART_MspInit+0x25e>
      Error_Handler();
 8003dba:	f7ff f9e9 	bl	8003190 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a21      	ldr	r2, [pc, #132]	; (8003e48 <HAL_UART_MspInit+0x2e8>)
 8003dc2:	639a      	str	r2, [r3, #56]	; 0x38
 8003dc4:	4a20      	ldr	r2, [pc, #128]	; (8003e48 <HAL_UART_MspInit+0x2e8>)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8003dca:	4b21      	ldr	r3, [pc, #132]	; (8003e50 <HAL_UART_MspInit+0x2f0>)
 8003dcc:	4a21      	ldr	r2, [pc, #132]	; (8003e54 <HAL_UART_MspInit+0x2f4>)
 8003dce:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8003dd0:	4b1f      	ldr	r3, [pc, #124]	; (8003e50 <HAL_UART_MspInit+0x2f0>)
 8003dd2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003dd6:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003dd8:	4b1d      	ldr	r3, [pc, #116]	; (8003e50 <HAL_UART_MspInit+0x2f0>)
 8003dda:	2240      	movs	r2, #64	; 0x40
 8003ddc:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003dde:	4b1c      	ldr	r3, [pc, #112]	; (8003e50 <HAL_UART_MspInit+0x2f0>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003de4:	4b1a      	ldr	r3, [pc, #104]	; (8003e50 <HAL_UART_MspInit+0x2f0>)
 8003de6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003dea:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003dec:	4b18      	ldr	r3, [pc, #96]	; (8003e50 <HAL_UART_MspInit+0x2f0>)
 8003dee:	2200      	movs	r2, #0
 8003df0:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003df2:	4b17      	ldr	r3, [pc, #92]	; (8003e50 <HAL_UART_MspInit+0x2f0>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003df8:	4b15      	ldr	r3, [pc, #84]	; (8003e50 <HAL_UART_MspInit+0x2f0>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003dfe:	4b14      	ldr	r3, [pc, #80]	; (8003e50 <HAL_UART_MspInit+0x2f0>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e04:	4b12      	ldr	r3, [pc, #72]	; (8003e50 <HAL_UART_MspInit+0x2f0>)
 8003e06:	2200      	movs	r2, #0
 8003e08:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003e0a:	4811      	ldr	r0, [pc, #68]	; (8003e50 <HAL_UART_MspInit+0x2f0>)
 8003e0c:	f001 f8ca 	bl	8004fa4 <HAL_DMA_Init>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d001      	beq.n	8003e1a <HAL_UART_MspInit+0x2ba>
      Error_Handler();
 8003e16:	f7ff f9bb 	bl	8003190 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a0c      	ldr	r2, [pc, #48]	; (8003e50 <HAL_UART_MspInit+0x2f0>)
 8003e1e:	635a      	str	r2, [r3, #52]	; 0x34
 8003e20:	4a0b      	ldr	r2, [pc, #44]	; (8003e50 <HAL_UART_MspInit+0x2f0>)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003e26:	2200      	movs	r2, #0
 8003e28:	2105      	movs	r1, #5
 8003e2a:	2027      	movs	r0, #39	; 0x27
 8003e2c:	f001 f890 	bl	8004f50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003e30:	2027      	movs	r0, #39	; 0x27
 8003e32:	f001 f8a9 	bl	8004f88 <HAL_NVIC_EnableIRQ>
}
 8003e36:	e0a7      	b.n	8003f88 <HAL_UART_MspInit+0x428>
 8003e38:	40004800 	.word	0x40004800
 8003e3c:	40023800 	.word	0x40023800
 8003e40:	40020800 	.word	0x40020800
 8003e44:	40020400 	.word	0x40020400
 8003e48:	20007d98 	.word	0x20007d98
 8003e4c:	40026028 	.word	0x40026028
 8003e50:	20007e3c 	.word	0x20007e3c
 8003e54:	40026058 	.word	0x40026058
  else if(uartHandle->Instance==USART6)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a4c      	ldr	r2, [pc, #304]	; (8003f90 <HAL_UART_MspInit+0x430>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	f040 8092 	bne.w	8003f88 <HAL_UART_MspInit+0x428>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003e64:	2300      	movs	r3, #0
 8003e66:	60fb      	str	r3, [r7, #12]
 8003e68:	4b4a      	ldr	r3, [pc, #296]	; (8003f94 <HAL_UART_MspInit+0x434>)
 8003e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e6c:	4a49      	ldr	r2, [pc, #292]	; (8003f94 <HAL_UART_MspInit+0x434>)
 8003e6e:	f043 0320 	orr.w	r3, r3, #32
 8003e72:	6453      	str	r3, [r2, #68]	; 0x44
 8003e74:	4b47      	ldr	r3, [pc, #284]	; (8003f94 <HAL_UART_MspInit+0x434>)
 8003e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e78:	f003 0320 	and.w	r3, r3, #32
 8003e7c:	60fb      	str	r3, [r7, #12]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e80:	2300      	movs	r3, #0
 8003e82:	60bb      	str	r3, [r7, #8]
 8003e84:	4b43      	ldr	r3, [pc, #268]	; (8003f94 <HAL_UART_MspInit+0x434>)
 8003e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e88:	4a42      	ldr	r2, [pc, #264]	; (8003f94 <HAL_UART_MspInit+0x434>)
 8003e8a:	f043 0304 	orr.w	r3, r3, #4
 8003e8e:	6313      	str	r3, [r2, #48]	; 0x30
 8003e90:	4b40      	ldr	r3, [pc, #256]	; (8003f94 <HAL_UART_MspInit+0x434>)
 8003e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e94:	f003 0304 	and.w	r3, r3, #4
 8003e98:	60bb      	str	r3, [r7, #8]
 8003e9a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CM4_TX_Pin|CM4_RX_Pin;
 8003e9c:	23c0      	movs	r3, #192	; 0xc0
 8003e9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003eac:	2308      	movs	r3, #8
 8003eae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003eb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	4838      	ldr	r0, [pc, #224]	; (8003f98 <HAL_UART_MspInit+0x438>)
 8003eb8:	f001 fc76 	bl	80057a8 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream2;
 8003ebc:	4b37      	ldr	r3, [pc, #220]	; (8003f9c <HAL_UART_MspInit+0x43c>)
 8003ebe:	4a38      	ldr	r2, [pc, #224]	; (8003fa0 <HAL_UART_MspInit+0x440>)
 8003ec0:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8003ec2:	4b36      	ldr	r3, [pc, #216]	; (8003f9c <HAL_UART_MspInit+0x43c>)
 8003ec4:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8003ec8:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003eca:	4b34      	ldr	r3, [pc, #208]	; (8003f9c <HAL_UART_MspInit+0x43c>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ed0:	4b32      	ldr	r3, [pc, #200]	; (8003f9c <HAL_UART_MspInit+0x43c>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003ed6:	4b31      	ldr	r3, [pc, #196]	; (8003f9c <HAL_UART_MspInit+0x43c>)
 8003ed8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003edc:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003ede:	4b2f      	ldr	r3, [pc, #188]	; (8003f9c <HAL_UART_MspInit+0x43c>)
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ee4:	4b2d      	ldr	r3, [pc, #180]	; (8003f9c <HAL_UART_MspInit+0x43c>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8003eea:	4b2c      	ldr	r3, [pc, #176]	; (8003f9c <HAL_UART_MspInit+0x43c>)
 8003eec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ef0:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003ef2:	4b2a      	ldr	r3, [pc, #168]	; (8003f9c <HAL_UART_MspInit+0x43c>)
 8003ef4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003ef8:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003efa:	4b28      	ldr	r3, [pc, #160]	; (8003f9c <HAL_UART_MspInit+0x43c>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8003f00:	4826      	ldr	r0, [pc, #152]	; (8003f9c <HAL_UART_MspInit+0x43c>)
 8003f02:	f001 f84f 	bl	8004fa4 <HAL_DMA_Init>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d001      	beq.n	8003f10 <HAL_UART_MspInit+0x3b0>
      Error_Handler();
 8003f0c:	f7ff f940 	bl	8003190 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4a22      	ldr	r2, [pc, #136]	; (8003f9c <HAL_UART_MspInit+0x43c>)
 8003f14:	639a      	str	r2, [r3, #56]	; 0x38
 8003f16:	4a21      	ldr	r2, [pc, #132]	; (8003f9c <HAL_UART_MspInit+0x43c>)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8003f1c:	4b21      	ldr	r3, [pc, #132]	; (8003fa4 <HAL_UART_MspInit+0x444>)
 8003f1e:	4a22      	ldr	r2, [pc, #136]	; (8003fa8 <HAL_UART_MspInit+0x448>)
 8003f20:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8003f22:	4b20      	ldr	r3, [pc, #128]	; (8003fa4 <HAL_UART_MspInit+0x444>)
 8003f24:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8003f28:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003f2a:	4b1e      	ldr	r3, [pc, #120]	; (8003fa4 <HAL_UART_MspInit+0x444>)
 8003f2c:	2240      	movs	r2, #64	; 0x40
 8003f2e:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f30:	4b1c      	ldr	r3, [pc, #112]	; (8003fa4 <HAL_UART_MspInit+0x444>)
 8003f32:	2200      	movs	r2, #0
 8003f34:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003f36:	4b1b      	ldr	r3, [pc, #108]	; (8003fa4 <HAL_UART_MspInit+0x444>)
 8003f38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f3c:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f3e:	4b19      	ldr	r3, [pc, #100]	; (8003fa4 <HAL_UART_MspInit+0x444>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f44:	4b17      	ldr	r3, [pc, #92]	; (8003fa4 <HAL_UART_MspInit+0x444>)
 8003f46:	2200      	movs	r2, #0
 8003f48:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8003f4a:	4b16      	ldr	r3, [pc, #88]	; (8003fa4 <HAL_UART_MspInit+0x444>)
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003f50:	4b14      	ldr	r3, [pc, #80]	; (8003fa4 <HAL_UART_MspInit+0x444>)
 8003f52:	2200      	movs	r2, #0
 8003f54:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f56:	4b13      	ldr	r3, [pc, #76]	; (8003fa4 <HAL_UART_MspInit+0x444>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8003f5c:	4811      	ldr	r0, [pc, #68]	; (8003fa4 <HAL_UART_MspInit+0x444>)
 8003f5e:	f001 f821 	bl	8004fa4 <HAL_DMA_Init>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d001      	beq.n	8003f6c <HAL_UART_MspInit+0x40c>
      Error_Handler();
 8003f68:	f7ff f912 	bl	8003190 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a0d      	ldr	r2, [pc, #52]	; (8003fa4 <HAL_UART_MspInit+0x444>)
 8003f70:	635a      	str	r2, [r3, #52]	; 0x34
 8003f72:	4a0c      	ldr	r2, [pc, #48]	; (8003fa4 <HAL_UART_MspInit+0x444>)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8003f78:	2200      	movs	r2, #0
 8003f7a:	2105      	movs	r1, #5
 8003f7c:	2047      	movs	r0, #71	; 0x47
 8003f7e:	f000 ffe7 	bl	8004f50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003f82:	2047      	movs	r0, #71	; 0x47
 8003f84:	f001 f800 	bl	8004f88 <HAL_NVIC_EnableIRQ>
}
 8003f88:	bf00      	nop
 8003f8a:	3738      	adds	r7, #56	; 0x38
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	40011400 	.word	0x40011400
 8003f94:	40023800 	.word	0x40023800
 8003f98:	40020800 	.word	0x40020800
 8003f9c:	20007d38 	.word	0x20007d38
 8003fa0:	40026440 	.word	0x40026440
 8003fa4:	20007efc 	.word	0x20007efc
 8003fa8:	400264a0 	.word	0x400264a0

08003fac <Reset_Handler>:
 8003fac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003fe4 <LoopFillZerobss+0x14>
 8003fb0:	2100      	movs	r1, #0
 8003fb2:	e003      	b.n	8003fbc <LoopCopyDataInit>

08003fb4 <CopyDataInit>:
 8003fb4:	4b0c      	ldr	r3, [pc, #48]	; (8003fe8 <LoopFillZerobss+0x18>)
 8003fb6:	585b      	ldr	r3, [r3, r1]
 8003fb8:	5043      	str	r3, [r0, r1]
 8003fba:	3104      	adds	r1, #4

08003fbc <LoopCopyDataInit>:
 8003fbc:	480b      	ldr	r0, [pc, #44]	; (8003fec <LoopFillZerobss+0x1c>)
 8003fbe:	4b0c      	ldr	r3, [pc, #48]	; (8003ff0 <LoopFillZerobss+0x20>)
 8003fc0:	1842      	adds	r2, r0, r1
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d3f6      	bcc.n	8003fb4 <CopyDataInit>
 8003fc6:	4a0b      	ldr	r2, [pc, #44]	; (8003ff4 <LoopFillZerobss+0x24>)
 8003fc8:	e002      	b.n	8003fd0 <LoopFillZerobss>

08003fca <FillZerobss>:
 8003fca:	2300      	movs	r3, #0
 8003fcc:	f842 3b04 	str.w	r3, [r2], #4

08003fd0 <LoopFillZerobss>:
 8003fd0:	4b09      	ldr	r3, [pc, #36]	; (8003ff8 <LoopFillZerobss+0x28>)
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d3f9      	bcc.n	8003fca <FillZerobss>
 8003fd6:	f7ff faab 	bl	8003530 <SystemInit>
 8003fda:	f007 fcd5 	bl	800b988 <__libc_init_array>
 8003fde:	f7ff f831 	bl	8003044 <main>
 8003fe2:	4770      	bx	lr
 8003fe4:	20020000 	.word	0x20020000
 8003fe8:	0800baa0 	.word	0x0800baa0
 8003fec:	20000000 	.word	0x20000000
 8003ff0:	20000088 	.word	0x20000088
 8003ff4:	20000088 	.word	0x20000088
 8003ff8:	20008048 	.word	0x20008048

08003ffc <ADC_IRQHandler>:
 8003ffc:	e7fe      	b.n	8003ffc <ADC_IRQHandler>
	...

08004000 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004004:	4b0e      	ldr	r3, [pc, #56]	; (8004040 <HAL_Init+0x40>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a0d      	ldr	r2, [pc, #52]	; (8004040 <HAL_Init+0x40>)
 800400a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800400e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004010:	4b0b      	ldr	r3, [pc, #44]	; (8004040 <HAL_Init+0x40>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a0a      	ldr	r2, [pc, #40]	; (8004040 <HAL_Init+0x40>)
 8004016:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800401a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800401c:	4b08      	ldr	r3, [pc, #32]	; (8004040 <HAL_Init+0x40>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a07      	ldr	r2, [pc, #28]	; (8004040 <HAL_Init+0x40>)
 8004022:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004026:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004028:	2003      	movs	r0, #3
 800402a:	f000 ff86 	bl	8004f3a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800402e:	2000      	movs	r0, #0
 8004030:	f7ff f98e 	bl	8003350 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004034:	f7ff f960 	bl	80032f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	40023c00 	.word	0x40023c00

08004044 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004044:	b480      	push	{r7}
 8004046:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004048:	4b06      	ldr	r3, [pc, #24]	; (8004064 <HAL_IncTick+0x20>)
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	461a      	mov	r2, r3
 800404e:	4b06      	ldr	r3, [pc, #24]	; (8004068 <HAL_IncTick+0x24>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4413      	add	r3, r2
 8004054:	4a04      	ldr	r2, [pc, #16]	; (8004068 <HAL_IncTick+0x24>)
 8004056:	6013      	str	r3, [r2, #0]
}
 8004058:	bf00      	nop
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	20000080 	.word	0x20000080
 8004068:	20008044 	.word	0x20008044

0800406c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800406c:	b480      	push	{r7}
 800406e:	af00      	add	r7, sp, #0
  return uwTick;
 8004070:	4b03      	ldr	r3, [pc, #12]	; (8004080 <HAL_GetTick+0x14>)
 8004072:	681b      	ldr	r3, [r3, #0]
}
 8004074:	4618      	mov	r0, r3
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	20008044 	.word	0x20008044

08004084 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e0ed      	b.n	8004272 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 3020 	ldrb.w	r3, [r3, #32]
 800409c:	b2db      	uxtb	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d102      	bne.n	80040a8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f7fe fe4e 	bl	8002d44 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f022 0202 	bic.w	r2, r2, #2
 80040b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040b8:	f7ff ffd8 	bl	800406c <HAL_GetTick>
 80040bc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80040be:	e012      	b.n	80040e6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80040c0:	f7ff ffd4 	bl	800406c <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b0a      	cmp	r3, #10
 80040cc:	d90b      	bls.n	80040e6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2205      	movs	r2, #5
 80040de:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e0c5      	b.n	8004272 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f003 0302 	and.w	r3, r3, #2
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1e5      	bne.n	80040c0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f042 0201 	orr.w	r2, r2, #1
 8004102:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004104:	f7ff ffb2 	bl	800406c <HAL_GetTick>
 8004108:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800410a:	e012      	b.n	8004132 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800410c:	f7ff ffae 	bl	800406c <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b0a      	cmp	r3, #10
 8004118:	d90b      	bls.n	8004132 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2205      	movs	r2, #5
 800412a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e09f      	b.n	8004272 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f003 0301 	and.w	r3, r3, #1
 800413c:	2b00      	cmp	r3, #0
 800413e:	d0e5      	beq.n	800410c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	7e1b      	ldrb	r3, [r3, #24]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d108      	bne.n	800415a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004156:	601a      	str	r2, [r3, #0]
 8004158:	e007      	b.n	800416a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004168:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	7e5b      	ldrb	r3, [r3, #25]
 800416e:	2b01      	cmp	r3, #1
 8004170:	d108      	bne.n	8004184 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004180:	601a      	str	r2, [r3, #0]
 8004182:	e007      	b.n	8004194 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004192:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	7e9b      	ldrb	r3, [r3, #26]
 8004198:	2b01      	cmp	r3, #1
 800419a:	d108      	bne.n	80041ae <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f042 0220 	orr.w	r2, r2, #32
 80041aa:	601a      	str	r2, [r3, #0]
 80041ac:	e007      	b.n	80041be <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f022 0220 	bic.w	r2, r2, #32
 80041bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	7edb      	ldrb	r3, [r3, #27]
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d108      	bne.n	80041d8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f022 0210 	bic.w	r2, r2, #16
 80041d4:	601a      	str	r2, [r3, #0]
 80041d6:	e007      	b.n	80041e8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f042 0210 	orr.w	r2, r2, #16
 80041e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	7f1b      	ldrb	r3, [r3, #28]
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d108      	bne.n	8004202 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f042 0208 	orr.w	r2, r2, #8
 80041fe:	601a      	str	r2, [r3, #0]
 8004200:	e007      	b.n	8004212 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f022 0208 	bic.w	r2, r2, #8
 8004210:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	7f5b      	ldrb	r3, [r3, #29]
 8004216:	2b01      	cmp	r3, #1
 8004218:	d108      	bne.n	800422c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f042 0204 	orr.w	r2, r2, #4
 8004228:	601a      	str	r2, [r3, #0]
 800422a:	e007      	b.n	800423c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f022 0204 	bic.w	r2, r2, #4
 800423a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689a      	ldr	r2, [r3, #8]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	431a      	orrs	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	431a      	orrs	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	695b      	ldr	r3, [r3, #20]
 8004250:	ea42 0103 	orr.w	r1, r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	1e5a      	subs	r2, r3, #1
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	430a      	orrs	r2, r1
 8004260:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3710      	adds	r7, #16
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
	...

0800427c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800427c:	b480      	push	{r7}
 800427e:	b087      	sub	sp, #28
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004292:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004294:	7cfb      	ldrb	r3, [r7, #19]
 8004296:	2b01      	cmp	r3, #1
 8004298:	d003      	beq.n	80042a2 <HAL_CAN_ConfigFilter+0x26>
 800429a:	7cfb      	ldrb	r3, [r7, #19]
 800429c:	2b02      	cmp	r3, #2
 800429e:	f040 80be 	bne.w	800441e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80042a2:	4b65      	ldr	r3, [pc, #404]	; (8004438 <HAL_CAN_ConfigFilter+0x1bc>)
 80042a4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80042ac:	f043 0201 	orr.w	r2, r3, #1
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80042bc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d0:	021b      	lsls	r3, r3, #8
 80042d2:	431a      	orrs	r2, r3
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	f003 031f 	and.w	r3, r3, #31
 80042e2:	2201      	movs	r2, #1
 80042e4:	fa02 f303 	lsl.w	r3, r2, r3
 80042e8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	43db      	mvns	r3, r3
 80042f4:	401a      	ands	r2, r3
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	69db      	ldr	r3, [r3, #28]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d123      	bne.n	800434c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	43db      	mvns	r3, r3
 800430e:	401a      	ands	r2, r3
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004322:	683a      	ldr	r2, [r7, #0]
 8004324:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004326:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	3248      	adds	r2, #72	; 0x48
 800432c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004340:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004342:	6979      	ldr	r1, [r7, #20]
 8004344:	3348      	adds	r3, #72	; 0x48
 8004346:	00db      	lsls	r3, r3, #3
 8004348:	440b      	add	r3, r1
 800434a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	69db      	ldr	r3, [r3, #28]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d122      	bne.n	800439a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	431a      	orrs	r2, r3
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004370:	683a      	ldr	r2, [r7, #0]
 8004372:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004374:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	3248      	adds	r2, #72	; 0x48
 800437a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800438e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004390:	6979      	ldr	r1, [r7, #20]
 8004392:	3348      	adds	r3, #72	; 0x48
 8004394:	00db      	lsls	r3, r3, #3
 8004396:	440b      	add	r3, r1
 8004398:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d109      	bne.n	80043b6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	43db      	mvns	r3, r3
 80043ac:	401a      	ands	r2, r3
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80043b4:	e007      	b.n	80043c6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	431a      	orrs	r2, r3
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d109      	bne.n	80043e2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	43db      	mvns	r3, r3
 80043d8:	401a      	ands	r2, r3
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80043e0:	e007      	b.n	80043f2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	431a      	orrs	r2, r3
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	6a1b      	ldr	r3, [r3, #32]
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d107      	bne.n	800440a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	431a      	orrs	r2, r3
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004410:	f023 0201 	bic.w	r2, r3, #1
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800441a:	2300      	movs	r3, #0
 800441c:	e006      	b.n	800442c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004422:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
  }
}
 800442c:	4618      	mov	r0, r3
 800442e:	371c      	adds	r7, #28
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr
 8004438:	40006400 	.word	0x40006400

0800443c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f893 3020 	ldrb.w	r3, [r3, #32]
 800444a:	b2db      	uxtb	r3, r3
 800444c:	2b01      	cmp	r3, #1
 800444e:	d12e      	bne.n	80044ae <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2202      	movs	r2, #2
 8004454:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f022 0201 	bic.w	r2, r2, #1
 8004466:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004468:	f7ff fe00 	bl	800406c <HAL_GetTick>
 800446c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800446e:	e012      	b.n	8004496 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004470:	f7ff fdfc 	bl	800406c <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	2b0a      	cmp	r3, #10
 800447c:	d90b      	bls.n	8004496 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004482:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2205      	movs	r2, #5
 800448e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e012      	b.n	80044bc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f003 0301 	and.w	r3, r3, #1
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1e5      	bne.n	8004470 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80044aa:	2300      	movs	r3, #0
 80044ac:	e006      	b.n	80044bc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
  }
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3710      	adds	r7, #16
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b089      	sub	sp, #36	; 0x24
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]
 80044d0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044d8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80044e2:	7ffb      	ldrb	r3, [r7, #31]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d003      	beq.n	80044f0 <HAL_CAN_AddTxMessage+0x2c>
 80044e8:	7ffb      	ldrb	r3, [r7, #31]
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	f040 80b8 	bne.w	8004660 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d10a      	bne.n	8004510 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004500:	2b00      	cmp	r3, #0
 8004502:	d105      	bne.n	8004510 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800450a:	2b00      	cmp	r3, #0
 800450c:	f000 80a0 	beq.w	8004650 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	0e1b      	lsrs	r3, r3, #24
 8004514:	f003 0303 	and.w	r3, r3, #3
 8004518:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	2b02      	cmp	r3, #2
 800451e:	d907      	bls.n	8004530 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004524:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e09e      	b.n	800466e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004530:	2201      	movs	r2, #1
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	409a      	lsls	r2, r3
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d10d      	bne.n	800455e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800454c:	68f9      	ldr	r1, [r7, #12]
 800454e:	6809      	ldr	r1, [r1, #0]
 8004550:	431a      	orrs	r2, r3
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	3318      	adds	r3, #24
 8004556:	011b      	lsls	r3, r3, #4
 8004558:	440b      	add	r3, r1
 800455a:	601a      	str	r2, [r3, #0]
 800455c:	e00f      	b.n	800457e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004568:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800456e:	68f9      	ldr	r1, [r7, #12]
 8004570:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004572:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	3318      	adds	r3, #24
 8004578:	011b      	lsls	r3, r3, #4
 800457a:	440b      	add	r3, r1
 800457c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6819      	ldr	r1, [r3, #0]
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	691a      	ldr	r2, [r3, #16]
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	3318      	adds	r3, #24
 800458a:	011b      	lsls	r3, r3, #4
 800458c:	440b      	add	r3, r1
 800458e:	3304      	adds	r3, #4
 8004590:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	7d1b      	ldrb	r3, [r3, #20]
 8004596:	2b01      	cmp	r3, #1
 8004598:	d111      	bne.n	80045be <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	3318      	adds	r3, #24
 80045a2:	011b      	lsls	r3, r3, #4
 80045a4:	4413      	add	r3, r2
 80045a6:	3304      	adds	r3, #4
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68fa      	ldr	r2, [r7, #12]
 80045ac:	6811      	ldr	r1, [r2, #0]
 80045ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	3318      	adds	r3, #24
 80045b6:	011b      	lsls	r3, r3, #4
 80045b8:	440b      	add	r3, r1
 80045ba:	3304      	adds	r3, #4
 80045bc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	3307      	adds	r3, #7
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	061a      	lsls	r2, r3, #24
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	3306      	adds	r3, #6
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	041b      	lsls	r3, r3, #16
 80045ce:	431a      	orrs	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	3305      	adds	r3, #5
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	021b      	lsls	r3, r3, #8
 80045d8:	4313      	orrs	r3, r2
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	3204      	adds	r2, #4
 80045de:	7812      	ldrb	r2, [r2, #0]
 80045e0:	4610      	mov	r0, r2
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	6811      	ldr	r1, [r2, #0]
 80045e6:	ea43 0200 	orr.w	r2, r3, r0
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	011b      	lsls	r3, r3, #4
 80045ee:	440b      	add	r3, r1
 80045f0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80045f4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	3303      	adds	r3, #3
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	061a      	lsls	r2, r3, #24
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	3302      	adds	r3, #2
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	041b      	lsls	r3, r3, #16
 8004606:	431a      	orrs	r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	3301      	adds	r3, #1
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	021b      	lsls	r3, r3, #8
 8004610:	4313      	orrs	r3, r2
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	7812      	ldrb	r2, [r2, #0]
 8004616:	4610      	mov	r0, r2
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	6811      	ldr	r1, [r2, #0]
 800461c:	ea43 0200 	orr.w	r2, r3, r0
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	011b      	lsls	r3, r3, #4
 8004624:	440b      	add	r3, r1
 8004626:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800462a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	3318      	adds	r3, #24
 8004634:	011b      	lsls	r3, r3, #4
 8004636:	4413      	add	r3, r2
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	6811      	ldr	r1, [r2, #0]
 800463e:	f043 0201 	orr.w	r2, r3, #1
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	3318      	adds	r3, #24
 8004646:	011b      	lsls	r3, r3, #4
 8004648:	440b      	add	r3, r1
 800464a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800464c:	2300      	movs	r3, #0
 800464e:	e00e      	b.n	800466e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004654:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e006      	b.n	800466e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004664:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
  }
}
 800466e:	4618      	mov	r0, r3
 8004670:	3724      	adds	r7, #36	; 0x24
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr

0800467a <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 800467a:	b480      	push	{r7}
 800467c:	b085      	sub	sp, #20
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
 8004682:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8004684:	2300      	movs	r3, #0
 8004686:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800468e:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8004690:	7afb      	ldrb	r3, [r7, #11]
 8004692:	2b01      	cmp	r3, #1
 8004694:	d002      	beq.n	800469c <HAL_CAN_IsTxMessagePending+0x22>
 8004696:	7afb      	ldrb	r3, [r7, #11]
 8004698:	2b02      	cmp	r3, #2
 800469a:	d10b      	bne.n	80046b4 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	689a      	ldr	r2, [r3, #8]
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	069b      	lsls	r3, r3, #26
 80046a6:	401a      	ands	r2, r3
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	069b      	lsls	r3, r3, #26
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d001      	beq.n	80046b4 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 80046b0:	2301      	movs	r3, #1
 80046b2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 80046b4:	68fb      	ldr	r3, [r7, #12]
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3714      	adds	r7, #20
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr

080046c2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80046c2:	b480      	push	{r7}
 80046c4:	b087      	sub	sp, #28
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	60f8      	str	r0, [r7, #12]
 80046ca:	60b9      	str	r1, [r7, #8]
 80046cc:	607a      	str	r2, [r7, #4]
 80046ce:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046d6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80046d8:	7dfb      	ldrb	r3, [r7, #23]
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d003      	beq.n	80046e6 <HAL_CAN_GetRxMessage+0x24>
 80046de:	7dfb      	ldrb	r3, [r7, #23]
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	f040 80f3 	bne.w	80048cc <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d10e      	bne.n	800470a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	f003 0303 	and.w	r3, r3, #3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d116      	bne.n	8004728 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e0e7      	b.n	80048da <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	f003 0303 	and.w	r3, r3, #3
 8004714:	2b00      	cmp	r3, #0
 8004716:	d107      	bne.n	8004728 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e0d8      	b.n	80048da <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	331b      	adds	r3, #27
 8004730:	011b      	lsls	r3, r3, #4
 8004732:	4413      	add	r3, r2
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0204 	and.w	r2, r3, #4
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d10c      	bne.n	8004760 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	331b      	adds	r3, #27
 800474e:	011b      	lsls	r3, r3, #4
 8004750:	4413      	add	r3, r2
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	0d5b      	lsrs	r3, r3, #21
 8004756:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	601a      	str	r2, [r3, #0]
 800475e:	e00b      	b.n	8004778 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	331b      	adds	r3, #27
 8004768:	011b      	lsls	r3, r3, #4
 800476a:	4413      	add	r3, r2
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	08db      	lsrs	r3, r3, #3
 8004770:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	331b      	adds	r3, #27
 8004780:	011b      	lsls	r3, r3, #4
 8004782:	4413      	add	r3, r2
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0202 	and.w	r2, r3, #2
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	331b      	adds	r3, #27
 8004796:	011b      	lsls	r3, r3, #4
 8004798:	4413      	add	r3, r2
 800479a:	3304      	adds	r3, #4
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 020f 	and.w	r2, r3, #15
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	331b      	adds	r3, #27
 80047ae:	011b      	lsls	r3, r3, #4
 80047b0:	4413      	add	r3, r2
 80047b2:	3304      	adds	r3, #4
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	0a1b      	lsrs	r3, r3, #8
 80047b8:	b2da      	uxtb	r2, r3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	331b      	adds	r3, #27
 80047c6:	011b      	lsls	r3, r3, #4
 80047c8:	4413      	add	r3, r2
 80047ca:	3304      	adds	r3, #4
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	0c1b      	lsrs	r3, r3, #16
 80047d0:	b29a      	uxth	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	011b      	lsls	r3, r3, #4
 80047de:	4413      	add	r3, r2
 80047e0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	b2da      	uxtb	r2, r3
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	011b      	lsls	r3, r3, #4
 80047f4:	4413      	add	r3, r2
 80047f6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	0a1a      	lsrs	r2, r3, #8
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	3301      	adds	r3, #1
 8004802:	b2d2      	uxtb	r2, r2
 8004804:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	011b      	lsls	r3, r3, #4
 800480e:	4413      	add	r3, r2
 8004810:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	0c1a      	lsrs	r2, r3, #16
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	3302      	adds	r3, #2
 800481c:	b2d2      	uxtb	r2, r2
 800481e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	011b      	lsls	r3, r3, #4
 8004828:	4413      	add	r3, r2
 800482a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	0e1a      	lsrs	r2, r3, #24
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	3303      	adds	r3, #3
 8004836:	b2d2      	uxtb	r2, r2
 8004838:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	011b      	lsls	r3, r3, #4
 8004842:	4413      	add	r3, r2
 8004844:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	3304      	adds	r3, #4
 800484e:	b2d2      	uxtb	r2, r2
 8004850:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	011b      	lsls	r3, r3, #4
 800485a:	4413      	add	r3, r2
 800485c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	0a1a      	lsrs	r2, r3, #8
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	3305      	adds	r3, #5
 8004868:	b2d2      	uxtb	r2, r2
 800486a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	011b      	lsls	r3, r3, #4
 8004874:	4413      	add	r3, r2
 8004876:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	0c1a      	lsrs	r2, r3, #16
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	3306      	adds	r3, #6
 8004882:	b2d2      	uxtb	r2, r2
 8004884:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	011b      	lsls	r3, r3, #4
 800488e:	4413      	add	r3, r2
 8004890:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	0e1a      	lsrs	r2, r3, #24
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	3307      	adds	r3, #7
 800489c:	b2d2      	uxtb	r2, r2
 800489e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d108      	bne.n	80048b8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68da      	ldr	r2, [r3, #12]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f042 0220 	orr.w	r2, r2, #32
 80048b4:	60da      	str	r2, [r3, #12]
 80048b6:	e007      	b.n	80048c8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	691a      	ldr	r2, [r3, #16]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f042 0220 	orr.w	r2, r2, #32
 80048c6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80048c8:	2300      	movs	r3, #0
 80048ca:	e006      	b.n	80048da <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
  }
}
 80048da:	4618      	mov	r0, r3
 80048dc:	371c      	adds	r7, #28
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr

080048e6 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80048e6:	b480      	push	{r7}
 80048e8:	b085      	sub	sp, #20
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
 80048ee:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80048f0:	2300      	movs	r3, #0
 80048f2:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048fa:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80048fc:	7afb      	ldrb	r3, [r7, #11]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d002      	beq.n	8004908 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8004902:	7afb      	ldrb	r3, [r7, #11]
 8004904:	2b02      	cmp	r3, #2
 8004906:	d10f      	bne.n	8004928 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d106      	bne.n	800491c <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	f003 0303 	and.w	r3, r3, #3
 8004918:	60fb      	str	r3, [r7, #12]
 800491a:	e005      	b.n	8004928 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	f003 0303 	and.w	r3, r3, #3
 8004926:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8004928:	68fb      	ldr	r3, [r7, #12]
}
 800492a:	4618      	mov	r0, r3
 800492c:	3714      	adds	r7, #20
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr

08004936 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004936:	b480      	push	{r7}
 8004938:	b085      	sub	sp, #20
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
 800493e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004946:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004948:	7bfb      	ldrb	r3, [r7, #15]
 800494a:	2b01      	cmp	r3, #1
 800494c:	d002      	beq.n	8004954 <HAL_CAN_ActivateNotification+0x1e>
 800494e:	7bfb      	ldrb	r3, [r7, #15]
 8004950:	2b02      	cmp	r3, #2
 8004952:	d109      	bne.n	8004968 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	6959      	ldr	r1, [r3, #20]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	683a      	ldr	r2, [r7, #0]
 8004960:	430a      	orrs	r2, r1
 8004962:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004964:	2300      	movs	r3, #0
 8004966:	e006      	b.n	8004976 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
  }
}
 8004976:	4618      	mov	r0, r3
 8004978:	3714      	adds	r7, #20
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr

08004982 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004982:	b580      	push	{r7, lr}
 8004984:	b08a      	sub	sp, #40	; 0x28
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800498a:	2300      	movs	r3, #0
 800498c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	695b      	ldr	r3, [r3, #20]
 8004994:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80049be:	6a3b      	ldr	r3, [r7, #32]
 80049c0:	f003 0301 	and.w	r3, r3, #1
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d07c      	beq.n	8004ac2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	f003 0301 	and.w	r3, r3, #1
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d023      	beq.n	8004a1a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2201      	movs	r2, #1
 80049d8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	f003 0302 	and.w	r3, r3, #2
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d003      	beq.n	80049ec <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f000 f983 	bl	8004cf0 <HAL_CAN_TxMailbox0CompleteCallback>
 80049ea:	e016      	b.n	8004a1a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	f003 0304 	and.w	r3, r3, #4
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d004      	beq.n	8004a00 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80049f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80049fc:	627b      	str	r3, [r7, #36]	; 0x24
 80049fe:	e00c      	b.n	8004a1a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	f003 0308 	and.w	r3, r3, #8
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d004      	beq.n	8004a14 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004a10:	627b      	str	r3, [r7, #36]	; 0x24
 8004a12:	e002      	b.n	8004a1a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 f989 	bl	8004d2c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d024      	beq.n	8004a6e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a2c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d003      	beq.n	8004a40 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f000 f963 	bl	8004d04 <HAL_CAN_TxMailbox1CompleteCallback>
 8004a3e:	e016      	b.n	8004a6e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d004      	beq.n	8004a54 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004a50:	627b      	str	r3, [r7, #36]	; 0x24
 8004a52:	e00c      	b.n	8004a6e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d004      	beq.n	8004a68 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a64:	627b      	str	r3, [r7, #36]	; 0x24
 8004a66:	e002      	b.n	8004a6e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 f969 	bl	8004d40 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d024      	beq.n	8004ac2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004a80:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d003      	beq.n	8004a94 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f000 f943 	bl	8004d18 <HAL_CAN_TxMailbox2CompleteCallback>
 8004a92:	e016      	b.n	8004ac2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d004      	beq.n	8004aa8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8004aa6:	e00c      	b.n	8004ac2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d004      	beq.n	8004abc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8004aba:	e002      	b.n	8004ac2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f000 f949 	bl	8004d54 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004ac2:	6a3b      	ldr	r3, [r7, #32]
 8004ac4:	f003 0308 	and.w	r3, r3, #8
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d00c      	beq.n	8004ae6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	f003 0310 	and.w	r3, r3, #16
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d007      	beq.n	8004ae6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004adc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2210      	movs	r2, #16
 8004ae4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004ae6:	6a3b      	ldr	r3, [r7, #32]
 8004ae8:	f003 0304 	and.w	r3, r3, #4
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00b      	beq.n	8004b08 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	f003 0308 	and.w	r3, r3, #8
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d006      	beq.n	8004b08 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2208      	movs	r2, #8
 8004b00:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 f930 	bl	8004d68 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004b08:	6a3b      	ldr	r3, [r7, #32]
 8004b0a:	f003 0302 	and.w	r3, r3, #2
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d009      	beq.n	8004b26 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	f003 0303 	and.w	r3, r3, #3
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d002      	beq.n	8004b26 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f7fb fdd9 	bl	80006d8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004b26:	6a3b      	ldr	r3, [r7, #32]
 8004b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00c      	beq.n	8004b4a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	f003 0310 	and.w	r3, r3, #16
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d007      	beq.n	8004b4a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b40:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2210      	movs	r2, #16
 8004b48:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004b4a:	6a3b      	ldr	r3, [r7, #32]
 8004b4c:	f003 0320 	and.w	r3, r3, #32
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00b      	beq.n	8004b6c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	f003 0308 	and.w	r3, r3, #8
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d006      	beq.n	8004b6c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2208      	movs	r2, #8
 8004b64:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 f912 	bl	8004d90 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004b6c:	6a3b      	ldr	r3, [r7, #32]
 8004b6e:	f003 0310 	and.w	r3, r3, #16
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d009      	beq.n	8004b8a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	f003 0303 	and.w	r3, r3, #3
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d002      	beq.n	8004b8a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 f8f9 	bl	8004d7c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004b8a:	6a3b      	ldr	r3, [r7, #32]
 8004b8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d00b      	beq.n	8004bac <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	f003 0310 	and.w	r3, r3, #16
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d006      	beq.n	8004bac <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2210      	movs	r2, #16
 8004ba4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 f8fc 	bl	8004da4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004bac:	6a3b      	ldr	r3, [r7, #32]
 8004bae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00b      	beq.n	8004bce <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	f003 0308 	and.w	r3, r3, #8
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d006      	beq.n	8004bce <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2208      	movs	r2, #8
 8004bc6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f000 f8f5 	bl	8004db8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004bce:	6a3b      	ldr	r3, [r7, #32]
 8004bd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d07b      	beq.n	8004cd0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	f003 0304 	and.w	r3, r3, #4
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d072      	beq.n	8004cc8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004be2:	6a3b      	ldr	r3, [r7, #32]
 8004be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d008      	beq.n	8004bfe <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d003      	beq.n	8004bfe <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf8:	f043 0301 	orr.w	r3, r3, #1
 8004bfc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004bfe:	6a3b      	ldr	r3, [r7, #32]
 8004c00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d008      	beq.n	8004c1a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d003      	beq.n	8004c1a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c14:	f043 0302 	orr.w	r3, r3, #2
 8004c18:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004c1a:	6a3b      	ldr	r3, [r7, #32]
 8004c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d008      	beq.n	8004c36 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d003      	beq.n	8004c36 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c30:	f043 0304 	orr.w	r3, r3, #4
 8004c34:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004c36:	6a3b      	ldr	r3, [r7, #32]
 8004c38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d043      	beq.n	8004cc8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d03e      	beq.n	8004cc8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c50:	2b60      	cmp	r3, #96	; 0x60
 8004c52:	d02b      	beq.n	8004cac <HAL_CAN_IRQHandler+0x32a>
 8004c54:	2b60      	cmp	r3, #96	; 0x60
 8004c56:	d82e      	bhi.n	8004cb6 <HAL_CAN_IRQHandler+0x334>
 8004c58:	2b50      	cmp	r3, #80	; 0x50
 8004c5a:	d022      	beq.n	8004ca2 <HAL_CAN_IRQHandler+0x320>
 8004c5c:	2b50      	cmp	r3, #80	; 0x50
 8004c5e:	d82a      	bhi.n	8004cb6 <HAL_CAN_IRQHandler+0x334>
 8004c60:	2b40      	cmp	r3, #64	; 0x40
 8004c62:	d019      	beq.n	8004c98 <HAL_CAN_IRQHandler+0x316>
 8004c64:	2b40      	cmp	r3, #64	; 0x40
 8004c66:	d826      	bhi.n	8004cb6 <HAL_CAN_IRQHandler+0x334>
 8004c68:	2b30      	cmp	r3, #48	; 0x30
 8004c6a:	d010      	beq.n	8004c8e <HAL_CAN_IRQHandler+0x30c>
 8004c6c:	2b30      	cmp	r3, #48	; 0x30
 8004c6e:	d822      	bhi.n	8004cb6 <HAL_CAN_IRQHandler+0x334>
 8004c70:	2b10      	cmp	r3, #16
 8004c72:	d002      	beq.n	8004c7a <HAL_CAN_IRQHandler+0x2f8>
 8004c74:	2b20      	cmp	r3, #32
 8004c76:	d005      	beq.n	8004c84 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004c78:	e01d      	b.n	8004cb6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7c:	f043 0308 	orr.w	r3, r3, #8
 8004c80:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004c82:	e019      	b.n	8004cb8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c86:	f043 0310 	orr.w	r3, r3, #16
 8004c8a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004c8c:	e014      	b.n	8004cb8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c90:	f043 0320 	orr.w	r3, r3, #32
 8004c94:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004c96:	e00f      	b.n	8004cb8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c9e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004ca0:	e00a      	b.n	8004cb8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ca8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004caa:	e005      	b.n	8004cb8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cb2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004cb4:	e000      	b.n	8004cb8 <HAL_CAN_IRQHandler+0x336>
            break;
 8004cb6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	699a      	ldr	r2, [r3, #24]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004cc6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2204      	movs	r2, #4
 8004cce:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d008      	beq.n	8004ce8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cdc:	431a      	orrs	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 f872 	bl	8004dcc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004ce8:	bf00      	nop
 8004cea:	3728      	adds	r7, #40	; 0x28
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004cf8:	bf00      	nop
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004d0c:	bf00      	nop
 8004d0e:	370c      	adds	r7, #12
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004d20:	bf00      	nop
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004d34:	bf00      	nop
 8004d36:	370c      	adds	r7, #12
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004d48:	bf00      	nop
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004d5c:	bf00      	nop
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004d70:	bf00      	nop
 8004d72:	370c      	adds	r7, #12
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004d84:	bf00      	nop
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004d98:	bf00      	nop
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004dc0:	bf00      	nop
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004dd4:	bf00      	nop
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b085      	sub	sp, #20
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f003 0307 	and.w	r3, r3, #7
 8004dee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004df0:	4b0c      	ldr	r3, [pc, #48]	; (8004e24 <__NVIC_SetPriorityGrouping+0x44>)
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004df6:	68ba      	ldr	r2, [r7, #8]
 8004df8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004e08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004e0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e12:	4a04      	ldr	r2, [pc, #16]	; (8004e24 <__NVIC_SetPriorityGrouping+0x44>)
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	60d3      	str	r3, [r2, #12]
}
 8004e18:	bf00      	nop
 8004e1a:	3714      	adds	r7, #20
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr
 8004e24:	e000ed00 	.word	0xe000ed00

08004e28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e2c:	4b04      	ldr	r3, [pc, #16]	; (8004e40 <__NVIC_GetPriorityGrouping+0x18>)
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	0a1b      	lsrs	r3, r3, #8
 8004e32:	f003 0307 	and.w	r3, r3, #7
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr
 8004e40:	e000ed00 	.word	0xe000ed00

08004e44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	db0b      	blt.n	8004e6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e56:	79fb      	ldrb	r3, [r7, #7]
 8004e58:	f003 021f 	and.w	r2, r3, #31
 8004e5c:	4907      	ldr	r1, [pc, #28]	; (8004e7c <__NVIC_EnableIRQ+0x38>)
 8004e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e62:	095b      	lsrs	r3, r3, #5
 8004e64:	2001      	movs	r0, #1
 8004e66:	fa00 f202 	lsl.w	r2, r0, r2
 8004e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004e6e:	bf00      	nop
 8004e70:	370c      	adds	r7, #12
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	e000e100 	.word	0xe000e100

08004e80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	4603      	mov	r3, r0
 8004e88:	6039      	str	r1, [r7, #0]
 8004e8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	db0a      	blt.n	8004eaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	b2da      	uxtb	r2, r3
 8004e98:	490c      	ldr	r1, [pc, #48]	; (8004ecc <__NVIC_SetPriority+0x4c>)
 8004e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e9e:	0112      	lsls	r2, r2, #4
 8004ea0:	b2d2      	uxtb	r2, r2
 8004ea2:	440b      	add	r3, r1
 8004ea4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ea8:	e00a      	b.n	8004ec0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	b2da      	uxtb	r2, r3
 8004eae:	4908      	ldr	r1, [pc, #32]	; (8004ed0 <__NVIC_SetPriority+0x50>)
 8004eb0:	79fb      	ldrb	r3, [r7, #7]
 8004eb2:	f003 030f 	and.w	r3, r3, #15
 8004eb6:	3b04      	subs	r3, #4
 8004eb8:	0112      	lsls	r2, r2, #4
 8004eba:	b2d2      	uxtb	r2, r2
 8004ebc:	440b      	add	r3, r1
 8004ebe:	761a      	strb	r2, [r3, #24]
}
 8004ec0:	bf00      	nop
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr
 8004ecc:	e000e100 	.word	0xe000e100
 8004ed0:	e000ed00 	.word	0xe000ed00

08004ed4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b089      	sub	sp, #36	; 0x24
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f003 0307 	and.w	r3, r3, #7
 8004ee6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	f1c3 0307 	rsb	r3, r3, #7
 8004eee:	2b04      	cmp	r3, #4
 8004ef0:	bf28      	it	cs
 8004ef2:	2304      	movcs	r3, #4
 8004ef4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	3304      	adds	r3, #4
 8004efa:	2b06      	cmp	r3, #6
 8004efc:	d902      	bls.n	8004f04 <NVIC_EncodePriority+0x30>
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	3b03      	subs	r3, #3
 8004f02:	e000      	b.n	8004f06 <NVIC_EncodePriority+0x32>
 8004f04:	2300      	movs	r3, #0
 8004f06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f12:	43da      	mvns	r2, r3
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	401a      	ands	r2, r3
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	fa01 f303 	lsl.w	r3, r1, r3
 8004f26:	43d9      	mvns	r1, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f2c:	4313      	orrs	r3, r2
         );
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3724      	adds	r7, #36	; 0x24
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr

08004f3a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f3a:	b580      	push	{r7, lr}
 8004f3c:	b082      	sub	sp, #8
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f7ff ff4c 	bl	8004de0 <__NVIC_SetPriorityGrouping>
}
 8004f48:	bf00      	nop
 8004f4a:	3708      	adds	r7, #8
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b086      	sub	sp, #24
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	4603      	mov	r3, r0
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	607a      	str	r2, [r7, #4]
 8004f5c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004f62:	f7ff ff61 	bl	8004e28 <__NVIC_GetPriorityGrouping>
 8004f66:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	68b9      	ldr	r1, [r7, #8]
 8004f6c:	6978      	ldr	r0, [r7, #20]
 8004f6e:	f7ff ffb1 	bl	8004ed4 <NVIC_EncodePriority>
 8004f72:	4602      	mov	r2, r0
 8004f74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f78:	4611      	mov	r1, r2
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f7ff ff80 	bl	8004e80 <__NVIC_SetPriority>
}
 8004f80:	bf00      	nop
 8004f82:	3718      	adds	r7, #24
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	4603      	mov	r3, r0
 8004f90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7ff ff54 	bl	8004e44 <__NVIC_EnableIRQ>
}
 8004f9c:	bf00      	nop
 8004f9e:	3708      	adds	r7, #8
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b086      	sub	sp, #24
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004fac:	2300      	movs	r3, #0
 8004fae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004fb0:	f7ff f85c 	bl	800406c <HAL_GetTick>
 8004fb4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d101      	bne.n	8004fc0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e099      	b.n	80050f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2202      	movs	r2, #2
 8004fcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f022 0201 	bic.w	r2, r2, #1
 8004fde:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004fe0:	e00f      	b.n	8005002 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004fe2:	f7ff f843 	bl	800406c <HAL_GetTick>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	2b05      	cmp	r3, #5
 8004fee:	d908      	bls.n	8005002 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2220      	movs	r2, #32
 8004ff4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2203      	movs	r2, #3
 8004ffa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e078      	b.n	80050f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0301 	and.w	r3, r3, #1
 800500c:	2b00      	cmp	r3, #0
 800500e:	d1e8      	bne.n	8004fe2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005018:	697a      	ldr	r2, [r7, #20]
 800501a:	4b38      	ldr	r3, [pc, #224]	; (80050fc <HAL_DMA_Init+0x158>)
 800501c:	4013      	ands	r3, r2
 800501e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685a      	ldr	r2, [r3, #4]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800502e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800503a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	699b      	ldr	r3, [r3, #24]
 8005040:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005046:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a1b      	ldr	r3, [r3, #32]
 800504c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800504e:	697a      	ldr	r2, [r7, #20]
 8005050:	4313      	orrs	r3, r2
 8005052:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005058:	2b04      	cmp	r3, #4
 800505a:	d107      	bne.n	800506c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005064:	4313      	orrs	r3, r2
 8005066:	697a      	ldr	r2, [r7, #20]
 8005068:	4313      	orrs	r3, r2
 800506a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	697a      	ldr	r2, [r7, #20]
 8005072:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	f023 0307 	bic.w	r3, r3, #7
 8005082:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005088:	697a      	ldr	r2, [r7, #20]
 800508a:	4313      	orrs	r3, r2
 800508c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005092:	2b04      	cmp	r3, #4
 8005094:	d117      	bne.n	80050c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800509a:	697a      	ldr	r2, [r7, #20]
 800509c:	4313      	orrs	r3, r2
 800509e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d00e      	beq.n	80050c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f000 fb01 	bl	80056b0 <DMA_CheckFifoParam>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d008      	beq.n	80050c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2240      	movs	r2, #64	; 0x40
 80050b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2201      	movs	r2, #1
 80050be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80050c2:	2301      	movs	r3, #1
 80050c4:	e016      	b.n	80050f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	697a      	ldr	r2, [r7, #20]
 80050cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 fab8 	bl	8005644 <DMA_CalcBaseAndBitshift>
 80050d4:	4603      	mov	r3, r0
 80050d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050dc:	223f      	movs	r2, #63	; 0x3f
 80050de:	409a      	lsls	r2, r3
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2201      	movs	r2, #1
 80050ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3718      	adds	r7, #24
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	f010803f 	.word	0xf010803f

08005100 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b086      	sub	sp, #24
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]
 800510c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800510e:	2300      	movs	r3, #0
 8005110:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005116:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800511e:	2b01      	cmp	r3, #1
 8005120:	d101      	bne.n	8005126 <HAL_DMA_Start_IT+0x26>
 8005122:	2302      	movs	r3, #2
 8005124:	e040      	b.n	80051a8 <HAL_DMA_Start_IT+0xa8>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2201      	movs	r2, #1
 800512a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005134:	b2db      	uxtb	r3, r3
 8005136:	2b01      	cmp	r3, #1
 8005138:	d12f      	bne.n	800519a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2202      	movs	r2, #2
 800513e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2200      	movs	r2, #0
 8005146:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	68b9      	ldr	r1, [r7, #8]
 800514e:	68f8      	ldr	r0, [r7, #12]
 8005150:	f000 fa4a 	bl	80055e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005158:	223f      	movs	r2, #63	; 0x3f
 800515a:	409a      	lsls	r2, r3
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f042 0216 	orr.w	r2, r2, #22
 800516e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005174:	2b00      	cmp	r3, #0
 8005176:	d007      	beq.n	8005188 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f042 0208 	orr.w	r2, r2, #8
 8005186:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f042 0201 	orr.w	r2, r2, #1
 8005196:	601a      	str	r2, [r3, #0]
 8005198:	e005      	b.n	80051a6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80051a2:	2302      	movs	r3, #2
 80051a4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80051a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3718      	adds	r7, #24
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051bc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80051be:	f7fe ff55 	bl	800406c <HAL_GetTick>
 80051c2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d008      	beq.n	80051e2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2280      	movs	r2, #128	; 0x80
 80051d4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e052      	b.n	8005288 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f022 0216 	bic.w	r2, r2, #22
 80051f0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	695a      	ldr	r2, [r3, #20]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005200:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005206:	2b00      	cmp	r3, #0
 8005208:	d103      	bne.n	8005212 <HAL_DMA_Abort+0x62>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800520e:	2b00      	cmp	r3, #0
 8005210:	d007      	beq.n	8005222 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f022 0208 	bic.w	r2, r2, #8
 8005220:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f022 0201 	bic.w	r2, r2, #1
 8005230:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005232:	e013      	b.n	800525c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005234:	f7fe ff1a 	bl	800406c <HAL_GetTick>
 8005238:	4602      	mov	r2, r0
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	2b05      	cmp	r3, #5
 8005240:	d90c      	bls.n	800525c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2220      	movs	r2, #32
 8005246:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2203      	movs	r2, #3
 8005254:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e015      	b.n	8005288 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0301 	and.w	r3, r3, #1
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1e4      	bne.n	8005234 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800526e:	223f      	movs	r2, #63	; 0x3f
 8005270:	409a      	lsls	r2, r3
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2201      	movs	r2, #1
 8005282:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8005286:	2300      	movs	r3, #0
}
 8005288:	4618      	mov	r0, r3
 800528a:	3710      	adds	r7, #16
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	2b02      	cmp	r3, #2
 80052a2:	d004      	beq.n	80052ae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2280      	movs	r2, #128	; 0x80
 80052a8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e00c      	b.n	80052c8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2205      	movs	r2, #5
 80052b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f022 0201 	bic.w	r2, r2, #1
 80052c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b086      	sub	sp, #24
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80052dc:	2300      	movs	r3, #0
 80052de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80052e0:	4b92      	ldr	r3, [pc, #584]	; (800552c <HAL_DMA_IRQHandler+0x258>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a92      	ldr	r2, [pc, #584]	; (8005530 <HAL_DMA_IRQHandler+0x25c>)
 80052e6:	fba2 2303 	umull	r2, r3, r2, r3
 80052ea:	0a9b      	lsrs	r3, r3, #10
 80052ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052fe:	2208      	movs	r2, #8
 8005300:	409a      	lsls	r2, r3
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	4013      	ands	r3, r2
 8005306:	2b00      	cmp	r3, #0
 8005308:	d01a      	beq.n	8005340 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0304 	and.w	r3, r3, #4
 8005314:	2b00      	cmp	r3, #0
 8005316:	d013      	beq.n	8005340 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f022 0204 	bic.w	r2, r2, #4
 8005326:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800532c:	2208      	movs	r2, #8
 800532e:	409a      	lsls	r2, r3
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005338:	f043 0201 	orr.w	r2, r3, #1
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005344:	2201      	movs	r2, #1
 8005346:	409a      	lsls	r2, r3
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	4013      	ands	r3, r2
 800534c:	2b00      	cmp	r3, #0
 800534e:	d012      	beq.n	8005376 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00b      	beq.n	8005376 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005362:	2201      	movs	r2, #1
 8005364:	409a      	lsls	r2, r3
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800536e:	f043 0202 	orr.w	r2, r3, #2
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800537a:	2204      	movs	r2, #4
 800537c:	409a      	lsls	r2, r3
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	4013      	ands	r3, r2
 8005382:	2b00      	cmp	r3, #0
 8005384:	d012      	beq.n	80053ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0302 	and.w	r3, r3, #2
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00b      	beq.n	80053ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005398:	2204      	movs	r2, #4
 800539a:	409a      	lsls	r2, r3
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053a4:	f043 0204 	orr.w	r2, r3, #4
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053b0:	2210      	movs	r2, #16
 80053b2:	409a      	lsls	r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	4013      	ands	r3, r2
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d043      	beq.n	8005444 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0308 	and.w	r3, r3, #8
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d03c      	beq.n	8005444 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053ce:	2210      	movs	r2, #16
 80053d0:	409a      	lsls	r2, r3
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d018      	beq.n	8005416 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d108      	bne.n	8005404 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d024      	beq.n	8005444 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	4798      	blx	r3
 8005402:	e01f      	b.n	8005444 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005408:	2b00      	cmp	r3, #0
 800540a:	d01b      	beq.n	8005444 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	4798      	blx	r3
 8005414:	e016      	b.n	8005444 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005420:	2b00      	cmp	r3, #0
 8005422:	d107      	bne.n	8005434 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f022 0208 	bic.w	r2, r2, #8
 8005432:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005438:	2b00      	cmp	r3, #0
 800543a:	d003      	beq.n	8005444 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005448:	2220      	movs	r2, #32
 800544a:	409a      	lsls	r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	4013      	ands	r3, r2
 8005450:	2b00      	cmp	r3, #0
 8005452:	f000 808e 	beq.w	8005572 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0310 	and.w	r3, r3, #16
 8005460:	2b00      	cmp	r3, #0
 8005462:	f000 8086 	beq.w	8005572 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800546a:	2220      	movs	r2, #32
 800546c:	409a      	lsls	r2, r3
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005478:	b2db      	uxtb	r3, r3
 800547a:	2b05      	cmp	r3, #5
 800547c:	d136      	bne.n	80054ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f022 0216 	bic.w	r2, r2, #22
 800548c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	695a      	ldr	r2, [r3, #20]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800549c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d103      	bne.n	80054ae <HAL_DMA_IRQHandler+0x1da>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d007      	beq.n	80054be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f022 0208 	bic.w	r2, r2, #8
 80054bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054c2:	223f      	movs	r2, #63	; 0x3f
 80054c4:	409a      	lsls	r2, r3
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2201      	movs	r2, #1
 80054d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d07d      	beq.n	80055de <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	4798      	blx	r3
        }
        return;
 80054ea:	e078      	b.n	80055de <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d01c      	beq.n	8005534 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005504:	2b00      	cmp	r3, #0
 8005506:	d108      	bne.n	800551a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800550c:	2b00      	cmp	r3, #0
 800550e:	d030      	beq.n	8005572 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	4798      	blx	r3
 8005518:	e02b      	b.n	8005572 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800551e:	2b00      	cmp	r3, #0
 8005520:	d027      	beq.n	8005572 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	4798      	blx	r3
 800552a:	e022      	b.n	8005572 <HAL_DMA_IRQHandler+0x29e>
 800552c:	20000078 	.word	0x20000078
 8005530:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800553e:	2b00      	cmp	r3, #0
 8005540:	d10f      	bne.n	8005562 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f022 0210 	bic.w	r2, r2, #16
 8005550:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2201      	movs	r2, #1
 800555e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005566:	2b00      	cmp	r3, #0
 8005568:	d003      	beq.n	8005572 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005576:	2b00      	cmp	r3, #0
 8005578:	d032      	beq.n	80055e0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800557e:	f003 0301 	and.w	r3, r3, #1
 8005582:	2b00      	cmp	r3, #0
 8005584:	d022      	beq.n	80055cc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2205      	movs	r2, #5
 800558a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f022 0201 	bic.w	r2, r2, #1
 800559c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	3301      	adds	r3, #1
 80055a2:	60bb      	str	r3, [r7, #8]
 80055a4:	697a      	ldr	r2, [r7, #20]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d307      	bcc.n	80055ba <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0301 	and.w	r3, r3, #1
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d1f2      	bne.n	800559e <HAL_DMA_IRQHandler+0x2ca>
 80055b8:	e000      	b.n	80055bc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80055ba:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d005      	beq.n	80055e0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	4798      	blx	r3
 80055dc:	e000      	b.n	80055e0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80055de:	bf00      	nop
    }
  }
}
 80055e0:	3718      	adds	r7, #24
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop

080055e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b085      	sub	sp, #20
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	607a      	str	r2, [r7, #4]
 80055f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005604:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	683a      	ldr	r2, [r7, #0]
 800560c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	2b40      	cmp	r3, #64	; 0x40
 8005614:	d108      	bne.n	8005628 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68ba      	ldr	r2, [r7, #8]
 8005624:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005626:	e007      	b.n	8005638 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	68ba      	ldr	r2, [r7, #8]
 800562e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	60da      	str	r2, [r3, #12]
}
 8005638:	bf00      	nop
 800563a:	3714      	adds	r7, #20
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005644:	b480      	push	{r7}
 8005646:	b085      	sub	sp, #20
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	b2db      	uxtb	r3, r3
 8005652:	3b10      	subs	r3, #16
 8005654:	4a14      	ldr	r2, [pc, #80]	; (80056a8 <DMA_CalcBaseAndBitshift+0x64>)
 8005656:	fba2 2303 	umull	r2, r3, r2, r3
 800565a:	091b      	lsrs	r3, r3, #4
 800565c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800565e:	4a13      	ldr	r2, [pc, #76]	; (80056ac <DMA_CalcBaseAndBitshift+0x68>)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	4413      	add	r3, r2
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	461a      	mov	r2, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2b03      	cmp	r3, #3
 8005670:	d909      	bls.n	8005686 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800567a:	f023 0303 	bic.w	r3, r3, #3
 800567e:	1d1a      	adds	r2, r3, #4
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	659a      	str	r2, [r3, #88]	; 0x58
 8005684:	e007      	b.n	8005696 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800568e:	f023 0303 	bic.w	r3, r3, #3
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800569a:	4618      	mov	r0, r3
 800569c:	3714      	adds	r7, #20
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr
 80056a6:	bf00      	nop
 80056a8:	aaaaaaab 	.word	0xaaaaaaab
 80056ac:	0800ba88 	.word	0x0800ba88

080056b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b085      	sub	sp, #20
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056b8:	2300      	movs	r3, #0
 80056ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d11f      	bne.n	800570a <DMA_CheckFifoParam+0x5a>
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	2b03      	cmp	r3, #3
 80056ce:	d856      	bhi.n	800577e <DMA_CheckFifoParam+0xce>
 80056d0:	a201      	add	r2, pc, #4	; (adr r2, 80056d8 <DMA_CheckFifoParam+0x28>)
 80056d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d6:	bf00      	nop
 80056d8:	080056e9 	.word	0x080056e9
 80056dc:	080056fb 	.word	0x080056fb
 80056e0:	080056e9 	.word	0x080056e9
 80056e4:	0800577f 	.word	0x0800577f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d046      	beq.n	8005782 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056f8:	e043      	b.n	8005782 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005702:	d140      	bne.n	8005786 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005708:	e03d      	b.n	8005786 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	699b      	ldr	r3, [r3, #24]
 800570e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005712:	d121      	bne.n	8005758 <DMA_CheckFifoParam+0xa8>
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	2b03      	cmp	r3, #3
 8005718:	d837      	bhi.n	800578a <DMA_CheckFifoParam+0xda>
 800571a:	a201      	add	r2, pc, #4	; (adr r2, 8005720 <DMA_CheckFifoParam+0x70>)
 800571c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005720:	08005731 	.word	0x08005731
 8005724:	08005737 	.word	0x08005737
 8005728:	08005731 	.word	0x08005731
 800572c:	08005749 	.word	0x08005749
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	73fb      	strb	r3, [r7, #15]
      break;
 8005734:	e030      	b.n	8005798 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800573a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d025      	beq.n	800578e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005746:	e022      	b.n	800578e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005750:	d11f      	bne.n	8005792 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005756:	e01c      	b.n	8005792 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	2b02      	cmp	r3, #2
 800575c:	d903      	bls.n	8005766 <DMA_CheckFifoParam+0xb6>
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	2b03      	cmp	r3, #3
 8005762:	d003      	beq.n	800576c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005764:	e018      	b.n	8005798 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	73fb      	strb	r3, [r7, #15]
      break;
 800576a:	e015      	b.n	8005798 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005770:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00e      	beq.n	8005796 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	73fb      	strb	r3, [r7, #15]
      break;
 800577c:	e00b      	b.n	8005796 <DMA_CheckFifoParam+0xe6>
      break;
 800577e:	bf00      	nop
 8005780:	e00a      	b.n	8005798 <DMA_CheckFifoParam+0xe8>
      break;
 8005782:	bf00      	nop
 8005784:	e008      	b.n	8005798 <DMA_CheckFifoParam+0xe8>
      break;
 8005786:	bf00      	nop
 8005788:	e006      	b.n	8005798 <DMA_CheckFifoParam+0xe8>
      break;
 800578a:	bf00      	nop
 800578c:	e004      	b.n	8005798 <DMA_CheckFifoParam+0xe8>
      break;
 800578e:	bf00      	nop
 8005790:	e002      	b.n	8005798 <DMA_CheckFifoParam+0xe8>
      break;   
 8005792:	bf00      	nop
 8005794:	e000      	b.n	8005798 <DMA_CheckFifoParam+0xe8>
      break;
 8005796:	bf00      	nop
    }
  } 
  
  return status; 
 8005798:	7bfb      	ldrb	r3, [r7, #15]
}
 800579a:	4618      	mov	r0, r3
 800579c:	3714      	adds	r7, #20
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop

080057a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b089      	sub	sp, #36	; 0x24
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80057b2:	2300      	movs	r3, #0
 80057b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80057b6:	2300      	movs	r3, #0
 80057b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80057ba:	2300      	movs	r3, #0
 80057bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80057be:	2300      	movs	r3, #0
 80057c0:	61fb      	str	r3, [r7, #28]
 80057c2:	e165      	b.n	8005a90 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80057c4:	2201      	movs	r2, #1
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	fa02 f303 	lsl.w	r3, r2, r3
 80057cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	697a      	ldr	r2, [r7, #20]
 80057d4:	4013      	ands	r3, r2
 80057d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80057d8:	693a      	ldr	r2, [r7, #16]
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	429a      	cmp	r2, r3
 80057de:	f040 8154 	bne.w	8005a8a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f003 0303 	and.w	r3, r3, #3
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d005      	beq.n	80057fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d130      	bne.n	800585c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	005b      	lsls	r3, r3, #1
 8005804:	2203      	movs	r2, #3
 8005806:	fa02 f303 	lsl.w	r3, r2, r3
 800580a:	43db      	mvns	r3, r3
 800580c:	69ba      	ldr	r2, [r7, #24]
 800580e:	4013      	ands	r3, r2
 8005810:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	68da      	ldr	r2, [r3, #12]
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	005b      	lsls	r3, r3, #1
 800581a:	fa02 f303 	lsl.w	r3, r2, r3
 800581e:	69ba      	ldr	r2, [r7, #24]
 8005820:	4313      	orrs	r3, r2
 8005822:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	69ba      	ldr	r2, [r7, #24]
 8005828:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005830:	2201      	movs	r2, #1
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	fa02 f303 	lsl.w	r3, r2, r3
 8005838:	43db      	mvns	r3, r3
 800583a:	69ba      	ldr	r2, [r7, #24]
 800583c:	4013      	ands	r3, r2
 800583e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	091b      	lsrs	r3, r3, #4
 8005846:	f003 0201 	and.w	r2, r3, #1
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	fa02 f303 	lsl.w	r3, r2, r3
 8005850:	69ba      	ldr	r2, [r7, #24]
 8005852:	4313      	orrs	r3, r2
 8005854:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	69ba      	ldr	r2, [r7, #24]
 800585a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	f003 0303 	and.w	r3, r3, #3
 8005864:	2b03      	cmp	r3, #3
 8005866:	d017      	beq.n	8005898 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	005b      	lsls	r3, r3, #1
 8005872:	2203      	movs	r2, #3
 8005874:	fa02 f303 	lsl.w	r3, r2, r3
 8005878:	43db      	mvns	r3, r3
 800587a:	69ba      	ldr	r2, [r7, #24]
 800587c:	4013      	ands	r3, r2
 800587e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	689a      	ldr	r2, [r3, #8]
 8005884:	69fb      	ldr	r3, [r7, #28]
 8005886:	005b      	lsls	r3, r3, #1
 8005888:	fa02 f303 	lsl.w	r3, r2, r3
 800588c:	69ba      	ldr	r2, [r7, #24]
 800588e:	4313      	orrs	r3, r2
 8005890:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	69ba      	ldr	r2, [r7, #24]
 8005896:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	f003 0303 	and.w	r3, r3, #3
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	d123      	bne.n	80058ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	08da      	lsrs	r2, r3, #3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	3208      	adds	r2, #8
 80058ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	f003 0307 	and.w	r3, r3, #7
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	220f      	movs	r2, #15
 80058bc:	fa02 f303 	lsl.w	r3, r2, r3
 80058c0:	43db      	mvns	r3, r3
 80058c2:	69ba      	ldr	r2, [r7, #24]
 80058c4:	4013      	ands	r3, r2
 80058c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	691a      	ldr	r2, [r3, #16]
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	f003 0307 	and.w	r3, r3, #7
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	fa02 f303 	lsl.w	r3, r2, r3
 80058d8:	69ba      	ldr	r2, [r7, #24]
 80058da:	4313      	orrs	r3, r2
 80058dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	08da      	lsrs	r2, r3, #3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	3208      	adds	r2, #8
 80058e6:	69b9      	ldr	r1, [r7, #24]
 80058e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	005b      	lsls	r3, r3, #1
 80058f6:	2203      	movs	r2, #3
 80058f8:	fa02 f303 	lsl.w	r3, r2, r3
 80058fc:	43db      	mvns	r3, r3
 80058fe:	69ba      	ldr	r2, [r7, #24]
 8005900:	4013      	ands	r3, r2
 8005902:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	f003 0203 	and.w	r2, r3, #3
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	005b      	lsls	r3, r3, #1
 8005910:	fa02 f303 	lsl.w	r3, r2, r3
 8005914:	69ba      	ldr	r2, [r7, #24]
 8005916:	4313      	orrs	r3, r2
 8005918:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	69ba      	ldr	r2, [r7, #24]
 800591e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005928:	2b00      	cmp	r3, #0
 800592a:	f000 80ae 	beq.w	8005a8a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800592e:	2300      	movs	r3, #0
 8005930:	60fb      	str	r3, [r7, #12]
 8005932:	4b5d      	ldr	r3, [pc, #372]	; (8005aa8 <HAL_GPIO_Init+0x300>)
 8005934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005936:	4a5c      	ldr	r2, [pc, #368]	; (8005aa8 <HAL_GPIO_Init+0x300>)
 8005938:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800593c:	6453      	str	r3, [r2, #68]	; 0x44
 800593e:	4b5a      	ldr	r3, [pc, #360]	; (8005aa8 <HAL_GPIO_Init+0x300>)
 8005940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005946:	60fb      	str	r3, [r7, #12]
 8005948:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800594a:	4a58      	ldr	r2, [pc, #352]	; (8005aac <HAL_GPIO_Init+0x304>)
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	089b      	lsrs	r3, r3, #2
 8005950:	3302      	adds	r3, #2
 8005952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005956:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	f003 0303 	and.w	r3, r3, #3
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	220f      	movs	r2, #15
 8005962:	fa02 f303 	lsl.w	r3, r2, r3
 8005966:	43db      	mvns	r3, r3
 8005968:	69ba      	ldr	r2, [r7, #24]
 800596a:	4013      	ands	r3, r2
 800596c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a4f      	ldr	r2, [pc, #316]	; (8005ab0 <HAL_GPIO_Init+0x308>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d025      	beq.n	80059c2 <HAL_GPIO_Init+0x21a>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a4e      	ldr	r2, [pc, #312]	; (8005ab4 <HAL_GPIO_Init+0x30c>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d01f      	beq.n	80059be <HAL_GPIO_Init+0x216>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a4d      	ldr	r2, [pc, #308]	; (8005ab8 <HAL_GPIO_Init+0x310>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d019      	beq.n	80059ba <HAL_GPIO_Init+0x212>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a4c      	ldr	r2, [pc, #304]	; (8005abc <HAL_GPIO_Init+0x314>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d013      	beq.n	80059b6 <HAL_GPIO_Init+0x20e>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a4b      	ldr	r2, [pc, #300]	; (8005ac0 <HAL_GPIO_Init+0x318>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d00d      	beq.n	80059b2 <HAL_GPIO_Init+0x20a>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a4a      	ldr	r2, [pc, #296]	; (8005ac4 <HAL_GPIO_Init+0x31c>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d007      	beq.n	80059ae <HAL_GPIO_Init+0x206>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a49      	ldr	r2, [pc, #292]	; (8005ac8 <HAL_GPIO_Init+0x320>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d101      	bne.n	80059aa <HAL_GPIO_Init+0x202>
 80059a6:	2306      	movs	r3, #6
 80059a8:	e00c      	b.n	80059c4 <HAL_GPIO_Init+0x21c>
 80059aa:	2307      	movs	r3, #7
 80059ac:	e00a      	b.n	80059c4 <HAL_GPIO_Init+0x21c>
 80059ae:	2305      	movs	r3, #5
 80059b0:	e008      	b.n	80059c4 <HAL_GPIO_Init+0x21c>
 80059b2:	2304      	movs	r3, #4
 80059b4:	e006      	b.n	80059c4 <HAL_GPIO_Init+0x21c>
 80059b6:	2303      	movs	r3, #3
 80059b8:	e004      	b.n	80059c4 <HAL_GPIO_Init+0x21c>
 80059ba:	2302      	movs	r3, #2
 80059bc:	e002      	b.n	80059c4 <HAL_GPIO_Init+0x21c>
 80059be:	2301      	movs	r3, #1
 80059c0:	e000      	b.n	80059c4 <HAL_GPIO_Init+0x21c>
 80059c2:	2300      	movs	r3, #0
 80059c4:	69fa      	ldr	r2, [r7, #28]
 80059c6:	f002 0203 	and.w	r2, r2, #3
 80059ca:	0092      	lsls	r2, r2, #2
 80059cc:	4093      	lsls	r3, r2
 80059ce:	69ba      	ldr	r2, [r7, #24]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80059d4:	4935      	ldr	r1, [pc, #212]	; (8005aac <HAL_GPIO_Init+0x304>)
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	089b      	lsrs	r3, r3, #2
 80059da:	3302      	adds	r3, #2
 80059dc:	69ba      	ldr	r2, [r7, #24]
 80059de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80059e2:	4b3a      	ldr	r3, [pc, #232]	; (8005acc <HAL_GPIO_Init+0x324>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	43db      	mvns	r3, r3
 80059ec:	69ba      	ldr	r2, [r7, #24]
 80059ee:	4013      	ands	r3, r2
 80059f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d003      	beq.n	8005a06 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80059fe:	69ba      	ldr	r2, [r7, #24]
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005a06:	4a31      	ldr	r2, [pc, #196]	; (8005acc <HAL_GPIO_Init+0x324>)
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005a0c:	4b2f      	ldr	r3, [pc, #188]	; (8005acc <HAL_GPIO_Init+0x324>)
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	43db      	mvns	r3, r3
 8005a16:	69ba      	ldr	r2, [r7, #24]
 8005a18:	4013      	ands	r3, r2
 8005a1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d003      	beq.n	8005a30 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005a28:	69ba      	ldr	r2, [r7, #24]
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005a30:	4a26      	ldr	r2, [pc, #152]	; (8005acc <HAL_GPIO_Init+0x324>)
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005a36:	4b25      	ldr	r3, [pc, #148]	; (8005acc <HAL_GPIO_Init+0x324>)
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	43db      	mvns	r3, r3
 8005a40:	69ba      	ldr	r2, [r7, #24]
 8005a42:	4013      	ands	r3, r2
 8005a44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d003      	beq.n	8005a5a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005a52:	69ba      	ldr	r2, [r7, #24]
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005a5a:	4a1c      	ldr	r2, [pc, #112]	; (8005acc <HAL_GPIO_Init+0x324>)
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005a60:	4b1a      	ldr	r3, [pc, #104]	; (8005acc <HAL_GPIO_Init+0x324>)
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	43db      	mvns	r3, r3
 8005a6a:	69ba      	ldr	r2, [r7, #24]
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d003      	beq.n	8005a84 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005a7c:	69ba      	ldr	r2, [r7, #24]
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005a84:	4a11      	ldr	r2, [pc, #68]	; (8005acc <HAL_GPIO_Init+0x324>)
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	61fb      	str	r3, [r7, #28]
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	2b0f      	cmp	r3, #15
 8005a94:	f67f ae96 	bls.w	80057c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005a98:	bf00      	nop
 8005a9a:	bf00      	nop
 8005a9c:	3724      	adds	r7, #36	; 0x24
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr
 8005aa6:	bf00      	nop
 8005aa8:	40023800 	.word	0x40023800
 8005aac:	40013800 	.word	0x40013800
 8005ab0:	40020000 	.word	0x40020000
 8005ab4:	40020400 	.word	0x40020400
 8005ab8:	40020800 	.word	0x40020800
 8005abc:	40020c00 	.word	0x40020c00
 8005ac0:	40021000 	.word	0x40021000
 8005ac4:	40021400 	.word	0x40021400
 8005ac8:	40021800 	.word	0x40021800
 8005acc:	40013c00 	.word	0x40013c00

08005ad0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	460b      	mov	r3, r1
 8005ada:	807b      	strh	r3, [r7, #2]
 8005adc:	4613      	mov	r3, r2
 8005ade:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005ae0:	787b      	ldrb	r3, [r7, #1]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d003      	beq.n	8005aee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005ae6:	887a      	ldrh	r2, [r7, #2]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005aec:	e003      	b.n	8005af6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005aee:	887b      	ldrh	r3, [r7, #2]
 8005af0:	041a      	lsls	r2, r3, #16
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	619a      	str	r2, [r3, #24]
}
 8005af6:	bf00      	nop
 8005af8:	370c      	adds	r7, #12
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
	...

08005b04 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b086      	sub	sp, #24
 8005b08:	af02      	add	r7, sp, #8
 8005b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005b0c:	f7fe faae 	bl	800406c <HAL_GetTick>
 8005b10:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d101      	bne.n	8005b1c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e069      	b.n	8005bf0 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d10b      	bne.n	8005b40 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f7fd fb61 	bl	80031f8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8005b36:	f241 3188 	movw	r1, #5000	; 0x1388
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 fd46 	bl	80065cc <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	3b01      	subs	r3, #1
 8005b50:	021a      	lsls	r2, r3, #8
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	430a      	orrs	r2, r1
 8005b58:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b5e:	9300      	str	r3, [sp, #0]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2200      	movs	r2, #0
 8005b64:	2120      	movs	r1, #32
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 fd71 	bl	800664e <QSPI_WaitFlagStateUntilTimeout>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005b70:	7afb      	ldrb	r3, [r7, #11]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d137      	bne.n	8005be6 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005b80:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	6852      	ldr	r2, [r2, #4]
 8005b88:	0611      	lsls	r1, r2, #24
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	68d2      	ldr	r2, [r2, #12]
 8005b8e:	4311      	orrs	r1, r2
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	69d2      	ldr	r2, [r2, #28]
 8005b94:	4311      	orrs	r1, r2
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	6a12      	ldr	r2, [r2, #32]
 8005b9a:	4311      	orrs	r1, r2
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	6812      	ldr	r2, [r2, #0]
 8005ba0:	430b      	orrs	r3, r1
 8005ba2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	685a      	ldr	r2, [r3, #4]
 8005baa:	4b13      	ldr	r3, [pc, #76]	; (8005bf8 <HAL_QSPI_Init+0xf4>)
 8005bac:	4013      	ands	r3, r2
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	6912      	ldr	r2, [r2, #16]
 8005bb2:	0411      	lsls	r1, r2, #16
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	6952      	ldr	r2, [r2, #20]
 8005bb8:	4311      	orrs	r1, r2
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	6992      	ldr	r2, [r2, #24]
 8005bbe:	4311      	orrs	r1, r2
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	6812      	ldr	r2, [r2, #0]
 8005bc4:	430b      	orrs	r3, r1
 8005bc6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f042 0201 	orr.w	r2, r2, #1
 8005bd6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2201      	movs	r2, #1
 8005be2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005bee:	7afb      	ldrb	r3, [r7, #11]
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3710      	adds	r7, #16
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}
 8005bf8:	ffe0f8fe 	.word	0xffe0f8fe

08005bfc <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi : QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b086      	sub	sp, #24
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	f003 0304 	and.w	r3, r3, #4
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d064      	beq.n	8005ce8 <HAL_QSPI_IRQHandler+0xec>
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d05f      	beq.n	8005ce8 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	3320      	adds	r3, #32
 8005c2e:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	2b12      	cmp	r3, #18
 8005c3a:	d125      	bne.n	8005c88 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8005c3c:	e01c      	b.n	8005c78 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d00f      	beq.n	8005c66 <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4a:	781a      	ldrb	r2, [r3, #0]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c54:	1c5a      	adds	r2, r3, #1
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5e:	1e5a      	subs	r2, r3, #1
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	62da      	str	r2, [r3, #44]	; 0x2c
 8005c64:	e008      	b.n	8005c78 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005c74:	601a      	str	r2, [r3, #0]
          break;
 8005c76:	e033      	b.n	8005ce0 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	f003 0304 	and.w	r3, r3, #4
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d1db      	bne.n	8005c3e <HAL_QSPI_IRQHandler+0x42>
 8005c86:	e02b      	b.n	8005ce0 <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	2b22      	cmp	r3, #34	; 0x22
 8005c92:	d125      	bne.n	8005ce0 <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8005c94:	e01d      	b.n	8005cd2 <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d010      	beq.n	8005cc0 <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	7812      	ldrb	r2, [r2, #0]
 8005ca6:	b2d2      	uxtb	r2, r2
 8005ca8:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cae:	1c5a      	adds	r2, r3, #1
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb8:	1e5a      	subs	r2, r3, #1
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	639a      	str	r2, [r3, #56]	; 0x38
 8005cbe:	e008      	b.n	8005cd2 <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005cce:	601a      	str	r2, [r3, #0]
          break;
 8005cd0:	e006      	b.n	8005ce0 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	f003 0304 	and.w	r3, r3, #4
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d1da      	bne.n	8005c96 <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f000 fb8b 	bl	80063fc <HAL_QSPI_FifoThresholdCallback>
 8005ce6:	e142      	b.n	8005f6e <HAL_QSPI_IRQHandler+0x372>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	f003 0302 	and.w	r3, r3, #2
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	f000 80b6 	beq.w	8005e60 <HAL_QSPI_IRQHandler+0x264>
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	f000 80b0 	beq.w	8005e60 <HAL_QSPI_IRQHandler+0x264>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2202      	movs	r2, #2
 8005d06:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8005d16:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	2b12      	cmp	r3, #18
 8005d22:	d123      	bne.n	8005d6c <HAL_QSPI_IRQHandler+0x170>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 0304 	and.w	r3, r3, #4
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d011      	beq.n	8005d56 <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f022 0204 	bic.w	r2, r2, #4
 8005d40:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f022 0201 	bic.w	r2, r2, #1
 8005d54:	601a      	str	r2, [r3, #0]
      }

      /* Clear Busy bit */
      HAL_QSPI_Abort_IT(hqspi);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 fbdc 	bl	8006514 <HAL_QSPI_Abort_IT>

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f000 fb3f 	bl	80063e8 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8005d6a:	e0fd      	b.n	8005f68 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	2b22      	cmp	r3, #34	; 0x22
 8005d76:	d146      	bne.n	8005e06 <HAL_QSPI_IRQHandler+0x20a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 0304 	and.w	r3, r3, #4
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d012      	beq.n	8005dac <HAL_QSPI_IRQHandler+0x1b0>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f022 0204 	bic.w	r2, r2, #4
 8005d94:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f022 0201 	bic.w	r2, r2, #1
 8005da8:	601a      	str	r2, [r3, #0]
 8005daa:	e021      	b.n	8005df0 <HAL_QSPI_IRQHandler+0x1f4>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	3320      	adds	r3, #32
 8005db2:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8005db4:	e013      	b.n	8005dde <HAL_QSPI_IRQHandler+0x1e2>
        {
          if (hqspi->RxXferCount > 0U)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d017      	beq.n	8005dee <HAL_QSPI_IRQHandler+0x1f2>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	7812      	ldrb	r2, [r2, #0]
 8005dc6:	b2d2      	uxtb	r2, r2
 8005dc8:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dce:	1c5a      	adds	r2, r3, #1
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd8:	1e5a      	subs	r2, r3, #1
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d1e4      	bne.n	8005db6 <HAL_QSPI_IRQHandler+0x1ba>
 8005dec:	e000      	b.n	8005df0 <HAL_QSPI_IRQHandler+0x1f4>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 8005dee:	bf00      	nop
          }
        }
      }

      /* Workaround - Extra data written in the FIFO at the end of a read transfer */
      HAL_QSPI_Abort_IT(hqspi);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 fb8f 	bl	8006514 <HAL_QSPI_Abort_IT>

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 fae8 	bl	80063d4 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8005e04:	e0b0      	b.n	8005f68 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	d107      	bne.n	8005e22 <HAL_QSPI_IRQHandler+0x226>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2201      	movs	r2, #1
 8005e16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 fad0 	bl	80063c0 <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8005e20:	e0a2      	b.n	8005f68 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	2b08      	cmp	r3, #8
 8005e2c:	f040 809c 	bne.w	8005f68 <HAL_QSPI_IRQHandler+0x36c>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	695a      	ldr	r2, [r3, #20]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8005e3e:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d103      	bne.n	8005e58 <HAL_QSPI_IRQHandler+0x25c>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 faab 	bl	80063ac <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8005e56:	e087      	b.n	8005f68 <HAL_QSPI_IRQHandler+0x36c>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f000 fa9d 	bl	8006398 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8005e5e:	e083      	b.n	8005f68 <HAL_QSPI_IRQHandler+0x36c>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	f003 0308 	and.w	r3, r3, #8
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d01f      	beq.n	8005eaa <HAL_QSPI_IRQHandler+0x2ae>
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d01a      	beq.n	8005eaa <HAL_QSPI_IRQHandler+0x2ae>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2208      	movs	r2, #8
 8005e7a:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d00b      	beq.n	8005ea2 <HAL_QSPI_IRQHandler+0x2a6>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8005e98:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 fab4 	bl	8006410 <HAL_QSPI_StatusMatchCallback>
 8005ea8:	e061      	b.n	8005f6e <HAL_QSPI_IRQHandler+0x372>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	f003 0301 	and.w	r3, r3, #1
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d047      	beq.n	8005f44 <HAL_QSPI_IRQHandler+0x348>
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d042      	beq.n	8005f44 <HAL_QSPI_IRQHandler+0x348>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8005ed4:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eda:	f043 0202 	orr.w	r2, r3, #2
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 0304 	and.w	r3, r3, #4
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d021      	beq.n	8005f34 <HAL_QSPI_IRQHandler+0x338>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f022 0204 	bic.w	r2, r2, #4
 8005efe:	601a      	str	r2, [r3, #0]

      /* Disable the DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f04:	4a1c      	ldr	r2, [pc, #112]	; (8005f78 <HAL_QSPI_IRQHandler+0x37c>)
 8005f06:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f7ff f9bf 	bl	8005290 <HAL_DMA_Abort_IT>
 8005f12:	4603      	mov	r3, r0
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d029      	beq.n	8005f6c <HAL_QSPI_IRQHandler+0x370>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f1c:	f043 0204 	orr.w	r2, r3, #4
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f000 fa33 	bl	8006398 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005f32:	e01b      	b.n	8005f6c <HAL_QSPI_IRQHandler+0x370>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 fa2b 	bl	8006398 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005f42:	e013      	b.n	8005f6c <HAL_QSPI_IRQHandler+0x370>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	f003 0310 	and.w	r3, r3, #16
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00f      	beq.n	8005f6e <HAL_QSPI_IRQHandler+0x372>
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d00a      	beq.n	8005f6e <HAL_QSPI_IRQHandler+0x372>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2210      	movs	r2, #16
 8005f5e:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 fa5f 	bl	8006424 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 8005f66:	e002      	b.n	8005f6e <HAL_QSPI_IRQHandler+0x372>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8005f68:	bf00      	nop
 8005f6a:	e000      	b.n	8005f6e <HAL_QSPI_IRQHandler+0x372>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005f6c:	bf00      	nop
}
 8005f6e:	bf00      	nop
 8005f70:	3718      	adds	r7, #24
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop
 8005f78:	080065e9 	.word	0x080065e9

08005f7c <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b088      	sub	sp, #32
 8005f80:	af02      	add	r7, sp, #8
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005f88:	f7fe f870 	bl	800406c <HAL_GetTick>
 8005f8c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d101      	bne.n	8005f9e <HAL_QSPI_Command+0x22>
 8005f9a:	2302      	movs	r3, #2
 8005f9c:	e048      	b.n	8006030 <HAL_QSPI_Command+0xb4>
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d137      	bne.n	8006022 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2202      	movs	r2, #2
 8005fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	9300      	str	r3, [sp, #0]
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	2120      	movs	r1, #32
 8005fca:	68f8      	ldr	r0, [r7, #12]
 8005fcc:	f000 fb3f 	bl	800664e <QSPI_WaitFlagStateUntilTimeout>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8005fd4:	7dfb      	ldrb	r3, [r7, #23]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d125      	bne.n	8006026 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8005fda:	2200      	movs	r2, #0
 8005fdc:	68b9      	ldr	r1, [r7, #8]
 8005fde:	68f8      	ldr	r0, [r7, #12]
 8005fe0:	f000 fb6c 	bl	80066bc <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d115      	bne.n	8006018 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	9300      	str	r3, [sp, #0]
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	2102      	movs	r1, #2
 8005ff6:	68f8      	ldr	r0, [r7, #12]
 8005ff8:	f000 fb29 	bl	800664e <QSPI_WaitFlagStateUntilTimeout>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8006000:	7dfb      	ldrb	r3, [r7, #23]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d10f      	bne.n	8006026 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	2202      	movs	r2, #2
 800600c:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2201      	movs	r2, #1
 8006012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006016:	e006      	b.n	8006026 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006020:	e001      	b.n	8006026 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8006022:	2302      	movs	r3, #2
 8006024:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2200      	movs	r2, #0
 800602a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800602e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006030:	4618      	mov	r0, r3
 8006032:	3718      	adds	r7, #24
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b08a      	sub	sp, #40	; 0x28
 800603c:	af02      	add	r7, sp, #8
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006044:	2300      	movs	r3, #0
 8006046:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8006048:	f7fe f810 	bl	800406c <HAL_GetTick>
 800604c:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	3320      	adds	r3, #32
 8006054:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800605c:	b2db      	uxtb	r3, r3
 800605e:	2b01      	cmp	r3, #1
 8006060:	d101      	bne.n	8006066 <HAL_QSPI_Transmit+0x2e>
 8006062:	2302      	movs	r3, #2
 8006064:	e07b      	b.n	800615e <HAL_QSPI_Transmit+0x126>
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2201      	movs	r2, #1
 800606a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006074:	b2db      	uxtb	r3, r3
 8006076:	2b01      	cmp	r3, #1
 8006078:	d16a      	bne.n	8006150 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2200      	movs	r2, #0
 800607e:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d05b      	beq.n	800613e <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2212      	movs	r2, #18
 800608a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	691b      	ldr	r3, [r3, #16]
 8006094:	1c5a      	adds	r2, r3, #1
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	1c5a      	adds	r2, r3, #1
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	68ba      	ldr	r2, [r7, #8]
 80060aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	695a      	ldr	r2, [r3, #20]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80060ba:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 80060bc:	e01b      	b.n	80060f6 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	9300      	str	r3, [sp, #0]
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	2201      	movs	r2, #1
 80060c6:	2104      	movs	r1, #4
 80060c8:	68f8      	ldr	r0, [r7, #12]
 80060ca:	f000 fac0 	bl	800664e <QSPI_WaitFlagStateUntilTimeout>
 80060ce:	4603      	mov	r3, r0
 80060d0:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 80060d2:	7ffb      	ldrb	r3, [r7, #31]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d113      	bne.n	8006100 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060dc:	781a      	ldrb	r2, [r3, #0]
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e6:	1c5a      	adds	r2, r3, #1
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f0:	1e5a      	subs	r2, r3, #1
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d1df      	bne.n	80060be <HAL_QSPI_Transmit+0x86>
 80060fe:	e000      	b.n	8006102 <HAL_QSPI_Transmit+0xca>
          break;
 8006100:	bf00      	nop
      }

      if (status == HAL_OK)
 8006102:	7ffb      	ldrb	r3, [r7, #31]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d115      	bne.n	8006134 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	9300      	str	r3, [sp, #0]
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	2201      	movs	r2, #1
 8006110:	2102      	movs	r1, #2
 8006112:	68f8      	ldr	r0, [r7, #12]
 8006114:	f000 fa9b 	bl	800664e <QSPI_WaitFlagStateUntilTimeout>
 8006118:	4603      	mov	r3, r0
 800611a:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800611c:	7ffb      	ldrb	r3, [r7, #31]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d108      	bne.n	8006134 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	2202      	movs	r2, #2
 8006128:	60da      	str	r2, [r3, #12]

          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	f000 f984 	bl	8006438 <HAL_QSPI_Abort>
 8006130:	4603      	mov	r3, r0
 8006132:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800613c:	e00a      	b.n	8006154 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006142:	f043 0208 	orr.w	r2, r3, #8
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	77fb      	strb	r3, [r7, #31]
 800614e:	e001      	b.n	8006154 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 8006150:	2302      	movs	r3, #2
 8006152:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2200      	movs	r2, #0
 8006158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800615c:	7ffb      	ldrb	r3, [r7, #31]
}
 800615e:	4618      	mov	r0, r3
 8006160:	3720      	adds	r7, #32
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}

08006166 <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8006166:	b580      	push	{r7, lr}
 8006168:	b08a      	sub	sp, #40	; 0x28
 800616a:	af02      	add	r7, sp, #8
 800616c:	60f8      	str	r0, [r7, #12]
 800616e:	60b9      	str	r1, [r7, #8]
 8006170:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006172:	2300      	movs	r3, #0
 8006174:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8006176:	f7fd ff79 	bl	800406c <HAL_GetTick>
 800617a:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	699b      	ldr	r3, [r3, #24]
 8006182:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	3320      	adds	r3, #32
 800618a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006192:	b2db      	uxtb	r3, r3
 8006194:	2b01      	cmp	r3, #1
 8006196:	d101      	bne.n	800619c <HAL_QSPI_Receive+0x36>
 8006198:	2302      	movs	r3, #2
 800619a:	e082      	b.n	80062a2 <HAL_QSPI_Receive+0x13c>
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d171      	bne.n	8006294 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2200      	movs	r2, #0
 80061b4:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d062      	beq.n	8006282 <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2222      	movs	r2, #34	; 0x22
 80061c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	1c5a      	adds	r2, r3, #1
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	1c5a      	adds	r2, r3, #1
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	68ba      	ldr	r2, [r7, #8]
 80061e0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	695b      	ldr	r3, [r3, #20]
 80061e8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80061f4:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	697a      	ldr	r2, [r7, #20]
 80061fc:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 80061fe:	e01c      	b.n	800623a <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	9300      	str	r3, [sp, #0]
 8006204:	69bb      	ldr	r3, [r7, #24]
 8006206:	2201      	movs	r2, #1
 8006208:	2106      	movs	r1, #6
 800620a:	68f8      	ldr	r0, [r7, #12]
 800620c:	f000 fa1f 	bl	800664e <QSPI_WaitFlagStateUntilTimeout>
 8006210:	4603      	mov	r3, r0
 8006212:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8006214:	7ffb      	ldrb	r3, [r7, #31]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d114      	bne.n	8006244 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800621e:	693a      	ldr	r2, [r7, #16]
 8006220:	7812      	ldrb	r2, [r2, #0]
 8006222:	b2d2      	uxtb	r2, r2
 8006224:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800622a:	1c5a      	adds	r2, r3, #1
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006234:	1e5a      	subs	r2, r3, #1
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800623e:	2b00      	cmp	r3, #0
 8006240:	d1de      	bne.n	8006200 <HAL_QSPI_Receive+0x9a>
 8006242:	e000      	b.n	8006246 <HAL_QSPI_Receive+0xe0>
          break;
 8006244:	bf00      	nop
      }

      if (status == HAL_OK)
 8006246:	7ffb      	ldrb	r3, [r7, #31]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d115      	bne.n	8006278 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	9300      	str	r3, [sp, #0]
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	2201      	movs	r2, #1
 8006254:	2102      	movs	r1, #2
 8006256:	68f8      	ldr	r0, [r7, #12]
 8006258:	f000 f9f9 	bl	800664e <QSPI_WaitFlagStateUntilTimeout>
 800625c:	4603      	mov	r3, r0
 800625e:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8006260:	7ffb      	ldrb	r3, [r7, #31]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d108      	bne.n	8006278 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	2202      	movs	r2, #2
 800626c:	60da      	str	r2, [r3, #12]

          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 800626e:	68f8      	ldr	r0, [r7, #12]
 8006270:	f000 f8e2 	bl	8006438 <HAL_QSPI_Abort>
 8006274:	4603      	mov	r3, r0
 8006276:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006280:	e00a      	b.n	8006298 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006286:	f043 0208 	orr.w	r2, r3, #8
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	77fb      	strb	r3, [r7, #31]
 8006292:	e001      	b.n	8006298 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 8006294:	2302      	movs	r3, #2
 8006296:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2200      	movs	r2, #0
 800629c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 80062a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3720      	adds	r7, #32
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}

080062aa <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 80062aa:	b580      	push	{r7, lr}
 80062ac:	b088      	sub	sp, #32
 80062ae:	af02      	add	r7, sp, #8
 80062b0:	60f8      	str	r0, [r7, #12]
 80062b2:	60b9      	str	r1, [r7, #8]
 80062b4:	607a      	str	r2, [r7, #4]
 80062b6:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80062b8:	f7fd fed8 	bl	800406c <HAL_GetTick>
 80062bc:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d101      	bne.n	80062ce <HAL_QSPI_AutoPolling+0x24>
 80062ca:	2302      	movs	r3, #2
 80062cc:	e060      	b.n	8006390 <HAL_QSPI_AutoPolling+0xe6>
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2201      	movs	r2, #1
 80062d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d14f      	bne.n	8006382 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2200      	movs	r2, #0
 80062e6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2242      	movs	r2, #66	; 0x42
 80062ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	9300      	str	r3, [sp, #0]
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	2200      	movs	r2, #0
 80062f8:	2120      	movs	r1, #32
 80062fa:	68f8      	ldr	r0, [r7, #12]
 80062fc:	f000 f9a7 	bl	800664e <QSPI_WaitFlagStateUntilTimeout>
 8006300:	4603      	mov	r3, r0
 8006302:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8006304:	7dfb      	ldrb	r3, [r7, #23]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d13d      	bne.n	8006386 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	6812      	ldr	r2, [r2, #0]
 8006312:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	6852      	ldr	r2, [r2, #4]
 800631c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	6892      	ldr	r2, [r2, #8]
 8006326:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	691b      	ldr	r3, [r3, #16]
 8006336:	431a      	orrs	r2, r3
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8006340:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	68da      	ldr	r2, [r3, #12]
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800634a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800634e:	68b9      	ldr	r1, [r7, #8]
 8006350:	68f8      	ldr	r0, [r7, #12]
 8006352:	f000 f9b3 	bl	80066bc <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	9300      	str	r3, [sp, #0]
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	2201      	movs	r2, #1
 800635e:	2108      	movs	r1, #8
 8006360:	68f8      	ldr	r0, [r7, #12]
 8006362:	f000 f974 	bl	800664e <QSPI_WaitFlagStateUntilTimeout>
 8006366:	4603      	mov	r3, r0
 8006368:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800636a:	7dfb      	ldrb	r3, [r7, #23]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d10a      	bne.n	8006386 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2208      	movs	r2, #8
 8006376:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006380:	e001      	b.n	8006386 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8006382:	2302      	movs	r3, #2
 8006384:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2200      	movs	r2, #0
 800638a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800638e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006390:	4618      	mov	r0, r3
 8006392:	3718      	adds	r7, #24
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 80063a0:	bf00      	nop
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 80063b4:	bf00      	nop
 80063b6:	370c      	adds	r7, #12
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 80063c8:	bf00      	nop
 80063ca:	370c      	adds	r7, #12
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b083      	sub	sp, #12
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 80063dc:	bf00      	nop
 80063de:	370c      	adds	r7, #12
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 80063f0:	bf00      	nop
 80063f2:	370c      	adds	r7, #12
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 8006404:	bf00      	nop
 8006406:	370c      	adds	r7, #12
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 8006418:	bf00      	nop
 800641a:	370c      	adds	r7, #12
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 800642c:	bf00      	nop
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b086      	sub	sp, #24
 800643c:	af02      	add	r7, sp, #8
 800643e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006440:	2300      	movs	r3, #0
 8006442:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8006444:	f7fd fe12 	bl	800406c <HAL_GetTick>
 8006448:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006450:	b2db      	uxtb	r3, r3
 8006452:	f003 0302 	and.w	r3, r3, #2
 8006456:	2b00      	cmp	r3, #0
 8006458:	d056      	beq.n	8006508 <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 0304 	and.w	r3, r3, #4
 800646c:	2b00      	cmp	r3, #0
 800646e:	d017      	beq.n	80064a0 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f022 0204 	bic.w	r2, r2, #4
 800647e:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006484:	4618      	mov	r0, r3
 8006486:	f7fe fe93 	bl	80051b0 <HAL_DMA_Abort>
 800648a:	4603      	mov	r3, r0
 800648c:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 800648e:	7bfb      	ldrb	r3, [r7, #15]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d005      	beq.n	80064a0 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006498:	f043 0204 	orr.w	r2, r3, #4
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681a      	ldr	r2, [r3, #0]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f042 0202 	orr.w	r2, r2, #2
 80064ae:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064b4:	9300      	str	r3, [sp, #0]
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	2201      	movs	r2, #1
 80064ba:	2102      	movs	r1, #2
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f000 f8c6 	bl	800664e <QSPI_WaitFlagStateUntilTimeout>
 80064c2:	4603      	mov	r3, r0
 80064c4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80064c6:	7bfb      	ldrb	r3, [r7, #15]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d10e      	bne.n	80064ea <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	2202      	movs	r2, #2
 80064d2:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064d8:	9300      	str	r3, [sp, #0]
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	2200      	movs	r2, #0
 80064de:	2120      	movs	r1, #32
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 f8b4 	bl	800664e <QSPI_WaitFlagStateUntilTimeout>
 80064e6:	4603      	mov	r3, r0
 80064e8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80064ea:	7bfb      	ldrb	r3, [r7, #15]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d10b      	bne.n	8006508 <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	695a      	ldr	r2, [r3, #20]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80064fe:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
  }

  return status;
 8006508:	7bfb      	ldrb	r3, [r7, #15]
}
 800650a:	4618      	mov	r0, r3
 800650c:	3710      	adds	r7, #16
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
	...

08006514 <HAL_QSPI_Abort_IT>:
* @brief  Abort the current transmission (non-blocking function)
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort_IT(QSPI_HandleTypeDef *hqspi)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b084      	sub	sp, #16
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800651c:	2300      	movs	r3, #0
 800651e:	73fb      	strb	r3, [r7, #15]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006526:	b2db      	uxtb	r3, r3
 8006528:	f003 0302 	and.w	r3, r3, #2
 800652c:	2b00      	cmp	r3, #0
 800652e:	d046      	beq.n	80065be <HAL_QSPI_Abort_IT+0xaa>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_ABORT;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2208      	movs	r2, #8
 800653c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable all interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_TO | QSPI_IT_SM | QSPI_IT_FT | QSPI_IT_TC | QSPI_IT_TE));
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800654e:	601a      	str	r2, [r3, #0]

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f003 0304 	and.w	r3, r3, #4
 800655a:	2b00      	cmp	r3, #0
 800655c:	d01b      	beq.n	8006596 <HAL_QSPI_Abort_IT+0x82>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f022 0204 	bic.w	r2, r2, #4
 800656c:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006572:	4a15      	ldr	r2, [pc, #84]	; (80065c8 <HAL_QSPI_Abort_IT+0xb4>)
 8006574:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800657a:	4618      	mov	r0, r3
 800657c:	f7fe fe88 	bl	8005290 <HAL_DMA_Abort_IT>
 8006580:	4603      	mov	r3, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d01b      	beq.n	80065be <HAL_QSPI_Abort_IT+0xaa>
      {
        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2201      	movs	r2, #1
 800658a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f7ff ff0c 	bl	80063ac <HAL_QSPI_AbortCpltCallback>
 8006594:	e013      	b.n	80065be <HAL_QSPI_Abort_IT+0xaa>
      }
    }
    else
    {
      /* Clear interrupt */
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	2202      	movs	r2, #2
 800659c:	60da      	str	r2, [r3, #12]

      /* Enable the QSPI Transfer Complete Interrupt */
      __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80065ac:	601a      	str	r2, [r3, #0]

      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f042 0202 	orr.w	r2, r2, #2
 80065bc:	601a      	str	r2, [r3, #0]
    }
  }
  return status;
 80065be:	7bfb      	ldrb	r3, [r7, #15]
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3710      	adds	r7, #16
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}
 80065c8:	080065e9 	.word	0x080065e9

080065cc <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b083      	sub	sp, #12
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	683a      	ldr	r2, [r7, #0]
 80065da:	649a      	str	r2, [r3, #72]	; 0x48
}
 80065dc:	bf00      	nop
 80065de:	370c      	adds	r7, #12
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr

080065e8 <QSPI_DMAAbortCplt>:
  * @brief  DMA QSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f4:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2200      	movs	r2, #0
 80065fa:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2200      	movs	r2, #0
 8006600:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006608:	b2db      	uxtb	r3, r3
 800660a:	2b08      	cmp	r3, #8
 800660c:	d114      	bne.n	8006638 <QSPI_DMAAbortCplt+0x50>
  {
    /* DMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2202      	movs	r2, #2
 8006614:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006624:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f042 0202 	orr.w	r2, r2, #2
 8006634:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 8006636:	e006      	b.n	8006646 <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2201      	movs	r2, #1
 800663c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 8006640:	68f8      	ldr	r0, [r7, #12]
 8006642:	f7ff fea9 	bl	8006398 <HAL_QSPI_ErrorCallback>
}
 8006646:	bf00      	nop
 8006648:	3710      	adds	r7, #16
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}

0800664e <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800664e:	b580      	push	{r7, lr}
 8006650:	b084      	sub	sp, #16
 8006652:	af00      	add	r7, sp, #0
 8006654:	60f8      	str	r0, [r7, #12]
 8006656:	60b9      	str	r1, [r7, #8]
 8006658:	603b      	str	r3, [r7, #0]
 800665a:	4613      	mov	r3, r2
 800665c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800665e:	e01a      	b.n	8006696 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006666:	d016      	beq.n	8006696 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006668:	f7fd fd00 	bl	800406c <HAL_GetTick>
 800666c:	4602      	mov	r2, r0
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	69ba      	ldr	r2, [r7, #24]
 8006674:	429a      	cmp	r2, r3
 8006676:	d302      	bcc.n	800667e <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006678:	69bb      	ldr	r3, [r7, #24]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d10b      	bne.n	8006696 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2204      	movs	r2, #4
 8006682:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800668a:	f043 0201 	orr.w	r2, r3, #1
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	e00e      	b.n	80066b4 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	689a      	ldr	r2, [r3, #8]
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	4013      	ands	r3, r2
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	bf14      	ite	ne
 80066a4:	2301      	movne	r3, #1
 80066a6:	2300      	moveq	r3, #0
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	461a      	mov	r2, r3
 80066ac:	79fb      	ldrb	r3, [r7, #7]
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d1d6      	bne.n	8006660 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80066b2:	2300      	movs	r3, #0
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3710      	adds	r7, #16
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	60b9      	str	r1, [r7, #8]
 80066c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d009      	beq.n	80066e4 <QSPI_Config+0x28>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80066d6:	d005      	beq.n	80066e4 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	3a01      	subs	r2, #1
 80066e2:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	699b      	ldr	r3, [r3, #24]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	f000 80b9 	beq.w	8006860 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	6a1b      	ldr	r3, [r3, #32]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d05f      	beq.n	80067b6 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	68ba      	ldr	r2, [r7, #8]
 80066fc:	6892      	ldr	r2, [r2, #8]
 80066fe:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	69db      	ldr	r3, [r3, #28]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d031      	beq.n	800676c <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006710:	431a      	orrs	r2, r3
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006716:	431a      	orrs	r2, r3
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671c:	431a      	orrs	r2, r3
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	695b      	ldr	r3, [r3, #20]
 8006722:	049b      	lsls	r3, r3, #18
 8006724:	431a      	orrs	r2, r3
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	431a      	orrs	r2, r3
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	6a1b      	ldr	r3, [r3, #32]
 8006730:	431a      	orrs	r2, r3
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	431a      	orrs	r2, r3
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	69db      	ldr	r3, [r3, #28]
 800673c:	431a      	orrs	r2, r3
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	699b      	ldr	r3, [r3, #24]
 8006742:	431a      	orrs	r2, r3
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	ea42 0103 	orr.w	r1, r2, r3
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	430a      	orrs	r2, r1
 8006754:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800675c:	f000 812e 	beq.w	80069bc <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	68ba      	ldr	r2, [r7, #8]
 8006766:	6852      	ldr	r2, [r2, #4]
 8006768:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800676a:	e127      	b.n	80069bc <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006774:	431a      	orrs	r2, r3
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800677a:	431a      	orrs	r2, r3
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006780:	431a      	orrs	r2, r3
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	695b      	ldr	r3, [r3, #20]
 8006786:	049b      	lsls	r3, r3, #18
 8006788:	431a      	orrs	r2, r3
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	431a      	orrs	r2, r3
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	6a1b      	ldr	r3, [r3, #32]
 8006794:	431a      	orrs	r2, r3
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	69db      	ldr	r3, [r3, #28]
 800679a:	431a      	orrs	r2, r3
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	699b      	ldr	r3, [r3, #24]
 80067a0:	431a      	orrs	r2, r3
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	ea42 0103 	orr.w	r1, r2, r3
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	430a      	orrs	r2, r1
 80067b2:	615a      	str	r2, [r3, #20]
}
 80067b4:	e102      	b.n	80069bc <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	69db      	ldr	r3, [r3, #28]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d02e      	beq.n	800681c <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c6:	431a      	orrs	r2, r3
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067cc:	431a      	orrs	r2, r3
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d2:	431a      	orrs	r2, r3
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	695b      	ldr	r3, [r3, #20]
 80067d8:	049b      	lsls	r3, r3, #18
 80067da:	431a      	orrs	r2, r3
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	6a1b      	ldr	r3, [r3, #32]
 80067e0:	431a      	orrs	r2, r3
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	431a      	orrs	r2, r3
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	69db      	ldr	r3, [r3, #28]
 80067ec:	431a      	orrs	r2, r3
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	699b      	ldr	r3, [r3, #24]
 80067f2:	431a      	orrs	r2, r3
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	ea42 0103 	orr.w	r1, r2, r3
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	430a      	orrs	r2, r1
 8006804:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800680c:	f000 80d6 	beq.w	80069bc <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	68ba      	ldr	r2, [r7, #8]
 8006816:	6852      	ldr	r2, [r2, #4]
 8006818:	619a      	str	r2, [r3, #24]
}
 800681a:	e0cf      	b.n	80069bc <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006824:	431a      	orrs	r2, r3
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800682a:	431a      	orrs	r2, r3
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006830:	431a      	orrs	r2, r3
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	695b      	ldr	r3, [r3, #20]
 8006836:	049b      	lsls	r3, r3, #18
 8006838:	431a      	orrs	r2, r3
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	6a1b      	ldr	r3, [r3, #32]
 800683e:	431a      	orrs	r2, r3
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	69db      	ldr	r3, [r3, #28]
 8006844:	431a      	orrs	r2, r3
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	699b      	ldr	r3, [r3, #24]
 800684a:	431a      	orrs	r2, r3
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	ea42 0103 	orr.w	r1, r2, r3
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	430a      	orrs	r2, r1
 800685c:	615a      	str	r2, [r3, #20]
}
 800685e:	e0ad      	b.n	80069bc <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	6a1b      	ldr	r3, [r3, #32]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d058      	beq.n	800691a <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	68ba      	ldr	r2, [r7, #8]
 800686e:	6892      	ldr	r2, [r2, #8]
 8006870:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	69db      	ldr	r3, [r3, #28]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d02d      	beq.n	80068d6 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006882:	431a      	orrs	r2, r3
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006888:	431a      	orrs	r2, r3
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688e:	431a      	orrs	r2, r3
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	695b      	ldr	r3, [r3, #20]
 8006894:	049b      	lsls	r3, r3, #18
 8006896:	431a      	orrs	r2, r3
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	691b      	ldr	r3, [r3, #16]
 800689c:	431a      	orrs	r2, r3
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	6a1b      	ldr	r3, [r3, #32]
 80068a2:	431a      	orrs	r2, r3
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	431a      	orrs	r2, r3
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	69db      	ldr	r3, [r3, #28]
 80068ae:	431a      	orrs	r2, r3
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	699b      	ldr	r3, [r3, #24]
 80068b4:	ea42 0103 	orr.w	r1, r2, r3
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	430a      	orrs	r2, r1
 80068c0:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80068c8:	d078      	beq.n	80069bc <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	68ba      	ldr	r2, [r7, #8]
 80068d0:	6852      	ldr	r2, [r2, #4]
 80068d2:	619a      	str	r2, [r3, #24]
}
 80068d4:	e072      	b.n	80069bc <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068de:	431a      	orrs	r2, r3
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068e4:	431a      	orrs	r2, r3
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ea:	431a      	orrs	r2, r3
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	695b      	ldr	r3, [r3, #20]
 80068f0:	049b      	lsls	r3, r3, #18
 80068f2:	431a      	orrs	r2, r3
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	691b      	ldr	r3, [r3, #16]
 80068f8:	431a      	orrs	r2, r3
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	6a1b      	ldr	r3, [r3, #32]
 80068fe:	431a      	orrs	r2, r3
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	69db      	ldr	r3, [r3, #28]
 8006904:	431a      	orrs	r2, r3
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	699b      	ldr	r3, [r3, #24]
 800690a:	ea42 0103 	orr.w	r1, r2, r3
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	430a      	orrs	r2, r1
 8006916:	615a      	str	r2, [r3, #20]
}
 8006918:	e050      	b.n	80069bc <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	69db      	ldr	r3, [r3, #28]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d02a      	beq.n	8006978 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800692a:	431a      	orrs	r2, r3
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006930:	431a      	orrs	r2, r3
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006936:	431a      	orrs	r2, r3
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	695b      	ldr	r3, [r3, #20]
 800693c:	049b      	lsls	r3, r3, #18
 800693e:	431a      	orrs	r2, r3
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	6a1b      	ldr	r3, [r3, #32]
 8006944:	431a      	orrs	r2, r3
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	68db      	ldr	r3, [r3, #12]
 800694a:	431a      	orrs	r2, r3
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	69db      	ldr	r3, [r3, #28]
 8006950:	431a      	orrs	r2, r3
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	699b      	ldr	r3, [r3, #24]
 8006956:	ea42 0103 	orr.w	r1, r2, r3
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	430a      	orrs	r2, r1
 8006962:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800696a:	d027      	beq.n	80069bc <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	68ba      	ldr	r2, [r7, #8]
 8006972:	6852      	ldr	r2, [r2, #4]
 8006974:	619a      	str	r2, [r3, #24]
}
 8006976:	e021      	b.n	80069bc <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800697c:	2b00      	cmp	r3, #0
 800697e:	d01d      	beq.n	80069bc <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006988:	431a      	orrs	r2, r3
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800698e:	431a      	orrs	r2, r3
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006994:	431a      	orrs	r2, r3
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	695b      	ldr	r3, [r3, #20]
 800699a:	049b      	lsls	r3, r3, #18
 800699c:	431a      	orrs	r2, r3
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	6a1b      	ldr	r3, [r3, #32]
 80069a2:	431a      	orrs	r2, r3
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	69db      	ldr	r3, [r3, #28]
 80069a8:	431a      	orrs	r2, r3
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	ea42 0103 	orr.w	r1, r2, r3
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	430a      	orrs	r2, r1
 80069ba:	615a      	str	r2, [r3, #20]
}
 80069bc:	bf00      	nop
 80069be:	3714      	adds	r7, #20
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr

080069c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d101      	bne.n	80069dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	e0cc      	b.n	8006b76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80069dc:	4b68      	ldr	r3, [pc, #416]	; (8006b80 <HAL_RCC_ClockConfig+0x1b8>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f003 030f 	and.w	r3, r3, #15
 80069e4:	683a      	ldr	r2, [r7, #0]
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d90c      	bls.n	8006a04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069ea:	4b65      	ldr	r3, [pc, #404]	; (8006b80 <HAL_RCC_ClockConfig+0x1b8>)
 80069ec:	683a      	ldr	r2, [r7, #0]
 80069ee:	b2d2      	uxtb	r2, r2
 80069f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069f2:	4b63      	ldr	r3, [pc, #396]	; (8006b80 <HAL_RCC_ClockConfig+0x1b8>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f003 030f 	and.w	r3, r3, #15
 80069fa:	683a      	ldr	r2, [r7, #0]
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d001      	beq.n	8006a04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006a00:	2301      	movs	r3, #1
 8006a02:	e0b8      	b.n	8006b76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 0302 	and.w	r3, r3, #2
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d020      	beq.n	8006a52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f003 0304 	and.w	r3, r3, #4
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d005      	beq.n	8006a28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006a1c:	4b59      	ldr	r3, [pc, #356]	; (8006b84 <HAL_RCC_ClockConfig+0x1bc>)
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	4a58      	ldr	r2, [pc, #352]	; (8006b84 <HAL_RCC_ClockConfig+0x1bc>)
 8006a22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006a26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f003 0308 	and.w	r3, r3, #8
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d005      	beq.n	8006a40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006a34:	4b53      	ldr	r3, [pc, #332]	; (8006b84 <HAL_RCC_ClockConfig+0x1bc>)
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	4a52      	ldr	r2, [pc, #328]	; (8006b84 <HAL_RCC_ClockConfig+0x1bc>)
 8006a3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006a3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a40:	4b50      	ldr	r3, [pc, #320]	; (8006b84 <HAL_RCC_ClockConfig+0x1bc>)
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	494d      	ldr	r1, [pc, #308]	; (8006b84 <HAL_RCC_ClockConfig+0x1bc>)
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f003 0301 	and.w	r3, r3, #1
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d044      	beq.n	8006ae8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d107      	bne.n	8006a76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a66:	4b47      	ldr	r3, [pc, #284]	; (8006b84 <HAL_RCC_ClockConfig+0x1bc>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d119      	bne.n	8006aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	e07f      	b.n	8006b76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	2b02      	cmp	r3, #2
 8006a7c:	d003      	beq.n	8006a86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a82:	2b03      	cmp	r3, #3
 8006a84:	d107      	bne.n	8006a96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a86:	4b3f      	ldr	r3, [pc, #252]	; (8006b84 <HAL_RCC_ClockConfig+0x1bc>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d109      	bne.n	8006aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	e06f      	b.n	8006b76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a96:	4b3b      	ldr	r3, [pc, #236]	; (8006b84 <HAL_RCC_ClockConfig+0x1bc>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 0302 	and.w	r3, r3, #2
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d101      	bne.n	8006aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e067      	b.n	8006b76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006aa6:	4b37      	ldr	r3, [pc, #220]	; (8006b84 <HAL_RCC_ClockConfig+0x1bc>)
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	f023 0203 	bic.w	r2, r3, #3
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	4934      	ldr	r1, [pc, #208]	; (8006b84 <HAL_RCC_ClockConfig+0x1bc>)
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006ab8:	f7fd fad8 	bl	800406c <HAL_GetTick>
 8006abc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006abe:	e00a      	b.n	8006ad6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ac0:	f7fd fad4 	bl	800406c <HAL_GetTick>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	1ad3      	subs	r3, r2, r3
 8006aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d901      	bls.n	8006ad6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006ad2:	2303      	movs	r3, #3
 8006ad4:	e04f      	b.n	8006b76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ad6:	4b2b      	ldr	r3, [pc, #172]	; (8006b84 <HAL_RCC_ClockConfig+0x1bc>)
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	f003 020c 	and.w	r2, r3, #12
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d1eb      	bne.n	8006ac0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006ae8:	4b25      	ldr	r3, [pc, #148]	; (8006b80 <HAL_RCC_ClockConfig+0x1b8>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f003 030f 	and.w	r3, r3, #15
 8006af0:	683a      	ldr	r2, [r7, #0]
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d20c      	bcs.n	8006b10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006af6:	4b22      	ldr	r3, [pc, #136]	; (8006b80 <HAL_RCC_ClockConfig+0x1b8>)
 8006af8:	683a      	ldr	r2, [r7, #0]
 8006afa:	b2d2      	uxtb	r2, r2
 8006afc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006afe:	4b20      	ldr	r3, [pc, #128]	; (8006b80 <HAL_RCC_ClockConfig+0x1b8>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f003 030f 	and.w	r3, r3, #15
 8006b06:	683a      	ldr	r2, [r7, #0]
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d001      	beq.n	8006b10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e032      	b.n	8006b76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f003 0304 	and.w	r3, r3, #4
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d008      	beq.n	8006b2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b1c:	4b19      	ldr	r3, [pc, #100]	; (8006b84 <HAL_RCC_ClockConfig+0x1bc>)
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	4916      	ldr	r1, [pc, #88]	; (8006b84 <HAL_RCC_ClockConfig+0x1bc>)
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f003 0308 	and.w	r3, r3, #8
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d009      	beq.n	8006b4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006b3a:	4b12      	ldr	r3, [pc, #72]	; (8006b84 <HAL_RCC_ClockConfig+0x1bc>)
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	691b      	ldr	r3, [r3, #16]
 8006b46:	00db      	lsls	r3, r3, #3
 8006b48:	490e      	ldr	r1, [pc, #56]	; (8006b84 <HAL_RCC_ClockConfig+0x1bc>)
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006b4e:	f000 f887 	bl	8006c60 <HAL_RCC_GetSysClockFreq>
 8006b52:	4602      	mov	r2, r0
 8006b54:	4b0b      	ldr	r3, [pc, #44]	; (8006b84 <HAL_RCC_ClockConfig+0x1bc>)
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	091b      	lsrs	r3, r3, #4
 8006b5a:	f003 030f 	and.w	r3, r3, #15
 8006b5e:	490a      	ldr	r1, [pc, #40]	; (8006b88 <HAL_RCC_ClockConfig+0x1c0>)
 8006b60:	5ccb      	ldrb	r3, [r1, r3]
 8006b62:	fa22 f303 	lsr.w	r3, r2, r3
 8006b66:	4a09      	ldr	r2, [pc, #36]	; (8006b8c <HAL_RCC_ClockConfig+0x1c4>)
 8006b68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006b6a:	4b09      	ldr	r3, [pc, #36]	; (8006b90 <HAL_RCC_ClockConfig+0x1c8>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f7fc fbee 	bl	8003350 <HAL_InitTick>

  return HAL_OK;
 8006b74:	2300      	movs	r3, #0
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3710      	adds	r7, #16
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	40023c00 	.word	0x40023c00
 8006b84:	40023800 	.word	0x40023800
 8006b88:	0800ba70 	.word	0x0800ba70
 8006b8c:	20000078 	.word	0x20000078
 8006b90:	2000007c 	.word	0x2000007c

08006b94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b94:	b480      	push	{r7}
 8006b96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b98:	4b03      	ldr	r3, [pc, #12]	; (8006ba8 <HAL_RCC_GetHCLKFreq+0x14>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr
 8006ba6:	bf00      	nop
 8006ba8:	20000078 	.word	0x20000078

08006bac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006bb0:	f7ff fff0 	bl	8006b94 <HAL_RCC_GetHCLKFreq>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	4b05      	ldr	r3, [pc, #20]	; (8006bcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	0a9b      	lsrs	r3, r3, #10
 8006bbc:	f003 0307 	and.w	r3, r3, #7
 8006bc0:	4903      	ldr	r1, [pc, #12]	; (8006bd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006bc2:	5ccb      	ldrb	r3, [r1, r3]
 8006bc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	bd80      	pop	{r7, pc}
 8006bcc:	40023800 	.word	0x40023800
 8006bd0:	0800ba80 	.word	0x0800ba80

08006bd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006bd8:	f7ff ffdc 	bl	8006b94 <HAL_RCC_GetHCLKFreq>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	4b05      	ldr	r3, [pc, #20]	; (8006bf4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	0b5b      	lsrs	r3, r3, #13
 8006be4:	f003 0307 	and.w	r3, r3, #7
 8006be8:	4903      	ldr	r1, [pc, #12]	; (8006bf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006bea:	5ccb      	ldrb	r3, [r1, r3]
 8006bec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	bd80      	pop	{r7, pc}
 8006bf4:	40023800 	.word	0x40023800
 8006bf8:	0800ba80 	.word	0x0800ba80

08006bfc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	220f      	movs	r2, #15
 8006c0a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006c0c:	4b12      	ldr	r3, [pc, #72]	; (8006c58 <HAL_RCC_GetClockConfig+0x5c>)
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	f003 0203 	and.w	r2, r3, #3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006c18:	4b0f      	ldr	r3, [pc, #60]	; (8006c58 <HAL_RCC_GetClockConfig+0x5c>)
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006c24:	4b0c      	ldr	r3, [pc, #48]	; (8006c58 <HAL_RCC_GetClockConfig+0x5c>)
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006c30:	4b09      	ldr	r3, [pc, #36]	; (8006c58 <HAL_RCC_GetClockConfig+0x5c>)
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	08db      	lsrs	r3, r3, #3
 8006c36:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006c3e:	4b07      	ldr	r3, [pc, #28]	; (8006c5c <HAL_RCC_GetClockConfig+0x60>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f003 020f 	and.w	r2, r3, #15
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	601a      	str	r2, [r3, #0]
}
 8006c4a:	bf00      	nop
 8006c4c:	370c      	adds	r7, #12
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr
 8006c56:	bf00      	nop
 8006c58:	40023800 	.word	0x40023800
 8006c5c:	40023c00 	.word	0x40023c00

08006c60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006c64:	b087      	sub	sp, #28
 8006c66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006c68:	2600      	movs	r6, #0
 8006c6a:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 8006c6c:	2600      	movs	r6, #0
 8006c6e:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 8006c70:	2600      	movs	r6, #0
 8006c72:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 8006c74:	2600      	movs	r6, #0
 8006c76:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006c78:	2600      	movs	r6, #0
 8006c7a:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c7c:	4ea3      	ldr	r6, [pc, #652]	; (8006f0c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8006c7e:	68b6      	ldr	r6, [r6, #8]
 8006c80:	f006 060c 	and.w	r6, r6, #12
 8006c84:	2e0c      	cmp	r6, #12
 8006c86:	f200 8137 	bhi.w	8006ef8 <HAL_RCC_GetSysClockFreq+0x298>
 8006c8a:	f20f 0c08 	addw	ip, pc, #8
 8006c8e:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 8006c92:	bf00      	nop
 8006c94:	08006cc9 	.word	0x08006cc9
 8006c98:	08006ef9 	.word	0x08006ef9
 8006c9c:	08006ef9 	.word	0x08006ef9
 8006ca0:	08006ef9 	.word	0x08006ef9
 8006ca4:	08006ccf 	.word	0x08006ccf
 8006ca8:	08006ef9 	.word	0x08006ef9
 8006cac:	08006ef9 	.word	0x08006ef9
 8006cb0:	08006ef9 	.word	0x08006ef9
 8006cb4:	08006cd5 	.word	0x08006cd5
 8006cb8:	08006ef9 	.word	0x08006ef9
 8006cbc:	08006ef9 	.word	0x08006ef9
 8006cc0:	08006ef9 	.word	0x08006ef9
 8006cc4:	08006deb 	.word	0x08006deb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006cc8:	4b91      	ldr	r3, [pc, #580]	; (8006f10 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8006cca:	613b      	str	r3, [r7, #16]
       break;
 8006ccc:	e117      	b.n	8006efe <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006cce:	4b91      	ldr	r3, [pc, #580]	; (8006f14 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8006cd0:	613b      	str	r3, [r7, #16]
      break;
 8006cd2:	e114      	b.n	8006efe <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006cd4:	4b8d      	ldr	r3, [pc, #564]	; (8006f0c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006cdc:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006cde:	4b8b      	ldr	r3, [pc, #556]	; (8006f0c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d024      	beq.n	8006d34 <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006cea:	4b88      	ldr	r3, [pc, #544]	; (8006f0c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	099b      	lsrs	r3, r3, #6
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	f04f 0300 	mov.w	r3, #0
 8006cf6:	f240 14ff 	movw	r4, #511	; 0x1ff
 8006cfa:	f04f 0500 	mov.w	r5, #0
 8006cfe:	ea02 0004 	and.w	r0, r2, r4
 8006d02:	ea03 0105 	and.w	r1, r3, r5
 8006d06:	4b83      	ldr	r3, [pc, #524]	; (8006f14 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8006d08:	fb03 f201 	mul.w	r2, r3, r1
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	fb03 f300 	mul.w	r3, r3, r0
 8006d12:	4413      	add	r3, r2
 8006d14:	4a7f      	ldr	r2, [pc, #508]	; (8006f14 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8006d16:	fba0 0102 	umull	r0, r1, r0, r2
 8006d1a:	440b      	add	r3, r1
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	461a      	mov	r2, r3
 8006d22:	f04f 0300 	mov.w	r3, #0
 8006d26:	f7f9 fa73 	bl	8000210 <__aeabi_uldivmod>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	460b      	mov	r3, r1
 8006d2e:	4613      	mov	r3, r2
 8006d30:	617b      	str	r3, [r7, #20]
 8006d32:	e04c      	b.n	8006dce <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d34:	4b75      	ldr	r3, [pc, #468]	; (8006f0c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	099b      	lsrs	r3, r3, #6
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	f04f 0300 	mov.w	r3, #0
 8006d40:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006d44:	f04f 0100 	mov.w	r1, #0
 8006d48:	ea02 0800 	and.w	r8, r2, r0
 8006d4c:	ea03 0901 	and.w	r9, r3, r1
 8006d50:	4640      	mov	r0, r8
 8006d52:	4649      	mov	r1, r9
 8006d54:	f04f 0200 	mov.w	r2, #0
 8006d58:	f04f 0300 	mov.w	r3, #0
 8006d5c:	014b      	lsls	r3, r1, #5
 8006d5e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006d62:	0142      	lsls	r2, r0, #5
 8006d64:	4610      	mov	r0, r2
 8006d66:	4619      	mov	r1, r3
 8006d68:	ebb0 0008 	subs.w	r0, r0, r8
 8006d6c:	eb61 0109 	sbc.w	r1, r1, r9
 8006d70:	f04f 0200 	mov.w	r2, #0
 8006d74:	f04f 0300 	mov.w	r3, #0
 8006d78:	018b      	lsls	r3, r1, #6
 8006d7a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006d7e:	0182      	lsls	r2, r0, #6
 8006d80:	1a12      	subs	r2, r2, r0
 8006d82:	eb63 0301 	sbc.w	r3, r3, r1
 8006d86:	f04f 0000 	mov.w	r0, #0
 8006d8a:	f04f 0100 	mov.w	r1, #0
 8006d8e:	00d9      	lsls	r1, r3, #3
 8006d90:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006d94:	00d0      	lsls	r0, r2, #3
 8006d96:	4602      	mov	r2, r0
 8006d98:	460b      	mov	r3, r1
 8006d9a:	eb12 0208 	adds.w	r2, r2, r8
 8006d9e:	eb43 0309 	adc.w	r3, r3, r9
 8006da2:	f04f 0000 	mov.w	r0, #0
 8006da6:	f04f 0100 	mov.w	r1, #0
 8006daa:	0299      	lsls	r1, r3, #10
 8006dac:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006db0:	0290      	lsls	r0, r2, #10
 8006db2:	4602      	mov	r2, r0
 8006db4:	460b      	mov	r3, r1
 8006db6:	4610      	mov	r0, r2
 8006db8:	4619      	mov	r1, r3
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	f04f 0300 	mov.w	r3, #0
 8006dc2:	f7f9 fa25 	bl	8000210 <__aeabi_uldivmod>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	460b      	mov	r3, r1
 8006dca:	4613      	mov	r3, r2
 8006dcc:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006dce:	4b4f      	ldr	r3, [pc, #316]	; (8006f0c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	0c1b      	lsrs	r3, r3, #16
 8006dd4:	f003 0303 	and.w	r3, r3, #3
 8006dd8:	3301      	adds	r3, #1
 8006dda:	005b      	lsls	r3, r3, #1
 8006ddc:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8006dde:	697a      	ldr	r2, [r7, #20]
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006de6:	613b      	str	r3, [r7, #16]
      break;
 8006de8:	e089      	b.n	8006efe <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006dea:	4948      	ldr	r1, [pc, #288]	; (8006f0c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8006dec:	6849      	ldr	r1, [r1, #4]
 8006dee:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8006df2:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006df4:	4945      	ldr	r1, [pc, #276]	; (8006f0c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8006df6:	6849      	ldr	r1, [r1, #4]
 8006df8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8006dfc:	2900      	cmp	r1, #0
 8006dfe:	d024      	beq.n	8006e4a <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e00:	4942      	ldr	r1, [pc, #264]	; (8006f0c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8006e02:	6849      	ldr	r1, [r1, #4]
 8006e04:	0989      	lsrs	r1, r1, #6
 8006e06:	4608      	mov	r0, r1
 8006e08:	f04f 0100 	mov.w	r1, #0
 8006e0c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8006e10:	f04f 0500 	mov.w	r5, #0
 8006e14:	ea00 0204 	and.w	r2, r0, r4
 8006e18:	ea01 0305 	and.w	r3, r1, r5
 8006e1c:	493d      	ldr	r1, [pc, #244]	; (8006f14 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8006e1e:	fb01 f003 	mul.w	r0, r1, r3
 8006e22:	2100      	movs	r1, #0
 8006e24:	fb01 f102 	mul.w	r1, r1, r2
 8006e28:	1844      	adds	r4, r0, r1
 8006e2a:	493a      	ldr	r1, [pc, #232]	; (8006f14 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8006e2c:	fba2 0101 	umull	r0, r1, r2, r1
 8006e30:	1863      	adds	r3, r4, r1
 8006e32:	4619      	mov	r1, r3
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	461a      	mov	r2, r3
 8006e38:	f04f 0300 	mov.w	r3, #0
 8006e3c:	f7f9 f9e8 	bl	8000210 <__aeabi_uldivmod>
 8006e40:	4602      	mov	r2, r0
 8006e42:	460b      	mov	r3, r1
 8006e44:	4613      	mov	r3, r2
 8006e46:	617b      	str	r3, [r7, #20]
 8006e48:	e04a      	b.n	8006ee0 <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e4a:	4b30      	ldr	r3, [pc, #192]	; (8006f0c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	099b      	lsrs	r3, r3, #6
 8006e50:	461a      	mov	r2, r3
 8006e52:	f04f 0300 	mov.w	r3, #0
 8006e56:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006e5a:	f04f 0100 	mov.w	r1, #0
 8006e5e:	ea02 0400 	and.w	r4, r2, r0
 8006e62:	ea03 0501 	and.w	r5, r3, r1
 8006e66:	4620      	mov	r0, r4
 8006e68:	4629      	mov	r1, r5
 8006e6a:	f04f 0200 	mov.w	r2, #0
 8006e6e:	f04f 0300 	mov.w	r3, #0
 8006e72:	014b      	lsls	r3, r1, #5
 8006e74:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006e78:	0142      	lsls	r2, r0, #5
 8006e7a:	4610      	mov	r0, r2
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	1b00      	subs	r0, r0, r4
 8006e80:	eb61 0105 	sbc.w	r1, r1, r5
 8006e84:	f04f 0200 	mov.w	r2, #0
 8006e88:	f04f 0300 	mov.w	r3, #0
 8006e8c:	018b      	lsls	r3, r1, #6
 8006e8e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006e92:	0182      	lsls	r2, r0, #6
 8006e94:	1a12      	subs	r2, r2, r0
 8006e96:	eb63 0301 	sbc.w	r3, r3, r1
 8006e9a:	f04f 0000 	mov.w	r0, #0
 8006e9e:	f04f 0100 	mov.w	r1, #0
 8006ea2:	00d9      	lsls	r1, r3, #3
 8006ea4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006ea8:	00d0      	lsls	r0, r2, #3
 8006eaa:	4602      	mov	r2, r0
 8006eac:	460b      	mov	r3, r1
 8006eae:	1912      	adds	r2, r2, r4
 8006eb0:	eb45 0303 	adc.w	r3, r5, r3
 8006eb4:	f04f 0000 	mov.w	r0, #0
 8006eb8:	f04f 0100 	mov.w	r1, #0
 8006ebc:	0299      	lsls	r1, r3, #10
 8006ebe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006ec2:	0290      	lsls	r0, r2, #10
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	460b      	mov	r3, r1
 8006ec8:	4610      	mov	r0, r2
 8006eca:	4619      	mov	r1, r3
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	461a      	mov	r2, r3
 8006ed0:	f04f 0300 	mov.w	r3, #0
 8006ed4:	f7f9 f99c 	bl	8000210 <__aeabi_uldivmod>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	460b      	mov	r3, r1
 8006edc:	4613      	mov	r3, r2
 8006ede:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006ee0:	4b0a      	ldr	r3, [pc, #40]	; (8006f0c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	0f1b      	lsrs	r3, r3, #28
 8006ee6:	f003 0307 	and.w	r3, r3, #7
 8006eea:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8006eec:	697a      	ldr	r2, [r7, #20]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ef4:	613b      	str	r3, [r7, #16]
      break;
 8006ef6:	e002      	b.n	8006efe <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006ef8:	4b05      	ldr	r3, [pc, #20]	; (8006f10 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8006efa:	613b      	str	r3, [r7, #16]
      break;
 8006efc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006efe:	693b      	ldr	r3, [r7, #16]
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	371c      	adds	r7, #28
 8006f04:	46bd      	mov	sp, r7
 8006f06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f0a:	bf00      	nop
 8006f0c:	40023800 	.word	0x40023800
 8006f10:	00f42400 	.word	0x00f42400
 8006f14:	017d7840 	.word	0x017d7840

08006f18 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b086      	sub	sp, #24
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d101      	bne.n	8006f2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	e28d      	b.n	8007446 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f003 0301 	and.w	r3, r3, #1
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	f000 8083 	beq.w	800703e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006f38:	4b94      	ldr	r3, [pc, #592]	; (800718c <HAL_RCC_OscConfig+0x274>)
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	f003 030c 	and.w	r3, r3, #12
 8006f40:	2b04      	cmp	r3, #4
 8006f42:	d019      	beq.n	8006f78 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006f44:	4b91      	ldr	r3, [pc, #580]	; (800718c <HAL_RCC_OscConfig+0x274>)
 8006f46:	689b      	ldr	r3, [r3, #8]
 8006f48:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006f4c:	2b08      	cmp	r3, #8
 8006f4e:	d106      	bne.n	8006f5e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006f50:	4b8e      	ldr	r3, [pc, #568]	; (800718c <HAL_RCC_OscConfig+0x274>)
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f5c:	d00c      	beq.n	8006f78 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f5e:	4b8b      	ldr	r3, [pc, #556]	; (800718c <HAL_RCC_OscConfig+0x274>)
 8006f60:	689b      	ldr	r3, [r3, #8]
 8006f62:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006f66:	2b0c      	cmp	r3, #12
 8006f68:	d112      	bne.n	8006f90 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f6a:	4b88      	ldr	r3, [pc, #544]	; (800718c <HAL_RCC_OscConfig+0x274>)
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f76:	d10b      	bne.n	8006f90 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f78:	4b84      	ldr	r3, [pc, #528]	; (800718c <HAL_RCC_OscConfig+0x274>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d05b      	beq.n	800703c <HAL_RCC_OscConfig+0x124>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d157      	bne.n	800703c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	e25a      	b.n	8007446 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f98:	d106      	bne.n	8006fa8 <HAL_RCC_OscConfig+0x90>
 8006f9a:	4b7c      	ldr	r3, [pc, #496]	; (800718c <HAL_RCC_OscConfig+0x274>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a7b      	ldr	r2, [pc, #492]	; (800718c <HAL_RCC_OscConfig+0x274>)
 8006fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fa4:	6013      	str	r3, [r2, #0]
 8006fa6:	e01d      	b.n	8006fe4 <HAL_RCC_OscConfig+0xcc>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006fb0:	d10c      	bne.n	8006fcc <HAL_RCC_OscConfig+0xb4>
 8006fb2:	4b76      	ldr	r3, [pc, #472]	; (800718c <HAL_RCC_OscConfig+0x274>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a75      	ldr	r2, [pc, #468]	; (800718c <HAL_RCC_OscConfig+0x274>)
 8006fb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006fbc:	6013      	str	r3, [r2, #0]
 8006fbe:	4b73      	ldr	r3, [pc, #460]	; (800718c <HAL_RCC_OscConfig+0x274>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a72      	ldr	r2, [pc, #456]	; (800718c <HAL_RCC_OscConfig+0x274>)
 8006fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fc8:	6013      	str	r3, [r2, #0]
 8006fca:	e00b      	b.n	8006fe4 <HAL_RCC_OscConfig+0xcc>
 8006fcc:	4b6f      	ldr	r3, [pc, #444]	; (800718c <HAL_RCC_OscConfig+0x274>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a6e      	ldr	r2, [pc, #440]	; (800718c <HAL_RCC_OscConfig+0x274>)
 8006fd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fd6:	6013      	str	r3, [r2, #0]
 8006fd8:	4b6c      	ldr	r3, [pc, #432]	; (800718c <HAL_RCC_OscConfig+0x274>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a6b      	ldr	r2, [pc, #428]	; (800718c <HAL_RCC_OscConfig+0x274>)
 8006fde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006fe2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d013      	beq.n	8007014 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fec:	f7fd f83e 	bl	800406c <HAL_GetTick>
 8006ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ff2:	e008      	b.n	8007006 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006ff4:	f7fd f83a 	bl	800406c <HAL_GetTick>
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	1ad3      	subs	r3, r2, r3
 8006ffe:	2b64      	cmp	r3, #100	; 0x64
 8007000:	d901      	bls.n	8007006 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8007002:	2303      	movs	r3, #3
 8007004:	e21f      	b.n	8007446 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007006:	4b61      	ldr	r3, [pc, #388]	; (800718c <HAL_RCC_OscConfig+0x274>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800700e:	2b00      	cmp	r3, #0
 8007010:	d0f0      	beq.n	8006ff4 <HAL_RCC_OscConfig+0xdc>
 8007012:	e014      	b.n	800703e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007014:	f7fd f82a 	bl	800406c <HAL_GetTick>
 8007018:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800701a:	e008      	b.n	800702e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800701c:	f7fd f826 	bl	800406c <HAL_GetTick>
 8007020:	4602      	mov	r2, r0
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	1ad3      	subs	r3, r2, r3
 8007026:	2b64      	cmp	r3, #100	; 0x64
 8007028:	d901      	bls.n	800702e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800702a:	2303      	movs	r3, #3
 800702c:	e20b      	b.n	8007446 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800702e:	4b57      	ldr	r3, [pc, #348]	; (800718c <HAL_RCC_OscConfig+0x274>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007036:	2b00      	cmp	r3, #0
 8007038:	d1f0      	bne.n	800701c <HAL_RCC_OscConfig+0x104>
 800703a:	e000      	b.n	800703e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800703c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f003 0302 	and.w	r3, r3, #2
 8007046:	2b00      	cmp	r3, #0
 8007048:	d06f      	beq.n	800712a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800704a:	4b50      	ldr	r3, [pc, #320]	; (800718c <HAL_RCC_OscConfig+0x274>)
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	f003 030c 	and.w	r3, r3, #12
 8007052:	2b00      	cmp	r3, #0
 8007054:	d017      	beq.n	8007086 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007056:	4b4d      	ldr	r3, [pc, #308]	; (800718c <HAL_RCC_OscConfig+0x274>)
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800705e:	2b08      	cmp	r3, #8
 8007060:	d105      	bne.n	800706e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007062:	4b4a      	ldr	r3, [pc, #296]	; (800718c <HAL_RCC_OscConfig+0x274>)
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00b      	beq.n	8007086 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800706e:	4b47      	ldr	r3, [pc, #284]	; (800718c <HAL_RCC_OscConfig+0x274>)
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007076:	2b0c      	cmp	r3, #12
 8007078:	d11c      	bne.n	80070b4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800707a:	4b44      	ldr	r3, [pc, #272]	; (800718c <HAL_RCC_OscConfig+0x274>)
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007082:	2b00      	cmp	r3, #0
 8007084:	d116      	bne.n	80070b4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007086:	4b41      	ldr	r3, [pc, #260]	; (800718c <HAL_RCC_OscConfig+0x274>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f003 0302 	and.w	r3, r3, #2
 800708e:	2b00      	cmp	r3, #0
 8007090:	d005      	beq.n	800709e <HAL_RCC_OscConfig+0x186>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	2b01      	cmp	r3, #1
 8007098:	d001      	beq.n	800709e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	e1d3      	b.n	8007446 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800709e:	4b3b      	ldr	r3, [pc, #236]	; (800718c <HAL_RCC_OscConfig+0x274>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	691b      	ldr	r3, [r3, #16]
 80070aa:	00db      	lsls	r3, r3, #3
 80070ac:	4937      	ldr	r1, [pc, #220]	; (800718c <HAL_RCC_OscConfig+0x274>)
 80070ae:	4313      	orrs	r3, r2
 80070b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80070b2:	e03a      	b.n	800712a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d020      	beq.n	80070fe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80070bc:	4b34      	ldr	r3, [pc, #208]	; (8007190 <HAL_RCC_OscConfig+0x278>)
 80070be:	2201      	movs	r2, #1
 80070c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070c2:	f7fc ffd3 	bl	800406c <HAL_GetTick>
 80070c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070c8:	e008      	b.n	80070dc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80070ca:	f7fc ffcf 	bl	800406c <HAL_GetTick>
 80070ce:	4602      	mov	r2, r0
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	1ad3      	subs	r3, r2, r3
 80070d4:	2b02      	cmp	r3, #2
 80070d6:	d901      	bls.n	80070dc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80070d8:	2303      	movs	r3, #3
 80070da:	e1b4      	b.n	8007446 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070dc:	4b2b      	ldr	r3, [pc, #172]	; (800718c <HAL_RCC_OscConfig+0x274>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f003 0302 	and.w	r3, r3, #2
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d0f0      	beq.n	80070ca <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070e8:	4b28      	ldr	r3, [pc, #160]	; (800718c <HAL_RCC_OscConfig+0x274>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	691b      	ldr	r3, [r3, #16]
 80070f4:	00db      	lsls	r3, r3, #3
 80070f6:	4925      	ldr	r1, [pc, #148]	; (800718c <HAL_RCC_OscConfig+0x274>)
 80070f8:	4313      	orrs	r3, r2
 80070fa:	600b      	str	r3, [r1, #0]
 80070fc:	e015      	b.n	800712a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80070fe:	4b24      	ldr	r3, [pc, #144]	; (8007190 <HAL_RCC_OscConfig+0x278>)
 8007100:	2200      	movs	r2, #0
 8007102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007104:	f7fc ffb2 	bl	800406c <HAL_GetTick>
 8007108:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800710a:	e008      	b.n	800711e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800710c:	f7fc ffae 	bl	800406c <HAL_GetTick>
 8007110:	4602      	mov	r2, r0
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	1ad3      	subs	r3, r2, r3
 8007116:	2b02      	cmp	r3, #2
 8007118:	d901      	bls.n	800711e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800711a:	2303      	movs	r3, #3
 800711c:	e193      	b.n	8007446 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800711e:	4b1b      	ldr	r3, [pc, #108]	; (800718c <HAL_RCC_OscConfig+0x274>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f003 0302 	and.w	r3, r3, #2
 8007126:	2b00      	cmp	r3, #0
 8007128:	d1f0      	bne.n	800710c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f003 0308 	and.w	r3, r3, #8
 8007132:	2b00      	cmp	r3, #0
 8007134:	d036      	beq.n	80071a4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	695b      	ldr	r3, [r3, #20]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d016      	beq.n	800716c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800713e:	4b15      	ldr	r3, [pc, #84]	; (8007194 <HAL_RCC_OscConfig+0x27c>)
 8007140:	2201      	movs	r2, #1
 8007142:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007144:	f7fc ff92 	bl	800406c <HAL_GetTick>
 8007148:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800714a:	e008      	b.n	800715e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800714c:	f7fc ff8e 	bl	800406c <HAL_GetTick>
 8007150:	4602      	mov	r2, r0
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	1ad3      	subs	r3, r2, r3
 8007156:	2b02      	cmp	r3, #2
 8007158:	d901      	bls.n	800715e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800715a:	2303      	movs	r3, #3
 800715c:	e173      	b.n	8007446 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800715e:	4b0b      	ldr	r3, [pc, #44]	; (800718c <HAL_RCC_OscConfig+0x274>)
 8007160:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007162:	f003 0302 	and.w	r3, r3, #2
 8007166:	2b00      	cmp	r3, #0
 8007168:	d0f0      	beq.n	800714c <HAL_RCC_OscConfig+0x234>
 800716a:	e01b      	b.n	80071a4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800716c:	4b09      	ldr	r3, [pc, #36]	; (8007194 <HAL_RCC_OscConfig+0x27c>)
 800716e:	2200      	movs	r2, #0
 8007170:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007172:	f7fc ff7b 	bl	800406c <HAL_GetTick>
 8007176:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007178:	e00e      	b.n	8007198 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800717a:	f7fc ff77 	bl	800406c <HAL_GetTick>
 800717e:	4602      	mov	r2, r0
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	1ad3      	subs	r3, r2, r3
 8007184:	2b02      	cmp	r3, #2
 8007186:	d907      	bls.n	8007198 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8007188:	2303      	movs	r3, #3
 800718a:	e15c      	b.n	8007446 <HAL_RCC_OscConfig+0x52e>
 800718c:	40023800 	.word	0x40023800
 8007190:	42470000 	.word	0x42470000
 8007194:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007198:	4b8a      	ldr	r3, [pc, #552]	; (80073c4 <HAL_RCC_OscConfig+0x4ac>)
 800719a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800719c:	f003 0302 	and.w	r3, r3, #2
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d1ea      	bne.n	800717a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f003 0304 	and.w	r3, r3, #4
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	f000 8097 	beq.w	80072e0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80071b2:	2300      	movs	r3, #0
 80071b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80071b6:	4b83      	ldr	r3, [pc, #524]	; (80073c4 <HAL_RCC_OscConfig+0x4ac>)
 80071b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d10f      	bne.n	80071e2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80071c2:	2300      	movs	r3, #0
 80071c4:	60bb      	str	r3, [r7, #8]
 80071c6:	4b7f      	ldr	r3, [pc, #508]	; (80073c4 <HAL_RCC_OscConfig+0x4ac>)
 80071c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ca:	4a7e      	ldr	r2, [pc, #504]	; (80073c4 <HAL_RCC_OscConfig+0x4ac>)
 80071cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071d0:	6413      	str	r3, [r2, #64]	; 0x40
 80071d2:	4b7c      	ldr	r3, [pc, #496]	; (80073c4 <HAL_RCC_OscConfig+0x4ac>)
 80071d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071da:	60bb      	str	r3, [r7, #8]
 80071dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80071de:	2301      	movs	r3, #1
 80071e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071e2:	4b79      	ldr	r3, [pc, #484]	; (80073c8 <HAL_RCC_OscConfig+0x4b0>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d118      	bne.n	8007220 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80071ee:	4b76      	ldr	r3, [pc, #472]	; (80073c8 <HAL_RCC_OscConfig+0x4b0>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a75      	ldr	r2, [pc, #468]	; (80073c8 <HAL_RCC_OscConfig+0x4b0>)
 80071f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80071fa:	f7fc ff37 	bl	800406c <HAL_GetTick>
 80071fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007200:	e008      	b.n	8007214 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007202:	f7fc ff33 	bl	800406c <HAL_GetTick>
 8007206:	4602      	mov	r2, r0
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	1ad3      	subs	r3, r2, r3
 800720c:	2b02      	cmp	r3, #2
 800720e:	d901      	bls.n	8007214 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8007210:	2303      	movs	r3, #3
 8007212:	e118      	b.n	8007446 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007214:	4b6c      	ldr	r3, [pc, #432]	; (80073c8 <HAL_RCC_OscConfig+0x4b0>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800721c:	2b00      	cmp	r3, #0
 800721e:	d0f0      	beq.n	8007202 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	2b01      	cmp	r3, #1
 8007226:	d106      	bne.n	8007236 <HAL_RCC_OscConfig+0x31e>
 8007228:	4b66      	ldr	r3, [pc, #408]	; (80073c4 <HAL_RCC_OscConfig+0x4ac>)
 800722a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800722c:	4a65      	ldr	r2, [pc, #404]	; (80073c4 <HAL_RCC_OscConfig+0x4ac>)
 800722e:	f043 0301 	orr.w	r3, r3, #1
 8007232:	6713      	str	r3, [r2, #112]	; 0x70
 8007234:	e01c      	b.n	8007270 <HAL_RCC_OscConfig+0x358>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	2b05      	cmp	r3, #5
 800723c:	d10c      	bne.n	8007258 <HAL_RCC_OscConfig+0x340>
 800723e:	4b61      	ldr	r3, [pc, #388]	; (80073c4 <HAL_RCC_OscConfig+0x4ac>)
 8007240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007242:	4a60      	ldr	r2, [pc, #384]	; (80073c4 <HAL_RCC_OscConfig+0x4ac>)
 8007244:	f043 0304 	orr.w	r3, r3, #4
 8007248:	6713      	str	r3, [r2, #112]	; 0x70
 800724a:	4b5e      	ldr	r3, [pc, #376]	; (80073c4 <HAL_RCC_OscConfig+0x4ac>)
 800724c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800724e:	4a5d      	ldr	r2, [pc, #372]	; (80073c4 <HAL_RCC_OscConfig+0x4ac>)
 8007250:	f043 0301 	orr.w	r3, r3, #1
 8007254:	6713      	str	r3, [r2, #112]	; 0x70
 8007256:	e00b      	b.n	8007270 <HAL_RCC_OscConfig+0x358>
 8007258:	4b5a      	ldr	r3, [pc, #360]	; (80073c4 <HAL_RCC_OscConfig+0x4ac>)
 800725a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800725c:	4a59      	ldr	r2, [pc, #356]	; (80073c4 <HAL_RCC_OscConfig+0x4ac>)
 800725e:	f023 0301 	bic.w	r3, r3, #1
 8007262:	6713      	str	r3, [r2, #112]	; 0x70
 8007264:	4b57      	ldr	r3, [pc, #348]	; (80073c4 <HAL_RCC_OscConfig+0x4ac>)
 8007266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007268:	4a56      	ldr	r2, [pc, #344]	; (80073c4 <HAL_RCC_OscConfig+0x4ac>)
 800726a:	f023 0304 	bic.w	r3, r3, #4
 800726e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d015      	beq.n	80072a4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007278:	f7fc fef8 	bl	800406c <HAL_GetTick>
 800727c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800727e:	e00a      	b.n	8007296 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007280:	f7fc fef4 	bl	800406c <HAL_GetTick>
 8007284:	4602      	mov	r2, r0
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	1ad3      	subs	r3, r2, r3
 800728a:	f241 3288 	movw	r2, #5000	; 0x1388
 800728e:	4293      	cmp	r3, r2
 8007290:	d901      	bls.n	8007296 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8007292:	2303      	movs	r3, #3
 8007294:	e0d7      	b.n	8007446 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007296:	4b4b      	ldr	r3, [pc, #300]	; (80073c4 <HAL_RCC_OscConfig+0x4ac>)
 8007298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800729a:	f003 0302 	and.w	r3, r3, #2
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d0ee      	beq.n	8007280 <HAL_RCC_OscConfig+0x368>
 80072a2:	e014      	b.n	80072ce <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072a4:	f7fc fee2 	bl	800406c <HAL_GetTick>
 80072a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072aa:	e00a      	b.n	80072c2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80072ac:	f7fc fede 	bl	800406c <HAL_GetTick>
 80072b0:	4602      	mov	r2, r0
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	1ad3      	subs	r3, r2, r3
 80072b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d901      	bls.n	80072c2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80072be:	2303      	movs	r3, #3
 80072c0:	e0c1      	b.n	8007446 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072c2:	4b40      	ldr	r3, [pc, #256]	; (80073c4 <HAL_RCC_OscConfig+0x4ac>)
 80072c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072c6:	f003 0302 	and.w	r3, r3, #2
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d1ee      	bne.n	80072ac <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80072ce:	7dfb      	ldrb	r3, [r7, #23]
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d105      	bne.n	80072e0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072d4:	4b3b      	ldr	r3, [pc, #236]	; (80073c4 <HAL_RCC_OscConfig+0x4ac>)
 80072d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d8:	4a3a      	ldr	r2, [pc, #232]	; (80073c4 <HAL_RCC_OscConfig+0x4ac>)
 80072da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	699b      	ldr	r3, [r3, #24]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	f000 80ad 	beq.w	8007444 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80072ea:	4b36      	ldr	r3, [pc, #216]	; (80073c4 <HAL_RCC_OscConfig+0x4ac>)
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	f003 030c 	and.w	r3, r3, #12
 80072f2:	2b08      	cmp	r3, #8
 80072f4:	d060      	beq.n	80073b8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	699b      	ldr	r3, [r3, #24]
 80072fa:	2b02      	cmp	r3, #2
 80072fc:	d145      	bne.n	800738a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072fe:	4b33      	ldr	r3, [pc, #204]	; (80073cc <HAL_RCC_OscConfig+0x4b4>)
 8007300:	2200      	movs	r2, #0
 8007302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007304:	f7fc feb2 	bl	800406c <HAL_GetTick>
 8007308:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800730a:	e008      	b.n	800731e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800730c:	f7fc feae 	bl	800406c <HAL_GetTick>
 8007310:	4602      	mov	r2, r0
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	1ad3      	subs	r3, r2, r3
 8007316:	2b02      	cmp	r3, #2
 8007318:	d901      	bls.n	800731e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800731a:	2303      	movs	r3, #3
 800731c:	e093      	b.n	8007446 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800731e:	4b29      	ldr	r3, [pc, #164]	; (80073c4 <HAL_RCC_OscConfig+0x4ac>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007326:	2b00      	cmp	r3, #0
 8007328:	d1f0      	bne.n	800730c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	69da      	ldr	r2, [r3, #28]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6a1b      	ldr	r3, [r3, #32]
 8007332:	431a      	orrs	r2, r3
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007338:	019b      	lsls	r3, r3, #6
 800733a:	431a      	orrs	r2, r3
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007340:	085b      	lsrs	r3, r3, #1
 8007342:	3b01      	subs	r3, #1
 8007344:	041b      	lsls	r3, r3, #16
 8007346:	431a      	orrs	r2, r3
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800734c:	061b      	lsls	r3, r3, #24
 800734e:	431a      	orrs	r2, r3
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007354:	071b      	lsls	r3, r3, #28
 8007356:	491b      	ldr	r1, [pc, #108]	; (80073c4 <HAL_RCC_OscConfig+0x4ac>)
 8007358:	4313      	orrs	r3, r2
 800735a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800735c:	4b1b      	ldr	r3, [pc, #108]	; (80073cc <HAL_RCC_OscConfig+0x4b4>)
 800735e:	2201      	movs	r2, #1
 8007360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007362:	f7fc fe83 	bl	800406c <HAL_GetTick>
 8007366:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007368:	e008      	b.n	800737c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800736a:	f7fc fe7f 	bl	800406c <HAL_GetTick>
 800736e:	4602      	mov	r2, r0
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	1ad3      	subs	r3, r2, r3
 8007374:	2b02      	cmp	r3, #2
 8007376:	d901      	bls.n	800737c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007378:	2303      	movs	r3, #3
 800737a:	e064      	b.n	8007446 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800737c:	4b11      	ldr	r3, [pc, #68]	; (80073c4 <HAL_RCC_OscConfig+0x4ac>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007384:	2b00      	cmp	r3, #0
 8007386:	d0f0      	beq.n	800736a <HAL_RCC_OscConfig+0x452>
 8007388:	e05c      	b.n	8007444 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800738a:	4b10      	ldr	r3, [pc, #64]	; (80073cc <HAL_RCC_OscConfig+0x4b4>)
 800738c:	2200      	movs	r2, #0
 800738e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007390:	f7fc fe6c 	bl	800406c <HAL_GetTick>
 8007394:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007396:	e008      	b.n	80073aa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007398:	f7fc fe68 	bl	800406c <HAL_GetTick>
 800739c:	4602      	mov	r2, r0
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	1ad3      	subs	r3, r2, r3
 80073a2:	2b02      	cmp	r3, #2
 80073a4:	d901      	bls.n	80073aa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80073a6:	2303      	movs	r3, #3
 80073a8:	e04d      	b.n	8007446 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073aa:	4b06      	ldr	r3, [pc, #24]	; (80073c4 <HAL_RCC_OscConfig+0x4ac>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d1f0      	bne.n	8007398 <HAL_RCC_OscConfig+0x480>
 80073b6:	e045      	b.n	8007444 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	699b      	ldr	r3, [r3, #24]
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d107      	bne.n	80073d0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80073c0:	2301      	movs	r3, #1
 80073c2:	e040      	b.n	8007446 <HAL_RCC_OscConfig+0x52e>
 80073c4:	40023800 	.word	0x40023800
 80073c8:	40007000 	.word	0x40007000
 80073cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80073d0:	4b1f      	ldr	r3, [pc, #124]	; (8007450 <HAL_RCC_OscConfig+0x538>)
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	699b      	ldr	r3, [r3, #24]
 80073da:	2b01      	cmp	r3, #1
 80073dc:	d030      	beq.n	8007440 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d129      	bne.n	8007440 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d122      	bne.n	8007440 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80073fa:	68fa      	ldr	r2, [r7, #12]
 80073fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007400:	4013      	ands	r3, r2
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007406:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007408:	4293      	cmp	r3, r2
 800740a:	d119      	bne.n	8007440 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007416:	085b      	lsrs	r3, r3, #1
 8007418:	3b01      	subs	r3, #1
 800741a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800741c:	429a      	cmp	r2, r3
 800741e:	d10f      	bne.n	8007440 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800742a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800742c:	429a      	cmp	r2, r3
 800742e:	d107      	bne.n	8007440 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800743a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800743c:	429a      	cmp	r2, r3
 800743e:	d001      	beq.n	8007444 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8007440:	2301      	movs	r3, #1
 8007442:	e000      	b.n	8007446 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8007444:	2300      	movs	r3, #0
}
 8007446:	4618      	mov	r0, r3
 8007448:	3718      	adds	r7, #24
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop
 8007450:	40023800 	.word	0x40023800

08007454 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b082      	sub	sp, #8
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d101      	bne.n	8007466 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007462:	2301      	movs	r3, #1
 8007464:	e041      	b.n	80074ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800746c:	b2db      	uxtb	r3, r3
 800746e:	2b00      	cmp	r3, #0
 8007470:	d106      	bne.n	8007480 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f7fc fa10 	bl	80038a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2202      	movs	r2, #2
 8007484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	3304      	adds	r3, #4
 8007490:	4619      	mov	r1, r3
 8007492:	4610      	mov	r0, r2
 8007494:	f000 fbaa 	bl	8007bec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2201      	movs	r2, #1
 80074a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2201      	movs	r2, #1
 80074b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2201      	movs	r2, #1
 80074d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2201      	movs	r2, #1
 80074dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074e8:	2300      	movs	r3, #0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3708      	adds	r7, #8
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
	...

080074f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b085      	sub	sp, #20
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007502:	b2db      	uxtb	r3, r3
 8007504:	2b01      	cmp	r3, #1
 8007506:	d001      	beq.n	800750c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007508:	2301      	movs	r3, #1
 800750a:	e04e      	b.n	80075aa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2202      	movs	r2, #2
 8007510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	68da      	ldr	r2, [r3, #12]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f042 0201 	orr.w	r2, r2, #1
 8007522:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a23      	ldr	r2, [pc, #140]	; (80075b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d022      	beq.n	8007574 <HAL_TIM_Base_Start_IT+0x80>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007536:	d01d      	beq.n	8007574 <HAL_TIM_Base_Start_IT+0x80>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a1f      	ldr	r2, [pc, #124]	; (80075bc <HAL_TIM_Base_Start_IT+0xc8>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d018      	beq.n	8007574 <HAL_TIM_Base_Start_IT+0x80>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a1e      	ldr	r2, [pc, #120]	; (80075c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d013      	beq.n	8007574 <HAL_TIM_Base_Start_IT+0x80>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a1c      	ldr	r2, [pc, #112]	; (80075c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d00e      	beq.n	8007574 <HAL_TIM_Base_Start_IT+0x80>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a1b      	ldr	r2, [pc, #108]	; (80075c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d009      	beq.n	8007574 <HAL_TIM_Base_Start_IT+0x80>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a19      	ldr	r2, [pc, #100]	; (80075cc <HAL_TIM_Base_Start_IT+0xd8>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d004      	beq.n	8007574 <HAL_TIM_Base_Start_IT+0x80>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a18      	ldr	r2, [pc, #96]	; (80075d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d111      	bne.n	8007598 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	f003 0307 	and.w	r3, r3, #7
 800757e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2b06      	cmp	r3, #6
 8007584:	d010      	beq.n	80075a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f042 0201 	orr.w	r2, r2, #1
 8007594:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007596:	e007      	b.n	80075a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	681a      	ldr	r2, [r3, #0]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f042 0201 	orr.w	r2, r2, #1
 80075a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80075a8:	2300      	movs	r3, #0
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3714      	adds	r7, #20
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr
 80075b6:	bf00      	nop
 80075b8:	40010000 	.word	0x40010000
 80075bc:	40000400 	.word	0x40000400
 80075c0:	40000800 	.word	0x40000800
 80075c4:	40000c00 	.word	0x40000c00
 80075c8:	40010400 	.word	0x40010400
 80075cc:	40014000 	.word	0x40014000
 80075d0:	40001800 	.word	0x40001800

080075d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b082      	sub	sp, #8
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d101      	bne.n	80075e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	e041      	b.n	800766a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d106      	bne.n	8007600 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2200      	movs	r2, #0
 80075f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 f839 	bl	8007672 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2202      	movs	r2, #2
 8007604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	3304      	adds	r3, #4
 8007610:	4619      	mov	r1, r3
 8007612:	4610      	mov	r0, r2
 8007614:	f000 faea 	bl	8007bec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2201      	movs	r2, #1
 800761c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2201      	movs	r2, #1
 8007624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2201      	movs	r2, #1
 800762c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2201      	movs	r2, #1
 8007634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2201      	movs	r2, #1
 800763c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2201      	movs	r2, #1
 8007644:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2201      	movs	r2, #1
 800764c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2201      	movs	r2, #1
 8007654:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2201      	movs	r2, #1
 800765c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2201      	movs	r2, #1
 8007664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007668:	2300      	movs	r3, #0
}
 800766a:	4618      	mov	r0, r3
 800766c:	3708      	adds	r7, #8
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}

08007672 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007672:	b480      	push	{r7}
 8007674:	b083      	sub	sp, #12
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800767a:	bf00      	nop
 800767c:	370c      	adds	r7, #12
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr

08007686 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007686:	b580      	push	{r7, lr}
 8007688:	b082      	sub	sp, #8
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	691b      	ldr	r3, [r3, #16]
 8007694:	f003 0302 	and.w	r3, r3, #2
 8007698:	2b02      	cmp	r3, #2
 800769a:	d122      	bne.n	80076e2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	68db      	ldr	r3, [r3, #12]
 80076a2:	f003 0302 	and.w	r3, r3, #2
 80076a6:	2b02      	cmp	r3, #2
 80076a8:	d11b      	bne.n	80076e2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f06f 0202 	mvn.w	r2, #2
 80076b2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2201      	movs	r2, #1
 80076b8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	699b      	ldr	r3, [r3, #24]
 80076c0:	f003 0303 	and.w	r3, r3, #3
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d003      	beq.n	80076d0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f000 fa71 	bl	8007bb0 <HAL_TIM_IC_CaptureCallback>
 80076ce:	e005      	b.n	80076dc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f000 fa63 	bl	8007b9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 fa74 	bl	8007bc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	691b      	ldr	r3, [r3, #16]
 80076e8:	f003 0304 	and.w	r3, r3, #4
 80076ec:	2b04      	cmp	r3, #4
 80076ee:	d122      	bne.n	8007736 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	68db      	ldr	r3, [r3, #12]
 80076f6:	f003 0304 	and.w	r3, r3, #4
 80076fa:	2b04      	cmp	r3, #4
 80076fc:	d11b      	bne.n	8007736 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f06f 0204 	mvn.w	r2, #4
 8007706:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2202      	movs	r2, #2
 800770c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	699b      	ldr	r3, [r3, #24]
 8007714:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007718:	2b00      	cmp	r3, #0
 800771a:	d003      	beq.n	8007724 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 fa47 	bl	8007bb0 <HAL_TIM_IC_CaptureCallback>
 8007722:	e005      	b.n	8007730 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 fa39 	bl	8007b9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 fa4a 	bl	8007bc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2200      	movs	r2, #0
 8007734:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	691b      	ldr	r3, [r3, #16]
 800773c:	f003 0308 	and.w	r3, r3, #8
 8007740:	2b08      	cmp	r3, #8
 8007742:	d122      	bne.n	800778a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	68db      	ldr	r3, [r3, #12]
 800774a:	f003 0308 	and.w	r3, r3, #8
 800774e:	2b08      	cmp	r3, #8
 8007750:	d11b      	bne.n	800778a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f06f 0208 	mvn.w	r2, #8
 800775a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2204      	movs	r2, #4
 8007760:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	69db      	ldr	r3, [r3, #28]
 8007768:	f003 0303 	and.w	r3, r3, #3
 800776c:	2b00      	cmp	r3, #0
 800776e:	d003      	beq.n	8007778 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 fa1d 	bl	8007bb0 <HAL_TIM_IC_CaptureCallback>
 8007776:	e005      	b.n	8007784 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f000 fa0f 	bl	8007b9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 fa20 	bl	8007bc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	691b      	ldr	r3, [r3, #16]
 8007790:	f003 0310 	and.w	r3, r3, #16
 8007794:	2b10      	cmp	r3, #16
 8007796:	d122      	bne.n	80077de <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	68db      	ldr	r3, [r3, #12]
 800779e:	f003 0310 	and.w	r3, r3, #16
 80077a2:	2b10      	cmp	r3, #16
 80077a4:	d11b      	bne.n	80077de <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f06f 0210 	mvn.w	r2, #16
 80077ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2208      	movs	r2, #8
 80077b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	69db      	ldr	r3, [r3, #28]
 80077bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d003      	beq.n	80077cc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 f9f3 	bl	8007bb0 <HAL_TIM_IC_CaptureCallback>
 80077ca:	e005      	b.n	80077d8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 f9e5 	bl	8007b9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 f9f6 	bl	8007bc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2200      	movs	r2, #0
 80077dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	691b      	ldr	r3, [r3, #16]
 80077e4:	f003 0301 	and.w	r3, r3, #1
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d10e      	bne.n	800780a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	68db      	ldr	r3, [r3, #12]
 80077f2:	f003 0301 	and.w	r3, r3, #1
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d107      	bne.n	800780a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f06f 0201 	mvn.w	r2, #1
 8007802:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f7fb fcb1 	bl	800316c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	691b      	ldr	r3, [r3, #16]
 8007810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007814:	2b80      	cmp	r3, #128	; 0x80
 8007816:	d10e      	bne.n	8007836 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	68db      	ldr	r3, [r3, #12]
 800781e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007822:	2b80      	cmp	r3, #128	; 0x80
 8007824:	d107      	bne.n	8007836 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800782e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 fe57 	bl	80084e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	691b      	ldr	r3, [r3, #16]
 800783c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007840:	2b40      	cmp	r3, #64	; 0x40
 8007842:	d10e      	bne.n	8007862 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800784e:	2b40      	cmp	r3, #64	; 0x40
 8007850:	d107      	bne.n	8007862 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800785a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 f9bb 	bl	8007bd8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	691b      	ldr	r3, [r3, #16]
 8007868:	f003 0320 	and.w	r3, r3, #32
 800786c:	2b20      	cmp	r3, #32
 800786e:	d10e      	bne.n	800788e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	68db      	ldr	r3, [r3, #12]
 8007876:	f003 0320 	and.w	r3, r3, #32
 800787a:	2b20      	cmp	r3, #32
 800787c:	d107      	bne.n	800788e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f06f 0220 	mvn.w	r2, #32
 8007886:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 fe21 	bl	80084d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800788e:	bf00      	nop
 8007890:	3708      	adds	r7, #8
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}
	...

08007898 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b084      	sub	sp, #16
 800789c:	af00      	add	r7, sp, #0
 800789e:	60f8      	str	r0, [r7, #12]
 80078a0:	60b9      	str	r1, [r7, #8]
 80078a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d101      	bne.n	80078b2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80078ae:	2302      	movs	r3, #2
 80078b0:	e0ac      	b.n	8007a0c <HAL_TIM_PWM_ConfigChannel+0x174>
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2201      	movs	r2, #1
 80078b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2b0c      	cmp	r3, #12
 80078be:	f200 809f 	bhi.w	8007a00 <HAL_TIM_PWM_ConfigChannel+0x168>
 80078c2:	a201      	add	r2, pc, #4	; (adr r2, 80078c8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80078c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078c8:	080078fd 	.word	0x080078fd
 80078cc:	08007a01 	.word	0x08007a01
 80078d0:	08007a01 	.word	0x08007a01
 80078d4:	08007a01 	.word	0x08007a01
 80078d8:	0800793d 	.word	0x0800793d
 80078dc:	08007a01 	.word	0x08007a01
 80078e0:	08007a01 	.word	0x08007a01
 80078e4:	08007a01 	.word	0x08007a01
 80078e8:	0800797f 	.word	0x0800797f
 80078ec:	08007a01 	.word	0x08007a01
 80078f0:	08007a01 	.word	0x08007a01
 80078f4:	08007a01 	.word	0x08007a01
 80078f8:	080079bf 	.word	0x080079bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	68b9      	ldr	r1, [r7, #8]
 8007902:	4618      	mov	r0, r3
 8007904:	f000 fa12 	bl	8007d2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	699a      	ldr	r2, [r3, #24]
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f042 0208 	orr.w	r2, r2, #8
 8007916:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	699a      	ldr	r2, [r3, #24]
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f022 0204 	bic.w	r2, r2, #4
 8007926:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	6999      	ldr	r1, [r3, #24]
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	691a      	ldr	r2, [r3, #16]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	430a      	orrs	r2, r1
 8007938:	619a      	str	r2, [r3, #24]
      break;
 800793a:	e062      	b.n	8007a02 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	68b9      	ldr	r1, [r7, #8]
 8007942:	4618      	mov	r0, r3
 8007944:	f000 fa62 	bl	8007e0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	699a      	ldr	r2, [r3, #24]
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007956:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	699a      	ldr	r2, [r3, #24]
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007966:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	6999      	ldr	r1, [r3, #24]
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	691b      	ldr	r3, [r3, #16]
 8007972:	021a      	lsls	r2, r3, #8
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	430a      	orrs	r2, r1
 800797a:	619a      	str	r2, [r3, #24]
      break;
 800797c:	e041      	b.n	8007a02 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	68b9      	ldr	r1, [r7, #8]
 8007984:	4618      	mov	r0, r3
 8007986:	f000 fab7 	bl	8007ef8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	69da      	ldr	r2, [r3, #28]
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f042 0208 	orr.w	r2, r2, #8
 8007998:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	69da      	ldr	r2, [r3, #28]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f022 0204 	bic.w	r2, r2, #4
 80079a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	69d9      	ldr	r1, [r3, #28]
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	691a      	ldr	r2, [r3, #16]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	430a      	orrs	r2, r1
 80079ba:	61da      	str	r2, [r3, #28]
      break;
 80079bc:	e021      	b.n	8007a02 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	68b9      	ldr	r1, [r7, #8]
 80079c4:	4618      	mov	r0, r3
 80079c6:	f000 fb0b 	bl	8007fe0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	69da      	ldr	r2, [r3, #28]
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	69da      	ldr	r2, [r3, #28]
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	69d9      	ldr	r1, [r3, #28]
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	691b      	ldr	r3, [r3, #16]
 80079f4:	021a      	lsls	r2, r3, #8
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	430a      	orrs	r2, r1
 80079fc:	61da      	str	r2, [r3, #28]
      break;
 80079fe:	e000      	b.n	8007a02 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8007a00:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2200      	movs	r2, #0
 8007a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a0a:	2300      	movs	r3, #0
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3710      	adds	r7, #16
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b084      	sub	sp, #16
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d101      	bne.n	8007a2c <HAL_TIM_ConfigClockSource+0x18>
 8007a28:	2302      	movs	r3, #2
 8007a2a:	e0b3      	b.n	8007b94 <HAL_TIM_ConfigClockSource+0x180>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2202      	movs	r2, #2
 8007a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007a4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a52:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	68fa      	ldr	r2, [r7, #12]
 8007a5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a64:	d03e      	beq.n	8007ae4 <HAL_TIM_ConfigClockSource+0xd0>
 8007a66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a6a:	f200 8087 	bhi.w	8007b7c <HAL_TIM_ConfigClockSource+0x168>
 8007a6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a72:	f000 8085 	beq.w	8007b80 <HAL_TIM_ConfigClockSource+0x16c>
 8007a76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a7a:	d87f      	bhi.n	8007b7c <HAL_TIM_ConfigClockSource+0x168>
 8007a7c:	2b70      	cmp	r3, #112	; 0x70
 8007a7e:	d01a      	beq.n	8007ab6 <HAL_TIM_ConfigClockSource+0xa2>
 8007a80:	2b70      	cmp	r3, #112	; 0x70
 8007a82:	d87b      	bhi.n	8007b7c <HAL_TIM_ConfigClockSource+0x168>
 8007a84:	2b60      	cmp	r3, #96	; 0x60
 8007a86:	d050      	beq.n	8007b2a <HAL_TIM_ConfigClockSource+0x116>
 8007a88:	2b60      	cmp	r3, #96	; 0x60
 8007a8a:	d877      	bhi.n	8007b7c <HAL_TIM_ConfigClockSource+0x168>
 8007a8c:	2b50      	cmp	r3, #80	; 0x50
 8007a8e:	d03c      	beq.n	8007b0a <HAL_TIM_ConfigClockSource+0xf6>
 8007a90:	2b50      	cmp	r3, #80	; 0x50
 8007a92:	d873      	bhi.n	8007b7c <HAL_TIM_ConfigClockSource+0x168>
 8007a94:	2b40      	cmp	r3, #64	; 0x40
 8007a96:	d058      	beq.n	8007b4a <HAL_TIM_ConfigClockSource+0x136>
 8007a98:	2b40      	cmp	r3, #64	; 0x40
 8007a9a:	d86f      	bhi.n	8007b7c <HAL_TIM_ConfigClockSource+0x168>
 8007a9c:	2b30      	cmp	r3, #48	; 0x30
 8007a9e:	d064      	beq.n	8007b6a <HAL_TIM_ConfigClockSource+0x156>
 8007aa0:	2b30      	cmp	r3, #48	; 0x30
 8007aa2:	d86b      	bhi.n	8007b7c <HAL_TIM_ConfigClockSource+0x168>
 8007aa4:	2b20      	cmp	r3, #32
 8007aa6:	d060      	beq.n	8007b6a <HAL_TIM_ConfigClockSource+0x156>
 8007aa8:	2b20      	cmp	r3, #32
 8007aaa:	d867      	bhi.n	8007b7c <HAL_TIM_ConfigClockSource+0x168>
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d05c      	beq.n	8007b6a <HAL_TIM_ConfigClockSource+0x156>
 8007ab0:	2b10      	cmp	r3, #16
 8007ab2:	d05a      	beq.n	8007b6a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007ab4:	e062      	b.n	8007b7c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6818      	ldr	r0, [r3, #0]
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	6899      	ldr	r1, [r3, #8]
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	685a      	ldr	r2, [r3, #4]
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	68db      	ldr	r3, [r3, #12]
 8007ac6:	f000 fb5b 	bl	8008180 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007ad8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	68fa      	ldr	r2, [r7, #12]
 8007ae0:	609a      	str	r2, [r3, #8]
      break;
 8007ae2:	e04e      	b.n	8007b82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6818      	ldr	r0, [r3, #0]
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	6899      	ldr	r1, [r3, #8]
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	685a      	ldr	r2, [r3, #4]
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	68db      	ldr	r3, [r3, #12]
 8007af4:	f000 fb44 	bl	8008180 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	689a      	ldr	r2, [r3, #8]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b06:	609a      	str	r2, [r3, #8]
      break;
 8007b08:	e03b      	b.n	8007b82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6818      	ldr	r0, [r3, #0]
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	6859      	ldr	r1, [r3, #4]
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	68db      	ldr	r3, [r3, #12]
 8007b16:	461a      	mov	r2, r3
 8007b18:	f000 fab8 	bl	800808c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	2150      	movs	r1, #80	; 0x50
 8007b22:	4618      	mov	r0, r3
 8007b24:	f000 fb11 	bl	800814a <TIM_ITRx_SetConfig>
      break;
 8007b28:	e02b      	b.n	8007b82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6818      	ldr	r0, [r3, #0]
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	6859      	ldr	r1, [r3, #4]
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	68db      	ldr	r3, [r3, #12]
 8007b36:	461a      	mov	r2, r3
 8007b38:	f000 fad7 	bl	80080ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	2160      	movs	r1, #96	; 0x60
 8007b42:	4618      	mov	r0, r3
 8007b44:	f000 fb01 	bl	800814a <TIM_ITRx_SetConfig>
      break;
 8007b48:	e01b      	b.n	8007b82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6818      	ldr	r0, [r3, #0]
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	6859      	ldr	r1, [r3, #4]
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	68db      	ldr	r3, [r3, #12]
 8007b56:	461a      	mov	r2, r3
 8007b58:	f000 fa98 	bl	800808c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	2140      	movs	r1, #64	; 0x40
 8007b62:	4618      	mov	r0, r3
 8007b64:	f000 faf1 	bl	800814a <TIM_ITRx_SetConfig>
      break;
 8007b68:	e00b      	b.n	8007b82 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681a      	ldr	r2, [r3, #0]
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4619      	mov	r1, r3
 8007b74:	4610      	mov	r0, r2
 8007b76:	f000 fae8 	bl	800814a <TIM_ITRx_SetConfig>
        break;
 8007b7a:	e002      	b.n	8007b82 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007b7c:	bf00      	nop
 8007b7e:	e000      	b.n	8007b82 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007b80:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2201      	movs	r2, #1
 8007b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b92:	2300      	movs	r3, #0
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3710      	adds	r7, #16
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}

08007b9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b083      	sub	sp, #12
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ba4:	bf00      	nop
 8007ba6:	370c      	adds	r7, #12
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr

08007bb0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b083      	sub	sp, #12
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007bb8:	bf00      	nop
 8007bba:	370c      	adds	r7, #12
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr

08007bc4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007bcc:	bf00      	nop
 8007bce:	370c      	adds	r7, #12
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr

08007bd8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b083      	sub	sp, #12
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007be0:	bf00      	nop
 8007be2:	370c      	adds	r7, #12
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr

08007bec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b085      	sub	sp, #20
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	4a40      	ldr	r2, [pc, #256]	; (8007d00 <TIM_Base_SetConfig+0x114>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d013      	beq.n	8007c2c <TIM_Base_SetConfig+0x40>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c0a:	d00f      	beq.n	8007c2c <TIM_Base_SetConfig+0x40>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	4a3d      	ldr	r2, [pc, #244]	; (8007d04 <TIM_Base_SetConfig+0x118>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d00b      	beq.n	8007c2c <TIM_Base_SetConfig+0x40>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	4a3c      	ldr	r2, [pc, #240]	; (8007d08 <TIM_Base_SetConfig+0x11c>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d007      	beq.n	8007c2c <TIM_Base_SetConfig+0x40>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	4a3b      	ldr	r2, [pc, #236]	; (8007d0c <TIM_Base_SetConfig+0x120>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d003      	beq.n	8007c2c <TIM_Base_SetConfig+0x40>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	4a3a      	ldr	r2, [pc, #232]	; (8007d10 <TIM_Base_SetConfig+0x124>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d108      	bne.n	8007c3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	68fa      	ldr	r2, [r7, #12]
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	4a2f      	ldr	r2, [pc, #188]	; (8007d00 <TIM_Base_SetConfig+0x114>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d02b      	beq.n	8007c9e <TIM_Base_SetConfig+0xb2>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c4c:	d027      	beq.n	8007c9e <TIM_Base_SetConfig+0xb2>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	4a2c      	ldr	r2, [pc, #176]	; (8007d04 <TIM_Base_SetConfig+0x118>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d023      	beq.n	8007c9e <TIM_Base_SetConfig+0xb2>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	4a2b      	ldr	r2, [pc, #172]	; (8007d08 <TIM_Base_SetConfig+0x11c>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d01f      	beq.n	8007c9e <TIM_Base_SetConfig+0xb2>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	4a2a      	ldr	r2, [pc, #168]	; (8007d0c <TIM_Base_SetConfig+0x120>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d01b      	beq.n	8007c9e <TIM_Base_SetConfig+0xb2>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	4a29      	ldr	r2, [pc, #164]	; (8007d10 <TIM_Base_SetConfig+0x124>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d017      	beq.n	8007c9e <TIM_Base_SetConfig+0xb2>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	4a28      	ldr	r2, [pc, #160]	; (8007d14 <TIM_Base_SetConfig+0x128>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d013      	beq.n	8007c9e <TIM_Base_SetConfig+0xb2>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	4a27      	ldr	r2, [pc, #156]	; (8007d18 <TIM_Base_SetConfig+0x12c>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d00f      	beq.n	8007c9e <TIM_Base_SetConfig+0xb2>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	4a26      	ldr	r2, [pc, #152]	; (8007d1c <TIM_Base_SetConfig+0x130>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d00b      	beq.n	8007c9e <TIM_Base_SetConfig+0xb2>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	4a25      	ldr	r2, [pc, #148]	; (8007d20 <TIM_Base_SetConfig+0x134>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d007      	beq.n	8007c9e <TIM_Base_SetConfig+0xb2>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	4a24      	ldr	r2, [pc, #144]	; (8007d24 <TIM_Base_SetConfig+0x138>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d003      	beq.n	8007c9e <TIM_Base_SetConfig+0xb2>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	4a23      	ldr	r2, [pc, #140]	; (8007d28 <TIM_Base_SetConfig+0x13c>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d108      	bne.n	8007cb0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ca4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	68db      	ldr	r3, [r3, #12]
 8007caa:	68fa      	ldr	r2, [r7, #12]
 8007cac:	4313      	orrs	r3, r2
 8007cae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	695b      	ldr	r3, [r3, #20]
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	68fa      	ldr	r2, [r7, #12]
 8007cc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	689a      	ldr	r2, [r3, #8]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	4a0a      	ldr	r2, [pc, #40]	; (8007d00 <TIM_Base_SetConfig+0x114>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d003      	beq.n	8007ce4 <TIM_Base_SetConfig+0xf8>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	4a0c      	ldr	r2, [pc, #48]	; (8007d10 <TIM_Base_SetConfig+0x124>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d103      	bne.n	8007cec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	691a      	ldr	r2, [r3, #16]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	615a      	str	r2, [r3, #20]
}
 8007cf2:	bf00      	nop
 8007cf4:	3714      	adds	r7, #20
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfc:	4770      	bx	lr
 8007cfe:	bf00      	nop
 8007d00:	40010000 	.word	0x40010000
 8007d04:	40000400 	.word	0x40000400
 8007d08:	40000800 	.word	0x40000800
 8007d0c:	40000c00 	.word	0x40000c00
 8007d10:	40010400 	.word	0x40010400
 8007d14:	40014000 	.word	0x40014000
 8007d18:	40014400 	.word	0x40014400
 8007d1c:	40014800 	.word	0x40014800
 8007d20:	40001800 	.word	0x40001800
 8007d24:	40001c00 	.word	0x40001c00
 8007d28:	40002000 	.word	0x40002000

08007d2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b087      	sub	sp, #28
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6a1b      	ldr	r3, [r3, #32]
 8007d3a:	f023 0201 	bic.w	r2, r3, #1
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6a1b      	ldr	r3, [r3, #32]
 8007d46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	699b      	ldr	r3, [r3, #24]
 8007d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f023 0303 	bic.w	r3, r3, #3
 8007d62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	68fa      	ldr	r2, [r7, #12]
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	f023 0302 	bic.w	r3, r3, #2
 8007d74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	697a      	ldr	r2, [r7, #20]
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	4a20      	ldr	r2, [pc, #128]	; (8007e04 <TIM_OC1_SetConfig+0xd8>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d003      	beq.n	8007d90 <TIM_OC1_SetConfig+0x64>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	4a1f      	ldr	r2, [pc, #124]	; (8007e08 <TIM_OC1_SetConfig+0xdc>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d10c      	bne.n	8007daa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	f023 0308 	bic.w	r3, r3, #8
 8007d96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	68db      	ldr	r3, [r3, #12]
 8007d9c:	697a      	ldr	r2, [r7, #20]
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	f023 0304 	bic.w	r3, r3, #4
 8007da8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	4a15      	ldr	r2, [pc, #84]	; (8007e04 <TIM_OC1_SetConfig+0xd8>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d003      	beq.n	8007dba <TIM_OC1_SetConfig+0x8e>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	4a14      	ldr	r2, [pc, #80]	; (8007e08 <TIM_OC1_SetConfig+0xdc>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d111      	bne.n	8007dde <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007dc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007dc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	695b      	ldr	r3, [r3, #20]
 8007dce:	693a      	ldr	r2, [r7, #16]
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	699b      	ldr	r3, [r3, #24]
 8007dd8:	693a      	ldr	r2, [r7, #16]
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	693a      	ldr	r2, [r7, #16]
 8007de2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	68fa      	ldr	r2, [r7, #12]
 8007de8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	685a      	ldr	r2, [r3, #4]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	697a      	ldr	r2, [r7, #20]
 8007df6:	621a      	str	r2, [r3, #32]
}
 8007df8:	bf00      	nop
 8007dfa:	371c      	adds	r7, #28
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr
 8007e04:	40010000 	.word	0x40010000
 8007e08:	40010400 	.word	0x40010400

08007e0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b087      	sub	sp, #28
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6a1b      	ldr	r3, [r3, #32]
 8007e1a:	f023 0210 	bic.w	r2, r3, #16
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6a1b      	ldr	r3, [r3, #32]
 8007e26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	685b      	ldr	r3, [r3, #4]
 8007e2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	699b      	ldr	r3, [r3, #24]
 8007e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	021b      	lsls	r3, r3, #8
 8007e4a:	68fa      	ldr	r2, [r7, #12]
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	f023 0320 	bic.w	r3, r3, #32
 8007e56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	689b      	ldr	r3, [r3, #8]
 8007e5c:	011b      	lsls	r3, r3, #4
 8007e5e:	697a      	ldr	r2, [r7, #20]
 8007e60:	4313      	orrs	r3, r2
 8007e62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	4a22      	ldr	r2, [pc, #136]	; (8007ef0 <TIM_OC2_SetConfig+0xe4>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d003      	beq.n	8007e74 <TIM_OC2_SetConfig+0x68>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	4a21      	ldr	r2, [pc, #132]	; (8007ef4 <TIM_OC2_SetConfig+0xe8>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d10d      	bne.n	8007e90 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	68db      	ldr	r3, [r3, #12]
 8007e80:	011b      	lsls	r3, r3, #4
 8007e82:	697a      	ldr	r2, [r7, #20]
 8007e84:	4313      	orrs	r3, r2
 8007e86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e8e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	4a17      	ldr	r2, [pc, #92]	; (8007ef0 <TIM_OC2_SetConfig+0xe4>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d003      	beq.n	8007ea0 <TIM_OC2_SetConfig+0x94>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	4a16      	ldr	r2, [pc, #88]	; (8007ef4 <TIM_OC2_SetConfig+0xe8>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d113      	bne.n	8007ec8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ea6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007eae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	695b      	ldr	r3, [r3, #20]
 8007eb4:	009b      	lsls	r3, r3, #2
 8007eb6:	693a      	ldr	r2, [r7, #16]
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	699b      	ldr	r3, [r3, #24]
 8007ec0:	009b      	lsls	r3, r3, #2
 8007ec2:	693a      	ldr	r2, [r7, #16]
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	693a      	ldr	r2, [r7, #16]
 8007ecc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	68fa      	ldr	r2, [r7, #12]
 8007ed2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	685a      	ldr	r2, [r3, #4]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	697a      	ldr	r2, [r7, #20]
 8007ee0:	621a      	str	r2, [r3, #32]
}
 8007ee2:	bf00      	nop
 8007ee4:	371c      	adds	r7, #28
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eec:	4770      	bx	lr
 8007eee:	bf00      	nop
 8007ef0:	40010000 	.word	0x40010000
 8007ef4:	40010400 	.word	0x40010400

08007ef8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b087      	sub	sp, #28
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6a1b      	ldr	r3, [r3, #32]
 8007f06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6a1b      	ldr	r3, [r3, #32]
 8007f12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	69db      	ldr	r3, [r3, #28]
 8007f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f023 0303 	bic.w	r3, r3, #3
 8007f2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	68fa      	ldr	r2, [r7, #12]
 8007f36:	4313      	orrs	r3, r2
 8007f38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	689b      	ldr	r3, [r3, #8]
 8007f46:	021b      	lsls	r3, r3, #8
 8007f48:	697a      	ldr	r2, [r7, #20]
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	4a21      	ldr	r2, [pc, #132]	; (8007fd8 <TIM_OC3_SetConfig+0xe0>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d003      	beq.n	8007f5e <TIM_OC3_SetConfig+0x66>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	4a20      	ldr	r2, [pc, #128]	; (8007fdc <TIM_OC3_SetConfig+0xe4>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d10d      	bne.n	8007f7a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007f64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	68db      	ldr	r3, [r3, #12]
 8007f6a:	021b      	lsls	r3, r3, #8
 8007f6c:	697a      	ldr	r2, [r7, #20]
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007f78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	4a16      	ldr	r2, [pc, #88]	; (8007fd8 <TIM_OC3_SetConfig+0xe0>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d003      	beq.n	8007f8a <TIM_OC3_SetConfig+0x92>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	4a15      	ldr	r2, [pc, #84]	; (8007fdc <TIM_OC3_SetConfig+0xe4>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d113      	bne.n	8007fb2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007f98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	695b      	ldr	r3, [r3, #20]
 8007f9e:	011b      	lsls	r3, r3, #4
 8007fa0:	693a      	ldr	r2, [r7, #16]
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	699b      	ldr	r3, [r3, #24]
 8007faa:	011b      	lsls	r3, r3, #4
 8007fac:	693a      	ldr	r2, [r7, #16]
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	693a      	ldr	r2, [r7, #16]
 8007fb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	68fa      	ldr	r2, [r7, #12]
 8007fbc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	685a      	ldr	r2, [r3, #4]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	697a      	ldr	r2, [r7, #20]
 8007fca:	621a      	str	r2, [r3, #32]
}
 8007fcc:	bf00      	nop
 8007fce:	371c      	adds	r7, #28
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr
 8007fd8:	40010000 	.word	0x40010000
 8007fdc:	40010400 	.word	0x40010400

08007fe0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b087      	sub	sp, #28
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6a1b      	ldr	r3, [r3, #32]
 8007fee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6a1b      	ldr	r3, [r3, #32]
 8007ffa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	69db      	ldr	r3, [r3, #28]
 8008006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800800e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008016:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	021b      	lsls	r3, r3, #8
 800801e:	68fa      	ldr	r2, [r7, #12]
 8008020:	4313      	orrs	r3, r2
 8008022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800802a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	031b      	lsls	r3, r3, #12
 8008032:	693a      	ldr	r2, [r7, #16]
 8008034:	4313      	orrs	r3, r2
 8008036:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	4a12      	ldr	r2, [pc, #72]	; (8008084 <TIM_OC4_SetConfig+0xa4>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d003      	beq.n	8008048 <TIM_OC4_SetConfig+0x68>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	4a11      	ldr	r2, [pc, #68]	; (8008088 <TIM_OC4_SetConfig+0xa8>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d109      	bne.n	800805c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800804e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	695b      	ldr	r3, [r3, #20]
 8008054:	019b      	lsls	r3, r3, #6
 8008056:	697a      	ldr	r2, [r7, #20]
 8008058:	4313      	orrs	r3, r2
 800805a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	697a      	ldr	r2, [r7, #20]
 8008060:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	68fa      	ldr	r2, [r7, #12]
 8008066:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	685a      	ldr	r2, [r3, #4]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	693a      	ldr	r2, [r7, #16]
 8008074:	621a      	str	r2, [r3, #32]
}
 8008076:	bf00      	nop
 8008078:	371c      	adds	r7, #28
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr
 8008082:	bf00      	nop
 8008084:	40010000 	.word	0x40010000
 8008088:	40010400 	.word	0x40010400

0800808c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800808c:	b480      	push	{r7}
 800808e:	b087      	sub	sp, #28
 8008090:	af00      	add	r7, sp, #0
 8008092:	60f8      	str	r0, [r7, #12]
 8008094:	60b9      	str	r1, [r7, #8]
 8008096:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	6a1b      	ldr	r3, [r3, #32]
 800809c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	6a1b      	ldr	r3, [r3, #32]
 80080a2:	f023 0201 	bic.w	r2, r3, #1
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	699b      	ldr	r3, [r3, #24]
 80080ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80080b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	011b      	lsls	r3, r3, #4
 80080bc:	693a      	ldr	r2, [r7, #16]
 80080be:	4313      	orrs	r3, r2
 80080c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	f023 030a 	bic.w	r3, r3, #10
 80080c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80080ca:	697a      	ldr	r2, [r7, #20]
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	4313      	orrs	r3, r2
 80080d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	693a      	ldr	r2, [r7, #16]
 80080d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	697a      	ldr	r2, [r7, #20]
 80080dc:	621a      	str	r2, [r3, #32]
}
 80080de:	bf00      	nop
 80080e0:	371c      	adds	r7, #28
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr

080080ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080ea:	b480      	push	{r7}
 80080ec:	b087      	sub	sp, #28
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	60f8      	str	r0, [r7, #12]
 80080f2:	60b9      	str	r1, [r7, #8]
 80080f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	6a1b      	ldr	r3, [r3, #32]
 80080fa:	f023 0210 	bic.w	r2, r3, #16
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	699b      	ldr	r3, [r3, #24]
 8008106:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	6a1b      	ldr	r3, [r3, #32]
 800810c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008114:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	031b      	lsls	r3, r3, #12
 800811a:	697a      	ldr	r2, [r7, #20]
 800811c:	4313      	orrs	r3, r2
 800811e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008126:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	011b      	lsls	r3, r3, #4
 800812c:	693a      	ldr	r2, [r7, #16]
 800812e:	4313      	orrs	r3, r2
 8008130:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	697a      	ldr	r2, [r7, #20]
 8008136:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	693a      	ldr	r2, [r7, #16]
 800813c:	621a      	str	r2, [r3, #32]
}
 800813e:	bf00      	nop
 8008140:	371c      	adds	r7, #28
 8008142:	46bd      	mov	sp, r7
 8008144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008148:	4770      	bx	lr

0800814a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800814a:	b480      	push	{r7}
 800814c:	b085      	sub	sp, #20
 800814e:	af00      	add	r7, sp, #0
 8008150:	6078      	str	r0, [r7, #4]
 8008152:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	689b      	ldr	r3, [r3, #8]
 8008158:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008160:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008162:	683a      	ldr	r2, [r7, #0]
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	4313      	orrs	r3, r2
 8008168:	f043 0307 	orr.w	r3, r3, #7
 800816c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	68fa      	ldr	r2, [r7, #12]
 8008172:	609a      	str	r2, [r3, #8]
}
 8008174:	bf00      	nop
 8008176:	3714      	adds	r7, #20
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr

08008180 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008180:	b480      	push	{r7}
 8008182:	b087      	sub	sp, #28
 8008184:	af00      	add	r7, sp, #0
 8008186:	60f8      	str	r0, [r7, #12]
 8008188:	60b9      	str	r1, [r7, #8]
 800818a:	607a      	str	r2, [r7, #4]
 800818c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	689b      	ldr	r3, [r3, #8]
 8008192:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800819a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	021a      	lsls	r2, r3, #8
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	431a      	orrs	r2, r3
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	4313      	orrs	r3, r2
 80081a8:	697a      	ldr	r2, [r7, #20]
 80081aa:	4313      	orrs	r3, r2
 80081ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	697a      	ldr	r2, [r7, #20]
 80081b2:	609a      	str	r2, [r3, #8]
}
 80081b4:	bf00      	nop
 80081b6:	371c      	adds	r7, #28
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr

080081c0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b084      	sub	sp, #16
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d109      	bne.n	80081e4 <HAL_TIMEx_PWMN_Start+0x24>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80081d6:	b2db      	uxtb	r3, r3
 80081d8:	2b01      	cmp	r3, #1
 80081da:	bf14      	ite	ne
 80081dc:	2301      	movne	r3, #1
 80081de:	2300      	moveq	r3, #0
 80081e0:	b2db      	uxtb	r3, r3
 80081e2:	e022      	b.n	800822a <HAL_TIMEx_PWMN_Start+0x6a>
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	2b04      	cmp	r3, #4
 80081e8:	d109      	bne.n	80081fe <HAL_TIMEx_PWMN_Start+0x3e>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80081f0:	b2db      	uxtb	r3, r3
 80081f2:	2b01      	cmp	r3, #1
 80081f4:	bf14      	ite	ne
 80081f6:	2301      	movne	r3, #1
 80081f8:	2300      	moveq	r3, #0
 80081fa:	b2db      	uxtb	r3, r3
 80081fc:	e015      	b.n	800822a <HAL_TIMEx_PWMN_Start+0x6a>
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	2b08      	cmp	r3, #8
 8008202:	d109      	bne.n	8008218 <HAL_TIMEx_PWMN_Start+0x58>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800820a:	b2db      	uxtb	r3, r3
 800820c:	2b01      	cmp	r3, #1
 800820e:	bf14      	ite	ne
 8008210:	2301      	movne	r3, #1
 8008212:	2300      	moveq	r3, #0
 8008214:	b2db      	uxtb	r3, r3
 8008216:	e008      	b.n	800822a <HAL_TIMEx_PWMN_Start+0x6a>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800821e:	b2db      	uxtb	r3, r3
 8008220:	2b01      	cmp	r3, #1
 8008222:	bf14      	ite	ne
 8008224:	2301      	movne	r3, #1
 8008226:	2300      	moveq	r3, #0
 8008228:	b2db      	uxtb	r3, r3
 800822a:	2b00      	cmp	r3, #0
 800822c:	d001      	beq.n	8008232 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	e06d      	b.n	800830e <HAL_TIMEx_PWMN_Start+0x14e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d104      	bne.n	8008242 <HAL_TIMEx_PWMN_Start+0x82>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2202      	movs	r2, #2
 800823c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008240:	e013      	b.n	800826a <HAL_TIMEx_PWMN_Start+0xaa>
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	2b04      	cmp	r3, #4
 8008246:	d104      	bne.n	8008252 <HAL_TIMEx_PWMN_Start+0x92>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2202      	movs	r2, #2
 800824c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008250:	e00b      	b.n	800826a <HAL_TIMEx_PWMN_Start+0xaa>
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	2b08      	cmp	r3, #8
 8008256:	d104      	bne.n	8008262 <HAL_TIMEx_PWMN_Start+0xa2>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2202      	movs	r2, #2
 800825c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008260:	e003      	b.n	800826a <HAL_TIMEx_PWMN_Start+0xaa>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2202      	movs	r2, #2
 8008266:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	2204      	movs	r2, #4
 8008270:	6839      	ldr	r1, [r7, #0]
 8008272:	4618      	mov	r0, r3
 8008274:	f000 f940 	bl	80084f8 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008286:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a22      	ldr	r2, [pc, #136]	; (8008318 <HAL_TIMEx_PWMN_Start+0x158>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d022      	beq.n	80082d8 <HAL_TIMEx_PWMN_Start+0x118>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800829a:	d01d      	beq.n	80082d8 <HAL_TIMEx_PWMN_Start+0x118>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a1e      	ldr	r2, [pc, #120]	; (800831c <HAL_TIMEx_PWMN_Start+0x15c>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d018      	beq.n	80082d8 <HAL_TIMEx_PWMN_Start+0x118>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a1d      	ldr	r2, [pc, #116]	; (8008320 <HAL_TIMEx_PWMN_Start+0x160>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d013      	beq.n	80082d8 <HAL_TIMEx_PWMN_Start+0x118>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a1b      	ldr	r2, [pc, #108]	; (8008324 <HAL_TIMEx_PWMN_Start+0x164>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d00e      	beq.n	80082d8 <HAL_TIMEx_PWMN_Start+0x118>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4a1a      	ldr	r2, [pc, #104]	; (8008328 <HAL_TIMEx_PWMN_Start+0x168>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d009      	beq.n	80082d8 <HAL_TIMEx_PWMN_Start+0x118>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4a18      	ldr	r2, [pc, #96]	; (800832c <HAL_TIMEx_PWMN_Start+0x16c>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d004      	beq.n	80082d8 <HAL_TIMEx_PWMN_Start+0x118>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4a17      	ldr	r2, [pc, #92]	; (8008330 <HAL_TIMEx_PWMN_Start+0x170>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d111      	bne.n	80082fc <HAL_TIMEx_PWMN_Start+0x13c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	689b      	ldr	r3, [r3, #8]
 80082de:	f003 0307 	and.w	r3, r3, #7
 80082e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2b06      	cmp	r3, #6
 80082e8:	d010      	beq.n	800830c <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	681a      	ldr	r2, [r3, #0]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f042 0201 	orr.w	r2, r2, #1
 80082f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082fa:	e007      	b.n	800830c <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f042 0201 	orr.w	r2, r2, #1
 800830a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800830c:	2300      	movs	r3, #0
}
 800830e:	4618      	mov	r0, r3
 8008310:	3710      	adds	r7, #16
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}
 8008316:	bf00      	nop
 8008318:	40010000 	.word	0x40010000
 800831c:	40000400 	.word	0x40000400
 8008320:	40000800 	.word	0x40000800
 8008324:	40000c00 	.word	0x40000c00
 8008328:	40010400 	.word	0x40010400
 800832c:	40014000 	.word	0x40014000
 8008330:	40001800 	.word	0x40001800

08008334 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008334:	b480      	push	{r7}
 8008336:	b085      	sub	sp, #20
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008344:	2b01      	cmp	r3, #1
 8008346:	d101      	bne.n	800834c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008348:	2302      	movs	r3, #2
 800834a:	e05a      	b.n	8008402 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2201      	movs	r2, #1
 8008350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2202      	movs	r2, #2
 8008358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	685b      	ldr	r3, [r3, #4]
 8008362:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	689b      	ldr	r3, [r3, #8]
 800836a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008372:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	68fa      	ldr	r2, [r7, #12]
 800837a:	4313      	orrs	r3, r2
 800837c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	68fa      	ldr	r2, [r7, #12]
 8008384:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	4a21      	ldr	r2, [pc, #132]	; (8008410 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d022      	beq.n	80083d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008398:	d01d      	beq.n	80083d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4a1d      	ldr	r2, [pc, #116]	; (8008414 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d018      	beq.n	80083d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4a1b      	ldr	r2, [pc, #108]	; (8008418 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d013      	beq.n	80083d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4a1a      	ldr	r2, [pc, #104]	; (800841c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d00e      	beq.n	80083d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4a18      	ldr	r2, [pc, #96]	; (8008420 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d009      	beq.n	80083d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4a17      	ldr	r2, [pc, #92]	; (8008424 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d004      	beq.n	80083d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a15      	ldr	r2, [pc, #84]	; (8008428 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d10c      	bne.n	80083f0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	68ba      	ldr	r2, [r7, #8]
 80083e4:	4313      	orrs	r3, r2
 80083e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	68ba      	ldr	r2, [r7, #8]
 80083ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2201      	movs	r2, #1
 80083f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2200      	movs	r2, #0
 80083fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008400:	2300      	movs	r3, #0
}
 8008402:	4618      	mov	r0, r3
 8008404:	3714      	adds	r7, #20
 8008406:	46bd      	mov	sp, r7
 8008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840c:	4770      	bx	lr
 800840e:	bf00      	nop
 8008410:	40010000 	.word	0x40010000
 8008414:	40000400 	.word	0x40000400
 8008418:	40000800 	.word	0x40000800
 800841c:	40000c00 	.word	0x40000c00
 8008420:	40010400 	.word	0x40010400
 8008424:	40014000 	.word	0x40014000
 8008428:	40001800 	.word	0x40001800

0800842c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800842c:	b480      	push	{r7}
 800842e:	b085      	sub	sp, #20
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008436:	2300      	movs	r3, #0
 8008438:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008440:	2b01      	cmp	r3, #1
 8008442:	d101      	bne.n	8008448 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008444:	2302      	movs	r3, #2
 8008446:	e03d      	b.n	80084c4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2201      	movs	r2, #1
 800844c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	68db      	ldr	r3, [r3, #12]
 800845a:	4313      	orrs	r3, r2
 800845c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	689b      	ldr	r3, [r3, #8]
 8008468:	4313      	orrs	r3, r2
 800846a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	4313      	orrs	r3, r2
 8008478:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4313      	orrs	r3, r2
 8008486:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	691b      	ldr	r3, [r3, #16]
 8008492:	4313      	orrs	r3, r2
 8008494:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	695b      	ldr	r3, [r3, #20]
 80084a0:	4313      	orrs	r3, r2
 80084a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	69db      	ldr	r3, [r3, #28]
 80084ae:	4313      	orrs	r3, r2
 80084b0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	68fa      	ldr	r2, [r7, #12]
 80084b8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2200      	movs	r2, #0
 80084be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80084c2:	2300      	movs	r3, #0
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3714      	adds	r7, #20
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr

080084d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b083      	sub	sp, #12
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80084d8:	bf00      	nop
 80084da:	370c      	adds	r7, #12
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr

080084e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b083      	sub	sp, #12
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80084ec:	bf00      	nop
 80084ee:	370c      	adds	r7, #12
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr

080084f8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b087      	sub	sp, #28
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	60f8      	str	r0, [r7, #12]
 8008500:	60b9      	str	r1, [r7, #8]
 8008502:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	f003 031f 	and.w	r3, r3, #31
 800850a:	2204      	movs	r2, #4
 800850c:	fa02 f303 	lsl.w	r3, r2, r3
 8008510:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	6a1a      	ldr	r2, [r3, #32]
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	43db      	mvns	r3, r3
 800851a:	401a      	ands	r2, r3
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	6a1a      	ldr	r2, [r3, #32]
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	f003 031f 	and.w	r3, r3, #31
 800852a:	6879      	ldr	r1, [r7, #4]
 800852c:	fa01 f303 	lsl.w	r3, r1, r3
 8008530:	431a      	orrs	r2, r3
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	621a      	str	r2, [r3, #32]
}
 8008536:	bf00      	nop
 8008538:	371c      	adds	r7, #28
 800853a:	46bd      	mov	sp, r7
 800853c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008540:	4770      	bx	lr

08008542 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008542:	b580      	push	{r7, lr}
 8008544:	b082      	sub	sp, #8
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d101      	bne.n	8008554 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008550:	2301      	movs	r3, #1
 8008552:	e03f      	b.n	80085d4 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800855a:	b2db      	uxtb	r3, r3
 800855c:	2b00      	cmp	r3, #0
 800855e:	d106      	bne.n	800856e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2200      	movs	r2, #0
 8008564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f7fb faf9 	bl	8003b60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2224      	movs	r2, #36	; 0x24
 8008572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	68da      	ldr	r2, [r3, #12]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008584:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f000 fd92 	bl	80090b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	691a      	ldr	r2, [r3, #16]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800859a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	695a      	ldr	r2, [r3, #20]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80085aa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	68da      	ldr	r2, [r3, #12]
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80085ba:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2200      	movs	r2, #0
 80085c0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2220      	movs	r2, #32
 80085c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2220      	movs	r2, #32
 80085ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80085d2:	2300      	movs	r3, #0
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3708      	adds	r7, #8
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}

080085dc <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b082      	sub	sp, #8
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d101      	bne.n	80085ee <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80085ea:	2301      	movs	r3, #1
 80085ec:	e047      	b.n	800867e <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085f4:	b2db      	uxtb	r3, r3
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d106      	bne.n	8008608 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2200      	movs	r2, #0
 80085fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f7fb faac 	bl	8003b60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2224      	movs	r2, #36	; 0x24
 800860c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	68da      	ldr	r2, [r3, #12]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800861e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f000 fd45 	bl	80090b0 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	691a      	ldr	r2, [r3, #16]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008634:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	695a      	ldr	r2, [r3, #20]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8008644:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	695a      	ldr	r2, [r3, #20]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f042 0208 	orr.w	r2, r2, #8
 8008654:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	68da      	ldr	r2, [r3, #12]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008664:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2200      	movs	r2, #0
 800866a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2220      	movs	r2, #32
 8008670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2220      	movs	r2, #32
 8008678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800867c:	2300      	movs	r3, #0
}
 800867e:	4618      	mov	r0, r3
 8008680:	3708      	adds	r7, #8
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}
	...

08008688 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b086      	sub	sp, #24
 800868c:	af00      	add	r7, sp, #0
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	60b9      	str	r1, [r7, #8]
 8008692:	4613      	mov	r3, r2
 8008694:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800869c:	b2db      	uxtb	r3, r3
 800869e:	2b20      	cmp	r3, #32
 80086a0:	d153      	bne.n	800874a <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d002      	beq.n	80086ae <HAL_UART_Transmit_DMA+0x26>
 80086a8:	88fb      	ldrh	r3, [r7, #6]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d101      	bne.n	80086b2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80086ae:	2301      	movs	r3, #1
 80086b0:	e04c      	b.n	800874c <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	d101      	bne.n	80086c0 <HAL_UART_Transmit_DMA+0x38>
 80086bc:	2302      	movs	r3, #2
 80086be:	e045      	b.n	800874c <HAL_UART_Transmit_DMA+0xc4>
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2201      	movs	r2, #1
 80086c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80086c8:	68ba      	ldr	r2, [r7, #8]
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	88fa      	ldrh	r2, [r7, #6]
 80086d2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	88fa      	ldrh	r2, [r7, #6]
 80086d8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	2200      	movs	r2, #0
 80086de:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	2221      	movs	r2, #33	; 0x21
 80086e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086ec:	4a19      	ldr	r2, [pc, #100]	; (8008754 <HAL_UART_Transmit_DMA+0xcc>)
 80086ee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086f4:	4a18      	ldr	r2, [pc, #96]	; (8008758 <HAL_UART_Transmit_DMA+0xd0>)
 80086f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086fc:	4a17      	ldr	r2, [pc, #92]	; (800875c <HAL_UART_Transmit_DMA+0xd4>)
 80086fe:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008704:	2200      	movs	r2, #0
 8008706:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8008708:	f107 0308 	add.w	r3, r7, #8
 800870c:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	6819      	ldr	r1, [r3, #0]
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	3304      	adds	r3, #4
 800871c:	461a      	mov	r2, r3
 800871e:	88fb      	ldrh	r3, [r7, #6]
 8008720:	f7fc fcee 	bl	8005100 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800872c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	2200      	movs	r2, #0
 8008732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	695a      	ldr	r2, [r3, #20]
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008744:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8008746:	2300      	movs	r3, #0
 8008748:	e000      	b.n	800874c <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800874a:	2302      	movs	r3, #2
  }
}
 800874c:	4618      	mov	r0, r3
 800874e:	3718      	adds	r7, #24
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}
 8008754:	08008b6d 	.word	0x08008b6d
 8008758:	08008bbf 	.word	0x08008bbf
 800875c:	08008ca7 	.word	0x08008ca7

08008760 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b084      	sub	sp, #16
 8008764:	af00      	add	r7, sp, #0
 8008766:	60f8      	str	r0, [r7, #12]
 8008768:	60b9      	str	r1, [r7, #8]
 800876a:	4613      	mov	r3, r2
 800876c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008774:	b2db      	uxtb	r3, r3
 8008776:	2b20      	cmp	r3, #32
 8008778:	d11d      	bne.n	80087b6 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d002      	beq.n	8008786 <HAL_UART_Receive_DMA+0x26>
 8008780:	88fb      	ldrh	r3, [r7, #6]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d101      	bne.n	800878a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008786:	2301      	movs	r3, #1
 8008788:	e016      	b.n	80087b8 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008790:	2b01      	cmp	r3, #1
 8008792:	d101      	bne.n	8008798 <HAL_UART_Receive_DMA+0x38>
 8008794:	2302      	movs	r3, #2
 8008796:	e00f      	b.n	80087b8 <HAL_UART_Receive_DMA+0x58>
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2201      	movs	r2, #1
 800879c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2200      	movs	r2, #0
 80087a4:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 80087a6:	88fb      	ldrh	r3, [r7, #6]
 80087a8:	461a      	mov	r2, r3
 80087aa:	68b9      	ldr	r1, [r7, #8]
 80087ac:	68f8      	ldr	r0, [r7, #12]
 80087ae:	f000 fac5 	bl	8008d3c <UART_Start_Receive_DMA>
 80087b2:	4603      	mov	r3, r0
 80087b4:	e000      	b.n	80087b8 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80087b6:	2302      	movs	r3, #2
  }
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3710      	adds	r7, #16
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}

080087c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b08a      	sub	sp, #40	; 0x28
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	68db      	ldr	r3, [r3, #12]
 80087d6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	695b      	ldr	r3, [r3, #20]
 80087de:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80087e0:	2300      	movs	r3, #0
 80087e2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80087e4:	2300      	movs	r3, #0
 80087e6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80087e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ea:	f003 030f 	and.w	r3, r3, #15
 80087ee:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80087f0:	69bb      	ldr	r3, [r7, #24]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d10d      	bne.n	8008812 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80087f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f8:	f003 0320 	and.w	r3, r3, #32
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d008      	beq.n	8008812 <HAL_UART_IRQHandler+0x52>
 8008800:	6a3b      	ldr	r3, [r7, #32]
 8008802:	f003 0320 	and.w	r3, r3, #32
 8008806:	2b00      	cmp	r3, #0
 8008808:	d003      	beq.n	8008812 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f000 fbb9 	bl	8008f82 <UART_Receive_IT>
      return;
 8008810:	e17c      	b.n	8008b0c <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008812:	69bb      	ldr	r3, [r7, #24]
 8008814:	2b00      	cmp	r3, #0
 8008816:	f000 80b1 	beq.w	800897c <HAL_UART_IRQHandler+0x1bc>
 800881a:	69fb      	ldr	r3, [r7, #28]
 800881c:	f003 0301 	and.w	r3, r3, #1
 8008820:	2b00      	cmp	r3, #0
 8008822:	d105      	bne.n	8008830 <HAL_UART_IRQHandler+0x70>
 8008824:	6a3b      	ldr	r3, [r7, #32]
 8008826:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800882a:	2b00      	cmp	r3, #0
 800882c:	f000 80a6 	beq.w	800897c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008832:	f003 0301 	and.w	r3, r3, #1
 8008836:	2b00      	cmp	r3, #0
 8008838:	d00a      	beq.n	8008850 <HAL_UART_IRQHandler+0x90>
 800883a:	6a3b      	ldr	r3, [r7, #32]
 800883c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008840:	2b00      	cmp	r3, #0
 8008842:	d005      	beq.n	8008850 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008848:	f043 0201 	orr.w	r2, r3, #1
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008852:	f003 0304 	and.w	r3, r3, #4
 8008856:	2b00      	cmp	r3, #0
 8008858:	d00a      	beq.n	8008870 <HAL_UART_IRQHandler+0xb0>
 800885a:	69fb      	ldr	r3, [r7, #28]
 800885c:	f003 0301 	and.w	r3, r3, #1
 8008860:	2b00      	cmp	r3, #0
 8008862:	d005      	beq.n	8008870 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008868:	f043 0202 	orr.w	r2, r3, #2
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008872:	f003 0302 	and.w	r3, r3, #2
 8008876:	2b00      	cmp	r3, #0
 8008878:	d00a      	beq.n	8008890 <HAL_UART_IRQHandler+0xd0>
 800887a:	69fb      	ldr	r3, [r7, #28]
 800887c:	f003 0301 	and.w	r3, r3, #1
 8008880:	2b00      	cmp	r3, #0
 8008882:	d005      	beq.n	8008890 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008888:	f043 0204 	orr.w	r2, r3, #4
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008892:	f003 0308 	and.w	r3, r3, #8
 8008896:	2b00      	cmp	r3, #0
 8008898:	d00f      	beq.n	80088ba <HAL_UART_IRQHandler+0xfa>
 800889a:	6a3b      	ldr	r3, [r7, #32]
 800889c:	f003 0320 	and.w	r3, r3, #32
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d104      	bne.n	80088ae <HAL_UART_IRQHandler+0xee>
 80088a4:	69fb      	ldr	r3, [r7, #28]
 80088a6:	f003 0301 	and.w	r3, r3, #1
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d005      	beq.n	80088ba <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088b2:	f043 0208 	orr.w	r2, r3, #8
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088be:	2b00      	cmp	r3, #0
 80088c0:	f000 811f 	beq.w	8008b02 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80088c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c6:	f003 0320 	and.w	r3, r3, #32
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d007      	beq.n	80088de <HAL_UART_IRQHandler+0x11e>
 80088ce:	6a3b      	ldr	r3, [r7, #32]
 80088d0:	f003 0320 	and.w	r3, r3, #32
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d002      	beq.n	80088de <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f000 fb52 	bl	8008f82 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	695b      	ldr	r3, [r3, #20]
 80088e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088e8:	2b40      	cmp	r3, #64	; 0x40
 80088ea:	bf0c      	ite	eq
 80088ec:	2301      	moveq	r3, #1
 80088ee:	2300      	movne	r3, #0
 80088f0:	b2db      	uxtb	r3, r3
 80088f2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088f8:	f003 0308 	and.w	r3, r3, #8
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d102      	bne.n	8008906 <HAL_UART_IRQHandler+0x146>
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d031      	beq.n	800896a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f000 fa92 	bl	8008e30 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	695b      	ldr	r3, [r3, #20]
 8008912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008916:	2b40      	cmp	r3, #64	; 0x40
 8008918:	d123      	bne.n	8008962 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	695a      	ldr	r2, [r3, #20]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008928:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800892e:	2b00      	cmp	r3, #0
 8008930:	d013      	beq.n	800895a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008936:	4a77      	ldr	r2, [pc, #476]	; (8008b14 <HAL_UART_IRQHandler+0x354>)
 8008938:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800893e:	4618      	mov	r0, r3
 8008940:	f7fc fca6 	bl	8005290 <HAL_DMA_Abort_IT>
 8008944:	4603      	mov	r3, r0
 8008946:	2b00      	cmp	r3, #0
 8008948:	d016      	beq.n	8008978 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800894e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008950:	687a      	ldr	r2, [r7, #4]
 8008952:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008954:	4610      	mov	r0, r2
 8008956:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008958:	e00e      	b.n	8008978 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f7f9 ff36 	bl	80027cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008960:	e00a      	b.n	8008978 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f7f9 ff32 	bl	80027cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008968:	e006      	b.n	8008978 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f7f9 ff2e 	bl	80027cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2200      	movs	r2, #0
 8008974:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008976:	e0c4      	b.n	8008b02 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008978:	bf00      	nop
    return;
 800897a:	e0c2      	b.n	8008b02 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008980:	2b01      	cmp	r3, #1
 8008982:	f040 80a2 	bne.w	8008aca <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8008986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008988:	f003 0310 	and.w	r3, r3, #16
 800898c:	2b00      	cmp	r3, #0
 800898e:	f000 809c 	beq.w	8008aca <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8008992:	6a3b      	ldr	r3, [r7, #32]
 8008994:	f003 0310 	and.w	r3, r3, #16
 8008998:	2b00      	cmp	r3, #0
 800899a:	f000 8096 	beq.w	8008aca <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800899e:	2300      	movs	r3, #0
 80089a0:	60fb      	str	r3, [r7, #12]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	60fb      	str	r3, [r7, #12]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	60fb      	str	r3, [r7, #12]
 80089b2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	695b      	ldr	r3, [r3, #20]
 80089ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089be:	2b40      	cmp	r3, #64	; 0x40
 80089c0:	d14f      	bne.n	8008a62 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80089cc:	8a3b      	ldrh	r3, [r7, #16]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	f000 8099 	beq.w	8008b06 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80089d8:	8a3a      	ldrh	r2, [r7, #16]
 80089da:	429a      	cmp	r2, r3
 80089dc:	f080 8093 	bcs.w	8008b06 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	8a3a      	ldrh	r2, [r7, #16]
 80089e4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ea:	69db      	ldr	r3, [r3, #28]
 80089ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089f0:	d02b      	beq.n	8008a4a <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	68da      	ldr	r2, [r3, #12]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008a00:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	695a      	ldr	r2, [r3, #20]
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f022 0201 	bic.w	r2, r2, #1
 8008a10:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	695a      	ldr	r2, [r3, #20]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a20:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2220      	movs	r2, #32
 8008a26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	68da      	ldr	r2, [r3, #12]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f022 0210 	bic.w	r2, r2, #16
 8008a3e:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a44:	4618      	mov	r0, r3
 8008a46:	f7fc fbb3 	bl	80051b0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a52:	b29b      	uxth	r3, r3
 8008a54:	1ad3      	subs	r3, r2, r3
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	4619      	mov	r1, r3
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 f87a 	bl	8008b54 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008a60:	e051      	b.n	8008b06 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a6a:	b29b      	uxth	r3, r3
 8008a6c:	1ad3      	subs	r3, r2, r3
 8008a6e:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d047      	beq.n	8008b0a <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8008a7a:	8a7b      	ldrh	r3, [r7, #18]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d044      	beq.n	8008b0a <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	68da      	ldr	r2, [r3, #12]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008a8e:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	695a      	ldr	r2, [r3, #20]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f022 0201 	bic.w	r2, r2, #1
 8008a9e:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2220      	movs	r2, #32
 8008aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	68da      	ldr	r2, [r3, #12]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f022 0210 	bic.w	r2, r2, #16
 8008abc:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008abe:	8a7b      	ldrh	r3, [r7, #18]
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f000 f846 	bl	8008b54 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008ac8:	e01f      	b.n	8008b0a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d008      	beq.n	8008ae6 <HAL_UART_IRQHandler+0x326>
 8008ad4:	6a3b      	ldr	r3, [r7, #32]
 8008ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d003      	beq.n	8008ae6 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f000 f9e7 	bl	8008eb2 <UART_Transmit_IT>
    return;
 8008ae4:	e012      	b.n	8008b0c <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d00d      	beq.n	8008b0c <HAL_UART_IRQHandler+0x34c>
 8008af0:	6a3b      	ldr	r3, [r7, #32]
 8008af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d008      	beq.n	8008b0c <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f000 fa29 	bl	8008f52 <UART_EndTransmit_IT>
    return;
 8008b00:	e004      	b.n	8008b0c <HAL_UART_IRQHandler+0x34c>
    return;
 8008b02:	bf00      	nop
 8008b04:	e002      	b.n	8008b0c <HAL_UART_IRQHandler+0x34c>
      return;
 8008b06:	bf00      	nop
 8008b08:	e000      	b.n	8008b0c <HAL_UART_IRQHandler+0x34c>
      return;
 8008b0a:	bf00      	nop
  }
}
 8008b0c:	3728      	adds	r7, #40	; 0x28
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}
 8008b12:	bf00      	nop
 8008b14:	08008e8b 	.word	0x08008e8b

08008b18 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b083      	sub	sp, #12
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008b20:	bf00      	nop
 8008b22:	370c      	adds	r7, #12
 8008b24:	46bd      	mov	sp, r7
 8008b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2a:	4770      	bx	lr

08008b2c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b083      	sub	sp, #12
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008b34:	bf00      	nop
 8008b36:	370c      	adds	r7, #12
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr

08008b40 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b083      	sub	sp, #12
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008b48:	bf00      	nop
 8008b4a:	370c      	adds	r7, #12
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b52:	4770      	bx	lr

08008b54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008b54:	b480      	push	{r7}
 8008b56:	b083      	sub	sp, #12
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	460b      	mov	r3, r1
 8008b5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008b60:	bf00      	nop
 8008b62:	370c      	adds	r7, #12
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr

08008b6c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b084      	sub	sp, #16
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b78:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d113      	bne.n	8008bb0 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	695a      	ldr	r2, [r3, #20]
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008b9c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	68da      	ldr	r2, [r3, #12]
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008bac:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008bae:	e002      	b.n	8008bb6 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8008bb0:	68f8      	ldr	r0, [r7, #12]
 8008bb2:	f7ff ffb1 	bl	8008b18 <HAL_UART_TxCpltCallback>
}
 8008bb6:	bf00      	nop
 8008bb8:	3710      	adds	r7, #16
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}

08008bbe <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008bbe:	b580      	push	{r7, lr}
 8008bc0:	b084      	sub	sp, #16
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bca:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008bcc:	68f8      	ldr	r0, [r7, #12]
 8008bce:	f7ff ffad 	bl	8008b2c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008bd2:	bf00      	nop
 8008bd4:	3710      	adds	r7, #16
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}

08008bda <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008bda:	b580      	push	{r7, lr}
 8008bdc:	b084      	sub	sp, #16
 8008bde:	af00      	add	r7, sp, #0
 8008be0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be6:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d12a      	bne.n	8008c4c <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	68da      	ldr	r2, [r3, #12]
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008c0a:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	695a      	ldr	r2, [r3, #20]
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f022 0201 	bic.w	r2, r2, #1
 8008c1a:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	695a      	ldr	r2, [r3, #20]
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c2a:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	2220      	movs	r2, #32
 8008c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	d107      	bne.n	8008c4c <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	68da      	ldr	r2, [r3, #12]
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f022 0210 	bic.w	r2, r2, #16
 8008c4a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	d106      	bne.n	8008c62 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008c58:	4619      	mov	r1, r3
 8008c5a:	68f8      	ldr	r0, [r7, #12]
 8008c5c:	f7ff ff7a 	bl	8008b54 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008c60:	e002      	b.n	8008c68 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8008c62:	68f8      	ldr	r0, [r7, #12]
 8008c64:	f7f9 fd66 	bl	8002734 <HAL_UART_RxCpltCallback>
}
 8008c68:	bf00      	nop
 8008c6a:	3710      	adds	r7, #16
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}

08008c70 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b084      	sub	sp, #16
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c7c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c82:	2b01      	cmp	r3, #1
 8008c84:	d108      	bne.n	8008c98 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008c8a:	085b      	lsrs	r3, r3, #1
 8008c8c:	b29b      	uxth	r3, r3
 8008c8e:	4619      	mov	r1, r3
 8008c90:	68f8      	ldr	r0, [r7, #12]
 8008c92:	f7ff ff5f 	bl	8008b54 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008c96:	e002      	b.n	8008c9e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008c98:	68f8      	ldr	r0, [r7, #12]
 8008c9a:	f7ff ff51 	bl	8008b40 <HAL_UART_RxHalfCpltCallback>
}
 8008c9e:	bf00      	nop
 8008ca0:	3710      	adds	r7, #16
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}

08008ca6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008ca6:	b580      	push	{r7, lr}
 8008ca8:	b084      	sub	sp, #16
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cb6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	695b      	ldr	r3, [r3, #20]
 8008cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cc2:	2b80      	cmp	r3, #128	; 0x80
 8008cc4:	bf0c      	ite	eq
 8008cc6:	2301      	moveq	r3, #1
 8008cc8:	2300      	movne	r3, #0
 8008cca:	b2db      	uxtb	r3, r3
 8008ccc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cd4:	b2db      	uxtb	r3, r3
 8008cd6:	2b21      	cmp	r3, #33	; 0x21
 8008cd8:	d108      	bne.n	8008cec <UART_DMAError+0x46>
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d005      	beq.n	8008cec <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008ce6:	68b8      	ldr	r0, [r7, #8]
 8008ce8:	f000 f88c 	bl	8008e04 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	695b      	ldr	r3, [r3, #20]
 8008cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cf6:	2b40      	cmp	r3, #64	; 0x40
 8008cf8:	bf0c      	ite	eq
 8008cfa:	2301      	moveq	r3, #1
 8008cfc:	2300      	movne	r3, #0
 8008cfe:	b2db      	uxtb	r3, r3
 8008d00:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008d08:	b2db      	uxtb	r3, r3
 8008d0a:	2b22      	cmp	r3, #34	; 0x22
 8008d0c:	d108      	bne.n	8008d20 <UART_DMAError+0x7a>
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d005      	beq.n	8008d20 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	2200      	movs	r2, #0
 8008d18:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008d1a:	68b8      	ldr	r0, [r7, #8]
 8008d1c:	f000 f888 	bl	8008e30 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d24:	f043 0210 	orr.w	r2, r3, #16
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d2c:	68b8      	ldr	r0, [r7, #8]
 8008d2e:	f7f9 fd4d 	bl	80027cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d32:	bf00      	nop
 8008d34:	3710      	adds	r7, #16
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}
	...

08008d3c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b086      	sub	sp, #24
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	60f8      	str	r0, [r7, #12]
 8008d44:	60b9      	str	r1, [r7, #8]
 8008d46:	4613      	mov	r3, r2
 8008d48:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008d4a:	68ba      	ldr	r2, [r7, #8]
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	88fa      	ldrh	r2, [r7, #6]
 8008d54:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	2222      	movs	r2, #34	; 0x22
 8008d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d68:	4a23      	ldr	r2, [pc, #140]	; (8008df8 <UART_Start_Receive_DMA+0xbc>)
 8008d6a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d70:	4a22      	ldr	r2, [pc, #136]	; (8008dfc <UART_Start_Receive_DMA+0xc0>)
 8008d72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d78:	4a21      	ldr	r2, [pc, #132]	; (8008e00 <UART_Start_Receive_DMA+0xc4>)
 8008d7a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d80:	2200      	movs	r2, #0
 8008d82:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008d84:	f107 0308 	add.w	r3, r7, #8
 8008d88:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	3304      	adds	r3, #4
 8008d94:	4619      	mov	r1, r3
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	681a      	ldr	r2, [r3, #0]
 8008d9a:	88fb      	ldrh	r3, [r7, #6]
 8008d9c:	f7fc f9b0 	bl	8005100 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008da0:	2300      	movs	r3, #0
 8008da2:	613b      	str	r3, [r7, #16]
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	613b      	str	r3, [r7, #16]
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	685b      	ldr	r3, [r3, #4]
 8008db2:	613b      	str	r3, [r7, #16]
 8008db4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	2200      	movs	r2, #0
 8008dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	68da      	ldr	r2, [r3, #12]
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008dcc:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	695a      	ldr	r2, [r3, #20]
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f042 0201 	orr.w	r2, r2, #1
 8008ddc:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	695a      	ldr	r2, [r3, #20]
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008dec:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8008dee:	2300      	movs	r3, #0
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3718      	adds	r7, #24
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}
 8008df8:	08008bdb 	.word	0x08008bdb
 8008dfc:	08008c71 	.word	0x08008c71
 8008e00:	08008ca7 	.word	0x08008ca7

08008e04 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b083      	sub	sp, #12
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	68da      	ldr	r2, [r3, #12]
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008e1a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2220      	movs	r2, #32
 8008e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008e24:	bf00      	nop
 8008e26:	370c      	adds	r7, #12
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr

08008e30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b083      	sub	sp, #12
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	68da      	ldr	r2, [r3, #12]
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008e46:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	695a      	ldr	r2, [r3, #20]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f022 0201 	bic.w	r2, r2, #1
 8008e56:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	d107      	bne.n	8008e70 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	68da      	ldr	r2, [r3, #12]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f022 0210 	bic.w	r2, r2, #16
 8008e6e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2220      	movs	r2, #32
 8008e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008e7e:	bf00      	nop
 8008e80:	370c      	adds	r7, #12
 8008e82:	46bd      	mov	sp, r7
 8008e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e88:	4770      	bx	lr

08008e8a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008e8a:	b580      	push	{r7, lr}
 8008e8c:	b084      	sub	sp, #16
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e96:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008ea4:	68f8      	ldr	r0, [r7, #12]
 8008ea6:	f7f9 fc91 	bl	80027cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008eaa:	bf00      	nop
 8008eac:	3710      	adds	r7, #16
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}

08008eb2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008eb2:	b480      	push	{r7}
 8008eb4:	b085      	sub	sp, #20
 8008eb6:	af00      	add	r7, sp, #0
 8008eb8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ec0:	b2db      	uxtb	r3, r3
 8008ec2:	2b21      	cmp	r3, #33	; 0x21
 8008ec4:	d13e      	bne.n	8008f44 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	689b      	ldr	r3, [r3, #8]
 8008eca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ece:	d114      	bne.n	8008efa <UART_Transmit_IT+0x48>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	691b      	ldr	r3, [r3, #16]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d110      	bne.n	8008efa <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6a1b      	ldr	r3, [r3, #32]
 8008edc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	881b      	ldrh	r3, [r3, #0]
 8008ee2:	461a      	mov	r2, r3
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008eec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6a1b      	ldr	r3, [r3, #32]
 8008ef2:	1c9a      	adds	r2, r3, #2
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	621a      	str	r2, [r3, #32]
 8008ef8:	e008      	b.n	8008f0c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6a1b      	ldr	r3, [r3, #32]
 8008efe:	1c59      	adds	r1, r3, #1
 8008f00:	687a      	ldr	r2, [r7, #4]
 8008f02:	6211      	str	r1, [r2, #32]
 8008f04:	781a      	ldrb	r2, [r3, #0]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008f10:	b29b      	uxth	r3, r3
 8008f12:	3b01      	subs	r3, #1
 8008f14:	b29b      	uxth	r3, r3
 8008f16:	687a      	ldr	r2, [r7, #4]
 8008f18:	4619      	mov	r1, r3
 8008f1a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d10f      	bne.n	8008f40 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	68da      	ldr	r2, [r3, #12]
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f2e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	68da      	ldr	r2, [r3, #12]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f3e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008f40:	2300      	movs	r3, #0
 8008f42:	e000      	b.n	8008f46 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008f44:	2302      	movs	r3, #2
  }
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3714      	adds	r7, #20
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f50:	4770      	bx	lr

08008f52 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008f52:	b580      	push	{r7, lr}
 8008f54:	b082      	sub	sp, #8
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	68da      	ldr	r2, [r3, #12]
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f68:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2220      	movs	r2, #32
 8008f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f7ff fdd0 	bl	8008b18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008f78:	2300      	movs	r3, #0
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3708      	adds	r7, #8
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}

08008f82 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008f82:	b580      	push	{r7, lr}
 8008f84:	b084      	sub	sp, #16
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f90:	b2db      	uxtb	r3, r3
 8008f92:	2b22      	cmp	r3, #34	; 0x22
 8008f94:	f040 8087 	bne.w	80090a6 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	689b      	ldr	r3, [r3, #8]
 8008f9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fa0:	d117      	bne.n	8008fd2 <UART_Receive_IT+0x50>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	691b      	ldr	r3, [r3, #16]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d113      	bne.n	8008fd2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008faa:	2300      	movs	r3, #0
 8008fac:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fb2:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	b29b      	uxth	r3, r3
 8008fbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fc0:	b29a      	uxth	r2, r3
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fca:	1c9a      	adds	r2, r3, #2
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	629a      	str	r2, [r3, #40]	; 0x28
 8008fd0:	e026      	b.n	8009020 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fd6:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	689b      	ldr	r3, [r3, #8]
 8008fe0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fe4:	d007      	beq.n	8008ff6 <UART_Receive_IT+0x74>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	689b      	ldr	r3, [r3, #8]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d10a      	bne.n	8009004 <UART_Receive_IT+0x82>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	691b      	ldr	r3, [r3, #16]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d106      	bne.n	8009004 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	b2da      	uxtb	r2, r3
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	701a      	strb	r2, [r3, #0]
 8009002:	e008      	b.n	8009016 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	b2db      	uxtb	r3, r3
 800900c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009010:	b2da      	uxtb	r2, r3
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800901a:	1c5a      	adds	r2, r3, #1
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009024:	b29b      	uxth	r3, r3
 8009026:	3b01      	subs	r3, #1
 8009028:	b29b      	uxth	r3, r3
 800902a:	687a      	ldr	r2, [r7, #4]
 800902c:	4619      	mov	r1, r3
 800902e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009030:	2b00      	cmp	r3, #0
 8009032:	d136      	bne.n	80090a2 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	68da      	ldr	r2, [r3, #12]
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f022 0220 	bic.w	r2, r2, #32
 8009042:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	68da      	ldr	r2, [r3, #12]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009052:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	695a      	ldr	r2, [r3, #20]
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f022 0201 	bic.w	r2, r2, #1
 8009062:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2220      	movs	r2, #32
 8009068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009070:	2b01      	cmp	r3, #1
 8009072:	d10e      	bne.n	8009092 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	68da      	ldr	r2, [r3, #12]
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f022 0210 	bic.w	r2, r2, #16
 8009082:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009088:	4619      	mov	r1, r3
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f7ff fd62 	bl	8008b54 <HAL_UARTEx_RxEventCallback>
 8009090:	e002      	b.n	8009098 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f7f9 fb4e 	bl	8002734 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2200      	movs	r2, #0
 800909c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800909e:	2300      	movs	r3, #0
 80090a0:	e002      	b.n	80090a8 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 80090a2:	2300      	movs	r3, #0
 80090a4:	e000      	b.n	80090a8 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 80090a6:	2302      	movs	r3, #2
  }
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3710      	adds	r7, #16
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80090b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090b4:	b09f      	sub	sp, #124	; 0x7c
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80090ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	691b      	ldr	r3, [r3, #16]
 80090c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80090c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090c6:	68d9      	ldr	r1, [r3, #12]
 80090c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090ca:	681a      	ldr	r2, [r3, #0]
 80090cc:	ea40 0301 	orr.w	r3, r0, r1
 80090d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80090d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090d4:	689a      	ldr	r2, [r3, #8]
 80090d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090d8:	691b      	ldr	r3, [r3, #16]
 80090da:	431a      	orrs	r2, r3
 80090dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090de:	695b      	ldr	r3, [r3, #20]
 80090e0:	431a      	orrs	r2, r3
 80090e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090e4:	69db      	ldr	r3, [r3, #28]
 80090e6:	4313      	orrs	r3, r2
 80090e8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80090ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	68db      	ldr	r3, [r3, #12]
 80090f0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80090f4:	f021 010c 	bic.w	r1, r1, #12
 80090f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090fa:	681a      	ldr	r2, [r3, #0]
 80090fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80090fe:	430b      	orrs	r3, r1
 8009100:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009102:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	695b      	ldr	r3, [r3, #20]
 8009108:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800910c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800910e:	6999      	ldr	r1, [r3, #24]
 8009110:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009112:	681a      	ldr	r2, [r3, #0]
 8009114:	ea40 0301 	orr.w	r3, r0, r1
 8009118:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800911a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800911c:	681a      	ldr	r2, [r3, #0]
 800911e:	4bc5      	ldr	r3, [pc, #788]	; (8009434 <UART_SetConfig+0x384>)
 8009120:	429a      	cmp	r2, r3
 8009122:	d004      	beq.n	800912e <UART_SetConfig+0x7e>
 8009124:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009126:	681a      	ldr	r2, [r3, #0]
 8009128:	4bc3      	ldr	r3, [pc, #780]	; (8009438 <UART_SetConfig+0x388>)
 800912a:	429a      	cmp	r2, r3
 800912c:	d103      	bne.n	8009136 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800912e:	f7fd fd51 	bl	8006bd4 <HAL_RCC_GetPCLK2Freq>
 8009132:	6778      	str	r0, [r7, #116]	; 0x74
 8009134:	e002      	b.n	800913c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009136:	f7fd fd39 	bl	8006bac <HAL_RCC_GetPCLK1Freq>
 800913a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800913c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800913e:	69db      	ldr	r3, [r3, #28]
 8009140:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009144:	f040 80b6 	bne.w	80092b4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009148:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800914a:	461c      	mov	r4, r3
 800914c:	f04f 0500 	mov.w	r5, #0
 8009150:	4622      	mov	r2, r4
 8009152:	462b      	mov	r3, r5
 8009154:	1891      	adds	r1, r2, r2
 8009156:	6439      	str	r1, [r7, #64]	; 0x40
 8009158:	415b      	adcs	r3, r3
 800915a:	647b      	str	r3, [r7, #68]	; 0x44
 800915c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009160:	1912      	adds	r2, r2, r4
 8009162:	eb45 0303 	adc.w	r3, r5, r3
 8009166:	f04f 0000 	mov.w	r0, #0
 800916a:	f04f 0100 	mov.w	r1, #0
 800916e:	00d9      	lsls	r1, r3, #3
 8009170:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009174:	00d0      	lsls	r0, r2, #3
 8009176:	4602      	mov	r2, r0
 8009178:	460b      	mov	r3, r1
 800917a:	1911      	adds	r1, r2, r4
 800917c:	6639      	str	r1, [r7, #96]	; 0x60
 800917e:	416b      	adcs	r3, r5
 8009180:	667b      	str	r3, [r7, #100]	; 0x64
 8009182:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	461a      	mov	r2, r3
 8009188:	f04f 0300 	mov.w	r3, #0
 800918c:	1891      	adds	r1, r2, r2
 800918e:	63b9      	str	r1, [r7, #56]	; 0x38
 8009190:	415b      	adcs	r3, r3
 8009192:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009194:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009198:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800919c:	f7f7 f838 	bl	8000210 <__aeabi_uldivmod>
 80091a0:	4602      	mov	r2, r0
 80091a2:	460b      	mov	r3, r1
 80091a4:	4ba5      	ldr	r3, [pc, #660]	; (800943c <UART_SetConfig+0x38c>)
 80091a6:	fba3 2302 	umull	r2, r3, r3, r2
 80091aa:	095b      	lsrs	r3, r3, #5
 80091ac:	011e      	lsls	r6, r3, #4
 80091ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80091b0:	461c      	mov	r4, r3
 80091b2:	f04f 0500 	mov.w	r5, #0
 80091b6:	4622      	mov	r2, r4
 80091b8:	462b      	mov	r3, r5
 80091ba:	1891      	adds	r1, r2, r2
 80091bc:	6339      	str	r1, [r7, #48]	; 0x30
 80091be:	415b      	adcs	r3, r3
 80091c0:	637b      	str	r3, [r7, #52]	; 0x34
 80091c2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80091c6:	1912      	adds	r2, r2, r4
 80091c8:	eb45 0303 	adc.w	r3, r5, r3
 80091cc:	f04f 0000 	mov.w	r0, #0
 80091d0:	f04f 0100 	mov.w	r1, #0
 80091d4:	00d9      	lsls	r1, r3, #3
 80091d6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80091da:	00d0      	lsls	r0, r2, #3
 80091dc:	4602      	mov	r2, r0
 80091de:	460b      	mov	r3, r1
 80091e0:	1911      	adds	r1, r2, r4
 80091e2:	65b9      	str	r1, [r7, #88]	; 0x58
 80091e4:	416b      	adcs	r3, r5
 80091e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80091e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091ea:	685b      	ldr	r3, [r3, #4]
 80091ec:	461a      	mov	r2, r3
 80091ee:	f04f 0300 	mov.w	r3, #0
 80091f2:	1891      	adds	r1, r2, r2
 80091f4:	62b9      	str	r1, [r7, #40]	; 0x28
 80091f6:	415b      	adcs	r3, r3
 80091f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80091fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80091fe:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009202:	f7f7 f805 	bl	8000210 <__aeabi_uldivmod>
 8009206:	4602      	mov	r2, r0
 8009208:	460b      	mov	r3, r1
 800920a:	4b8c      	ldr	r3, [pc, #560]	; (800943c <UART_SetConfig+0x38c>)
 800920c:	fba3 1302 	umull	r1, r3, r3, r2
 8009210:	095b      	lsrs	r3, r3, #5
 8009212:	2164      	movs	r1, #100	; 0x64
 8009214:	fb01 f303 	mul.w	r3, r1, r3
 8009218:	1ad3      	subs	r3, r2, r3
 800921a:	00db      	lsls	r3, r3, #3
 800921c:	3332      	adds	r3, #50	; 0x32
 800921e:	4a87      	ldr	r2, [pc, #540]	; (800943c <UART_SetConfig+0x38c>)
 8009220:	fba2 2303 	umull	r2, r3, r2, r3
 8009224:	095b      	lsrs	r3, r3, #5
 8009226:	005b      	lsls	r3, r3, #1
 8009228:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800922c:	441e      	add	r6, r3
 800922e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009230:	4618      	mov	r0, r3
 8009232:	f04f 0100 	mov.w	r1, #0
 8009236:	4602      	mov	r2, r0
 8009238:	460b      	mov	r3, r1
 800923a:	1894      	adds	r4, r2, r2
 800923c:	623c      	str	r4, [r7, #32]
 800923e:	415b      	adcs	r3, r3
 8009240:	627b      	str	r3, [r7, #36]	; 0x24
 8009242:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009246:	1812      	adds	r2, r2, r0
 8009248:	eb41 0303 	adc.w	r3, r1, r3
 800924c:	f04f 0400 	mov.w	r4, #0
 8009250:	f04f 0500 	mov.w	r5, #0
 8009254:	00dd      	lsls	r5, r3, #3
 8009256:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800925a:	00d4      	lsls	r4, r2, #3
 800925c:	4622      	mov	r2, r4
 800925e:	462b      	mov	r3, r5
 8009260:	1814      	adds	r4, r2, r0
 8009262:	653c      	str	r4, [r7, #80]	; 0x50
 8009264:	414b      	adcs	r3, r1
 8009266:	657b      	str	r3, [r7, #84]	; 0x54
 8009268:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800926a:	685b      	ldr	r3, [r3, #4]
 800926c:	461a      	mov	r2, r3
 800926e:	f04f 0300 	mov.w	r3, #0
 8009272:	1891      	adds	r1, r2, r2
 8009274:	61b9      	str	r1, [r7, #24]
 8009276:	415b      	adcs	r3, r3
 8009278:	61fb      	str	r3, [r7, #28]
 800927a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800927e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009282:	f7f6 ffc5 	bl	8000210 <__aeabi_uldivmod>
 8009286:	4602      	mov	r2, r0
 8009288:	460b      	mov	r3, r1
 800928a:	4b6c      	ldr	r3, [pc, #432]	; (800943c <UART_SetConfig+0x38c>)
 800928c:	fba3 1302 	umull	r1, r3, r3, r2
 8009290:	095b      	lsrs	r3, r3, #5
 8009292:	2164      	movs	r1, #100	; 0x64
 8009294:	fb01 f303 	mul.w	r3, r1, r3
 8009298:	1ad3      	subs	r3, r2, r3
 800929a:	00db      	lsls	r3, r3, #3
 800929c:	3332      	adds	r3, #50	; 0x32
 800929e:	4a67      	ldr	r2, [pc, #412]	; (800943c <UART_SetConfig+0x38c>)
 80092a0:	fba2 2303 	umull	r2, r3, r2, r3
 80092a4:	095b      	lsrs	r3, r3, #5
 80092a6:	f003 0207 	and.w	r2, r3, #7
 80092aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	4432      	add	r2, r6
 80092b0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80092b2:	e0b9      	b.n	8009428 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80092b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80092b6:	461c      	mov	r4, r3
 80092b8:	f04f 0500 	mov.w	r5, #0
 80092bc:	4622      	mov	r2, r4
 80092be:	462b      	mov	r3, r5
 80092c0:	1891      	adds	r1, r2, r2
 80092c2:	6139      	str	r1, [r7, #16]
 80092c4:	415b      	adcs	r3, r3
 80092c6:	617b      	str	r3, [r7, #20]
 80092c8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80092cc:	1912      	adds	r2, r2, r4
 80092ce:	eb45 0303 	adc.w	r3, r5, r3
 80092d2:	f04f 0000 	mov.w	r0, #0
 80092d6:	f04f 0100 	mov.w	r1, #0
 80092da:	00d9      	lsls	r1, r3, #3
 80092dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80092e0:	00d0      	lsls	r0, r2, #3
 80092e2:	4602      	mov	r2, r0
 80092e4:	460b      	mov	r3, r1
 80092e6:	eb12 0804 	adds.w	r8, r2, r4
 80092ea:	eb43 0905 	adc.w	r9, r3, r5
 80092ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092f0:	685b      	ldr	r3, [r3, #4]
 80092f2:	4618      	mov	r0, r3
 80092f4:	f04f 0100 	mov.w	r1, #0
 80092f8:	f04f 0200 	mov.w	r2, #0
 80092fc:	f04f 0300 	mov.w	r3, #0
 8009300:	008b      	lsls	r3, r1, #2
 8009302:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009306:	0082      	lsls	r2, r0, #2
 8009308:	4640      	mov	r0, r8
 800930a:	4649      	mov	r1, r9
 800930c:	f7f6 ff80 	bl	8000210 <__aeabi_uldivmod>
 8009310:	4602      	mov	r2, r0
 8009312:	460b      	mov	r3, r1
 8009314:	4b49      	ldr	r3, [pc, #292]	; (800943c <UART_SetConfig+0x38c>)
 8009316:	fba3 2302 	umull	r2, r3, r3, r2
 800931a:	095b      	lsrs	r3, r3, #5
 800931c:	011e      	lsls	r6, r3, #4
 800931e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009320:	4618      	mov	r0, r3
 8009322:	f04f 0100 	mov.w	r1, #0
 8009326:	4602      	mov	r2, r0
 8009328:	460b      	mov	r3, r1
 800932a:	1894      	adds	r4, r2, r2
 800932c:	60bc      	str	r4, [r7, #8]
 800932e:	415b      	adcs	r3, r3
 8009330:	60fb      	str	r3, [r7, #12]
 8009332:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009336:	1812      	adds	r2, r2, r0
 8009338:	eb41 0303 	adc.w	r3, r1, r3
 800933c:	f04f 0400 	mov.w	r4, #0
 8009340:	f04f 0500 	mov.w	r5, #0
 8009344:	00dd      	lsls	r5, r3, #3
 8009346:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800934a:	00d4      	lsls	r4, r2, #3
 800934c:	4622      	mov	r2, r4
 800934e:	462b      	mov	r3, r5
 8009350:	1814      	adds	r4, r2, r0
 8009352:	64bc      	str	r4, [r7, #72]	; 0x48
 8009354:	414b      	adcs	r3, r1
 8009356:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009358:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800935a:	685b      	ldr	r3, [r3, #4]
 800935c:	4618      	mov	r0, r3
 800935e:	f04f 0100 	mov.w	r1, #0
 8009362:	f04f 0200 	mov.w	r2, #0
 8009366:	f04f 0300 	mov.w	r3, #0
 800936a:	008b      	lsls	r3, r1, #2
 800936c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009370:	0082      	lsls	r2, r0, #2
 8009372:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009376:	f7f6 ff4b 	bl	8000210 <__aeabi_uldivmod>
 800937a:	4602      	mov	r2, r0
 800937c:	460b      	mov	r3, r1
 800937e:	4b2f      	ldr	r3, [pc, #188]	; (800943c <UART_SetConfig+0x38c>)
 8009380:	fba3 1302 	umull	r1, r3, r3, r2
 8009384:	095b      	lsrs	r3, r3, #5
 8009386:	2164      	movs	r1, #100	; 0x64
 8009388:	fb01 f303 	mul.w	r3, r1, r3
 800938c:	1ad3      	subs	r3, r2, r3
 800938e:	011b      	lsls	r3, r3, #4
 8009390:	3332      	adds	r3, #50	; 0x32
 8009392:	4a2a      	ldr	r2, [pc, #168]	; (800943c <UART_SetConfig+0x38c>)
 8009394:	fba2 2303 	umull	r2, r3, r2, r3
 8009398:	095b      	lsrs	r3, r3, #5
 800939a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800939e:	441e      	add	r6, r3
 80093a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80093a2:	4618      	mov	r0, r3
 80093a4:	f04f 0100 	mov.w	r1, #0
 80093a8:	4602      	mov	r2, r0
 80093aa:	460b      	mov	r3, r1
 80093ac:	1894      	adds	r4, r2, r2
 80093ae:	603c      	str	r4, [r7, #0]
 80093b0:	415b      	adcs	r3, r3
 80093b2:	607b      	str	r3, [r7, #4]
 80093b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093b8:	1812      	adds	r2, r2, r0
 80093ba:	eb41 0303 	adc.w	r3, r1, r3
 80093be:	f04f 0400 	mov.w	r4, #0
 80093c2:	f04f 0500 	mov.w	r5, #0
 80093c6:	00dd      	lsls	r5, r3, #3
 80093c8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80093cc:	00d4      	lsls	r4, r2, #3
 80093ce:	4622      	mov	r2, r4
 80093d0:	462b      	mov	r3, r5
 80093d2:	eb12 0a00 	adds.w	sl, r2, r0
 80093d6:	eb43 0b01 	adc.w	fp, r3, r1
 80093da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093dc:	685b      	ldr	r3, [r3, #4]
 80093de:	4618      	mov	r0, r3
 80093e0:	f04f 0100 	mov.w	r1, #0
 80093e4:	f04f 0200 	mov.w	r2, #0
 80093e8:	f04f 0300 	mov.w	r3, #0
 80093ec:	008b      	lsls	r3, r1, #2
 80093ee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80093f2:	0082      	lsls	r2, r0, #2
 80093f4:	4650      	mov	r0, sl
 80093f6:	4659      	mov	r1, fp
 80093f8:	f7f6 ff0a 	bl	8000210 <__aeabi_uldivmod>
 80093fc:	4602      	mov	r2, r0
 80093fe:	460b      	mov	r3, r1
 8009400:	4b0e      	ldr	r3, [pc, #56]	; (800943c <UART_SetConfig+0x38c>)
 8009402:	fba3 1302 	umull	r1, r3, r3, r2
 8009406:	095b      	lsrs	r3, r3, #5
 8009408:	2164      	movs	r1, #100	; 0x64
 800940a:	fb01 f303 	mul.w	r3, r1, r3
 800940e:	1ad3      	subs	r3, r2, r3
 8009410:	011b      	lsls	r3, r3, #4
 8009412:	3332      	adds	r3, #50	; 0x32
 8009414:	4a09      	ldr	r2, [pc, #36]	; (800943c <UART_SetConfig+0x38c>)
 8009416:	fba2 2303 	umull	r2, r3, r2, r3
 800941a:	095b      	lsrs	r3, r3, #5
 800941c:	f003 020f 	and.w	r2, r3, #15
 8009420:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4432      	add	r2, r6
 8009426:	609a      	str	r2, [r3, #8]
}
 8009428:	bf00      	nop
 800942a:	377c      	adds	r7, #124	; 0x7c
 800942c:	46bd      	mov	sp, r7
 800942e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009432:	bf00      	nop
 8009434:	40011000 	.word	0x40011000
 8009438:	40011400 	.word	0x40011400
 800943c:	51eb851f 	.word	0x51eb851f

08009440 <__read_flags>:


/*
 * Reads the flag status register and returns the value of the 8-bits register
 */
uint8_t __read_flags() {
 8009440:	b580      	push	{r7, lr}
 8009442:	b090      	sub	sp, #64	; 0x40
 8009444:	af00      	add	r7, sp, #0
	Command cmd = get_default_command();
 8009446:	f107 0308 	add.w	r3, r7, #8
 800944a:	4618      	mov	r0, r3
 800944c:	f000 f988 	bl	8009760 <get_default_command>
	with_data(&cmd, 1);
 8009450:	f107 0308 	add.w	r3, r7, #8
 8009454:	2101      	movs	r1, #1
 8009456:	4618      	mov	r0, r3
 8009458:	f000 f9b8 	bl	80097cc <with_data>

	if(!qspi_run(&cmd, READ_FLAG_STATUS_REGISTER)) {
 800945c:	f107 0308 	add.w	r3, r7, #8
 8009460:	2170      	movs	r1, #112	; 0x70
 8009462:	4618      	mov	r0, r3
 8009464:	f000 f9c4 	bl	80097f0 <qspi_run>

	}

	uint8_t flags;

	if(!qspi_receive(&flags)) {
 8009468:	1dfb      	adds	r3, r7, #7
 800946a:	4618      	mov	r0, r3
 800946c:	f000 fa28 	bl	80098c0 <qspi_receive>

	}

	return flags;
 8009470:	79fb      	ldrb	r3, [r7, #7]
}
 8009472:	4618      	mov	r0, r3
 8009474:	3740      	adds	r7, #64	; 0x40
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}

0800947a <__write_enable_latch>:

/*
 * Enables the write latch.
 * This function must be called before each PROGRAM or ERASE operation.
 */
bool __write_enable_latch() {
 800947a:	b5b0      	push	{r4, r5, r7, lr}
 800947c:	b09c      	sub	sp, #112	; 0x70
 800947e:	af00      	add	r7, sp, #0
	Command cmd = get_default_command();
 8009480:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009484:	4618      	mov	r0, r3
 8009486:	f000 f96b 	bl	8009760 <get_default_command>

	if(qspi_run(&cmd, WRITE_ENABLE_LATCH)) {
 800948a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800948e:	2106      	movs	r1, #6
 8009490:	4618      	mov	r0, r3
 8009492:	f000 f9ad 	bl	80097f0 <qspi_run>
 8009496:	4603      	mov	r3, r0
 8009498:	2b00      	cmp	r3, #0
 800949a:	d022      	beq.n	80094e2 <__write_enable_latch+0x68>
		cmd = get_default_command();
 800949c:	463b      	mov	r3, r7
 800949e:	4618      	mov	r0, r3
 80094a0:	f000 f95e 	bl	8009760 <get_default_command>
 80094a4:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80094a8:	463d      	mov	r5, r7
 80094aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80094ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80094ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80094b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80094b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80094b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80094b6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80094ba:	e884 0003 	stmia.w	r4, {r0, r1}

		with_data(&cmd, 1);
 80094be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80094c2:	2101      	movs	r1, #1
 80094c4:	4618      	mov	r0, r3
 80094c6:	f000 f981 	bl	80097cc <with_data>

		if(qspi_poll(&cmd, READ_STATUS_REGISTER, 1, true)) {
 80094ca:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80094ce:	2301      	movs	r3, #1
 80094d0:	2201      	movs	r2, #1
 80094d2:	2105      	movs	r1, #5
 80094d4:	f000 f9a8 	bl	8009828 <qspi_poll>
 80094d8:	4603      	mov	r3, r0
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d001      	beq.n	80094e2 <__write_enable_latch+0x68>
			return true;
 80094de:	2301      	movs	r3, #1
 80094e0:	e000      	b.n	80094e4 <__write_enable_latch+0x6a>
		}
	}

	return false;
 80094e2:	2300      	movs	r3, #0
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3770      	adds	r7, #112	; 0x70
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bdb0      	pop	{r4, r5, r7, pc}

080094ec <__write_disable_latch>:

/*
 * Call this function to prevent data corruption when a hardware fault (e.g. protection fault) occurs.
 * Please refer to the documentation for details.
 */
bool __write_disable_latch() {
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b08e      	sub	sp, #56	; 0x38
 80094f0:	af00      	add	r7, sp, #0
	Command cmd = get_default_command();
 80094f2:	463b      	mov	r3, r7
 80094f4:	4618      	mov	r0, r3
 80094f6:	f000 f933 	bl	8009760 <get_default_command>
	return qspi_run(&cmd, WRITE_ENABLE_LATCH);
 80094fa:	463b      	mov	r3, r7
 80094fc:	2106      	movs	r1, #6
 80094fe:	4618      	mov	r0, r3
 8009500:	f000 f976 	bl	80097f0 <qspi_run>
 8009504:	4603      	mov	r3, r0
}
 8009506:	4618      	mov	r0, r3
 8009508:	3738      	adds	r7, #56	; 0x38
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}

0800950e <flash_init>:

/*
 * Initialises the flash driver
 */
void flash_init() {
 800950e:	b580      	push	{r7, lr}
 8009510:	b090      	sub	sp, #64	; 0x40
 8009512:	af00      	add	r7, sp, #0
	uint8_t configuration = 0b00011011; // 1 Dummy cycle
 8009514:	231b      	movs	r3, #27
 8009516:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	Command cmd = get_default_command();
 800951a:	1d3b      	adds	r3, r7, #4
 800951c:	4618      	mov	r0, r3
 800951e:	f000 f91f 	bl	8009760 <get_default_command>
	with_data(&cmd, 1);
 8009522:	1d3b      	adds	r3, r7, #4
 8009524:	2101      	movs	r1, #1
 8009526:	4618      	mov	r0, r3
 8009528:	f000 f950 	bl	80097cc <with_data>

	__write_enable_latch();
 800952c:	f7ff ffa5 	bl	800947a <__write_enable_latch>

	if(!qspi_run(&cmd, 0x81)) { // Write volatile configuration register
 8009530:	1d3b      	adds	r3, r7, #4
 8009532:	2181      	movs	r1, #129	; 0x81
 8009534:	4618      	mov	r0, r3
 8009536:	f000 f95b 	bl	80097f0 <qspi_run>

	}

	if(!qspi_transmit(&configuration)) {
 800953a:	f107 033f 	add.w	r3, r7, #63	; 0x3f
 800953e:	4618      	mov	r0, r3
 8009540:	f000 f9a8 	bl	8009894 <qspi_transmit>

	}

	if(!qspi_poll(&cmd, READ_FLAG_STATUS_REGISTER, 7, true)) {
 8009544:	1d38      	adds	r0, r7, #4
 8009546:	2301      	movs	r3, #1
 8009548:	2207      	movs	r2, #7
 800954a:	2170      	movs	r1, #112	; 0x70
 800954c:	f000 f96c 	bl	8009828 <qspi_poll>

	}
}
 8009550:	bf00      	nop
 8009552:	3740      	adds	r7, #64	; 0x40
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}

08009558 <flash_read>:
 * Test providers:
 * 	 - read_ut.c
 *
 */

void flash_read(uint32_t address, uint8_t* buffer, uint32_t length) {
 8009558:	b580      	push	{r7, lr}
 800955a:	b084      	sub	sp, #16
 800955c:	af00      	add	r7, sp, #0
 800955e:	60f8      	str	r0, [r7, #12]
 8009560:	60b9      	str	r1, [r7, #8]
 8009562:	607a      	str	r2, [r7, #4]
	while(QUADSPI->SR & QUADSPI_SR_BUSY);
 8009564:	bf00      	nop
 8009566:	4b12      	ldr	r3, [pc, #72]	; (80095b0 <flash_read+0x58>)
 8009568:	689b      	ldr	r3, [r3, #8]
 800956a:	f003 0320 	and.w	r3, r3, #32
 800956e:	2b00      	cmp	r3, #0
 8009570:	d1f9      	bne.n	8009566 <flash_read+0xe>
	QUADSPI->CCR = (uint32_t) (FREAD_SINGLE) | (0b00000001 << 24) | (0b00000100 << 16) | (0b00100101 << 8);
 8009572:	4b0f      	ldr	r3, [pc, #60]	; (80095b0 <flash_read+0x58>)
 8009574:	4a0f      	ldr	r2, [pc, #60]	; (80095b4 <flash_read+0x5c>)
 8009576:	615a      	str	r2, [r3, #20]
	while(QUADSPI->SR & QUADSPI_SR_BUSY);
 8009578:	bf00      	nop
 800957a:	4b0d      	ldr	r3, [pc, #52]	; (80095b0 <flash_read+0x58>)
 800957c:	689b      	ldr	r3, [r3, #8]
 800957e:	f003 0320 	and.w	r3, r3, #32
 8009582:	2b00      	cmp	r3, #0
 8009584:	d1f9      	bne.n	800957a <flash_read+0x22>
	QUADSPI->AR = address;
 8009586:	4a0a      	ldr	r2, [pc, #40]	; (80095b0 <flash_read+0x58>)
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	6193      	str	r3, [r2, #24]
	while(QUADSPI->SR & QUADSPI_SR_BUSY);
 800958c:	bf00      	nop
 800958e:	4b08      	ldr	r3, [pc, #32]	; (80095b0 <flash_read+0x58>)
 8009590:	689b      	ldr	r3, [r3, #8]
 8009592:	f003 0320 	and.w	r3, r3, #32
 8009596:	2b00      	cmp	r3, #0
 8009598:	d1f9      	bne.n	800958e <flash_read+0x36>
	QUADSPI->DLR = length;
 800959a:	4a05      	ldr	r2, [pc, #20]	; (80095b0 <flash_read+0x58>)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6113      	str	r3, [r2, #16]

	if(!qspi_receive(buffer)) {
 80095a0:	68b8      	ldr	r0, [r7, #8]
 80095a2:	f000 f98d 	bl	80098c0 <qspi_receive>

	}
}
 80095a6:	bf00      	nop
 80095a8:	3710      	adds	r7, #16
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}
 80095ae:	bf00      	nop
 80095b0:	a0001000 	.word	0xa0001000
 80095b4:	0104250b 	.word	0x0104250b

080095b8 <__flash_write_page>:
 * Test providers:
 * 	 - write_ut.c
 *
 */

void __flash_write_page(uint32_t address, uint8_t* buffer, uint32_t length) {
 80095b8:	b5b0      	push	{r4, r5, r7, lr}
 80095ba:	b0a2      	sub	sp, #136	; 0x88
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6478      	str	r0, [r7, #68]	; 0x44
 80095c0:	6439      	str	r1, [r7, #64]	; 0x40
 80095c2:	63fa      	str	r2, [r7, #60]	; 0x3c
	__write_enable_latch();
 80095c4:	f7ff ff59 	bl	800947a <__write_enable_latch>

	Command cmd = get_default_command();
 80095c8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80095cc:	4618      	mov	r0, r3
 80095ce:	f000 f8c7 	bl	8009760 <get_default_command>

	with_address(&cmd, address);
 80095d2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80095d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80095d8:	4618      	mov	r0, r3
 80095da:	f000 f8e1 	bl	80097a0 <with_address>
	with_data(&cmd, length);
 80095de:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80095e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80095e4:	4618      	mov	r0, r3
 80095e6:	f000 f8f1 	bl	80097cc <with_data>

	if(!qspi_run(&cmd, WRITE_SINGLE)) {
 80095ea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80095ee:	2102      	movs	r1, #2
 80095f0:	4618      	mov	r0, r3
 80095f2:	f000 f8fd 	bl	80097f0 <qspi_run>

	}

	if(!qspi_transmit(buffer)) {
 80095f6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80095f8:	f000 f94c 	bl	8009894 <qspi_transmit>

	/*
	 * Checks if the controller is ready to proceed to the next command
	 */

	cmd = get_default_command();
 80095fc:	463b      	mov	r3, r7
 80095fe:	4618      	mov	r0, r3
 8009600:	f000 f8ae 	bl	8009760 <get_default_command>
 8009604:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8009608:	463d      	mov	r5, r7
 800960a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800960c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800960e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009610:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009612:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009614:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009616:	e895 0003 	ldmia.w	r5, {r0, r1}
 800961a:	e884 0003 	stmia.w	r4, {r0, r1}
	with_data(&cmd, 1);
 800961e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009622:	2101      	movs	r1, #1
 8009624:	4618      	mov	r0, r3
 8009626:	f000 f8d1 	bl	80097cc <with_data>

	if(!qspi_poll(&cmd, READ_FLAG_STATUS_REGISTER, 7, true)) {
 800962a:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 800962e:	2301      	movs	r3, #1
 8009630:	2207      	movs	r2, #7
 8009632:	2170      	movs	r1, #112	; 0x70
 8009634:	f000 f8f8 	bl	8009828 <qspi_poll>

	}

	uint8_t flags = __read_flags();
 8009638:	f7ff ff02 	bl	8009440 <__read_flags>
 800963c:	4603      	mov	r3, r0
 800963e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	// Checks if the protection fault flag is set
	if(flags & (1 << 4)) {
 8009642:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8009646:	f003 0310 	and.w	r3, r3, #16
 800964a:	2b00      	cmp	r3, #0
 800964c:	d001      	beq.n	8009652 <__flash_write_page+0x9a>
		__write_disable_latch(); // Manually reset the latch
 800964e:	f7ff ff4d 	bl	80094ec <__write_disable_latch>


	}
}
 8009652:	bf00      	nop
 8009654:	3788      	adds	r7, #136	; 0x88
 8009656:	46bd      	mov	sp, r7
 8009658:	bdb0      	pop	{r4, r5, r7, pc}

0800965a <flash_write>:

void flash_write(uint32_t address, uint8_t* buffer, uint32_t length) {
 800965a:	b580      	push	{r7, lr}
 800965c:	b086      	sub	sp, #24
 800965e:	af00      	add	r7, sp, #0
 8009660:	60f8      	str	r0, [r7, #12]
 8009662:	60b9      	str	r1, [r7, #8]
 8009664:	607a      	str	r2, [r7, #4]
	uint32_t internal_address = address % PAGE_SIZE;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	b2db      	uxtb	r3, r3
 800966a:	617b      	str	r3, [r7, #20]

	while(internal_address + length > PAGE_SIZE) {
 800966c:	e016      	b.n	800969c <flash_write+0x42>
		uint32_t write_length = PAGE_SIZE - internal_address;
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8009674:	613b      	str	r3, [r7, #16]

		__flash_write_page(address, buffer, write_length);
 8009676:	693a      	ldr	r2, [r7, #16]
 8009678:	68b9      	ldr	r1, [r7, #8]
 800967a:	68f8      	ldr	r0, [r7, #12]
 800967c:	f7ff ff9c 	bl	80095b8 <__flash_write_page>
		buffer += write_length;
 8009680:	68ba      	ldr	r2, [r7, #8]
 8009682:	693b      	ldr	r3, [r7, #16]
 8009684:	4413      	add	r3, r2
 8009686:	60bb      	str	r3, [r7, #8]
		address += write_length;
 8009688:	68fa      	ldr	r2, [r7, #12]
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	4413      	add	r3, r2
 800968e:	60fb      	str	r3, [r7, #12]
		length -= write_length;
 8009690:	687a      	ldr	r2, [r7, #4]
 8009692:	693b      	ldr	r3, [r7, #16]
 8009694:	1ad3      	subs	r3, r2, r3
 8009696:	607b      	str	r3, [r7, #4]

		internal_address = 0;
 8009698:	2300      	movs	r3, #0
 800969a:	617b      	str	r3, [r7, #20]
	while(internal_address + length > PAGE_SIZE) {
 800969c:	697a      	ldr	r2, [r7, #20]
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	4413      	add	r3, r2
 80096a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096a6:	d8e2      	bhi.n	800966e <flash_write+0x14>
	}

	__flash_write_page(address, buffer, length);
 80096a8:	687a      	ldr	r2, [r7, #4]
 80096aa:	68b9      	ldr	r1, [r7, #8]
 80096ac:	68f8      	ldr	r0, [r7, #12]
 80096ae:	f7ff ff83 	bl	80095b8 <__flash_write_page>
}
 80096b2:	bf00      	nop
 80096b4:	3718      	adds	r7, #24
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}

080096ba <__flash_erase>:


   }
}

void __flash_erase(uint32_t instruction, uint32_t address) {
 80096ba:	b5b0      	push	{r4, r5, r7, lr}
 80096bc:	b0a0      	sub	sp, #128	; 0x80
 80096be:	af00      	add	r7, sp, #0
 80096c0:	63f8      	str	r0, [r7, #60]	; 0x3c
 80096c2:	63b9      	str	r1, [r7, #56]	; 0x38

	__write_enable_latch();
 80096c4:	f7ff fed9 	bl	800947a <__write_enable_latch>


	Command cmd = get_default_command();
 80096c8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80096cc:	4618      	mov	r0, r3
 80096ce:	f000 f847 	bl	8009760 <get_default_command>
	with_address(&cmd, address);
 80096d2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80096d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80096d8:	4618      	mov	r0, r3
 80096da:	f000 f861 	bl	80097a0 <with_address>


	if(!qspi_run(&cmd, instruction)) {
 80096de:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80096e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80096e4:	4618      	mov	r0, r3
 80096e6:	f000 f883 	bl	80097f0 <qspi_run>
	}

	/*
	 * Checks if the controller is ready to proceed to the next command
	 */
	cmd = get_default_command();
 80096ea:	463b      	mov	r3, r7
 80096ec:	4618      	mov	r0, r3
 80096ee:	f000 f837 	bl	8009760 <get_default_command>
 80096f2:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80096f6:	463d      	mov	r5, r7
 80096f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80096fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80096fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80096fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009700:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009702:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009704:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009708:	e884 0003 	stmia.w	r4, {r0, r1}
	with_data(&cmd, 1);
 800970c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009710:	2101      	movs	r1, #1
 8009712:	4618      	mov	r0, r3
 8009714:	f000 f85a 	bl	80097cc <with_data>

	if(!qspi_poll(&cmd, READ_FLAG_STATUS_REGISTER, 7, true)) {
 8009718:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800971c:	2301      	movs	r3, #1
 800971e:	2207      	movs	r2, #7
 8009720:	2170      	movs	r1, #112	; 0x70
 8009722:	f000 f881 	bl	8009828 <qspi_poll>
	}

	/*
	 * Checks if the protection fault flag is set
	 */
	uint8_t flags = __read_flags();
 8009726:	f7ff fe8b 	bl	8009440 <__read_flags>
 800972a:	4603      	mov	r3, r0
 800972c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	if(flags & (1 << 5)) {
 8009730:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009734:	f003 0320 	and.w	r3, r3, #32
 8009738:	2b00      	cmp	r3, #0
 800973a:	d001      	beq.n	8009740 <__flash_erase+0x86>
		__write_disable_latch(); // Manually reset the latch
 800973c:	f7ff fed6 	bl	80094ec <__write_disable_latch>


	}
}
 8009740:	bf00      	nop
 8009742:	3780      	adds	r7, #128	; 0x80
 8009744:	46bd      	mov	sp, r7
 8009746:	bdb0      	pop	{r4, r5, r7, pc}

08009748 <flash_erase_subsector>:

/*
 * Erases the whole sub-sector represented by the provided address.
 * The address may be any of those within the sub-sector.
 */
void flash_erase_subsector(uint32_t address) {
 8009748:	b580      	push	{r7, lr}
 800974a:	b082      	sub	sp, #8
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
	__flash_erase(ERASE_SUBSECTOR, address);
 8009750:	6879      	ldr	r1, [r7, #4]
 8009752:	2020      	movs	r0, #32
 8009754:	f7ff ffb1 	bl	80096ba <__flash_erase>
}
 8009758:	bf00      	nop
 800975a:	3708      	adds	r7, #8
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}

08009760 <get_default_command>:
#include "io_driver.h"




Command get_default_command() {
 8009760:	b5b0      	push	{r4, r5, r7, lr}
 8009762:	b090      	sub	sp, #64	; 0x40
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
	Command command = {
 8009768:	f107 0308 	add.w	r3, r7, #8
 800976c:	2238      	movs	r2, #56	; 0x38
 800976e:	2100      	movs	r1, #0
 8009770:	4618      	mov	r0, r3
 8009772:	f002 f93b 	bl	800b9ec <memset>
 8009776:	f44f 7380 	mov.w	r3, #256	; 0x100
 800977a:	623b      	str	r3, [r7, #32]
			.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY,
			.SIOOMode = QSPI_SIOO_INST_EVERY_CMD
		}
	};

	return command;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	461d      	mov	r5, r3
 8009780:	f107 0408 	add.w	r4, r7, #8
 8009784:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009786:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009788:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800978a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800978c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800978e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009790:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009794:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	3740      	adds	r7, #64	; 0x40
 800979c:	46bd      	mov	sp, r7
 800979e:	bdb0      	pop	{r4, r5, r7, pc}

080097a0 <with_address>:

/*
 * The two following functions enable the programmer to build a QSPI command very easily.
 */
void with_address(Command* cmd, uint32_t address) {
 80097a0:	b480      	push	{r7}
 80097a2:	b083      	sub	sp, #12
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
 80097a8:	6039      	str	r1, [r7, #0]
	cmd->qspi_command.AddressMode = QSPI_ADDRESS_1_LINE;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80097b0:	61da      	str	r2, [r3, #28]
	cmd->qspi_command.AddressSize = QSPI_ADDRESS_24_BITS;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80097b8:	60da      	str	r2, [r3, #12]
	cmd->qspi_command.Address = address;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	683a      	ldr	r2, [r7, #0]
 80097be:	605a      	str	r2, [r3, #4]
}
 80097c0:	bf00      	nop
 80097c2:	370c      	adds	r7, #12
 80097c4:	46bd      	mov	sp, r7
 80097c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ca:	4770      	bx	lr

080097cc <with_data>:

void with_data(Command* cmd, uint32_t length) {
 80097cc:	b480      	push	{r7}
 80097ce:	b083      	sub	sp, #12
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	6039      	str	r1, [r7, #0]
	cmd->qspi_command.DataMode = QSPI_DATA_1_LINE;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80097dc:	625a      	str	r2, [r3, #36]	; 0x24
	cmd->qspi_command.NbData = length;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	683a      	ldr	r2, [r7, #0]
 80097e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80097e4:	bf00      	nop
 80097e6:	370c      	adds	r7, #12
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr

080097f0 <qspi_run>:


/*
 * Higher-level abstraction layer for the QSPI interface.
 */
bool qspi_run(Command* cmd, uint32_t instruction) {
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b082      	sub	sp, #8
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
 80097f8:	6039      	str	r1, [r7, #0]
	cmd->qspi_command.Instruction = instruction;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	683a      	ldr	r2, [r7, #0]
 80097fe:	601a      	str	r2, [r3, #0]
	return HAL_QSPI_Command(&hqspi, &(cmd->qspi_command), IO_TIMEOUT) == HAL_OK;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8009806:	4619      	mov	r1, r3
 8009808:	4806      	ldr	r0, [pc, #24]	; (8009824 <qspi_run+0x34>)
 800980a:	f7fc fbb7 	bl	8005f7c <HAL_QSPI_Command>
 800980e:	4603      	mov	r3, r0
 8009810:	2b00      	cmp	r3, #0
 8009812:	bf0c      	ite	eq
 8009814:	2301      	moveq	r3, #1
 8009816:	2300      	movne	r3, #0
 8009818:	b2db      	uxtb	r3, r3
}
 800981a:	4618      	mov	r0, r3
 800981c:	3708      	adds	r7, #8
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
 8009822:	bf00      	nop
 8009824:	20007b84 	.word	0x20007b84

08009828 <qspi_poll>:

bool qspi_poll(Command* cmd, uint32_t instruction, uint8_t bit, bool value) {
 8009828:	b580      	push	{r7, lr}
 800982a:	b08a      	sub	sp, #40	; 0x28
 800982c:	af00      	add	r7, sp, #0
 800982e:	60f8      	str	r0, [r7, #12]
 8009830:	60b9      	str	r1, [r7, #8]
 8009832:	4611      	mov	r1, r2
 8009834:	461a      	mov	r2, r3
 8009836:	460b      	mov	r3, r1
 8009838:	71fb      	strb	r3, [r7, #7]
 800983a:	4613      	mov	r3, r2
 800983c:	71bb      	strb	r3, [r7, #6]
	QSPI_AutoPollingTypeDef poller;

	poller.MatchMode = QSPI_MATCH_MODE_AND;
 800983e:	2300      	movs	r3, #0
 8009840:	623b      	str	r3, [r7, #32]
	poller.StatusBytesSize = 1;
 8009842:	2301      	movs	r3, #1
 8009844:	61fb      	str	r3, [r7, #28]
	poller.Interval = 0x10;
 8009846:	2310      	movs	r3, #16
 8009848:	61bb      	str	r3, [r7, #24]
	poller.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 800984a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800984e:	627b      	str	r3, [r7, #36]	; 0x24
	poller.Match = value << bit;
 8009850:	79ba      	ldrb	r2, [r7, #6]
 8009852:	79fb      	ldrb	r3, [r7, #7]
 8009854:	fa02 f303 	lsl.w	r3, r2, r3
 8009858:	613b      	str	r3, [r7, #16]
	poller.Mask = 1 << bit;
 800985a:	79fb      	ldrb	r3, [r7, #7]
 800985c:	2201      	movs	r2, #1
 800985e:	fa02 f303 	lsl.w	r3, r2, r3
 8009862:	617b      	str	r3, [r7, #20]

	cmd->qspi_command.Instruction = instruction;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	68ba      	ldr	r2, [r7, #8]
 8009868:	601a      	str	r2, [r3, #0]

	return HAL_QSPI_AutoPolling(&hqspi, &(cmd->qspi_command), &poller, IO_TIMEOUT) == HAL_OK;
 800986a:	68f9      	ldr	r1, [r7, #12]
 800986c:	f107 0210 	add.w	r2, r7, #16
 8009870:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8009874:	4806      	ldr	r0, [pc, #24]	; (8009890 <qspi_poll+0x68>)
 8009876:	f7fc fd18 	bl	80062aa <HAL_QSPI_AutoPolling>
 800987a:	4603      	mov	r3, r0
 800987c:	2b00      	cmp	r3, #0
 800987e:	bf0c      	ite	eq
 8009880:	2301      	moveq	r3, #1
 8009882:	2300      	movne	r3, #0
 8009884:	b2db      	uxtb	r3, r3
}
 8009886:	4618      	mov	r0, r3
 8009888:	3728      	adds	r7, #40	; 0x28
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}
 800988e:	bf00      	nop
 8009890:	20007b84 	.word	0x20007b84

08009894 <qspi_transmit>:

bool qspi_transmit(uint8_t* buffer) {
 8009894:	b580      	push	{r7, lr}
 8009896:	b082      	sub	sp, #8
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
	return HAL_QSPI_Transmit(&hqspi, buffer, IO_TIMEOUT) == HAL_OK;
 800989c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80098a0:	6879      	ldr	r1, [r7, #4]
 80098a2:	4806      	ldr	r0, [pc, #24]	; (80098bc <qspi_transmit+0x28>)
 80098a4:	f7fc fbc8 	bl	8006038 <HAL_QSPI_Transmit>
 80098a8:	4603      	mov	r3, r0
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	bf0c      	ite	eq
 80098ae:	2301      	moveq	r3, #1
 80098b0:	2300      	movne	r3, #0
 80098b2:	b2db      	uxtb	r3, r3
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	3708      	adds	r7, #8
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}
 80098bc:	20007b84 	.word	0x20007b84

080098c0 <qspi_receive>:

bool qspi_receive(uint8_t* buffer) {
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b082      	sub	sp, #8
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
	return HAL_QSPI_Receive(&hqspi, buffer, IO_TIMEOUT) == HAL_OK;
 80098c8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80098cc:	6879      	ldr	r1, [r7, #4]
 80098ce:	4806      	ldr	r0, [pc, #24]	; (80098e8 <qspi_receive+0x28>)
 80098d0:	f7fc fc49 	bl	8006166 <HAL_QSPI_Receive>
 80098d4:	4603      	mov	r3, r0
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	bf0c      	ite	eq
 80098da:	2301      	moveq	r3, #1
 80098dc:	2300      	movne	r3, #0
 80098de:	b2db      	uxtb	r3, r3
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3708      	adds	r7, #8
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}
 80098e8:	20007b84 	.word	0x20007b84

080098ec <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b085      	sub	sp, #20
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	4603      	mov	r3, r0
 80098f4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80098f6:	2300      	movs	r3, #0
 80098f8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80098fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80098fe:	2b84      	cmp	r3, #132	; 0x84
 8009900:	d005      	beq.n	800990e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009902:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	4413      	add	r3, r2
 800990a:	3303      	adds	r3, #3
 800990c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800990e:	68fb      	ldr	r3, [r7, #12]
}
 8009910:	4618      	mov	r0, r3
 8009912:	3714      	adds	r7, #20
 8009914:	46bd      	mov	sp, r7
 8009916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991a:	4770      	bx	lr

0800991c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009920:	f000 ffba 	bl	800a898 <vTaskStartScheduler>
  
  return osOK;
 8009924:	2300      	movs	r3, #0
}
 8009926:	4618      	mov	r0, r3
 8009928:	bd80      	pop	{r7, pc}

0800992a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800992a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800992c:	b089      	sub	sp, #36	; 0x24
 800992e:	af04      	add	r7, sp, #16
 8009930:	6078      	str	r0, [r7, #4]
 8009932:	6039      	str	r1, [r7, #0]
      return NULL;
    } 
  }
#elif( configSUPPORT_STATIC_ALLOCATION == 1 )

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	685c      	ldr	r4, [r3, #4]
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681d      	ldr	r5, [r3, #0]
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	691e      	ldr	r6, [r3, #16]
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009946:	4618      	mov	r0, r3
 8009948:	f7ff ffd0 	bl	80098ec <makeFreeRtosPriority>
 800994c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	695b      	ldr	r3, [r3, #20]
 8009952:	687a      	ldr	r2, [r7, #4]
 8009954:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009956:	9202      	str	r2, [sp, #8]
 8009958:	9301      	str	r3, [sp, #4]
 800995a:	9100      	str	r1, [sp, #0]
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	4632      	mov	r2, r6
 8009960:	4629      	mov	r1, r5
 8009962:	4620      	mov	r0, r4
 8009964:	f000 fd98 	bl	800a498 <xTaskCreateStatic>
 8009968:	60f8      	str	r0, [r7, #12]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800996a:	68fb      	ldr	r3, [r7, #12]
}
 800996c:	4618      	mov	r0, r3
 800996e:	3714      	adds	r7, #20
 8009970:	46bd      	mov	sp, r7
 8009972:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009974 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b084      	sub	sp, #16
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d001      	beq.n	800998a <osDelay+0x16>
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	e000      	b.n	800998c <osDelay+0x18>
 800998a:	2301      	movs	r3, #1
 800998c:	4618      	mov	r0, r3
 800998e:	f000 ff4f 	bl	800a830 <vTaskDelay>
  
  return osOK;
 8009992:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009994:	4618      	mov	r0, r3
 8009996:	3710      	adds	r7, #16
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}

0800999c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800999c:	b480      	push	{r7}
 800999e:	b083      	sub	sp, #12
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f103 0208 	add.w	r2, r3, #8
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80099b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f103 0208 	add.w	r2, r3, #8
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f103 0208 	add.w	r2, r3, #8
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2200      	movs	r2, #0
 80099ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80099d0:	bf00      	nop
 80099d2:	370c      	adds	r7, #12
 80099d4:	46bd      	mov	sp, r7
 80099d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099da:	4770      	bx	lr

080099dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80099dc:	b480      	push	{r7}
 80099de:	b083      	sub	sp, #12
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2200      	movs	r2, #0
 80099e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80099ea:	bf00      	nop
 80099ec:	370c      	adds	r7, #12
 80099ee:	46bd      	mov	sp, r7
 80099f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f4:	4770      	bx	lr

080099f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80099f6:	b480      	push	{r7}
 80099f8:	b085      	sub	sp, #20
 80099fa:	af00      	add	r7, sp, #0
 80099fc:	6078      	str	r0, [r7, #4]
 80099fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	685b      	ldr	r3, [r3, #4]
 8009a04:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	68fa      	ldr	r2, [r7, #12]
 8009a0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	689a      	ldr	r2, [r3, #8]
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	689b      	ldr	r3, [r3, #8]
 8009a18:	683a      	ldr	r2, [r7, #0]
 8009a1a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	683a      	ldr	r2, [r7, #0]
 8009a20:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	687a      	ldr	r2, [r7, #4]
 8009a26:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	1c5a      	adds	r2, r3, #1
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	601a      	str	r2, [r3, #0]
}
 8009a32:	bf00      	nop
 8009a34:	3714      	adds	r7, #20
 8009a36:	46bd      	mov	sp, r7
 8009a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3c:	4770      	bx	lr

08009a3e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009a3e:	b480      	push	{r7}
 8009a40:	b085      	sub	sp, #20
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	6078      	str	r0, [r7, #4]
 8009a46:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a54:	d103      	bne.n	8009a5e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	691b      	ldr	r3, [r3, #16]
 8009a5a:	60fb      	str	r3, [r7, #12]
 8009a5c:	e00c      	b.n	8009a78 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	3308      	adds	r3, #8
 8009a62:	60fb      	str	r3, [r7, #12]
 8009a64:	e002      	b.n	8009a6c <vListInsert+0x2e>
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	685b      	ldr	r3, [r3, #4]
 8009a6a:	60fb      	str	r3, [r7, #12]
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	685b      	ldr	r3, [r3, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	68ba      	ldr	r2, [r7, #8]
 8009a74:	429a      	cmp	r2, r3
 8009a76:	d2f6      	bcs.n	8009a66 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	685a      	ldr	r2, [r3, #4]
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	685b      	ldr	r3, [r3, #4]
 8009a84:	683a      	ldr	r2, [r7, #0]
 8009a86:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	68fa      	ldr	r2, [r7, #12]
 8009a8c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	683a      	ldr	r2, [r7, #0]
 8009a92:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	687a      	ldr	r2, [r7, #4]
 8009a98:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	1c5a      	adds	r2, r3, #1
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	601a      	str	r2, [r3, #0]
}
 8009aa4:	bf00      	nop
 8009aa6:	3714      	adds	r7, #20
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aae:	4770      	bx	lr

08009ab0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009ab0:	b480      	push	{r7}
 8009ab2:	b085      	sub	sp, #20
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	691b      	ldr	r3, [r3, #16]
 8009abc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	685b      	ldr	r3, [r3, #4]
 8009ac2:	687a      	ldr	r2, [r7, #4]
 8009ac4:	6892      	ldr	r2, [r2, #8]
 8009ac6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	689b      	ldr	r3, [r3, #8]
 8009acc:	687a      	ldr	r2, [r7, #4]
 8009ace:	6852      	ldr	r2, [r2, #4]
 8009ad0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	685b      	ldr	r3, [r3, #4]
 8009ad6:	687a      	ldr	r2, [r7, #4]
 8009ad8:	429a      	cmp	r2, r3
 8009ada:	d103      	bne.n	8009ae4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	689a      	ldr	r2, [r3, #8]
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	1e5a      	subs	r2, r3, #1
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	681b      	ldr	r3, [r3, #0]
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	3714      	adds	r7, #20
 8009afc:	46bd      	mov	sp, r7
 8009afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b02:	4770      	bx	lr

08009b04 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b084      	sub	sp, #16
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
 8009b0c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d10a      	bne.n	8009b2e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b1c:	f383 8811 	msr	BASEPRI, r3
 8009b20:	f3bf 8f6f 	isb	sy
 8009b24:	f3bf 8f4f 	dsb	sy
 8009b28:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009b2a:	bf00      	nop
 8009b2c:	e7fe      	b.n	8009b2c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009b2e:	f001 fe09 	bl	800b744 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	681a      	ldr	r2, [r3, #0]
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b3a:	68f9      	ldr	r1, [r7, #12]
 8009b3c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009b3e:	fb01 f303 	mul.w	r3, r1, r3
 8009b42:	441a      	add	r2, r3
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	681a      	ldr	r2, [r3, #0]
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681a      	ldr	r2, [r3, #0]
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b5e:	3b01      	subs	r3, #1
 8009b60:	68f9      	ldr	r1, [r7, #12]
 8009b62:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009b64:	fb01 f303 	mul.w	r3, r1, r3
 8009b68:	441a      	add	r2, r3
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	22ff      	movs	r2, #255	; 0xff
 8009b72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	22ff      	movs	r2, #255	; 0xff
 8009b7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d114      	bne.n	8009bae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	691b      	ldr	r3, [r3, #16]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d01a      	beq.n	8009bc2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	3310      	adds	r3, #16
 8009b90:	4618      	mov	r0, r3
 8009b92:	f001 f8ef 	bl	800ad74 <xTaskRemoveFromEventList>
 8009b96:	4603      	mov	r3, r0
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d012      	beq.n	8009bc2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009b9c:	4b0c      	ldr	r3, [pc, #48]	; (8009bd0 <xQueueGenericReset+0xcc>)
 8009b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ba2:	601a      	str	r2, [r3, #0]
 8009ba4:	f3bf 8f4f 	dsb	sy
 8009ba8:	f3bf 8f6f 	isb	sy
 8009bac:	e009      	b.n	8009bc2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	3310      	adds	r3, #16
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f7ff fef2 	bl	800999c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	3324      	adds	r3, #36	; 0x24
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	f7ff feed 	bl	800999c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009bc2:	f001 fdef 	bl	800b7a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009bc6:	2301      	movs	r3, #1
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3710      	adds	r7, #16
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}
 8009bd0:	e000ed04 	.word	0xe000ed04

08009bd4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b08e      	sub	sp, #56	; 0x38
 8009bd8:	af02      	add	r7, sp, #8
 8009bda:	60f8      	str	r0, [r7, #12]
 8009bdc:	60b9      	str	r1, [r7, #8]
 8009bde:	607a      	str	r2, [r7, #4]
 8009be0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d10a      	bne.n	8009bfe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bec:	f383 8811 	msr	BASEPRI, r3
 8009bf0:	f3bf 8f6f 	isb	sy
 8009bf4:	f3bf 8f4f 	dsb	sy
 8009bf8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009bfa:	bf00      	nop
 8009bfc:	e7fe      	b.n	8009bfc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d10a      	bne.n	8009c1a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c08:	f383 8811 	msr	BASEPRI, r3
 8009c0c:	f3bf 8f6f 	isb	sy
 8009c10:	f3bf 8f4f 	dsb	sy
 8009c14:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009c16:	bf00      	nop
 8009c18:	e7fe      	b.n	8009c18 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d002      	beq.n	8009c26 <xQueueGenericCreateStatic+0x52>
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d001      	beq.n	8009c2a <xQueueGenericCreateStatic+0x56>
 8009c26:	2301      	movs	r3, #1
 8009c28:	e000      	b.n	8009c2c <xQueueGenericCreateStatic+0x58>
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d10a      	bne.n	8009c46 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c34:	f383 8811 	msr	BASEPRI, r3
 8009c38:	f3bf 8f6f 	isb	sy
 8009c3c:	f3bf 8f4f 	dsb	sy
 8009c40:	623b      	str	r3, [r7, #32]
}
 8009c42:	bf00      	nop
 8009c44:	e7fe      	b.n	8009c44 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d102      	bne.n	8009c52 <xQueueGenericCreateStatic+0x7e>
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d101      	bne.n	8009c56 <xQueueGenericCreateStatic+0x82>
 8009c52:	2301      	movs	r3, #1
 8009c54:	e000      	b.n	8009c58 <xQueueGenericCreateStatic+0x84>
 8009c56:	2300      	movs	r3, #0
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d10a      	bne.n	8009c72 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c60:	f383 8811 	msr	BASEPRI, r3
 8009c64:	f3bf 8f6f 	isb	sy
 8009c68:	f3bf 8f4f 	dsb	sy
 8009c6c:	61fb      	str	r3, [r7, #28]
}
 8009c6e:	bf00      	nop
 8009c70:	e7fe      	b.n	8009c70 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009c72:	2348      	movs	r3, #72	; 0x48
 8009c74:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	2b48      	cmp	r3, #72	; 0x48
 8009c7a:	d00a      	beq.n	8009c92 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c80:	f383 8811 	msr	BASEPRI, r3
 8009c84:	f3bf 8f6f 	isb	sy
 8009c88:	f3bf 8f4f 	dsb	sy
 8009c8c:	61bb      	str	r3, [r7, #24]
}
 8009c8e:	bf00      	nop
 8009c90:	e7fe      	b.n	8009c90 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009c92:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d009      	beq.n	8009cb2 <xQueueGenericCreateStatic+0xde>
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009c9e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ca4:	9300      	str	r3, [sp, #0]
 8009ca6:	4613      	mov	r3, r2
 8009ca8:	687a      	ldr	r2, [r7, #4]
 8009caa:	68b9      	ldr	r1, [r7, #8]
 8009cac:	68f8      	ldr	r0, [r7, #12]
 8009cae:	f000 f805 	bl	8009cbc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	3730      	adds	r7, #48	; 0x30
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}

08009cbc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b084      	sub	sp, #16
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	60f8      	str	r0, [r7, #12]
 8009cc4:	60b9      	str	r1, [r7, #8]
 8009cc6:	607a      	str	r2, [r7, #4]
 8009cc8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d103      	bne.n	8009cd8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009cd0:	69bb      	ldr	r3, [r7, #24]
 8009cd2:	69ba      	ldr	r2, [r7, #24]
 8009cd4:	601a      	str	r2, [r3, #0]
 8009cd6:	e002      	b.n	8009cde <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009cd8:	69bb      	ldr	r3, [r7, #24]
 8009cda:	687a      	ldr	r2, [r7, #4]
 8009cdc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009cde:	69bb      	ldr	r3, [r7, #24]
 8009ce0:	68fa      	ldr	r2, [r7, #12]
 8009ce2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009ce4:	69bb      	ldr	r3, [r7, #24]
 8009ce6:	68ba      	ldr	r2, [r7, #8]
 8009ce8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009cea:	2101      	movs	r1, #1
 8009cec:	69b8      	ldr	r0, [r7, #24]
 8009cee:	f7ff ff09 	bl	8009b04 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009cf2:	bf00      	nop
 8009cf4:	3710      	adds	r7, #16
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}

08009cfa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009cfa:	b580      	push	{r7, lr}
 8009cfc:	b082      	sub	sp, #8
 8009cfe:	af00      	add	r7, sp, #0
 8009d00:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d00e      	beq.n	8009d26 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2200      	movs	r2, #0
 8009d12:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2200      	movs	r2, #0
 8009d18:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	2100      	movs	r1, #0
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f000 f81f 	bl	8009d64 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009d26:	bf00      	nop
 8009d28:	3708      	adds	r7, #8
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}

08009d2e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8009d2e:	b580      	push	{r7, lr}
 8009d30:	b088      	sub	sp, #32
 8009d32:	af02      	add	r7, sp, #8
 8009d34:	4603      	mov	r3, r0
 8009d36:	6039      	str	r1, [r7, #0]
 8009d38:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	617b      	str	r3, [r7, #20]
 8009d3e:	2300      	movs	r3, #0
 8009d40:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009d42:	79fb      	ldrb	r3, [r7, #7]
 8009d44:	9300      	str	r3, [sp, #0]
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	6939      	ldr	r1, [r7, #16]
 8009d4c:	6978      	ldr	r0, [r7, #20]
 8009d4e:	f7ff ff41 	bl	8009bd4 <xQueueGenericCreateStatic>
 8009d52:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009d54:	68f8      	ldr	r0, [r7, #12]
 8009d56:	f7ff ffd0 	bl	8009cfa <prvInitialiseMutex>

		return xNewQueue;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
	}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3718      	adds	r7, #24
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}

08009d64 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b08e      	sub	sp, #56	; 0x38
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	60f8      	str	r0, [r7, #12]
 8009d6c:	60b9      	str	r1, [r7, #8]
 8009d6e:	607a      	str	r2, [r7, #4]
 8009d70:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009d72:	2300      	movs	r3, #0
 8009d74:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d10a      	bne.n	8009d96 <xQueueGenericSend+0x32>
	__asm volatile
 8009d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d84:	f383 8811 	msr	BASEPRI, r3
 8009d88:	f3bf 8f6f 	isb	sy
 8009d8c:	f3bf 8f4f 	dsb	sy
 8009d90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009d92:	bf00      	nop
 8009d94:	e7fe      	b.n	8009d94 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d103      	bne.n	8009da4 <xQueueGenericSend+0x40>
 8009d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d101      	bne.n	8009da8 <xQueueGenericSend+0x44>
 8009da4:	2301      	movs	r3, #1
 8009da6:	e000      	b.n	8009daa <xQueueGenericSend+0x46>
 8009da8:	2300      	movs	r3, #0
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d10a      	bne.n	8009dc4 <xQueueGenericSend+0x60>
	__asm volatile
 8009dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db2:	f383 8811 	msr	BASEPRI, r3
 8009db6:	f3bf 8f6f 	isb	sy
 8009dba:	f3bf 8f4f 	dsb	sy
 8009dbe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009dc0:	bf00      	nop
 8009dc2:	e7fe      	b.n	8009dc2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	2b02      	cmp	r3, #2
 8009dc8:	d103      	bne.n	8009dd2 <xQueueGenericSend+0x6e>
 8009dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dce:	2b01      	cmp	r3, #1
 8009dd0:	d101      	bne.n	8009dd6 <xQueueGenericSend+0x72>
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	e000      	b.n	8009dd8 <xQueueGenericSend+0x74>
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d10a      	bne.n	8009df2 <xQueueGenericSend+0x8e>
	__asm volatile
 8009ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de0:	f383 8811 	msr	BASEPRI, r3
 8009de4:	f3bf 8f6f 	isb	sy
 8009de8:	f3bf 8f4f 	dsb	sy
 8009dec:	623b      	str	r3, [r7, #32]
}
 8009dee:	bf00      	nop
 8009df0:	e7fe      	b.n	8009df0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009df2:	f001 f955 	bl	800b0a0 <xTaskGetSchedulerState>
 8009df6:	4603      	mov	r3, r0
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d102      	bne.n	8009e02 <xQueueGenericSend+0x9e>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d101      	bne.n	8009e06 <xQueueGenericSend+0xa2>
 8009e02:	2301      	movs	r3, #1
 8009e04:	e000      	b.n	8009e08 <xQueueGenericSend+0xa4>
 8009e06:	2300      	movs	r3, #0
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d10a      	bne.n	8009e22 <xQueueGenericSend+0xbe>
	__asm volatile
 8009e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e10:	f383 8811 	msr	BASEPRI, r3
 8009e14:	f3bf 8f6f 	isb	sy
 8009e18:	f3bf 8f4f 	dsb	sy
 8009e1c:	61fb      	str	r3, [r7, #28]
}
 8009e1e:	bf00      	nop
 8009e20:	e7fe      	b.n	8009e20 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009e22:	f001 fc8f 	bl	800b744 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e2e:	429a      	cmp	r2, r3
 8009e30:	d302      	bcc.n	8009e38 <xQueueGenericSend+0xd4>
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	2b02      	cmp	r3, #2
 8009e36:	d129      	bne.n	8009e8c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009e38:	683a      	ldr	r2, [r7, #0]
 8009e3a:	68b9      	ldr	r1, [r7, #8]
 8009e3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e3e:	f000 fa41 	bl	800a2c4 <prvCopyDataToQueue>
 8009e42:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d010      	beq.n	8009e6e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e4e:	3324      	adds	r3, #36	; 0x24
 8009e50:	4618      	mov	r0, r3
 8009e52:	f000 ff8f 	bl	800ad74 <xTaskRemoveFromEventList>
 8009e56:	4603      	mov	r3, r0
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d013      	beq.n	8009e84 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009e5c:	4b3f      	ldr	r3, [pc, #252]	; (8009f5c <xQueueGenericSend+0x1f8>)
 8009e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e62:	601a      	str	r2, [r3, #0]
 8009e64:	f3bf 8f4f 	dsb	sy
 8009e68:	f3bf 8f6f 	isb	sy
 8009e6c:	e00a      	b.n	8009e84 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d007      	beq.n	8009e84 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009e74:	4b39      	ldr	r3, [pc, #228]	; (8009f5c <xQueueGenericSend+0x1f8>)
 8009e76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e7a:	601a      	str	r2, [r3, #0]
 8009e7c:	f3bf 8f4f 	dsb	sy
 8009e80:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009e84:	f001 fc8e 	bl	800b7a4 <vPortExitCritical>
				return pdPASS;
 8009e88:	2301      	movs	r3, #1
 8009e8a:	e063      	b.n	8009f54 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d103      	bne.n	8009e9a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009e92:	f001 fc87 	bl	800b7a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009e96:	2300      	movs	r3, #0
 8009e98:	e05c      	b.n	8009f54 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d106      	bne.n	8009eae <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009ea0:	f107 0314 	add.w	r3, r7, #20
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f000 ffc7 	bl	800ae38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009eaa:	2301      	movs	r3, #1
 8009eac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009eae:	f001 fc79 	bl	800b7a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009eb2:	f000 fd53 	bl	800a95c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009eb6:	f001 fc45 	bl	800b744 <vPortEnterCritical>
 8009eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ebc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009ec0:	b25b      	sxtb	r3, r3
 8009ec2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ec6:	d103      	bne.n	8009ed0 <xQueueGenericSend+0x16c>
 8009ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eca:	2200      	movs	r2, #0
 8009ecc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009ed6:	b25b      	sxtb	r3, r3
 8009ed8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009edc:	d103      	bne.n	8009ee6 <xQueueGenericSend+0x182>
 8009ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ee6:	f001 fc5d 	bl	800b7a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009eea:	1d3a      	adds	r2, r7, #4
 8009eec:	f107 0314 	add.w	r3, r7, #20
 8009ef0:	4611      	mov	r1, r2
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f000 ffb6 	bl	800ae64 <xTaskCheckForTimeOut>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d124      	bne.n	8009f48 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009efe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f00:	f000 fab2 	bl	800a468 <prvIsQueueFull>
 8009f04:	4603      	mov	r3, r0
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d018      	beq.n	8009f3c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f0c:	3310      	adds	r3, #16
 8009f0e:	687a      	ldr	r2, [r7, #4]
 8009f10:	4611      	mov	r1, r2
 8009f12:	4618      	mov	r0, r3
 8009f14:	f000 ff0a 	bl	800ad2c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009f18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f1a:	f000 fa3d 	bl	800a398 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009f1e:	f000 fd2b 	bl	800a978 <xTaskResumeAll>
 8009f22:	4603      	mov	r3, r0
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	f47f af7c 	bne.w	8009e22 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009f2a:	4b0c      	ldr	r3, [pc, #48]	; (8009f5c <xQueueGenericSend+0x1f8>)
 8009f2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f30:	601a      	str	r2, [r3, #0]
 8009f32:	f3bf 8f4f 	dsb	sy
 8009f36:	f3bf 8f6f 	isb	sy
 8009f3a:	e772      	b.n	8009e22 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009f3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f3e:	f000 fa2b 	bl	800a398 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009f42:	f000 fd19 	bl	800a978 <xTaskResumeAll>
 8009f46:	e76c      	b.n	8009e22 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009f48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f4a:	f000 fa25 	bl	800a398 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009f4e:	f000 fd13 	bl	800a978 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009f52:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3738      	adds	r7, #56	; 0x38
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}
 8009f5c:	e000ed04 	.word	0xe000ed04

08009f60 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b08e      	sub	sp, #56	; 0x38
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
 8009f68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d10a      	bne.n	8009f8a <xQueueGiveFromISR+0x2a>
	__asm volatile
 8009f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f78:	f383 8811 	msr	BASEPRI, r3
 8009f7c:	f3bf 8f6f 	isb	sy
 8009f80:	f3bf 8f4f 	dsb	sy
 8009f84:	623b      	str	r3, [r7, #32]
}
 8009f86:	bf00      	nop
 8009f88:	e7fe      	b.n	8009f88 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d00a      	beq.n	8009fa8 <xQueueGiveFromISR+0x48>
	__asm volatile
 8009f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f96:	f383 8811 	msr	BASEPRI, r3
 8009f9a:	f3bf 8f6f 	isb	sy
 8009f9e:	f3bf 8f4f 	dsb	sy
 8009fa2:	61fb      	str	r3, [r7, #28]
}
 8009fa4:	bf00      	nop
 8009fa6:	e7fe      	b.n	8009fa6 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d103      	bne.n	8009fb8 <xQueueGiveFromISR+0x58>
 8009fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fb2:	689b      	ldr	r3, [r3, #8]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d101      	bne.n	8009fbc <xQueueGiveFromISR+0x5c>
 8009fb8:	2301      	movs	r3, #1
 8009fba:	e000      	b.n	8009fbe <xQueueGiveFromISR+0x5e>
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d10a      	bne.n	8009fd8 <xQueueGiveFromISR+0x78>
	__asm volatile
 8009fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fc6:	f383 8811 	msr	BASEPRI, r3
 8009fca:	f3bf 8f6f 	isb	sy
 8009fce:	f3bf 8f4f 	dsb	sy
 8009fd2:	61bb      	str	r3, [r7, #24]
}
 8009fd4:	bf00      	nop
 8009fd6:	e7fe      	b.n	8009fd6 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009fd8:	f001 fc96 	bl	800b908 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009fdc:	f3ef 8211 	mrs	r2, BASEPRI
 8009fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe4:	f383 8811 	msr	BASEPRI, r3
 8009fe8:	f3bf 8f6f 	isb	sy
 8009fec:	f3bf 8f4f 	dsb	sy
 8009ff0:	617a      	str	r2, [r7, #20]
 8009ff2:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009ff4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ffc:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a002:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a004:	429a      	cmp	r2, r3
 800a006:	d22b      	bcs.n	800a060 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a00a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a00e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a014:	1c5a      	adds	r2, r3, #1
 800a016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a018:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a01a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a01e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a022:	d112      	bne.n	800a04a <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d016      	beq.n	800a05a <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a02e:	3324      	adds	r3, #36	; 0x24
 800a030:	4618      	mov	r0, r3
 800a032:	f000 fe9f 	bl	800ad74 <xTaskRemoveFromEventList>
 800a036:	4603      	mov	r3, r0
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d00e      	beq.n	800a05a <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d00b      	beq.n	800a05a <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	2201      	movs	r2, #1
 800a046:	601a      	str	r2, [r3, #0]
 800a048:	e007      	b.n	800a05a <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a04a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a04e:	3301      	adds	r3, #1
 800a050:	b2db      	uxtb	r3, r3
 800a052:	b25a      	sxtb	r2, r3
 800a054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a056:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a05a:	2301      	movs	r3, #1
 800a05c:	637b      	str	r3, [r7, #52]	; 0x34
 800a05e:	e001      	b.n	800a064 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a060:	2300      	movs	r3, #0
 800a062:	637b      	str	r3, [r7, #52]	; 0x34
 800a064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a066:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a06e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a072:	4618      	mov	r0, r3
 800a074:	3738      	adds	r7, #56	; 0x38
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}
	...

0800a07c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b08e      	sub	sp, #56	; 0x38
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
 800a084:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a086:	2300      	movs	r3, #0
 800a088:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a08e:	2300      	movs	r3, #0
 800a090:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a094:	2b00      	cmp	r3, #0
 800a096:	d10a      	bne.n	800a0ae <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a09c:	f383 8811 	msr	BASEPRI, r3
 800a0a0:	f3bf 8f6f 	isb	sy
 800a0a4:	f3bf 8f4f 	dsb	sy
 800a0a8:	623b      	str	r3, [r7, #32]
}
 800a0aa:	bf00      	nop
 800a0ac:	e7fe      	b.n	800a0ac <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a0ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d00a      	beq.n	800a0cc <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a0b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ba:	f383 8811 	msr	BASEPRI, r3
 800a0be:	f3bf 8f6f 	isb	sy
 800a0c2:	f3bf 8f4f 	dsb	sy
 800a0c6:	61fb      	str	r3, [r7, #28]
}
 800a0c8:	bf00      	nop
 800a0ca:	e7fe      	b.n	800a0ca <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a0cc:	f000 ffe8 	bl	800b0a0 <xTaskGetSchedulerState>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d102      	bne.n	800a0dc <xQueueSemaphoreTake+0x60>
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d101      	bne.n	800a0e0 <xQueueSemaphoreTake+0x64>
 800a0dc:	2301      	movs	r3, #1
 800a0de:	e000      	b.n	800a0e2 <xQueueSemaphoreTake+0x66>
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d10a      	bne.n	800a0fc <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a0e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ea:	f383 8811 	msr	BASEPRI, r3
 800a0ee:	f3bf 8f6f 	isb	sy
 800a0f2:	f3bf 8f4f 	dsb	sy
 800a0f6:	61bb      	str	r3, [r7, #24]
}
 800a0f8:	bf00      	nop
 800a0fa:	e7fe      	b.n	800a0fa <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a0fc:	f001 fb22 	bl	800b744 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a104:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d024      	beq.n	800a156 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a10c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a10e:	1e5a      	subs	r2, r3, #1
 800a110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a112:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d104      	bne.n	800a126 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a11c:	f001 f968 	bl	800b3f0 <pvTaskIncrementMutexHeldCount>
 800a120:	4602      	mov	r2, r0
 800a122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a124:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a128:	691b      	ldr	r3, [r3, #16]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d00f      	beq.n	800a14e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a12e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a130:	3310      	adds	r3, #16
 800a132:	4618      	mov	r0, r3
 800a134:	f000 fe1e 	bl	800ad74 <xTaskRemoveFromEventList>
 800a138:	4603      	mov	r3, r0
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d007      	beq.n	800a14e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a13e:	4b54      	ldr	r3, [pc, #336]	; (800a290 <xQueueSemaphoreTake+0x214>)
 800a140:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a144:	601a      	str	r2, [r3, #0]
 800a146:	f3bf 8f4f 	dsb	sy
 800a14a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a14e:	f001 fb29 	bl	800b7a4 <vPortExitCritical>
				return pdPASS;
 800a152:	2301      	movs	r3, #1
 800a154:	e097      	b.n	800a286 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d111      	bne.n	800a180 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d00a      	beq.n	800a178 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a166:	f383 8811 	msr	BASEPRI, r3
 800a16a:	f3bf 8f6f 	isb	sy
 800a16e:	f3bf 8f4f 	dsb	sy
 800a172:	617b      	str	r3, [r7, #20]
}
 800a174:	bf00      	nop
 800a176:	e7fe      	b.n	800a176 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a178:	f001 fb14 	bl	800b7a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a17c:	2300      	movs	r3, #0
 800a17e:	e082      	b.n	800a286 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a182:	2b00      	cmp	r3, #0
 800a184:	d106      	bne.n	800a194 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a186:	f107 030c 	add.w	r3, r7, #12
 800a18a:	4618      	mov	r0, r3
 800a18c:	f000 fe54 	bl	800ae38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a190:	2301      	movs	r3, #1
 800a192:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a194:	f001 fb06 	bl	800b7a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a198:	f000 fbe0 	bl	800a95c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a19c:	f001 fad2 	bl	800b744 <vPortEnterCritical>
 800a1a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a1a6:	b25b      	sxtb	r3, r3
 800a1a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a1ac:	d103      	bne.n	800a1b6 <xQueueSemaphoreTake+0x13a>
 800a1ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a1b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a1bc:	b25b      	sxtb	r3, r3
 800a1be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a1c2:	d103      	bne.n	800a1cc <xQueueSemaphoreTake+0x150>
 800a1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a1cc:	f001 faea 	bl	800b7a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a1d0:	463a      	mov	r2, r7
 800a1d2:	f107 030c 	add.w	r3, r7, #12
 800a1d6:	4611      	mov	r1, r2
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f000 fe43 	bl	800ae64 <xTaskCheckForTimeOut>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d132      	bne.n	800a24a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a1e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a1e6:	f000 f929 	bl	800a43c <prvIsQueueEmpty>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d026      	beq.n	800a23e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a1f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d109      	bne.n	800a20c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a1f8:	f001 faa4 	bl	800b744 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a1fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1fe:	689b      	ldr	r3, [r3, #8]
 800a200:	4618      	mov	r0, r3
 800a202:	f000 ff6b 	bl	800b0dc <xTaskPriorityInherit>
 800a206:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a208:	f001 facc 	bl	800b7a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a20c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a20e:	3324      	adds	r3, #36	; 0x24
 800a210:	683a      	ldr	r2, [r7, #0]
 800a212:	4611      	mov	r1, r2
 800a214:	4618      	mov	r0, r3
 800a216:	f000 fd89 	bl	800ad2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a21a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a21c:	f000 f8bc 	bl	800a398 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a220:	f000 fbaa 	bl	800a978 <xTaskResumeAll>
 800a224:	4603      	mov	r3, r0
 800a226:	2b00      	cmp	r3, #0
 800a228:	f47f af68 	bne.w	800a0fc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a22c:	4b18      	ldr	r3, [pc, #96]	; (800a290 <xQueueSemaphoreTake+0x214>)
 800a22e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a232:	601a      	str	r2, [r3, #0]
 800a234:	f3bf 8f4f 	dsb	sy
 800a238:	f3bf 8f6f 	isb	sy
 800a23c:	e75e      	b.n	800a0fc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a23e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a240:	f000 f8aa 	bl	800a398 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a244:	f000 fb98 	bl	800a978 <xTaskResumeAll>
 800a248:	e758      	b.n	800a0fc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a24a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a24c:	f000 f8a4 	bl	800a398 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a250:	f000 fb92 	bl	800a978 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a254:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a256:	f000 f8f1 	bl	800a43c <prvIsQueueEmpty>
 800a25a:	4603      	mov	r3, r0
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	f43f af4d 	beq.w	800a0fc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a264:	2b00      	cmp	r3, #0
 800a266:	d00d      	beq.n	800a284 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a268:	f001 fa6c 	bl	800b744 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a26c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a26e:	f000 f811 	bl	800a294 <prvGetDisinheritPriorityAfterTimeout>
 800a272:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a276:	689b      	ldr	r3, [r3, #8]
 800a278:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a27a:	4618      	mov	r0, r3
 800a27c:	f001 f82a 	bl	800b2d4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a280:	f001 fa90 	bl	800b7a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a284:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a286:	4618      	mov	r0, r3
 800a288:	3738      	adds	r7, #56	; 0x38
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}
 800a28e:	bf00      	nop
 800a290:	e000ed04 	.word	0xe000ed04

0800a294 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a294:	b480      	push	{r7}
 800a296:	b085      	sub	sp, #20
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d006      	beq.n	800a2b2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f1c3 0307 	rsb	r3, r3, #7
 800a2ae:	60fb      	str	r3, [r7, #12]
 800a2b0:	e001      	b.n	800a2b6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
	}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	3714      	adds	r7, #20
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c2:	4770      	bx	lr

0800a2c4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b086      	sub	sp, #24
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	60f8      	str	r0, [r7, #12]
 800a2cc:	60b9      	str	r1, [r7, #8]
 800a2ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2d8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d10d      	bne.n	800a2fe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d14d      	bne.n	800a386 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	689b      	ldr	r3, [r3, #8]
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f000 ff6a 	bl	800b1c8 <xTaskPriorityDisinherit>
 800a2f4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	609a      	str	r2, [r3, #8]
 800a2fc:	e043      	b.n	800a386 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d119      	bne.n	800a338 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	6858      	ldr	r0, [r3, #4]
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a30c:	461a      	mov	r2, r3
 800a30e:	68b9      	ldr	r1, [r7, #8]
 800a310:	f001 fb5e 	bl	800b9d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	685a      	ldr	r2, [r3, #4]
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a31c:	441a      	add	r2, r3
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	685a      	ldr	r2, [r3, #4]
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	689b      	ldr	r3, [r3, #8]
 800a32a:	429a      	cmp	r2, r3
 800a32c:	d32b      	bcc.n	800a386 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681a      	ldr	r2, [r3, #0]
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	605a      	str	r2, [r3, #4]
 800a336:	e026      	b.n	800a386 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	68d8      	ldr	r0, [r3, #12]
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a340:	461a      	mov	r2, r3
 800a342:	68b9      	ldr	r1, [r7, #8]
 800a344:	f001 fb44 	bl	800b9d0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	68da      	ldr	r2, [r3, #12]
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a350:	425b      	negs	r3, r3
 800a352:	441a      	add	r2, r3
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	68da      	ldr	r2, [r3, #12]
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	429a      	cmp	r2, r3
 800a362:	d207      	bcs.n	800a374 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	689a      	ldr	r2, [r3, #8]
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a36c:	425b      	negs	r3, r3
 800a36e:	441a      	add	r2, r3
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2b02      	cmp	r3, #2
 800a378:	d105      	bne.n	800a386 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a37a:	693b      	ldr	r3, [r7, #16]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d002      	beq.n	800a386 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	3b01      	subs	r3, #1
 800a384:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	1c5a      	adds	r2, r3, #1
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a38e:	697b      	ldr	r3, [r7, #20]
}
 800a390:	4618      	mov	r0, r3
 800a392:	3718      	adds	r7, #24
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}

0800a398 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b084      	sub	sp, #16
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a3a0:	f001 f9d0 	bl	800b744 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a3aa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a3ac:	e011      	b.n	800a3d2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d012      	beq.n	800a3dc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	3324      	adds	r3, #36	; 0x24
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f000 fcda 	bl	800ad74 <xTaskRemoveFromEventList>
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d001      	beq.n	800a3ca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a3c6:	f000 fdaf 	bl	800af28 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a3ca:	7bfb      	ldrb	r3, [r7, #15]
 800a3cc:	3b01      	subs	r3, #1
 800a3ce:	b2db      	uxtb	r3, r3
 800a3d0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a3d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	dce9      	bgt.n	800a3ae <prvUnlockQueue+0x16>
 800a3da:	e000      	b.n	800a3de <prvUnlockQueue+0x46>
					break;
 800a3dc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	22ff      	movs	r2, #255	; 0xff
 800a3e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a3e6:	f001 f9dd 	bl	800b7a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a3ea:	f001 f9ab 	bl	800b744 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a3f4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a3f6:	e011      	b.n	800a41c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	691b      	ldr	r3, [r3, #16]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d012      	beq.n	800a426 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	3310      	adds	r3, #16
 800a404:	4618      	mov	r0, r3
 800a406:	f000 fcb5 	bl	800ad74 <xTaskRemoveFromEventList>
 800a40a:	4603      	mov	r3, r0
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d001      	beq.n	800a414 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a410:	f000 fd8a 	bl	800af28 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a414:	7bbb      	ldrb	r3, [r7, #14]
 800a416:	3b01      	subs	r3, #1
 800a418:	b2db      	uxtb	r3, r3
 800a41a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a41c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a420:	2b00      	cmp	r3, #0
 800a422:	dce9      	bgt.n	800a3f8 <prvUnlockQueue+0x60>
 800a424:	e000      	b.n	800a428 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a426:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	22ff      	movs	r2, #255	; 0xff
 800a42c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a430:	f001 f9b8 	bl	800b7a4 <vPortExitCritical>
}
 800a434:	bf00      	nop
 800a436:	3710      	adds	r7, #16
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}

0800a43c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b084      	sub	sp, #16
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a444:	f001 f97e 	bl	800b744 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d102      	bne.n	800a456 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a450:	2301      	movs	r3, #1
 800a452:	60fb      	str	r3, [r7, #12]
 800a454:	e001      	b.n	800a45a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a456:	2300      	movs	r3, #0
 800a458:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a45a:	f001 f9a3 	bl	800b7a4 <vPortExitCritical>

	return xReturn;
 800a45e:	68fb      	ldr	r3, [r7, #12]
}
 800a460:	4618      	mov	r0, r3
 800a462:	3710      	adds	r7, #16
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}

0800a468 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b084      	sub	sp, #16
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a470:	f001 f968 	bl	800b744 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a47c:	429a      	cmp	r2, r3
 800a47e:	d102      	bne.n	800a486 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a480:	2301      	movs	r3, #1
 800a482:	60fb      	str	r3, [r7, #12]
 800a484:	e001      	b.n	800a48a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a486:	2300      	movs	r3, #0
 800a488:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a48a:	f001 f98b 	bl	800b7a4 <vPortExitCritical>

	return xReturn;
 800a48e:	68fb      	ldr	r3, [r7, #12]
}
 800a490:	4618      	mov	r0, r3
 800a492:	3710      	adds	r7, #16
 800a494:	46bd      	mov	sp, r7
 800a496:	bd80      	pop	{r7, pc}

0800a498 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b08e      	sub	sp, #56	; 0x38
 800a49c:	af04      	add	r7, sp, #16
 800a49e:	60f8      	str	r0, [r7, #12]
 800a4a0:	60b9      	str	r1, [r7, #8]
 800a4a2:	607a      	str	r2, [r7, #4]
 800a4a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a4a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d10a      	bne.n	800a4c2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a4ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b0:	f383 8811 	msr	BASEPRI, r3
 800a4b4:	f3bf 8f6f 	isb	sy
 800a4b8:	f3bf 8f4f 	dsb	sy
 800a4bc:	623b      	str	r3, [r7, #32]
}
 800a4be:	bf00      	nop
 800a4c0:	e7fe      	b.n	800a4c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a4c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d10a      	bne.n	800a4de <xTaskCreateStatic+0x46>
	__asm volatile
 800a4c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4cc:	f383 8811 	msr	BASEPRI, r3
 800a4d0:	f3bf 8f6f 	isb	sy
 800a4d4:	f3bf 8f4f 	dsb	sy
 800a4d8:	61fb      	str	r3, [r7, #28]
}
 800a4da:	bf00      	nop
 800a4dc:	e7fe      	b.n	800a4dc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a4de:	2358      	movs	r3, #88	; 0x58
 800a4e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a4e2:	693b      	ldr	r3, [r7, #16]
 800a4e4:	2b58      	cmp	r3, #88	; 0x58
 800a4e6:	d00a      	beq.n	800a4fe <xTaskCreateStatic+0x66>
	__asm volatile
 800a4e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ec:	f383 8811 	msr	BASEPRI, r3
 800a4f0:	f3bf 8f6f 	isb	sy
 800a4f4:	f3bf 8f4f 	dsb	sy
 800a4f8:	61bb      	str	r3, [r7, #24]
}
 800a4fa:	bf00      	nop
 800a4fc:	e7fe      	b.n	800a4fc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a4fe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a502:	2b00      	cmp	r3, #0
 800a504:	d01a      	beq.n	800a53c <xTaskCreateStatic+0xa4>
 800a506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d017      	beq.n	800a53c <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a50c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a50e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a512:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a514:	631a      	str	r2, [r3, #48]	; 0x30
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a516:	2300      	movs	r3, #0
 800a518:	9303      	str	r3, [sp, #12]
 800a51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a51c:	9302      	str	r3, [sp, #8]
 800a51e:	f107 0314 	add.w	r3, r7, #20
 800a522:	9301      	str	r3, [sp, #4]
 800a524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a526:	9300      	str	r3, [sp, #0]
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	687a      	ldr	r2, [r7, #4]
 800a52c:	68b9      	ldr	r1, [r7, #8]
 800a52e:	68f8      	ldr	r0, [r7, #12]
 800a530:	f000 f80b 	bl	800a54a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a534:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a536:	f000 f893 	bl	800a660 <prvAddNewTaskToReadyList>
 800a53a:	e001      	b.n	800a540 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800a53c:	2300      	movs	r3, #0
 800a53e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a540:	697b      	ldr	r3, [r7, #20]
	}
 800a542:	4618      	mov	r0, r3
 800a544:	3728      	adds	r7, #40	; 0x28
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}

0800a54a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a54a:	b580      	push	{r7, lr}
 800a54c:	b088      	sub	sp, #32
 800a54e:	af00      	add	r7, sp, #0
 800a550:	60f8      	str	r0, [r7, #12]
 800a552:	60b9      	str	r1, [r7, #8]
 800a554:	607a      	str	r2, [r7, #4]
 800a556:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a55a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a562:	3b01      	subs	r3, #1
 800a564:	009b      	lsls	r3, r3, #2
 800a566:	4413      	add	r3, r2
 800a568:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a56a:	69bb      	ldr	r3, [r7, #24]
 800a56c:	f023 0307 	bic.w	r3, r3, #7
 800a570:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a572:	69bb      	ldr	r3, [r7, #24]
 800a574:	f003 0307 	and.w	r3, r3, #7
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d00a      	beq.n	800a592 <prvInitialiseNewTask+0x48>
	__asm volatile
 800a57c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a580:	f383 8811 	msr	BASEPRI, r3
 800a584:	f3bf 8f6f 	isb	sy
 800a588:	f3bf 8f4f 	dsb	sy
 800a58c:	617b      	str	r3, [r7, #20]
}
 800a58e:	bf00      	nop
 800a590:	e7fe      	b.n	800a590 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d01f      	beq.n	800a5d8 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a598:	2300      	movs	r3, #0
 800a59a:	61fb      	str	r3, [r7, #28]
 800a59c:	e012      	b.n	800a5c4 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a59e:	68ba      	ldr	r2, [r7, #8]
 800a5a0:	69fb      	ldr	r3, [r7, #28]
 800a5a2:	4413      	add	r3, r2
 800a5a4:	7819      	ldrb	r1, [r3, #0]
 800a5a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5a8:	69fb      	ldr	r3, [r7, #28]
 800a5aa:	4413      	add	r3, r2
 800a5ac:	3334      	adds	r3, #52	; 0x34
 800a5ae:	460a      	mov	r2, r1
 800a5b0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a5b2:	68ba      	ldr	r2, [r7, #8]
 800a5b4:	69fb      	ldr	r3, [r7, #28]
 800a5b6:	4413      	add	r3, r2
 800a5b8:	781b      	ldrb	r3, [r3, #0]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d006      	beq.n	800a5cc <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a5be:	69fb      	ldr	r3, [r7, #28]
 800a5c0:	3301      	adds	r3, #1
 800a5c2:	61fb      	str	r3, [r7, #28]
 800a5c4:	69fb      	ldr	r3, [r7, #28]
 800a5c6:	2b0f      	cmp	r3, #15
 800a5c8:	d9e9      	bls.n	800a59e <prvInitialiseNewTask+0x54>
 800a5ca:	e000      	b.n	800a5ce <prvInitialiseNewTask+0x84>
			{
				break;
 800a5cc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a5d6:	e003      	b.n	800a5e0 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a5d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5da:	2200      	movs	r2, #0
 800a5dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a5e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5e2:	2b06      	cmp	r3, #6
 800a5e4:	d901      	bls.n	800a5ea <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a5e6:	2306      	movs	r3, #6
 800a5e8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a5ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5ee:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a5f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5f4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a5fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5fe:	3304      	adds	r3, #4
 800a600:	4618      	mov	r0, r3
 800a602:	f7ff f9eb 	bl	80099dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a608:	3318      	adds	r3, #24
 800a60a:	4618      	mov	r0, r3
 800a60c:	f7ff f9e6 	bl	80099dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a612:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a614:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a618:	f1c3 0207 	rsb	r2, r3, #7
 800a61c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a61e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a622:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a624:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800a626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a628:	2200      	movs	r2, #0
 800a62a:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a62c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a62e:	2200      	movs	r2, #0
 800a630:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a634:	2200      	movs	r2, #0
 800a636:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a63a:	683a      	ldr	r2, [r7, #0]
 800a63c:	68f9      	ldr	r1, [r7, #12]
 800a63e:	69b8      	ldr	r0, [r7, #24]
 800a640:	f000 ff50 	bl	800b4e4 <pxPortInitialiseStack>
 800a644:	4602      	mov	r2, r0
 800a646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a648:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a64a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d002      	beq.n	800a656 <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a652:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a654:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a656:	bf00      	nop
 800a658:	3720      	adds	r7, #32
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}
	...

0800a660 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b082      	sub	sp, #8
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a668:	f001 f86c 	bl	800b744 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a66c:	4b2a      	ldr	r3, [pc, #168]	; (800a718 <prvAddNewTaskToReadyList+0xb8>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	3301      	adds	r3, #1
 800a672:	4a29      	ldr	r2, [pc, #164]	; (800a718 <prvAddNewTaskToReadyList+0xb8>)
 800a674:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a676:	4b29      	ldr	r3, [pc, #164]	; (800a71c <prvAddNewTaskToReadyList+0xbc>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d109      	bne.n	800a692 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a67e:	4a27      	ldr	r2, [pc, #156]	; (800a71c <prvAddNewTaskToReadyList+0xbc>)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a684:	4b24      	ldr	r3, [pc, #144]	; (800a718 <prvAddNewTaskToReadyList+0xb8>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	2b01      	cmp	r3, #1
 800a68a:	d110      	bne.n	800a6ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a68c:	f000 fc70 	bl	800af70 <prvInitialiseTaskLists>
 800a690:	e00d      	b.n	800a6ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a692:	4b23      	ldr	r3, [pc, #140]	; (800a720 <prvAddNewTaskToReadyList+0xc0>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d109      	bne.n	800a6ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a69a:	4b20      	ldr	r3, [pc, #128]	; (800a71c <prvAddNewTaskToReadyList+0xbc>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	d802      	bhi.n	800a6ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a6a8:	4a1c      	ldr	r2, [pc, #112]	; (800a71c <prvAddNewTaskToReadyList+0xbc>)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a6ae:	4b1d      	ldr	r3, [pc, #116]	; (800a724 <prvAddNewTaskToReadyList+0xc4>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	3301      	adds	r3, #1
 800a6b4:	4a1b      	ldr	r2, [pc, #108]	; (800a724 <prvAddNewTaskToReadyList+0xc4>)
 800a6b6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6bc:	2201      	movs	r2, #1
 800a6be:	409a      	lsls	r2, r3
 800a6c0:	4b19      	ldr	r3, [pc, #100]	; (800a728 <prvAddNewTaskToReadyList+0xc8>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	4313      	orrs	r3, r2
 800a6c6:	4a18      	ldr	r2, [pc, #96]	; (800a728 <prvAddNewTaskToReadyList+0xc8>)
 800a6c8:	6013      	str	r3, [r2, #0]
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6ce:	4613      	mov	r3, r2
 800a6d0:	009b      	lsls	r3, r3, #2
 800a6d2:	4413      	add	r3, r2
 800a6d4:	009b      	lsls	r3, r3, #2
 800a6d6:	4a15      	ldr	r2, [pc, #84]	; (800a72c <prvAddNewTaskToReadyList+0xcc>)
 800a6d8:	441a      	add	r2, r3
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	3304      	adds	r3, #4
 800a6de:	4619      	mov	r1, r3
 800a6e0:	4610      	mov	r0, r2
 800a6e2:	f7ff f988 	bl	80099f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a6e6:	f001 f85d 	bl	800b7a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a6ea:	4b0d      	ldr	r3, [pc, #52]	; (800a720 <prvAddNewTaskToReadyList+0xc0>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d00e      	beq.n	800a710 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a6f2:	4b0a      	ldr	r3, [pc, #40]	; (800a71c <prvAddNewTaskToReadyList+0xbc>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6fc:	429a      	cmp	r2, r3
 800a6fe:	d207      	bcs.n	800a710 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a700:	4b0b      	ldr	r3, [pc, #44]	; (800a730 <prvAddNewTaskToReadyList+0xd0>)
 800a702:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a706:	601a      	str	r2, [r3, #0]
 800a708:	f3bf 8f4f 	dsb	sy
 800a70c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a710:	bf00      	nop
 800a712:	3708      	adds	r7, #8
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}
 800a718:	20007474 	.word	0x20007474
 800a71c:	20007374 	.word	0x20007374
 800a720:	20007480 	.word	0x20007480
 800a724:	20007490 	.word	0x20007490
 800a728:	2000747c 	.word	0x2000747c
 800a72c:	20007378 	.word	0x20007378
 800a730:	e000ed04 	.word	0xe000ed04

0800a734 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800a734:	b580      	push	{r7, lr}
 800a736:	b08a      	sub	sp, #40	; 0x28
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
 800a73c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800a73e:	2300      	movs	r3, #0
 800a740:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d10a      	bne.n	800a75e <vTaskDelayUntil+0x2a>
	__asm volatile
 800a748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a74c:	f383 8811 	msr	BASEPRI, r3
 800a750:	f3bf 8f6f 	isb	sy
 800a754:	f3bf 8f4f 	dsb	sy
 800a758:	617b      	str	r3, [r7, #20]
}
 800a75a:	bf00      	nop
 800a75c:	e7fe      	b.n	800a75c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d10a      	bne.n	800a77a <vTaskDelayUntil+0x46>
	__asm volatile
 800a764:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a768:	f383 8811 	msr	BASEPRI, r3
 800a76c:	f3bf 8f6f 	isb	sy
 800a770:	f3bf 8f4f 	dsb	sy
 800a774:	613b      	str	r3, [r7, #16]
}
 800a776:	bf00      	nop
 800a778:	e7fe      	b.n	800a778 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800a77a:	4b2a      	ldr	r3, [pc, #168]	; (800a824 <vTaskDelayUntil+0xf0>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d00a      	beq.n	800a798 <vTaskDelayUntil+0x64>
	__asm volatile
 800a782:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a786:	f383 8811 	msr	BASEPRI, r3
 800a78a:	f3bf 8f6f 	isb	sy
 800a78e:	f3bf 8f4f 	dsb	sy
 800a792:	60fb      	str	r3, [r7, #12]
}
 800a794:	bf00      	nop
 800a796:	e7fe      	b.n	800a796 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800a798:	f000 f8e0 	bl	800a95c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800a79c:	4b22      	ldr	r3, [pc, #136]	; (800a828 <vTaskDelayUntil+0xf4>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	683a      	ldr	r2, [r7, #0]
 800a7a8:	4413      	add	r3, r2
 800a7aa:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	6a3a      	ldr	r2, [r7, #32]
 800a7b2:	429a      	cmp	r2, r3
 800a7b4:	d20b      	bcs.n	800a7ce <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	69fa      	ldr	r2, [r7, #28]
 800a7bc:	429a      	cmp	r2, r3
 800a7be:	d211      	bcs.n	800a7e4 <vTaskDelayUntil+0xb0>
 800a7c0:	69fa      	ldr	r2, [r7, #28]
 800a7c2:	6a3b      	ldr	r3, [r7, #32]
 800a7c4:	429a      	cmp	r2, r3
 800a7c6:	d90d      	bls.n	800a7e4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	627b      	str	r3, [r7, #36]	; 0x24
 800a7cc:	e00a      	b.n	800a7e4 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	69fa      	ldr	r2, [r7, #28]
 800a7d4:	429a      	cmp	r2, r3
 800a7d6:	d303      	bcc.n	800a7e0 <vTaskDelayUntil+0xac>
 800a7d8:	69fa      	ldr	r2, [r7, #28]
 800a7da:	6a3b      	ldr	r3, [r7, #32]
 800a7dc:	429a      	cmp	r2, r3
 800a7de:	d901      	bls.n	800a7e4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	69fa      	ldr	r2, [r7, #28]
 800a7e8:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800a7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d006      	beq.n	800a7fe <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800a7f0:	69fa      	ldr	r2, [r7, #28]
 800a7f2:	6a3b      	ldr	r3, [r7, #32]
 800a7f4:	1ad3      	subs	r3, r2, r3
 800a7f6:	2100      	movs	r1, #0
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f000 fe0d 	bl	800b418 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800a7fe:	f000 f8bb 	bl	800a978 <xTaskResumeAll>
 800a802:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a804:	69bb      	ldr	r3, [r7, #24]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d107      	bne.n	800a81a <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800a80a:	4b08      	ldr	r3, [pc, #32]	; (800a82c <vTaskDelayUntil+0xf8>)
 800a80c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a810:	601a      	str	r2, [r3, #0]
 800a812:	f3bf 8f4f 	dsb	sy
 800a816:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a81a:	bf00      	nop
 800a81c:	3728      	adds	r7, #40	; 0x28
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}
 800a822:	bf00      	nop
 800a824:	2000749c 	.word	0x2000749c
 800a828:	20007478 	.word	0x20007478
 800a82c:	e000ed04 	.word	0xe000ed04

0800a830 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a830:	b580      	push	{r7, lr}
 800a832:	b084      	sub	sp, #16
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a838:	2300      	movs	r3, #0
 800a83a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d017      	beq.n	800a872 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a842:	4b13      	ldr	r3, [pc, #76]	; (800a890 <vTaskDelay+0x60>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d00a      	beq.n	800a860 <vTaskDelay+0x30>
	__asm volatile
 800a84a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a84e:	f383 8811 	msr	BASEPRI, r3
 800a852:	f3bf 8f6f 	isb	sy
 800a856:	f3bf 8f4f 	dsb	sy
 800a85a:	60bb      	str	r3, [r7, #8]
}
 800a85c:	bf00      	nop
 800a85e:	e7fe      	b.n	800a85e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a860:	f000 f87c 	bl	800a95c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a864:	2100      	movs	r1, #0
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	f000 fdd6 	bl	800b418 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a86c:	f000 f884 	bl	800a978 <xTaskResumeAll>
 800a870:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d107      	bne.n	800a888 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a878:	4b06      	ldr	r3, [pc, #24]	; (800a894 <vTaskDelay+0x64>)
 800a87a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a87e:	601a      	str	r2, [r3, #0]
 800a880:	f3bf 8f4f 	dsb	sy
 800a884:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a888:	bf00      	nop
 800a88a:	3710      	adds	r7, #16
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}
 800a890:	2000749c 	.word	0x2000749c
 800a894:	e000ed04 	.word	0xe000ed04

0800a898 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b08a      	sub	sp, #40	; 0x28
 800a89c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a8a6:	463a      	mov	r2, r7
 800a8a8:	1d39      	adds	r1, r7, #4
 800a8aa:	f107 0308 	add.w	r3, r7, #8
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	f7f8 fb28 	bl	8002f04 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a8b4:	6839      	ldr	r1, [r7, #0]
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	68ba      	ldr	r2, [r7, #8]
 800a8ba:	9202      	str	r2, [sp, #8]
 800a8bc:	9301      	str	r3, [sp, #4]
 800a8be:	2300      	movs	r3, #0
 800a8c0:	9300      	str	r3, [sp, #0]
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	460a      	mov	r2, r1
 800a8c6:	491f      	ldr	r1, [pc, #124]	; (800a944 <vTaskStartScheduler+0xac>)
 800a8c8:	481f      	ldr	r0, [pc, #124]	; (800a948 <vTaskStartScheduler+0xb0>)
 800a8ca:	f7ff fde5 	bl	800a498 <xTaskCreateStatic>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	4a1e      	ldr	r2, [pc, #120]	; (800a94c <vTaskStartScheduler+0xb4>)
 800a8d2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a8d4:	4b1d      	ldr	r3, [pc, #116]	; (800a94c <vTaskStartScheduler+0xb4>)
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d002      	beq.n	800a8e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a8dc:	2301      	movs	r3, #1
 800a8de:	617b      	str	r3, [r7, #20]
 800a8e0:	e001      	b.n	800a8e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a8e6:	697b      	ldr	r3, [r7, #20]
 800a8e8:	2b01      	cmp	r3, #1
 800a8ea:	d118      	bne.n	800a91e <vTaskStartScheduler+0x86>
	__asm volatile
 800a8ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f0:	f383 8811 	msr	BASEPRI, r3
 800a8f4:	f3bf 8f6f 	isb	sy
 800a8f8:	f3bf 8f4f 	dsb	sy
 800a8fc:	613b      	str	r3, [r7, #16]
}
 800a8fe:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a900:	4b13      	ldr	r3, [pc, #76]	; (800a950 <vTaskStartScheduler+0xb8>)
 800a902:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a906:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a908:	4b12      	ldr	r3, [pc, #72]	; (800a954 <vTaskStartScheduler+0xbc>)
 800a90a:	2201      	movs	r2, #1
 800a90c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a90e:	4b12      	ldr	r3, [pc, #72]	; (800a958 <vTaskStartScheduler+0xc0>)
 800a910:	2200      	movs	r2, #0
 800a912:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800a914:	f7f8 fade 	bl	8002ed4 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a918:	f000 fe72 	bl	800b600 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a91c:	e00e      	b.n	800a93c <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a91e:	697b      	ldr	r3, [r7, #20]
 800a920:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a924:	d10a      	bne.n	800a93c <vTaskStartScheduler+0xa4>
	__asm volatile
 800a926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a92a:	f383 8811 	msr	BASEPRI, r3
 800a92e:	f3bf 8f6f 	isb	sy
 800a932:	f3bf 8f4f 	dsb	sy
 800a936:	60fb      	str	r3, [r7, #12]
}
 800a938:	bf00      	nop
 800a93a:	e7fe      	b.n	800a93a <vTaskStartScheduler+0xa2>
}
 800a93c:	bf00      	nop
 800a93e:	3718      	adds	r7, #24
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}
 800a944:	0800ba60 	.word	0x0800ba60
 800a948:	0800af41 	.word	0x0800af41
 800a94c:	20007498 	.word	0x20007498
 800a950:	20007494 	.word	0x20007494
 800a954:	20007480 	.word	0x20007480
 800a958:	20007478 	.word	0x20007478

0800a95c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a95c:	b480      	push	{r7}
 800a95e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a960:	4b04      	ldr	r3, [pc, #16]	; (800a974 <vTaskSuspendAll+0x18>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	3301      	adds	r3, #1
 800a966:	4a03      	ldr	r2, [pc, #12]	; (800a974 <vTaskSuspendAll+0x18>)
 800a968:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a96a:	bf00      	nop
 800a96c:	46bd      	mov	sp, r7
 800a96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a972:	4770      	bx	lr
 800a974:	2000749c 	.word	0x2000749c

0800a978 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b084      	sub	sp, #16
 800a97c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a97e:	2300      	movs	r3, #0
 800a980:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a982:	2300      	movs	r3, #0
 800a984:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a986:	4b41      	ldr	r3, [pc, #260]	; (800aa8c <xTaskResumeAll+0x114>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d10a      	bne.n	800a9a4 <xTaskResumeAll+0x2c>
	__asm volatile
 800a98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a992:	f383 8811 	msr	BASEPRI, r3
 800a996:	f3bf 8f6f 	isb	sy
 800a99a:	f3bf 8f4f 	dsb	sy
 800a99e:	603b      	str	r3, [r7, #0]
}
 800a9a0:	bf00      	nop
 800a9a2:	e7fe      	b.n	800a9a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a9a4:	f000 fece 	bl	800b744 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a9a8:	4b38      	ldr	r3, [pc, #224]	; (800aa8c <xTaskResumeAll+0x114>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	3b01      	subs	r3, #1
 800a9ae:	4a37      	ldr	r2, [pc, #220]	; (800aa8c <xTaskResumeAll+0x114>)
 800a9b0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a9b2:	4b36      	ldr	r3, [pc, #216]	; (800aa8c <xTaskResumeAll+0x114>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d161      	bne.n	800aa7e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a9ba:	4b35      	ldr	r3, [pc, #212]	; (800aa90 <xTaskResumeAll+0x118>)
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d05d      	beq.n	800aa7e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a9c2:	e02e      	b.n	800aa22 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9c4:	4b33      	ldr	r3, [pc, #204]	; (800aa94 <xTaskResumeAll+0x11c>)
 800a9c6:	68db      	ldr	r3, [r3, #12]
 800a9c8:	68db      	ldr	r3, [r3, #12]
 800a9ca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	3318      	adds	r3, #24
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f7ff f86d 	bl	8009ab0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	3304      	adds	r3, #4
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f7ff f868 	bl	8009ab0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9e4:	2201      	movs	r2, #1
 800a9e6:	409a      	lsls	r2, r3
 800a9e8:	4b2b      	ldr	r3, [pc, #172]	; (800aa98 <xTaskResumeAll+0x120>)
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	4313      	orrs	r3, r2
 800a9ee:	4a2a      	ldr	r2, [pc, #168]	; (800aa98 <xTaskResumeAll+0x120>)
 800a9f0:	6013      	str	r3, [r2, #0]
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9f6:	4613      	mov	r3, r2
 800a9f8:	009b      	lsls	r3, r3, #2
 800a9fa:	4413      	add	r3, r2
 800a9fc:	009b      	lsls	r3, r3, #2
 800a9fe:	4a27      	ldr	r2, [pc, #156]	; (800aa9c <xTaskResumeAll+0x124>)
 800aa00:	441a      	add	r2, r3
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	3304      	adds	r3, #4
 800aa06:	4619      	mov	r1, r3
 800aa08:	4610      	mov	r0, r2
 800aa0a:	f7fe fff4 	bl	80099f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa12:	4b23      	ldr	r3, [pc, #140]	; (800aaa0 <xTaskResumeAll+0x128>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa18:	429a      	cmp	r2, r3
 800aa1a:	d302      	bcc.n	800aa22 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800aa1c:	4b21      	ldr	r3, [pc, #132]	; (800aaa4 <xTaskResumeAll+0x12c>)
 800aa1e:	2201      	movs	r2, #1
 800aa20:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aa22:	4b1c      	ldr	r3, [pc, #112]	; (800aa94 <xTaskResumeAll+0x11c>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d1cc      	bne.n	800a9c4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d001      	beq.n	800aa34 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800aa30:	f000 fb16 	bl	800b060 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800aa34:	4b1c      	ldr	r3, [pc, #112]	; (800aaa8 <xTaskResumeAll+0x130>)
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d010      	beq.n	800aa62 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800aa40:	f000 f846 	bl	800aad0 <xTaskIncrementTick>
 800aa44:	4603      	mov	r3, r0
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d002      	beq.n	800aa50 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800aa4a:	4b16      	ldr	r3, [pc, #88]	; (800aaa4 <xTaskResumeAll+0x12c>)
 800aa4c:	2201      	movs	r2, #1
 800aa4e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	3b01      	subs	r3, #1
 800aa54:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d1f1      	bne.n	800aa40 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800aa5c:	4b12      	ldr	r3, [pc, #72]	; (800aaa8 <xTaskResumeAll+0x130>)
 800aa5e:	2200      	movs	r2, #0
 800aa60:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800aa62:	4b10      	ldr	r3, [pc, #64]	; (800aaa4 <xTaskResumeAll+0x12c>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d009      	beq.n	800aa7e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800aa6e:	4b0f      	ldr	r3, [pc, #60]	; (800aaac <xTaskResumeAll+0x134>)
 800aa70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa74:	601a      	str	r2, [r3, #0]
 800aa76:	f3bf 8f4f 	dsb	sy
 800aa7a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aa7e:	f000 fe91 	bl	800b7a4 <vPortExitCritical>

	return xAlreadyYielded;
 800aa82:	68bb      	ldr	r3, [r7, #8]
}
 800aa84:	4618      	mov	r0, r3
 800aa86:	3710      	adds	r7, #16
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bd80      	pop	{r7, pc}
 800aa8c:	2000749c 	.word	0x2000749c
 800aa90:	20007474 	.word	0x20007474
 800aa94:	20007434 	.word	0x20007434
 800aa98:	2000747c 	.word	0x2000747c
 800aa9c:	20007378 	.word	0x20007378
 800aaa0:	20007374 	.word	0x20007374
 800aaa4:	20007488 	.word	0x20007488
 800aaa8:	20007484 	.word	0x20007484
 800aaac:	e000ed04 	.word	0xe000ed04

0800aab0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800aab0:	b480      	push	{r7}
 800aab2:	b083      	sub	sp, #12
 800aab4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800aab6:	4b05      	ldr	r3, [pc, #20]	; (800aacc <xTaskGetTickCount+0x1c>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800aabc:	687b      	ldr	r3, [r7, #4]
}
 800aabe:	4618      	mov	r0, r3
 800aac0:	370c      	adds	r7, #12
 800aac2:	46bd      	mov	sp, r7
 800aac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac8:	4770      	bx	lr
 800aaca:	bf00      	nop
 800aacc:	20007478 	.word	0x20007478

0800aad0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b086      	sub	sp, #24
 800aad4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800aad6:	2300      	movs	r3, #0
 800aad8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aada:	4b4e      	ldr	r3, [pc, #312]	; (800ac14 <xTaskIncrementTick+0x144>)
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	f040 808e 	bne.w	800ac00 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800aae4:	4b4c      	ldr	r3, [pc, #304]	; (800ac18 <xTaskIncrementTick+0x148>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	3301      	adds	r3, #1
 800aaea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800aaec:	4a4a      	ldr	r2, [pc, #296]	; (800ac18 <xTaskIncrementTick+0x148>)
 800aaee:	693b      	ldr	r3, [r7, #16]
 800aaf0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800aaf2:	693b      	ldr	r3, [r7, #16]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d120      	bne.n	800ab3a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800aaf8:	4b48      	ldr	r3, [pc, #288]	; (800ac1c <xTaskIncrementTick+0x14c>)
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d00a      	beq.n	800ab18 <xTaskIncrementTick+0x48>
	__asm volatile
 800ab02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab06:	f383 8811 	msr	BASEPRI, r3
 800ab0a:	f3bf 8f6f 	isb	sy
 800ab0e:	f3bf 8f4f 	dsb	sy
 800ab12:	603b      	str	r3, [r7, #0]
}
 800ab14:	bf00      	nop
 800ab16:	e7fe      	b.n	800ab16 <xTaskIncrementTick+0x46>
 800ab18:	4b40      	ldr	r3, [pc, #256]	; (800ac1c <xTaskIncrementTick+0x14c>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	60fb      	str	r3, [r7, #12]
 800ab1e:	4b40      	ldr	r3, [pc, #256]	; (800ac20 <xTaskIncrementTick+0x150>)
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	4a3e      	ldr	r2, [pc, #248]	; (800ac1c <xTaskIncrementTick+0x14c>)
 800ab24:	6013      	str	r3, [r2, #0]
 800ab26:	4a3e      	ldr	r2, [pc, #248]	; (800ac20 <xTaskIncrementTick+0x150>)
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	6013      	str	r3, [r2, #0]
 800ab2c:	4b3d      	ldr	r3, [pc, #244]	; (800ac24 <xTaskIncrementTick+0x154>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	3301      	adds	r3, #1
 800ab32:	4a3c      	ldr	r2, [pc, #240]	; (800ac24 <xTaskIncrementTick+0x154>)
 800ab34:	6013      	str	r3, [r2, #0]
 800ab36:	f000 fa93 	bl	800b060 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ab3a:	4b3b      	ldr	r3, [pc, #236]	; (800ac28 <xTaskIncrementTick+0x158>)
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	693a      	ldr	r2, [r7, #16]
 800ab40:	429a      	cmp	r2, r3
 800ab42:	d348      	bcc.n	800abd6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab44:	4b35      	ldr	r3, [pc, #212]	; (800ac1c <xTaskIncrementTick+0x14c>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d104      	bne.n	800ab58 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab4e:	4b36      	ldr	r3, [pc, #216]	; (800ac28 <xTaskIncrementTick+0x158>)
 800ab50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ab54:	601a      	str	r2, [r3, #0]
					break;
 800ab56:	e03e      	b.n	800abd6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab58:	4b30      	ldr	r3, [pc, #192]	; (800ac1c <xTaskIncrementTick+0x14c>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	68db      	ldr	r3, [r3, #12]
 800ab5e:	68db      	ldr	r3, [r3, #12]
 800ab60:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	685b      	ldr	r3, [r3, #4]
 800ab66:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ab68:	693a      	ldr	r2, [r7, #16]
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	429a      	cmp	r2, r3
 800ab6e:	d203      	bcs.n	800ab78 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ab70:	4a2d      	ldr	r2, [pc, #180]	; (800ac28 <xTaskIncrementTick+0x158>)
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ab76:	e02e      	b.n	800abd6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	3304      	adds	r3, #4
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	f7fe ff97 	bl	8009ab0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ab82:	68bb      	ldr	r3, [r7, #8]
 800ab84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d004      	beq.n	800ab94 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ab8a:	68bb      	ldr	r3, [r7, #8]
 800ab8c:	3318      	adds	r3, #24
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f7fe ff8e 	bl	8009ab0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ab94:	68bb      	ldr	r3, [r7, #8]
 800ab96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab98:	2201      	movs	r2, #1
 800ab9a:	409a      	lsls	r2, r3
 800ab9c:	4b23      	ldr	r3, [pc, #140]	; (800ac2c <xTaskIncrementTick+0x15c>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	4313      	orrs	r3, r2
 800aba2:	4a22      	ldr	r2, [pc, #136]	; (800ac2c <xTaskIncrementTick+0x15c>)
 800aba4:	6013      	str	r3, [r2, #0]
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abaa:	4613      	mov	r3, r2
 800abac:	009b      	lsls	r3, r3, #2
 800abae:	4413      	add	r3, r2
 800abb0:	009b      	lsls	r3, r3, #2
 800abb2:	4a1f      	ldr	r2, [pc, #124]	; (800ac30 <xTaskIncrementTick+0x160>)
 800abb4:	441a      	add	r2, r3
 800abb6:	68bb      	ldr	r3, [r7, #8]
 800abb8:	3304      	adds	r3, #4
 800abba:	4619      	mov	r1, r3
 800abbc:	4610      	mov	r0, r2
 800abbe:	f7fe ff1a 	bl	80099f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abc6:	4b1b      	ldr	r3, [pc, #108]	; (800ac34 <xTaskIncrementTick+0x164>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abcc:	429a      	cmp	r2, r3
 800abce:	d3b9      	bcc.n	800ab44 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800abd0:	2301      	movs	r3, #1
 800abd2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800abd4:	e7b6      	b.n	800ab44 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800abd6:	4b17      	ldr	r3, [pc, #92]	; (800ac34 <xTaskIncrementTick+0x164>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abdc:	4914      	ldr	r1, [pc, #80]	; (800ac30 <xTaskIncrementTick+0x160>)
 800abde:	4613      	mov	r3, r2
 800abe0:	009b      	lsls	r3, r3, #2
 800abe2:	4413      	add	r3, r2
 800abe4:	009b      	lsls	r3, r3, #2
 800abe6:	440b      	add	r3, r1
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	2b01      	cmp	r3, #1
 800abec:	d901      	bls.n	800abf2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800abee:	2301      	movs	r3, #1
 800abf0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800abf2:	4b11      	ldr	r3, [pc, #68]	; (800ac38 <xTaskIncrementTick+0x168>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d007      	beq.n	800ac0a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800abfa:	2301      	movs	r3, #1
 800abfc:	617b      	str	r3, [r7, #20]
 800abfe:	e004      	b.n	800ac0a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ac00:	4b0e      	ldr	r3, [pc, #56]	; (800ac3c <xTaskIncrementTick+0x16c>)
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	3301      	adds	r3, #1
 800ac06:	4a0d      	ldr	r2, [pc, #52]	; (800ac3c <xTaskIncrementTick+0x16c>)
 800ac08:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ac0a:	697b      	ldr	r3, [r7, #20]
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	3718      	adds	r7, #24
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}
 800ac14:	2000749c 	.word	0x2000749c
 800ac18:	20007478 	.word	0x20007478
 800ac1c:	2000742c 	.word	0x2000742c
 800ac20:	20007430 	.word	0x20007430
 800ac24:	2000748c 	.word	0x2000748c
 800ac28:	20007494 	.word	0x20007494
 800ac2c:	2000747c 	.word	0x2000747c
 800ac30:	20007378 	.word	0x20007378
 800ac34:	20007374 	.word	0x20007374
 800ac38:	20007488 	.word	0x20007488
 800ac3c:	20007484 	.word	0x20007484

0800ac40 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b086      	sub	sp, #24
 800ac44:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ac46:	4b32      	ldr	r3, [pc, #200]	; (800ad10 <vTaskSwitchContext+0xd0>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d003      	beq.n	800ac56 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ac4e:	4b31      	ldr	r3, [pc, #196]	; (800ad14 <vTaskSwitchContext+0xd4>)
 800ac50:	2201      	movs	r2, #1
 800ac52:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ac54:	e058      	b.n	800ad08 <vTaskSwitchContext+0xc8>
		xYieldPending = pdFALSE;
 800ac56:	4b2f      	ldr	r3, [pc, #188]	; (800ad14 <vTaskSwitchContext+0xd4>)
 800ac58:	2200      	movs	r2, #0
 800ac5a:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800ac5c:	f7f8 f946 	bl	8002eec <getRunTimeCounterValue>
 800ac60:	4603      	mov	r3, r0
 800ac62:	4a2d      	ldr	r2, [pc, #180]	; (800ad18 <vTaskSwitchContext+0xd8>)
 800ac64:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800ac66:	4b2c      	ldr	r3, [pc, #176]	; (800ad18 <vTaskSwitchContext+0xd8>)
 800ac68:	681a      	ldr	r2, [r3, #0]
 800ac6a:	4b2c      	ldr	r3, [pc, #176]	; (800ad1c <vTaskSwitchContext+0xdc>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	429a      	cmp	r2, r3
 800ac70:	d909      	bls.n	800ac86 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800ac72:	4b2b      	ldr	r3, [pc, #172]	; (800ad20 <vTaskSwitchContext+0xe0>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800ac78:	4a27      	ldr	r2, [pc, #156]	; (800ad18 <vTaskSwitchContext+0xd8>)
 800ac7a:	6810      	ldr	r0, [r2, #0]
 800ac7c:	4a27      	ldr	r2, [pc, #156]	; (800ad1c <vTaskSwitchContext+0xdc>)
 800ac7e:	6812      	ldr	r2, [r2, #0]
 800ac80:	1a82      	subs	r2, r0, r2
 800ac82:	440a      	add	r2, r1
 800ac84:	64da      	str	r2, [r3, #76]	; 0x4c
			ulTaskSwitchedInTime = ulTotalRunTime;
 800ac86:	4b24      	ldr	r3, [pc, #144]	; (800ad18 <vTaskSwitchContext+0xd8>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	4a24      	ldr	r2, [pc, #144]	; (800ad1c <vTaskSwitchContext+0xdc>)
 800ac8c:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac8e:	4b25      	ldr	r3, [pc, #148]	; (800ad24 <vTaskSwitchContext+0xe4>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	fab3 f383 	clz	r3, r3
 800ac9a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800ac9c:	7afb      	ldrb	r3, [r7, #11]
 800ac9e:	f1c3 031f 	rsb	r3, r3, #31
 800aca2:	617b      	str	r3, [r7, #20]
 800aca4:	4920      	ldr	r1, [pc, #128]	; (800ad28 <vTaskSwitchContext+0xe8>)
 800aca6:	697a      	ldr	r2, [r7, #20]
 800aca8:	4613      	mov	r3, r2
 800acaa:	009b      	lsls	r3, r3, #2
 800acac:	4413      	add	r3, r2
 800acae:	009b      	lsls	r3, r3, #2
 800acb0:	440b      	add	r3, r1
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d10a      	bne.n	800acce <vTaskSwitchContext+0x8e>
	__asm volatile
 800acb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acbc:	f383 8811 	msr	BASEPRI, r3
 800acc0:	f3bf 8f6f 	isb	sy
 800acc4:	f3bf 8f4f 	dsb	sy
 800acc8:	607b      	str	r3, [r7, #4]
}
 800acca:	bf00      	nop
 800accc:	e7fe      	b.n	800accc <vTaskSwitchContext+0x8c>
 800acce:	697a      	ldr	r2, [r7, #20]
 800acd0:	4613      	mov	r3, r2
 800acd2:	009b      	lsls	r3, r3, #2
 800acd4:	4413      	add	r3, r2
 800acd6:	009b      	lsls	r3, r3, #2
 800acd8:	4a13      	ldr	r2, [pc, #76]	; (800ad28 <vTaskSwitchContext+0xe8>)
 800acda:	4413      	add	r3, r2
 800acdc:	613b      	str	r3, [r7, #16]
 800acde:	693b      	ldr	r3, [r7, #16]
 800ace0:	685b      	ldr	r3, [r3, #4]
 800ace2:	685a      	ldr	r2, [r3, #4]
 800ace4:	693b      	ldr	r3, [r7, #16]
 800ace6:	605a      	str	r2, [r3, #4]
 800ace8:	693b      	ldr	r3, [r7, #16]
 800acea:	685a      	ldr	r2, [r3, #4]
 800acec:	693b      	ldr	r3, [r7, #16]
 800acee:	3308      	adds	r3, #8
 800acf0:	429a      	cmp	r2, r3
 800acf2:	d104      	bne.n	800acfe <vTaskSwitchContext+0xbe>
 800acf4:	693b      	ldr	r3, [r7, #16]
 800acf6:	685b      	ldr	r3, [r3, #4]
 800acf8:	685a      	ldr	r2, [r3, #4]
 800acfa:	693b      	ldr	r3, [r7, #16]
 800acfc:	605a      	str	r2, [r3, #4]
 800acfe:	693b      	ldr	r3, [r7, #16]
 800ad00:	685b      	ldr	r3, [r3, #4]
 800ad02:	68db      	ldr	r3, [r3, #12]
 800ad04:	4a06      	ldr	r2, [pc, #24]	; (800ad20 <vTaskSwitchContext+0xe0>)
 800ad06:	6013      	str	r3, [r2, #0]
}
 800ad08:	bf00      	nop
 800ad0a:	3718      	adds	r7, #24
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}
 800ad10:	2000749c 	.word	0x2000749c
 800ad14:	20007488 	.word	0x20007488
 800ad18:	200074a4 	.word	0x200074a4
 800ad1c:	200074a0 	.word	0x200074a0
 800ad20:	20007374 	.word	0x20007374
 800ad24:	2000747c 	.word	0x2000747c
 800ad28:	20007378 	.word	0x20007378

0800ad2c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b084      	sub	sp, #16
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
 800ad34:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d10a      	bne.n	800ad52 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ad3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad40:	f383 8811 	msr	BASEPRI, r3
 800ad44:	f3bf 8f6f 	isb	sy
 800ad48:	f3bf 8f4f 	dsb	sy
 800ad4c:	60fb      	str	r3, [r7, #12]
}
 800ad4e:	bf00      	nop
 800ad50:	e7fe      	b.n	800ad50 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ad52:	4b07      	ldr	r3, [pc, #28]	; (800ad70 <vTaskPlaceOnEventList+0x44>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	3318      	adds	r3, #24
 800ad58:	4619      	mov	r1, r3
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	f7fe fe6f 	bl	8009a3e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ad60:	2101      	movs	r1, #1
 800ad62:	6838      	ldr	r0, [r7, #0]
 800ad64:	f000 fb58 	bl	800b418 <prvAddCurrentTaskToDelayedList>
}
 800ad68:	bf00      	nop
 800ad6a:	3710      	adds	r7, #16
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}
 800ad70:	20007374 	.word	0x20007374

0800ad74 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b086      	sub	sp, #24
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	68db      	ldr	r3, [r3, #12]
 800ad80:	68db      	ldr	r3, [r3, #12]
 800ad82:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ad84:	693b      	ldr	r3, [r7, #16]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d10a      	bne.n	800ada0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ad8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad8e:	f383 8811 	msr	BASEPRI, r3
 800ad92:	f3bf 8f6f 	isb	sy
 800ad96:	f3bf 8f4f 	dsb	sy
 800ad9a:	60fb      	str	r3, [r7, #12]
}
 800ad9c:	bf00      	nop
 800ad9e:	e7fe      	b.n	800ad9e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ada0:	693b      	ldr	r3, [r7, #16]
 800ada2:	3318      	adds	r3, #24
 800ada4:	4618      	mov	r0, r3
 800ada6:	f7fe fe83 	bl	8009ab0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800adaa:	4b1d      	ldr	r3, [pc, #116]	; (800ae20 <xTaskRemoveFromEventList+0xac>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d11c      	bne.n	800adec <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800adb2:	693b      	ldr	r3, [r7, #16]
 800adb4:	3304      	adds	r3, #4
 800adb6:	4618      	mov	r0, r3
 800adb8:	f7fe fe7a 	bl	8009ab0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800adbc:	693b      	ldr	r3, [r7, #16]
 800adbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adc0:	2201      	movs	r2, #1
 800adc2:	409a      	lsls	r2, r3
 800adc4:	4b17      	ldr	r3, [pc, #92]	; (800ae24 <xTaskRemoveFromEventList+0xb0>)
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	4313      	orrs	r3, r2
 800adca:	4a16      	ldr	r2, [pc, #88]	; (800ae24 <xTaskRemoveFromEventList+0xb0>)
 800adcc:	6013      	str	r3, [r2, #0]
 800adce:	693b      	ldr	r3, [r7, #16]
 800add0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800add2:	4613      	mov	r3, r2
 800add4:	009b      	lsls	r3, r3, #2
 800add6:	4413      	add	r3, r2
 800add8:	009b      	lsls	r3, r3, #2
 800adda:	4a13      	ldr	r2, [pc, #76]	; (800ae28 <xTaskRemoveFromEventList+0xb4>)
 800addc:	441a      	add	r2, r3
 800adde:	693b      	ldr	r3, [r7, #16]
 800ade0:	3304      	adds	r3, #4
 800ade2:	4619      	mov	r1, r3
 800ade4:	4610      	mov	r0, r2
 800ade6:	f7fe fe06 	bl	80099f6 <vListInsertEnd>
 800adea:	e005      	b.n	800adf8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800adec:	693b      	ldr	r3, [r7, #16]
 800adee:	3318      	adds	r3, #24
 800adf0:	4619      	mov	r1, r3
 800adf2:	480e      	ldr	r0, [pc, #56]	; (800ae2c <xTaskRemoveFromEventList+0xb8>)
 800adf4:	f7fe fdff 	bl	80099f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800adf8:	693b      	ldr	r3, [r7, #16]
 800adfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adfc:	4b0c      	ldr	r3, [pc, #48]	; (800ae30 <xTaskRemoveFromEventList+0xbc>)
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae02:	429a      	cmp	r2, r3
 800ae04:	d905      	bls.n	800ae12 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ae06:	2301      	movs	r3, #1
 800ae08:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ae0a:	4b0a      	ldr	r3, [pc, #40]	; (800ae34 <xTaskRemoveFromEventList+0xc0>)
 800ae0c:	2201      	movs	r2, #1
 800ae0e:	601a      	str	r2, [r3, #0]
 800ae10:	e001      	b.n	800ae16 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800ae12:	2300      	movs	r3, #0
 800ae14:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ae16:	697b      	ldr	r3, [r7, #20]
}
 800ae18:	4618      	mov	r0, r3
 800ae1a:	3718      	adds	r7, #24
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bd80      	pop	{r7, pc}
 800ae20:	2000749c 	.word	0x2000749c
 800ae24:	2000747c 	.word	0x2000747c
 800ae28:	20007378 	.word	0x20007378
 800ae2c:	20007434 	.word	0x20007434
 800ae30:	20007374 	.word	0x20007374
 800ae34:	20007488 	.word	0x20007488

0800ae38 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ae38:	b480      	push	{r7}
 800ae3a:	b083      	sub	sp, #12
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ae40:	4b06      	ldr	r3, [pc, #24]	; (800ae5c <vTaskInternalSetTimeOutState+0x24>)
 800ae42:	681a      	ldr	r2, [r3, #0]
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ae48:	4b05      	ldr	r3, [pc, #20]	; (800ae60 <vTaskInternalSetTimeOutState+0x28>)
 800ae4a:	681a      	ldr	r2, [r3, #0]
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	605a      	str	r2, [r3, #4]
}
 800ae50:	bf00      	nop
 800ae52:	370c      	adds	r7, #12
 800ae54:	46bd      	mov	sp, r7
 800ae56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5a:	4770      	bx	lr
 800ae5c:	2000748c 	.word	0x2000748c
 800ae60:	20007478 	.word	0x20007478

0800ae64 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b088      	sub	sp, #32
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
 800ae6c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d10a      	bne.n	800ae8a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ae74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae78:	f383 8811 	msr	BASEPRI, r3
 800ae7c:	f3bf 8f6f 	isb	sy
 800ae80:	f3bf 8f4f 	dsb	sy
 800ae84:	613b      	str	r3, [r7, #16]
}
 800ae86:	bf00      	nop
 800ae88:	e7fe      	b.n	800ae88 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d10a      	bne.n	800aea6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ae90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae94:	f383 8811 	msr	BASEPRI, r3
 800ae98:	f3bf 8f6f 	isb	sy
 800ae9c:	f3bf 8f4f 	dsb	sy
 800aea0:	60fb      	str	r3, [r7, #12]
}
 800aea2:	bf00      	nop
 800aea4:	e7fe      	b.n	800aea4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800aea6:	f000 fc4d 	bl	800b744 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800aeaa:	4b1d      	ldr	r3, [pc, #116]	; (800af20 <xTaskCheckForTimeOut+0xbc>)
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	685b      	ldr	r3, [r3, #4]
 800aeb4:	69ba      	ldr	r2, [r7, #24]
 800aeb6:	1ad3      	subs	r3, r2, r3
 800aeb8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aec2:	d102      	bne.n	800aeca <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800aec4:	2300      	movs	r3, #0
 800aec6:	61fb      	str	r3, [r7, #28]
 800aec8:	e023      	b.n	800af12 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681a      	ldr	r2, [r3, #0]
 800aece:	4b15      	ldr	r3, [pc, #84]	; (800af24 <xTaskCheckForTimeOut+0xc0>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	429a      	cmp	r2, r3
 800aed4:	d007      	beq.n	800aee6 <xTaskCheckForTimeOut+0x82>
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	685b      	ldr	r3, [r3, #4]
 800aeda:	69ba      	ldr	r2, [r7, #24]
 800aedc:	429a      	cmp	r2, r3
 800aede:	d302      	bcc.n	800aee6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800aee0:	2301      	movs	r3, #1
 800aee2:	61fb      	str	r3, [r7, #28]
 800aee4:	e015      	b.n	800af12 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	697a      	ldr	r2, [r7, #20]
 800aeec:	429a      	cmp	r2, r3
 800aeee:	d20b      	bcs.n	800af08 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	681a      	ldr	r2, [r3, #0]
 800aef4:	697b      	ldr	r3, [r7, #20]
 800aef6:	1ad2      	subs	r2, r2, r3
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f7ff ff9b 	bl	800ae38 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800af02:	2300      	movs	r3, #0
 800af04:	61fb      	str	r3, [r7, #28]
 800af06:	e004      	b.n	800af12 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	2200      	movs	r2, #0
 800af0c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800af0e:	2301      	movs	r3, #1
 800af10:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800af12:	f000 fc47 	bl	800b7a4 <vPortExitCritical>

	return xReturn;
 800af16:	69fb      	ldr	r3, [r7, #28]
}
 800af18:	4618      	mov	r0, r3
 800af1a:	3720      	adds	r7, #32
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}
 800af20:	20007478 	.word	0x20007478
 800af24:	2000748c 	.word	0x2000748c

0800af28 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800af28:	b480      	push	{r7}
 800af2a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800af2c:	4b03      	ldr	r3, [pc, #12]	; (800af3c <vTaskMissedYield+0x14>)
 800af2e:	2201      	movs	r2, #1
 800af30:	601a      	str	r2, [r3, #0]
}
 800af32:	bf00      	nop
 800af34:	46bd      	mov	sp, r7
 800af36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3a:	4770      	bx	lr
 800af3c:	20007488 	.word	0x20007488

0800af40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b082      	sub	sp, #8
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800af48:	f000 f852 	bl	800aff0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800af4c:	4b06      	ldr	r3, [pc, #24]	; (800af68 <prvIdleTask+0x28>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	2b01      	cmp	r3, #1
 800af52:	d9f9      	bls.n	800af48 <prvIdleTask+0x8>
			{
				taskYIELD();
 800af54:	4b05      	ldr	r3, [pc, #20]	; (800af6c <prvIdleTask+0x2c>)
 800af56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af5a:	601a      	str	r2, [r3, #0]
 800af5c:	f3bf 8f4f 	dsb	sy
 800af60:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800af64:	e7f0      	b.n	800af48 <prvIdleTask+0x8>
 800af66:	bf00      	nop
 800af68:	20007378 	.word	0x20007378
 800af6c:	e000ed04 	.word	0xe000ed04

0800af70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b082      	sub	sp, #8
 800af74:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800af76:	2300      	movs	r3, #0
 800af78:	607b      	str	r3, [r7, #4]
 800af7a:	e00c      	b.n	800af96 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800af7c:	687a      	ldr	r2, [r7, #4]
 800af7e:	4613      	mov	r3, r2
 800af80:	009b      	lsls	r3, r3, #2
 800af82:	4413      	add	r3, r2
 800af84:	009b      	lsls	r3, r3, #2
 800af86:	4a12      	ldr	r2, [pc, #72]	; (800afd0 <prvInitialiseTaskLists+0x60>)
 800af88:	4413      	add	r3, r2
 800af8a:	4618      	mov	r0, r3
 800af8c:	f7fe fd06 	bl	800999c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	3301      	adds	r3, #1
 800af94:	607b      	str	r3, [r7, #4]
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2b06      	cmp	r3, #6
 800af9a:	d9ef      	bls.n	800af7c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800af9c:	480d      	ldr	r0, [pc, #52]	; (800afd4 <prvInitialiseTaskLists+0x64>)
 800af9e:	f7fe fcfd 	bl	800999c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800afa2:	480d      	ldr	r0, [pc, #52]	; (800afd8 <prvInitialiseTaskLists+0x68>)
 800afa4:	f7fe fcfa 	bl	800999c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800afa8:	480c      	ldr	r0, [pc, #48]	; (800afdc <prvInitialiseTaskLists+0x6c>)
 800afaa:	f7fe fcf7 	bl	800999c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800afae:	480c      	ldr	r0, [pc, #48]	; (800afe0 <prvInitialiseTaskLists+0x70>)
 800afb0:	f7fe fcf4 	bl	800999c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800afb4:	480b      	ldr	r0, [pc, #44]	; (800afe4 <prvInitialiseTaskLists+0x74>)
 800afb6:	f7fe fcf1 	bl	800999c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800afba:	4b0b      	ldr	r3, [pc, #44]	; (800afe8 <prvInitialiseTaskLists+0x78>)
 800afbc:	4a05      	ldr	r2, [pc, #20]	; (800afd4 <prvInitialiseTaskLists+0x64>)
 800afbe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800afc0:	4b0a      	ldr	r3, [pc, #40]	; (800afec <prvInitialiseTaskLists+0x7c>)
 800afc2:	4a05      	ldr	r2, [pc, #20]	; (800afd8 <prvInitialiseTaskLists+0x68>)
 800afc4:	601a      	str	r2, [r3, #0]
}
 800afc6:	bf00      	nop
 800afc8:	3708      	adds	r7, #8
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}
 800afce:	bf00      	nop
 800afd0:	20007378 	.word	0x20007378
 800afd4:	20007404 	.word	0x20007404
 800afd8:	20007418 	.word	0x20007418
 800afdc:	20007434 	.word	0x20007434
 800afe0:	20007448 	.word	0x20007448
 800afe4:	20007460 	.word	0x20007460
 800afe8:	2000742c 	.word	0x2000742c
 800afec:	20007430 	.word	0x20007430

0800aff0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b082      	sub	sp, #8
 800aff4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aff6:	e019      	b.n	800b02c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800aff8:	f000 fba4 	bl	800b744 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800affc:	4b10      	ldr	r3, [pc, #64]	; (800b040 <prvCheckTasksWaitingTermination+0x50>)
 800affe:	68db      	ldr	r3, [r3, #12]
 800b000:	68db      	ldr	r3, [r3, #12]
 800b002:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	3304      	adds	r3, #4
 800b008:	4618      	mov	r0, r3
 800b00a:	f7fe fd51 	bl	8009ab0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b00e:	4b0d      	ldr	r3, [pc, #52]	; (800b044 <prvCheckTasksWaitingTermination+0x54>)
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	3b01      	subs	r3, #1
 800b014:	4a0b      	ldr	r2, [pc, #44]	; (800b044 <prvCheckTasksWaitingTermination+0x54>)
 800b016:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b018:	4b0b      	ldr	r3, [pc, #44]	; (800b048 <prvCheckTasksWaitingTermination+0x58>)
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	3b01      	subs	r3, #1
 800b01e:	4a0a      	ldr	r2, [pc, #40]	; (800b048 <prvCheckTasksWaitingTermination+0x58>)
 800b020:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b022:	f000 fbbf 	bl	800b7a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f000 f810 	bl	800b04c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b02c:	4b06      	ldr	r3, [pc, #24]	; (800b048 <prvCheckTasksWaitingTermination+0x58>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d1e1      	bne.n	800aff8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b034:	bf00      	nop
 800b036:	bf00      	nop
 800b038:	3708      	adds	r7, #8
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}
 800b03e:	bf00      	nop
 800b040:	20007448 	.word	0x20007448
 800b044:	20007474 	.word	0x20007474
 800b048:	2000745c 	.word	0x2000745c

0800b04c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b04c:	b480      	push	{r7}
 800b04e:	b083      	sub	sp, #12
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b054:	bf00      	nop
 800b056:	370c      	adds	r7, #12
 800b058:	46bd      	mov	sp, r7
 800b05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05e:	4770      	bx	lr

0800b060 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b060:	b480      	push	{r7}
 800b062:	b083      	sub	sp, #12
 800b064:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b066:	4b0c      	ldr	r3, [pc, #48]	; (800b098 <prvResetNextTaskUnblockTime+0x38>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d104      	bne.n	800b07a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b070:	4b0a      	ldr	r3, [pc, #40]	; (800b09c <prvResetNextTaskUnblockTime+0x3c>)
 800b072:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b076:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b078:	e008      	b.n	800b08c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b07a:	4b07      	ldr	r3, [pc, #28]	; (800b098 <prvResetNextTaskUnblockTime+0x38>)
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	68db      	ldr	r3, [r3, #12]
 800b080:	68db      	ldr	r3, [r3, #12]
 800b082:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	685b      	ldr	r3, [r3, #4]
 800b088:	4a04      	ldr	r2, [pc, #16]	; (800b09c <prvResetNextTaskUnblockTime+0x3c>)
 800b08a:	6013      	str	r3, [r2, #0]
}
 800b08c:	bf00      	nop
 800b08e:	370c      	adds	r7, #12
 800b090:	46bd      	mov	sp, r7
 800b092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b096:	4770      	bx	lr
 800b098:	2000742c 	.word	0x2000742c
 800b09c:	20007494 	.word	0x20007494

0800b0a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b0a0:	b480      	push	{r7}
 800b0a2:	b083      	sub	sp, #12
 800b0a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b0a6:	4b0b      	ldr	r3, [pc, #44]	; (800b0d4 <xTaskGetSchedulerState+0x34>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d102      	bne.n	800b0b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	607b      	str	r3, [r7, #4]
 800b0b2:	e008      	b.n	800b0c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b0b4:	4b08      	ldr	r3, [pc, #32]	; (800b0d8 <xTaskGetSchedulerState+0x38>)
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d102      	bne.n	800b0c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b0bc:	2302      	movs	r3, #2
 800b0be:	607b      	str	r3, [r7, #4]
 800b0c0:	e001      	b.n	800b0c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b0c6:	687b      	ldr	r3, [r7, #4]
	}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	370c      	adds	r7, #12
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d2:	4770      	bx	lr
 800b0d4:	20007480 	.word	0x20007480
 800b0d8:	2000749c 	.word	0x2000749c

0800b0dc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b084      	sub	sp, #16
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d05e      	beq.n	800b1b0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0f6:	4b31      	ldr	r3, [pc, #196]	; (800b1bc <xTaskPriorityInherit+0xe0>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	d24e      	bcs.n	800b19e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	699b      	ldr	r3, [r3, #24]
 800b104:	2b00      	cmp	r3, #0
 800b106:	db06      	blt.n	800b116 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b108:	4b2c      	ldr	r3, [pc, #176]	; (800b1bc <xTaskPriorityInherit+0xe0>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b10e:	f1c3 0207 	rsb	r2, r3, #7
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	6959      	ldr	r1, [r3, #20]
 800b11a:	68bb      	ldr	r3, [r7, #8]
 800b11c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b11e:	4613      	mov	r3, r2
 800b120:	009b      	lsls	r3, r3, #2
 800b122:	4413      	add	r3, r2
 800b124:	009b      	lsls	r3, r3, #2
 800b126:	4a26      	ldr	r2, [pc, #152]	; (800b1c0 <xTaskPriorityInherit+0xe4>)
 800b128:	4413      	add	r3, r2
 800b12a:	4299      	cmp	r1, r3
 800b12c:	d12f      	bne.n	800b18e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	3304      	adds	r3, #4
 800b132:	4618      	mov	r0, r3
 800b134:	f7fe fcbc 	bl	8009ab0 <uxListRemove>
 800b138:	4603      	mov	r3, r0
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d10a      	bne.n	800b154 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b142:	2201      	movs	r2, #1
 800b144:	fa02 f303 	lsl.w	r3, r2, r3
 800b148:	43da      	mvns	r2, r3
 800b14a:	4b1e      	ldr	r3, [pc, #120]	; (800b1c4 <xTaskPriorityInherit+0xe8>)
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	4013      	ands	r3, r2
 800b150:	4a1c      	ldr	r2, [pc, #112]	; (800b1c4 <xTaskPriorityInherit+0xe8>)
 800b152:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b154:	4b19      	ldr	r3, [pc, #100]	; (800b1bc <xTaskPriorityInherit+0xe0>)
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b15a:	68bb      	ldr	r3, [r7, #8]
 800b15c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b15e:	68bb      	ldr	r3, [r7, #8]
 800b160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b162:	2201      	movs	r2, #1
 800b164:	409a      	lsls	r2, r3
 800b166:	4b17      	ldr	r3, [pc, #92]	; (800b1c4 <xTaskPriorityInherit+0xe8>)
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	4313      	orrs	r3, r2
 800b16c:	4a15      	ldr	r2, [pc, #84]	; (800b1c4 <xTaskPriorityInherit+0xe8>)
 800b16e:	6013      	str	r3, [r2, #0]
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b174:	4613      	mov	r3, r2
 800b176:	009b      	lsls	r3, r3, #2
 800b178:	4413      	add	r3, r2
 800b17a:	009b      	lsls	r3, r3, #2
 800b17c:	4a10      	ldr	r2, [pc, #64]	; (800b1c0 <xTaskPriorityInherit+0xe4>)
 800b17e:	441a      	add	r2, r3
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	3304      	adds	r3, #4
 800b184:	4619      	mov	r1, r3
 800b186:	4610      	mov	r0, r2
 800b188:	f7fe fc35 	bl	80099f6 <vListInsertEnd>
 800b18c:	e004      	b.n	800b198 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b18e:	4b0b      	ldr	r3, [pc, #44]	; (800b1bc <xTaskPriorityInherit+0xe0>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b194:	68bb      	ldr	r3, [r7, #8]
 800b196:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b198:	2301      	movs	r3, #1
 800b19a:	60fb      	str	r3, [r7, #12]
 800b19c:	e008      	b.n	800b1b0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b19e:	68bb      	ldr	r3, [r7, #8]
 800b1a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b1a2:	4b06      	ldr	r3, [pc, #24]	; (800b1bc <xTaskPriorityInherit+0xe0>)
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1a8:	429a      	cmp	r2, r3
 800b1aa:	d201      	bcs.n	800b1b0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
	}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3710      	adds	r7, #16
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}
 800b1ba:	bf00      	nop
 800b1bc:	20007374 	.word	0x20007374
 800b1c0:	20007378 	.word	0x20007378
 800b1c4:	2000747c 	.word	0x2000747c

0800b1c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b086      	sub	sp, #24
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d06e      	beq.n	800b2bc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b1de:	4b3a      	ldr	r3, [pc, #232]	; (800b2c8 <xTaskPriorityDisinherit+0x100>)
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	693a      	ldr	r2, [r7, #16]
 800b1e4:	429a      	cmp	r2, r3
 800b1e6:	d00a      	beq.n	800b1fe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b1e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ec:	f383 8811 	msr	BASEPRI, r3
 800b1f0:	f3bf 8f6f 	isb	sy
 800b1f4:	f3bf 8f4f 	dsb	sy
 800b1f8:	60fb      	str	r3, [r7, #12]
}
 800b1fa:	bf00      	nop
 800b1fc:	e7fe      	b.n	800b1fc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b1fe:	693b      	ldr	r3, [r7, #16]
 800b200:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b202:	2b00      	cmp	r3, #0
 800b204:	d10a      	bne.n	800b21c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b20a:	f383 8811 	msr	BASEPRI, r3
 800b20e:	f3bf 8f6f 	isb	sy
 800b212:	f3bf 8f4f 	dsb	sy
 800b216:	60bb      	str	r3, [r7, #8]
}
 800b218:	bf00      	nop
 800b21a:	e7fe      	b.n	800b21a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b21c:	693b      	ldr	r3, [r7, #16]
 800b21e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b220:	1e5a      	subs	r2, r3, #1
 800b222:	693b      	ldr	r3, [r7, #16]
 800b224:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b226:	693b      	ldr	r3, [r7, #16]
 800b228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b22a:	693b      	ldr	r3, [r7, #16]
 800b22c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b22e:	429a      	cmp	r2, r3
 800b230:	d044      	beq.n	800b2bc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b232:	693b      	ldr	r3, [r7, #16]
 800b234:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b236:	2b00      	cmp	r3, #0
 800b238:	d140      	bne.n	800b2bc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b23a:	693b      	ldr	r3, [r7, #16]
 800b23c:	3304      	adds	r3, #4
 800b23e:	4618      	mov	r0, r3
 800b240:	f7fe fc36 	bl	8009ab0 <uxListRemove>
 800b244:	4603      	mov	r3, r0
 800b246:	2b00      	cmp	r3, #0
 800b248:	d115      	bne.n	800b276 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b24a:	693b      	ldr	r3, [r7, #16]
 800b24c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b24e:	491f      	ldr	r1, [pc, #124]	; (800b2cc <xTaskPriorityDisinherit+0x104>)
 800b250:	4613      	mov	r3, r2
 800b252:	009b      	lsls	r3, r3, #2
 800b254:	4413      	add	r3, r2
 800b256:	009b      	lsls	r3, r3, #2
 800b258:	440b      	add	r3, r1
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d10a      	bne.n	800b276 <xTaskPriorityDisinherit+0xae>
 800b260:	693b      	ldr	r3, [r7, #16]
 800b262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b264:	2201      	movs	r2, #1
 800b266:	fa02 f303 	lsl.w	r3, r2, r3
 800b26a:	43da      	mvns	r2, r3
 800b26c:	4b18      	ldr	r3, [pc, #96]	; (800b2d0 <xTaskPriorityDisinherit+0x108>)
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	4013      	ands	r3, r2
 800b272:	4a17      	ldr	r2, [pc, #92]	; (800b2d0 <xTaskPriorityDisinherit+0x108>)
 800b274:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b27a:	693b      	ldr	r3, [r7, #16]
 800b27c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b27e:	693b      	ldr	r3, [r7, #16]
 800b280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b282:	f1c3 0207 	rsb	r2, r3, #7
 800b286:	693b      	ldr	r3, [r7, #16]
 800b288:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b28a:	693b      	ldr	r3, [r7, #16]
 800b28c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b28e:	2201      	movs	r2, #1
 800b290:	409a      	lsls	r2, r3
 800b292:	4b0f      	ldr	r3, [pc, #60]	; (800b2d0 <xTaskPriorityDisinherit+0x108>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	4313      	orrs	r3, r2
 800b298:	4a0d      	ldr	r2, [pc, #52]	; (800b2d0 <xTaskPriorityDisinherit+0x108>)
 800b29a:	6013      	str	r3, [r2, #0]
 800b29c:	693b      	ldr	r3, [r7, #16]
 800b29e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2a0:	4613      	mov	r3, r2
 800b2a2:	009b      	lsls	r3, r3, #2
 800b2a4:	4413      	add	r3, r2
 800b2a6:	009b      	lsls	r3, r3, #2
 800b2a8:	4a08      	ldr	r2, [pc, #32]	; (800b2cc <xTaskPriorityDisinherit+0x104>)
 800b2aa:	441a      	add	r2, r3
 800b2ac:	693b      	ldr	r3, [r7, #16]
 800b2ae:	3304      	adds	r3, #4
 800b2b0:	4619      	mov	r1, r3
 800b2b2:	4610      	mov	r0, r2
 800b2b4:	f7fe fb9f 	bl	80099f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b2b8:	2301      	movs	r3, #1
 800b2ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b2bc:	697b      	ldr	r3, [r7, #20]
	}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	3718      	adds	r7, #24
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd80      	pop	{r7, pc}
 800b2c6:	bf00      	nop
 800b2c8:	20007374 	.word	0x20007374
 800b2cc:	20007378 	.word	0x20007378
 800b2d0:	2000747c 	.word	0x2000747c

0800b2d4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b088      	sub	sp, #32
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
 800b2dc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d077      	beq.n	800b3dc <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b2ec:	69bb      	ldr	r3, [r7, #24]
 800b2ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d10a      	bne.n	800b30a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800b2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2f8:	f383 8811 	msr	BASEPRI, r3
 800b2fc:	f3bf 8f6f 	isb	sy
 800b300:	f3bf 8f4f 	dsb	sy
 800b304:	60fb      	str	r3, [r7, #12]
}
 800b306:	bf00      	nop
 800b308:	e7fe      	b.n	800b308 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b30a:	69bb      	ldr	r3, [r7, #24]
 800b30c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b30e:	683a      	ldr	r2, [r7, #0]
 800b310:	429a      	cmp	r2, r3
 800b312:	d902      	bls.n	800b31a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	61fb      	str	r3, [r7, #28]
 800b318:	e002      	b.n	800b320 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b31a:	69bb      	ldr	r3, [r7, #24]
 800b31c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b31e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b320:	69bb      	ldr	r3, [r7, #24]
 800b322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b324:	69fa      	ldr	r2, [r7, #28]
 800b326:	429a      	cmp	r2, r3
 800b328:	d058      	beq.n	800b3dc <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b32a:	69bb      	ldr	r3, [r7, #24]
 800b32c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b32e:	697a      	ldr	r2, [r7, #20]
 800b330:	429a      	cmp	r2, r3
 800b332:	d153      	bne.n	800b3dc <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b334:	4b2b      	ldr	r3, [pc, #172]	; (800b3e4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	69ba      	ldr	r2, [r7, #24]
 800b33a:	429a      	cmp	r2, r3
 800b33c:	d10a      	bne.n	800b354 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800b33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b342:	f383 8811 	msr	BASEPRI, r3
 800b346:	f3bf 8f6f 	isb	sy
 800b34a:	f3bf 8f4f 	dsb	sy
 800b34e:	60bb      	str	r3, [r7, #8]
}
 800b350:	bf00      	nop
 800b352:	e7fe      	b.n	800b352 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b354:	69bb      	ldr	r3, [r7, #24]
 800b356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b358:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b35a:	69bb      	ldr	r3, [r7, #24]
 800b35c:	69fa      	ldr	r2, [r7, #28]
 800b35e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b360:	69bb      	ldr	r3, [r7, #24]
 800b362:	699b      	ldr	r3, [r3, #24]
 800b364:	2b00      	cmp	r3, #0
 800b366:	db04      	blt.n	800b372 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b368:	69fb      	ldr	r3, [r7, #28]
 800b36a:	f1c3 0207 	rsb	r2, r3, #7
 800b36e:	69bb      	ldr	r3, [r7, #24]
 800b370:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b372:	69bb      	ldr	r3, [r7, #24]
 800b374:	6959      	ldr	r1, [r3, #20]
 800b376:	693a      	ldr	r2, [r7, #16]
 800b378:	4613      	mov	r3, r2
 800b37a:	009b      	lsls	r3, r3, #2
 800b37c:	4413      	add	r3, r2
 800b37e:	009b      	lsls	r3, r3, #2
 800b380:	4a19      	ldr	r2, [pc, #100]	; (800b3e8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800b382:	4413      	add	r3, r2
 800b384:	4299      	cmp	r1, r3
 800b386:	d129      	bne.n	800b3dc <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b388:	69bb      	ldr	r3, [r7, #24]
 800b38a:	3304      	adds	r3, #4
 800b38c:	4618      	mov	r0, r3
 800b38e:	f7fe fb8f 	bl	8009ab0 <uxListRemove>
 800b392:	4603      	mov	r3, r0
 800b394:	2b00      	cmp	r3, #0
 800b396:	d10a      	bne.n	800b3ae <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800b398:	69bb      	ldr	r3, [r7, #24]
 800b39a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b39c:	2201      	movs	r2, #1
 800b39e:	fa02 f303 	lsl.w	r3, r2, r3
 800b3a2:	43da      	mvns	r2, r3
 800b3a4:	4b11      	ldr	r3, [pc, #68]	; (800b3ec <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	4013      	ands	r3, r2
 800b3aa:	4a10      	ldr	r2, [pc, #64]	; (800b3ec <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b3ac:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b3ae:	69bb      	ldr	r3, [r7, #24]
 800b3b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3b2:	2201      	movs	r2, #1
 800b3b4:	409a      	lsls	r2, r3
 800b3b6:	4b0d      	ldr	r3, [pc, #52]	; (800b3ec <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	4313      	orrs	r3, r2
 800b3bc:	4a0b      	ldr	r2, [pc, #44]	; (800b3ec <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b3be:	6013      	str	r3, [r2, #0]
 800b3c0:	69bb      	ldr	r3, [r7, #24]
 800b3c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3c4:	4613      	mov	r3, r2
 800b3c6:	009b      	lsls	r3, r3, #2
 800b3c8:	4413      	add	r3, r2
 800b3ca:	009b      	lsls	r3, r3, #2
 800b3cc:	4a06      	ldr	r2, [pc, #24]	; (800b3e8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800b3ce:	441a      	add	r2, r3
 800b3d0:	69bb      	ldr	r3, [r7, #24]
 800b3d2:	3304      	adds	r3, #4
 800b3d4:	4619      	mov	r1, r3
 800b3d6:	4610      	mov	r0, r2
 800b3d8:	f7fe fb0d 	bl	80099f6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b3dc:	bf00      	nop
 800b3de:	3720      	adds	r7, #32
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	bd80      	pop	{r7, pc}
 800b3e4:	20007374 	.word	0x20007374
 800b3e8:	20007378 	.word	0x20007378
 800b3ec:	2000747c 	.word	0x2000747c

0800b3f0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b3f0:	b480      	push	{r7}
 800b3f2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b3f4:	4b07      	ldr	r3, [pc, #28]	; (800b414 <pvTaskIncrementMutexHeldCount+0x24>)
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d004      	beq.n	800b406 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b3fc:	4b05      	ldr	r3, [pc, #20]	; (800b414 <pvTaskIncrementMutexHeldCount+0x24>)
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b402:	3201      	adds	r2, #1
 800b404:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800b406:	4b03      	ldr	r3, [pc, #12]	; (800b414 <pvTaskIncrementMutexHeldCount+0x24>)
 800b408:	681b      	ldr	r3, [r3, #0]
	}
 800b40a:	4618      	mov	r0, r3
 800b40c:	46bd      	mov	sp, r7
 800b40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b412:	4770      	bx	lr
 800b414:	20007374 	.word	0x20007374

0800b418 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b084      	sub	sp, #16
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
 800b420:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b422:	4b29      	ldr	r3, [pc, #164]	; (800b4c8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b428:	4b28      	ldr	r3, [pc, #160]	; (800b4cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	3304      	adds	r3, #4
 800b42e:	4618      	mov	r0, r3
 800b430:	f7fe fb3e 	bl	8009ab0 <uxListRemove>
 800b434:	4603      	mov	r3, r0
 800b436:	2b00      	cmp	r3, #0
 800b438:	d10b      	bne.n	800b452 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b43a:	4b24      	ldr	r3, [pc, #144]	; (800b4cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b440:	2201      	movs	r2, #1
 800b442:	fa02 f303 	lsl.w	r3, r2, r3
 800b446:	43da      	mvns	r2, r3
 800b448:	4b21      	ldr	r3, [pc, #132]	; (800b4d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	4013      	ands	r3, r2
 800b44e:	4a20      	ldr	r2, [pc, #128]	; (800b4d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b450:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b458:	d10a      	bne.n	800b470 <prvAddCurrentTaskToDelayedList+0x58>
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d007      	beq.n	800b470 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b460:	4b1a      	ldr	r3, [pc, #104]	; (800b4cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	3304      	adds	r3, #4
 800b466:	4619      	mov	r1, r3
 800b468:	481a      	ldr	r0, [pc, #104]	; (800b4d4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b46a:	f7fe fac4 	bl	80099f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b46e:	e026      	b.n	800b4be <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b470:	68fa      	ldr	r2, [r7, #12]
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	4413      	add	r3, r2
 800b476:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b478:	4b14      	ldr	r3, [pc, #80]	; (800b4cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	68ba      	ldr	r2, [r7, #8]
 800b47e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b480:	68ba      	ldr	r2, [r7, #8]
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	429a      	cmp	r2, r3
 800b486:	d209      	bcs.n	800b49c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b488:	4b13      	ldr	r3, [pc, #76]	; (800b4d8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b48a:	681a      	ldr	r2, [r3, #0]
 800b48c:	4b0f      	ldr	r3, [pc, #60]	; (800b4cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	3304      	adds	r3, #4
 800b492:	4619      	mov	r1, r3
 800b494:	4610      	mov	r0, r2
 800b496:	f7fe fad2 	bl	8009a3e <vListInsert>
}
 800b49a:	e010      	b.n	800b4be <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b49c:	4b0f      	ldr	r3, [pc, #60]	; (800b4dc <prvAddCurrentTaskToDelayedList+0xc4>)
 800b49e:	681a      	ldr	r2, [r3, #0]
 800b4a0:	4b0a      	ldr	r3, [pc, #40]	; (800b4cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	3304      	adds	r3, #4
 800b4a6:	4619      	mov	r1, r3
 800b4a8:	4610      	mov	r0, r2
 800b4aa:	f7fe fac8 	bl	8009a3e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b4ae:	4b0c      	ldr	r3, [pc, #48]	; (800b4e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	68ba      	ldr	r2, [r7, #8]
 800b4b4:	429a      	cmp	r2, r3
 800b4b6:	d202      	bcs.n	800b4be <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b4b8:	4a09      	ldr	r2, [pc, #36]	; (800b4e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b4ba:	68bb      	ldr	r3, [r7, #8]
 800b4bc:	6013      	str	r3, [r2, #0]
}
 800b4be:	bf00      	nop
 800b4c0:	3710      	adds	r7, #16
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}
 800b4c6:	bf00      	nop
 800b4c8:	20007478 	.word	0x20007478
 800b4cc:	20007374 	.word	0x20007374
 800b4d0:	2000747c 	.word	0x2000747c
 800b4d4:	20007460 	.word	0x20007460
 800b4d8:	20007430 	.word	0x20007430
 800b4dc:	2000742c 	.word	0x2000742c
 800b4e0:	20007494 	.word	0x20007494

0800b4e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	b085      	sub	sp, #20
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	60f8      	str	r0, [r7, #12]
 800b4ec:	60b9      	str	r1, [r7, #8]
 800b4ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	3b04      	subs	r3, #4
 800b4f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b4fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	3b04      	subs	r3, #4
 800b502:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	f023 0201 	bic.w	r2, r3, #1
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	3b04      	subs	r3, #4
 800b512:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b514:	4a0c      	ldr	r2, [pc, #48]	; (800b548 <pxPortInitialiseStack+0x64>)
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	3b14      	subs	r3, #20
 800b51e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b520:	687a      	ldr	r2, [r7, #4]
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	3b04      	subs	r3, #4
 800b52a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	f06f 0202 	mvn.w	r2, #2
 800b532:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	3b20      	subs	r3, #32
 800b538:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b53a:	68fb      	ldr	r3, [r7, #12]
}
 800b53c:	4618      	mov	r0, r3
 800b53e:	3714      	adds	r7, #20
 800b540:	46bd      	mov	sp, r7
 800b542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b546:	4770      	bx	lr
 800b548:	0800b54d 	.word	0x0800b54d

0800b54c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b54c:	b480      	push	{r7}
 800b54e:	b085      	sub	sp, #20
 800b550:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b552:	2300      	movs	r3, #0
 800b554:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b556:	4b12      	ldr	r3, [pc, #72]	; (800b5a0 <prvTaskExitError+0x54>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b55e:	d00a      	beq.n	800b576 <prvTaskExitError+0x2a>
	__asm volatile
 800b560:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b564:	f383 8811 	msr	BASEPRI, r3
 800b568:	f3bf 8f6f 	isb	sy
 800b56c:	f3bf 8f4f 	dsb	sy
 800b570:	60fb      	str	r3, [r7, #12]
}
 800b572:	bf00      	nop
 800b574:	e7fe      	b.n	800b574 <prvTaskExitError+0x28>
	__asm volatile
 800b576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b57a:	f383 8811 	msr	BASEPRI, r3
 800b57e:	f3bf 8f6f 	isb	sy
 800b582:	f3bf 8f4f 	dsb	sy
 800b586:	60bb      	str	r3, [r7, #8]
}
 800b588:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b58a:	bf00      	nop
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d0fc      	beq.n	800b58c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b592:	bf00      	nop
 800b594:	bf00      	nop
 800b596:	3714      	adds	r7, #20
 800b598:	46bd      	mov	sp, r7
 800b59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59e:	4770      	bx	lr
 800b5a0:	20000084 	.word	0x20000084
	...

0800b5b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b5b0:	4b07      	ldr	r3, [pc, #28]	; (800b5d0 <pxCurrentTCBConst2>)
 800b5b2:	6819      	ldr	r1, [r3, #0]
 800b5b4:	6808      	ldr	r0, [r1, #0]
 800b5b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5ba:	f380 8809 	msr	PSP, r0
 800b5be:	f3bf 8f6f 	isb	sy
 800b5c2:	f04f 0000 	mov.w	r0, #0
 800b5c6:	f380 8811 	msr	BASEPRI, r0
 800b5ca:	4770      	bx	lr
 800b5cc:	f3af 8000 	nop.w

0800b5d0 <pxCurrentTCBConst2>:
 800b5d0:	20007374 	.word	0x20007374
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b5d4:	bf00      	nop
 800b5d6:	bf00      	nop

0800b5d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b5d8:	4808      	ldr	r0, [pc, #32]	; (800b5fc <prvPortStartFirstTask+0x24>)
 800b5da:	6800      	ldr	r0, [r0, #0]
 800b5dc:	6800      	ldr	r0, [r0, #0]
 800b5de:	f380 8808 	msr	MSP, r0
 800b5e2:	f04f 0000 	mov.w	r0, #0
 800b5e6:	f380 8814 	msr	CONTROL, r0
 800b5ea:	b662      	cpsie	i
 800b5ec:	b661      	cpsie	f
 800b5ee:	f3bf 8f4f 	dsb	sy
 800b5f2:	f3bf 8f6f 	isb	sy
 800b5f6:	df00      	svc	0
 800b5f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b5fa:	bf00      	nop
 800b5fc:	e000ed08 	.word	0xe000ed08

0800b600 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b086      	sub	sp, #24
 800b604:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b606:	4b46      	ldr	r3, [pc, #280]	; (800b720 <xPortStartScheduler+0x120>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	4a46      	ldr	r2, [pc, #280]	; (800b724 <xPortStartScheduler+0x124>)
 800b60c:	4293      	cmp	r3, r2
 800b60e:	d10a      	bne.n	800b626 <xPortStartScheduler+0x26>
	__asm volatile
 800b610:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b614:	f383 8811 	msr	BASEPRI, r3
 800b618:	f3bf 8f6f 	isb	sy
 800b61c:	f3bf 8f4f 	dsb	sy
 800b620:	613b      	str	r3, [r7, #16]
}
 800b622:	bf00      	nop
 800b624:	e7fe      	b.n	800b624 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b626:	4b3e      	ldr	r3, [pc, #248]	; (800b720 <xPortStartScheduler+0x120>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	4a3f      	ldr	r2, [pc, #252]	; (800b728 <xPortStartScheduler+0x128>)
 800b62c:	4293      	cmp	r3, r2
 800b62e:	d10a      	bne.n	800b646 <xPortStartScheduler+0x46>
	__asm volatile
 800b630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b634:	f383 8811 	msr	BASEPRI, r3
 800b638:	f3bf 8f6f 	isb	sy
 800b63c:	f3bf 8f4f 	dsb	sy
 800b640:	60fb      	str	r3, [r7, #12]
}
 800b642:	bf00      	nop
 800b644:	e7fe      	b.n	800b644 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b646:	4b39      	ldr	r3, [pc, #228]	; (800b72c <xPortStartScheduler+0x12c>)
 800b648:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b64a:	697b      	ldr	r3, [r7, #20]
 800b64c:	781b      	ldrb	r3, [r3, #0]
 800b64e:	b2db      	uxtb	r3, r3
 800b650:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b652:	697b      	ldr	r3, [r7, #20]
 800b654:	22ff      	movs	r2, #255	; 0xff
 800b656:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b658:	697b      	ldr	r3, [r7, #20]
 800b65a:	781b      	ldrb	r3, [r3, #0]
 800b65c:	b2db      	uxtb	r3, r3
 800b65e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b660:	78fb      	ldrb	r3, [r7, #3]
 800b662:	b2db      	uxtb	r3, r3
 800b664:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b668:	b2da      	uxtb	r2, r3
 800b66a:	4b31      	ldr	r3, [pc, #196]	; (800b730 <xPortStartScheduler+0x130>)
 800b66c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b66e:	4b31      	ldr	r3, [pc, #196]	; (800b734 <xPortStartScheduler+0x134>)
 800b670:	2207      	movs	r2, #7
 800b672:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b674:	e009      	b.n	800b68a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b676:	4b2f      	ldr	r3, [pc, #188]	; (800b734 <xPortStartScheduler+0x134>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	3b01      	subs	r3, #1
 800b67c:	4a2d      	ldr	r2, [pc, #180]	; (800b734 <xPortStartScheduler+0x134>)
 800b67e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b680:	78fb      	ldrb	r3, [r7, #3]
 800b682:	b2db      	uxtb	r3, r3
 800b684:	005b      	lsls	r3, r3, #1
 800b686:	b2db      	uxtb	r3, r3
 800b688:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b68a:	78fb      	ldrb	r3, [r7, #3]
 800b68c:	b2db      	uxtb	r3, r3
 800b68e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b692:	2b80      	cmp	r3, #128	; 0x80
 800b694:	d0ef      	beq.n	800b676 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b696:	4b27      	ldr	r3, [pc, #156]	; (800b734 <xPortStartScheduler+0x134>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	f1c3 0307 	rsb	r3, r3, #7
 800b69e:	2b04      	cmp	r3, #4
 800b6a0:	d00a      	beq.n	800b6b8 <xPortStartScheduler+0xb8>
	__asm volatile
 800b6a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6a6:	f383 8811 	msr	BASEPRI, r3
 800b6aa:	f3bf 8f6f 	isb	sy
 800b6ae:	f3bf 8f4f 	dsb	sy
 800b6b2:	60bb      	str	r3, [r7, #8]
}
 800b6b4:	bf00      	nop
 800b6b6:	e7fe      	b.n	800b6b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b6b8:	4b1e      	ldr	r3, [pc, #120]	; (800b734 <xPortStartScheduler+0x134>)
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	021b      	lsls	r3, r3, #8
 800b6be:	4a1d      	ldr	r2, [pc, #116]	; (800b734 <xPortStartScheduler+0x134>)
 800b6c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b6c2:	4b1c      	ldr	r3, [pc, #112]	; (800b734 <xPortStartScheduler+0x134>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b6ca:	4a1a      	ldr	r2, [pc, #104]	; (800b734 <xPortStartScheduler+0x134>)
 800b6cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	b2da      	uxtb	r2, r3
 800b6d2:	697b      	ldr	r3, [r7, #20]
 800b6d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b6d6:	4b18      	ldr	r3, [pc, #96]	; (800b738 <xPortStartScheduler+0x138>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	4a17      	ldr	r2, [pc, #92]	; (800b738 <xPortStartScheduler+0x138>)
 800b6dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b6e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b6e2:	4b15      	ldr	r3, [pc, #84]	; (800b738 <xPortStartScheduler+0x138>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	4a14      	ldr	r2, [pc, #80]	; (800b738 <xPortStartScheduler+0x138>)
 800b6e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b6ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b6ee:	f000 f8dd 	bl	800b8ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b6f2:	4b12      	ldr	r3, [pc, #72]	; (800b73c <xPortStartScheduler+0x13c>)
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b6f8:	f000 f8fc 	bl	800b8f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b6fc:	4b10      	ldr	r3, [pc, #64]	; (800b740 <xPortStartScheduler+0x140>)
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	4a0f      	ldr	r2, [pc, #60]	; (800b740 <xPortStartScheduler+0x140>)
 800b702:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b706:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b708:	f7ff ff66 	bl	800b5d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b70c:	f7ff fa98 	bl	800ac40 <vTaskSwitchContext>
	prvTaskExitError();
 800b710:	f7ff ff1c 	bl	800b54c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b714:	2300      	movs	r3, #0
}
 800b716:	4618      	mov	r0, r3
 800b718:	3718      	adds	r7, #24
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}
 800b71e:	bf00      	nop
 800b720:	e000ed00 	.word	0xe000ed00
 800b724:	410fc271 	.word	0x410fc271
 800b728:	410fc270 	.word	0x410fc270
 800b72c:	e000e400 	.word	0xe000e400
 800b730:	200074a8 	.word	0x200074a8
 800b734:	200074ac 	.word	0x200074ac
 800b738:	e000ed20 	.word	0xe000ed20
 800b73c:	20000084 	.word	0x20000084
 800b740:	e000ef34 	.word	0xe000ef34

0800b744 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b744:	b480      	push	{r7}
 800b746:	b083      	sub	sp, #12
 800b748:	af00      	add	r7, sp, #0
	__asm volatile
 800b74a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b74e:	f383 8811 	msr	BASEPRI, r3
 800b752:	f3bf 8f6f 	isb	sy
 800b756:	f3bf 8f4f 	dsb	sy
 800b75a:	607b      	str	r3, [r7, #4]
}
 800b75c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b75e:	4b0f      	ldr	r3, [pc, #60]	; (800b79c <vPortEnterCritical+0x58>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	3301      	adds	r3, #1
 800b764:	4a0d      	ldr	r2, [pc, #52]	; (800b79c <vPortEnterCritical+0x58>)
 800b766:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b768:	4b0c      	ldr	r3, [pc, #48]	; (800b79c <vPortEnterCritical+0x58>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	2b01      	cmp	r3, #1
 800b76e:	d10f      	bne.n	800b790 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b770:	4b0b      	ldr	r3, [pc, #44]	; (800b7a0 <vPortEnterCritical+0x5c>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	b2db      	uxtb	r3, r3
 800b776:	2b00      	cmp	r3, #0
 800b778:	d00a      	beq.n	800b790 <vPortEnterCritical+0x4c>
	__asm volatile
 800b77a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b77e:	f383 8811 	msr	BASEPRI, r3
 800b782:	f3bf 8f6f 	isb	sy
 800b786:	f3bf 8f4f 	dsb	sy
 800b78a:	603b      	str	r3, [r7, #0]
}
 800b78c:	bf00      	nop
 800b78e:	e7fe      	b.n	800b78e <vPortEnterCritical+0x4a>
	}
}
 800b790:	bf00      	nop
 800b792:	370c      	adds	r7, #12
 800b794:	46bd      	mov	sp, r7
 800b796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79a:	4770      	bx	lr
 800b79c:	20000084 	.word	0x20000084
 800b7a0:	e000ed04 	.word	0xe000ed04

0800b7a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b7a4:	b480      	push	{r7}
 800b7a6:	b083      	sub	sp, #12
 800b7a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b7aa:	4b12      	ldr	r3, [pc, #72]	; (800b7f4 <vPortExitCritical+0x50>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d10a      	bne.n	800b7c8 <vPortExitCritical+0x24>
	__asm volatile
 800b7b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7b6:	f383 8811 	msr	BASEPRI, r3
 800b7ba:	f3bf 8f6f 	isb	sy
 800b7be:	f3bf 8f4f 	dsb	sy
 800b7c2:	607b      	str	r3, [r7, #4]
}
 800b7c4:	bf00      	nop
 800b7c6:	e7fe      	b.n	800b7c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b7c8:	4b0a      	ldr	r3, [pc, #40]	; (800b7f4 <vPortExitCritical+0x50>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	3b01      	subs	r3, #1
 800b7ce:	4a09      	ldr	r2, [pc, #36]	; (800b7f4 <vPortExitCritical+0x50>)
 800b7d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b7d2:	4b08      	ldr	r3, [pc, #32]	; (800b7f4 <vPortExitCritical+0x50>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d105      	bne.n	800b7e6 <vPortExitCritical+0x42>
 800b7da:	2300      	movs	r3, #0
 800b7dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	f383 8811 	msr	BASEPRI, r3
}
 800b7e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b7e6:	bf00      	nop
 800b7e8:	370c      	adds	r7, #12
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f0:	4770      	bx	lr
 800b7f2:	bf00      	nop
 800b7f4:	20000084 	.word	0x20000084
	...

0800b800 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b800:	f3ef 8009 	mrs	r0, PSP
 800b804:	f3bf 8f6f 	isb	sy
 800b808:	4b15      	ldr	r3, [pc, #84]	; (800b860 <pxCurrentTCBConst>)
 800b80a:	681a      	ldr	r2, [r3, #0]
 800b80c:	f01e 0f10 	tst.w	lr, #16
 800b810:	bf08      	it	eq
 800b812:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b816:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b81a:	6010      	str	r0, [r2, #0]
 800b81c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b820:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b824:	f380 8811 	msr	BASEPRI, r0
 800b828:	f3bf 8f4f 	dsb	sy
 800b82c:	f3bf 8f6f 	isb	sy
 800b830:	f7ff fa06 	bl	800ac40 <vTaskSwitchContext>
 800b834:	f04f 0000 	mov.w	r0, #0
 800b838:	f380 8811 	msr	BASEPRI, r0
 800b83c:	bc09      	pop	{r0, r3}
 800b83e:	6819      	ldr	r1, [r3, #0]
 800b840:	6808      	ldr	r0, [r1, #0]
 800b842:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b846:	f01e 0f10 	tst.w	lr, #16
 800b84a:	bf08      	it	eq
 800b84c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b850:	f380 8809 	msr	PSP, r0
 800b854:	f3bf 8f6f 	isb	sy
 800b858:	4770      	bx	lr
 800b85a:	bf00      	nop
 800b85c:	f3af 8000 	nop.w

0800b860 <pxCurrentTCBConst>:
 800b860:	20007374 	.word	0x20007374
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b864:	bf00      	nop
 800b866:	bf00      	nop

0800b868 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b082      	sub	sp, #8
 800b86c:	af00      	add	r7, sp, #0
	__asm volatile
 800b86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b872:	f383 8811 	msr	BASEPRI, r3
 800b876:	f3bf 8f6f 	isb	sy
 800b87a:	f3bf 8f4f 	dsb	sy
 800b87e:	607b      	str	r3, [r7, #4]
}
 800b880:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b882:	f7ff f925 	bl	800aad0 <xTaskIncrementTick>
 800b886:	4603      	mov	r3, r0
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d003      	beq.n	800b894 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b88c:	4b06      	ldr	r3, [pc, #24]	; (800b8a8 <SysTick_Handler+0x40>)
 800b88e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b892:	601a      	str	r2, [r3, #0]
 800b894:	2300      	movs	r3, #0
 800b896:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	f383 8811 	msr	BASEPRI, r3
}
 800b89e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b8a0:	bf00      	nop
 800b8a2:	3708      	adds	r7, #8
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}
 800b8a8:	e000ed04 	.word	0xe000ed04

0800b8ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b8ac:	b480      	push	{r7}
 800b8ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b8b0:	4b0b      	ldr	r3, [pc, #44]	; (800b8e0 <vPortSetupTimerInterrupt+0x34>)
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b8b6:	4b0b      	ldr	r3, [pc, #44]	; (800b8e4 <vPortSetupTimerInterrupt+0x38>)
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b8bc:	4b0a      	ldr	r3, [pc, #40]	; (800b8e8 <vPortSetupTimerInterrupt+0x3c>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	4a0a      	ldr	r2, [pc, #40]	; (800b8ec <vPortSetupTimerInterrupt+0x40>)
 800b8c2:	fba2 2303 	umull	r2, r3, r2, r3
 800b8c6:	099b      	lsrs	r3, r3, #6
 800b8c8:	4a09      	ldr	r2, [pc, #36]	; (800b8f0 <vPortSetupTimerInterrupt+0x44>)
 800b8ca:	3b01      	subs	r3, #1
 800b8cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b8ce:	4b04      	ldr	r3, [pc, #16]	; (800b8e0 <vPortSetupTimerInterrupt+0x34>)
 800b8d0:	2207      	movs	r2, #7
 800b8d2:	601a      	str	r2, [r3, #0]
}
 800b8d4:	bf00      	nop
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8dc:	4770      	bx	lr
 800b8de:	bf00      	nop
 800b8e0:	e000e010 	.word	0xe000e010
 800b8e4:	e000e018 	.word	0xe000e018
 800b8e8:	20000078 	.word	0x20000078
 800b8ec:	10624dd3 	.word	0x10624dd3
 800b8f0:	e000e014 	.word	0xe000e014

0800b8f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b8f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b904 <vPortEnableVFP+0x10>
 800b8f8:	6801      	ldr	r1, [r0, #0]
 800b8fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b8fe:	6001      	str	r1, [r0, #0]
 800b900:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b902:	bf00      	nop
 800b904:	e000ed88 	.word	0xe000ed88

0800b908 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b908:	b480      	push	{r7}
 800b90a:	b085      	sub	sp, #20
 800b90c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b90e:	f3ef 8305 	mrs	r3, IPSR
 800b912:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	2b0f      	cmp	r3, #15
 800b918:	d914      	bls.n	800b944 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b91a:	4a17      	ldr	r2, [pc, #92]	; (800b978 <vPortValidateInterruptPriority+0x70>)
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	4413      	add	r3, r2
 800b920:	781b      	ldrb	r3, [r3, #0]
 800b922:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b924:	4b15      	ldr	r3, [pc, #84]	; (800b97c <vPortValidateInterruptPriority+0x74>)
 800b926:	781b      	ldrb	r3, [r3, #0]
 800b928:	7afa      	ldrb	r2, [r7, #11]
 800b92a:	429a      	cmp	r2, r3
 800b92c:	d20a      	bcs.n	800b944 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b92e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b932:	f383 8811 	msr	BASEPRI, r3
 800b936:	f3bf 8f6f 	isb	sy
 800b93a:	f3bf 8f4f 	dsb	sy
 800b93e:	607b      	str	r3, [r7, #4]
}
 800b940:	bf00      	nop
 800b942:	e7fe      	b.n	800b942 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b944:	4b0e      	ldr	r3, [pc, #56]	; (800b980 <vPortValidateInterruptPriority+0x78>)
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b94c:	4b0d      	ldr	r3, [pc, #52]	; (800b984 <vPortValidateInterruptPriority+0x7c>)
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	429a      	cmp	r2, r3
 800b952:	d90a      	bls.n	800b96a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b954:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b958:	f383 8811 	msr	BASEPRI, r3
 800b95c:	f3bf 8f6f 	isb	sy
 800b960:	f3bf 8f4f 	dsb	sy
 800b964:	603b      	str	r3, [r7, #0]
}
 800b966:	bf00      	nop
 800b968:	e7fe      	b.n	800b968 <vPortValidateInterruptPriority+0x60>
	}
 800b96a:	bf00      	nop
 800b96c:	3714      	adds	r7, #20
 800b96e:	46bd      	mov	sp, r7
 800b970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b974:	4770      	bx	lr
 800b976:	bf00      	nop
 800b978:	e000e3f0 	.word	0xe000e3f0
 800b97c:	200074a8 	.word	0x200074a8
 800b980:	e000ed0c 	.word	0xe000ed0c
 800b984:	200074ac 	.word	0x200074ac

0800b988 <__libc_init_array>:
 800b988:	b570      	push	{r4, r5, r6, lr}
 800b98a:	4d0d      	ldr	r5, [pc, #52]	; (800b9c0 <__libc_init_array+0x38>)
 800b98c:	4c0d      	ldr	r4, [pc, #52]	; (800b9c4 <__libc_init_array+0x3c>)
 800b98e:	1b64      	subs	r4, r4, r5
 800b990:	10a4      	asrs	r4, r4, #2
 800b992:	2600      	movs	r6, #0
 800b994:	42a6      	cmp	r6, r4
 800b996:	d109      	bne.n	800b9ac <__libc_init_array+0x24>
 800b998:	4d0b      	ldr	r5, [pc, #44]	; (800b9c8 <__libc_init_array+0x40>)
 800b99a:	4c0c      	ldr	r4, [pc, #48]	; (800b9cc <__libc_init_array+0x44>)
 800b99c:	f000 f82e 	bl	800b9fc <_init>
 800b9a0:	1b64      	subs	r4, r4, r5
 800b9a2:	10a4      	asrs	r4, r4, #2
 800b9a4:	2600      	movs	r6, #0
 800b9a6:	42a6      	cmp	r6, r4
 800b9a8:	d105      	bne.n	800b9b6 <__libc_init_array+0x2e>
 800b9aa:	bd70      	pop	{r4, r5, r6, pc}
 800b9ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9b0:	4798      	blx	r3
 800b9b2:	3601      	adds	r6, #1
 800b9b4:	e7ee      	b.n	800b994 <__libc_init_array+0xc>
 800b9b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9ba:	4798      	blx	r3
 800b9bc:	3601      	adds	r6, #1
 800b9be:	e7f2      	b.n	800b9a6 <__libc_init_array+0x1e>
 800b9c0:	0800ba98 	.word	0x0800ba98
 800b9c4:	0800ba98 	.word	0x0800ba98
 800b9c8:	0800ba98 	.word	0x0800ba98
 800b9cc:	0800ba9c 	.word	0x0800ba9c

0800b9d0 <memcpy>:
 800b9d0:	440a      	add	r2, r1
 800b9d2:	4291      	cmp	r1, r2
 800b9d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b9d8:	d100      	bne.n	800b9dc <memcpy+0xc>
 800b9da:	4770      	bx	lr
 800b9dc:	b510      	push	{r4, lr}
 800b9de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b9e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b9e6:	4291      	cmp	r1, r2
 800b9e8:	d1f9      	bne.n	800b9de <memcpy+0xe>
 800b9ea:	bd10      	pop	{r4, pc}

0800b9ec <memset>:
 800b9ec:	4402      	add	r2, r0
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	4293      	cmp	r3, r2
 800b9f2:	d100      	bne.n	800b9f6 <memset+0xa>
 800b9f4:	4770      	bx	lr
 800b9f6:	f803 1b01 	strb.w	r1, [r3], #1
 800b9fa:	e7f9      	b.n	800b9f0 <memset+0x4>

0800b9fc <_init>:
 800b9fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9fe:	bf00      	nop
 800ba00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba02:	bc08      	pop	{r3}
 800ba04:	469e      	mov	lr, r3
 800ba06:	4770      	bx	lr

0800ba08 <_fini>:
 800ba08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba0a:	bf00      	nop
 800ba0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba0e:	bc08      	pop	{r3}
 800ba10:	469e      	mov	lr, r3
 800ba12:	4770      	bx	lr
