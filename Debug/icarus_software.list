
icarus_software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab64  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  0800ad34  0800ad34  0001ad34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800adb0  0800adb0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800adb0  0800adb0  0001adb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800adb8  0800adb8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800adb8  0800adb8  0001adb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800adbc  0800adbc  0001adbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800adc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007d08  20000070  0800ae30  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20007d78  0800ae30  00027d78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025f08  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000579d  00000000  00000000  00045fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a40  00000000  00000000  0004b748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017c8  00000000  00000000  0004d188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002744b  00000000  00000000  0004e950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e8eb  00000000  00000000  00075d9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df031  00000000  00000000  00094686  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001736b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a9c  00000000  00000000  0017370c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ad1c 	.word	0x0800ad1c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	0800ad1c 	.word	0x0800ad1c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000224:	f000 b96e 	b.w	8000504 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468c      	mov	ip, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	f040 8083 	bne.w	8000356 <__udivmoddi4+0x116>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d947      	bls.n	80002e6 <__udivmoddi4+0xa6>
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	b142      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025c:	f1c2 0020 	rsb	r0, r2, #32
 8000260:	fa24 f000 	lsr.w	r0, r4, r0
 8000264:	4091      	lsls	r1, r2
 8000266:	4097      	lsls	r7, r2
 8000268:	ea40 0c01 	orr.w	ip, r0, r1
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbbc f6f8 	udiv	r6, ip, r8
 8000278:	fa1f fe87 	uxth.w	lr, r7
 800027c:	fb08 c116 	mls	r1, r8, r6, ip
 8000280:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000284:	fb06 f10e 	mul.w	r1, r6, lr
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000292:	f080 8119 	bcs.w	80004c8 <__udivmoddi4+0x288>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8116 	bls.w	80004c8 <__udivmoddi4+0x288>
 800029c:	3e02      	subs	r6, #2
 800029e:	443b      	add	r3, r7
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b4:	45a6      	cmp	lr, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002be:	f080 8105 	bcs.w	80004cc <__udivmoddi4+0x28c>
 80002c2:	45a6      	cmp	lr, r4
 80002c4:	f240 8102 	bls.w	80004cc <__udivmoddi4+0x28c>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	2600      	movs	r6, #0
 80002d6:	b11d      	cbz	r5, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c5 4300 	strd	r4, r3, [r5]
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xaa>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	d150      	bne.n	8000394 <__udivmoddi4+0x154>
 80002f2:	1bcb      	subs	r3, r1, r7
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	fa1f f887 	uxth.w	r8, r7
 80002fc:	2601      	movs	r6, #1
 80002fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000302:	0c21      	lsrs	r1, r4, #16
 8000304:	fb0e 331c 	mls	r3, lr, ip, r3
 8000308:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800030c:	fb08 f30c 	mul.w	r3, r8, ip
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000314:	1879      	adds	r1, r7, r1
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0xe2>
 800031c:	428b      	cmp	r3, r1
 800031e:	f200 80e9 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 8000322:	4684      	mov	ip, r0
 8000324:	1ac9      	subs	r1, r1, r3
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000330:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x10c>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x10a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80d9 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e7bf      	b.n	80002d6 <__udivmoddi4+0x96>
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x12e>
 800035a:	2d00      	cmp	r5, #0
 800035c:	f000 80b1 	beq.w	80004c2 <__udivmoddi4+0x282>
 8000360:	2600      	movs	r6, #0
 8000362:	e9c5 0100 	strd	r0, r1, [r5]
 8000366:	4630      	mov	r0, r6
 8000368:	4631      	mov	r1, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f683 	clz	r6, r3
 8000372:	2e00      	cmp	r6, #0
 8000374:	d14a      	bne.n	800040c <__udivmoddi4+0x1cc>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0x140>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80b8 	bhi.w	80004f0 <__udivmoddi4+0x2b0>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0103 	sbc.w	r1, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	468c      	mov	ip, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0a8      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800038e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000394:	f1c2 0320 	rsb	r3, r2, #32
 8000398:	fa20 f603 	lsr.w	r6, r0, r3
 800039c:	4097      	lsls	r7, r2
 800039e:	fa01 f002 	lsl.w	r0, r1, r2
 80003a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a6:	40d9      	lsrs	r1, r3
 80003a8:	4330      	orrs	r0, r6
 80003aa:	0c03      	lsrs	r3, r0, #16
 80003ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b0:	fa1f f887 	uxth.w	r8, r7
 80003b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb06 f108 	mul.w	r1, r6, r8
 80003c0:	4299      	cmp	r1, r3
 80003c2:	fa04 f402 	lsl.w	r4, r4, r2
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x19c>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003ce:	f080 808d 	bcs.w	80004ec <__udivmoddi4+0x2ac>
 80003d2:	4299      	cmp	r1, r3
 80003d4:	f240 808a 	bls.w	80004ec <__udivmoddi4+0x2ac>
 80003d8:	3e02      	subs	r6, #2
 80003da:	443b      	add	r3, r7
 80003dc:	1a5b      	subs	r3, r3, r1
 80003de:	b281      	uxth	r1, r0
 80003e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb00 f308 	mul.w	r3, r0, r8
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x1c4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003fa:	d273      	bcs.n	80004e4 <__udivmoddi4+0x2a4>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d971      	bls.n	80004e4 <__udivmoddi4+0x2a4>
 8000400:	3802      	subs	r0, #2
 8000402:	4439      	add	r1, r7
 8000404:	1acb      	subs	r3, r1, r3
 8000406:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040a:	e778      	b.n	80002fe <__udivmoddi4+0xbe>
 800040c:	f1c6 0c20 	rsb	ip, r6, #32
 8000410:	fa03 f406 	lsl.w	r4, r3, r6
 8000414:	fa22 f30c 	lsr.w	r3, r2, ip
 8000418:	431c      	orrs	r4, r3
 800041a:	fa20 f70c 	lsr.w	r7, r0, ip
 800041e:	fa01 f306 	lsl.w	r3, r1, r6
 8000422:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000426:	fa21 f10c 	lsr.w	r1, r1, ip
 800042a:	431f      	orrs	r7, r3
 800042c:	0c3b      	lsrs	r3, r7, #16
 800042e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000432:	fa1f f884 	uxth.w	r8, r4
 8000436:	fb0e 1119 	mls	r1, lr, r9, r1
 800043a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043e:	fb09 fa08 	mul.w	sl, r9, r8
 8000442:	458a      	cmp	sl, r1
 8000444:	fa02 f206 	lsl.w	r2, r2, r6
 8000448:	fa00 f306 	lsl.w	r3, r0, r6
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x220>
 800044e:	1861      	adds	r1, r4, r1
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000454:	d248      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 8000456:	458a      	cmp	sl, r1
 8000458:	d946      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4421      	add	r1, r4
 8000460:	eba1 010a 	sub.w	r1, r1, sl
 8000464:	b2bf      	uxth	r7, r7
 8000466:	fbb1 f0fe 	udiv	r0, r1, lr
 800046a:	fb0e 1110 	mls	r1, lr, r0, r1
 800046e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45b8      	cmp	r8, r7
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x24a>
 800047a:	19e7      	adds	r7, r4, r7
 800047c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000480:	d22e      	bcs.n	80004e0 <__udivmoddi4+0x2a0>
 8000482:	45b8      	cmp	r8, r7
 8000484:	d92c      	bls.n	80004e0 <__udivmoddi4+0x2a0>
 8000486:	3802      	subs	r0, #2
 8000488:	4427      	add	r7, r4
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba7 0708 	sub.w	r7, r7, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454f      	cmp	r7, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	4649      	mov	r1, r9
 800049c:	d31a      	bcc.n	80004d4 <__udivmoddi4+0x294>
 800049e:	d017      	beq.n	80004d0 <__udivmoddi4+0x290>
 80004a0:	b15d      	cbz	r5, 80004ba <__udivmoddi4+0x27a>
 80004a2:	ebb3 020e 	subs.w	r2, r3, lr
 80004a6:	eb67 0701 	sbc.w	r7, r7, r1
 80004aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ae:	40f2      	lsrs	r2, r6
 80004b0:	ea4c 0202 	orr.w	r2, ip, r2
 80004b4:	40f7      	lsrs	r7, r6
 80004b6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ba:	2600      	movs	r6, #0
 80004bc:	4631      	mov	r1, r6
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e70b      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fd      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d0:	4543      	cmp	r3, r8
 80004d2:	d2e5      	bcs.n	80004a0 <__udivmoddi4+0x260>
 80004d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d8:	eb69 0104 	sbc.w	r1, r9, r4
 80004dc:	3801      	subs	r0, #1
 80004de:	e7df      	b.n	80004a0 <__udivmoddi4+0x260>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e7d2      	b.n	800048a <__udivmoddi4+0x24a>
 80004e4:	4660      	mov	r0, ip
 80004e6:	e78d      	b.n	8000404 <__udivmoddi4+0x1c4>
 80004e8:	4681      	mov	r9, r0
 80004ea:	e7b9      	b.n	8000460 <__udivmoddi4+0x220>
 80004ec:	4666      	mov	r6, ip
 80004ee:	e775      	b.n	80003dc <__udivmoddi4+0x19c>
 80004f0:	4630      	mov	r0, r6
 80004f2:	e74a      	b.n	800038a <__udivmoddi4+0x14a>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	4439      	add	r1, r7
 80004fa:	e713      	b.n	8000324 <__udivmoddi4+0xe4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	443c      	add	r4, r7
 8000500:	e724      	b.n	800034c <__udivmoddi4+0x10c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <pointer_inc>:
volatile int32_t can_buffer_pointer_rx = 0;
volatile int32_t can_buffer_pointer_tx = 0;

uint32_t can_readFrame(void);

uint32_t pointer_inc(uint32_t val, uint32_t size) {
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	6039      	str	r1, [r7, #0]
	return (val + 1) % size;
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	3301      	adds	r3, #1
 8000516:	683a      	ldr	r2, [r7, #0]
 8000518:	fbb3 f2f2 	udiv	r2, r3, r2
 800051c:	6839      	ldr	r1, [r7, #0]
 800051e:	fb01 f202 	mul.w	r2, r1, r2
 8000522:	1a9b      	subs	r3, r3, r2
}
 8000524:	4618      	mov	r0, r3
 8000526:	370c      	adds	r7, #12
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr

08000530 <can_addMsg>:

void can_addMsg(CAN_msg msg) {
 8000530:	b590      	push	{r4, r7, lr}
 8000532:	b085      	sub	sp, #20
 8000534:	af00      	add	r7, sp, #0
 8000536:	463c      	mov	r4, r7
 8000538:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	can_buffer[can_buffer_pointer_tx] = msg;
 800053c:	4b13      	ldr	r3, [pc, #76]	; (800058c <can_addMsg+0x5c>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a13      	ldr	r2, [pc, #76]	; (8000590 <can_addMsg+0x60>)
 8000542:	011b      	lsls	r3, r3, #4
 8000544:	4413      	add	r3, r2
 8000546:	461c      	mov	r4, r3
 8000548:	463b      	mov	r3, r7
 800054a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800054c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	can_buffer_pointer_tx = pointer_inc(can_buffer_pointer_tx, CAN_BUFFER_DEPTH);
 8000550:	4b0e      	ldr	r3, [pc, #56]	; (800058c <can_addMsg+0x5c>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2140      	movs	r1, #64	; 0x40
 8000556:	4618      	mov	r0, r3
 8000558:	f7ff ffd6 	bl	8000508 <pointer_inc>
 800055c:	4603      	mov	r3, r0
 800055e:	461a      	mov	r2, r3
 8000560:	4b0a      	ldr	r3, [pc, #40]	; (800058c <can_addMsg+0x5c>)
 8000562:	601a      	str	r2, [r3, #0]

	if (can_buffer_pointer_tx == can_buffer_pointer_rx) { // indicates overflow
 8000564:	4b09      	ldr	r3, [pc, #36]	; (800058c <can_addMsg+0x5c>)
 8000566:	681a      	ldr	r2, [r3, #0]
 8000568:	4b0a      	ldr	r3, [pc, #40]	; (8000594 <can_addMsg+0x64>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	429a      	cmp	r2, r3
 800056e:	d109      	bne.n	8000584 <can_addMsg+0x54>
		can_buffer_pointer_rx = pointer_inc(can_buffer_pointer_rx, CAN_BUFFER_DEPTH); // skip one msg in the rx buffer
 8000570:	4b08      	ldr	r3, [pc, #32]	; (8000594 <can_addMsg+0x64>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	2140      	movs	r1, #64	; 0x40
 8000576:	4618      	mov	r0, r3
 8000578:	f7ff ffc6 	bl	8000508 <pointer_inc>
 800057c:	4603      	mov	r3, r0
 800057e:	461a      	mov	r2, r3
 8000580:	4b04      	ldr	r3, [pc, #16]	; (8000594 <can_addMsg+0x64>)
 8000582:	601a      	str	r2, [r3, #0]
	}
}
 8000584:	bf00      	nop
 8000586:	3714      	adds	r7, #20
 8000588:	46bd      	mov	sp, r7
 800058a:	bd90      	pop	{r4, r7, pc}
 800058c:	20000090 	.word	0x20000090
 8000590:	200072a8 	.word	0x200072a8
 8000594:	2000008c 	.word	0x2000008c

08000598 <CAN_Config>:

/*
 * Configures CAN protocol for 250kbit/s without interrupt for reading (only polling).
 */
void CAN_Config(uint32_t id)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b08c      	sub	sp, #48	; 0x30
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]

    /*##-1- Configure the CAN peripheral #######################################*/
    // Done in MX_CAN1_Init()

    /*##-2- Configure the CAN Filter ###########################################*/
    sFilterConfig.FilterBank = 0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	61fb      	str	r3, [r7, #28]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80005a4:	2300      	movs	r3, #0
 80005a6:	623b      	str	r3, [r7, #32]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80005a8:	2301      	movs	r3, #1
 80005aa:	627b      	str	r3, [r7, #36]	; 0x24
    sFilterConfig.FilterIdHigh = 0x0000;
 80005ac:	2300      	movs	r3, #0
 80005ae:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterIdLow = 0x0000;
 80005b0:	2300      	movs	r3, #0
 80005b2:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterMaskIdHigh = 0x0000;
 80005b4:	2300      	movs	r3, #0
 80005b6:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterMaskIdLow = 0x0000;
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80005bc:	2300      	movs	r3, #0
 80005be:	61bb      	str	r3, [r7, #24]
    sFilterConfig.FilterActivation = ENABLE;
 80005c0:	2301      	movs	r3, #1
 80005c2:	62bb      	str	r3, [r7, #40]	; 0x28
    sFilterConfig.SlaveStartFilterBank = 14;
 80005c4:	230e      	movs	r3, #14
 80005c6:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 80005c8:	f107 0308 	add.w	r3, r7, #8
 80005cc:	4619      	mov	r1, r3
 80005ce:	4810      	ldr	r0, [pc, #64]	; (8000610 <CAN_Config+0x78>)
 80005d0:	f003 f98a 	bl	80038e8 <HAL_CAN_ConfigFilter>
        /* Filter configuration Error */
        //      _Error_Handler(__FILE__, __LINE__);
    }

    /*##-3- Start the CAN peripheral ###########################################*/
    if (HAL_CAN_Start(&hcan1) != HAL_OK)
 80005d4:	480e      	ldr	r0, [pc, #56]	; (8000610 <CAN_Config+0x78>)
 80005d6:	f003 fa67 	bl	8003aa8 <HAL_CAN_Start>
        /* Start Error */
        //      _Error_Handler(__FILE__, __LINE__);
    }

    /*##-4- Activate CAN RX notification #######################################*/
    if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80005da:	2102      	movs	r1, #2
 80005dc:	480c      	ldr	r0, [pc, #48]	; (8000610 <CAN_Config+0x78>)
 80005de:	f003 fbe1 	bl	8003da4 <HAL_CAN_ActivateNotification>
        /* Notification Error */
    	//_Error_Handler(__FILE__, __LINE__);
    }

    /*##-5- Configure Transmission process #####################################*/
    TxHeader.StdId = id;
 80005e2:	4a0c      	ldr	r2, [pc, #48]	; (8000614 <CAN_Config+0x7c>)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	6013      	str	r3, [r2, #0]
    TxHeader.ExtId = id; // not needed
 80005e8:	4a0a      	ldr	r2, [pc, #40]	; (8000614 <CAN_Config+0x7c>)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	6053      	str	r3, [r2, #4]
    TxHeader.RTR = CAN_RTR_DATA;
 80005ee:	4b09      	ldr	r3, [pc, #36]	; (8000614 <CAN_Config+0x7c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	60da      	str	r2, [r3, #12]
    TxHeader.IDE = CAN_ID_STD;
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <CAN_Config+0x7c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	609a      	str	r2, [r3, #8]
    TxHeader.DLC = 8;
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <CAN_Config+0x7c>)
 80005fc:	2208      	movs	r2, #8
 80005fe:	611a      	str	r2, [r3, #16]
    TxHeader.TransmitGlobalTime = DISABLE;
 8000600:	4b04      	ldr	r3, [pc, #16]	; (8000614 <CAN_Config+0x7c>)
 8000602:	2200      	movs	r2, #0
 8000604:	751a      	strb	r2, [r3, #20]
}
 8000606:	bf00      	nop
 8000608:	3730      	adds	r7, #48	; 0x30
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	200076a8 	.word	0x200076a8
 8000614:	20007274 	.word	0x20007274

08000618 <HAL_CAN_RxFifo0MsgPendingCallback>:
    } else { // something bad happen
    	// not sure what to do
    }
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	can_readFrame();
 8000620:	f000 f858 	bl	80006d4 <can_readFrame>
	can_addMsg(can_current_msg);
 8000624:	4b03      	ldr	r3, [pc, #12]	; (8000634 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 8000626:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000628:	f7ff ff82 	bl	8000530 <can_addMsg>
}
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20007258 	.word	0x20007258

08000638 <can_msgPending>:

uint32_t can_msgPending() {
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
	int32_t diff = can_buffer_pointer_tx - can_buffer_pointer_rx;
 800063e:	4b09      	ldr	r3, [pc, #36]	; (8000664 <can_msgPending+0x2c>)
 8000640:	681a      	ldr	r2, [r3, #0]
 8000642:	4b09      	ldr	r3, [pc, #36]	; (8000668 <can_msgPending+0x30>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	1ad3      	subs	r3, r2, r3
 8000648:	607b      	str	r3, [r7, #4]
	if (diff < 0) {
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	2b00      	cmp	r3, #0
 800064e:	da02      	bge.n	8000656 <can_msgPending+0x1e>
		diff += CAN_BUFFER_DEPTH;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	3340      	adds	r3, #64	; 0x40
 8000654:	607b      	str	r3, [r7, #4]
	}

	return diff;
 8000656:	687b      	ldr	r3, [r7, #4]
}
 8000658:	4618      	mov	r0, r3
 800065a:	370c      	adds	r7, #12
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr
 8000664:	20000090 	.word	0x20000090
 8000668:	2000008c 	.word	0x2000008c

0800066c <can_readBuffer>:

CAN_msg can_readBuffer() {
 800066c:	b590      	push	{r4, r7, lr}
 800066e:	b087      	sub	sp, #28
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
	CAN_msg ret = {0};
 8000674:	f107 0308 	add.w	r3, r7, #8
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]

	if (can_msgPending() > 0) {
 8000682:	f7ff ffd9 	bl	8000638 <can_msgPending>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d013      	beq.n	80006b4 <can_readBuffer+0x48>
		ret = can_buffer[can_buffer_pointer_rx];
 800068c:	4b0f      	ldr	r3, [pc, #60]	; (80006cc <can_readBuffer+0x60>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a0f      	ldr	r2, [pc, #60]	; (80006d0 <can_readBuffer+0x64>)
 8000692:	011b      	lsls	r3, r3, #4
 8000694:	4413      	add	r3, r2
 8000696:	f107 0408 	add.w	r4, r7, #8
 800069a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800069c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		can_buffer_pointer_rx = pointer_inc(can_buffer_pointer_rx, CAN_BUFFER_DEPTH);
 80006a0:	4b0a      	ldr	r3, [pc, #40]	; (80006cc <can_readBuffer+0x60>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	2140      	movs	r1, #64	; 0x40
 80006a6:	4618      	mov	r0, r3
 80006a8:	f7ff ff2e 	bl	8000508 <pointer_inc>
 80006ac:	4603      	mov	r3, r0
 80006ae:	461a      	mov	r2, r3
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <can_readBuffer+0x60>)
 80006b2:	601a      	str	r2, [r3, #0]
	} else { // no message actually pending
		// do nothing, will return the {0} CAN_msg
	}


	return ret;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	461c      	mov	r4, r3
 80006b8:	f107 0308 	add.w	r3, r7, #8
 80006bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80006c2:	6878      	ldr	r0, [r7, #4]
 80006c4:	371c      	adds	r7, #28
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd90      	pop	{r4, r7, pc}
 80006ca:	bf00      	nop
 80006cc:	2000008c 	.word	0x2000008c
 80006d0:	200072a8 	.word	0x200072a8

080006d4 <can_readFrame>:
 *
 * byte 0..3 --> some uint32_t
 * byte 4    --> data_id, see CAN_communication.h
 * byte 5..7 --> timestamp
 */
uint32_t can_readFrame(void) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
    uint32_t fill_level = HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0);
 80006da:	2100      	movs	r1, #0
 80006dc:	482a      	ldr	r0, [pc, #168]	; (8000788 <can_readFrame+0xb4>)
 80006de:	f003 fb39 	bl	8003d54 <HAL_CAN_GetRxFifoFillLevel>
 80006e2:	6078      	str	r0, [r7, #4]
    if (fill_level > 0) {
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d049      	beq.n	800077e <can_readFrame+0xaa>
        HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData);
 80006ea:	4b28      	ldr	r3, [pc, #160]	; (800078c <can_readFrame+0xb8>)
 80006ec:	4a28      	ldr	r2, [pc, #160]	; (8000790 <can_readFrame+0xbc>)
 80006ee:	2100      	movs	r1, #0
 80006f0:	4825      	ldr	r0, [pc, #148]	; (8000788 <can_readFrame+0xb4>)
 80006f2:	f003 fa1d 	bl	8003b30 <HAL_CAN_GetRxMessage>

        can_current_msg.data = 0;
 80006f6:	4b27      	ldr	r3, [pc, #156]	; (8000794 <can_readFrame+0xc0>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
        can_current_msg.data += (uint32_t) RxData[0] << 24;
 80006fc:	4b25      	ldr	r3, [pc, #148]	; (8000794 <can_readFrame+0xc0>)
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	4b22      	ldr	r3, [pc, #136]	; (800078c <can_readFrame+0xb8>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	061b      	lsls	r3, r3, #24
 8000706:	4413      	add	r3, r2
 8000708:	4a22      	ldr	r2, [pc, #136]	; (8000794 <can_readFrame+0xc0>)
 800070a:	6013      	str	r3, [r2, #0]
        can_current_msg.data += (uint32_t) RxData[1] << 16;
 800070c:	4b21      	ldr	r3, [pc, #132]	; (8000794 <can_readFrame+0xc0>)
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	4b1e      	ldr	r3, [pc, #120]	; (800078c <can_readFrame+0xb8>)
 8000712:	785b      	ldrb	r3, [r3, #1]
 8000714:	041b      	lsls	r3, r3, #16
 8000716:	4413      	add	r3, r2
 8000718:	4a1e      	ldr	r2, [pc, #120]	; (8000794 <can_readFrame+0xc0>)
 800071a:	6013      	str	r3, [r2, #0]
        can_current_msg.data += (uint32_t) RxData[2] << 8;
 800071c:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <can_readFrame+0xc0>)
 800071e:	681a      	ldr	r2, [r3, #0]
 8000720:	4b1a      	ldr	r3, [pc, #104]	; (800078c <can_readFrame+0xb8>)
 8000722:	789b      	ldrb	r3, [r3, #2]
 8000724:	021b      	lsls	r3, r3, #8
 8000726:	4413      	add	r3, r2
 8000728:	4a1a      	ldr	r2, [pc, #104]	; (8000794 <can_readFrame+0xc0>)
 800072a:	6013      	str	r3, [r2, #0]
		can_current_msg.data += (uint32_t) RxData[3] << 0;
 800072c:	4b19      	ldr	r3, [pc, #100]	; (8000794 <can_readFrame+0xc0>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a16      	ldr	r2, [pc, #88]	; (800078c <can_readFrame+0xb8>)
 8000732:	78d2      	ldrb	r2, [r2, #3]
 8000734:	4413      	add	r3, r2
 8000736:	4a17      	ldr	r2, [pc, #92]	; (8000794 <can_readFrame+0xc0>)
 8000738:	6013      	str	r3, [r2, #0]

        can_current_msg.id = RxData[4];
 800073a:	4b14      	ldr	r3, [pc, #80]	; (800078c <can_readFrame+0xb8>)
 800073c:	791a      	ldrb	r2, [r3, #4]
 800073e:	4b15      	ldr	r3, [pc, #84]	; (8000794 <can_readFrame+0xc0>)
 8000740:	711a      	strb	r2, [r3, #4]

        can_current_msg.timestamp = 0;
 8000742:	4b14      	ldr	r3, [pc, #80]	; (8000794 <can_readFrame+0xc0>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
        can_current_msg.timestamp += (uint32_t) RxData[5] << 16;
 8000748:	4b12      	ldr	r3, [pc, #72]	; (8000794 <can_readFrame+0xc0>)
 800074a:	689a      	ldr	r2, [r3, #8]
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <can_readFrame+0xb8>)
 800074e:	795b      	ldrb	r3, [r3, #5]
 8000750:	041b      	lsls	r3, r3, #16
 8000752:	4413      	add	r3, r2
 8000754:	4a0f      	ldr	r2, [pc, #60]	; (8000794 <can_readFrame+0xc0>)
 8000756:	6093      	str	r3, [r2, #8]
        can_current_msg.timestamp += (uint32_t) RxData[6] << 8;
 8000758:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <can_readFrame+0xc0>)
 800075a:	689a      	ldr	r2, [r3, #8]
 800075c:	4b0b      	ldr	r3, [pc, #44]	; (800078c <can_readFrame+0xb8>)
 800075e:	799b      	ldrb	r3, [r3, #6]
 8000760:	021b      	lsls	r3, r3, #8
 8000762:	4413      	add	r3, r2
 8000764:	4a0b      	ldr	r2, [pc, #44]	; (8000794 <can_readFrame+0xc0>)
 8000766:	6093      	str	r3, [r2, #8]
		can_current_msg.timestamp += (uint32_t) RxData[7] << 0;
 8000768:	4b0a      	ldr	r3, [pc, #40]	; (8000794 <can_readFrame+0xc0>)
 800076a:	689b      	ldr	r3, [r3, #8]
 800076c:	4a07      	ldr	r2, [pc, #28]	; (800078c <can_readFrame+0xb8>)
 800076e:	79d2      	ldrb	r2, [r2, #7]
 8000770:	4413      	add	r3, r2
 8000772:	4a08      	ldr	r2, [pc, #32]	; (8000794 <can_readFrame+0xc0>)
 8000774:	6093      	str	r3, [r2, #8]

        can_current_msg.id_CAN = RxHeader.StdId;
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <can_readFrame+0xbc>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a06      	ldr	r2, [pc, #24]	; (8000794 <can_readFrame+0xc0>)
 800077c:	60d3      	str	r3, [r2, #12]
    }
    return fill_level;
 800077e:	687b      	ldr	r3, [r7, #4]
}
 8000780:	4618      	mov	r0, r3
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	200076a8 	.word	0x200076a8
 800078c:	2000726c 	.word	0x2000726c
 8000790:	2000728c 	.word	0x2000728c
 8000794:	20007258 	.word	0x20007258

08000798 <can_init>:


void can_init(void) {
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	CAN_Config(CAN_ID_PROPULSION_BOARD);
 800079c:	2005      	movs	r0, #5
 800079e:	f7ff fefb 	bl	8000598 <CAN_Config>
}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
	...

080007a8 <can_send_thread>:


void can_send_thread(void * arg) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
	static TickType_t last_wake_time;
	static const TickType_t period = pdMS_TO_TICKS(CAN_HEART_BEAT);

	last_wake_time = xTaskGetTickCount();
 80007b0:	f009 fb12 	bl	8009dd8 <xTaskGetTickCount>
 80007b4:	4603      	mov	r3, r0
 80007b6:	4a04      	ldr	r2, [pc, #16]	; (80007c8 <can_send_thread+0x20>)
 80007b8:	6013      	str	r3, [r2, #0]

	for(;;) {

		//SEND DATA HERE

		vTaskDelayUntil( &last_wake_time, period );
 80007ba:	4b04      	ldr	r3, [pc, #16]	; (80007cc <can_send_thread+0x24>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4619      	mov	r1, r3
 80007c0:	4801      	ldr	r0, [pc, #4]	; (80007c8 <can_send_thread+0x20>)
 80007c2:	f009 f94d 	bl	8009a60 <vTaskDelayUntil>
 80007c6:	e7f8      	b.n	80007ba <can_send_thread+0x12>
 80007c8:	20000094 	.word	0x20000094
 80007cc:	0800ad88 	.word	0x0800ad88

080007d0 <util_encode_u32>:
	data[0] = value;
	data[1] = value>>8;
	data[2] = 0x00;
	data[3] = 0x00;
}
static inline void util_encode_u32(uint8_t * data, uint32_t value) {
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	6039      	str	r1, [r7, #0]
	data[0] = value;
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	b2da      	uxtb	r2, r3
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	701a      	strb	r2, [r3, #0]
	data[1] = value>>8;
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	0a1a      	lsrs	r2, r3, #8
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	3301      	adds	r3, #1
 80007ea:	b2d2      	uxtb	r2, r2
 80007ec:	701a      	strb	r2, [r3, #0]
	data[2] = value>>16;
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	0c1a      	lsrs	r2, r3, #16
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	3302      	adds	r3, #2
 80007f6:	b2d2      	uxtb	r2, r2
 80007f8:	701a      	strb	r2, [r3, #0]
	data[3] = value>>24;
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	0e1a      	lsrs	r2, r3, #24
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	3303      	adds	r3, #3
 8000802:	b2d2      	uxtb	r2, r2
 8000804:	701a      	strb	r2, [r3, #0]
}
 8000806:	bf00      	nop
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr

08000812 <util_encode_i32>:
	data[0] = value;
	data[1] = value>>8;
	data[2] = 0x00;
	data[3] = 0x00;
}
static inline void util_encode_i32(uint8_t * data, int32_t value) {
 8000812:	b480      	push	{r7}
 8000814:	b083      	sub	sp, #12
 8000816:	af00      	add	r7, sp, #0
 8000818:	6078      	str	r0, [r7, #4]
 800081a:	6039      	str	r1, [r7, #0]
	data[0] = value;
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	b2da      	uxtb	r2, r3
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	701a      	strb	r2, [r3, #0]
	data[1] = value>>8;
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	121a      	asrs	r2, r3, #8
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	3301      	adds	r3, #1
 800082c:	b2d2      	uxtb	r2, r2
 800082e:	701a      	strb	r2, [r3, #0]
	data[2] = value>>16;
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	141a      	asrs	r2, r3, #16
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	3302      	adds	r3, #2
 8000838:	b2d2      	uxtb	r2, r2
 800083a:	701a      	strb	r2, [r3, #0]
	data[3] = value>>24;
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	161a      	asrs	r2, r3, #24
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	3303      	adds	r3, #3
 8000844:	b2d2      	uxtb	r2, r2
 8000846:	701a      	strb	r2, [r3, #0]
}
 8000848:	bf00      	nop
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr

08000854 <util_decode_u32>:

static inline uint16_t util_decode_u16(uint8_t * data) {
	return (uint16_t) data[0] | data[1] << 8;
}

static inline uint32_t util_decode_u32(uint8_t * data) {
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	return (uint32_t) data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	461a      	mov	r2, r3
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	3301      	adds	r3, #1
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	021b      	lsls	r3, r3, #8
 800086a:	4313      	orrs	r3, r2
 800086c:	687a      	ldr	r2, [r7, #4]
 800086e:	3202      	adds	r2, #2
 8000870:	7812      	ldrb	r2, [r2, #0]
 8000872:	0412      	lsls	r2, r2, #16
 8000874:	4313      	orrs	r3, r2
 8000876:	687a      	ldr	r2, [r7, #4]
 8000878:	3203      	adds	r2, #3
 800087a:	7812      	ldrb	r2, [r2, #0]
 800087c:	0612      	lsls	r2, r2, #24
 800087e:	4313      	orrs	r3, r2
}
 8000880:	4618      	mov	r0, r3
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <util_decode_i32>:

static inline int16_t util_decode_i16(uint8_t * data) {
	return (int16_t) data[0] | data[1] << 8;
}

static inline int32_t util_decode_i32(uint8_t * data) {
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
	return (int32_t) data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	461a      	mov	r2, r3
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	3301      	adds	r3, #1
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	021b      	lsls	r3, r3, #8
 80008a2:	431a      	orrs	r2, r3
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	3302      	adds	r3, #2
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	041b      	lsls	r3, r3, #16
 80008ac:	431a      	orrs	r2, r3
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	3303      	adds	r3, #3
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	061b      	lsls	r3, r3, #24
 80008b6:	4313      	orrs	r3, r2
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <cm4_global_init>:

/**********************
 *	DECLARATIONS
 **********************/

void cm4_global_init(void) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
	cm4_busy_sem = xSemaphoreCreateMutexStatic(&cm4_busy_sem_buffer);
 80008c8:	4904      	ldr	r1, [pc, #16]	; (80008dc <cm4_global_init+0x18>)
 80008ca:	2001      	movs	r0, #1
 80008cc:	f008 fbc9 	bl	8009062 <xQueueCreateMutexStatic>
 80008d0:	4603      	mov	r3, r0
 80008d2:	4a03      	ldr	r2, [pc, #12]	; (80008e0 <cm4_global_init+0x1c>)
 80008d4:	6013      	str	r3, [r2, #0]
}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	2000009c 	.word	0x2000009c
 80008e0:	20000098 	.word	0x20000098

080008e4 <cm4_init>:

void cm4_init(CM4_INST_t * cm4) {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af02      	add	r7, sp, #8
 80008ea:	6078      	str	r0, [r7, #4]
	static uint32_t id_counter = 0;
	cm4->id = id_counter++;
 80008ec:	4b17      	ldr	r3, [pc, #92]	; (800094c <cm4_init+0x68>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	1c5a      	adds	r2, r3, #1
 80008f2:	4916      	ldr	r1, [pc, #88]	; (800094c <cm4_init+0x68>)
 80008f4:	600a      	str	r2, [r1, #0]
 80008f6:	687a      	ldr	r2, [r7, #4]
 80008f8:	6013      	str	r3, [r2, #0]
	cm4->garbage_counter = 0;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	f503 53a4 	add.w	r3, r3, #5248	; 0x1480
 8000900:	3304      	adds	r3, #4
 8000902:	2200      	movs	r2, #0
 8000904:	801a      	strh	r2, [r3, #0]
	cm4->rx_sem = xSemaphoreCreateBinaryStatic(&cm4->rx_sem_buffer);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 800090c:	331c      	adds	r3, #28
 800090e:	2203      	movs	r2, #3
 8000910:	9200      	str	r2, [sp, #0]
 8000912:	2200      	movs	r2, #0
 8000914:	2100      	movs	r1, #0
 8000916:	2001      	movs	r0, #1
 8000918:	f008 faf6 	bl	8008f08 <xQueueGenericCreateStatic>
 800091c:	4602      	mov	r2, r0
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8000924:	3318      	adds	r3, #24
 8000926:	601a      	str	r2, [r3, #0]
	msv2_init(&cm4->msv2);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	3304      	adds	r3, #4
 800092c:	4618      	mov	r0, r3
 800092e:	f001 f865 	bl	80019fc <msv2_init>
	serial_init(&cm4->ser, &CM4_UART, cm4, cm4_decode_fcn);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	f503 5080 	add.w	r0, r3, #4096	; 0x1000
 8000938:	3018      	adds	r0, #24
 800093a:	4b05      	ldr	r3, [pc, #20]	; (8000950 <cm4_init+0x6c>)
 800093c:	687a      	ldr	r2, [r7, #4]
 800093e:	4905      	ldr	r1, [pc, #20]	; (8000954 <cm4_init+0x70>)
 8000940:	f001 fb30 	bl	8001fa4 <serial_init>


}
 8000944:	bf00      	nop
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	200000e4 	.word	0x200000e4
 8000950:	08000959 	.word	0x08000959
 8000954:	20007d34 	.word	0x20007d34

08000958 <cm4_decode_fcn>:


SERIAL_RET_t cm4_decode_fcn(void * inst, uint8_t data) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	460b      	mov	r3, r1
 8000962:	70fb      	strb	r3, [r7, #3]
	CM4_INST_t * cm4 = (CM4_INST_t *) inst;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	60fb      	str	r3, [r7, #12]
	MSV2_ERROR_t tmp = msv2_decode_fragment(&cm4->msv2, data);
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	3304      	adds	r3, #4
 800096c:	78fa      	ldrb	r2, [r7, #3]
 800096e:	4611      	mov	r1, r2
 8000970:	4618      	mov	r0, r3
 8000972:	f001 f93d 	bl	8001bf0 <msv2_decode_fragment>
 8000976:	4603      	mov	r3, r0
 8000978:	72fb      	strb	r3, [r7, #11]
	if(tmp == MSV2_SUCCESS || tmp == MSV2_WRONG_CRC) {
 800097a:	7afb      	ldrb	r3, [r7, #11]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d002      	beq.n	8000986 <cm4_decode_fcn+0x2e>
 8000980:	7afb      	ldrb	r3, [r7, #11]
 8000982:	2b02      	cmp	r3, #2
 8000984:	d109      	bne.n	800099a <cm4_decode_fcn+0x42>
		xSemaphoreGive(cm4->rx_sem);
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 800098c:	3318      	adds	r3, #24
 800098e:	6818      	ldr	r0, [r3, #0]
 8000990:	2300      	movs	r3, #0
 8000992:	2200      	movs	r2, #0
 8000994:	2100      	movs	r1, #0
 8000996:	f008 fb7f 	bl	8009098 <xQueueGenericSend>
	}
	return tmp;
 800099a:	7afb      	ldrb	r3, [r7, #11]
}
 800099c:	4618      	mov	r0, r3
 800099e:	3710      	adds	r7, #16
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <cm4_send>:



CM4_ERROR_t cm4_send(CM4_INST_t * cm4, uint8_t cmd, uint8_t * data, uint16_t length, uint8_t ** resp_data, uint16_t * resp_len) {
 80009a4:	b590      	push	{r4, r7, lr}
 80009a6:	b087      	sub	sp, #28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	60f8      	str	r0, [r7, #12]
 80009ac:	607a      	str	r2, [r7, #4]
 80009ae:	461a      	mov	r2, r3
 80009b0:	460b      	mov	r3, r1
 80009b2:	72fb      	strb	r3, [r7, #11]
 80009b4:	4613      	mov	r3, r2
 80009b6:	813b      	strh	r3, [r7, #8]
	uint16_t frame_length = msv2_create_frame(&cm4->msv2, cmd, length/2, data);
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	1d18      	adds	r0, r3, #4
 80009bc:	893b      	ldrh	r3, [r7, #8]
 80009be:	085b      	lsrs	r3, r3, #1
 80009c0:	b29b      	uxth	r3, r3
 80009c2:	b2da      	uxtb	r2, r3
 80009c4:	7af9      	ldrb	r1, [r7, #11]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	f001 f82c 	bl	8001a24 <msv2_create_frame>
 80009cc:	4603      	mov	r3, r0
 80009ce:	82fb      	strh	r3, [r7, #22]
	serial_send(&cm4->ser, msv2_tx_data(&cm4->msv2), frame_length);
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	f503 5480 	add.w	r4, r3, #4096	; 0x1000
 80009d6:	3418      	adds	r4, #24
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	3304      	adds	r3, #4
 80009dc:	4618      	mov	r0, r3
 80009de:	f001 f9fb 	bl	8001dd8 <msv2_tx_data>
 80009e2:	4601      	mov	r1, r0
 80009e4:	8afb      	ldrh	r3, [r7, #22]
 80009e6:	461a      	mov	r2, r3
 80009e8:	4620      	mov	r0, r4
 80009ea:	f001 fb1b 	bl	8002024 <serial_send>
	if(cm4->rx_sem == NULL) {
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 80009f4:	3318      	adds	r3, #24
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d101      	bne.n	8000a00 <cm4_send+0x5c>
		return CM4_LOCAL_ERROR;
 80009fc:	2308      	movs	r3, #8
 80009fe:	e04a      	b.n	8000a96 <cm4_send+0xf2>
	}
	if(xSemaphoreTake(cm4->rx_sem, COMM_TIMEOUT) == pdTRUE) {
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8000a06:	3318      	adds	r3, #24
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	210a      	movs	r1, #10
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f008 fccf 	bl	80093b0 <xQueueSemaphoreTake>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d123      	bne.n	8000a60 <cm4_send+0xbc>
		cm4->garbage_counter = 0;
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	f503 53a4 	add.w	r3, r3, #5248	; 0x1480
 8000a1e:	3304      	adds	r3, #4
 8000a20:	2200      	movs	r2, #0
 8000a22:	801a      	strh	r2, [r3, #0]
		if(cm4->msv2.rx.opcode == cmd) {
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	7a1b      	ldrb	r3, [r3, #8]
 8000a28:	7afa      	ldrb	r2, [r7, #11]
 8000a2a:	429a      	cmp	r2, r3
 8000a2c:	d110      	bne.n	8000a50 <cm4_send+0xac>
			if(resp_len != NULL && resp_data != NULL) {
 8000a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d00b      	beq.n	8000a4c <cm4_send+0xa8>
 8000a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d008      	beq.n	8000a4c <cm4_send+0xa8>
				*resp_len = cm4->msv2.rx.length;
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	89da      	ldrh	r2, [r3, #14]
 8000a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a40:	801a      	strh	r2, [r3, #0]
				*resp_data = cm4->msv2.rx.data;
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	f103 0212 	add.w	r2, r3, #18
 8000a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a4a:	601a      	str	r2, [r3, #0]
			}
			return CM4_SUCCESS;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	e022      	b.n	8000a96 <cm4_send+0xf2>
		} else {
			if(resp_len != NULL) {
 8000a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d002      	beq.n	8000a5c <cm4_send+0xb8>
				*resp_len = 0;
 8000a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a58:	2200      	movs	r2, #0
 8000a5a:	801a      	strh	r2, [r3, #0]
			}
			return CM4_REMOTE_ERROR;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	e01a      	b.n	8000a96 <cm4_send+0xf2>
		}



	} else {
		cm4->garbage_counter++;
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	f503 53a4 	add.w	r3, r3, #5248	; 0x1480
 8000a66:	3304      	adds	r3, #4
 8000a68:	881b      	ldrh	r3, [r3, #0]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	b29a      	uxth	r2, r3
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	f503 53a4 	add.w	r3, r3, #5248	; 0x1480
 8000a74:	3304      	adds	r3, #4
 8000a76:	801a      	strh	r2, [r3, #0]
		if(cm4->garbage_counter > GARBAGE_THRESHOLD) {
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	f503 53a4 	add.w	r3, r3, #5248	; 0x1480
 8000a7e:	3304      	adds	r3, #4
 8000a80:	881b      	ldrh	r3, [r3, #0]
 8000a82:	2b0a      	cmp	r3, #10
 8000a84:	d906      	bls.n	8000a94 <cm4_send+0xf0>
			serial_garbage_clean(&cm4->ser);
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000a8c:	3318      	adds	r3, #24
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f001 fada 	bl	8002048 <serial_garbage_clean>
		}
		return CM4_TIMEOUT;
 8000a94:	2301      	movs	r3, #1
	}

}
 8000a96:	4618      	mov	r0, r3
 8000a98:	371c      	adds	r7, #28
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd90      	pop	{r4, r7, pc}

08000a9e <cm4_ping>:

CM4_ERROR_t cm4_ping(CM4_INST_t * cm4) {
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	b086      	sub	sp, #24
 8000aa2:	af02      	add	r7, sp, #8
 8000aa4:	6078      	str	r0, [r7, #4]
	CM4_ERROR_t error = 0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	73fb      	strb	r3, [r7, #15]
	uint8_t data[] = {0xc5, 0x5c};
 8000aaa:	f645 43c5 	movw	r3, #23749	; 0x5cc5
 8000aae:	81bb      	strh	r3, [r7, #12]
	error |= cm4_send(cm4, CM4_PING, data, 2, NULL, NULL);
 8000ab0:	f107 020c 	add.w	r2, r7, #12
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	9301      	str	r3, [sp, #4]
 8000ab8:	2300      	movs	r3, #0
 8000aba:	9300      	str	r3, [sp, #0]
 8000abc:	2302      	movs	r3, #2
 8000abe:	2100      	movs	r1, #0
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f7ff ff6f 	bl	80009a4 <cm4_send>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	461a      	mov	r2, r3
 8000aca:	7bfb      	ldrb	r3, [r7, #15]
 8000acc:	4313      	orrs	r3, r2
 8000ace:	73fb      	strb	r3, [r7, #15]

	return error;
 8000ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3710      	adds	r7, #16
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <cm4_transaction>:


CM4_ERROR_t cm4_transaction(CM4_INST_t * cm4, CM4_PAYLOAD_SENSOR_t * sens, CM4_PAYLOAD_COMMAND_t * cmd) {
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b096      	sub	sp, #88	; 0x58
 8000ade:	af02      	add	r7, sp, #8
 8000ae0:	60f8      	str	r0, [r7, #12]
 8000ae2:	60b9      	str	r1, [r7, #8]
 8000ae4:	607a      	str	r2, [r7, #4]
	CM4_ERROR_t error = 0;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t * recv_data;
	uint16_t recv_len = 0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	uint16_t send_len = 52;
 8000af2:	2334      	movs	r3, #52	; 0x34
 8000af4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	uint8_t send_data[52];

	util_encode_u32(send_data, sens->timestamp);
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	f107 0310 	add.w	r3, r7, #16
 8000b00:	4611      	mov	r1, r2
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff fe64 	bl	80007d0 <util_encode_u32>
	util_encode_i32(send_data+4, sens->acc_x);
 8000b08:	f107 0310 	add.w	r3, r7, #16
 8000b0c:	3304      	adds	r3, #4
 8000b0e:	68ba      	ldr	r2, [r7, #8]
 8000b10:	6852      	ldr	r2, [r2, #4]
 8000b12:	4611      	mov	r1, r2
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff fe7c 	bl	8000812 <util_encode_i32>
	util_encode_i32(send_data+8, sens->acc_y);
 8000b1a:	f107 0310 	add.w	r3, r7, #16
 8000b1e:	3308      	adds	r3, #8
 8000b20:	68ba      	ldr	r2, [r7, #8]
 8000b22:	6892      	ldr	r2, [r2, #8]
 8000b24:	4611      	mov	r1, r2
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff fe73 	bl	8000812 <util_encode_i32>
	util_encode_i32(send_data+12, sens->acc_z);
 8000b2c:	f107 0310 	add.w	r3, r7, #16
 8000b30:	330c      	adds	r3, #12
 8000b32:	68ba      	ldr	r2, [r7, #8]
 8000b34:	68d2      	ldr	r2, [r2, #12]
 8000b36:	4611      	mov	r1, r2
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff fe6a 	bl	8000812 <util_encode_i32>

	util_encode_i32(send_data+16, sens->gyro_x);
 8000b3e:	f107 0310 	add.w	r3, r7, #16
 8000b42:	3310      	adds	r3, #16
 8000b44:	68ba      	ldr	r2, [r7, #8]
 8000b46:	6912      	ldr	r2, [r2, #16]
 8000b48:	4611      	mov	r1, r2
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f7ff fe61 	bl	8000812 <util_encode_i32>
	util_encode_i32(send_data+20, sens->gyro_y);
 8000b50:	f107 0310 	add.w	r3, r7, #16
 8000b54:	3314      	adds	r3, #20
 8000b56:	68ba      	ldr	r2, [r7, #8]
 8000b58:	6952      	ldr	r2, [r2, #20]
 8000b5a:	4611      	mov	r1, r2
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f7ff fe58 	bl	8000812 <util_encode_i32>
	util_encode_i32(send_data+24, sens->gyro_z);
 8000b62:	f107 0310 	add.w	r3, r7, #16
 8000b66:	3318      	adds	r3, #24
 8000b68:	68ba      	ldr	r2, [r7, #8]
 8000b6a:	6992      	ldr	r2, [r2, #24]
 8000b6c:	4611      	mov	r1, r2
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff fe4f 	bl	8000812 <util_encode_i32>

	util_encode_i32(send_data+28, sens->baro);
 8000b74:	f107 0310 	add.w	r3, r7, #16
 8000b78:	331c      	adds	r3, #28
 8000b7a:	68ba      	ldr	r2, [r7, #8]
 8000b7c:	69d2      	ldr	r2, [r2, #28]
 8000b7e:	4611      	mov	r1, r2
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff fe46 	bl	8000812 <util_encode_i32>
	util_encode_i32(send_data+32, sens->cc_pressure);
 8000b86:	f107 0310 	add.w	r3, r7, #16
 8000b8a:	3320      	adds	r3, #32
 8000b8c:	68ba      	ldr	r2, [r7, #8]
 8000b8e:	6a12      	ldr	r2, [r2, #32]
 8000b90:	4611      	mov	r1, r2
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff fe3d 	bl	8000812 <util_encode_i32>

	util_encode_i32(send_data+36, sens->dynamixel[0]);
 8000b98:	f107 0310 	add.w	r3, r7, #16
 8000b9c:	3324      	adds	r3, #36	; 0x24
 8000b9e:	68ba      	ldr	r2, [r7, #8]
 8000ba0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000ba2:	4611      	mov	r1, r2
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff fe34 	bl	8000812 <util_encode_i32>
	util_encode_i32(send_data+40, sens->dynamixel[1]);
 8000baa:	f107 0310 	add.w	r3, r7, #16
 8000bae:	3328      	adds	r3, #40	; 0x28
 8000bb0:	68ba      	ldr	r2, [r7, #8]
 8000bb2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000bb4:	4611      	mov	r1, r2
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff fe2b 	bl	8000812 <util_encode_i32>
	util_encode_i32(send_data+44, sens->dynamixel[2]);
 8000bbc:	f107 0310 	add.w	r3, r7, #16
 8000bc0:	332c      	adds	r3, #44	; 0x2c
 8000bc2:	68ba      	ldr	r2, [r7, #8]
 8000bc4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000bc6:	4611      	mov	r1, r2
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff fe22 	bl	8000812 <util_encode_i32>
	util_encode_i32(send_data+48, sens->dynamixel[3]);
 8000bce:	f107 0310 	add.w	r3, r7, #16
 8000bd2:	3330      	adds	r3, #48	; 0x30
 8000bd4:	68ba      	ldr	r2, [r7, #8]
 8000bd6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000bd8:	4611      	mov	r1, r2
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff fe19 	bl	8000812 <util_encode_i32>

	error |= cm4_send(cm4, CM4_PAYLOAD, send_data, send_len , &recv_data, &recv_len);
 8000be0:	f8b7 104c 	ldrh.w	r1, [r7, #76]	; 0x4c
 8000be4:	f107 0210 	add.w	r2, r7, #16
 8000be8:	f107 0346 	add.w	r3, r7, #70	; 0x46
 8000bec:	9301      	str	r3, [sp, #4]
 8000bee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000bf2:	9300      	str	r3, [sp, #0]
 8000bf4:	460b      	mov	r3, r1
 8000bf6:	2102      	movs	r1, #2
 8000bf8:	68f8      	ldr	r0, [r7, #12]
 8000bfa:	f7ff fed3 	bl	80009a4 <cm4_send>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	461a      	mov	r2, r3
 8000c02:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000c06:	4313      	orrs	r3, r2
 8000c08:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if(recv_len == 24) {
 8000c0c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8000c10:	2b18      	cmp	r3, #24
 8000c12:	d12e      	bne.n	8000c72 <cm4_transaction+0x198>
		cmd->timestamp = util_decode_u32(recv_data);
 8000c14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff fe1c 	bl	8000854 <util_decode_u32>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	601a      	str	r2, [r3, #0]
		cmd->thrust = util_decode_i32(recv_data+4);
 8000c22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c24:	3304      	adds	r3, #4
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff fe30 	bl	800088c <util_decode_i32>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	605a      	str	r2, [r3, #4]

		cmd->dynamixel[0] = util_decode_i32(recv_data+8);
 8000c32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c34:	3308      	adds	r3, #8
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff fe28 	bl	800088c <util_decode_i32>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	609a      	str	r2, [r3, #8]
		cmd->dynamixel[1] = util_decode_i32(recv_data+12);
 8000c42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c44:	330c      	adds	r3, #12
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff fe20 	bl	800088c <util_decode_i32>
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	60da      	str	r2, [r3, #12]
		cmd->dynamixel[2] = util_decode_i32(recv_data+16);
 8000c52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c54:	3310      	adds	r3, #16
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff fe18 	bl	800088c <util_decode_i32>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	611a      	str	r2, [r3, #16]
		cmd->dynamixel[3] = util_decode_i32(recv_data+20);
 8000c62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c64:	3314      	adds	r3, #20
 8000c66:	4618      	mov	r0, r3
 8000c68:	f7ff fe10 	bl	800088c <util_decode_i32>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	615a      	str	r2, [r3, #20]
	}

	return CM4_SUCCESS;
 8000c72:	2300      	movs	r3, #0
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3750      	adds	r7, #80	; 0x50
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <cm4_boot>:

CM4_ERROR_t cm4_boot(CM4_INST_t * cm4) {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
	allow_boot();
 8000c84:	f000 f86c 	bl	8000d60 <allow_boot>
	return CM4_SUCCESS;
 8000c88:	2300      	movs	r3, #0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <cm4_is_ready>:

CM4_ERROR_t cm4_is_ready(CM4_INST_t * cm4, uint8_t * ready) {
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b082      	sub	sp, #8
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
 8000c9a:	6039      	str	r1, [r7, #0]
	if(ready == NULL){
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d101      	bne.n	8000ca6 <cm4_is_ready+0x14>
		return CM4_LOCAL_ERROR;
 8000ca2:	2308      	movs	r3, #8
 8000ca4:	e011      	b.n	8000cca <cm4_is_ready+0x38>
	}
	*ready = 0;
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	2200      	movs	r2, #0
 8000caa:	701a      	strb	r2, [r3, #0]
	if(is_booted()) {
 8000cac:	f000 f846 	bl	8000d3c <is_booted>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d008      	beq.n	8000cc8 <cm4_is_ready+0x36>
		if(cm4_ping(cm4) == CM4_SUCCESS) {
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	f7ff fef1 	bl	8000a9e <cm4_ping>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d102      	bne.n	8000cc8 <cm4_is_ready+0x36>
			*ready = 1;
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	701a      	strb	r2, [r3, #0]
		}
	}
	return CM4_SUCCESS;
 8000cc8:	2300      	movs	r3, #0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <cm4_shutdown>:

CM4_ERROR_t cm4_shutdown(CM4_INST_t * cm4) {
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b086      	sub	sp, #24
 8000cd6:	af02      	add	r7, sp, #8
 8000cd8:	6078      	str	r0, [r7, #4]
	//send shutdown command through uart
	uint8_t data[] = {0xc8, 0x8c};
 8000cda:	f648 43c8 	movw	r3, #36040	; 0x8cc8
 8000cde:	81bb      	strh	r3, [r7, #12]
	cm4_send(cm4, CM4_SHUTDOWN, data, 2, NULL, NULL);
 8000ce0:	f107 020c 	add.w	r2, r7, #12
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	9301      	str	r3, [sp, #4]
 8000ce8:	2300      	movs	r3, #0
 8000cea:	9300      	str	r3, [sp, #0]
 8000cec:	2302      	movs	r3, #2
 8000cee:	2101      	movs	r1, #1
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f7ff fe57 	bl	80009a4 <cm4_send>

	return CM4_SUCCESS;
 8000cf6:	2300      	movs	r3, #0
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3710      	adds	r7, #16
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <cm4_is_shutdown>:

CM4_ERROR_t cm4_is_shutdown(CM4_INST_t * cm4, uint8_t * shutdown) {
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	6039      	str	r1, [r7, #0]
	if(shutdown == NULL){
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d101      	bne.n	8000d14 <cm4_is_shutdown+0x14>
		return CM4_LOCAL_ERROR;
 8000d10:	2308      	movs	r3, #8
 8000d12:	e00f      	b.n	8000d34 <cm4_is_shutdown+0x34>
	}
	if(!is_booted()) {
 8000d14:	f000 f812 	bl	8000d3c <is_booted>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d106      	bne.n	8000d2c <cm4_is_shutdown+0x2c>
		//check wheter the CM4 answers
		//if answers
		hold_boot();
 8000d1e:	f000 f82d 	bl	8000d7c <hold_boot>
		*shutdown = 1;
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	2201      	movs	r2, #1
 8000d26:	701a      	strb	r2, [r3, #0]
		return CM4_SUCCESS;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	e003      	b.n	8000d34 <cm4_is_shutdown+0x34>
	} else {
		*shutdown = 0;
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	2200      	movs	r2, #0
 8000d30:	701a      	strb	r2, [r3, #0]
		return CM4_SUCCESS;
 8000d32:	2300      	movs	r3, #0
	}
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <is_booted>:




static uint8_t is_booted(void) {
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
	return CM4_RUN_PG_PORT->IDR & CM4_RUN_PG_PIN ?1:0;
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <is_booted+0x20>)
 8000d42:	691b      	ldr	r3, [r3, #16]
 8000d44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	bf14      	ite	ne
 8000d4c:	2301      	movne	r3, #1
 8000d4e:	2300      	moveq	r3, #0
 8000d50:	b2db      	uxtb	r3, r3
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	40020400 	.word	0x40020400

08000d60 <allow_boot>:

static void allow_boot(void) {
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
	CM4_GLOBAL_EN_PORT->BSRR = CM4_GLOBAL_EN_PIN;
 8000d64:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <allow_boot+0x18>)
 8000d66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d6a:	619a      	str	r2, [r3, #24]
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	40020000 	.word	0x40020000

08000d7c <hold_boot>:

static void hold_boot(void) {
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
	CM4_GLOBAL_EN_PORT->BSRR = CM4_GLOBAL_EN_PIN << 16;
 8000d80:	4b04      	ldr	r3, [pc, #16]	; (8000d94 <hold_boot+0x18>)
 8000d82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d86:	619a      	str	r2, [r3, #24]
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	40020000 	.word	0x40020000

08000d98 <control_thread>:

/**********************
 *	DECLARATIONS
 **********************/

void control_thread(void * arg) {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
	static TickType_t last_wake_time;
	static const TickType_t period = pdMS_TO_TICKS(CONTROL_HEART_BEAT);



	led_init();
 8000da0:	f000 fdac 	bl	80018fc <led_init>

	init_control(&control);
 8000da4:	4814      	ldr	r0, [pc, #80]	; (8000df8 <control_thread+0x60>)
 8000da6:	f000 f875 	bl	8000e94 <init_control>
	servo_config(&tvc_servo);

	control.tvc_servo = &tvc_servo;
#endif

	cm4_global_init();
 8000daa:	f7ff fd8b 	bl	80008c4 <cm4_global_init>

	static CM4_INST_t cm4;

	cm4_init(&cm4);
 8000dae:	4813      	ldr	r0, [pc, #76]	; (8000dfc <control_thread+0x64>)
 8000db0:	f7ff fd98 	bl	80008e4 <cm4_init>

	control.cm4 = &cm4;
 8000db4:	4b10      	ldr	r3, [pc, #64]	; (8000df8 <control_thread+0x60>)
 8000db6:	4a11      	ldr	r2, [pc, #68]	; (8000dfc <control_thread+0x64>)
 8000db8:	619a      	str	r2, [r3, #24]


	init_idle(&control);
 8000dba:	480f      	ldr	r0, [pc, #60]	; (8000df8 <control_thread+0x60>)
 8000dbc:	f000 f87b 	bl	8000eb6 <init_idle>



	last_wake_time = xTaskGetTickCount();
 8000dc0:	f009 f80a 	bl	8009dd8 <xTaskGetTickCount>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	4a0e      	ldr	r2, [pc, #56]	; (8000e00 <control_thread+0x68>)
 8000dc8:	6013      	str	r3, [r2, #0]
		} else {
			servo_disable_led(control.tvc_servo, NULL);
		}
#endif

		control_update(&control);
 8000dca:	480b      	ldr	r0, [pc, #44]	; (8000df8 <control_thread+0x60>)
 8000dcc:	f000 f81e 	bl	8000e0c <control_update>


		if(control.state < CS_NUM && control.state >= 0) {
 8000dd0:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <control_thread+0x60>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2b05      	cmp	r3, #5
 8000dd6:	d807      	bhi.n	8000de8 <control_thread+0x50>
			control_fcn[control.state](&control);
 8000dd8:	4b07      	ldr	r3, [pc, #28]	; (8000df8 <control_thread+0x60>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	461a      	mov	r2, r3
 8000dde:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <control_thread+0x6c>)
 8000de0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000de4:	4804      	ldr	r0, [pc, #16]	; (8000df8 <control_thread+0x60>)
 8000de6:	4798      	blx	r3
		}
		vTaskDelayUntil( &last_wake_time, period );
 8000de8:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <control_thread+0x70>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4619      	mov	r1, r3
 8000dee:	4804      	ldr	r0, [pc, #16]	; (8000e00 <control_thread+0x68>)
 8000df0:	f008 fe36 	bl	8009a60 <vTaskDelayUntil>
		control_update(&control);
 8000df4:	e7e9      	b.n	8000dca <control_thread+0x32>
 8000df6:	bf00      	nop
 8000df8:	200000e8 	.word	0x200000e8
 8000dfc:	2000016c 	.word	0x2000016c
 8000e00:	200015f4 	.word	0x200015f4
 8000e04:	20000024 	.word	0x20000024
 8000e08:	0800ad8c 	.word	0x0800ad8c

08000e0c <control_update>:
	}
}


static void control_update(CONTROL_INST_t * control) {
 8000e0c:	b590      	push	{r4, r7, lr}
 8000e0e:	b087      	sub	sp, #28
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6178      	str	r0, [r7, #20]

	control->last_time = control->time;
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	685a      	ldr	r2, [r3, #4]
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	609a      	str	r2, [r3, #8]
	control->time = HAL_GetTick();
 8000e1c:	f002 fc5c 	bl	80036d8 <HAL_GetTick>
 8000e20:	4602      	mov	r2, r0
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	605a      	str	r2, [r3, #4]
	control->iter++;
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	695b      	ldr	r3, [r3, #20]
 8000e2a:	1c5a      	adds	r2, r3, #1
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	615a      	str	r2, [r3, #20]

	if(control->counter_active) {
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	7c1b      	ldrb	r3, [r3, #16]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d016      	beq.n	8000e66 <control_update+0x5a>
		control->counter -= (control->time - control->last_time);
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	689a      	ldr	r2, [r3, #8]
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	1ad3      	subs	r3, r2, r3
 8000e48:	440b      	add	r3, r1
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	60da      	str	r2, [r3, #12]
	}

	while(can_msgPending()) {
 8000e50:	e009      	b.n	8000e66 <control_update+0x5a>
		control->msg = can_readBuffer();
 8000e52:	697c      	ldr	r4, [r7, #20]
 8000e54:	463b      	mov	r3, r7
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff fc08 	bl	800066c <can_readBuffer>
 8000e5c:	3428      	adds	r4, #40	; 0x28
 8000e5e:	463b      	mov	r3, r7
 8000e60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	while(can_msgPending()) {
 8000e66:	f7ff fbe7 	bl	8000638 <can_msgPending>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d1f0      	bne.n	8000e52 <control_update+0x46>
	servo_sync(control->tvc_servo);
#endif

	//init error if there is an issue with a motor

	if(control_sched_should_run(control, CONTROL_SCHED_ABORT)) {
 8000e70:	2101      	movs	r1, #1
 8000e72:	6978      	ldr	r0, [r7, #20]
 8000e74:	f000 f9d6 	bl	8001224 <control_sched_should_run>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d006      	beq.n	8000e8c <control_update+0x80>
		init_abort(control);
 8000e7e:	6978      	ldr	r0, [r7, #20]
 8000e80:	f000 f8cb 	bl	800101a <init_abort>
		control_sched_done(control, CONTROL_SCHED_ABORT);
 8000e84:	2101      	movs	r1, #1
 8000e86:	6978      	ldr	r0, [r7, #20]
 8000e88:	f000 f9e1 	bl	800124e <control_sched_done>
	}
}
 8000e8c:	bf00      	nop
 8000e8e:	371c      	adds	r7, #28
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd90      	pop	{r4, r7, pc}

08000e94 <init_control>:

static void init_control(CONTROL_INST_t * control) {
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
	control->sched = CONTROL_SCHED_NOTHING;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	control->counter_active = 0;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	741a      	strb	r2, [r3, #16]
}
 8000eaa:	bf00      	nop
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr

08000eb6 <init_idle>:

static void init_idle(CONTROL_INST_t * control) {
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b082      	sub	sp, #8
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
	control->state = CS_IDLE;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	701a      	strb	r2, [r3, #0]
	led_set_color(LED_GREEN);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	21ff      	movs	r1, #255	; 0xff
 8000ec8:	2000      	movs	r0, #0
 8000eca:	f000 fd3b 	bl	8001944 <led_set_color>
	storage_disable();
 8000ece:	f001 f9fb 	bl	80022c8 <storage_disable>
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <idle>:

static void idle(CONTROL_INST_t * control) {
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b082      	sub	sp, #8
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
	if(control_sched_should_run(control, CONTROL_SCHED_MOVE_TVC)) {
		servo_move(control->tvc_servo, control->tvc_mov_target);
		control_sched_done(control, CONTROL_SCHED_MOVE_TVC);
	}
#endif
	if(control_sched_should_run(control, CONTROL_SCHED_BOOT)) {
 8000ee2:	2102      	movs	r1, #2
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f000 f99d 	bl	8001224 <control_sched_should_run>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d006      	beq.n	8000efe <idle+0x24>
		init_boot(control);
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f000 f808 	bl	8000f06 <init_boot>
		control_sched_done(control, CONTROL_SCHED_BOOT);
 8000ef6:	2102      	movs	r1, #2
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f000 f9a8 	bl	800124e <control_sched_done>
	}

}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <init_boot>:

static void init_boot(CONTROL_INST_t * control) {
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b082      	sub	sp, #8
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
	//global enable
	//to boot the rpi
	led_set_color(LED_LILA);
 8000f0e:	224f      	movs	r2, #79	; 0x4f
 8000f10:	2103      	movs	r1, #3
 8000f12:	20ff      	movs	r0, #255	; 0xff
 8000f14:	f000 fd16 	bl	8001944 <led_set_color>
	control->state = CS_BOOT;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	701a      	strb	r2, [r3, #0]
	cm4_boot(control->cm4);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	699b      	ldr	r3, [r3, #24]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff feaa 	bl	8000c7c <cm4_boot>
}
 8000f28:	bf00      	nop
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <boot>:

static void boot(CONTROL_INST_t * control) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
	//wait for the cm4 to start answering with concluent status packets
	uint8_t ready = 0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	73fb      	strb	r3, [r7, #15]
	cm4_is_ready(control->cm4, &ready);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	699b      	ldr	r3, [r3, #24]
 8000f40:	f107 020f 	add.w	r2, r7, #15
 8000f44:	4611      	mov	r1, r2
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff fea3 	bl	8000c92 <cm4_is_ready>
	if(ready) {
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d002      	beq.n	8000f58 <boot+0x28>
		init_compute(control);
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f000 f804 	bl	8000f60 <init_compute>
	}
}
 8000f58:	bf00      	nop
 8000f5a:	3710      	adds	r7, #16
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <init_compute>:

static void init_compute(CONTROL_INST_t * control) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
	//start sending data to raspberry pi
	led_set_color(LED_BLUE);
 8000f68:	22ff      	movs	r2, #255	; 0xff
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	2000      	movs	r0, #0
 8000f6e:	f000 fce9 	bl	8001944 <led_set_color>
	control->state = CS_COMPUTE;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2202      	movs	r2, #2
 8000f76:	701a      	strb	r2, [r3, #0]
}
 8000f78:	bf00      	nop
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <compute>:

static void compute(CONTROL_INST_t * control) {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]

	cm4_transaction(control->cm4, &control->sensor_payload, &control->command_payload);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6998      	ldr	r0, [r3, #24]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	336c      	adds	r3, #108	; 0x6c
 8000f96:	461a      	mov	r2, r3
 8000f98:	f7ff fd9f 	bl	8000ada <cm4_transaction>

	if(control_sched_should_run(control, CONTROL_SCHED_SHUTDOWN)) {
 8000f9c:	2103      	movs	r1, #3
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f000 f940 	bl	8001224 <control_sched_should_run>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d006      	beq.n	8000fb8 <compute+0x38>
		init_shutdown(control);
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f000 f808 	bl	8000fc0 <init_shutdown>
		control_sched_done(control, CONTROL_SCHED_SHUTDOWN);
 8000fb0:	2103      	movs	r1, #3
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f000 f94b 	bl	800124e <control_sched_done>
	}
}
 8000fb8:	bf00      	nop
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <init_shutdown>:


static void init_shutdown(CONTROL_INST_t * control) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
	led_set_color(LED_ORANGE);
 8000fc8:	2207      	movs	r2, #7
 8000fca:	210f      	movs	r1, #15
 8000fcc:	207f      	movs	r0, #127	; 0x7f
 8000fce:	f000 fcb9 	bl	8001944 <led_set_color>
	control->state = CS_SHUTDOWN;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2203      	movs	r2, #3
 8000fd6:	701a      	strb	r2, [r3, #0]
	cm4_shutdown(control->cm4);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff fe78 	bl	8000cd2 <cm4_shutdown>
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <shutdown>:

static void shutdown(CONTROL_INST_t * control) {
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b084      	sub	sp, #16
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
	uint8_t shutdown = 0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	73fb      	strb	r3, [r7, #15]
	cm4_is_shutdown(control->cm4, &shutdown);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	699b      	ldr	r3, [r3, #24]
 8000ffa:	f107 020f 	add.w	r2, r7, #15
 8000ffe:	4611      	mov	r1, r2
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff fe7d 	bl	8000d00 <cm4_is_shutdown>
	if(shutdown) {
 8001006:	7bfb      	ldrb	r3, [r7, #15]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d002      	beq.n	8001012 <shutdown+0x28>
		init_idle(control);
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f7ff ff52 	bl	8000eb6 <init_idle>
	}
}
 8001012:	bf00      	nop
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <init_abort>:

static void init_abort(CONTROL_INST_t * control) {
 800101a:	b580      	push	{r7, lr}
 800101c:	b082      	sub	sp, #8
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
	led_set_color(LED_PINK);
 8001022:	227f      	movs	r2, #127	; 0x7f
 8001024:	2100      	movs	r1, #0
 8001026:	207f      	movs	r0, #127	; 0x7f
 8001028:	f000 fc8c 	bl	8001944 <led_set_color>
	control->shadow_state = control->state;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	781a      	ldrb	r2, [r3, #0]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	705a      	strb	r2, [r3, #1]
	control->state = CS_ABORT;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2204      	movs	r2, #4
 8001038:	701a      	strb	r2, [r3, #0]
#if USE_DYNAMIXEL == 1
	servo_move(control->tvc_servo, 2048); //2048 is the straight position
#endif
	control->counter_active=0;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2200      	movs	r2, #0
 800103e:	741a      	strb	r2, [r3, #16]
	storage_disable();
 8001040:	f001 f942 	bl	80022c8 <storage_disable>
}
 8001044:	bf00      	nop
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <_abort>:

static void _abort(CONTROL_INST_t * control) {
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
	if(control_sched_should_run(control, CONTROL_SCHED_RECOVER)) {
 8001054:	2105      	movs	r1, #5
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f000 f8e4 	bl	8001224 <control_sched_should_run>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d006      	beq.n	8001070 <_abort+0x24>
		init_idle(control);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f7ff ff27 	bl	8000eb6 <init_idle>
		control_sched_done(control, CONTROL_SCHED_RECOVER);
 8001068:	2105      	movs	r1, #5
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f000 f8ef 	bl	800124e <control_sched_done>
	}
}
 8001070:	bf00      	nop
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <init_error>:

static void init_error(CONTROL_INST_t * control) {
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
	led_set_color(LED_RED);
 8001080:	2200      	movs	r2, #0
 8001082:	2100      	movs	r1, #0
 8001084:	20ff      	movs	r0, #255	; 0xff
 8001086:	f000 fc5d 	bl	8001944 <led_set_color>
	control->state = CS_ERROR;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2205      	movs	r2, #5
 800108e:	701a      	strb	r2, [r3, #0]
	control->counter_active = 0;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	741a      	strb	r2, [r3, #16]
	storage_disable();
 8001096:	f001 f917 	bl	80022c8 <storage_disable>
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <error>:

static void error(CONTROL_INST_t * control) {
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b082      	sub	sp, #8
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
	//wait for user release
	if(control_sched_should_run(control, CONTROL_SCHED_RECOVER)) {
 80010aa:	2105      	movs	r1, #5
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f000 f8b9 	bl	8001224 <control_sched_should_run>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d006      	beq.n	80010c6 <error+0x24>
		init_idle(control);
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f7ff fefc 	bl	8000eb6 <init_idle>
		control_sched_done(control, CONTROL_SCHED_RECOVER);
 80010be:	2105      	movs	r1, #5
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f000 f8c4 	bl	800124e <control_sched_done>
	}
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
	...

080010d0 <control_move_tvc>:
CONTROL_STATE_t control_get_state() {
	return control.state;
}


void control_move_tvc(int32_t target) {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
	control_sched_set(&control, CONTROL_SCHED_MOVE_TVC);
 80010d8:	2104      	movs	r1, #4
 80010da:	4805      	ldr	r0, [pc, #20]	; (80010f0 <control_move_tvc+0x20>)
 80010dc:	f000 f8d0 	bl	8001280 <control_sched_set>
	control.tvc_mov_target = target;
 80010e0:	4a03      	ldr	r2, [pc, #12]	; (80010f0 <control_move_tvc+0x20>)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6213      	str	r3, [r2, #32]
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	200000e8 	.word	0x200000e8

080010f4 <control_boot>:

void control_boot(void) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
	control_sched_set(&control, CONTROL_SCHED_BOOT);
 80010f8:	2102      	movs	r1, #2
 80010fa:	4802      	ldr	r0, [pc, #8]	; (8001104 <control_boot+0x10>)
 80010fc:	f000 f8c0 	bl	8001280 <control_sched_set>
}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}
 8001104:	200000e8 	.word	0x200000e8

08001108 <control_shutdown>:

void control_shutdown(void) {
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
	control_sched_set(&control, CONTROL_SCHED_SHUTDOWN);
 800110c:	2103      	movs	r1, #3
 800110e:	4802      	ldr	r0, [pc, #8]	; (8001118 <control_shutdown+0x10>)
 8001110:	f000 f8b6 	bl	8001280 <control_sched_set>
}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}
 8001118:	200000e8 	.word	0x200000e8

0800111c <control_abort>:

void control_abort() {
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
	control_sched_set(&control, CONTROL_SCHED_ABORT);
 8001120:	2101      	movs	r1, #1
 8001122:	4802      	ldr	r0, [pc, #8]	; (800112c <control_abort+0x10>)
 8001124:	f000 f8ac 	bl	8001280 <control_sched_set>
}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}
 800112c:	200000e8 	.word	0x200000e8

08001130 <control_recover>:

void control_recover() {
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
	control_sched_set(&control, CONTROL_SCHED_RECOVER);
 8001134:	2105      	movs	r1, #5
 8001136:	4802      	ldr	r0, [pc, #8]	; (8001140 <control_recover+0x10>)
 8001138:	f000 f8a2 	bl	8001280 <control_sched_set>
}
 800113c:	bf00      	nop
 800113e:	bd80      	pop	{r7, pc}
 8001140:	200000e8 	.word	0x200000e8

08001144 <control_get_status>:

CONTROL_STATUS_t control_get_status() {
 8001144:	b4b0      	push	{r4, r5, r7}
 8001146:	b089      	sub	sp, #36	; 0x24
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
	CONTROL_STATUS_t status = {0};
 800114c:	f107 0308 	add.w	r3, r7, #8
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
 800115c:	615a      	str	r2, [r3, #20]
	status.state = control.state;
 800115e:	4b17      	ldr	r3, [pc, #92]	; (80011bc <control_get_status+0x78>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	723b      	strb	r3, [r7, #8]
	status.tvc_error = control.tvc_servo->error;
 8001164:	4b15      	ldr	r3, [pc, #84]	; (80011bc <control_get_status+0x78>)
 8001166:	69db      	ldr	r3, [r3, #28]
 8001168:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 800116c:	3318      	adds	r3, #24
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	737b      	strb	r3, [r7, #13]
	status.tvc_psu_voltage = control.tvc_servo->psu_voltage;
 8001172:	4b12      	ldr	r3, [pc, #72]	; (80011bc <control_get_status+0x78>)
 8001174:	69db      	ldr	r3, [r3, #28]
 8001176:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 800117a:	3310      	adds	r3, #16
 800117c:	881b      	ldrh	r3, [r3, #0]
 800117e:	817b      	strh	r3, [r7, #10]
	status.tvc_temperature = control.tvc_servo->temperature;
 8001180:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <control_get_status+0x78>)
 8001182:	69db      	ldr	r3, [r3, #28]
 8001184:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 8001188:	3312      	adds	r3, #18
 800118a:	f993 3000 	ldrsb.w	r3, [r3]
 800118e:	733b      	strb	r3, [r7, #12]
	status.tvc_position = control.tvc_servo->position;
 8001190:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <control_get_status+0x78>)
 8001192:	69db      	ldr	r3, [r3, #28]
 8001194:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 8001198:	3314      	adds	r3, #20
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	613b      	str	r3, [r7, #16]

	return status;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	461d      	mov	r5, r3
 80011a2:	f107 0408 	add.w	r4, r7, #8
 80011a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80011ae:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	3724      	adds	r7, #36	; 0x24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bcb0      	pop	{r4, r5, r7}
 80011ba:	4770      	bx	lr
 80011bc:	200000e8 	.word	0x200000e8

080011c0 <control_set_sens>:

void control_set_sens(CM4_PAYLOAD_SENSOR_t sens) {
 80011c0:	b084      	sub	sp, #16
 80011c2:	b4b0      	push	{r4, r5, r7}
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	f107 040c 	add.w	r4, r7, #12
 80011ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	control.sensor_payload = sens;
 80011ce:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <control_set_sens+0x34>)
 80011d0:	f103 0438 	add.w	r4, r3, #56	; 0x38
 80011d4:	f107 050c 	add.w	r5, r7, #12
 80011d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011e4:	682b      	ldr	r3, [r5, #0]
 80011e6:	6023      	str	r3, [r4, #0]
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bcb0      	pop	{r4, r5, r7}
 80011ee:	b004      	add	sp, #16
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	200000e8 	.word	0x200000e8

080011f8 <control_get_cmd>:

CM4_PAYLOAD_COMMAND_t control_get_cmd(void) {
 80011f8:	b4b0      	push	{r4, r5, r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
	return control.command_payload;
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	4b07      	ldr	r3, [pc, #28]	; (8001220 <control_get_cmd+0x28>)
 8001204:	4615      	mov	r5, r2
 8001206:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800120a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800120c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800120e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001212:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	bcb0      	pop	{r4, r5, r7}
 800121e:	4770      	bx	lr
 8001220:	200000e8 	.word	0x200000e8

08001224 <control_sched_should_run>:


static uint8_t control_sched_should_run(CONTROL_INST_t * control, CONTROL_SCHED_t num) {
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	460b      	mov	r3, r1
 800122e:	70fb      	strb	r3, [r7, #3]
	return control->sched == num;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001236:	78fa      	ldrb	r2, [r7, #3]
 8001238:	429a      	cmp	r2, r3
 800123a:	bf0c      	ite	eq
 800123c:	2301      	moveq	r3, #1
 800123e:	2300      	movne	r3, #0
 8001240:	b2db      	uxtb	r3, r3
}
 8001242:	4618      	mov	r0, r3
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr

0800124e <control_sched_done>:

static void control_sched_done(CONTROL_INST_t * control, CONTROL_SCHED_t num) {
 800124e:	b580      	push	{r7, lr}
 8001250:	b082      	sub	sp, #8
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
 8001256:	460b      	mov	r3, r1
 8001258:	70fb      	strb	r3, [r7, #3]
	if(control->sched == num) {
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001260:	78fa      	ldrb	r2, [r7, #3]
 8001262:	429a      	cmp	r2, r3
 8001264:	d104      	bne.n	8001270 <control_sched_done+0x22>
		control->sched = CONTROL_SCHED_NOTHING;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2200      	movs	r2, #0
 800126a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	} else {
		init_error(control);
	}
}
 800126e:	e002      	b.n	8001276 <control_sched_done+0x28>
		init_error(control);
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7ff ff01 	bl	8001078 <init_error>
}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <control_sched_set>:

static void control_sched_set(CONTROL_INST_t * control, CONTROL_SCHED_t num) {
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	460b      	mov	r3, r1
 800128a:	70fb      	strb	r3, [r7, #3]
	if(num == CONTROL_SCHED_ABORT) { //ABORT ALWAYS TAKES OVER
 800128c:	78fb      	ldrb	r3, [r7, #3]
 800128e:	2b01      	cmp	r3, #1
 8001290:	d103      	bne.n	800129a <control_sched_set+0x1a>
		control->sched = num;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	78fa      	ldrb	r2, [r7, #3]
 8001296:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	}
	if(control->sched == CONTROL_SCHED_NOTHING) {
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d11c      	bne.n	80012de <control_sched_set+0x5e>
		for(uint8_t i = 0; i < SCHED_ALLOWED_WIDTH; i++) {
 80012a4:	2300      	movs	r3, #0
 80012a6:	73fb      	strb	r3, [r7, #15]
 80012a8:	e016      	b.n	80012d8 <control_sched_set+0x58>
			if(sched_allowed[control->state][i] == num) {
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	4618      	mov	r0, r3
 80012b0:	7bfa      	ldrb	r2, [r7, #15]
 80012b2:	490d      	ldr	r1, [pc, #52]	; (80012e8 <control_sched_set+0x68>)
 80012b4:	4603      	mov	r3, r0
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	4403      	add	r3, r0
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	440b      	add	r3, r1
 80012be:	4413      	add	r3, r2
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	78fa      	ldrb	r2, [r7, #3]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d104      	bne.n	80012d2 <control_sched_set+0x52>
				control->sched = num;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	78fa      	ldrb	r2, [r7, #3]
 80012cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				return;
 80012d0:	e005      	b.n	80012de <control_sched_set+0x5e>
		for(uint8_t i = 0; i < SCHED_ALLOWED_WIDTH; i++) {
 80012d2:	7bfb      	ldrb	r3, [r7, #15]
 80012d4:	3301      	adds	r3, #1
 80012d6:	73fb      	strb	r3, [r7, #15]
 80012d8:	7bfb      	ldrb	r3, [r7, #15]
 80012da:	2b05      	cmp	r3, #5
 80012dc:	d9e5      	bls.n	80012aa <control_sched_set+0x2a>
			}
		}
	}
}
 80012de:	3714      	adds	r7, #20
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	20000000 	.word	0x20000000

080012ec <util_encode_u8>:
static inline void util_encode_u8(uint8_t * data, uint8_t value) {
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	460b      	mov	r3, r1
 80012f6:	70fb      	strb	r3, [r7, #3]
	data[0] = value;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	78fa      	ldrb	r2, [r7, #3]
 80012fc:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	3301      	adds	r3, #1
 8001302:	2200      	movs	r2, #0
 8001304:	701a      	strb	r2, [r3, #0]
	data[2] = 0x00;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	3302      	adds	r3, #2
 800130a:	2200      	movs	r2, #0
 800130c:	701a      	strb	r2, [r3, #0]
	data[3] = 0x00;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	3303      	adds	r3, #3
 8001312:	2200      	movs	r2, #0
 8001314:	701a      	strb	r2, [r3, #0]
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr

08001322 <util_encode_u16>:
static inline void util_encode_u16(uint8_t * data, uint16_t value) {
 8001322:	b480      	push	{r7}
 8001324:	b083      	sub	sp, #12
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
 800132a:	460b      	mov	r3, r1
 800132c:	807b      	strh	r3, [r7, #2]
	data[0] = value;
 800132e:	887b      	ldrh	r3, [r7, #2]
 8001330:	b2da      	uxtb	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	701a      	strb	r2, [r3, #0]
	data[1] = value>>8;
 8001336:	887b      	ldrh	r3, [r7, #2]
 8001338:	0a1b      	lsrs	r3, r3, #8
 800133a:	b29a      	uxth	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	3301      	adds	r3, #1
 8001340:	b2d2      	uxtb	r2, r2
 8001342:	701a      	strb	r2, [r3, #0]
	data[2] = 0x00;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	3302      	adds	r3, #2
 8001348:	2200      	movs	r2, #0
 800134a:	701a      	strb	r2, [r3, #0]
	data[3] = 0x00;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3303      	adds	r3, #3
 8001350:	2200      	movs	r2, #0
 8001352:	701a      	strb	r2, [r3, #0]
}
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <util_encode_u32>:
static inline void util_encode_u32(uint8_t * data, uint32_t value) {
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
	data[0] = value;
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	b2da      	uxtb	r2, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	701a      	strb	r2, [r3, #0]
	data[1] = value>>8;
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	0a1a      	lsrs	r2, r3, #8
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	3301      	adds	r3, #1
 800137a:	b2d2      	uxtb	r2, r2
 800137c:	701a      	strb	r2, [r3, #0]
	data[2] = value>>16;
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	0c1a      	lsrs	r2, r3, #16
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	3302      	adds	r3, #2
 8001386:	b2d2      	uxtb	r2, r2
 8001388:	701a      	strb	r2, [r3, #0]
	data[3] = value>>24;
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	0e1a      	lsrs	r2, r3, #24
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	3303      	adds	r3, #3
 8001392:	b2d2      	uxtb	r2, r2
 8001394:	701a      	strb	r2, [r3, #0]
}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr

080013a2 <util_encode_i8>:
static inline void util_encode_i8(uint8_t * data, int8_t value) {
 80013a2:	b480      	push	{r7}
 80013a4:	b083      	sub	sp, #12
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
 80013aa:	460b      	mov	r3, r1
 80013ac:	70fb      	strb	r3, [r7, #3]
	data[0] = value;
 80013ae:	78fa      	ldrb	r2, [r7, #3]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3301      	adds	r3, #1
 80013b8:	2200      	movs	r2, #0
 80013ba:	701a      	strb	r2, [r3, #0]
	data[2] = 0x00;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3302      	adds	r3, #2
 80013c0:	2200      	movs	r2, #0
 80013c2:	701a      	strb	r2, [r3, #0]
	data[3] = 0x00;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3303      	adds	r3, #3
 80013c8:	2200      	movs	r2, #0
 80013ca:	701a      	strb	r2, [r3, #0]
}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <util_encode_i32>:
static inline void util_encode_i32(uint8_t * data, int32_t value) {
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
	data[0] = value;
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	b2da      	uxtb	r2, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	701a      	strb	r2, [r3, #0]
	data[1] = value>>8;
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	121a      	asrs	r2, r3, #8
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	3301      	adds	r3, #1
 80013f2:	b2d2      	uxtb	r2, r2
 80013f4:	701a      	strb	r2, [r3, #0]
	data[2] = value>>16;
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	141a      	asrs	r2, r3, #16
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	3302      	adds	r3, #2
 80013fe:	b2d2      	uxtb	r2, r2
 8001400:	701a      	strb	r2, [r3, #0]
	data[3] = value>>24;
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	161a      	asrs	r2, r3, #24
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	3303      	adds	r3, #3
 800140a:	b2d2      	uxtb	r2, r2
 800140c:	701a      	strb	r2, [r3, #0]
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr

0800141a <util_decode_u32>:
static inline uint32_t util_decode_u32(uint8_t * data) {
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
	return (uint32_t) data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	461a      	mov	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	3301      	adds	r3, #1
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	021b      	lsls	r3, r3, #8
 8001430:	4313      	orrs	r3, r2
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	3202      	adds	r2, #2
 8001436:	7812      	ldrb	r2, [r2, #0]
 8001438:	0412      	lsls	r2, r2, #16
 800143a:	4313      	orrs	r3, r2
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	3203      	adds	r2, #3
 8001440:	7812      	ldrb	r2, [r2, #0]
 8001442:	0612      	lsls	r2, r2, #24
 8001444:	4313      	orrs	r3, r2
}
 8001446:	4618      	mov	r0, r3
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr

08001452 <util_decode_i32>:
static inline int32_t util_decode_i32(uint8_t * data) {
 8001452:	b480      	push	{r7}
 8001454:	b083      	sub	sp, #12
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
	return (int32_t) data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	461a      	mov	r2, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3301      	adds	r3, #1
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	021b      	lsls	r3, r3, #8
 8001468:	431a      	orrs	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	3302      	adds	r3, #2
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	041b      	lsls	r3, r3, #16
 8001472:	431a      	orrs	r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3303      	adds	r3, #3
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	061b      	lsls	r3, r3, #24
 800147c:	4313      	orrs	r3, r2
}
 800147e:	4618      	mov	r0, r3
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
	...

0800148c <debug_decode_fcn>:
 *	DECLARATIONS
 **********************/


//Requires an instance of type debug
SERIAL_RET_t debug_decode_fcn(void * inst, uint8_t data) {
 800148c:	b590      	push	{r4, r7, lr}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	460b      	mov	r3, r1
 8001496:	70fb      	strb	r3, [r7, #3]
	static uint8_t send_data[MSV2_MAX_DATA_LEN];
	static uint16_t length = 0;
	static uint16_t bin_length = 0;
	DEBUG_INST_t * debug = (DEBUG_INST_t *) inst;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	60fb      	str	r3, [r7, #12]
	MSV2_ERROR_t tmp = msv2_decode_fragment(&debug->msv2, data);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	3304      	adds	r3, #4
 80014a0:	78fa      	ldrb	r2, [r7, #3]
 80014a2:	4611      	mov	r1, r2
 80014a4:	4618      	mov	r0, r3
 80014a6:	f000 fba3 	bl	8001bf0 <msv2_decode_fragment>
 80014aa:	4603      	mov	r3, r0
 80014ac:	72fb      	strb	r3, [r7, #11]

	if(tmp == MSV2_SUCCESS) {
 80014ae:	7afb      	ldrb	r3, [r7, #11]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d15e      	bne.n	8001572 <debug_decode_fcn+0xe6>
		if(debug->msv2.rx.opcode < debug_fcn_max) {
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	7a1b      	ldrb	r3, [r3, #8]
 80014b8:	b29a      	uxth	r2, r3
 80014ba:	4b30      	ldr	r3, [pc, #192]	; (800157c <debug_decode_fcn+0xf0>)
 80014bc:	881b      	ldrh	r3, [r3, #0]
 80014be:	429a      	cmp	r2, r3
 80014c0:	d22e      	bcs.n	8001520 <debug_decode_fcn+0x94>

			debug_fcn[debug->msv2.rx.opcode](debug->msv2.rx.data, debug->msv2.rx.length, send_data, &length);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	7a1b      	ldrb	r3, [r3, #8]
 80014c6:	461a      	mov	r2, r3
 80014c8:	4b2d      	ldr	r3, [pc, #180]	; (8001580 <debug_decode_fcn+0xf4>)
 80014ca:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f103 0012 	add.w	r0, r3, #18
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	89d9      	ldrh	r1, [r3, #14]
 80014d8:	4b2a      	ldr	r3, [pc, #168]	; (8001584 <debug_decode_fcn+0xf8>)
 80014da:	4a2b      	ldr	r2, [pc, #172]	; (8001588 <debug_decode_fcn+0xfc>)
 80014dc:	47a0      	blx	r4
			//length is in words
			bin_length = msv2_create_frame(&debug->msv2, debug->msv2.rx.opcode, length/2, send_data);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	1d18      	adds	r0, r3, #4
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	7a19      	ldrb	r1, [r3, #8]
 80014e6:	4b27      	ldr	r3, [pc, #156]	; (8001584 <debug_decode_fcn+0xf8>)
 80014e8:	881b      	ldrh	r3, [r3, #0]
 80014ea:	085b      	lsrs	r3, r3, #1
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	b2da      	uxtb	r2, r3
 80014f0:	4b25      	ldr	r3, [pc, #148]	; (8001588 <debug_decode_fcn+0xfc>)
 80014f2:	f000 fa97 	bl	8001a24 <msv2_create_frame>
 80014f6:	4603      	mov	r3, r0
 80014f8:	461a      	mov	r2, r3
 80014fa:	4b24      	ldr	r3, [pc, #144]	; (800158c <debug_decode_fcn+0x100>)
 80014fc:	801a      	strh	r2, [r3, #0]
			serial_send(&debug->ser, msv2_tx_data(&debug->msv2), bin_length);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	f503 5480 	add.w	r4, r3, #4096	; 0x1000
 8001504:	3418      	adds	r4, #24
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	3304      	adds	r3, #4
 800150a:	4618      	mov	r0, r3
 800150c:	f000 fc64 	bl	8001dd8 <msv2_tx_data>
 8001510:	4601      	mov	r1, r0
 8001512:	4b1e      	ldr	r3, [pc, #120]	; (800158c <debug_decode_fcn+0x100>)
 8001514:	881b      	ldrh	r3, [r3, #0]
 8001516:	461a      	mov	r2, r3
 8001518:	4620      	mov	r0, r4
 800151a:	f000 fd83 	bl	8002024 <serial_send>
 800151e:	e028      	b.n	8001572 <debug_decode_fcn+0xe6>
		} else {
			send_data[0] = CRC_ERROR_LO;
 8001520:	4b19      	ldr	r3, [pc, #100]	; (8001588 <debug_decode_fcn+0xfc>)
 8001522:	22be      	movs	r2, #190	; 0xbe
 8001524:	701a      	strb	r2, [r3, #0]
			send_data[1] = CRC_ERROR_HI;
 8001526:	4b18      	ldr	r3, [pc, #96]	; (8001588 <debug_decode_fcn+0xfc>)
 8001528:	22eb      	movs	r2, #235	; 0xeb
 800152a:	705a      	strb	r2, [r3, #1]
			length = 2;
 800152c:	4b15      	ldr	r3, [pc, #84]	; (8001584 <debug_decode_fcn+0xf8>)
 800152e:	2202      	movs	r2, #2
 8001530:	801a      	strh	r2, [r3, #0]
			bin_length = msv2_create_frame(&debug->msv2, debug->msv2.rx.opcode, length/2, send_data);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	1d18      	adds	r0, r3, #4
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	7a19      	ldrb	r1, [r3, #8]
 800153a:	4b12      	ldr	r3, [pc, #72]	; (8001584 <debug_decode_fcn+0xf8>)
 800153c:	881b      	ldrh	r3, [r3, #0]
 800153e:	085b      	lsrs	r3, r3, #1
 8001540:	b29b      	uxth	r3, r3
 8001542:	b2da      	uxtb	r2, r3
 8001544:	4b10      	ldr	r3, [pc, #64]	; (8001588 <debug_decode_fcn+0xfc>)
 8001546:	f000 fa6d 	bl	8001a24 <msv2_create_frame>
 800154a:	4603      	mov	r3, r0
 800154c:	461a      	mov	r2, r3
 800154e:	4b0f      	ldr	r3, [pc, #60]	; (800158c <debug_decode_fcn+0x100>)
 8001550:	801a      	strh	r2, [r3, #0]
			serial_send(&debug->ser, msv2_tx_data(&debug->msv2), bin_length);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	f503 5480 	add.w	r4, r3, #4096	; 0x1000
 8001558:	3418      	adds	r4, #24
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	3304      	adds	r3, #4
 800155e:	4618      	mov	r0, r3
 8001560:	f000 fc3a 	bl	8001dd8 <msv2_tx_data>
 8001564:	4601      	mov	r1, r0
 8001566:	4b09      	ldr	r3, [pc, #36]	; (800158c <debug_decode_fcn+0x100>)
 8001568:	881b      	ldrh	r3, [r3, #0]
 800156a:	461a      	mov	r2, r3
 800156c:	4620      	mov	r0, r4
 800156e:	f000 fd59 	bl	8002024 <serial_send>
		}
	}

	return tmp;
 8001572:	7afb      	ldrb	r3, [r7, #11]
}
 8001574:	4618      	mov	r0, r3
 8001576:	3714      	adds	r7, #20
 8001578:	46bd      	mov	sp, r7
 800157a:	bd90      	pop	{r4, r7, pc}
 800157c:	2000005c 	.word	0x2000005c
 8001580:	2000003c 	.word	0x2000003c
 8001584:	200017f8 	.word	0x200017f8
 8001588:	200015f8 	.word	0x200015f8
 800158c:	200017fa 	.word	0x200017fa

08001590 <debug_init>:

void debug_init(DEBUG_INST_t * debug) {
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
	static uint32_t id_counter = 0;
	msv2_init(&debug->msv2);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	3304      	adds	r3, #4
 800159c:	4618      	mov	r0, r3
 800159e:	f000 fa2d 	bl	80019fc <msv2_init>
	serial_init(&debug->ser, &DEBUG_UART, debug, debug_decode_fcn);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f503 5080 	add.w	r0, r3, #4096	; 0x1000
 80015a8:	3018      	adds	r0, #24
 80015aa:	4b08      	ldr	r3, [pc, #32]	; (80015cc <debug_init+0x3c>)
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	4908      	ldr	r1, [pc, #32]	; (80015d0 <debug_init+0x40>)
 80015b0:	f000 fcf8 	bl	8001fa4 <serial_init>
	debug->id = id_counter++;
 80015b4:	4b07      	ldr	r3, [pc, #28]	; (80015d4 <debug_init+0x44>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	1c5a      	adds	r2, r3, #1
 80015ba:	4906      	ldr	r1, [pc, #24]	; (80015d4 <debug_init+0x44>)
 80015bc:	600a      	str	r2, [r1, #0]
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	6013      	str	r3, [r2, #0]
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	0800148d 	.word	0x0800148d
 80015d0:	20007b34 	.word	0x20007b34
 80015d4:	200017fc 	.word	0x200017fc

080015d8 <debug_get_status>:

static void debug_get_status(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08c      	sub	sp, #48	; 0x30
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	607a      	str	r2, [r7, #4]
 80015e2:	603b      	str	r3, [r7, #0]
 80015e4:	460b      	mov	r3, r1
 80015e6:	817b      	strh	r3, [r7, #10]
	CONTROL_STATUS_t status = control_get_status();
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff fda9 	bl	8001144 <control_get_status>
	util_encode_u16(resp, status.state);
 80015f2:	7d3b      	ldrb	r3, [r7, #20]
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	4619      	mov	r1, r3
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f7ff fe92 	bl	8001322 <util_encode_u16>
	util_encode_u16(resp+2, 0); //padding
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	3302      	adds	r3, #2
 8001602:	2100      	movs	r1, #0
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff fe8c 	bl	8001322 <util_encode_u16>
	util_encode_i32(resp+4, status.counter);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	3304      	adds	r3, #4
 800160e:	6a3a      	ldr	r2, [r7, #32]
 8001610:	4611      	mov	r1, r2
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff fee0 	bl	80013d8 <util_encode_i32>
	uint32_t memory = storage_get_used();
 8001618:	f000 fe32 	bl	8002280 <storage_get_used>
 800161c:	62f8      	str	r0, [r7, #44]	; 0x2c
	util_encode_u32(resp+8, memory);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	3308      	adds	r3, #8
 8001622:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff fe9b 	bl	8001360 <util_encode_u32>
	util_encode_i32(resp+12, status.tvc_position);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	330c      	adds	r3, #12
 800162e:	69fa      	ldr	r2, [r7, #28]
 8001630:	4611      	mov	r1, r2
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff fed0 	bl	80013d8 <util_encode_i32>
	util_encode_u16(resp+16, status.tvc_psu_voltage);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	3310      	adds	r3, #16
 800163c:	8afa      	ldrh	r2, [r7, #22]
 800163e:	4611      	mov	r1, r2
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff fe6e 	bl	8001322 <util_encode_u16>
	util_encode_u8(resp+18, status.tvc_error);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	3312      	adds	r3, #18
 800164a:	7e7a      	ldrb	r2, [r7, #25]
 800164c:	4611      	mov	r1, r2
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff fe4c 	bl	80012ec <util_encode_u8>
	util_encode_i8(resp+19, status.tvc_temperature);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	3313      	adds	r3, #19
 8001658:	f997 2018 	ldrsb.w	r2, [r7, #24]
 800165c:	4611      	mov	r1, r2
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff fe9f 	bl	80013a2 <util_encode_i8>
	*resp_len = 20;
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	2214      	movs	r2, #20
 8001668:	801a      	strh	r2, [r3, #0]
}
 800166a:	bf00      	nop
 800166c:	3730      	adds	r7, #48	; 0x30
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <debug_boot>:

static void debug_boot(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 8001672:	b580      	push	{r7, lr}
 8001674:	b084      	sub	sp, #16
 8001676:	af00      	add	r7, sp, #0
 8001678:	60f8      	str	r0, [r7, #12]
 800167a:	607a      	str	r2, [r7, #4]
 800167c:	603b      	str	r3, [r7, #0]
 800167e:	460b      	mov	r3, r1
 8001680:	817b      	strh	r3, [r7, #10]
	control_boot();
 8001682:	f7ff fd37 	bl	80010f4 <control_boot>
	resp[0] = OK_LO;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	22c5      	movs	r2, #197	; 0xc5
 800168a:	701a      	strb	r2, [r3, #0]
	resp[1] = OK_HI;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3301      	adds	r3, #1
 8001690:	225c      	movs	r2, #92	; 0x5c
 8001692:	701a      	strb	r2, [r3, #0]
	*resp_len = 2;
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	2202      	movs	r2, #2
 8001698:	801a      	strh	r2, [r3, #0]
}
 800169a:	bf00      	nop
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <debug_shutdown>:


static void debug_shutdown(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b084      	sub	sp, #16
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	60f8      	str	r0, [r7, #12]
 80016aa:	607a      	str	r2, [r7, #4]
 80016ac:	603b      	str	r3, [r7, #0]
 80016ae:	460b      	mov	r3, r1
 80016b0:	817b      	strh	r3, [r7, #10]
	control_shutdown();
 80016b2:	f7ff fd29 	bl	8001108 <control_shutdown>
	resp[0] = OK_LO;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	22c5      	movs	r2, #197	; 0xc5
 80016ba:	701a      	strb	r2, [r3, #0]
	resp[1] = OK_HI;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3301      	adds	r3, #1
 80016c0:	225c      	movs	r2, #92	; 0x5c
 80016c2:	701a      	strb	r2, [r3, #0]
	*resp_len = 2;
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	2202      	movs	r2, #2
 80016c8:	801a      	strh	r2, [r3, #0]
}
 80016ca:	bf00      	nop
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <debug_download>:

static void debug_download(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b086      	sub	sp, #24
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	60f8      	str	r0, [r7, #12]
 80016da:	607a      	str	r2, [r7, #4]
 80016dc:	603b      	str	r3, [r7, #0]
 80016de:	460b      	mov	r3, r1
 80016e0:	817b      	strh	r3, [r7, #10]
	//downloads 5 samples at a certain location
	if(data_len == DOWNLOAD_LEN) {
 80016e2:	897b      	ldrh	r3, [r7, #10]
 80016e4:	2b04      	cmp	r3, #4
 80016e6:	d11b      	bne.n	8001720 <debug_download+0x4e>
		uint32_t location = util_decode_u32(data);
 80016e8:	68f8      	ldr	r0, [r7, #12]
 80016ea:	f7ff fe96 	bl	800141a <util_decode_u32>
 80016ee:	6138      	str	r0, [r7, #16]
		for(uint8_t i = 0; i < 5; i++) {
 80016f0:	2300      	movs	r3, #0
 80016f2:	75fb      	strb	r3, [r7, #23]
 80016f4:	e00e      	b.n	8001714 <debug_download+0x42>
			storage_get_sample(location+i, resp+i*32);
 80016f6:	7dfa      	ldrb	r2, [r7, #23]
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	441a      	add	r2, r3
 80016fc:	7dfb      	ldrb	r3, [r7, #23]
 80016fe:	015b      	lsls	r3, r3, #5
 8001700:	4619      	mov	r1, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	440b      	add	r3, r1
 8001706:	4619      	mov	r1, r3
 8001708:	4610      	mov	r0, r2
 800170a:	f000 fdc5 	bl	8002298 <storage_get_sample>
		for(uint8_t i = 0; i < 5; i++) {
 800170e:	7dfb      	ldrb	r3, [r7, #23]
 8001710:	3301      	adds	r3, #1
 8001712:	75fb      	strb	r3, [r7, #23]
 8001714:	7dfb      	ldrb	r3, [r7, #23]
 8001716:	2b04      	cmp	r3, #4
 8001718:	d9ed      	bls.n	80016f6 <debug_download+0x24>
		}
		*resp_len = 32*5;
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	22a0      	movs	r2, #160	; 0xa0
 800171e:	801a      	strh	r2, [r3, #0]
	}
}
 8001720:	bf00      	nop
 8001722:	3718      	adds	r7, #24
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <debug_tvc_move>:

static void debug_tvc_move(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	607a      	str	r2, [r7, #4]
 8001732:	603b      	str	r3, [r7, #0]
 8001734:	460b      	mov	r3, r1
 8001736:	817b      	strh	r3, [r7, #10]
	if(data_len == TVC_MOVE_LEN) {
 8001738:	897b      	ldrh	r3, [r7, #10]
 800173a:	2b04      	cmp	r3, #4
 800173c:	d111      	bne.n	8001762 <debug_tvc_move+0x3a>
		int32_t target = util_decode_i32(data);
 800173e:	68f8      	ldr	r0, [r7, #12]
 8001740:	f7ff fe87 	bl	8001452 <util_decode_i32>
 8001744:	6178      	str	r0, [r7, #20]
		control_move_tvc(target);
 8001746:	6978      	ldr	r0, [r7, #20]
 8001748:	f7ff fcc2 	bl	80010d0 <control_move_tvc>
		resp[0] = OK_LO;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	22c5      	movs	r2, #197	; 0xc5
 8001750:	701a      	strb	r2, [r3, #0]
		resp[1] = OK_HI;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	3301      	adds	r3, #1
 8001756:	225c      	movs	r2, #92	; 0x5c
 8001758:	701a      	strb	r2, [r3, #0]
		*resp_len = 2;
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	2202      	movs	r2, #2
 800175e:	801a      	strh	r2, [r3, #0]
	} else {
		resp[0] = ERROR_LO;
		resp[1] = ERROR_HI;
		*resp_len = 2;
	}
}
 8001760:	e009      	b.n	8001776 <debug_tvc_move+0x4e>
		resp[0] = ERROR_LO;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	22ce      	movs	r2, #206	; 0xce
 8001766:	701a      	strb	r2, [r3, #0]
		resp[1] = ERROR_HI;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	3301      	adds	r3, #1
 800176c:	22ec      	movs	r2, #236	; 0xec
 800176e:	701a      	strb	r2, [r3, #0]
		*resp_len = 2;
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	2202      	movs	r2, #2
 8001774:	801a      	strh	r2, [r3, #0]
}
 8001776:	bf00      	nop
 8001778:	3718      	adds	r7, #24
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <debug_abort>:

static void debug_abort(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 800177e:	b580      	push	{r7, lr}
 8001780:	b084      	sub	sp, #16
 8001782:	af00      	add	r7, sp, #0
 8001784:	60f8      	str	r0, [r7, #12]
 8001786:	607a      	str	r2, [r7, #4]
 8001788:	603b      	str	r3, [r7, #0]
 800178a:	460b      	mov	r3, r1
 800178c:	817b      	strh	r3, [r7, #10]
	control_abort();
 800178e:	f7ff fcc5 	bl	800111c <control_abort>
	resp[0] = OK_LO;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	22c5      	movs	r2, #197	; 0xc5
 8001796:	701a      	strb	r2, [r3, #0]
	resp[1] = OK_HI;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3301      	adds	r3, #1
 800179c:	225c      	movs	r2, #92	; 0x5c
 800179e:	701a      	strb	r2, [r3, #0]
	*resp_len = 2;
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	2202      	movs	r2, #2
 80017a4:	801a      	strh	r2, [r3, #0]
}
 80017a6:	bf00      	nop
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <debug_recover>:

static void debug_recover(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b084      	sub	sp, #16
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	60f8      	str	r0, [r7, #12]
 80017b6:	607a      	str	r2, [r7, #4]
 80017b8:	603b      	str	r3, [r7, #0]
 80017ba:	460b      	mov	r3, r1
 80017bc:	817b      	strh	r3, [r7, #10]
	control_recover();
 80017be:	f7ff fcb7 	bl	8001130 <control_recover>
	resp[0] = OK_LO;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	22c5      	movs	r2, #197	; 0xc5
 80017c6:	701a      	strb	r2, [r3, #0]
	resp[1] = OK_HI;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3301      	adds	r3, #1
 80017cc:	225c      	movs	r2, #92	; 0x5c
 80017ce:	701a      	strb	r2, [r3, #0]
	*resp_len = 2;
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	2202      	movs	r2, #2
 80017d4:	801a      	strh	r2, [r3, #0]
}
 80017d6:	bf00      	nop
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <debug_transaction>:

static void debug_transaction(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 80017de:	b5b0      	push	{r4, r5, r7, lr}
 80017e0:	b0a2      	sub	sp, #136	; 0x88
 80017e2:	af0a      	add	r7, sp, #40	; 0x28
 80017e4:	60f8      	str	r0, [r7, #12]
 80017e6:	607a      	str	r2, [r7, #4]
 80017e8:	603b      	str	r3, [r7, #0]
 80017ea:	460b      	mov	r3, r1
 80017ec:	817b      	strh	r3, [r7, #10]
	if(data_len == TRANSACTION_SENS_LEN) {
 80017ee:	897b      	ldrh	r3, [r7, #10]
 80017f0:	2b20      	cmp	r3, #32
 80017f2:	d174      	bne.n	80018de <debug_transaction+0x100>
		CM4_PAYLOAD_SENSOR_t sens_data = {0};
 80017f4:	f107 0314 	add.w	r3, r7, #20
 80017f8:	2234      	movs	r2, #52	; 0x34
 80017fa:	2100      	movs	r1, #0
 80017fc:	4618      	mov	r0, r3
 80017fe:	f009 fa85 	bl	800ad0c <memset>
		sens_data.acc_x = util_decode_i32(data);
 8001802:	68f8      	ldr	r0, [r7, #12]
 8001804:	f7ff fe25 	bl	8001452 <util_decode_i32>
 8001808:	4603      	mov	r3, r0
 800180a:	61bb      	str	r3, [r7, #24]
		sens_data.acc_y = util_decode_i32(data+4);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	3304      	adds	r3, #4
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff fe1e 	bl	8001452 <util_decode_i32>
 8001816:	4603      	mov	r3, r0
 8001818:	61fb      	str	r3, [r7, #28]
		sens_data.acc_z = util_decode_i32(data+8);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	3308      	adds	r3, #8
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff fe17 	bl	8001452 <util_decode_i32>
 8001824:	4603      	mov	r3, r0
 8001826:	623b      	str	r3, [r7, #32]

		sens_data.gyro_x = util_decode_i32(data+12);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	330c      	adds	r3, #12
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff fe10 	bl	8001452 <util_decode_i32>
 8001832:	4603      	mov	r3, r0
 8001834:	627b      	str	r3, [r7, #36]	; 0x24
		sens_data.gyro_y = util_decode_i32(data+16);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	3310      	adds	r3, #16
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff fe09 	bl	8001452 <util_decode_i32>
 8001840:	4603      	mov	r3, r0
 8001842:	62bb      	str	r3, [r7, #40]	; 0x28
		sens_data.gyro_z = util_decode_i32(data+20);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	3314      	adds	r3, #20
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff fe02 	bl	8001452 <util_decode_i32>
 800184e:	4603      	mov	r3, r0
 8001850:	62fb      	str	r3, [r7, #44]	; 0x2c

		sens_data.baro = util_decode_i32(data+24);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	3318      	adds	r3, #24
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff fdfb 	bl	8001452 <util_decode_i32>
 800185c:	4603      	mov	r3, r0
 800185e:	633b      	str	r3, [r7, #48]	; 0x30
		sens_data.cc_pressure = util_decode_i32(data+28);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	331c      	adds	r3, #28
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff fdf4 	bl	8001452 <util_decode_i32>
 800186a:	4603      	mov	r3, r0
 800186c:	637b      	str	r3, [r7, #52]	; 0x34

		control_set_sens(sens_data);
 800186e:	466d      	mov	r5, sp
 8001870:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8001874:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001876:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001878:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800187a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800187c:	6823      	ldr	r3, [r4, #0]
 800187e:	602b      	str	r3, [r5, #0]
 8001880:	f107 0314 	add.w	r3, r7, #20
 8001884:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001886:	f7ff fc9b 	bl	80011c0 <control_set_sens>

		CM4_PAYLOAD_COMMAND_t cmd_data = control_get_cmd();
 800188a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff fcb2 	bl	80011f8 <control_get_cmd>

		util_encode_i32(resp, cmd_data.thrust);
 8001894:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001896:	4619      	mov	r1, r3
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f7ff fd9d 	bl	80013d8 <util_encode_i32>
		util_encode_i32(resp+4, cmd_data.dynamixel[0]);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	3304      	adds	r3, #4
 80018a2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80018a4:	4611      	mov	r1, r2
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff fd96 	bl	80013d8 <util_encode_i32>
		util_encode_i32(resp+8, cmd_data.dynamixel[1]);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	3308      	adds	r3, #8
 80018b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80018b2:	4611      	mov	r1, r2
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff fd8f 	bl	80013d8 <util_encode_i32>
		util_encode_i32(resp+12, cmd_data.dynamixel[2]);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	330c      	adds	r3, #12
 80018be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80018c0:	4611      	mov	r1, r2
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff fd88 	bl	80013d8 <util_encode_i32>
		util_encode_i32(resp+16, cmd_data.dynamixel[3]);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3310      	adds	r3, #16
 80018cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80018ce:	4611      	mov	r1, r2
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff fd81 	bl	80013d8 <util_encode_i32>

		*resp_len = TRANSACTION_CMD_LEN;
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	2214      	movs	r2, #20
 80018da:	801a      	strh	r2, [r3, #0]
	} else {
		resp[0] = ERROR_LO;
		resp[1] = ERROR_HI;
		*resp_len = 2;
	}
}
 80018dc:	e009      	b.n	80018f2 <debug_transaction+0x114>
		resp[0] = ERROR_LO;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	22ce      	movs	r2, #206	; 0xce
 80018e2:	701a      	strb	r2, [r3, #0]
		resp[1] = ERROR_HI;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3301      	adds	r3, #1
 80018e8:	22ec      	movs	r2, #236	; 0xec
 80018ea:	701a      	strb	r2, [r3, #0]
		*resp_len = 2;
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	2202      	movs	r2, #2
 80018f0:	801a      	strh	r2, [r3, #0]
}
 80018f2:	bf00      	nop
 80018f4:	3760      	adds	r7, #96	; 0x60
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080018fc <led_init>:

/**********************
 *	DECLARATIONS
 **********************/

void led_init(void) {
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
	LED_TIM.Instance->ARR = LED_MAX;
 8001900:	4b0f      	ldr	r3, [pc, #60]	; (8001940 <led_init+0x44>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001908:	62da      	str	r2, [r3, #44]	; 0x2c
	LED_TIM.Instance->CCR1 = 0;
 800190a:	4b0d      	ldr	r3, [pc, #52]	; (8001940 <led_init+0x44>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2200      	movs	r2, #0
 8001910:	635a      	str	r2, [r3, #52]	; 0x34
	LED_TIM.Instance->CCR2 = 0;
 8001912:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <led_init+0x44>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2200      	movs	r2, #0
 8001918:	639a      	str	r2, [r3, #56]	; 0x38
	LED_TIM.Instance->CCR3 = 0;
 800191a:	4b09      	ldr	r3, [pc, #36]	; (8001940 <led_init+0x44>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2200      	movs	r2, #0
 8001920:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIMEx_PWMN_Start(&LED_TIM, TIM_CHANNEL_1);
 8001922:	2100      	movs	r1, #0
 8001924:	4806      	ldr	r0, [pc, #24]	; (8001940 <led_init+0x44>)
 8001926:	f005 fdb1 	bl	800748c <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&LED_TIM, TIM_CHANNEL_2);
 800192a:	2104      	movs	r1, #4
 800192c:	4804      	ldr	r0, [pc, #16]	; (8001940 <led_init+0x44>)
 800192e:	f005 fdad 	bl	800748c <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&LED_TIM, TIM_CHANNEL_3);
 8001932:	2108      	movs	r1, #8
 8001934:	4802      	ldr	r0, [pc, #8]	; (8001940 <led_init+0x44>)
 8001936:	f005 fda9 	bl	800748c <HAL_TIMEx_PWMN_Start>
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	200079b4 	.word	0x200079b4

08001944 <led_set_color>:

void led_set_color(uint8_t r, uint8_t g, uint8_t b) {
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	71fb      	strb	r3, [r7, #7]
 800194e:	460b      	mov	r3, r1
 8001950:	71bb      	strb	r3, [r7, #6]
 8001952:	4613      	mov	r3, r2
 8001954:	717b      	strb	r3, [r7, #5]
	LED_TIM.Instance->CCR1 = r;
 8001956:	4b09      	ldr	r3, [pc, #36]	; (800197c <led_set_color+0x38>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	79fa      	ldrb	r2, [r7, #7]
 800195c:	635a      	str	r2, [r3, #52]	; 0x34
	LED_TIM.Instance->CCR2 = g;
 800195e:	4b07      	ldr	r3, [pc, #28]	; (800197c <led_set_color+0x38>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	79ba      	ldrb	r2, [r7, #6]
 8001964:	639a      	str	r2, [r3, #56]	; 0x38
	LED_TIM.Instance->CCR3 = b;
 8001966:	4b05      	ldr	r3, [pc, #20]	; (800197c <led_set_color+0x38>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	797a      	ldrb	r2, [r7, #5]
 800196c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800196e:	bf00      	nop
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	200079b4 	.word	0x200079b4

08001980 <calc_field_CRC>:

/**********************
 *	DECLARATIONS
 **********************/

uint16_t calc_field_CRC(uint16_t *p_data_array, uint16_t length) {
 8001980:	b480      	push	{r7}
 8001982:	b085      	sub	sp, #20
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	460b      	mov	r3, r1
 800198a:	807b      	strh	r3, [r7, #2]
	uint16_t shifter, c;
	uint16_t carry;
	uint16_t crc = 0;
 800198c:	2300      	movs	r3, #0
 800198e:	81bb      	strh	r3, [r7, #12]
	while (length--) {
 8001990:	e028      	b.n	80019e4 <calc_field_CRC+0x64>
		shifter = 0x8000;
 8001992:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001996:	81fb      	strh	r3, [r7, #14]
		c = *p_data_array++;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	1c9a      	adds	r2, r3, #2
 800199c:	607a      	str	r2, [r7, #4]
 800199e:	881b      	ldrh	r3, [r3, #0]
 80019a0:	817b      	strh	r3, [r7, #10]
		do {
			carry = crc & 0x8000;
 80019a2:	89bb      	ldrh	r3, [r7, #12]
 80019a4:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80019a8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80019ac:	813b      	strh	r3, [r7, #8]
			crc <<= 1;
 80019ae:	89bb      	ldrh	r3, [r7, #12]
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	81bb      	strh	r3, [r7, #12]
			if (c & shifter) crc++;
 80019b4:	897a      	ldrh	r2, [r7, #10]
 80019b6:	89fb      	ldrh	r3, [r7, #14]
 80019b8:	4013      	ands	r3, r2
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d002      	beq.n	80019c6 <calc_field_CRC+0x46>
 80019c0:	89bb      	ldrh	r3, [r7, #12]
 80019c2:	3301      	adds	r3, #1
 80019c4:	81bb      	strh	r3, [r7, #12]
			if (carry) crc ^= 0x1021;
 80019c6:	893b      	ldrh	r3, [r7, #8]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d005      	beq.n	80019d8 <calc_field_CRC+0x58>
 80019cc:	89bb      	ldrh	r3, [r7, #12]
 80019ce:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 80019d2:	f083 0301 	eor.w	r3, r3, #1
 80019d6:	81bb      	strh	r3, [r7, #12]
			shifter >>= 1;
 80019d8:	89fb      	ldrh	r3, [r7, #14]
 80019da:	085b      	lsrs	r3, r3, #1
 80019dc:	81fb      	strh	r3, [r7, #14]

		} while (shifter);
 80019de:	89fb      	ldrh	r3, [r7, #14]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d1de      	bne.n	80019a2 <calc_field_CRC+0x22>
	while (length--) {
 80019e4:	887b      	ldrh	r3, [r7, #2]
 80019e6:	1e5a      	subs	r2, r3, #1
 80019e8:	807a      	strh	r2, [r7, #2]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1d1      	bne.n	8001992 <calc_field_CRC+0x12>

	}
	return crc;
 80019ee:	89bb      	ldrh	r3, [r7, #12]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3714      	adds	r7, #20
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <msv2_init>:

void msv2_init(MSV2_INST_t * msv2) {
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
	static uint32_t id_counter = 0;
	msv2->id = id_counter++;
 8001a04:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <msv2_init+0x24>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	1c5a      	adds	r2, r3, #1
 8001a0a:	4905      	ldr	r1, [pc, #20]	; (8001a20 <msv2_init+0x24>)
 8001a0c:	600a      	str	r2, [r1, #0]
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	6013      	str	r3, [r2, #0]
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	20001800 	.word	0x20001800

08001a24 <msv2_create_frame>:

uint16_t msv2_create_frame(MSV2_INST_t * msv2, uint8_t opcode, uint8_t data_len, uint8_t * data) {
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	607b      	str	r3, [r7, #4]
 8001a2e:	460b      	mov	r3, r1
 8001a30:	72fb      	strb	r3, [r7, #11]
 8001a32:	4613      	mov	r3, r2
 8001a34:	72bb      	strb	r3, [r7, #10]
	uint16_t array_len = data_len+2; //we add 1 for the opcode and len fields and 1 for the crc
 8001a36:	7abb      	ldrb	r3, [r7, #10]
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	3302      	adds	r3, #2
 8001a3c:	827b      	strh	r3, [r7, #18]
	msv2->tx.data_len = data_len;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	7aba      	ldrb	r2, [r7, #10]
 8001a42:	f883 280f 	strb.w	r2, [r3, #2063]	; 0x80f
	msv2->tx.opcode = opcode;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	7afa      	ldrb	r2, [r7, #11]
 8001a4a:	f883 280e 	strb.w	r2, [r3, #2062]	; 0x80e
	msv2->tx.data[0] = DLE;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2290      	movs	r2, #144	; 0x90
 8001a52:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
	msv2->tx.data[1] = STX;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2202      	movs	r2, #2
 8001a5a:	f883 2813 	strb.w	r2, [r3, #2067]	; 0x813
	msv2->tx.data[2] = opcode;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	7afa      	ldrb	r2, [r7, #11]
 8001a62:	f883 2814 	strb.w	r2, [r3, #2068]	; 0x814
	msv2->tx.data[3] = data_len;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	7aba      	ldrb	r2, [r7, #10]
 8001a6a:	f883 2815 	strb.w	r2, [r3, #2069]	; 0x815
	msv2->tx.crc_data[0] = (data_len<<8) | opcode;  //header bytes inverted
 8001a6e:	7abb      	ldrb	r3, [r7, #10]
 8001a70:	021b      	lsls	r3, r3, #8
 8001a72:	b21a      	sxth	r2, r3
 8001a74:	7afb      	ldrb	r3, [r7, #11]
 8001a76:	b21b      	sxth	r3, r3
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	b21b      	sxth	r3, r3
 8001a7c:	b29a      	uxth	r2, r3
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	f8a3 2c12 	strh.w	r2, [r3, #3090]	; 0xc12
	uint16_t counter=4;
 8001a84:	2304      	movs	r3, #4
 8001a86:	82fb      	strh	r3, [r7, #22]
	for(uint16_t i = 0; i < data_len; i++) {
 8001a88:	2300      	movs	r3, #0
 8001a8a:	82bb      	strh	r3, [r7, #20]
 8001a8c:	e05b      	b.n	8001b46 <msv2_create_frame+0x122>
		msv2->tx.data[counter++] = data[2*i]; //bytes in data need to be inverted before
 8001a8e:	8abb      	ldrh	r3, [r7, #20]
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	461a      	mov	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	441a      	add	r2, r3
 8001a98:	8afb      	ldrh	r3, [r7, #22]
 8001a9a:	1c59      	adds	r1, r3, #1
 8001a9c:	82f9      	strh	r1, [r7, #22]
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	7812      	ldrb	r2, [r2, #0]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	440b      	add	r3, r1
 8001aa6:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
		if(msv2->tx.data[counter-1] == DLE) {
 8001aaa:	8afb      	ldrh	r3, [r7, #22]
 8001aac:	3b01      	subs	r3, #1
 8001aae:	68fa      	ldr	r2, [r7, #12]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	f893 3812 	ldrb.w	r3, [r3, #2066]	; 0x812
 8001ab6:	2b90      	cmp	r3, #144	; 0x90
 8001ab8:	d108      	bne.n	8001acc <msv2_create_frame+0xa8>
			msv2->tx.data[counter++] = DLE;
 8001aba:	8afb      	ldrh	r3, [r7, #22]
 8001abc:	1c5a      	adds	r2, r3, #1
 8001abe:	82fa      	strh	r2, [r7, #22]
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	2290      	movs	r2, #144	; 0x90
 8001ac8:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
		}
		msv2->tx.data[counter++] = data[2*i+1];
 8001acc:	8abb      	ldrh	r3, [r7, #20]
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	441a      	add	r2, r3
 8001ad6:	8afb      	ldrh	r3, [r7, #22]
 8001ad8:	1c59      	adds	r1, r3, #1
 8001ada:	82f9      	strh	r1, [r7, #22]
 8001adc:	4619      	mov	r1, r3
 8001ade:	7812      	ldrb	r2, [r2, #0]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	440b      	add	r3, r1
 8001ae4:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
		if(msv2->tx.data[counter-1] == DLE) {
 8001ae8:	8afb      	ldrh	r3, [r7, #22]
 8001aea:	3b01      	subs	r3, #1
 8001aec:	68fa      	ldr	r2, [r7, #12]
 8001aee:	4413      	add	r3, r2
 8001af0:	f893 3812 	ldrb.w	r3, [r3, #2066]	; 0x812
 8001af4:	2b90      	cmp	r3, #144	; 0x90
 8001af6:	d108      	bne.n	8001b0a <msv2_create_frame+0xe6>
			msv2->tx.data[counter++] = DLE;
 8001af8:	8afb      	ldrh	r3, [r7, #22]
 8001afa:	1c5a      	adds	r2, r3, #1
 8001afc:	82fa      	strh	r2, [r7, #22]
 8001afe:	461a      	mov	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	4413      	add	r3, r2
 8001b04:	2290      	movs	r2, #144	; 0x90
 8001b06:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
		}
		msv2->tx.crc_data[i+1] = (data[2*i+1]<<8) |  data[2*i];
 8001b0a:	8abb      	ldrh	r3, [r7, #20]
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	3301      	adds	r3, #1
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	4413      	add	r3, r2
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	021b      	lsls	r3, r3, #8
 8001b18:	b21a      	sxth	r2, r3
 8001b1a:	8abb      	ldrh	r3, [r7, #20]
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	4619      	mov	r1, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	440b      	add	r3, r1
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	b21b      	sxth	r3, r3
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	b21a      	sxth	r2, r3
 8001b2c:	8abb      	ldrh	r3, [r7, #20]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	b291      	uxth	r1, r2
 8001b32:	68fa      	ldr	r2, [r7, #12]
 8001b34:	f203 6304 	addw	r3, r3, #1540	; 0x604
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	4413      	add	r3, r2
 8001b3c:	460a      	mov	r2, r1
 8001b3e:	815a      	strh	r2, [r3, #10]
	for(uint16_t i = 0; i < data_len; i++) {
 8001b40:	8abb      	ldrh	r3, [r7, #20]
 8001b42:	3301      	adds	r3, #1
 8001b44:	82bb      	strh	r3, [r7, #20]
 8001b46:	7abb      	ldrb	r3, [r7, #10]
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	8aba      	ldrh	r2, [r7, #20]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d39e      	bcc.n	8001a8e <msv2_create_frame+0x6a>
	}
	msv2->tx.crc_data[array_len-1] = 0x0000;
 8001b50:	8a7b      	ldrh	r3, [r7, #18]
 8001b52:	3b01      	subs	r3, #1
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	f203 6304 	addw	r3, r3, #1540	; 0x604
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	4413      	add	r3, r2
 8001b5e:	2200      	movs	r2, #0
 8001b60:	815a      	strh	r2, [r3, #10]
	uint16_t crc = calc_field_CRC(msv2->tx.crc_data, array_len);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	f603 4312 	addw	r3, r3, #3090	; 0xc12
 8001b68:	8a7a      	ldrh	r2, [r7, #18]
 8001b6a:	4611      	mov	r1, r2
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff ff07 	bl	8001980 <calc_field_CRC>
 8001b72:	4603      	mov	r3, r0
 8001b74:	823b      	strh	r3, [r7, #16]
	msv2->tx.data[counter++] = crc&0xff; //crc bytes are inverted (LSB first) !!
 8001b76:	8afb      	ldrh	r3, [r7, #22]
 8001b78:	1c5a      	adds	r2, r3, #1
 8001b7a:	82fa      	strh	r2, [r7, #22]
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	8a3b      	ldrh	r3, [r7, #16]
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	440b      	add	r3, r1
 8001b86:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
	if(msv2->tx.data[counter-1] == DLE) {
 8001b8a:	8afb      	ldrh	r3, [r7, #22]
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	4413      	add	r3, r2
 8001b92:	f893 3812 	ldrb.w	r3, [r3, #2066]	; 0x812
 8001b96:	2b90      	cmp	r3, #144	; 0x90
 8001b98:	d108      	bne.n	8001bac <msv2_create_frame+0x188>
		msv2->tx.data[counter++] = DLE;
 8001b9a:	8afb      	ldrh	r3, [r7, #22]
 8001b9c:	1c5a      	adds	r2, r3, #1
 8001b9e:	82fa      	strh	r2, [r7, #22]
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	2290      	movs	r2, #144	; 0x90
 8001ba8:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
	}
	msv2->tx.data[counter++] = crc>>8;
 8001bac:	8a3b      	ldrh	r3, [r7, #16]
 8001bae:	0a1b      	lsrs	r3, r3, #8
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	8afb      	ldrh	r3, [r7, #22]
 8001bb4:	1c59      	adds	r1, r3, #1
 8001bb6:	82f9      	strh	r1, [r7, #22]
 8001bb8:	4619      	mov	r1, r3
 8001bba:	b2d2      	uxtb	r2, r2
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	440b      	add	r3, r1
 8001bc0:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
	if(msv2->tx.data[counter-1] == DLE) {
 8001bc4:	8afb      	ldrh	r3, [r7, #22]
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	68fa      	ldr	r2, [r7, #12]
 8001bca:	4413      	add	r3, r2
 8001bcc:	f893 3812 	ldrb.w	r3, [r3, #2066]	; 0x812
 8001bd0:	2b90      	cmp	r3, #144	; 0x90
 8001bd2:	d108      	bne.n	8001be6 <msv2_create_frame+0x1c2>
		msv2->tx.data[counter++] = DLE;
 8001bd4:	8afb      	ldrh	r3, [r7, #22]
 8001bd6:	1c5a      	adds	r2, r3, #1
 8001bd8:	82fa      	strh	r2, [r7, #22]
 8001bda:	461a      	mov	r2, r3
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	4413      	add	r3, r2
 8001be0:	2290      	movs	r2, #144	; 0x90
 8001be2:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
	}
	return counter;
 8001be6:	8afb      	ldrh	r3, [r7, #22]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3718      	adds	r7, #24
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <msv2_decode_fragment>:

/*
 * 	d: received byte
 *
 */
MSV2_ERROR_t msv2_decode_fragment(MSV2_INST_t * msv2, uint8_t d) {
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	70fb      	strb	r3, [r7, #3]
    //if a DLE in data is followed by STX, we start again
    if (msv2->rx.escape == 1 && d == STX) {
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	7a5b      	ldrb	r3, [r3, #9]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d10a      	bne.n	8001c1a <msv2_decode_fragment+0x2a>
 8001c04:	78fb      	ldrb	r3, [r7, #3]
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d107      	bne.n	8001c1a <msv2_decode_fragment+0x2a>
    	msv2->rx.state = WAITING_OPCODE;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2202      	movs	r2, #2
 8001c0e:	721a      	strb	r2, [r3, #8]
    	msv2->rx.escape = 0;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	725a      	strb	r2, [r3, #9]
        return MSV2_PROGRESS;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e0da      	b.n	8001dd0 <msv2_decode_fragment+0x1e0>
    }

    if (msv2->rx.state == WAITING_DLE && d == DLE) {
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	7a1b      	ldrb	r3, [r3, #8]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d107      	bne.n	8001c32 <msv2_decode_fragment+0x42>
 8001c22:	78fb      	ldrb	r3, [r7, #3]
 8001c24:	2b90      	cmp	r3, #144	; 0x90
 8001c26:	d104      	bne.n	8001c32 <msv2_decode_fragment+0x42>
    	msv2->rx.state = WAITING_STX;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	721a      	strb	r2, [r3, #8]
        return MSV2_PROGRESS;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e0ce      	b.n	8001dd0 <msv2_decode_fragment+0x1e0>
    }
    //escape in case a DLE is in the data
    if (d == DLE && msv2->rx.escape == 0) {
 8001c32:	78fb      	ldrb	r3, [r7, #3]
 8001c34:	2b90      	cmp	r3, #144	; 0x90
 8001c36:	d108      	bne.n	8001c4a <msv2_decode_fragment+0x5a>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	7a5b      	ldrb	r3, [r3, #9]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d104      	bne.n	8001c4a <msv2_decode_fragment+0x5a>
    	msv2->rx.escape = 1;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	725a      	strb	r2, [r3, #9]
        return MSV2_PROGRESS;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e0c2      	b.n	8001dd0 <msv2_decode_fragment+0x1e0>
    }
    //if it is doubled, it counts as data
    if (d == DLE && msv2->rx.escape == 1) {
 8001c4a:	78fb      	ldrb	r3, [r7, #3]
 8001c4c:	2b90      	cmp	r3, #144	; 0x90
 8001c4e:	d106      	bne.n	8001c5e <msv2_decode_fragment+0x6e>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	7a5b      	ldrb	r3, [r3, #9]
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d102      	bne.n	8001c5e <msv2_decode_fragment+0x6e>
    	msv2->rx.escape = 0;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	725a      	strb	r2, [r3, #9]

    }

    if (msv2->rx.state == WAITING_STX && d == STX) {
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	7a1b      	ldrb	r3, [r3, #8]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d107      	bne.n	8001c76 <msv2_decode_fragment+0x86>
 8001c66:	78fb      	ldrb	r3, [r7, #3]
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d104      	bne.n	8001c76 <msv2_decode_fragment+0x86>
    	msv2->rx.state = WAITING_OPCODE;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2202      	movs	r2, #2
 8001c70:	721a      	strb	r2, [r3, #8]
        return MSV2_PROGRESS;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e0ac      	b.n	8001dd0 <msv2_decode_fragment+0x1e0>
    }

    if (msv2->rx.state == WAITING_OPCODE) {
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	7a1b      	ldrb	r3, [r3, #8]
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d107      	bne.n	8001c8e <msv2_decode_fragment+0x9e>
    	msv2->rx.opcode = d;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	78fa      	ldrb	r2, [r7, #3]
 8001c82:	711a      	strb	r2, [r3, #4]
    	msv2->rx.state = WAITING_LEN;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2203      	movs	r2, #3
 8001c88:	721a      	strb	r2, [r3, #8]
        return MSV2_PROGRESS;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e0a0      	b.n	8001dd0 <msv2_decode_fragment+0x1e0>
    }

    if (msv2->rx.state == WAITING_LEN) {
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	7a1b      	ldrb	r3, [r3, #8]
 8001c92:	2b03      	cmp	r3, #3
 8001c94:	d11d      	bne.n	8001cd2 <msv2_decode_fragment+0xe2>
    	msv2->rx.data_len = d; //legth in words
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	78fa      	ldrb	r2, [r7, #3]
 8001c9a:	715a      	strb	r2, [r3, #5]
    	msv2->rx.length = 2*d; //length in bytes
 8001c9c:	78fb      	ldrb	r3, [r7, #3]
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	b29a      	uxth	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	815a      	strh	r2, [r3, #10]
    	msv2->rx.crc_data[0] = (msv2->rx.data_len<<8) | msv2->rx.opcode;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	795b      	ldrb	r3, [r3, #5]
 8001cac:	021b      	lsls	r3, r3, #8
 8001cae:	b21a      	sxth	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	791b      	ldrb	r3, [r3, #4]
 8001cb4:	b21b      	sxth	r3, r3
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	b21b      	sxth	r3, r3
 8001cba:	b29a      	uxth	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
    	msv2->rx.counter = 0;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	819a      	strh	r2, [r3, #12]
    	msv2->rx.state = WAITING_DATA;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2204      	movs	r2, #4
 8001ccc:	721a      	strb	r2, [r3, #8]
        return MSV2_PROGRESS;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e07e      	b.n	8001dd0 <msv2_decode_fragment+0x1e0>
    }

    if (msv2->rx.state == WAITING_DATA) {
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	7a1b      	ldrb	r3, [r3, #8]
 8001cd6:	2b04      	cmp	r3, #4
 8001cd8:	d136      	bne.n	8001d48 <msv2_decode_fragment+0x158>
    	msv2->rx.data[msv2->rx.counter] = d;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	899b      	ldrh	r3, [r3, #12]
 8001cde:	461a      	mov	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	78fa      	ldrb	r2, [r7, #3]
 8001ce6:	739a      	strb	r2, [r3, #14]
    	if(msv2->rx.counter & 0x01) { //LSB == '1'
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	899b      	ldrh	r3, [r3, #12]
 8001cec:	f003 0301 	and.w	r3, r3, #1
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d018      	beq.n	8001d26 <msv2_decode_fragment+0x136>
    		msv2->rx.crc_data[msv2->rx.counter/2 + 1] = (msv2->rx.data[msv2->rx.counter - 1]) |  d<<8;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	899b      	ldrh	r3, [r3, #12]
 8001cf8:	3b01      	subs	r3, #1
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	7b9b      	ldrb	r3, [r3, #14]
 8001d00:	b21a      	sxth	r2, r3
 8001d02:	78fb      	ldrb	r3, [r7, #3]
 8001d04:	021b      	lsls	r3, r3, #8
 8001d06:	b21b      	sxth	r3, r3
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	b21a      	sxth	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	899b      	ldrh	r3, [r3, #12]
 8001d10:	085b      	lsrs	r3, r3, #1
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	3301      	adds	r3, #1
 8001d16:	b291      	uxth	r1, r2
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	4413      	add	r3, r2
 8001d22:	460a      	mov	r2, r1
 8001d24:	80da      	strh	r2, [r3, #6]
    	}
    	msv2->rx.counter += 1;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	899b      	ldrh	r3, [r3, #12]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	819a      	strh	r2, [r3, #12]
        //the length  is in WORDS, but we read BYTES
        if (msv2->rx.counter==msv2->rx.length) {
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	899a      	ldrh	r2, [r3, #12]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	895b      	ldrh	r3, [r3, #10]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d102      	bne.n	8001d44 <msv2_decode_fragment+0x154>
        	msv2->rx.state = WAITING_CRC1;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2205      	movs	r2, #5
 8001d42:	721a      	strb	r2, [r3, #8]
        }
        return MSV2_PROGRESS;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e043      	b.n	8001dd0 <msv2_decode_fragment+0x1e0>
    }

    if (msv2->rx.state == WAITING_CRC1) {
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	7a1b      	ldrb	r3, [r3, #8]
 8001d4c:	2b05      	cmp	r3, #5
 8001d4e:	d108      	bne.n	8001d62 <msv2_decode_fragment+0x172>
    	msv2->rx.crc = d;
 8001d50:	78fb      	ldrb	r3, [r7, #3]
 8001d52:	b29a      	uxth	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	80da      	strh	r2, [r3, #6]
    	msv2->rx.state = WAITING_CRC2;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2206      	movs	r2, #6
 8001d5c:	721a      	strb	r2, [r3, #8]
        return MSV2_PROGRESS;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e036      	b.n	8001dd0 <msv2_decode_fragment+0x1e0>

    }

    if (msv2->rx.state == WAITING_CRC2) {
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	7a1b      	ldrb	r3, [r3, #8]
 8001d66:	2b06      	cmp	r3, #6
 8001d68:	d12e      	bne.n	8001dc8 <msv2_decode_fragment+0x1d8>
    	msv2->rx.crc |= d<<8;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	88db      	ldrh	r3, [r3, #6]
 8001d6e:	b21a      	sxth	r2, r3
 8001d70:	78fb      	ldrb	r3, [r7, #3]
 8001d72:	021b      	lsls	r3, r3, #8
 8001d74:	b21b      	sxth	r3, r3
 8001d76:	4313      	orrs	r3, r2
 8001d78:	b21b      	sxth	r3, r3
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	80da      	strh	r2, [r3, #6]
    	msv2->rx.state = WAITING_DLE;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	721a      	strb	r2, [r3, #8]
    	msv2->rx.crc_data[msv2->rx.data_len+1] = 0;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	795b      	ldrb	r3, [r3, #5]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	4413      	add	r3, r2
 8001d96:	2200      	movs	r2, #0
 8001d98:	80da      	strh	r2, [r3, #6]
    	uint16_t crc = calc_field_CRC(msv2->rx.crc_data, msv2->rx.data_len+2);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f203 420e 	addw	r2, r3, #1038	; 0x40e
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	795b      	ldrb	r3, [r3, #5]
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	3302      	adds	r3, #2
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	4619      	mov	r1, r3
 8001dac:	4610      	mov	r0, r2
 8001dae:	f7ff fde7 	bl	8001980 <calc_field_CRC>
 8001db2:	4603      	mov	r3, r0
 8001db4:	81fb      	strh	r3, [r7, #14]
    	if(msv2->rx.crc == crc) {
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	88db      	ldrh	r3, [r3, #6]
 8001dba:	89fa      	ldrh	r2, [r7, #14]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d101      	bne.n	8001dc4 <msv2_decode_fragment+0x1d4>
    		return MSV2_SUCCESS;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	e005      	b.n	8001dd0 <msv2_decode_fragment+0x1e0>
    	} else {
    		return MSV2_WRONG_CRC;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	e003      	b.n	8001dd0 <msv2_decode_fragment+0x1e0>
    	}
    }
    msv2->rx.state=WAITING_DLE;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	721a      	strb	r2, [r3, #8]
    return MSV2_PROGRESS;
 8001dce:	2301      	movs	r3, #1
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <msv2_tx_data>:

uint8_t * msv2_rx_data(MSV2_INST_t * msv2) {
	return msv2->rx.data;
}

uint8_t * msv2_tx_data(MSV2_INST_t * msv2) {
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
	return msv2->tx.data;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f603 0312 	addw	r3, r3, #2066	; 0x812
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <util_buffer_u8_init>:
static inline void util_buffer_u8_init(UTIL_BUFFER_U8_t * bfr, uint8_t * buffer, uint16_t bfr_len) {
 8001df2:	b480      	push	{r7}
 8001df4:	b085      	sub	sp, #20
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	60f8      	str	r0, [r7, #12]
 8001dfa:	60b9      	str	r1, [r7, #8]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	80fb      	strh	r3, [r7, #6]
	bfr->c_ix = 0;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2200      	movs	r2, #0
 8001e04:	801a      	strh	r2, [r3, #0]
	bfr->l_ix = 0;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	805a      	strh	r2, [r3, #2]
	bfr->bfr_len = bfr_len;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	88fa      	ldrh	r2, [r7, #6]
 8001e10:	809a      	strh	r2, [r3, #4]
	bfr->buffer = buffer;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	68ba      	ldr	r2, [r7, #8]
 8001e16:	609a      	str	r2, [r3, #8]
}
 8001e18:	bf00      	nop
 8001e1a:	3714      	adds	r7, #20
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <util_buffer_u8_add>:
static inline void util_buffer_u8_add(UTIL_BUFFER_U8_t * bfr, uint8_t d) {
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	70fb      	strb	r3, [r7, #3]
	bfr->buffer[bfr->c_ix++] = d;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	881b      	ldrh	r3, [r3, #0]
 8001e38:	1c59      	adds	r1, r3, #1
 8001e3a:	b288      	uxth	r0, r1
 8001e3c:	6879      	ldr	r1, [r7, #4]
 8001e3e:	8008      	strh	r0, [r1, #0]
 8001e40:	4413      	add	r3, r2
 8001e42:	78fa      	ldrb	r2, [r7, #3]
 8001e44:	701a      	strb	r2, [r3, #0]
	if(bfr->c_ix == bfr->bfr_len) bfr->c_ix = 0;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	881a      	ldrh	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	889b      	ldrh	r3, [r3, #4]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d102      	bne.n	8001e58 <util_buffer_u8_add+0x34>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	801a      	strh	r2, [r3, #0]
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <util_buffer_u8_get>:
static inline uint8_t util_buffer_u8_get(UTIL_BUFFER_U8_t * bfr) {
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
	uint8_t tmp = bfr->buffer[bfr->l_ix++];
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	885b      	ldrh	r3, [r3, #2]
 8001e74:	1c59      	adds	r1, r3, #1
 8001e76:	b288      	uxth	r0, r1
 8001e78:	6879      	ldr	r1, [r7, #4]
 8001e7a:	8048      	strh	r0, [r1, #2]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	73fb      	strb	r3, [r7, #15]
	if(bfr->l_ix == bfr->bfr_len) bfr->l_ix=0;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	885a      	ldrh	r2, [r3, #2]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	889b      	ldrh	r3, [r3, #4]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d102      	bne.n	8001e94 <util_buffer_u8_get+0x30>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	805a      	strh	r2, [r3, #2]
	return tmp;
 8001e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3714      	adds	r7, #20
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <util_buffer_u8_isempty>:
static inline uint8_t util_buffer_u8_isempty(UTIL_BUFFER_U8_t * bfr) {
 8001ea2:	b480      	push	{r7}
 8001ea4:	b083      	sub	sp, #12
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
	return bfr->l_ix == bfr->c_ix;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	885a      	ldrh	r2, [r3, #2]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	881b      	ldrh	r3, [r3, #0]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	bf0c      	ite	eq
 8001eb6:	2301      	moveq	r3, #1
 8001eb8:	2300      	movne	r3, #0
 8001eba:	b2db      	uxtb	r3, r3
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <HAL_UART_RxCpltCallback>:

/*
 * UART RX ISR
 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	60bb      	str	r3, [r7, #8]
	for(uint16_t i = 0; i < serial_devices_count; i++) {
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	81fb      	strh	r3, [r7, #14]
 8001ed8:	e025      	b.n	8001f26 <HAL_UART_RxCpltCallback+0x5e>
		if(serial_devices[i]->uart == huart) {
 8001eda:	89fb      	ldrh	r3, [r7, #14]
 8001edc:	4a1c      	ldr	r2, [pc, #112]	; (8001f50 <HAL_UART_RxCpltCallback+0x88>)
 8001ede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d11a      	bne.n	8001f20 <HAL_UART_RxCpltCallback+0x58>
			util_buffer_u8_add(&serial_devices[i]->bfr, serial_devices[i]->dma_buffer);
 8001eea:	89fb      	ldrh	r3, [r7, #14]
 8001eec:	4a18      	ldr	r2, [pc, #96]	; (8001f50 <HAL_UART_RxCpltCallback+0x88>)
 8001eee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ef2:	f103 0210 	add.w	r2, r3, #16
 8001ef6:	89fb      	ldrh	r3, [r7, #14]
 8001ef8:	4915      	ldr	r1, [pc, #84]	; (8001f50 <HAL_UART_RxCpltCallback+0x88>)
 8001efa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001efe:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 8001f02:	4619      	mov	r1, r3
 8001f04:	4610      	mov	r0, r2
 8001f06:	f7ff ff8d 	bl	8001e24 <util_buffer_u8_add>
			xSemaphoreGiveFromISR( serial_rx_sem, &xHigherPriorityTaskWoken );
 8001f0a:	4b12      	ldr	r3, [pc, #72]	; (8001f54 <HAL_UART_RxCpltCallback+0x8c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f107 0208 	add.w	r2, r7, #8
 8001f12:	4611      	mov	r1, r2
 8001f14:	4618      	mov	r0, r3
 8001f16:	f007 f9bd 	bl	8009294 <xQueueGiveFromISR>
			if(i==2) {
 8001f1a:	89fb      	ldrh	r3, [r7, #14]
 8001f1c:	2b02      	cmp	r3, #2
				break;
			}
			break;
 8001f1e:	e007      	b.n	8001f30 <HAL_UART_RxCpltCallback+0x68>
	for(uint16_t i = 0; i < serial_devices_count; i++) {
 8001f20:	89fb      	ldrh	r3, [r7, #14]
 8001f22:	3301      	adds	r3, #1
 8001f24:	81fb      	strh	r3, [r7, #14]
 8001f26:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <HAL_UART_RxCpltCallback+0x90>)
 8001f28:	881b      	ldrh	r3, [r3, #0]
 8001f2a:	89fa      	ldrh	r2, [r7, #14]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d3d4      	bcc.n	8001eda <HAL_UART_RxCpltCallback+0x12>
		}
	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d007      	beq.n	8001f46 <HAL_UART_RxCpltCallback+0x7e>
 8001f36:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <HAL_UART_RxCpltCallback+0x94>)
 8001f38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f3c:	601a      	str	r2, [r3, #0]
 8001f3e:	f3bf 8f4f 	dsb	sy
 8001f42:	f3bf 8f6f 	isb	sy
}
 8001f46:	bf00      	nop
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	20001804 	.word	0x20001804
 8001f54:	20001848 	.word	0x20001848
 8001f58:	20001844 	.word	0x20001844
 8001f5c:	e000ed04 	.word	0xe000ed04

08001f60 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef * lol = huart;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	60fb      	str	r3, [r7, #12]
}
 8001f6c:	bf00      	nop
 8001f6e:	3714      	adds	r7, #20
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <serial_global_init>:



void serial_global_init(void) {
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af02      	add	r7, sp, #8
	serial_rx_sem = xSemaphoreCreateBinaryStatic( &serial_rx_sem_buffer );
 8001f7e:	2303      	movs	r3, #3
 8001f80:	9300      	str	r3, [sp, #0]
 8001f82:	4b06      	ldr	r3, [pc, #24]	; (8001f9c <serial_global_init+0x24>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	2100      	movs	r1, #0
 8001f88:	2001      	movs	r0, #1
 8001f8a:	f006 ffbd 	bl	8008f08 <xQueueGenericCreateStatic>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	4a03      	ldr	r2, [pc, #12]	; (8001fa0 <serial_global_init+0x28>)
 8001f92:	6013      	str	r3, [r2, #0]
}
 8001f94:	bf00      	nop
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	2000184c 	.word	0x2000184c
 8001fa0:	20001848 	.word	0x20001848

08001fa4 <serial_init>:


void serial_init(SERIAL_INST_t * ser, UART_HandleTypeDef * uart, void * inst, SERIAL_RET_t (*decode_fcn)(void *, uint8_t)) {
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
 8001fb0:	603b      	str	r3, [r7, #0]
	ser->id = serial_devices_count;
 8001fb2:	4b1a      	ldr	r3, [pc, #104]	; (800201c <serial_init+0x78>)
 8001fb4:	881b      	ldrh	r3, [r3, #0]
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	601a      	str	r2, [r3, #0]
	ser->uart = uart;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	68ba      	ldr	r2, [r7, #8]
 8001fc0:	605a      	str	r2, [r3, #4]
	ser->inst = inst;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	609a      	str	r2, [r3, #8]
	ser->decode_fcn = decode_fcn;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	60da      	str	r2, [r3, #12]
	util_buffer_u8_init(&ser->bfr, ser->buffer, SERIAL_FIFO_LEN);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f103 0010 	add.w	r0, r3, #16
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	331c      	adds	r3, #28
 8001fd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fdc:	4619      	mov	r1, r3
 8001fde:	f7ff ff08 	bl	8001df2 <util_buffer_u8_init>
	if(serial_devices_count < SERIAL_MAX_INST) {
 8001fe2:	4b0e      	ldr	r3, [pc, #56]	; (800201c <serial_init+0x78>)
 8001fe4:	881b      	ldrh	r3, [r3, #0]
 8001fe6:	2b0f      	cmp	r3, #15
 8001fe8:	d80e      	bhi.n	8002008 <serial_init+0x64>
		HAL_UART_Receive_DMA(uart, &ser->dma_buffer, 1);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	68b8      	ldr	r0, [r7, #8]
 8001ff6:	f005 fc89 	bl	800790c <HAL_UART_Receive_DMA>
		serial_devices[serial_devices_count] = ser;
 8001ffa:	4b08      	ldr	r3, [pc, #32]	; (800201c <serial_init+0x78>)
 8001ffc:	881b      	ldrh	r3, [r3, #0]
 8001ffe:	4619      	mov	r1, r3
 8002000:	4a07      	ldr	r2, [pc, #28]	; (8002020 <serial_init+0x7c>)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	}
	serial_devices_count++;
 8002008:	4b04      	ldr	r3, [pc, #16]	; (800201c <serial_init+0x78>)
 800200a:	881b      	ldrh	r3, [r3, #0]
 800200c:	3301      	adds	r3, #1
 800200e:	b29a      	uxth	r2, r3
 8002010:	4b02      	ldr	r3, [pc, #8]	; (800201c <serial_init+0x78>)
 8002012:	801a      	strh	r2, [r3, #0]
}
 8002014:	bf00      	nop
 8002016:	3710      	adds	r7, #16
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	20001844 	.word	0x20001844
 8002020:	20001804 	.word	0x20001804

08002024 <serial_send>:

void serial_send(SERIAL_INST_t * ser, uint8_t * data, uint16_t length) {
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	4613      	mov	r3, r2
 8002030:	80fb      	strh	r3, [r7, #6]
	HAL_UART_Transmit_DMA(ser->uart, data, length);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	88fa      	ldrh	r2, [r7, #6]
 8002038:	68b9      	ldr	r1, [r7, #8]
 800203a:	4618      	mov	r0, r3
 800203c:	f005 fbfa 	bl	8007834 <HAL_UART_Transmit_DMA>
	//HAL_UART_Transmit(ser->uart, data, length, 500);
}
 8002040:	bf00      	nop
 8002042:	3710      	adds	r7, #16
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <serial_garbage_clean>:

void serial_garbage_clean(SERIAL_INST_t * ser) {
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(ser->uart, &ser->dma_buffer, 1);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6858      	ldr	r0, [r3, #4]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 800205a:	2201      	movs	r2, #1
 800205c:	4619      	mov	r1, r3
 800205e:	f005 fc55 	bl	800790c <HAL_UART_Receive_DMA>
}
 8002062:	bf00      	nop
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
	...

0800206c <serial_thread>:

void serial_thread(void * arg) {
 800206c:	b5b0      	push	{r4, r5, r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]

	serial_global_init();
 8002074:	f7ff ff80 	bl	8001f78 <serial_global_init>

	for(;;) {
		if( xSemaphoreTake(serial_rx_sem, 0xffff) == pdTRUE ) {
 8002078:	4b1b      	ldr	r3, [pc, #108]	; (80020e8 <serial_thread+0x7c>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002080:	4618      	mov	r0, r3
 8002082:	f007 f995 	bl	80093b0 <xQueueSemaphoreTake>
 8002086:	4603      	mov	r3, r0
 8002088:	2b01      	cmp	r3, #1
 800208a:	d1f5      	bne.n	8002078 <serial_thread+0xc>
			for(uint16_t i = 0; i < serial_devices_count; i++) {
 800208c:	2300      	movs	r3, #0
 800208e:	81fb      	strh	r3, [r7, #14]
 8002090:	e023      	b.n	80020da <serial_thread+0x6e>
				while(!util_buffer_u8_isempty(&serial_devices[i]->bfr)) {
					serial_devices[i]->decode_fcn(serial_devices[i]->inst, util_buffer_u8_get(&serial_devices[i]->bfr));
 8002092:	89fb      	ldrh	r3, [r7, #14]
 8002094:	4a15      	ldr	r2, [pc, #84]	; (80020ec <serial_thread+0x80>)
 8002096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800209a:	68dc      	ldr	r4, [r3, #12]
 800209c:	89fb      	ldrh	r3, [r7, #14]
 800209e:	4a13      	ldr	r2, [pc, #76]	; (80020ec <serial_thread+0x80>)
 80020a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020a4:	689d      	ldr	r5, [r3, #8]
 80020a6:	89fb      	ldrh	r3, [r7, #14]
 80020a8:	4a10      	ldr	r2, [pc, #64]	; (80020ec <serial_thread+0x80>)
 80020aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ae:	3310      	adds	r3, #16
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff fed7 	bl	8001e64 <util_buffer_u8_get>
 80020b6:	4603      	mov	r3, r0
 80020b8:	4619      	mov	r1, r3
 80020ba:	4628      	mov	r0, r5
 80020bc:	47a0      	blx	r4
				while(!util_buffer_u8_isempty(&serial_devices[i]->bfr)) {
 80020be:	89fb      	ldrh	r3, [r7, #14]
 80020c0:	4a0a      	ldr	r2, [pc, #40]	; (80020ec <serial_thread+0x80>)
 80020c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020c6:	3310      	adds	r3, #16
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff feea 	bl	8001ea2 <util_buffer_u8_isempty>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d0de      	beq.n	8002092 <serial_thread+0x26>
			for(uint16_t i = 0; i < serial_devices_count; i++) {
 80020d4:	89fb      	ldrh	r3, [r7, #14]
 80020d6:	3301      	adds	r3, #1
 80020d8:	81fb      	strh	r3, [r7, #14]
 80020da:	4b05      	ldr	r3, [pc, #20]	; (80020f0 <serial_thread+0x84>)
 80020dc:	881b      	ldrh	r3, [r3, #0]
 80020de:	89fa      	ldrh	r2, [r7, #14]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d3ec      	bcc.n	80020be <serial_thread+0x52>
		if( xSemaphoreTake(serial_rx_sem, 0xffff) == pdTRUE ) {
 80020e4:	e7c8      	b.n	8002078 <serial_thread+0xc>
 80020e6:	bf00      	nop
 80020e8:	20001848 	.word	0x20001848
 80020ec:	20001804 	.word	0x20001804
 80020f0:	20001844 	.word	0x20001844

080020f4 <storage_init>:

/**********************
 *	DECLARATIONS
 **********************/

void storage_init() {
 80020f4:	b5b0      	push	{r4, r5, r7, lr}
 80020f6:	b09c      	sub	sp, #112	; 0x70
 80020f8:	af02      	add	r7, sp, #8
	static STORAGE_HEADER_t header;
	flash_init();
 80020fa:	f006 fba2 	bl	8008842 <flash_init>
	flash_read(HEADER_ADDR, (uint8_t *) &header, sizeof(STORAGE_HEADER_t));
 80020fe:	2210      	movs	r2, #16
 8002100:	4936      	ldr	r1, [pc, #216]	; (80021dc <storage_init+0xe8>)
 8002102:	2000      	movs	r0, #0
 8002104:	f006 fbc2 	bl	800888c <flash_read>
	if(header.magic == MAGIC_NUMBER) {
 8002108:	4b34      	ldr	r3, [pc, #208]	; (80021dc <storage_init+0xe8>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a34      	ldr	r2, [pc, #208]	; (80021e0 <storage_init+0xec>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d149      	bne.n	80021a6 <storage_init+0xb2>
		used_subsectors = header.used;
 8002112:	4b32      	ldr	r3, [pc, #200]	; (80021dc <storage_init+0xe8>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	4a33      	ldr	r2, [pc, #204]	; (80021e4 <storage_init+0xf0>)
 8002118:	6013      	str	r3, [r2, #0]
		if(used_subsectors > 1) {
 800211a:	4b32      	ldr	r3, [pc, #200]	; (80021e4 <storage_init+0xf0>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d93d      	bls.n	800219e <storage_init+0xaa>
			STORAGE_DATA_t data = {0};
 8002122:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002126:	2220      	movs	r2, #32
 8002128:	2100      	movs	r1, #0
 800212a:	4618      	mov	r0, r3
 800212c:	f008 fdee 	bl	800ad0c <memset>
			STORAGE_DATA_t last_valid_data = {0};
 8002130:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002134:	2220      	movs	r2, #32
 8002136:	2100      	movs	r1, #0
 8002138:	4618      	mov	r0, r3
 800213a:	f008 fde7 	bl	800ad0c <memset>
			uint32_t count = (used_subsectors-2)*SAMPLES_PER_SS;
 800213e:	4b29      	ldr	r3, [pc, #164]	; (80021e4 <storage_init+0xf0>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	3b02      	subs	r3, #2
 8002144:	01db      	lsls	r3, r3, #7
 8002146:	667b      	str	r3, [r7, #100]	; 0x64
			data = read_data(count);
 8002148:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800214c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800214e:	4618      	mov	r0, r3
 8002150:	f000 f878 	bl	8002244 <read_data>
			while(data.sample_id == count){
 8002154:	e01a      	b.n	800218c <storage_init+0x98>
				last_valid_data = data;
 8002156:	f107 0444 	add.w	r4, r7, #68	; 0x44
 800215a:	f107 0524 	add.w	r5, r7, #36	; 0x24
 800215e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002160:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002162:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002166:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				data = read_data(++count);
 800216a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800216c:	3301      	adds	r3, #1
 800216e:	667b      	str	r3, [r7, #100]	; 0x64
 8002170:	463b      	mov	r3, r7
 8002172:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002174:	4618      	mov	r0, r3
 8002176:	f000 f865 	bl	8002244 <read_data>
 800217a:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800217e:	463d      	mov	r5, r7
 8002180:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002182:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002184:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002188:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			while(data.sample_id == count){
 800218c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800218e:	461a      	mov	r2, r3
 8002190:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002192:	4293      	cmp	r3, r2
 8002194:	d0df      	beq.n	8002156 <storage_init+0x62>
			}

			data_counter = count;
 8002196:	4a14      	ldr	r2, [pc, #80]	; (80021e8 <storage_init+0xf4>)
 8002198:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800219a:	6013      	str	r3, [r2, #0]
 800219c:	e009      	b.n	80021b2 <storage_init+0xbe>
		} else {
			data_counter = 0;
 800219e:	4b12      	ldr	r3, [pc, #72]	; (80021e8 <storage_init+0xf4>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	e005      	b.n	80021b2 <storage_init+0xbe>
		}
	} else {
		write_header_used(1);
 80021a6:	2001      	movs	r0, #1
 80021a8:	f000 f828 	bl	80021fc <write_header_used>
		data_counter = 0;
 80021ac:	4b0e      	ldr	r3, [pc, #56]	; (80021e8 <storage_init+0xf4>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]
	}
	record_active = 0;
 80021b2:	4b0e      	ldr	r3, [pc, #56]	; (80021ec <storage_init+0xf8>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	701a      	strb	r2, [r3, #0]
	restart_required = 0;
 80021b8:	4b0d      	ldr	r3, [pc, #52]	; (80021f0 <storage_init+0xfc>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	701a      	strb	r2, [r3, #0]
	storage_sem = xSemaphoreCreateBinaryStatic(&storage_sem_buffer);
 80021be:	2303      	movs	r3, #3
 80021c0:	9300      	str	r3, [sp, #0]
 80021c2:	4b0c      	ldr	r3, [pc, #48]	; (80021f4 <storage_init+0x100>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	2100      	movs	r1, #0
 80021c8:	2001      	movs	r0, #1
 80021ca:	f006 fe9d 	bl	8008f08 <xQueueGenericCreateStatic>
 80021ce:	4603      	mov	r3, r0
 80021d0:	4a09      	ldr	r2, [pc, #36]	; (80021f8 <storage_init+0x104>)
 80021d2:	6013      	str	r3, [r2, #0]
}
 80021d4:	bf00      	nop
 80021d6:	3768      	adds	r7, #104	; 0x68
 80021d8:	46bd      	mov	sp, r7
 80021da:	bdb0      	pop	{r4, r5, r7, pc}
 80021dc:	200018f0 	.word	0x200018f0
 80021e0:	cbe0c5e6 	.word	0xcbe0c5e6
 80021e4:	20001894 	.word	0x20001894
 80021e8:	20001898 	.word	0x20001898
 80021ec:	2000189c 	.word	0x2000189c
 80021f0:	2000189d 	.word	0x2000189d
 80021f4:	200018a8 	.word	0x200018a8
 80021f8:	200018a4 	.word	0x200018a4

080021fc <write_header_used>:

}



static void write_header_used(uint32_t used) {
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
	static STORAGE_HEADER_t header;
	flash_read(HEADER_ADDR, (uint8_t *) &header, sizeof(STORAGE_HEADER_t));
 8002204:	2210      	movs	r2, #16
 8002206:	490c      	ldr	r1, [pc, #48]	; (8002238 <write_header_used+0x3c>)
 8002208:	2000      	movs	r0, #0
 800220a:	f006 fb3f 	bl	800888c <flash_read>
	flash_erase_subsector(HEADER_ADDR);
 800220e:	2000      	movs	r0, #0
 8002210:	f006 fc34 	bl	8008a7c <flash_erase_subsector>
	header.magic = MAGIC_NUMBER;
 8002214:	4b08      	ldr	r3, [pc, #32]	; (8002238 <write_header_used+0x3c>)
 8002216:	4a09      	ldr	r2, [pc, #36]	; (800223c <write_header_used+0x40>)
 8002218:	601a      	str	r2, [r3, #0]
	header.used = used;
 800221a:	4a07      	ldr	r2, [pc, #28]	; (8002238 <write_header_used+0x3c>)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6053      	str	r3, [r2, #4]
	flash_write(HEADER_ADDR, (uint8_t *) &header, sizeof(STORAGE_HEADER_t));
 8002220:	2210      	movs	r2, #16
 8002222:	4905      	ldr	r1, [pc, #20]	; (8002238 <write_header_used+0x3c>)
 8002224:	2000      	movs	r0, #0
 8002226:	f006 fbb2 	bl	800898e <flash_write>
	used_subsectors = used;
 800222a:	4a05      	ldr	r2, [pc, #20]	; (8002240 <write_header_used+0x44>)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6013      	str	r3, [r2, #0]
}
 8002230:	bf00      	nop
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	20001900 	.word	0x20001900
 800223c:	cbe0c5e6 	.word	0xcbe0c5e6
 8002240:	20001894 	.word	0x20001894

08002244 <read_data>:



static STORAGE_DATA_t read_data(uint32_t id) {
 8002244:	b5b0      	push	{r4, r5, r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
	static STORAGE_DATA_t data;
	flash_read(ADDRESS(id), (uint8_t *) &data, sizeof(STORAGE_DATA_t));
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	3380      	adds	r3, #128	; 0x80
 8002252:	015b      	lsls	r3, r3, #5
 8002254:	2220      	movs	r2, #32
 8002256:	4909      	ldr	r1, [pc, #36]	; (800227c <read_data+0x38>)
 8002258:	4618      	mov	r0, r3
 800225a:	f006 fb17 	bl	800888c <flash_read>
	return data;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a06      	ldr	r2, [pc, #24]	; (800227c <read_data+0x38>)
 8002262:	461c      	mov	r4, r3
 8002264:	4615      	mov	r5, r2
 8002266:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002268:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800226a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800226e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bdb0      	pop	{r4, r5, r7, pc}
 800227a:	bf00      	nop
 800227c:	20001910 	.word	0x20001910

08002280 <storage_get_used>:
		flash_erase_subsector(addr);
	}
	flash_write(addr, (uint8_t *) &data, sizeof(STORAGE_DATA_t));
}

uint32_t storage_get_used() {
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
	return data_counter;
 8002284:	4b03      	ldr	r3, [pc, #12]	; (8002294 <storage_get_used+0x14>)
 8002286:	681b      	ldr	r3, [r3, #0]
}
 8002288:	4618      	mov	r0, r3
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	20001898 	.word	0x20001898

08002298 <storage_get_sample>:

void storage_get_sample(uint32_t id, void * dest) {
 8002298:	b5b0      	push	{r4, r5, r7, lr}
 800229a:	b08a      	sub	sp, #40	; 0x28
 800229c:	af00      	add	r7, sp, #0
 800229e:	6278      	str	r0, [r7, #36]	; 0x24
 80022a0:	6239      	str	r1, [r7, #32]
	*((STORAGE_DATA_t *)dest) = read_data(id);
 80022a2:	6a3c      	ldr	r4, [r7, #32]
 80022a4:	463b      	mov	r3, r7
 80022a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff ffcb 	bl	8002244 <read_data>
 80022ae:	4625      	mov	r5, r4
 80022b0:	463c      	mov	r4, r7
 80022b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022b6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80022ba:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 80022be:	bf00      	nop
 80022c0:	3728      	adds	r7, #40	; 0x28
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080022c8 <storage_disable>:

void storage_enable() {
	record_active = 1;
}

void storage_disable() {
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
	record_should_stop = STORAGE_AFTER_SAVE;
 80022cc:	4b04      	ldr	r3, [pc, #16]	; (80022e0 <storage_disable+0x18>)
 80022ce:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80022d2:	601a      	str	r2, [r3, #0]
}
 80022d4:	bf00      	nop
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	200018a0 	.word	0x200018a0

080022e4 <storage_thread>:
		xSemaphoreGive(storage_sem);
	}
}


void storage_thread(void * arg) {
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]



	storage_init();
 80022ec:	f7ff ff02 	bl	80020f4 <storage_init>




	for(;;) {
		last_time = time;
 80022f0:	4b1b      	ldr	r3, [pc, #108]	; (8002360 <storage_thread+0x7c>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a1b      	ldr	r2, [pc, #108]	; (8002364 <storage_thread+0x80>)
 80022f6:	6013      	str	r3, [r2, #0]
		time = HAL_GetTick();
 80022f8:	f001 f9ee 	bl	80036d8 <HAL_GetTick>
 80022fc:	4603      	mov	r3, r0
 80022fe:	4a18      	ldr	r2, [pc, #96]	; (8002360 <storage_thread+0x7c>)
 8002300:	6013      	str	r3, [r2, #0]
		if(restart_required) {
 8002302:	4b19      	ldr	r3, [pc, #100]	; (8002368 <storage_thread+0x84>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d008      	beq.n	800231c <storage_thread+0x38>
			write_header_used(1);
 800230a:	2001      	movs	r0, #1
 800230c:	f7ff ff76 	bl	80021fc <write_header_used>
			data_counter = 0;
 8002310:	4b16      	ldr	r3, [pc, #88]	; (800236c <storage_thread+0x88>)
 8002312:	2200      	movs	r2, #0
 8002314:	601a      	str	r2, [r3, #0]
			restart_required = 0;
 8002316:	4b14      	ldr	r3, [pc, #80]	; (8002368 <storage_thread+0x84>)
 8002318:	2200      	movs	r2, #0
 800231a:	701a      	strb	r2, [r3, #0]
		}
		if(record_should_stop) {
 800231c:	4b14      	ldr	r3, [pc, #80]	; (8002370 <storage_thread+0x8c>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d014      	beq.n	800234e <storage_thread+0x6a>
			record_should_stop -= time-last_time;;
 8002324:	4b0f      	ldr	r3, [pc, #60]	; (8002364 <storage_thread+0x80>)
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	4b0d      	ldr	r3, [pc, #52]	; (8002360 <storage_thread+0x7c>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	4a10      	ldr	r2, [pc, #64]	; (8002370 <storage_thread+0x8c>)
 8002330:	6812      	ldr	r2, [r2, #0]
 8002332:	4413      	add	r3, r2
 8002334:	461a      	mov	r2, r3
 8002336:	4b0e      	ldr	r3, [pc, #56]	; (8002370 <storage_thread+0x8c>)
 8002338:	601a      	str	r2, [r3, #0]
			if(record_should_stop<=0){
 800233a:	4b0d      	ldr	r3, [pc, #52]	; (8002370 <storage_thread+0x8c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2b00      	cmp	r3, #0
 8002340:	dc05      	bgt.n	800234e <storage_thread+0x6a>
				record_active=0;
 8002342:	4b0c      	ldr	r3, [pc, #48]	; (8002374 <storage_thread+0x90>)
 8002344:	2200      	movs	r2, #0
 8002346:	701a      	strb	r2, [r3, #0]
				record_should_stop=0;
 8002348:	4b09      	ldr	r3, [pc, #36]	; (8002370 <storage_thread+0x8c>)
 800234a:	2200      	movs	r2, #0
 800234c:	601a      	str	r2, [r3, #0]
			}
		}
		if(xSemaphoreTake(storage_sem, 0xffff) == pdTRUE) {
 800234e:	4b0a      	ldr	r3, [pc, #40]	; (8002378 <storage_thread+0x94>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002356:	4618      	mov	r0, r3
 8002358:	f007 f82a 	bl	80093b0 <xQueueSemaphoreTake>
		last_time = time;
 800235c:	e7c8      	b.n	80022f0 <storage_thread+0xc>
 800235e:	bf00      	nop
 8002360:	20001930 	.word	0x20001930
 8002364:	20001934 	.word	0x20001934
 8002368:	2000189d 	.word	0x2000189d
 800236c:	20001898 	.word	0x20001898
 8002370:	200018a0 	.word	0x200018a0
 8002374:	2000189c 	.word	0x2000189c
 8002378:	200018a4 	.word	0x200018a4

0800237c <threads_init>:
 **********************/

/*
 * Create all the threads needed by the software
 */
void threads_init(void) {
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af04      	add	r7, sp, #16


	serial_global_init();
 8002382:	f7ff fdf9 	bl	8001f78 <serial_global_init>
	static DEBUG_INST_t debug;
	debug_init(&debug);
 8002386:	4824      	ldr	r0, [pc, #144]	; (8002418 <threads_init+0x9c>)
 8002388:	f7ff f902 	bl	8001590 <debug_init>

	can_init();
 800238c:	f7fe fa04 	bl	8000798 <can_init>
	/*
	 * Storage thread
	 * lowest priority
	 */

	CREATE_THREAD(storage_handle, storage, storage_thread, STORAGE_SZ, STORAGE_PRIO);
 8002390:	4b22      	ldr	r3, [pc, #136]	; (800241c <threads_init+0xa0>)
 8002392:	9302      	str	r3, [sp, #8]
 8002394:	4b22      	ldr	r3, [pc, #136]	; (8002420 <threads_init+0xa4>)
 8002396:	9301      	str	r3, [sp, #4]
 8002398:	2303      	movs	r3, #3
 800239a:	9300      	str	r3, [sp, #0]
 800239c:	2300      	movs	r3, #0
 800239e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023a2:	4920      	ldr	r1, [pc, #128]	; (8002424 <threads_init+0xa8>)
 80023a4:	4820      	ldr	r0, [pc, #128]	; (8002428 <threads_init+0xac>)
 80023a6:	f007 fa11 	bl	80097cc <xTaskCreateStatic>
 80023aa:	4603      	mov	r3, r0
 80023ac:	4a1f      	ldr	r2, [pc, #124]	; (800242c <threads_init+0xb0>)
 80023ae:	6013      	str	r3, [r2, #0]

	/*
	 *  Serial RX processing thread (Bottom half)
	 *  low priority
	 */
	CREATE_THREAD(serial_handle, serial, serial_thread, SERIAL_SZ, SERIAL_PRIO);
 80023b0:	4b1f      	ldr	r3, [pc, #124]	; (8002430 <threads_init+0xb4>)
 80023b2:	9302      	str	r3, [sp, #8]
 80023b4:	4b1f      	ldr	r3, [pc, #124]	; (8002434 <threads_init+0xb8>)
 80023b6:	9301      	str	r3, [sp, #4]
 80023b8:	2305      	movs	r3, #5
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	2300      	movs	r3, #0
 80023be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023c2:	491d      	ldr	r1, [pc, #116]	; (8002438 <threads_init+0xbc>)
 80023c4:	481d      	ldr	r0, [pc, #116]	; (800243c <threads_init+0xc0>)
 80023c6:	f007 fa01 	bl	80097cc <xTaskCreateStatic>
 80023ca:	4603      	mov	r3, r0
 80023cc:	4a1c      	ldr	r2, [pc, #112]	; (8002440 <threads_init+0xc4>)
 80023ce:	6013      	str	r3, [r2, #0]

	/*
	 *  Main control thread
	 *  Highest priority
	 */
	CREATE_THREAD(control_handle, control, control_thread, CONTROL_SZ, CONTROL_PRIO);
 80023d0:	4b1c      	ldr	r3, [pc, #112]	; (8002444 <threads_init+0xc8>)
 80023d2:	9302      	str	r3, [sp, #8]
 80023d4:	4b1c      	ldr	r3, [pc, #112]	; (8002448 <threads_init+0xcc>)
 80023d6:	9301      	str	r3, [sp, #4]
 80023d8:	2306      	movs	r3, #6
 80023da:	9300      	str	r3, [sp, #0]
 80023dc:	2300      	movs	r3, #0
 80023de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023e2:	491a      	ldr	r1, [pc, #104]	; (800244c <threads_init+0xd0>)
 80023e4:	481a      	ldr	r0, [pc, #104]	; (8002450 <threads_init+0xd4>)
 80023e6:	f007 f9f1 	bl	80097cc <xTaskCreateStatic>
 80023ea:	4603      	mov	r3, r0
 80023ec:	4a19      	ldr	r2, [pc, #100]	; (8002454 <threads_init+0xd8>)
 80023ee:	6013      	str	r3, [r2, #0]

	/*
	 *  CAN send thread
	 *  Highest priority
	 */
	CREATE_THREAD(can_send_handle, can_send, can_send_thread, CAN_SZ, CAN_PRIO);
 80023f0:	4b19      	ldr	r3, [pc, #100]	; (8002458 <threads_init+0xdc>)
 80023f2:	9302      	str	r3, [sp, #8]
 80023f4:	4b19      	ldr	r3, [pc, #100]	; (800245c <threads_init+0xe0>)
 80023f6:	9301      	str	r3, [sp, #4]
 80023f8:	2303      	movs	r3, #3
 80023fa:	9300      	str	r3, [sp, #0]
 80023fc:	2300      	movs	r3, #0
 80023fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002402:	4917      	ldr	r1, [pc, #92]	; (8002460 <threads_init+0xe4>)
 8002404:	4817      	ldr	r0, [pc, #92]	; (8002464 <threads_init+0xe8>)
 8002406:	f007 f9e1 	bl	80097cc <xTaskCreateStatic>
 800240a:	4603      	mov	r3, r0
 800240c:	4a16      	ldr	r2, [pc, #88]	; (8002468 <threads_init+0xec>)
 800240e:	6013      	str	r3, [r2, #0]



}
 8002410:	bf00      	nop
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	20001948 	.word	0x20001948
 800241c:	20003d80 	.word	0x20003d80
 8002420:	20002d80 	.word	0x20002d80
 8002424:	0800ad34 	.word	0x0800ad34
 8002428:	080022e5 	.word	0x080022e5
 800242c:	20001940 	.word	0x20001940
 8002430:	20004dd4 	.word	0x20004dd4
 8002434:	20003dd4 	.word	0x20003dd4
 8002438:	0800ad3c 	.word	0x0800ad3c
 800243c:	0800206d 	.word	0x0800206d
 8002440:	2000193c 	.word	0x2000193c
 8002444:	20005e28 	.word	0x20005e28
 8002448:	20004e28 	.word	0x20004e28
 800244c:	0800ad44 	.word	0x0800ad44
 8002450:	08000d99 	.word	0x08000d99
 8002454:	20001938 	.word	0x20001938
 8002458:	20006e7c 	.word	0x20006e7c
 800245c:	20005e7c 	.word	0x20005e7c
 8002460:	0800ad4c 	.word	0x0800ad4c
 8002464:	080007a9 	.word	0x080007a9
 8002468:	20001944 	.word	0x20001944

0800246c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8002470:	4b17      	ldr	r3, [pc, #92]	; (80024d0 <MX_CAN1_Init+0x64>)
 8002472:	4a18      	ldr	r2, [pc, #96]	; (80024d4 <MX_CAN1_Init+0x68>)
 8002474:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 8002476:	4b16      	ldr	r3, [pc, #88]	; (80024d0 <MX_CAN1_Init+0x64>)
 8002478:	2209      	movs	r2, #9
 800247a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800247c:	4b14      	ldr	r3, [pc, #80]	; (80024d0 <MX_CAN1_Init+0x64>)
 800247e:	2200      	movs	r2, #0
 8002480:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002482:	4b13      	ldr	r3, [pc, #76]	; (80024d0 <MX_CAN1_Init+0x64>)
 8002484:	2200      	movs	r2, #0
 8002486:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8002488:	4b11      	ldr	r3, [pc, #68]	; (80024d0 <MX_CAN1_Init+0x64>)
 800248a:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800248e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8002490:	4b0f      	ldr	r3, [pc, #60]	; (80024d0 <MX_CAN1_Init+0x64>)
 8002492:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002496:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002498:	4b0d      	ldr	r3, [pc, #52]	; (80024d0 <MX_CAN1_Init+0x64>)
 800249a:	2200      	movs	r2, #0
 800249c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800249e:	4b0c      	ldr	r3, [pc, #48]	; (80024d0 <MX_CAN1_Init+0x64>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80024a4:	4b0a      	ldr	r3, [pc, #40]	; (80024d0 <MX_CAN1_Init+0x64>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80024aa:	4b09      	ldr	r3, [pc, #36]	; (80024d0 <MX_CAN1_Init+0x64>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80024b0:	4b07      	ldr	r3, [pc, #28]	; (80024d0 <MX_CAN1_Init+0x64>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80024b6:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <MX_CAN1_Init+0x64>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80024bc:	4804      	ldr	r0, [pc, #16]	; (80024d0 <MX_CAN1_Init+0x64>)
 80024be:	f001 f917 	bl	80036f0 <HAL_CAN_Init>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80024c8:	f000 fa22 	bl	8002910 <Error_Handler>
  }

}
 80024cc:	bf00      	nop
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	200076a8 	.word	0x200076a8
 80024d4:	40006400 	.word	0x40006400

080024d8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b08a      	sub	sp, #40	; 0x28
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e0:	f107 0314 	add.w	r3, r7, #20
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	605a      	str	r2, [r3, #4]
 80024ea:	609a      	str	r2, [r3, #8]
 80024ec:	60da      	str	r2, [r3, #12]
 80024ee:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a2d      	ldr	r2, [pc, #180]	; (80025ac <HAL_CAN_MspInit+0xd4>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d153      	bne.n	80025a2 <HAL_CAN_MspInit+0xca>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	613b      	str	r3, [r7, #16]
 80024fe:	4b2c      	ldr	r3, [pc, #176]	; (80025b0 <HAL_CAN_MspInit+0xd8>)
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	4a2b      	ldr	r2, [pc, #172]	; (80025b0 <HAL_CAN_MspInit+0xd8>)
 8002504:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002508:	6413      	str	r3, [r2, #64]	; 0x40
 800250a:	4b29      	ldr	r3, [pc, #164]	; (80025b0 <HAL_CAN_MspInit+0xd8>)
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002512:	613b      	str	r3, [r7, #16]
 8002514:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002516:	2300      	movs	r3, #0
 8002518:	60fb      	str	r3, [r7, #12]
 800251a:	4b25      	ldr	r3, [pc, #148]	; (80025b0 <HAL_CAN_MspInit+0xd8>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251e:	4a24      	ldr	r2, [pc, #144]	; (80025b0 <HAL_CAN_MspInit+0xd8>)
 8002520:	f043 0301 	orr.w	r3, r3, #1
 8002524:	6313      	str	r3, [r2, #48]	; 0x30
 8002526:	4b22      	ldr	r3, [pc, #136]	; (80025b0 <HAL_CAN_MspInit+0xd8>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	60fb      	str	r3, [r7, #12]
 8002530:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002532:	2300      	movs	r3, #0
 8002534:	60bb      	str	r3, [r7, #8]
 8002536:	4b1e      	ldr	r3, [pc, #120]	; (80025b0 <HAL_CAN_MspInit+0xd8>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	4a1d      	ldr	r2, [pc, #116]	; (80025b0 <HAL_CAN_MspInit+0xd8>)
 800253c:	f043 0302 	orr.w	r3, r3, #2
 8002540:	6313      	str	r3, [r2, #48]	; 0x30
 8002542:	4b1b      	ldr	r3, [pc, #108]	; (80025b0 <HAL_CAN_MspInit+0xd8>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	60bb      	str	r3, [r7, #8]
 800254c:	68bb      	ldr	r3, [r7, #8]
    /**CAN1 GPIO Configuration
    PA12     ------> CAN1_TX
    PB8     ------> CAN1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800254e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002552:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002554:	2302      	movs	r3, #2
 8002556:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002558:	2300      	movs	r3, #0
 800255a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800255c:	2303      	movs	r3, #3
 800255e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002560:	2309      	movs	r3, #9
 8002562:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002564:	f107 0314 	add.w	r3, r7, #20
 8002568:	4619      	mov	r1, r3
 800256a:	4812      	ldr	r0, [pc, #72]	; (80025b4 <HAL_CAN_MspInit+0xdc>)
 800256c:	f002 fb54 	bl	8004c18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002570:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002574:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002576:	2302      	movs	r3, #2
 8002578:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257a:	2300      	movs	r3, #0
 800257c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800257e:	2303      	movs	r3, #3
 8002580:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002582:	2309      	movs	r3, #9
 8002584:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002586:	f107 0314 	add.w	r3, r7, #20
 800258a:	4619      	mov	r1, r3
 800258c:	480a      	ldr	r0, [pc, #40]	; (80025b8 <HAL_CAN_MspInit+0xe0>)
 800258e:	f002 fb43 	bl	8004c18 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8002592:	2200      	movs	r2, #0
 8002594:	2105      	movs	r1, #5
 8002596:	2014      	movs	r0, #20
 8002598:	f001 ff12 	bl	80043c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800259c:	2014      	movs	r0, #20
 800259e:	f001 ff2b 	bl	80043f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80025a2:	bf00      	nop
 80025a4:	3728      	adds	r7, #40	; 0x28
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	40006400 	.word	0x40006400
 80025b0:	40023800 	.word	0x40023800
 80025b4:	40020000 	.word	0x40020000
 80025b8:	40020400 	.word	0x40020400

080025bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80025c2:	2300      	movs	r3, #0
 80025c4:	607b      	str	r3, [r7, #4]
 80025c6:	4b27      	ldr	r3, [pc, #156]	; (8002664 <MX_DMA_Init+0xa8>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ca:	4a26      	ldr	r2, [pc, #152]	; (8002664 <MX_DMA_Init+0xa8>)
 80025cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025d0:	6313      	str	r3, [r2, #48]	; 0x30
 80025d2:	4b24      	ldr	r3, [pc, #144]	; (8002664 <MX_DMA_Init+0xa8>)
 80025d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025da:	607b      	str	r3, [r7, #4]
 80025dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80025de:	2300      	movs	r3, #0
 80025e0:	603b      	str	r3, [r7, #0]
 80025e2:	4b20      	ldr	r3, [pc, #128]	; (8002664 <MX_DMA_Init+0xa8>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e6:	4a1f      	ldr	r2, [pc, #124]	; (8002664 <MX_DMA_Init+0xa8>)
 80025e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025ec:	6313      	str	r3, [r2, #48]	; 0x30
 80025ee:	4b1d      	ldr	r3, [pc, #116]	; (8002664 <MX_DMA_Init+0xa8>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025f6:	603b      	str	r3, [r7, #0]
 80025f8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80025fa:	2200      	movs	r2, #0
 80025fc:	2105      	movs	r1, #5
 80025fe:	200c      	movs	r0, #12
 8002600:	f001 fede 	bl	80043c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002604:	200c      	movs	r0, #12
 8002606:	f001 fef7 	bl	80043f8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800260a:	2200      	movs	r2, #0
 800260c:	2105      	movs	r1, #5
 800260e:	200e      	movs	r0, #14
 8002610:	f001 fed6 	bl	80043c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002614:	200e      	movs	r0, #14
 8002616:	f001 feef 	bl	80043f8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800261a:	2200      	movs	r2, #0
 800261c:	2105      	movs	r1, #5
 800261e:	203a      	movs	r0, #58	; 0x3a
 8002620:	f001 fece 	bl	80043c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002624:	203a      	movs	r0, #58	; 0x3a
 8002626:	f001 fee7 	bl	80043f8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 800262a:	2200      	movs	r2, #0
 800262c:	2100      	movs	r1, #0
 800262e:	2044      	movs	r0, #68	; 0x44
 8002630:	f001 fec6 	bl	80043c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8002634:	2044      	movs	r0, #68	; 0x44
 8002636:	f001 fedf 	bl	80043f8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 800263a:	2200      	movs	r2, #0
 800263c:	2105      	movs	r1, #5
 800263e:	2045      	movs	r0, #69	; 0x45
 8002640:	f001 febe 	bl	80043c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002644:	2045      	movs	r0, #69	; 0x45
 8002646:	f001 fed7 	bl	80043f8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 800264a:	2200      	movs	r2, #0
 800264c:	2105      	movs	r1, #5
 800264e:	2046      	movs	r0, #70	; 0x46
 8002650:	f001 feb6 	bl	80043c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002654:	2046      	movs	r0, #70	; 0x46
 8002656:	f001 fecf 	bl	80043f8 <HAL_NVIC_EnableIRQ>

}
 800265a:	bf00      	nop
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	40023800 	.word	0x40023800

08002668 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	4a07      	ldr	r2, [pc, #28]	; (8002694 <vApplicationGetIdleTaskMemory+0x2c>)
 8002678:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	4a06      	ldr	r2, [pc, #24]	; (8002698 <vApplicationGetIdleTaskMemory+0x30>)
 800267e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2280      	movs	r2, #128	; 0x80
 8002684:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002686:	bf00      	nop
 8002688:	3714      	adds	r7, #20
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	20006ed0 	.word	0x20006ed0
 8002698:	20006f24 	.word	0x20006f24

0800269c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800269c:	b5b0      	push	{r4, r5, r7, lr}
 800269e:	b088      	sub	sp, #32
 80026a0:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128, defaultTaskBuffer, &defaultTaskControlBlock);
 80026a2:	4b0a      	ldr	r3, [pc, #40]	; (80026cc <MX_FREERTOS_Init+0x30>)
 80026a4:	1d3c      	adds	r4, r7, #4
 80026a6:	461d      	mov	r5, r3
 80026a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80026b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80026b4:	1d3b      	adds	r3, r7, #4
 80026b6:	2100      	movs	r1, #0
 80026b8:	4618      	mov	r0, r3
 80026ba:	f006 fad0 	bl	8008c5e <osThreadCreate>
 80026be:	4603      	mov	r3, r0
 80026c0:	4a03      	ldr	r2, [pc, #12]	; (80026d0 <MX_FREERTOS_Init+0x34>)
 80026c2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80026c4:	bf00      	nop
 80026c6:	3720      	adds	r7, #32
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bdb0      	pop	{r4, r5, r7, pc}
 80026cc:	0800ad64 	.word	0x0800ad64
 80026d0:	200076d0 	.word	0x200076d0

080026d4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80026dc:	2001      	movs	r0, #1
 80026de:	f006 fae3 	bl	8008ca8 <osDelay>
 80026e2:	e7fb      	b.n	80026dc <StartDefaultTask+0x8>

080026e4 <MX_GPIO_Init>:
     PA1   ------> S_TIM5_CH2
     PA2   ------> S_TIM5_CH3
     PA3   ------> S_TIM5_CH4
*/
void MX_GPIO_Init(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b088      	sub	sp, #32
 80026e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ea:	f107 030c 	add.w	r3, r7, #12
 80026ee:	2200      	movs	r2, #0
 80026f0:	601a      	str	r2, [r3, #0]
 80026f2:	605a      	str	r2, [r3, #4]
 80026f4:	609a      	str	r2, [r3, #8]
 80026f6:	60da      	str	r2, [r3, #12]
 80026f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026fa:	2300      	movs	r3, #0
 80026fc:	60bb      	str	r3, [r7, #8]
 80026fe:	4b2f      	ldr	r3, [pc, #188]	; (80027bc <MX_GPIO_Init+0xd8>)
 8002700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002702:	4a2e      	ldr	r2, [pc, #184]	; (80027bc <MX_GPIO_Init+0xd8>)
 8002704:	f043 0301 	orr.w	r3, r3, #1
 8002708:	6313      	str	r3, [r2, #48]	; 0x30
 800270a:	4b2c      	ldr	r3, [pc, #176]	; (80027bc <MX_GPIO_Init+0xd8>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	60bb      	str	r3, [r7, #8]
 8002714:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002716:	2300      	movs	r3, #0
 8002718:	607b      	str	r3, [r7, #4]
 800271a:	4b28      	ldr	r3, [pc, #160]	; (80027bc <MX_GPIO_Init+0xd8>)
 800271c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271e:	4a27      	ldr	r2, [pc, #156]	; (80027bc <MX_GPIO_Init+0xd8>)
 8002720:	f043 0304 	orr.w	r3, r3, #4
 8002724:	6313      	str	r3, [r2, #48]	; 0x30
 8002726:	4b25      	ldr	r3, [pc, #148]	; (80027bc <MX_GPIO_Init+0xd8>)
 8002728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272a:	f003 0304 	and.w	r3, r3, #4
 800272e:	607b      	str	r3, [r7, #4]
 8002730:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002732:	2300      	movs	r3, #0
 8002734:	603b      	str	r3, [r7, #0]
 8002736:	4b21      	ldr	r3, [pc, #132]	; (80027bc <MX_GPIO_Init+0xd8>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	4a20      	ldr	r2, [pc, #128]	; (80027bc <MX_GPIO_Init+0xd8>)
 800273c:	f043 0302 	orr.w	r3, r3, #2
 8002740:	6313      	str	r3, [r2, #48]	; 0x30
 8002742:	4b1e      	ldr	r3, [pc, #120]	; (80027bc <MX_GPIO_Init+0xd8>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	603b      	str	r3, [r7, #0]
 800274c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GLOBAL_EN_GPIO_Port, GLOBAL_EN_Pin, GPIO_PIN_RESET);
 800274e:	2200      	movs	r2, #0
 8002750:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002754:	481a      	ldr	r0, [pc, #104]	; (80027c0 <MX_GPIO_Init+0xdc>)
 8002756:	f002 fbf3 	bl	8004f40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800275a:	230f      	movs	r3, #15
 800275c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800275e:	2302      	movs	r3, #2
 8002760:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002762:	2300      	movs	r3, #0
 8002764:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002766:	2300      	movs	r3, #0
 8002768:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800276a:	2302      	movs	r3, #2
 800276c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800276e:	f107 030c 	add.w	r3, r7, #12
 8002772:	4619      	mov	r1, r3
 8002774:	4812      	ldr	r0, [pc, #72]	; (80027c0 <MX_GPIO_Init+0xdc>)
 8002776:	f002 fa4f 	bl	8004c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RUN_PG_Pin;
 800277a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800277e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002780:	2300      	movs	r3, #0
 8002782:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002784:	2300      	movs	r3, #0
 8002786:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(RUN_PG_GPIO_Port, &GPIO_InitStruct);
 8002788:	f107 030c 	add.w	r3, r7, #12
 800278c:	4619      	mov	r1, r3
 800278e:	480d      	ldr	r0, [pc, #52]	; (80027c4 <MX_GPIO_Init+0xe0>)
 8002790:	f002 fa42 	bl	8004c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GLOBAL_EN_Pin;
 8002794:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002798:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800279a:	2311      	movs	r3, #17
 800279c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279e:	2300      	movs	r3, #0
 80027a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a2:	2300      	movs	r3, #0
 80027a4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GLOBAL_EN_GPIO_Port, &GPIO_InitStruct);
 80027a6:	f107 030c 	add.w	r3, r7, #12
 80027aa:	4619      	mov	r1, r3
 80027ac:	4804      	ldr	r0, [pc, #16]	; (80027c0 <MX_GPIO_Init+0xdc>)
 80027ae:	f002 fa33 	bl	8004c18 <HAL_GPIO_Init>

}
 80027b2:	bf00      	nop
 80027b4:	3720      	adds	r7, #32
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	40023800 	.word	0x40023800
 80027c0:	40020000 	.word	0x40020000
 80027c4:	40020400 	.word	0x40020400

080027c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80027cc:	f000 ff4e 	bl	800366c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027d0:	f000 f820 	bl	8002814 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027d4:	f7ff ff86 	bl	80026e4 <MX_GPIO_Init>
  MX_DMA_Init();
 80027d8:	f7ff fef0 	bl	80025bc <MX_DMA_Init>
  MX_TIM8_Init();
 80027dc:	f000 fb18 	bl	8002e10 <MX_TIM8_Init>
  MX_TIM2_Init();
 80027e0:	f000 fa7c 	bl	8002cdc <MX_TIM2_Init>
  MX_USART6_UART_Init();
 80027e4:	f000 fcc8 	bl	8003178 <MX_USART6_UART_Init>
  MX_USART3_UART_Init();
 80027e8:	f000 fc9c 	bl	8003124 <MX_USART3_UART_Init>
  MX_QUADSPI_Init();
 80027ec:	f000 f898 	bl	8002920 <MX_QUADSPI_Init>
  MX_TIM3_Init();
 80027f0:	f000 fac0 	bl	8002d74 <MX_TIM3_Init>
  MX_CAN1_Init();
 80027f4:	f7ff fe3a 	bl	800246c <MX_CAN1_Init>
  MX_USART1_UART_Init();
 80027f8:	f000 fc6a 	bl	80030d0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */



  threads_init();
 80027fc:	f7ff fdbe 	bl	800237c <threads_init>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8002800:	f7ff ff4c 	bl	800269c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8002804:	f006 fa24 	bl	8008c50 <osKernelStart>



  while (1)
  {
	osDelay(1000);
 8002808:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800280c:	f006 fa4c 	bl	8008ca8 <osDelay>
 8002810:	e7fa      	b.n	8002808 <main+0x40>
	...

08002814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b094      	sub	sp, #80	; 0x50
 8002818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800281a:	f107 031c 	add.w	r3, r7, #28
 800281e:	2234      	movs	r2, #52	; 0x34
 8002820:	2100      	movs	r1, #0
 8002822:	4618      	mov	r0, r3
 8002824:	f008 fa72 	bl	800ad0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002828:	f107 0308 	add.w	r3, r7, #8
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	605a      	str	r2, [r3, #4]
 8002832:	609a      	str	r2, [r3, #8]
 8002834:	60da      	str	r2, [r3, #12]
 8002836:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002838:	2300      	movs	r3, #0
 800283a:	607b      	str	r3, [r7, #4]
 800283c:	4b29      	ldr	r3, [pc, #164]	; (80028e4 <SystemClock_Config+0xd0>)
 800283e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002840:	4a28      	ldr	r2, [pc, #160]	; (80028e4 <SystemClock_Config+0xd0>)
 8002842:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002846:	6413      	str	r3, [r2, #64]	; 0x40
 8002848:	4b26      	ldr	r3, [pc, #152]	; (80028e4 <SystemClock_Config+0xd0>)
 800284a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002850:	607b      	str	r3, [r7, #4]
 8002852:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002854:	2300      	movs	r3, #0
 8002856:	603b      	str	r3, [r7, #0]
 8002858:	4b23      	ldr	r3, [pc, #140]	; (80028e8 <SystemClock_Config+0xd4>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002860:	4a21      	ldr	r2, [pc, #132]	; (80028e8 <SystemClock_Config+0xd4>)
 8002862:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002866:	6013      	str	r3, [r2, #0]
 8002868:	4b1f      	ldr	r3, [pc, #124]	; (80028e8 <SystemClock_Config+0xd4>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002870:	603b      	str	r3, [r7, #0]
 8002872:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002874:	2302      	movs	r3, #2
 8002876:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002878:	2301      	movs	r3, #1
 800287a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800287c:	2310      	movs	r3, #16
 800287e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002880:	2302      	movs	r3, #2
 8002882:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002884:	2300      	movs	r3, #0
 8002886:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002888:	2308      	movs	r3, #8
 800288a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 800288c:	2348      	movs	r3, #72	; 0x48
 800288e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002890:	2302      	movs	r3, #2
 8002892:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002894:	2303      	movs	r3, #3
 8002896:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002898:	2302      	movs	r3, #2
 800289a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800289c:	f107 031c 	add.w	r3, r7, #28
 80028a0:	4618      	mov	r0, r3
 80028a2:	f003 fd71 	bl	8006388 <HAL_RCC_OscConfig>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80028ac:	f000 f830 	bl	8002910 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028b0:	230f      	movs	r3, #15
 80028b2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028b4:	2302      	movs	r3, #2
 80028b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028b8:	2300      	movs	r3, #0
 80028ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80028bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028c2:	2300      	movs	r3, #0
 80028c4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80028c6:	f107 0308 	add.w	r3, r7, #8
 80028ca:	2102      	movs	r1, #2
 80028cc:	4618      	mov	r0, r3
 80028ce:	f003 fab3 	bl	8005e38 <HAL_RCC_ClockConfig>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80028d8:	f000 f81a 	bl	8002910 <Error_Handler>
  }
}
 80028dc:	bf00      	nop
 80028de:	3750      	adds	r7, #80	; 0x50
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	40023800 	.word	0x40023800
 80028e8:	40007000 	.word	0x40007000

080028ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a04      	ldr	r2, [pc, #16]	; (800290c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d101      	bne.n	8002902 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80028fe:	f000 fed7 	bl	80036b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002902:	bf00      	nop
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	40010000 	.word	0x40010000

08002910 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002914:	bf00      	nop
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
	...

08002920 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0

  hqspi.Instance = QUADSPI;
 8002924:	4b12      	ldr	r3, [pc, #72]	; (8002970 <MX_QUADSPI_Init+0x50>)
 8002926:	4a13      	ldr	r2, [pc, #76]	; (8002974 <MX_QUADSPI_Init+0x54>)
 8002928:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 100;
 800292a:	4b11      	ldr	r3, [pc, #68]	; (8002970 <MX_QUADSPI_Init+0x50>)
 800292c:	2264      	movs	r2, #100	; 0x64
 800292e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8002930:	4b0f      	ldr	r3, [pc, #60]	; (8002970 <MX_QUADSPI_Init+0x50>)
 8002932:	2201      	movs	r2, #1
 8002934:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8002936:	4b0e      	ldr	r3, [pc, #56]	; (8002970 <MX_QUADSPI_Init+0x50>)
 8002938:	2200      	movs	r2, #0
 800293a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 26;
 800293c:	4b0c      	ldr	r3, [pc, #48]	; (8002970 <MX_QUADSPI_Init+0x50>)
 800293e:	221a      	movs	r2, #26
 8002940:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8002942:	4b0b      	ldr	r3, [pc, #44]	; (8002970 <MX_QUADSPI_Init+0x50>)
 8002944:	2200      	movs	r2, #0
 8002946:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8002948:	4b09      	ldr	r3, [pc, #36]	; (8002970 <MX_QUADSPI_Init+0x50>)
 800294a:	2200      	movs	r2, #0
 800294c:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800294e:	4b08      	ldr	r3, [pc, #32]	; (8002970 <MX_QUADSPI_Init+0x50>)
 8002950:	2200      	movs	r2, #0
 8002952:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8002954:	4b06      	ldr	r3, [pc, #24]	; (8002970 <MX_QUADSPI_Init+0x50>)
 8002956:	2200      	movs	r2, #0
 8002958:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800295a:	4805      	ldr	r0, [pc, #20]	; (8002970 <MX_QUADSPI_Init+0x50>)
 800295c:	f002 fb0a 	bl	8004f74 <HAL_QSPI_Init>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8002966:	f7ff ffd3 	bl	8002910 <Error_Handler>
  }

}
 800296a:	bf00      	nop
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	20007928 	.word	0x20007928
 8002974:	a0001000 	.word	0xa0001000

08002978 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b08a      	sub	sp, #40	; 0x28
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002980:	f107 0314 	add.w	r3, r7, #20
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]
 8002988:	605a      	str	r2, [r3, #4]
 800298a:	609a      	str	r2, [r3, #8]
 800298c:	60da      	str	r2, [r3, #12]
 800298e:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a34      	ldr	r2, [pc, #208]	; (8002a68 <HAL_QSPI_MspInit+0xf0>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d162      	bne.n	8002a60 <HAL_QSPI_MspInit+0xe8>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800299a:	2300      	movs	r3, #0
 800299c:	613b      	str	r3, [r7, #16]
 800299e:	4b33      	ldr	r3, [pc, #204]	; (8002a6c <HAL_QSPI_MspInit+0xf4>)
 80029a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a2:	4a32      	ldr	r2, [pc, #200]	; (8002a6c <HAL_QSPI_MspInit+0xf4>)
 80029a4:	f043 0302 	orr.w	r3, r3, #2
 80029a8:	6393      	str	r3, [r2, #56]	; 0x38
 80029aa:	4b30      	ldr	r3, [pc, #192]	; (8002a6c <HAL_QSPI_MspInit+0xf4>)
 80029ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	613b      	str	r3, [r7, #16]
 80029b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029b6:	2300      	movs	r3, #0
 80029b8:	60fb      	str	r3, [r7, #12]
 80029ba:	4b2c      	ldr	r3, [pc, #176]	; (8002a6c <HAL_QSPI_MspInit+0xf4>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029be:	4a2b      	ldr	r2, [pc, #172]	; (8002a6c <HAL_QSPI_MspInit+0xf4>)
 80029c0:	f043 0302 	orr.w	r3, r3, #2
 80029c4:	6313      	str	r3, [r2, #48]	; 0x30
 80029c6:	4b29      	ldr	r3, [pc, #164]	; (8002a6c <HAL_QSPI_MspInit+0xf4>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	60fb      	str	r3, [r7, #12]
 80029d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029d2:	2300      	movs	r3, #0
 80029d4:	60bb      	str	r3, [r7, #8]
 80029d6:	4b25      	ldr	r3, [pc, #148]	; (8002a6c <HAL_QSPI_MspInit+0xf4>)
 80029d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029da:	4a24      	ldr	r2, [pc, #144]	; (8002a6c <HAL_QSPI_MspInit+0xf4>)
 80029dc:	f043 0304 	orr.w	r3, r3, #4
 80029e0:	6313      	str	r3, [r2, #48]	; 0x30
 80029e2:	4b22      	ldr	r3, [pc, #136]	; (8002a6c <HAL_QSPI_MspInit+0xf4>)
 80029e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e6:	f003 0304 	and.w	r3, r3, #4
 80029ea:	60bb      	str	r3, [r7, #8]
 80029ec:	68bb      	ldr	r3, [r7, #8]
    PB2     ------> QUADSPI_CLK
    PC9     ------> QUADSPI_BK1_IO0
    PC10     ------> QUADSPI_BK1_IO1
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80029ee:	2304      	movs	r3, #4
 80029f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f2:	2302      	movs	r3, #2
 80029f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f6:	2300      	movs	r3, #0
 80029f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029fa:	2303      	movs	r3, #3
 80029fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 80029fe:	2309      	movs	r3, #9
 8002a00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a02:	f107 0314 	add.w	r3, r7, #20
 8002a06:	4619      	mov	r1, r3
 8002a08:	4819      	ldr	r0, [pc, #100]	; (8002a70 <HAL_QSPI_MspInit+0xf8>)
 8002a0a:	f002 f905 	bl	8004c18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002a0e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002a12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a14:	2302      	movs	r3, #2
 8002a16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8002a20:	2309      	movs	r3, #9
 8002a22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a24:	f107 0314 	add.w	r3, r7, #20
 8002a28:	4619      	mov	r1, r3
 8002a2a:	4812      	ldr	r0, [pc, #72]	; (8002a74 <HAL_QSPI_MspInit+0xfc>)
 8002a2c:	f002 f8f4 	bl	8004c18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002a30:	2340      	movs	r3, #64	; 0x40
 8002a32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a34:	2302      	movs	r3, #2
 8002a36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8002a40:	230a      	movs	r3, #10
 8002a42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a44:	f107 0314 	add.w	r3, r7, #20
 8002a48:	4619      	mov	r1, r3
 8002a4a:	4809      	ldr	r0, [pc, #36]	; (8002a70 <HAL_QSPI_MspInit+0xf8>)
 8002a4c:	f002 f8e4 	bl	8004c18 <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 5, 0);
 8002a50:	2200      	movs	r2, #0
 8002a52:	2105      	movs	r1, #5
 8002a54:	205c      	movs	r0, #92	; 0x5c
 8002a56:	f001 fcb3 	bl	80043c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8002a5a:	205c      	movs	r0, #92	; 0x5c
 8002a5c:	f001 fccc 	bl	80043f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8002a60:	bf00      	nop
 8002a62:	3728      	adds	r7, #40	; 0x28
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	a0001000 	.word	0xa0001000
 8002a6c:	40023800 	.word	0x40023800
 8002a70:	40020400 	.word	0x40020400
 8002a74:	40020800 	.word	0x40020800

08002a78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a7e:	2300      	movs	r3, #0
 8002a80:	607b      	str	r3, [r7, #4]
 8002a82:	4b12      	ldr	r3, [pc, #72]	; (8002acc <HAL_MspInit+0x54>)
 8002a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a86:	4a11      	ldr	r2, [pc, #68]	; (8002acc <HAL_MspInit+0x54>)
 8002a88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a8e:	4b0f      	ldr	r3, [pc, #60]	; (8002acc <HAL_MspInit+0x54>)
 8002a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a96:	607b      	str	r3, [r7, #4]
 8002a98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	603b      	str	r3, [r7, #0]
 8002a9e:	4b0b      	ldr	r3, [pc, #44]	; (8002acc <HAL_MspInit+0x54>)
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	4a0a      	ldr	r2, [pc, #40]	; (8002acc <HAL_MspInit+0x54>)
 8002aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8002aaa:	4b08      	ldr	r3, [pc, #32]	; (8002acc <HAL_MspInit+0x54>)
 8002aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab2:	603b      	str	r3, [r7, #0]
 8002ab4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	210f      	movs	r1, #15
 8002aba:	f06f 0001 	mvn.w	r0, #1
 8002abe:	f001 fc7f 	bl	80043c0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ac2:	bf00      	nop
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	40023800 	.word	0x40023800

08002ad0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b08c      	sub	sp, #48	; 0x30
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002adc:	2300      	movs	r3, #0
 8002ade:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	6879      	ldr	r1, [r7, #4]
 8002ae4:	2019      	movs	r0, #25
 8002ae6:	f001 fc6b 	bl	80043c0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002aea:	2019      	movs	r0, #25
 8002aec:	f001 fc84 	bl	80043f8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002af0:	2300      	movs	r3, #0
 8002af2:	60fb      	str	r3, [r7, #12]
 8002af4:	4b1e      	ldr	r3, [pc, #120]	; (8002b70 <HAL_InitTick+0xa0>)
 8002af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af8:	4a1d      	ldr	r2, [pc, #116]	; (8002b70 <HAL_InitTick+0xa0>)
 8002afa:	f043 0301 	orr.w	r3, r3, #1
 8002afe:	6453      	str	r3, [r2, #68]	; 0x44
 8002b00:	4b1b      	ldr	r3, [pc, #108]	; (8002b70 <HAL_InitTick+0xa0>)
 8002b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b04:	f003 0301 	and.w	r3, r3, #1
 8002b08:	60fb      	str	r3, [r7, #12]
 8002b0a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002b0c:	f107 0210 	add.w	r2, r7, #16
 8002b10:	f107 0314 	add.w	r3, r7, #20
 8002b14:	4611      	mov	r1, r2
 8002b16:	4618      	mov	r0, r3
 8002b18:	f003 faa8 	bl	800606c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002b1c:	f003 fa92 	bl	8006044 <HAL_RCC_GetPCLK2Freq>
 8002b20:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b24:	4a13      	ldr	r2, [pc, #76]	; (8002b74 <HAL_InitTick+0xa4>)
 8002b26:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2a:	0c9b      	lsrs	r3, r3, #18
 8002b2c:	3b01      	subs	r3, #1
 8002b2e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002b30:	4b11      	ldr	r3, [pc, #68]	; (8002b78 <HAL_InitTick+0xa8>)
 8002b32:	4a12      	ldr	r2, [pc, #72]	; (8002b7c <HAL_InitTick+0xac>)
 8002b34:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8002b36:	4b10      	ldr	r3, [pc, #64]	; (8002b78 <HAL_InitTick+0xa8>)
 8002b38:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b3c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002b3e:	4a0e      	ldr	r2, [pc, #56]	; (8002b78 <HAL_InitTick+0xa8>)
 8002b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b42:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002b44:	4b0c      	ldr	r3, [pc, #48]	; (8002b78 <HAL_InitTick+0xa8>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b4a:	4b0b      	ldr	r3, [pc, #44]	; (8002b78 <HAL_InitTick+0xa8>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002b50:	4809      	ldr	r0, [pc, #36]	; (8002b78 <HAL_InitTick+0xa8>)
 8002b52:	f003 fe73 	bl	800683c <HAL_TIM_Base_Init>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d104      	bne.n	8002b66 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002b5c:	4806      	ldr	r0, [pc, #24]	; (8002b78 <HAL_InitTick+0xa8>)
 8002b5e:	f003 fe98 	bl	8006892 <HAL_TIM_Base_Start_IT>
 8002b62:	4603      	mov	r3, r0
 8002b64:	e000      	b.n	8002b68 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3730      	adds	r7, #48	; 0x30
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	40023800 	.word	0x40023800
 8002b74:	431bde83 	.word	0x431bde83
 8002b78:	20007974 	.word	0x20007974
 8002b7c:	40010000 	.word	0x40010000

08002b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002b84:	bf00      	nop
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr

08002b8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	af00      	add	r7, sp, #0
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */

	  led_set_color(LED_WHITE);
 8002b92:	222f      	movs	r2, #47	; 0x2f
 8002b94:	212f      	movs	r1, #47	; 0x2f
 8002b96:	202f      	movs	r0, #47	; 0x2f
 8002b98:	f7fe fed4 	bl	8001944 <led_set_color>
 8002b9c:	e7f9      	b.n	8002b92 <HardFault_Handler+0x4>

08002b9e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ba2:	e7fe      	b.n	8002ba2 <MemManage_Handler+0x4>

08002ba4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ba8:	e7fe      	b.n	8002ba8 <BusFault_Handler+0x4>

08002baa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002baa:	b480      	push	{r7}
 8002bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bae:	e7fe      	b.n	8002bae <UsageFault_Handler+0x4>

08002bb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bb4:	bf00      	nop
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
	...

08002bc0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002bc4:	4802      	ldr	r0, [pc, #8]	; (8002bd0 <DMA1_Stream1_IRQHandler+0x10>)
 8002bc6:	f001 fdbd 	bl	8004744 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002bca:	bf00      	nop
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	20007ad4 	.word	0x20007ad4

08002bd4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002bd8:	4802      	ldr	r0, [pc, #8]	; (8002be4 <DMA1_Stream3_IRQHandler+0x10>)
 8002bda:	f001 fdb3 	bl	8004744 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002bde:	bf00      	nop
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	20007b74 	.word	0x20007b74

08002be8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002bec:	4802      	ldr	r0, [pc, #8]	; (8002bf8 <CAN1_RX0_IRQHandler+0x10>)
 8002bee:	f001 f8ff 	bl	8003df0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002bf2:	bf00      	nop
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	200076a8 	.word	0x200076a8

08002bfc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002c00:	4802      	ldr	r0, [pc, #8]	; (8002c0c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002c02:	f003 fe9f 	bl	8006944 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002c06:	bf00      	nop
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	20007974 	.word	0x20007974

08002c10 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002c14:	4802      	ldr	r0, [pc, #8]	; (8002c20 <USART1_IRQHandler+0x10>)
 8002c16:	f004 fef9 	bl	8007a0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002c1a:	bf00      	nop
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	20007cf4 	.word	0x20007cf4

08002c24 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002c28:	4802      	ldr	r0, [pc, #8]	; (8002c34 <USART3_IRQHandler+0x10>)
 8002c2a:	f004 feef 	bl	8007a0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002c2e:	bf00      	nop
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	20007b34 	.word	0x20007b34

08002c38 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002c3c:	4802      	ldr	r0, [pc, #8]	; (8002c48 <DMA2_Stream2_IRQHandler+0x10>)
 8002c3e:	f001 fd81 	bl	8004744 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002c42:	bf00      	nop
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	20007a74 	.word	0x20007a74

08002c4c <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002c50:	4802      	ldr	r0, [pc, #8]	; (8002c5c <DMA2_Stream5_IRQHandler+0x10>)
 8002c52:	f001 fd77 	bl	8004744 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8002c56:	bf00      	nop
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	20007c94 	.word	0x20007c94

08002c60 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8002c64:	4802      	ldr	r0, [pc, #8]	; (8002c70 <DMA2_Stream6_IRQHandler+0x10>)
 8002c66:	f001 fd6d 	bl	8004744 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002c6a:	bf00      	nop
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	20007c34 	.word	0x20007c34

08002c74 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002c78:	4802      	ldr	r0, [pc, #8]	; (8002c84 <DMA2_Stream7_IRQHandler+0x10>)
 8002c7a:	f001 fd63 	bl	8004744 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002c7e:	bf00      	nop
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	20007bd4 	.word	0x20007bd4

08002c88 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002c8c:	4802      	ldr	r0, [pc, #8]	; (8002c98 <USART6_IRQHandler+0x10>)
 8002c8e:	f004 febd 	bl	8007a0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002c92:	bf00      	nop
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	20007d34 	.word	0x20007d34

08002c9c <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 8002ca0:	4802      	ldr	r0, [pc, #8]	; (8002cac <QUADSPI_IRQHandler+0x10>)
 8002ca2:	f002 f9e3 	bl	800506c <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 8002ca6:	bf00      	nop
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	20007928 	.word	0x20007928

08002cb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cb4:	4b08      	ldr	r3, [pc, #32]	; (8002cd8 <SystemInit+0x28>)
 8002cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cba:	4a07      	ldr	r2, [pc, #28]	; (8002cd8 <SystemInit+0x28>)
 8002cbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002cc4:	4b04      	ldr	r3, [pc, #16]	; (8002cd8 <SystemInit+0x28>)
 8002cc6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002cca:	609a      	str	r2, [r3, #8]
#endif
}
 8002ccc:	bf00      	nop
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	e000ed00 	.word	0xe000ed00

08002cdc <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ce2:	f107 0308 	add.w	r3, r7, #8
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	601a      	str	r2, [r3, #0]
 8002cea:	605a      	str	r2, [r3, #4]
 8002cec:	609a      	str	r2, [r3, #8]
 8002cee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cf0:	463b      	mov	r3, r7
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	601a      	str	r2, [r3, #0]
 8002cf6:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8002cf8:	4b1d      	ldr	r3, [pc, #116]	; (8002d70 <MX_TIM2_Init+0x94>)
 8002cfa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002cfe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 49;
 8002d00:	4b1b      	ldr	r3, [pc, #108]	; (8002d70 <MX_TIM2_Init+0x94>)
 8002d02:	2231      	movs	r2, #49	; 0x31
 8002d04:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8002d06:	4b1a      	ldr	r3, [pc, #104]	; (8002d70 <MX_TIM2_Init+0x94>)
 8002d08:	2210      	movs	r2, #16
 8002d0a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8002d0c:	4b18      	ldr	r3, [pc, #96]	; (8002d70 <MX_TIM2_Init+0x94>)
 8002d0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002d12:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d14:	4b16      	ldr	r3, [pc, #88]	; (8002d70 <MX_TIM2_Init+0x94>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d1a:	4b15      	ldr	r3, [pc, #84]	; (8002d70 <MX_TIM2_Init+0x94>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002d20:	4813      	ldr	r0, [pc, #76]	; (8002d70 <MX_TIM2_Init+0x94>)
 8002d22:	f003 fd8b 	bl	800683c <HAL_TIM_Base_Init>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002d2c:	f7ff fdf0 	bl	8002910 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002d36:	f107 0308 	add.w	r3, r7, #8
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	480c      	ldr	r0, [pc, #48]	; (8002d70 <MX_TIM2_Init+0x94>)
 8002d3e:	f003 ffcf 	bl	8006ce0 <HAL_TIM_ConfigClockSource>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002d48:	f7ff fde2 	bl	8002910 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d50:	2300      	movs	r3, #0
 8002d52:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d54:	463b      	mov	r3, r7
 8002d56:	4619      	mov	r1, r3
 8002d58:	4805      	ldr	r0, [pc, #20]	; (8002d70 <MX_TIM2_Init+0x94>)
 8002d5a:	f004 fbc1 	bl	80074e0 <HAL_TIMEx_MasterConfigSynchronization>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002d64:	f7ff fdd4 	bl	8002910 <Error_Handler>
  }

}
 8002d68:	bf00      	nop
 8002d6a:	3718      	adds	r7, #24
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	20007a34 	.word	0x20007a34

08002d74 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d7a:	f107 0308 	add.w	r3, r7, #8
 8002d7e:	2200      	movs	r2, #0
 8002d80:	601a      	str	r2, [r3, #0]
 8002d82:	605a      	str	r2, [r3, #4]
 8002d84:	609a      	str	r2, [r3, #8]
 8002d86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d88:	463b      	mov	r3, r7
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	601a      	str	r2, [r3, #0]
 8002d8e:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8002d90:	4b1d      	ldr	r3, [pc, #116]	; (8002e08 <MX_TIM3_Init+0x94>)
 8002d92:	4a1e      	ldr	r2, [pc, #120]	; (8002e0c <MX_TIM3_Init+0x98>)
 8002d94:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002d96:	4b1c      	ldr	r3, [pc, #112]	; (8002e08 <MX_TIM3_Init+0x94>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d9c:	4b1a      	ldr	r3, [pc, #104]	; (8002e08 <MX_TIM3_Init+0x94>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1125;
 8002da2:	4b19      	ldr	r3, [pc, #100]	; (8002e08 <MX_TIM3_Init+0x94>)
 8002da4:	f240 4265 	movw	r2, #1125	; 0x465
 8002da8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002daa:	4b17      	ldr	r3, [pc, #92]	; (8002e08 <MX_TIM3_Init+0x94>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002db0:	4b15      	ldr	r3, [pc, #84]	; (8002e08 <MX_TIM3_Init+0x94>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002db6:	4814      	ldr	r0, [pc, #80]	; (8002e08 <MX_TIM3_Init+0x94>)
 8002db8:	f003 fd40 	bl	800683c <HAL_TIM_Base_Init>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002dc2:	f7ff fda5 	bl	8002910 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002dc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002dcc:	f107 0308 	add.w	r3, r7, #8
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	480d      	ldr	r0, [pc, #52]	; (8002e08 <MX_TIM3_Init+0x94>)
 8002dd4:	f003 ff84 	bl	8006ce0 <HAL_TIM_ConfigClockSource>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002dde:	f7ff fd97 	bl	8002910 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002de2:	2320      	movs	r3, #32
 8002de4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002de6:	2300      	movs	r3, #0
 8002de8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002dea:	463b      	mov	r3, r7
 8002dec:	4619      	mov	r1, r3
 8002dee:	4806      	ldr	r0, [pc, #24]	; (8002e08 <MX_TIM3_Init+0x94>)
 8002df0:	f004 fb76 	bl	80074e0 <HAL_TIMEx_MasterConfigSynchronization>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002dfa:	f7ff fd89 	bl	8002910 <Error_Handler>
  }

}
 8002dfe:	bf00      	nop
 8002e00:	3718      	adds	r7, #24
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	200079f4 	.word	0x200079f4
 8002e0c:	40000400 	.word	0x40000400

08002e10 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b096      	sub	sp, #88	; 0x58
 8002e14:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e16:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	605a      	str	r2, [r3, #4]
 8002e20:	609a      	str	r2, [r3, #8]
 8002e22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e24:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002e28:	2200      	movs	r2, #0
 8002e2a:	601a      	str	r2, [r3, #0]
 8002e2c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e32:	2200      	movs	r2, #0
 8002e34:	601a      	str	r2, [r3, #0]
 8002e36:	605a      	str	r2, [r3, #4]
 8002e38:	609a      	str	r2, [r3, #8]
 8002e3a:	60da      	str	r2, [r3, #12]
 8002e3c:	611a      	str	r2, [r3, #16]
 8002e3e:	615a      	str	r2, [r3, #20]
 8002e40:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002e42:	1d3b      	adds	r3, r7, #4
 8002e44:	2220      	movs	r2, #32
 8002e46:	2100      	movs	r1, #0
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f007 ff5f 	bl	800ad0c <memset>

  htim8.Instance = TIM8;
 8002e4e:	4b4b      	ldr	r3, [pc, #300]	; (8002f7c <MX_TIM8_Init+0x16c>)
 8002e50:	4a4b      	ldr	r2, [pc, #300]	; (8002f80 <MX_TIM8_Init+0x170>)
 8002e52:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002e54:	4b49      	ldr	r3, [pc, #292]	; (8002f7c <MX_TIM8_Init+0x16c>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e5a:	4b48      	ldr	r3, [pc, #288]	; (8002f7c <MX_TIM8_Init+0x16c>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 255;
 8002e60:	4b46      	ldr	r3, [pc, #280]	; (8002f7c <MX_TIM8_Init+0x16c>)
 8002e62:	22ff      	movs	r2, #255	; 0xff
 8002e64:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e66:	4b45      	ldr	r3, [pc, #276]	; (8002f7c <MX_TIM8_Init+0x16c>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002e6c:	4b43      	ldr	r3, [pc, #268]	; (8002f7c <MX_TIM8_Init+0x16c>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e72:	4b42      	ldr	r3, [pc, #264]	; (8002f7c <MX_TIM8_Init+0x16c>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002e78:	4840      	ldr	r0, [pc, #256]	; (8002f7c <MX_TIM8_Init+0x16c>)
 8002e7a:	f003 fcdf 	bl	800683c <HAL_TIM_Base_Init>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d001      	beq.n	8002e88 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8002e84:	f7ff fd44 	bl	8002910 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e8c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002e8e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002e92:	4619      	mov	r1, r3
 8002e94:	4839      	ldr	r0, [pc, #228]	; (8002f7c <MX_TIM8_Init+0x16c>)
 8002e96:	f003 ff23 	bl	8006ce0 <HAL_TIM_ConfigClockSource>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8002ea0:	f7ff fd36 	bl	8002910 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002ea4:	4835      	ldr	r0, [pc, #212]	; (8002f7c <MX_TIM8_Init+0x16c>)
 8002ea6:	f003 fd18 	bl	80068da <HAL_TIM_PWM_Init>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8002eb0:	f7ff fd2e 	bl	8002910 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002ebc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	482e      	ldr	r0, [pc, #184]	; (8002f7c <MX_TIM8_Init+0x16c>)
 8002ec4:	f004 fb0c 	bl	80074e0 <HAL_TIMEx_MasterConfigSynchronization>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8002ece:	f7ff fd1f 	bl	8002910 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ed2:	2360      	movs	r3, #96	; 0x60
 8002ed4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 128;
 8002ed6:	2380      	movs	r3, #128	; 0x80
 8002ed8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002eda:	2300      	movs	r3, #0
 8002edc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8002ede:	2308      	movs	r3, #8
 8002ee0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002eea:	2300      	movs	r3, #0
 8002eec:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002eee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	4821      	ldr	r0, [pc, #132]	; (8002f7c <MX_TIM8_Init+0x16c>)
 8002ef8:	f003 fe2c 	bl	8006b54 <HAL_TIM_PWM_ConfigChannel>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 8002f02:	f7ff fd05 	bl	8002910 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002f06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f0a:	2204      	movs	r2, #4
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	481b      	ldr	r0, [pc, #108]	; (8002f7c <MX_TIM8_Init+0x16c>)
 8002f10:	f003 fe20 	bl	8006b54 <HAL_TIM_PWM_ConfigChannel>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 8002f1a:	f7ff fcf9 	bl	8002910 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002f22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f26:	2208      	movs	r2, #8
 8002f28:	4619      	mov	r1, r3
 8002f2a:	4814      	ldr	r0, [pc, #80]	; (8002f7c <MX_TIM8_Init+0x16c>)
 8002f2c:	f003 fe12 	bl	8006b54 <HAL_TIM_PWM_ConfigChannel>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 8002f36:	f7ff fceb 	bl	8002910 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002f42:	2300      	movs	r3, #0
 8002f44:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002f46:	2300      	movs	r3, #0
 8002f48:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002f4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f52:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002f54:	2300      	movs	r3, #0
 8002f56:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002f58:	1d3b      	adds	r3, r7, #4
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	4807      	ldr	r0, [pc, #28]	; (8002f7c <MX_TIM8_Init+0x16c>)
 8002f5e:	f004 fb3b 	bl	80075d8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d001      	beq.n	8002f6c <MX_TIM8_Init+0x15c>
  {
    Error_Handler();
 8002f68:	f7ff fcd2 	bl	8002910 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 8002f6c:	4803      	ldr	r0, [pc, #12]	; (8002f7c <MX_TIM8_Init+0x16c>)
 8002f6e:	f000 f855 	bl	800301c <HAL_TIM_MspPostInit>

}
 8002f72:	bf00      	nop
 8002f74:	3758      	adds	r7, #88	; 0x58
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	200079b4 	.word	0x200079b4
 8002f80:	40010400 	.word	0x40010400

08002f84 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b087      	sub	sp, #28
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f94:	d10e      	bne.n	8002fb4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f96:	2300      	movs	r3, #0
 8002f98:	617b      	str	r3, [r7, #20]
 8002f9a:	4b1d      	ldr	r3, [pc, #116]	; (8003010 <HAL_TIM_Base_MspInit+0x8c>)
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	4a1c      	ldr	r2, [pc, #112]	; (8003010 <HAL_TIM_Base_MspInit+0x8c>)
 8002fa0:	f043 0301 	orr.w	r3, r3, #1
 8002fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8002fa6:	4b1a      	ldr	r3, [pc, #104]	; (8003010 <HAL_TIM_Base_MspInit+0x8c>)
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	617b      	str	r3, [r7, #20]
 8002fb0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002fb2:	e026      	b.n	8003002 <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM3)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a16      	ldr	r2, [pc, #88]	; (8003014 <HAL_TIM_Base_MspInit+0x90>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d10e      	bne.n	8002fdc <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	613b      	str	r3, [r7, #16]
 8002fc2:	4b13      	ldr	r3, [pc, #76]	; (8003010 <HAL_TIM_Base_MspInit+0x8c>)
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc6:	4a12      	ldr	r2, [pc, #72]	; (8003010 <HAL_TIM_Base_MspInit+0x8c>)
 8002fc8:	f043 0302 	orr.w	r3, r3, #2
 8002fcc:	6413      	str	r3, [r2, #64]	; 0x40
 8002fce:	4b10      	ldr	r3, [pc, #64]	; (8003010 <HAL_TIM_Base_MspInit+0x8c>)
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	613b      	str	r3, [r7, #16]
 8002fd8:	693b      	ldr	r3, [r7, #16]
}
 8002fda:	e012      	b.n	8003002 <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM8)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a0d      	ldr	r2, [pc, #52]	; (8003018 <HAL_TIM_Base_MspInit+0x94>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d10d      	bne.n	8003002 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	60fb      	str	r3, [r7, #12]
 8002fea:	4b09      	ldr	r3, [pc, #36]	; (8003010 <HAL_TIM_Base_MspInit+0x8c>)
 8002fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fee:	4a08      	ldr	r2, [pc, #32]	; (8003010 <HAL_TIM_Base_MspInit+0x8c>)
 8002ff0:	f043 0302 	orr.w	r3, r3, #2
 8002ff4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ff6:	4b06      	ldr	r3, [pc, #24]	; (8003010 <HAL_TIM_Base_MspInit+0x8c>)
 8002ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	60fb      	str	r3, [r7, #12]
 8003000:	68fb      	ldr	r3, [r7, #12]
}
 8003002:	bf00      	nop
 8003004:	371c      	adds	r7, #28
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	40023800 	.word	0x40023800
 8003014:	40000400 	.word	0x40000400
 8003018:	40010400 	.word	0x40010400

0800301c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b08a      	sub	sp, #40	; 0x28
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003024:	f107 0314 	add.w	r3, r7, #20
 8003028:	2200      	movs	r2, #0
 800302a:	601a      	str	r2, [r3, #0]
 800302c:	605a      	str	r2, [r3, #4]
 800302e:	609a      	str	r2, [r3, #8]
 8003030:	60da      	str	r2, [r3, #12]
 8003032:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a21      	ldr	r2, [pc, #132]	; (80030c0 <HAL_TIM_MspPostInit+0xa4>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d13c      	bne.n	80030b8 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800303e:	2300      	movs	r3, #0
 8003040:	613b      	str	r3, [r7, #16]
 8003042:	4b20      	ldr	r3, [pc, #128]	; (80030c4 <HAL_TIM_MspPostInit+0xa8>)
 8003044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003046:	4a1f      	ldr	r2, [pc, #124]	; (80030c4 <HAL_TIM_MspPostInit+0xa8>)
 8003048:	f043 0301 	orr.w	r3, r3, #1
 800304c:	6313      	str	r3, [r2, #48]	; 0x30
 800304e:	4b1d      	ldr	r3, [pc, #116]	; (80030c4 <HAL_TIM_MspPostInit+0xa8>)
 8003050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	613b      	str	r3, [r7, #16]
 8003058:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800305a:	2300      	movs	r3, #0
 800305c:	60fb      	str	r3, [r7, #12]
 800305e:	4b19      	ldr	r3, [pc, #100]	; (80030c4 <HAL_TIM_MspPostInit+0xa8>)
 8003060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003062:	4a18      	ldr	r2, [pc, #96]	; (80030c4 <HAL_TIM_MspPostInit+0xa8>)
 8003064:	f043 0302 	orr.w	r3, r3, #2
 8003068:	6313      	str	r3, [r2, #48]	; 0x30
 800306a:	4b16      	ldr	r3, [pc, #88]	; (80030c4 <HAL_TIM_MspPostInit+0xa8>)
 800306c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	60fb      	str	r3, [r7, #12]
 8003074:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PA7     ------> TIM8_CH1N
    PB14     ------> TIM8_CH2N
    PB15     ------> TIM8_CH3N
    */
    GPIO_InitStruct.Pin = LED_RED_Pin;
 8003076:	2380      	movs	r3, #128	; 0x80
 8003078:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800307a:	2302      	movs	r3, #2
 800307c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307e:	2300      	movs	r3, #0
 8003080:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003082:	2300      	movs	r3, #0
 8003084:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003086:	2303      	movs	r3, #3
 8003088:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 800308a:	f107 0314 	add.w	r3, r7, #20
 800308e:	4619      	mov	r1, r3
 8003090:	480d      	ldr	r0, [pc, #52]	; (80030c8 <HAL_TIM_MspPostInit+0xac>)
 8003092:	f001 fdc1 	bl	8004c18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_BLUE_Pin;
 8003096:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800309a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800309c:	2302      	movs	r3, #2
 800309e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a0:	2300      	movs	r3, #0
 80030a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030a4:	2300      	movs	r3, #0
 80030a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80030a8:	2303      	movs	r3, #3
 80030aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030ac:	f107 0314 	add.w	r3, r7, #20
 80030b0:	4619      	mov	r1, r3
 80030b2:	4806      	ldr	r0, [pc, #24]	; (80030cc <HAL_TIM_MspPostInit+0xb0>)
 80030b4:	f001 fdb0 	bl	8004c18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80030b8:	bf00      	nop
 80030ba:	3728      	adds	r7, #40	; 0x28
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	40010400 	.word	0x40010400
 80030c4:	40023800 	.word	0x40023800
 80030c8:	40020000 	.word	0x40020000
 80030cc:	40020400 	.word	0x40020400

080030d0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80030d4:	4b11      	ldr	r3, [pc, #68]	; (800311c <MX_USART1_UART_Init+0x4c>)
 80030d6:	4a12      	ldr	r2, [pc, #72]	; (8003120 <MX_USART1_UART_Init+0x50>)
 80030d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80030da:	4b10      	ldr	r3, [pc, #64]	; (800311c <MX_USART1_UART_Init+0x4c>)
 80030dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80030e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80030e2:	4b0e      	ldr	r3, [pc, #56]	; (800311c <MX_USART1_UART_Init+0x4c>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80030e8:	4b0c      	ldr	r3, [pc, #48]	; (800311c <MX_USART1_UART_Init+0x4c>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80030ee:	4b0b      	ldr	r3, [pc, #44]	; (800311c <MX_USART1_UART_Init+0x4c>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80030f4:	4b09      	ldr	r3, [pc, #36]	; (800311c <MX_USART1_UART_Init+0x4c>)
 80030f6:	220c      	movs	r2, #12
 80030f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030fa:	4b08      	ldr	r3, [pc, #32]	; (800311c <MX_USART1_UART_Init+0x4c>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003100:	4b06      	ldr	r3, [pc, #24]	; (800311c <MX_USART1_UART_Init+0x4c>)
 8003102:	2200      	movs	r2, #0
 8003104:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8003106:	4805      	ldr	r0, [pc, #20]	; (800311c <MX_USART1_UART_Init+0x4c>)
 8003108:	f004 fb3e 	bl	8007788 <HAL_HalfDuplex_Init>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003112:	f7ff fbfd 	bl	8002910 <Error_Handler>
  }

}
 8003116:	bf00      	nop
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	20007cf4 	.word	0x20007cf4
 8003120:	40011000 	.word	0x40011000

08003124 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8003128:	4b11      	ldr	r3, [pc, #68]	; (8003170 <MX_USART3_UART_Init+0x4c>)
 800312a:	4a12      	ldr	r2, [pc, #72]	; (8003174 <MX_USART3_UART_Init+0x50>)
 800312c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800312e:	4b10      	ldr	r3, [pc, #64]	; (8003170 <MX_USART3_UART_Init+0x4c>)
 8003130:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003134:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003136:	4b0e      	ldr	r3, [pc, #56]	; (8003170 <MX_USART3_UART_Init+0x4c>)
 8003138:	2200      	movs	r2, #0
 800313a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800313c:	4b0c      	ldr	r3, [pc, #48]	; (8003170 <MX_USART3_UART_Init+0x4c>)
 800313e:	2200      	movs	r2, #0
 8003140:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003142:	4b0b      	ldr	r3, [pc, #44]	; (8003170 <MX_USART3_UART_Init+0x4c>)
 8003144:	2200      	movs	r2, #0
 8003146:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003148:	4b09      	ldr	r3, [pc, #36]	; (8003170 <MX_USART3_UART_Init+0x4c>)
 800314a:	220c      	movs	r2, #12
 800314c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800314e:	4b08      	ldr	r3, [pc, #32]	; (8003170 <MX_USART3_UART_Init+0x4c>)
 8003150:	2200      	movs	r2, #0
 8003152:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003154:	4b06      	ldr	r3, [pc, #24]	; (8003170 <MX_USART3_UART_Init+0x4c>)
 8003156:	2200      	movs	r2, #0
 8003158:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800315a:	4805      	ldr	r0, [pc, #20]	; (8003170 <MX_USART3_UART_Init+0x4c>)
 800315c:	f004 fac7 	bl	80076ee <HAL_UART_Init>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003166:	f7ff fbd3 	bl	8002910 <Error_Handler>
  }

}
 800316a:	bf00      	nop
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	20007b34 	.word	0x20007b34
 8003174:	40004800 	.word	0x40004800

08003178 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 800317c:	4b11      	ldr	r3, [pc, #68]	; (80031c4 <MX_USART6_UART_Init+0x4c>)
 800317e:	4a12      	ldr	r2, [pc, #72]	; (80031c8 <MX_USART6_UART_Init+0x50>)
 8003180:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8003182:	4b10      	ldr	r3, [pc, #64]	; (80031c4 <MX_USART6_UART_Init+0x4c>)
 8003184:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003188:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800318a:	4b0e      	ldr	r3, [pc, #56]	; (80031c4 <MX_USART6_UART_Init+0x4c>)
 800318c:	2200      	movs	r2, #0
 800318e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003190:	4b0c      	ldr	r3, [pc, #48]	; (80031c4 <MX_USART6_UART_Init+0x4c>)
 8003192:	2200      	movs	r2, #0
 8003194:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003196:	4b0b      	ldr	r3, [pc, #44]	; (80031c4 <MX_USART6_UART_Init+0x4c>)
 8003198:	2200      	movs	r2, #0
 800319a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800319c:	4b09      	ldr	r3, [pc, #36]	; (80031c4 <MX_USART6_UART_Init+0x4c>)
 800319e:	220c      	movs	r2, #12
 80031a0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031a2:	4b08      	ldr	r3, [pc, #32]	; (80031c4 <MX_USART6_UART_Init+0x4c>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80031a8:	4b06      	ldr	r3, [pc, #24]	; (80031c4 <MX_USART6_UART_Init+0x4c>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80031ae:	4805      	ldr	r0, [pc, #20]	; (80031c4 <MX_USART6_UART_Init+0x4c>)
 80031b0:	f004 fa9d 	bl	80076ee <HAL_UART_Init>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d001      	beq.n	80031be <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80031ba:	f7ff fba9 	bl	8002910 <Error_Handler>
  }

}
 80031be:	bf00      	nop
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	20007d34 	.word	0x20007d34
 80031c8:	40011400 	.word	0x40011400

080031cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b08e      	sub	sp, #56	; 0x38
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031d8:	2200      	movs	r2, #0
 80031da:	601a      	str	r2, [r3, #0]
 80031dc:	605a      	str	r2, [r3, #4]
 80031de:	609a      	str	r2, [r3, #8]
 80031e0:	60da      	str	r2, [r3, #12]
 80031e2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a4b      	ldr	r2, [pc, #300]	; (8003318 <HAL_UART_MspInit+0x14c>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	f040 80a2 	bne.w	8003334 <HAL_UART_MspInit+0x168>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80031f0:	2300      	movs	r3, #0
 80031f2:	623b      	str	r3, [r7, #32]
 80031f4:	4b49      	ldr	r3, [pc, #292]	; (800331c <HAL_UART_MspInit+0x150>)
 80031f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f8:	4a48      	ldr	r2, [pc, #288]	; (800331c <HAL_UART_MspInit+0x150>)
 80031fa:	f043 0310 	orr.w	r3, r3, #16
 80031fe:	6453      	str	r3, [r2, #68]	; 0x44
 8003200:	4b46      	ldr	r3, [pc, #280]	; (800331c <HAL_UART_MspInit+0x150>)
 8003202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003204:	f003 0310 	and.w	r3, r3, #16
 8003208:	623b      	str	r3, [r7, #32]
 800320a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800320c:	2300      	movs	r3, #0
 800320e:	61fb      	str	r3, [r7, #28]
 8003210:	4b42      	ldr	r3, [pc, #264]	; (800331c <HAL_UART_MspInit+0x150>)
 8003212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003214:	4a41      	ldr	r2, [pc, #260]	; (800331c <HAL_UART_MspInit+0x150>)
 8003216:	f043 0301 	orr.w	r3, r3, #1
 800321a:	6313      	str	r3, [r2, #48]	; 0x30
 800321c:	4b3f      	ldr	r3, [pc, #252]	; (800331c <HAL_UART_MspInit+0x150>)
 800321e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003220:	f003 0301 	and.w	r3, r3, #1
 8003224:	61fb      	str	r3, [r7, #28]
 8003226:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = SERVO_TX_Pin;
 8003228:	f44f 7300 	mov.w	r3, #512	; 0x200
 800322c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800322e:	2312      	movs	r3, #18
 8003230:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003232:	2301      	movs	r3, #1
 8003234:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003236:	2303      	movs	r3, #3
 8003238:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800323a:	2307      	movs	r3, #7
 800323c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SERVO_TX_GPIO_Port, &GPIO_InitStruct);
 800323e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003242:	4619      	mov	r1, r3
 8003244:	4836      	ldr	r0, [pc, #216]	; (8003320 <HAL_UART_MspInit+0x154>)
 8003246:	f001 fce7 	bl	8004c18 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 800324a:	4b36      	ldr	r3, [pc, #216]	; (8003324 <HAL_UART_MspInit+0x158>)
 800324c:	4a36      	ldr	r2, [pc, #216]	; (8003328 <HAL_UART_MspInit+0x15c>)
 800324e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003250:	4b34      	ldr	r3, [pc, #208]	; (8003324 <HAL_UART_MspInit+0x158>)
 8003252:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003256:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003258:	4b32      	ldr	r3, [pc, #200]	; (8003324 <HAL_UART_MspInit+0x158>)
 800325a:	2200      	movs	r2, #0
 800325c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800325e:	4b31      	ldr	r3, [pc, #196]	; (8003324 <HAL_UART_MspInit+0x158>)
 8003260:	2200      	movs	r2, #0
 8003262:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003264:	4b2f      	ldr	r3, [pc, #188]	; (8003324 <HAL_UART_MspInit+0x158>)
 8003266:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800326a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800326c:	4b2d      	ldr	r3, [pc, #180]	; (8003324 <HAL_UART_MspInit+0x158>)
 800326e:	2200      	movs	r2, #0
 8003270:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003272:	4b2c      	ldr	r3, [pc, #176]	; (8003324 <HAL_UART_MspInit+0x158>)
 8003274:	2200      	movs	r2, #0
 8003276:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003278:	4b2a      	ldr	r3, [pc, #168]	; (8003324 <HAL_UART_MspInit+0x158>)
 800327a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800327e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003280:	4b28      	ldr	r3, [pc, #160]	; (8003324 <HAL_UART_MspInit+0x158>)
 8003282:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003286:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003288:	4b26      	ldr	r3, [pc, #152]	; (8003324 <HAL_UART_MspInit+0x158>)
 800328a:	2200      	movs	r2, #0
 800328c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800328e:	4825      	ldr	r0, [pc, #148]	; (8003324 <HAL_UART_MspInit+0x158>)
 8003290:	f001 f8c0 	bl	8004414 <HAL_DMA_Init>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 800329a:	f7ff fb39 	bl	8002910 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a20      	ldr	r2, [pc, #128]	; (8003324 <HAL_UART_MspInit+0x158>)
 80032a2:	635a      	str	r2, [r3, #52]	; 0x34
 80032a4:	4a1f      	ldr	r2, [pc, #124]	; (8003324 <HAL_UART_MspInit+0x158>)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80032aa:	4b20      	ldr	r3, [pc, #128]	; (800332c <HAL_UART_MspInit+0x160>)
 80032ac:	4a20      	ldr	r2, [pc, #128]	; (8003330 <HAL_UART_MspInit+0x164>)
 80032ae:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80032b0:	4b1e      	ldr	r3, [pc, #120]	; (800332c <HAL_UART_MspInit+0x160>)
 80032b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80032b6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032b8:	4b1c      	ldr	r3, [pc, #112]	; (800332c <HAL_UART_MspInit+0x160>)
 80032ba:	2240      	movs	r2, #64	; 0x40
 80032bc:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032be:	4b1b      	ldr	r3, [pc, #108]	; (800332c <HAL_UART_MspInit+0x160>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80032c4:	4b19      	ldr	r3, [pc, #100]	; (800332c <HAL_UART_MspInit+0x160>)
 80032c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032ca:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032cc:	4b17      	ldr	r3, [pc, #92]	; (800332c <HAL_UART_MspInit+0x160>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032d2:	4b16      	ldr	r3, [pc, #88]	; (800332c <HAL_UART_MspInit+0x160>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80032d8:	4b14      	ldr	r3, [pc, #80]	; (800332c <HAL_UART_MspInit+0x160>)
 80032da:	2200      	movs	r2, #0
 80032dc:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80032de:	4b13      	ldr	r3, [pc, #76]	; (800332c <HAL_UART_MspInit+0x160>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80032e4:	4b11      	ldr	r3, [pc, #68]	; (800332c <HAL_UART_MspInit+0x160>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80032ea:	4810      	ldr	r0, [pc, #64]	; (800332c <HAL_UART_MspInit+0x160>)
 80032ec:	f001 f892 	bl	8004414 <HAL_DMA_Init>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 80032f6:	f7ff fb0b 	bl	8002910 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a0b      	ldr	r2, [pc, #44]	; (800332c <HAL_UART_MspInit+0x160>)
 80032fe:	631a      	str	r2, [r3, #48]	; 0x30
 8003300:	4a0a      	ldr	r2, [pc, #40]	; (800332c <HAL_UART_MspInit+0x160>)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003306:	2200      	movs	r2, #0
 8003308:	2105      	movs	r1, #5
 800330a:	2025      	movs	r0, #37	; 0x25
 800330c:	f001 f858 	bl	80043c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003310:	2025      	movs	r0, #37	; 0x25
 8003312:	f001 f871 	bl	80043f8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8003316:	e16d      	b.n	80035f4 <HAL_UART_MspInit+0x428>
 8003318:	40011000 	.word	0x40011000
 800331c:	40023800 	.word	0x40023800
 8003320:	40020000 	.word	0x40020000
 8003324:	20007c94 	.word	0x20007c94
 8003328:	40026488 	.word	0x40026488
 800332c:	20007bd4 	.word	0x20007bd4
 8003330:	400264b8 	.word	0x400264b8
  else if(uartHandle->Instance==USART3)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a5a      	ldr	r2, [pc, #360]	; (80034a4 <HAL_UART_MspInit+0x2d8>)
 800333a:	4293      	cmp	r3, r2
 800333c:	f040 80c2 	bne.w	80034c4 <HAL_UART_MspInit+0x2f8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003340:	2300      	movs	r3, #0
 8003342:	61bb      	str	r3, [r7, #24]
 8003344:	4b58      	ldr	r3, [pc, #352]	; (80034a8 <HAL_UART_MspInit+0x2dc>)
 8003346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003348:	4a57      	ldr	r2, [pc, #348]	; (80034a8 <HAL_UART_MspInit+0x2dc>)
 800334a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800334e:	6413      	str	r3, [r2, #64]	; 0x40
 8003350:	4b55      	ldr	r3, [pc, #340]	; (80034a8 <HAL_UART_MspInit+0x2dc>)
 8003352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003354:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003358:	61bb      	str	r3, [r7, #24]
 800335a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800335c:	2300      	movs	r3, #0
 800335e:	617b      	str	r3, [r7, #20]
 8003360:	4b51      	ldr	r3, [pc, #324]	; (80034a8 <HAL_UART_MspInit+0x2dc>)
 8003362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003364:	4a50      	ldr	r2, [pc, #320]	; (80034a8 <HAL_UART_MspInit+0x2dc>)
 8003366:	f043 0304 	orr.w	r3, r3, #4
 800336a:	6313      	str	r3, [r2, #48]	; 0x30
 800336c:	4b4e      	ldr	r3, [pc, #312]	; (80034a8 <HAL_UART_MspInit+0x2dc>)
 800336e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003370:	f003 0304 	and.w	r3, r3, #4
 8003374:	617b      	str	r3, [r7, #20]
 8003376:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003378:	2300      	movs	r3, #0
 800337a:	613b      	str	r3, [r7, #16]
 800337c:	4b4a      	ldr	r3, [pc, #296]	; (80034a8 <HAL_UART_MspInit+0x2dc>)
 800337e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003380:	4a49      	ldr	r2, [pc, #292]	; (80034a8 <HAL_UART_MspInit+0x2dc>)
 8003382:	f043 0302 	orr.w	r3, r3, #2
 8003386:	6313      	str	r3, [r2, #48]	; 0x30
 8003388:	4b47      	ldr	r3, [pc, #284]	; (80034a8 <HAL_UART_MspInit+0x2dc>)
 800338a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	613b      	str	r3, [r7, #16]
 8003392:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = DEBUG_RX_Pin;
 8003394:	2320      	movs	r3, #32
 8003396:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003398:	2302      	movs	r3, #2
 800339a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339c:	2300      	movs	r3, #0
 800339e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033a0:	2303      	movs	r3, #3
 80033a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80033a4:	2307      	movs	r3, #7
 80033a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DEBUG_RX_GPIO_Port, &GPIO_InitStruct);
 80033a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033ac:	4619      	mov	r1, r3
 80033ae:	483f      	ldr	r0, [pc, #252]	; (80034ac <HAL_UART_MspInit+0x2e0>)
 80033b0:	f001 fc32 	bl	8004c18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DEBUG_TX_Pin;
 80033b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ba:	2302      	movs	r3, #2
 80033bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033be:	2300      	movs	r3, #0
 80033c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033c2:	2303      	movs	r3, #3
 80033c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80033c6:	2307      	movs	r3, #7
 80033c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DEBUG_TX_GPIO_Port, &GPIO_InitStruct);
 80033ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033ce:	4619      	mov	r1, r3
 80033d0:	4837      	ldr	r0, [pc, #220]	; (80034b0 <HAL_UART_MspInit+0x2e4>)
 80033d2:	f001 fc21 	bl	8004c18 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80033d6:	4b37      	ldr	r3, [pc, #220]	; (80034b4 <HAL_UART_MspInit+0x2e8>)
 80033d8:	4a37      	ldr	r2, [pc, #220]	; (80034b8 <HAL_UART_MspInit+0x2ec>)
 80033da:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80033dc:	4b35      	ldr	r3, [pc, #212]	; (80034b4 <HAL_UART_MspInit+0x2e8>)
 80033de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80033e2:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80033e4:	4b33      	ldr	r3, [pc, #204]	; (80034b4 <HAL_UART_MspInit+0x2e8>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033ea:	4b32      	ldr	r3, [pc, #200]	; (80034b4 <HAL_UART_MspInit+0x2e8>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80033f0:	4b30      	ldr	r3, [pc, #192]	; (80034b4 <HAL_UART_MspInit+0x2e8>)
 80033f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033f6:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033f8:	4b2e      	ldr	r3, [pc, #184]	; (80034b4 <HAL_UART_MspInit+0x2e8>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033fe:	4b2d      	ldr	r3, [pc, #180]	; (80034b4 <HAL_UART_MspInit+0x2e8>)
 8003400:	2200      	movs	r2, #0
 8003402:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8003404:	4b2b      	ldr	r3, [pc, #172]	; (80034b4 <HAL_UART_MspInit+0x2e8>)
 8003406:	f44f 7280 	mov.w	r2, #256	; 0x100
 800340a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800340c:	4b29      	ldr	r3, [pc, #164]	; (80034b4 <HAL_UART_MspInit+0x2e8>)
 800340e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003412:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003414:	4b27      	ldr	r3, [pc, #156]	; (80034b4 <HAL_UART_MspInit+0x2e8>)
 8003416:	2200      	movs	r2, #0
 8003418:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800341a:	4826      	ldr	r0, [pc, #152]	; (80034b4 <HAL_UART_MspInit+0x2e8>)
 800341c:	f000 fffa 	bl	8004414 <HAL_DMA_Init>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <HAL_UART_MspInit+0x25e>
      Error_Handler();
 8003426:	f7ff fa73 	bl	8002910 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a21      	ldr	r2, [pc, #132]	; (80034b4 <HAL_UART_MspInit+0x2e8>)
 800342e:	635a      	str	r2, [r3, #52]	; 0x34
 8003430:	4a20      	ldr	r2, [pc, #128]	; (80034b4 <HAL_UART_MspInit+0x2e8>)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8003436:	4b21      	ldr	r3, [pc, #132]	; (80034bc <HAL_UART_MspInit+0x2f0>)
 8003438:	4a21      	ldr	r2, [pc, #132]	; (80034c0 <HAL_UART_MspInit+0x2f4>)
 800343a:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 800343c:	4b1f      	ldr	r3, [pc, #124]	; (80034bc <HAL_UART_MspInit+0x2f0>)
 800343e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003442:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003444:	4b1d      	ldr	r3, [pc, #116]	; (80034bc <HAL_UART_MspInit+0x2f0>)
 8003446:	2240      	movs	r2, #64	; 0x40
 8003448:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800344a:	4b1c      	ldr	r3, [pc, #112]	; (80034bc <HAL_UART_MspInit+0x2f0>)
 800344c:	2200      	movs	r2, #0
 800344e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003450:	4b1a      	ldr	r3, [pc, #104]	; (80034bc <HAL_UART_MspInit+0x2f0>)
 8003452:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003456:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003458:	4b18      	ldr	r3, [pc, #96]	; (80034bc <HAL_UART_MspInit+0x2f0>)
 800345a:	2200      	movs	r2, #0
 800345c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800345e:	4b17      	ldr	r3, [pc, #92]	; (80034bc <HAL_UART_MspInit+0x2f0>)
 8003460:	2200      	movs	r2, #0
 8003462:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003464:	4b15      	ldr	r3, [pc, #84]	; (80034bc <HAL_UART_MspInit+0x2f0>)
 8003466:	2200      	movs	r2, #0
 8003468:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800346a:	4b14      	ldr	r3, [pc, #80]	; (80034bc <HAL_UART_MspInit+0x2f0>)
 800346c:	2200      	movs	r2, #0
 800346e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003470:	4b12      	ldr	r3, [pc, #72]	; (80034bc <HAL_UART_MspInit+0x2f0>)
 8003472:	2200      	movs	r2, #0
 8003474:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003476:	4811      	ldr	r0, [pc, #68]	; (80034bc <HAL_UART_MspInit+0x2f0>)
 8003478:	f000 ffcc 	bl	8004414 <HAL_DMA_Init>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <HAL_UART_MspInit+0x2ba>
      Error_Handler();
 8003482:	f7ff fa45 	bl	8002910 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a0c      	ldr	r2, [pc, #48]	; (80034bc <HAL_UART_MspInit+0x2f0>)
 800348a:	631a      	str	r2, [r3, #48]	; 0x30
 800348c:	4a0b      	ldr	r2, [pc, #44]	; (80034bc <HAL_UART_MspInit+0x2f0>)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003492:	2200      	movs	r2, #0
 8003494:	2105      	movs	r1, #5
 8003496:	2027      	movs	r0, #39	; 0x27
 8003498:	f000 ff92 	bl	80043c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800349c:	2027      	movs	r0, #39	; 0x27
 800349e:	f000 ffab 	bl	80043f8 <HAL_NVIC_EnableIRQ>
}
 80034a2:	e0a7      	b.n	80035f4 <HAL_UART_MspInit+0x428>
 80034a4:	40004800 	.word	0x40004800
 80034a8:	40023800 	.word	0x40023800
 80034ac:	40020800 	.word	0x40020800
 80034b0:	40020400 	.word	0x40020400
 80034b4:	20007ad4 	.word	0x20007ad4
 80034b8:	40026028 	.word	0x40026028
 80034bc:	20007b74 	.word	0x20007b74
 80034c0:	40026058 	.word	0x40026058
  else if(uartHandle->Instance==USART6)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a4c      	ldr	r2, [pc, #304]	; (80035fc <HAL_UART_MspInit+0x430>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	f040 8092 	bne.w	80035f4 <HAL_UART_MspInit+0x428>
    __HAL_RCC_USART6_CLK_ENABLE();
 80034d0:	2300      	movs	r3, #0
 80034d2:	60fb      	str	r3, [r7, #12]
 80034d4:	4b4a      	ldr	r3, [pc, #296]	; (8003600 <HAL_UART_MspInit+0x434>)
 80034d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d8:	4a49      	ldr	r2, [pc, #292]	; (8003600 <HAL_UART_MspInit+0x434>)
 80034da:	f043 0320 	orr.w	r3, r3, #32
 80034de:	6453      	str	r3, [r2, #68]	; 0x44
 80034e0:	4b47      	ldr	r3, [pc, #284]	; (8003600 <HAL_UART_MspInit+0x434>)
 80034e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e4:	f003 0320 	and.w	r3, r3, #32
 80034e8:	60fb      	str	r3, [r7, #12]
 80034ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034ec:	2300      	movs	r3, #0
 80034ee:	60bb      	str	r3, [r7, #8]
 80034f0:	4b43      	ldr	r3, [pc, #268]	; (8003600 <HAL_UART_MspInit+0x434>)
 80034f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f4:	4a42      	ldr	r2, [pc, #264]	; (8003600 <HAL_UART_MspInit+0x434>)
 80034f6:	f043 0304 	orr.w	r3, r3, #4
 80034fa:	6313      	str	r3, [r2, #48]	; 0x30
 80034fc:	4b40      	ldr	r3, [pc, #256]	; (8003600 <HAL_UART_MspInit+0x434>)
 80034fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003500:	f003 0304 	and.w	r3, r3, #4
 8003504:	60bb      	str	r3, [r7, #8]
 8003506:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CM4_TX_Pin|CM4_RX_Pin;
 8003508:	23c0      	movs	r3, #192	; 0xc0
 800350a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800350c:	2302      	movs	r3, #2
 800350e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003510:	2300      	movs	r3, #0
 8003512:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003514:	2303      	movs	r3, #3
 8003516:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003518:	2308      	movs	r3, #8
 800351a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800351c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003520:	4619      	mov	r1, r3
 8003522:	4838      	ldr	r0, [pc, #224]	; (8003604 <HAL_UART_MspInit+0x438>)
 8003524:	f001 fb78 	bl	8004c18 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream2;
 8003528:	4b37      	ldr	r3, [pc, #220]	; (8003608 <HAL_UART_MspInit+0x43c>)
 800352a:	4a38      	ldr	r2, [pc, #224]	; (800360c <HAL_UART_MspInit+0x440>)
 800352c:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800352e:	4b36      	ldr	r3, [pc, #216]	; (8003608 <HAL_UART_MspInit+0x43c>)
 8003530:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8003534:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003536:	4b34      	ldr	r3, [pc, #208]	; (8003608 <HAL_UART_MspInit+0x43c>)
 8003538:	2200      	movs	r2, #0
 800353a:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800353c:	4b32      	ldr	r3, [pc, #200]	; (8003608 <HAL_UART_MspInit+0x43c>)
 800353e:	2200      	movs	r2, #0
 8003540:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003542:	4b31      	ldr	r3, [pc, #196]	; (8003608 <HAL_UART_MspInit+0x43c>)
 8003544:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003548:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800354a:	4b2f      	ldr	r3, [pc, #188]	; (8003608 <HAL_UART_MspInit+0x43c>)
 800354c:	2200      	movs	r2, #0
 800354e:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003550:	4b2d      	ldr	r3, [pc, #180]	; (8003608 <HAL_UART_MspInit+0x43c>)
 8003552:	2200      	movs	r2, #0
 8003554:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8003556:	4b2c      	ldr	r3, [pc, #176]	; (8003608 <HAL_UART_MspInit+0x43c>)
 8003558:	f44f 7280 	mov.w	r2, #256	; 0x100
 800355c:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800355e:	4b2a      	ldr	r3, [pc, #168]	; (8003608 <HAL_UART_MspInit+0x43c>)
 8003560:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003564:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003566:	4b28      	ldr	r3, [pc, #160]	; (8003608 <HAL_UART_MspInit+0x43c>)
 8003568:	2200      	movs	r2, #0
 800356a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800356c:	4826      	ldr	r0, [pc, #152]	; (8003608 <HAL_UART_MspInit+0x43c>)
 800356e:	f000 ff51 	bl	8004414 <HAL_DMA_Init>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d001      	beq.n	800357c <HAL_UART_MspInit+0x3b0>
      Error_Handler();
 8003578:	f7ff f9ca 	bl	8002910 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a22      	ldr	r2, [pc, #136]	; (8003608 <HAL_UART_MspInit+0x43c>)
 8003580:	635a      	str	r2, [r3, #52]	; 0x34
 8003582:	4a21      	ldr	r2, [pc, #132]	; (8003608 <HAL_UART_MspInit+0x43c>)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8003588:	4b21      	ldr	r3, [pc, #132]	; (8003610 <HAL_UART_MspInit+0x444>)
 800358a:	4a22      	ldr	r2, [pc, #136]	; (8003614 <HAL_UART_MspInit+0x448>)
 800358c:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 800358e:	4b20      	ldr	r3, [pc, #128]	; (8003610 <HAL_UART_MspInit+0x444>)
 8003590:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8003594:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003596:	4b1e      	ldr	r3, [pc, #120]	; (8003610 <HAL_UART_MspInit+0x444>)
 8003598:	2240      	movs	r2, #64	; 0x40
 800359a:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800359c:	4b1c      	ldr	r3, [pc, #112]	; (8003610 <HAL_UART_MspInit+0x444>)
 800359e:	2200      	movs	r2, #0
 80035a0:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 80035a2:	4b1b      	ldr	r3, [pc, #108]	; (8003610 <HAL_UART_MspInit+0x444>)
 80035a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035a8:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035aa:	4b19      	ldr	r3, [pc, #100]	; (8003610 <HAL_UART_MspInit+0x444>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035b0:	4b17      	ldr	r3, [pc, #92]	; (8003610 <HAL_UART_MspInit+0x444>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 80035b6:	4b16      	ldr	r3, [pc, #88]	; (8003610 <HAL_UART_MspInit+0x444>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 80035bc:	4b14      	ldr	r3, [pc, #80]	; (8003610 <HAL_UART_MspInit+0x444>)
 80035be:	2200      	movs	r2, #0
 80035c0:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035c2:	4b13      	ldr	r3, [pc, #76]	; (8003610 <HAL_UART_MspInit+0x444>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 80035c8:	4811      	ldr	r0, [pc, #68]	; (8003610 <HAL_UART_MspInit+0x444>)
 80035ca:	f000 ff23 	bl	8004414 <HAL_DMA_Init>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d001      	beq.n	80035d8 <HAL_UART_MspInit+0x40c>
      Error_Handler();
 80035d4:	f7ff f99c 	bl	8002910 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a0d      	ldr	r2, [pc, #52]	; (8003610 <HAL_UART_MspInit+0x444>)
 80035dc:	631a      	str	r2, [r3, #48]	; 0x30
 80035de:	4a0c      	ldr	r2, [pc, #48]	; (8003610 <HAL_UART_MspInit+0x444>)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80035e4:	2200      	movs	r2, #0
 80035e6:	2105      	movs	r1, #5
 80035e8:	2047      	movs	r0, #71	; 0x47
 80035ea:	f000 fee9 	bl	80043c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80035ee:	2047      	movs	r0, #71	; 0x47
 80035f0:	f000 ff02 	bl	80043f8 <HAL_NVIC_EnableIRQ>
}
 80035f4:	bf00      	nop
 80035f6:	3738      	adds	r7, #56	; 0x38
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	40011400 	.word	0x40011400
 8003600:	40023800 	.word	0x40023800
 8003604:	40020800 	.word	0x40020800
 8003608:	20007a74 	.word	0x20007a74
 800360c:	40026440 	.word	0x40026440
 8003610:	20007c34 	.word	0x20007c34
 8003614:	400264a0 	.word	0x400264a0

08003618 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003618:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003650 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800361c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800361e:	e003      	b.n	8003628 <LoopCopyDataInit>

08003620 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003620:	4b0c      	ldr	r3, [pc, #48]	; (8003654 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003622:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003624:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003626:	3104      	adds	r1, #4

08003628 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003628:	480b      	ldr	r0, [pc, #44]	; (8003658 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800362a:	4b0c      	ldr	r3, [pc, #48]	; (800365c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800362c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800362e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003630:	d3f6      	bcc.n	8003620 <CopyDataInit>
  ldr  r2, =_sbss
 8003632:	4a0b      	ldr	r2, [pc, #44]	; (8003660 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003634:	e002      	b.n	800363c <LoopFillZerobss>

08003636 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003636:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003638:	f842 3b04 	str.w	r3, [r2], #4

0800363c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800363c:	4b09      	ldr	r3, [pc, #36]	; (8003664 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800363e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003640:	d3f9      	bcc.n	8003636 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003642:	f7ff fb35 	bl	8002cb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003646:	f007 fb2f 	bl	800aca8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800364a:	f7ff f8bd 	bl	80027c8 <main>
  bx  lr    
 800364e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003650:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003654:	0800adc0 	.word	0x0800adc0
  ldr  r0, =_sdata
 8003658:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800365c:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8003660:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8003664:	20007d78 	.word	0x20007d78

08003668 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003668:	e7fe      	b.n	8003668 <ADC_IRQHandler>
	...

0800366c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003670:	4b0e      	ldr	r3, [pc, #56]	; (80036ac <HAL_Init+0x40>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a0d      	ldr	r2, [pc, #52]	; (80036ac <HAL_Init+0x40>)
 8003676:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800367a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800367c:	4b0b      	ldr	r3, [pc, #44]	; (80036ac <HAL_Init+0x40>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a0a      	ldr	r2, [pc, #40]	; (80036ac <HAL_Init+0x40>)
 8003682:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003686:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003688:	4b08      	ldr	r3, [pc, #32]	; (80036ac <HAL_Init+0x40>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a07      	ldr	r2, [pc, #28]	; (80036ac <HAL_Init+0x40>)
 800368e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003692:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003694:	2003      	movs	r0, #3
 8003696:	f000 fe88 	bl	80043aa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800369a:	2000      	movs	r0, #0
 800369c:	f7ff fa18 	bl	8002ad0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036a0:	f7ff f9ea 	bl	8002a78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	40023c00 	.word	0x40023c00

080036b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036b4:	4b06      	ldr	r3, [pc, #24]	; (80036d0 <HAL_IncTick+0x20>)
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	461a      	mov	r2, r3
 80036ba:	4b06      	ldr	r3, [pc, #24]	; (80036d4 <HAL_IncTick+0x24>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4413      	add	r3, r2
 80036c0:	4a04      	ldr	r2, [pc, #16]	; (80036d4 <HAL_IncTick+0x24>)
 80036c2:	6013      	str	r3, [r2, #0]
}
 80036c4:	bf00      	nop
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	20000068 	.word	0x20000068
 80036d4:	20007d74 	.word	0x20007d74

080036d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036d8:	b480      	push	{r7}
 80036da:	af00      	add	r7, sp, #0
  return uwTick;
 80036dc:	4b03      	ldr	r3, [pc, #12]	; (80036ec <HAL_GetTick+0x14>)
 80036de:	681b      	ldr	r3, [r3, #0]
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	20007d74 	.word	0x20007d74

080036f0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d101      	bne.n	8003702 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e0ed      	b.n	80038de <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	d102      	bne.n	8003714 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f7fe fee2 	bl	80024d8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f022 0202 	bic.w	r2, r2, #2
 8003722:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003724:	f7ff ffd8 	bl	80036d8 <HAL_GetTick>
 8003728:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800372a:	e012      	b.n	8003752 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800372c:	f7ff ffd4 	bl	80036d8 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b0a      	cmp	r3, #10
 8003738:	d90b      	bls.n	8003752 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2205      	movs	r2, #5
 800374a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e0c5      	b.n	80038de <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1e5      	bne.n	800372c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f042 0201 	orr.w	r2, r2, #1
 800376e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003770:	f7ff ffb2 	bl	80036d8 <HAL_GetTick>
 8003774:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003776:	e012      	b.n	800379e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003778:	f7ff ffae 	bl	80036d8 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	2b0a      	cmp	r3, #10
 8003784:	d90b      	bls.n	800379e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2205      	movs	r2, #5
 8003796:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e09f      	b.n	80038de <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f003 0301 	and.w	r3, r3, #1
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d0e5      	beq.n	8003778 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	7e1b      	ldrb	r3, [r3, #24]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d108      	bne.n	80037c6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80037c2:	601a      	str	r2, [r3, #0]
 80037c4:	e007      	b.n	80037d6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	7e5b      	ldrb	r3, [r3, #25]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d108      	bne.n	80037f0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037ec:	601a      	str	r2, [r3, #0]
 80037ee:	e007      	b.n	8003800 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	7e9b      	ldrb	r3, [r3, #26]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d108      	bne.n	800381a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f042 0220 	orr.w	r2, r2, #32
 8003816:	601a      	str	r2, [r3, #0]
 8003818:	e007      	b.n	800382a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 0220 	bic.w	r2, r2, #32
 8003828:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	7edb      	ldrb	r3, [r3, #27]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d108      	bne.n	8003844 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 0210 	bic.w	r2, r2, #16
 8003840:	601a      	str	r2, [r3, #0]
 8003842:	e007      	b.n	8003854 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f042 0210 	orr.w	r2, r2, #16
 8003852:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	7f1b      	ldrb	r3, [r3, #28]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d108      	bne.n	800386e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f042 0208 	orr.w	r2, r2, #8
 800386a:	601a      	str	r2, [r3, #0]
 800386c:	e007      	b.n	800387e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f022 0208 	bic.w	r2, r2, #8
 800387c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	7f5b      	ldrb	r3, [r3, #29]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d108      	bne.n	8003898 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f042 0204 	orr.w	r2, r2, #4
 8003894:	601a      	str	r2, [r3, #0]
 8003896:	e007      	b.n	80038a8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f022 0204 	bic.w	r2, r2, #4
 80038a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	689a      	ldr	r2, [r3, #8]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	431a      	orrs	r2, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	431a      	orrs	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	695b      	ldr	r3, [r3, #20]
 80038bc:	ea42 0103 	orr.w	r1, r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	1e5a      	subs	r2, r3, #1
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	430a      	orrs	r2, r1
 80038cc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
	...

080038e8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b087      	sub	sp, #28
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038fe:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003900:	7cfb      	ldrb	r3, [r7, #19]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d003      	beq.n	800390e <HAL_CAN_ConfigFilter+0x26>
 8003906:	7cfb      	ldrb	r3, [r7, #19]
 8003908:	2b02      	cmp	r3, #2
 800390a:	f040 80be 	bne.w	8003a8a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800390e:	4b65      	ldr	r3, [pc, #404]	; (8003aa4 <HAL_CAN_ConfigFilter+0x1bc>)
 8003910:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003918:	f043 0201 	orr.w	r2, r3, #1
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003928:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393c:	021b      	lsls	r3, r3, #8
 800393e:	431a      	orrs	r2, r3
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	f003 031f 	and.w	r3, r3, #31
 800394e:	2201      	movs	r2, #1
 8003950:	fa02 f303 	lsl.w	r3, r2, r3
 8003954:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	43db      	mvns	r3, r3
 8003960:	401a      	ands	r2, r3
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	69db      	ldr	r3, [r3, #28]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d123      	bne.n	80039b8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	43db      	mvns	r3, r3
 800397a:	401a      	ands	r2, r3
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800398e:	683a      	ldr	r2, [r7, #0]
 8003990:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003992:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	3248      	adds	r2, #72	; 0x48
 8003998:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80039ac:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80039ae:	6979      	ldr	r1, [r7, #20]
 80039b0:	3348      	adds	r3, #72	; 0x48
 80039b2:	00db      	lsls	r3, r3, #3
 80039b4:	440b      	add	r3, r1
 80039b6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	69db      	ldr	r3, [r3, #28]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d122      	bne.n	8003a06 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	431a      	orrs	r2, r3
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80039dc:	683a      	ldr	r2, [r7, #0]
 80039de:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80039e0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	3248      	adds	r2, #72	; 0x48
 80039e6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80039fa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80039fc:	6979      	ldr	r1, [r7, #20]
 80039fe:	3348      	adds	r3, #72	; 0x48
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	440b      	add	r3, r1
 8003a04:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d109      	bne.n	8003a22 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	43db      	mvns	r3, r3
 8003a18:	401a      	ands	r2, r3
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003a20:	e007      	b.n	8003a32 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	431a      	orrs	r2, r3
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d109      	bne.n	8003a4e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	43db      	mvns	r3, r3
 8003a44:	401a      	ands	r2, r3
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003a4c:	e007      	b.n	8003a5e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	431a      	orrs	r2, r3
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d107      	bne.n	8003a76 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	431a      	orrs	r2, r3
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003a7c:	f023 0201 	bic.w	r2, r3, #1
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003a86:	2300      	movs	r3, #0
 8003a88:	e006      	b.n	8003a98 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
  }
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	371c      	adds	r7, #28
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr
 8003aa4:	40006400 	.word	0x40006400

08003aa8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d12e      	bne.n	8003b1a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2202      	movs	r2, #2
 8003ac0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f022 0201 	bic.w	r2, r2, #1
 8003ad2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003ad4:	f7ff fe00 	bl	80036d8 <HAL_GetTick>
 8003ad8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003ada:	e012      	b.n	8003b02 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003adc:	f7ff fdfc 	bl	80036d8 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b0a      	cmp	r3, #10
 8003ae8:	d90b      	bls.n	8003b02 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2205      	movs	r2, #5
 8003afa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e012      	b.n	8003b28 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f003 0301 	and.w	r3, r3, #1
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1e5      	bne.n	8003adc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003b16:	2300      	movs	r3, #0
 8003b18:	e006      	b.n	8003b28 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
  }
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003b30:	b480      	push	{r7}
 8003b32:	b087      	sub	sp, #28
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
 8003b3c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b44:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003b46:	7dfb      	ldrb	r3, [r7, #23]
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d003      	beq.n	8003b54 <HAL_CAN_GetRxMessage+0x24>
 8003b4c:	7dfb      	ldrb	r3, [r7, #23]
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	f040 80f3 	bne.w	8003d3a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d10e      	bne.n	8003b78 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	f003 0303 	and.w	r3, r3, #3
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d116      	bne.n	8003b96 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e0e7      	b.n	8003d48 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	f003 0303 	and.w	r3, r3, #3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d107      	bne.n	8003b96 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e0d8      	b.n	8003d48 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	331b      	adds	r3, #27
 8003b9e:	011b      	lsls	r3, r3, #4
 8003ba0:	4413      	add	r3, r2
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0204 	and.w	r2, r3, #4
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d10c      	bne.n	8003bce <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	331b      	adds	r3, #27
 8003bbc:	011b      	lsls	r3, r3, #4
 8003bbe:	4413      	add	r3, r2
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	0d5b      	lsrs	r3, r3, #21
 8003bc4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	601a      	str	r2, [r3, #0]
 8003bcc:	e00b      	b.n	8003be6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	331b      	adds	r3, #27
 8003bd6:	011b      	lsls	r3, r3, #4
 8003bd8:	4413      	add	r3, r2
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	08db      	lsrs	r3, r3, #3
 8003bde:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	331b      	adds	r3, #27
 8003bee:	011b      	lsls	r3, r3, #4
 8003bf0:	4413      	add	r3, r2
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0202 	and.w	r2, r3, #2
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	331b      	adds	r3, #27
 8003c04:	011b      	lsls	r3, r3, #4
 8003c06:	4413      	add	r3, r2
 8003c08:	3304      	adds	r3, #4
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 020f 	and.w	r2, r3, #15
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	331b      	adds	r3, #27
 8003c1c:	011b      	lsls	r3, r3, #4
 8003c1e:	4413      	add	r3, r2
 8003c20:	3304      	adds	r3, #4
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	0a1b      	lsrs	r3, r3, #8
 8003c26:	b2da      	uxtb	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	331b      	adds	r3, #27
 8003c34:	011b      	lsls	r3, r3, #4
 8003c36:	4413      	add	r3, r2
 8003c38:	3304      	adds	r3, #4
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	0c1b      	lsrs	r3, r3, #16
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	011b      	lsls	r3, r3, #4
 8003c4c:	4413      	add	r3, r2
 8003c4e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	b2da      	uxtb	r2, r3
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	011b      	lsls	r3, r3, #4
 8003c62:	4413      	add	r3, r2
 8003c64:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	0a1a      	lsrs	r2, r3, #8
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	3301      	adds	r3, #1
 8003c70:	b2d2      	uxtb	r2, r2
 8003c72:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	011b      	lsls	r3, r3, #4
 8003c7c:	4413      	add	r3, r2
 8003c7e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	0c1a      	lsrs	r2, r3, #16
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	3302      	adds	r3, #2
 8003c8a:	b2d2      	uxtb	r2, r2
 8003c8c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	011b      	lsls	r3, r3, #4
 8003c96:	4413      	add	r3, r2
 8003c98:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	0e1a      	lsrs	r2, r3, #24
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	3303      	adds	r3, #3
 8003ca4:	b2d2      	uxtb	r2, r2
 8003ca6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	011b      	lsls	r3, r3, #4
 8003cb0:	4413      	add	r3, r2
 8003cb2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	3304      	adds	r3, #4
 8003cbc:	b2d2      	uxtb	r2, r2
 8003cbe:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	011b      	lsls	r3, r3, #4
 8003cc8:	4413      	add	r3, r2
 8003cca:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	0a1a      	lsrs	r2, r3, #8
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	3305      	adds	r3, #5
 8003cd6:	b2d2      	uxtb	r2, r2
 8003cd8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	011b      	lsls	r3, r3, #4
 8003ce2:	4413      	add	r3, r2
 8003ce4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	0c1a      	lsrs	r2, r3, #16
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	3306      	adds	r3, #6
 8003cf0:	b2d2      	uxtb	r2, r2
 8003cf2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	011b      	lsls	r3, r3, #4
 8003cfc:	4413      	add	r3, r2
 8003cfe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	0e1a      	lsrs	r2, r3, #24
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	3307      	adds	r3, #7
 8003d0a:	b2d2      	uxtb	r2, r2
 8003d0c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d108      	bne.n	8003d26 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68da      	ldr	r2, [r3, #12]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f042 0220 	orr.w	r2, r2, #32
 8003d22:	60da      	str	r2, [r3, #12]
 8003d24:	e007      	b.n	8003d36 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	691a      	ldr	r2, [r3, #16]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f042 0220 	orr.w	r2, r2, #32
 8003d34:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003d36:	2300      	movs	r3, #0
 8003d38:	e006      	b.n	8003d48 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
  }
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	371c      	adds	r7, #28
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d68:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003d6a:	7afb      	ldrb	r3, [r7, #11]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d002      	beq.n	8003d76 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8003d70:	7afb      	ldrb	r3, [r7, #11]
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d10f      	bne.n	8003d96 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d106      	bne.n	8003d8a <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	f003 0303 	and.w	r3, r3, #3
 8003d86:	60fb      	str	r3, [r7, #12]
 8003d88:	e005      	b.n	8003d96 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	f003 0303 	and.w	r3, r3, #3
 8003d94:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8003d96:	68fb      	ldr	r3, [r7, #12]
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3714      	adds	r7, #20
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003db4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003db6:	7bfb      	ldrb	r3, [r7, #15]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d002      	beq.n	8003dc2 <HAL_CAN_ActivateNotification+0x1e>
 8003dbc:	7bfb      	ldrb	r3, [r7, #15]
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d109      	bne.n	8003dd6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	6959      	ldr	r1, [r3, #20]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	683a      	ldr	r2, [r7, #0]
 8003dce:	430a      	orrs	r2, r1
 8003dd0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	e006      	b.n	8003de4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dda:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
  }
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3714      	adds	r7, #20
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b08a      	sub	sp, #40	; 0x28
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003e2c:	6a3b      	ldr	r3, [r7, #32]
 8003e2e:	f003 0301 	and.w	r3, r3, #1
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d07c      	beq.n	8003f30 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	f003 0301 	and.w	r3, r3, #1
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d023      	beq.n	8003e88 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2201      	movs	r2, #1
 8003e46:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d003      	beq.n	8003e5a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 f983 	bl	800415e <HAL_CAN_TxMailbox0CompleteCallback>
 8003e58:	e016      	b.n	8003e88 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	f003 0304 	and.w	r3, r3, #4
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d004      	beq.n	8003e6e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e66:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003e6a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e6c:	e00c      	b.n	8003e88 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	f003 0308 	and.w	r3, r3, #8
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d004      	beq.n	8003e82 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e7e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e80:	e002      	b.n	8003e88 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f989 	bl	800419a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d024      	beq.n	8003edc <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e9a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d003      	beq.n	8003eae <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 f963 	bl	8004172 <HAL_CAN_TxMailbox1CompleteCallback>
 8003eac:	e016      	b.n	8003edc <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d004      	beq.n	8003ec2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003ebe:	627b      	str	r3, [r7, #36]	; 0x24
 8003ec0:	e00c      	b.n	8003edc <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d004      	beq.n	8003ed6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ece:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ed2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ed4:	e002      	b.n	8003edc <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 f969 	bl	80041ae <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d024      	beq.n	8003f30 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003eee:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d003      	beq.n	8003f02 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f943 	bl	8004186 <HAL_CAN_TxMailbox2CompleteCallback>
 8003f00:	e016      	b.n	8003f30 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d004      	beq.n	8003f16 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f12:	627b      	str	r3, [r7, #36]	; 0x24
 8003f14:	e00c      	b.n	8003f30 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d004      	beq.n	8003f2a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f26:	627b      	str	r3, [r7, #36]	; 0x24
 8003f28:	e002      	b.n	8003f30 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 f949 	bl	80041c2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003f30:	6a3b      	ldr	r3, [r7, #32]
 8003f32:	f003 0308 	and.w	r3, r3, #8
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00c      	beq.n	8003f54 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	f003 0310 	and.w	r3, r3, #16
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d007      	beq.n	8003f54 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f4a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2210      	movs	r2, #16
 8003f52:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003f54:	6a3b      	ldr	r3, [r7, #32]
 8003f56:	f003 0304 	and.w	r3, r3, #4
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00b      	beq.n	8003f76 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	f003 0308 	and.w	r3, r3, #8
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d006      	beq.n	8003f76 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2208      	movs	r2, #8
 8003f6e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f000 f930 	bl	80041d6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003f76:	6a3b      	ldr	r3, [r7, #32]
 8003f78:	f003 0302 	and.w	r3, r3, #2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d009      	beq.n	8003f94 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	f003 0303 	and.w	r3, r3, #3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d002      	beq.n	8003f94 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f7fc fb42 	bl	8000618 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003f94:	6a3b      	ldr	r3, [r7, #32]
 8003f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00c      	beq.n	8003fb8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	f003 0310 	and.w	r3, r3, #16
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d007      	beq.n	8003fb8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003faa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003fae:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2210      	movs	r2, #16
 8003fb6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003fb8:	6a3b      	ldr	r3, [r7, #32]
 8003fba:	f003 0320 	and.w	r3, r3, #32
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00b      	beq.n	8003fda <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	f003 0308 	and.w	r3, r3, #8
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d006      	beq.n	8003fda <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2208      	movs	r2, #8
 8003fd2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f000 f912 	bl	80041fe <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003fda:	6a3b      	ldr	r3, [r7, #32]
 8003fdc:	f003 0310 	and.w	r3, r3, #16
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d009      	beq.n	8003ff8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	f003 0303 	and.w	r3, r3, #3
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d002      	beq.n	8003ff8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 f8f9 	bl	80041ea <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003ff8:	6a3b      	ldr	r3, [r7, #32]
 8003ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00b      	beq.n	800401a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	f003 0310 	and.w	r3, r3, #16
 8004008:	2b00      	cmp	r3, #0
 800400a:	d006      	beq.n	800401a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2210      	movs	r2, #16
 8004012:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f000 f8fc 	bl	8004212 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800401a:	6a3b      	ldr	r3, [r7, #32]
 800401c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d00b      	beq.n	800403c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	f003 0308 	and.w	r3, r3, #8
 800402a:	2b00      	cmp	r3, #0
 800402c:	d006      	beq.n	800403c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2208      	movs	r2, #8
 8004034:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 f8f5 	bl	8004226 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800403c:	6a3b      	ldr	r3, [r7, #32]
 800403e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d07b      	beq.n	800413e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	f003 0304 	and.w	r3, r3, #4
 800404c:	2b00      	cmp	r3, #0
 800404e:	d072      	beq.n	8004136 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004050:	6a3b      	ldr	r3, [r7, #32]
 8004052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004056:	2b00      	cmp	r3, #0
 8004058:	d008      	beq.n	800406c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004060:	2b00      	cmp	r3, #0
 8004062:	d003      	beq.n	800406c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004066:	f043 0301 	orr.w	r3, r3, #1
 800406a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800406c:	6a3b      	ldr	r3, [r7, #32]
 800406e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004072:	2b00      	cmp	r3, #0
 8004074:	d008      	beq.n	8004088 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800407c:	2b00      	cmp	r3, #0
 800407e:	d003      	beq.n	8004088 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004082:	f043 0302 	orr.w	r3, r3, #2
 8004086:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004088:	6a3b      	ldr	r3, [r7, #32]
 800408a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800408e:	2b00      	cmp	r3, #0
 8004090:	d008      	beq.n	80040a4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004098:	2b00      	cmp	r3, #0
 800409a:	d003      	beq.n	80040a4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800409c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409e:	f043 0304 	orr.w	r3, r3, #4
 80040a2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80040a4:	6a3b      	ldr	r3, [r7, #32]
 80040a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d043      	beq.n	8004136 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d03e      	beq.n	8004136 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040be:	2b60      	cmp	r3, #96	; 0x60
 80040c0:	d02b      	beq.n	800411a <HAL_CAN_IRQHandler+0x32a>
 80040c2:	2b60      	cmp	r3, #96	; 0x60
 80040c4:	d82e      	bhi.n	8004124 <HAL_CAN_IRQHandler+0x334>
 80040c6:	2b50      	cmp	r3, #80	; 0x50
 80040c8:	d022      	beq.n	8004110 <HAL_CAN_IRQHandler+0x320>
 80040ca:	2b50      	cmp	r3, #80	; 0x50
 80040cc:	d82a      	bhi.n	8004124 <HAL_CAN_IRQHandler+0x334>
 80040ce:	2b40      	cmp	r3, #64	; 0x40
 80040d0:	d019      	beq.n	8004106 <HAL_CAN_IRQHandler+0x316>
 80040d2:	2b40      	cmp	r3, #64	; 0x40
 80040d4:	d826      	bhi.n	8004124 <HAL_CAN_IRQHandler+0x334>
 80040d6:	2b30      	cmp	r3, #48	; 0x30
 80040d8:	d010      	beq.n	80040fc <HAL_CAN_IRQHandler+0x30c>
 80040da:	2b30      	cmp	r3, #48	; 0x30
 80040dc:	d822      	bhi.n	8004124 <HAL_CAN_IRQHandler+0x334>
 80040de:	2b10      	cmp	r3, #16
 80040e0:	d002      	beq.n	80040e8 <HAL_CAN_IRQHandler+0x2f8>
 80040e2:	2b20      	cmp	r3, #32
 80040e4:	d005      	beq.n	80040f2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80040e6:	e01d      	b.n	8004124 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80040e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ea:	f043 0308 	orr.w	r3, r3, #8
 80040ee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80040f0:	e019      	b.n	8004126 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80040f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f4:	f043 0310 	orr.w	r3, r3, #16
 80040f8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80040fa:	e014      	b.n	8004126 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80040fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fe:	f043 0320 	orr.w	r3, r3, #32
 8004102:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004104:	e00f      	b.n	8004126 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004108:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800410c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800410e:	e00a      	b.n	8004126 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004112:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004116:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004118:	e005      	b.n	8004126 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800411a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004120:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004122:	e000      	b.n	8004126 <HAL_CAN_IRQHandler+0x336>
            break;
 8004124:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	699a      	ldr	r2, [r3, #24]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004134:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2204      	movs	r2, #4
 800413c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800413e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004140:	2b00      	cmp	r3, #0
 8004142:	d008      	beq.n	8004156 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414a:	431a      	orrs	r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f000 f872 	bl	800423a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004156:	bf00      	nop
 8004158:	3728      	adds	r7, #40	; 0x28
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800415e:	b480      	push	{r7}
 8004160:	b083      	sub	sp, #12
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004166:	bf00      	nop
 8004168:	370c      	adds	r7, #12
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr

08004172 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004172:	b480      	push	{r7}
 8004174:	b083      	sub	sp, #12
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800417a:	bf00      	nop
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr

08004186 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004186:	b480      	push	{r7}
 8004188:	b083      	sub	sp, #12
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800418e:	bf00      	nop
 8004190:	370c      	adds	r7, #12
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800419a:	b480      	push	{r7}
 800419c:	b083      	sub	sp, #12
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80041a2:	bf00      	nop
 80041a4:	370c      	adds	r7, #12
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr

080041ae <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80041ae:	b480      	push	{r7}
 80041b0:	b083      	sub	sp, #12
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80041b6:	bf00      	nop
 80041b8:	370c      	adds	r7, #12
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr

080041c2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80041c2:	b480      	push	{r7}
 80041c4:	b083      	sub	sp, #12
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80041ca:	bf00      	nop
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr

080041d6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80041d6:	b480      	push	{r7}
 80041d8:	b083      	sub	sp, #12
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80041de:	bf00      	nop
 80041e0:	370c      	adds	r7, #12
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr

080041ea <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80041ea:	b480      	push	{r7}
 80041ec:	b083      	sub	sp, #12
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80041f2:	bf00      	nop
 80041f4:	370c      	adds	r7, #12
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr

080041fe <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80041fe:	b480      	push	{r7}
 8004200:	b083      	sub	sp, #12
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004206:	bf00      	nop
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr

08004212 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004212:	b480      	push	{r7}
 8004214:	b083      	sub	sp, #12
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800421a:	bf00      	nop
 800421c:	370c      	adds	r7, #12
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr

08004226 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004226:	b480      	push	{r7}
 8004228:	b083      	sub	sp, #12
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800422e:	bf00      	nop
 8004230:	370c      	adds	r7, #12
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr

0800423a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800423a:	b480      	push	{r7}
 800423c:	b083      	sub	sp, #12
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004242:	bf00      	nop
 8004244:	370c      	adds	r7, #12
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
	...

08004250 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004250:	b480      	push	{r7}
 8004252:	b085      	sub	sp, #20
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f003 0307 	and.w	r3, r3, #7
 800425e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004260:	4b0c      	ldr	r3, [pc, #48]	; (8004294 <__NVIC_SetPriorityGrouping+0x44>)
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004266:	68ba      	ldr	r2, [r7, #8]
 8004268:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800426c:	4013      	ands	r3, r2
 800426e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004278:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800427c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004280:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004282:	4a04      	ldr	r2, [pc, #16]	; (8004294 <__NVIC_SetPriorityGrouping+0x44>)
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	60d3      	str	r3, [r2, #12]
}
 8004288:	bf00      	nop
 800428a:	3714      	adds	r7, #20
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr
 8004294:	e000ed00 	.word	0xe000ed00

08004298 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004298:	b480      	push	{r7}
 800429a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800429c:	4b04      	ldr	r3, [pc, #16]	; (80042b0 <__NVIC_GetPriorityGrouping+0x18>)
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	0a1b      	lsrs	r3, r3, #8
 80042a2:	f003 0307 	and.w	r3, r3, #7
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr
 80042b0:	e000ed00 	.word	0xe000ed00

080042b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	4603      	mov	r3, r0
 80042bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	db0b      	blt.n	80042de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042c6:	79fb      	ldrb	r3, [r7, #7]
 80042c8:	f003 021f 	and.w	r2, r3, #31
 80042cc:	4907      	ldr	r1, [pc, #28]	; (80042ec <__NVIC_EnableIRQ+0x38>)
 80042ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042d2:	095b      	lsrs	r3, r3, #5
 80042d4:	2001      	movs	r0, #1
 80042d6:	fa00 f202 	lsl.w	r2, r0, r2
 80042da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80042de:	bf00      	nop
 80042e0:	370c      	adds	r7, #12
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	e000e100 	.word	0xe000e100

080042f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	4603      	mov	r3, r0
 80042f8:	6039      	str	r1, [r7, #0]
 80042fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004300:	2b00      	cmp	r3, #0
 8004302:	db0a      	blt.n	800431a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	b2da      	uxtb	r2, r3
 8004308:	490c      	ldr	r1, [pc, #48]	; (800433c <__NVIC_SetPriority+0x4c>)
 800430a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800430e:	0112      	lsls	r2, r2, #4
 8004310:	b2d2      	uxtb	r2, r2
 8004312:	440b      	add	r3, r1
 8004314:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004318:	e00a      	b.n	8004330 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	b2da      	uxtb	r2, r3
 800431e:	4908      	ldr	r1, [pc, #32]	; (8004340 <__NVIC_SetPriority+0x50>)
 8004320:	79fb      	ldrb	r3, [r7, #7]
 8004322:	f003 030f 	and.w	r3, r3, #15
 8004326:	3b04      	subs	r3, #4
 8004328:	0112      	lsls	r2, r2, #4
 800432a:	b2d2      	uxtb	r2, r2
 800432c:	440b      	add	r3, r1
 800432e:	761a      	strb	r2, [r3, #24]
}
 8004330:	bf00      	nop
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr
 800433c:	e000e100 	.word	0xe000e100
 8004340:	e000ed00 	.word	0xe000ed00

08004344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004344:	b480      	push	{r7}
 8004346:	b089      	sub	sp, #36	; 0x24
 8004348:	af00      	add	r7, sp, #0
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f003 0307 	and.w	r3, r3, #7
 8004356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	f1c3 0307 	rsb	r3, r3, #7
 800435e:	2b04      	cmp	r3, #4
 8004360:	bf28      	it	cs
 8004362:	2304      	movcs	r3, #4
 8004364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	3304      	adds	r3, #4
 800436a:	2b06      	cmp	r3, #6
 800436c:	d902      	bls.n	8004374 <NVIC_EncodePriority+0x30>
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	3b03      	subs	r3, #3
 8004372:	e000      	b.n	8004376 <NVIC_EncodePriority+0x32>
 8004374:	2300      	movs	r3, #0
 8004376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004378:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	fa02 f303 	lsl.w	r3, r2, r3
 8004382:	43da      	mvns	r2, r3
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	401a      	ands	r2, r3
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800438c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	fa01 f303 	lsl.w	r3, r1, r3
 8004396:	43d9      	mvns	r1, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800439c:	4313      	orrs	r3, r2
         );
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3724      	adds	r7, #36	; 0x24
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr

080043aa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043aa:	b580      	push	{r7, lr}
 80043ac:	b082      	sub	sp, #8
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f7ff ff4c 	bl	8004250 <__NVIC_SetPriorityGrouping>
}
 80043b8:	bf00      	nop
 80043ba:	3708      	adds	r7, #8
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b086      	sub	sp, #24
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	4603      	mov	r3, r0
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	607a      	str	r2, [r7, #4]
 80043cc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80043ce:	2300      	movs	r3, #0
 80043d0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80043d2:	f7ff ff61 	bl	8004298 <__NVIC_GetPriorityGrouping>
 80043d6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	68b9      	ldr	r1, [r7, #8]
 80043dc:	6978      	ldr	r0, [r7, #20]
 80043de:	f7ff ffb1 	bl	8004344 <NVIC_EncodePriority>
 80043e2:	4602      	mov	r2, r0
 80043e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043e8:	4611      	mov	r1, r2
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7ff ff80 	bl	80042f0 <__NVIC_SetPriority>
}
 80043f0:	bf00      	nop
 80043f2:	3718      	adds	r7, #24
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	4603      	mov	r3, r0
 8004400:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004406:	4618      	mov	r0, r3
 8004408:	f7ff ff54 	bl	80042b4 <__NVIC_EnableIRQ>
}
 800440c:	bf00      	nop
 800440e:	3708      	adds	r7, #8
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b086      	sub	sp, #24
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800441c:	2300      	movs	r3, #0
 800441e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004420:	f7ff f95a 	bl	80036d8 <HAL_GetTick>
 8004424:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d101      	bne.n	8004430 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e099      	b.n	8004564 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2202      	movs	r2, #2
 800443c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f022 0201 	bic.w	r2, r2, #1
 800444e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004450:	e00f      	b.n	8004472 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004452:	f7ff f941 	bl	80036d8 <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	2b05      	cmp	r3, #5
 800445e:	d908      	bls.n	8004472 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2220      	movs	r2, #32
 8004464:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2203      	movs	r2, #3
 800446a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e078      	b.n	8004564 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0301 	and.w	r3, r3, #1
 800447c:	2b00      	cmp	r3, #0
 800447e:	d1e8      	bne.n	8004452 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004488:	697a      	ldr	r2, [r7, #20]
 800448a:	4b38      	ldr	r3, [pc, #224]	; (800456c <HAL_DMA_Init+0x158>)
 800448c:	4013      	ands	r3, r2
 800448e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685a      	ldr	r2, [r3, #4]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800449e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	699b      	ldr	r3, [r3, #24]
 80044b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a1b      	ldr	r3, [r3, #32]
 80044bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044be:	697a      	ldr	r2, [r7, #20]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c8:	2b04      	cmp	r3, #4
 80044ca:	d107      	bne.n	80044dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d4:	4313      	orrs	r3, r2
 80044d6:	697a      	ldr	r2, [r7, #20]
 80044d8:	4313      	orrs	r3, r2
 80044da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	697a      	ldr	r2, [r7, #20]
 80044e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	f023 0307 	bic.w	r3, r3, #7
 80044f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f8:	697a      	ldr	r2, [r7, #20]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004502:	2b04      	cmp	r3, #4
 8004504:	d117      	bne.n	8004536 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800450a:	697a      	ldr	r2, [r7, #20]
 800450c:	4313      	orrs	r3, r2
 800450e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00e      	beq.n	8004536 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 fb01 	bl	8004b20 <DMA_CheckFifoParam>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d008      	beq.n	8004536 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2240      	movs	r2, #64	; 0x40
 8004528:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2201      	movs	r2, #1
 800452e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004532:	2301      	movs	r3, #1
 8004534:	e016      	b.n	8004564 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	697a      	ldr	r2, [r7, #20]
 800453c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 fab8 	bl	8004ab4 <DMA_CalcBaseAndBitshift>
 8004544:	4603      	mov	r3, r0
 8004546:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800454c:	223f      	movs	r2, #63	; 0x3f
 800454e:	409a      	lsls	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2201      	movs	r2, #1
 800455e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	3718      	adds	r7, #24
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}
 800456c:	f010803f 	.word	0xf010803f

08004570 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b086      	sub	sp, #24
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	607a      	str	r2, [r7, #4]
 800457c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800457e:	2300      	movs	r3, #0
 8004580:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004586:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800458e:	2b01      	cmp	r3, #1
 8004590:	d101      	bne.n	8004596 <HAL_DMA_Start_IT+0x26>
 8004592:	2302      	movs	r3, #2
 8004594:	e040      	b.n	8004618 <HAL_DMA_Start_IT+0xa8>
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2201      	movs	r2, #1
 800459a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d12f      	bne.n	800460a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2202      	movs	r2, #2
 80045ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2200      	movs	r2, #0
 80045b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	68b9      	ldr	r1, [r7, #8]
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f000 fa4a 	bl	8004a58 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045c8:	223f      	movs	r2, #63	; 0x3f
 80045ca:	409a      	lsls	r2, r3
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f042 0216 	orr.w	r2, r2, #22
 80045de:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d007      	beq.n	80045f8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f042 0208 	orr.w	r2, r2, #8
 80045f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f042 0201 	orr.w	r2, r2, #1
 8004606:	601a      	str	r2, [r3, #0]
 8004608:	e005      	b.n	8004616 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004612:	2302      	movs	r3, #2
 8004614:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004616:	7dfb      	ldrb	r3, [r7, #23]
}
 8004618:	4618      	mov	r0, r3
 800461a:	3718      	adds	r7, #24
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800462c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800462e:	f7ff f853 	bl	80036d8 <HAL_GetTick>
 8004632:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800463a:	b2db      	uxtb	r3, r3
 800463c:	2b02      	cmp	r3, #2
 800463e:	d008      	beq.n	8004652 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2280      	movs	r2, #128	; 0x80
 8004644:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e052      	b.n	80046f8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f022 0216 	bic.w	r2, r2, #22
 8004660:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	695a      	ldr	r2, [r3, #20]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004670:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004676:	2b00      	cmp	r3, #0
 8004678:	d103      	bne.n	8004682 <HAL_DMA_Abort+0x62>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800467e:	2b00      	cmp	r3, #0
 8004680:	d007      	beq.n	8004692 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f022 0208 	bic.w	r2, r2, #8
 8004690:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f022 0201 	bic.w	r2, r2, #1
 80046a0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80046a2:	e013      	b.n	80046cc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80046a4:	f7ff f818 	bl	80036d8 <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	2b05      	cmp	r3, #5
 80046b0:	d90c      	bls.n	80046cc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2220      	movs	r2, #32
 80046b6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2203      	movs	r2, #3
 80046c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e015      	b.n	80046f8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0301 	and.w	r3, r3, #1
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1e4      	bne.n	80046a4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046de:	223f      	movs	r2, #63	; 0x3f
 80046e0:	409a      	lsls	r2, r3
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3710      	adds	r7, #16
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800470e:	b2db      	uxtb	r3, r3
 8004710:	2b02      	cmp	r3, #2
 8004712:	d004      	beq.n	800471e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2280      	movs	r2, #128	; 0x80
 8004718:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e00c      	b.n	8004738 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2205      	movs	r2, #5
 8004722:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f022 0201 	bic.w	r2, r2, #1
 8004734:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004736:	2300      	movs	r3, #0
}
 8004738:	4618      	mov	r0, r3
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b086      	sub	sp, #24
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800474c:	2300      	movs	r3, #0
 800474e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004750:	4b92      	ldr	r3, [pc, #584]	; (800499c <HAL_DMA_IRQHandler+0x258>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a92      	ldr	r2, [pc, #584]	; (80049a0 <HAL_DMA_IRQHandler+0x25c>)
 8004756:	fba2 2303 	umull	r2, r3, r2, r3
 800475a:	0a9b      	lsrs	r3, r3, #10
 800475c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004762:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800476e:	2208      	movs	r2, #8
 8004770:	409a      	lsls	r2, r3
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	4013      	ands	r3, r2
 8004776:	2b00      	cmp	r3, #0
 8004778:	d01a      	beq.n	80047b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0304 	and.w	r3, r3, #4
 8004784:	2b00      	cmp	r3, #0
 8004786:	d013      	beq.n	80047b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f022 0204 	bic.w	r2, r2, #4
 8004796:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800479c:	2208      	movs	r2, #8
 800479e:	409a      	lsls	r2, r3
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a8:	f043 0201 	orr.w	r2, r3, #1
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047b4:	2201      	movs	r2, #1
 80047b6:	409a      	lsls	r2, r3
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	4013      	ands	r3, r2
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d012      	beq.n	80047e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00b      	beq.n	80047e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047d2:	2201      	movs	r2, #1
 80047d4:	409a      	lsls	r2, r3
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047de:	f043 0202 	orr.w	r2, r3, #2
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ea:	2204      	movs	r2, #4
 80047ec:	409a      	lsls	r2, r3
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	4013      	ands	r3, r2
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d012      	beq.n	800481c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0302 	and.w	r3, r3, #2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00b      	beq.n	800481c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004808:	2204      	movs	r2, #4
 800480a:	409a      	lsls	r2, r3
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004814:	f043 0204 	orr.w	r2, r3, #4
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004820:	2210      	movs	r2, #16
 8004822:	409a      	lsls	r2, r3
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	4013      	ands	r3, r2
 8004828:	2b00      	cmp	r3, #0
 800482a:	d043      	beq.n	80048b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0308 	and.w	r3, r3, #8
 8004836:	2b00      	cmp	r3, #0
 8004838:	d03c      	beq.n	80048b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800483e:	2210      	movs	r2, #16
 8004840:	409a      	lsls	r2, r3
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d018      	beq.n	8004886 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d108      	bne.n	8004874 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004866:	2b00      	cmp	r3, #0
 8004868:	d024      	beq.n	80048b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	4798      	blx	r3
 8004872:	e01f      	b.n	80048b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004878:	2b00      	cmp	r3, #0
 800487a:	d01b      	beq.n	80048b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	4798      	blx	r3
 8004884:	e016      	b.n	80048b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004890:	2b00      	cmp	r3, #0
 8004892:	d107      	bne.n	80048a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f022 0208 	bic.w	r2, r2, #8
 80048a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d003      	beq.n	80048b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048b8:	2220      	movs	r2, #32
 80048ba:	409a      	lsls	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	4013      	ands	r3, r2
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f000 808e 	beq.w	80049e2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0310 	and.w	r3, r3, #16
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	f000 8086 	beq.w	80049e2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048da:	2220      	movs	r2, #32
 80048dc:	409a      	lsls	r2, r3
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b05      	cmp	r3, #5
 80048ec:	d136      	bne.n	800495c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f022 0216 	bic.w	r2, r2, #22
 80048fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	695a      	ldr	r2, [r3, #20]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800490c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004912:	2b00      	cmp	r3, #0
 8004914:	d103      	bne.n	800491e <HAL_DMA_IRQHandler+0x1da>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800491a:	2b00      	cmp	r3, #0
 800491c:	d007      	beq.n	800492e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f022 0208 	bic.w	r2, r2, #8
 800492c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004932:	223f      	movs	r2, #63	; 0x3f
 8004934:	409a      	lsls	r2, r3
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2201      	movs	r2, #1
 8004946:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800494e:	2b00      	cmp	r3, #0
 8004950:	d07d      	beq.n	8004a4e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	4798      	blx	r3
        }
        return;
 800495a:	e078      	b.n	8004a4e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d01c      	beq.n	80049a4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d108      	bne.n	800498a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800497c:	2b00      	cmp	r3, #0
 800497e:	d030      	beq.n	80049e2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	4798      	blx	r3
 8004988:	e02b      	b.n	80049e2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800498e:	2b00      	cmp	r3, #0
 8004990:	d027      	beq.n	80049e2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	4798      	blx	r3
 800499a:	e022      	b.n	80049e2 <HAL_DMA_IRQHandler+0x29e>
 800499c:	20000060 	.word	0x20000060
 80049a0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d10f      	bne.n	80049d2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f022 0210 	bic.w	r2, r2, #16
 80049c0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2201      	movs	r2, #1
 80049ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d003      	beq.n	80049e2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d032      	beq.n	8004a50 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ee:	f003 0301 	and.w	r3, r3, #1
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d022      	beq.n	8004a3c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2205      	movs	r2, #5
 80049fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f022 0201 	bic.w	r2, r2, #1
 8004a0c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	3301      	adds	r3, #1
 8004a12:	60bb      	str	r3, [r7, #8]
 8004a14:	697a      	ldr	r2, [r7, #20]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d307      	bcc.n	8004a2a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0301 	and.w	r3, r3, #1
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d1f2      	bne.n	8004a0e <HAL_DMA_IRQHandler+0x2ca>
 8004a28:	e000      	b.n	8004a2c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004a2a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d005      	beq.n	8004a50 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	4798      	blx	r3
 8004a4c:	e000      	b.n	8004a50 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004a4e:	bf00      	nop
    }
  }
}
 8004a50:	3718      	adds	r7, #24
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop

08004a58 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b085      	sub	sp, #20
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
 8004a64:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004a74:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	683a      	ldr	r2, [r7, #0]
 8004a7c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	2b40      	cmp	r3, #64	; 0x40
 8004a84:	d108      	bne.n	8004a98 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68ba      	ldr	r2, [r7, #8]
 8004a94:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004a96:	e007      	b.n	8004aa8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	68ba      	ldr	r2, [r7, #8]
 8004a9e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	60da      	str	r2, [r3, #12]
}
 8004aa8:	bf00      	nop
 8004aaa:	3714      	adds	r7, #20
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	3b10      	subs	r3, #16
 8004ac4:	4a14      	ldr	r2, [pc, #80]	; (8004b18 <DMA_CalcBaseAndBitshift+0x64>)
 8004ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aca:	091b      	lsrs	r3, r3, #4
 8004acc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004ace:	4a13      	ldr	r2, [pc, #76]	; (8004b1c <DMA_CalcBaseAndBitshift+0x68>)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2b03      	cmp	r3, #3
 8004ae0:	d909      	bls.n	8004af6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004aea:	f023 0303 	bic.w	r3, r3, #3
 8004aee:	1d1a      	adds	r2, r3, #4
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	659a      	str	r2, [r3, #88]	; 0x58
 8004af4:	e007      	b.n	8004b06 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004afe:	f023 0303 	bic.w	r3, r3, #3
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3714      	adds	r7, #20
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
 8004b16:	bf00      	nop
 8004b18:	aaaaaaab 	.word	0xaaaaaaab
 8004b1c:	0800ada8 	.word	0x0800ada8

08004b20 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b30:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d11f      	bne.n	8004b7a <DMA_CheckFifoParam+0x5a>
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	2b03      	cmp	r3, #3
 8004b3e:	d856      	bhi.n	8004bee <DMA_CheckFifoParam+0xce>
 8004b40:	a201      	add	r2, pc, #4	; (adr r2, 8004b48 <DMA_CheckFifoParam+0x28>)
 8004b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b46:	bf00      	nop
 8004b48:	08004b59 	.word	0x08004b59
 8004b4c:	08004b6b 	.word	0x08004b6b
 8004b50:	08004b59 	.word	0x08004b59
 8004b54:	08004bef 	.word	0x08004bef
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d046      	beq.n	8004bf2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b68:	e043      	b.n	8004bf2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b72:	d140      	bne.n	8004bf6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b78:	e03d      	b.n	8004bf6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b82:	d121      	bne.n	8004bc8 <DMA_CheckFifoParam+0xa8>
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	2b03      	cmp	r3, #3
 8004b88:	d837      	bhi.n	8004bfa <DMA_CheckFifoParam+0xda>
 8004b8a:	a201      	add	r2, pc, #4	; (adr r2, 8004b90 <DMA_CheckFifoParam+0x70>)
 8004b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b90:	08004ba1 	.word	0x08004ba1
 8004b94:	08004ba7 	.word	0x08004ba7
 8004b98:	08004ba1 	.word	0x08004ba1
 8004b9c:	08004bb9 	.word	0x08004bb9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ba4:	e030      	b.n	8004c08 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004baa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d025      	beq.n	8004bfe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bb6:	e022      	b.n	8004bfe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bbc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004bc0:	d11f      	bne.n	8004c02 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004bc6:	e01c      	b.n	8004c02 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d903      	bls.n	8004bd6 <DMA_CheckFifoParam+0xb6>
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	2b03      	cmp	r3, #3
 8004bd2:	d003      	beq.n	8004bdc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004bd4:	e018      	b.n	8004c08 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	73fb      	strb	r3, [r7, #15]
      break;
 8004bda:	e015      	b.n	8004c08 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d00e      	beq.n	8004c06 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	73fb      	strb	r3, [r7, #15]
      break;
 8004bec:	e00b      	b.n	8004c06 <DMA_CheckFifoParam+0xe6>
      break;
 8004bee:	bf00      	nop
 8004bf0:	e00a      	b.n	8004c08 <DMA_CheckFifoParam+0xe8>
      break;
 8004bf2:	bf00      	nop
 8004bf4:	e008      	b.n	8004c08 <DMA_CheckFifoParam+0xe8>
      break;
 8004bf6:	bf00      	nop
 8004bf8:	e006      	b.n	8004c08 <DMA_CheckFifoParam+0xe8>
      break;
 8004bfa:	bf00      	nop
 8004bfc:	e004      	b.n	8004c08 <DMA_CheckFifoParam+0xe8>
      break;
 8004bfe:	bf00      	nop
 8004c00:	e002      	b.n	8004c08 <DMA_CheckFifoParam+0xe8>
      break;   
 8004c02:	bf00      	nop
 8004c04:	e000      	b.n	8004c08 <DMA_CheckFifoParam+0xe8>
      break;
 8004c06:	bf00      	nop
    }
  } 
  
  return status; 
 8004c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3714      	adds	r7, #20
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop

08004c18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b089      	sub	sp, #36	; 0x24
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004c22:	2300      	movs	r3, #0
 8004c24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004c26:	2300      	movs	r3, #0
 8004c28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c2e:	2300      	movs	r3, #0
 8004c30:	61fb      	str	r3, [r7, #28]
 8004c32:	e165      	b.n	8004f00 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004c34:	2201      	movs	r2, #1
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	697a      	ldr	r2, [r7, #20]
 8004c44:	4013      	ands	r3, r2
 8004c46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004c48:	693a      	ldr	r2, [r7, #16]
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	f040 8154 	bne.w	8004efa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d00b      	beq.n	8004c72 <HAL_GPIO_Init+0x5a>
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d007      	beq.n	8004c72 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004c66:	2b11      	cmp	r3, #17
 8004c68:	d003      	beq.n	8004c72 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	2b12      	cmp	r3, #18
 8004c70:	d130      	bne.n	8004cd4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	005b      	lsls	r3, r3, #1
 8004c7c:	2203      	movs	r2, #3
 8004c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c82:	43db      	mvns	r3, r3
 8004c84:	69ba      	ldr	r2, [r7, #24]
 8004c86:	4013      	ands	r3, r2
 8004c88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	68da      	ldr	r2, [r3, #12]
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	005b      	lsls	r3, r3, #1
 8004c92:	fa02 f303 	lsl.w	r3, r2, r3
 8004c96:	69ba      	ldr	r2, [r7, #24]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	69ba      	ldr	r2, [r7, #24]
 8004ca0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ca8:	2201      	movs	r2, #1
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb0:	43db      	mvns	r3, r3
 8004cb2:	69ba      	ldr	r2, [r7, #24]
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	091b      	lsrs	r3, r3, #4
 8004cbe:	f003 0201 	and.w	r2, r3, #1
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc8:	69ba      	ldr	r2, [r7, #24]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	69ba      	ldr	r2, [r7, #24]
 8004cd2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	005b      	lsls	r3, r3, #1
 8004cde:	2203      	movs	r2, #3
 8004ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce4:	43db      	mvns	r3, r3
 8004ce6:	69ba      	ldr	r2, [r7, #24]
 8004ce8:	4013      	ands	r3, r2
 8004cea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	689a      	ldr	r2, [r3, #8]
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	005b      	lsls	r3, r3, #1
 8004cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf8:	69ba      	ldr	r2, [r7, #24]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	69ba      	ldr	r2, [r7, #24]
 8004d02:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d003      	beq.n	8004d14 <HAL_GPIO_Init+0xfc>
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	2b12      	cmp	r3, #18
 8004d12:	d123      	bne.n	8004d5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	08da      	lsrs	r2, r3, #3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	3208      	adds	r2, #8
 8004d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	f003 0307 	and.w	r3, r3, #7
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	220f      	movs	r2, #15
 8004d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d30:	43db      	mvns	r3, r3
 8004d32:	69ba      	ldr	r2, [r7, #24]
 8004d34:	4013      	ands	r3, r2
 8004d36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	691a      	ldr	r2, [r3, #16]
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	f003 0307 	and.w	r3, r3, #7
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	fa02 f303 	lsl.w	r3, r2, r3
 8004d48:	69ba      	ldr	r2, [r7, #24]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	08da      	lsrs	r2, r3, #3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	3208      	adds	r2, #8
 8004d56:	69b9      	ldr	r1, [r7, #24]
 8004d58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	005b      	lsls	r3, r3, #1
 8004d66:	2203      	movs	r2, #3
 8004d68:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6c:	43db      	mvns	r3, r3
 8004d6e:	69ba      	ldr	r2, [r7, #24]
 8004d70:	4013      	ands	r3, r2
 8004d72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	f003 0203 	and.w	r2, r3, #3
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	005b      	lsls	r3, r3, #1
 8004d80:	fa02 f303 	lsl.w	r3, r2, r3
 8004d84:	69ba      	ldr	r2, [r7, #24]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	69ba      	ldr	r2, [r7, #24]
 8004d8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f000 80ae 	beq.w	8004efa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d9e:	2300      	movs	r3, #0
 8004da0:	60fb      	str	r3, [r7, #12]
 8004da2:	4b5d      	ldr	r3, [pc, #372]	; (8004f18 <HAL_GPIO_Init+0x300>)
 8004da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004da6:	4a5c      	ldr	r2, [pc, #368]	; (8004f18 <HAL_GPIO_Init+0x300>)
 8004da8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004dac:	6453      	str	r3, [r2, #68]	; 0x44
 8004dae:	4b5a      	ldr	r3, [pc, #360]	; (8004f18 <HAL_GPIO_Init+0x300>)
 8004db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004db2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004db6:	60fb      	str	r3, [r7, #12]
 8004db8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004dba:	4a58      	ldr	r2, [pc, #352]	; (8004f1c <HAL_GPIO_Init+0x304>)
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	089b      	lsrs	r3, r3, #2
 8004dc0:	3302      	adds	r3, #2
 8004dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	f003 0303 	and.w	r3, r3, #3
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	220f      	movs	r2, #15
 8004dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd6:	43db      	mvns	r3, r3
 8004dd8:	69ba      	ldr	r2, [r7, #24]
 8004dda:	4013      	ands	r3, r2
 8004ddc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a4f      	ldr	r2, [pc, #316]	; (8004f20 <HAL_GPIO_Init+0x308>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d025      	beq.n	8004e32 <HAL_GPIO_Init+0x21a>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a4e      	ldr	r2, [pc, #312]	; (8004f24 <HAL_GPIO_Init+0x30c>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d01f      	beq.n	8004e2e <HAL_GPIO_Init+0x216>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a4d      	ldr	r2, [pc, #308]	; (8004f28 <HAL_GPIO_Init+0x310>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d019      	beq.n	8004e2a <HAL_GPIO_Init+0x212>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a4c      	ldr	r2, [pc, #304]	; (8004f2c <HAL_GPIO_Init+0x314>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d013      	beq.n	8004e26 <HAL_GPIO_Init+0x20e>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a4b      	ldr	r2, [pc, #300]	; (8004f30 <HAL_GPIO_Init+0x318>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d00d      	beq.n	8004e22 <HAL_GPIO_Init+0x20a>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a4a      	ldr	r2, [pc, #296]	; (8004f34 <HAL_GPIO_Init+0x31c>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d007      	beq.n	8004e1e <HAL_GPIO_Init+0x206>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a49      	ldr	r2, [pc, #292]	; (8004f38 <HAL_GPIO_Init+0x320>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d101      	bne.n	8004e1a <HAL_GPIO_Init+0x202>
 8004e16:	2306      	movs	r3, #6
 8004e18:	e00c      	b.n	8004e34 <HAL_GPIO_Init+0x21c>
 8004e1a:	2307      	movs	r3, #7
 8004e1c:	e00a      	b.n	8004e34 <HAL_GPIO_Init+0x21c>
 8004e1e:	2305      	movs	r3, #5
 8004e20:	e008      	b.n	8004e34 <HAL_GPIO_Init+0x21c>
 8004e22:	2304      	movs	r3, #4
 8004e24:	e006      	b.n	8004e34 <HAL_GPIO_Init+0x21c>
 8004e26:	2303      	movs	r3, #3
 8004e28:	e004      	b.n	8004e34 <HAL_GPIO_Init+0x21c>
 8004e2a:	2302      	movs	r3, #2
 8004e2c:	e002      	b.n	8004e34 <HAL_GPIO_Init+0x21c>
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e000      	b.n	8004e34 <HAL_GPIO_Init+0x21c>
 8004e32:	2300      	movs	r3, #0
 8004e34:	69fa      	ldr	r2, [r7, #28]
 8004e36:	f002 0203 	and.w	r2, r2, #3
 8004e3a:	0092      	lsls	r2, r2, #2
 8004e3c:	4093      	lsls	r3, r2
 8004e3e:	69ba      	ldr	r2, [r7, #24]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e44:	4935      	ldr	r1, [pc, #212]	; (8004f1c <HAL_GPIO_Init+0x304>)
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	089b      	lsrs	r3, r3, #2
 8004e4a:	3302      	adds	r3, #2
 8004e4c:	69ba      	ldr	r2, [r7, #24]
 8004e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004e52:	4b3a      	ldr	r3, [pc, #232]	; (8004f3c <HAL_GPIO_Init+0x324>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	43db      	mvns	r3, r3
 8004e5c:	69ba      	ldr	r2, [r7, #24]
 8004e5e:	4013      	ands	r3, r2
 8004e60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d003      	beq.n	8004e76 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004e6e:	69ba      	ldr	r2, [r7, #24]
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004e76:	4a31      	ldr	r2, [pc, #196]	; (8004f3c <HAL_GPIO_Init+0x324>)
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004e7c:	4b2f      	ldr	r3, [pc, #188]	; (8004f3c <HAL_GPIO_Init+0x324>)
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	43db      	mvns	r3, r3
 8004e86:	69ba      	ldr	r2, [r7, #24]
 8004e88:	4013      	ands	r3, r2
 8004e8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d003      	beq.n	8004ea0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004e98:	69ba      	ldr	r2, [r7, #24]
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ea0:	4a26      	ldr	r2, [pc, #152]	; (8004f3c <HAL_GPIO_Init+0x324>)
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004ea6:	4b25      	ldr	r3, [pc, #148]	; (8004f3c <HAL_GPIO_Init+0x324>)
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	43db      	mvns	r3, r3
 8004eb0:	69ba      	ldr	r2, [r7, #24]
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d003      	beq.n	8004eca <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004ec2:	69ba      	ldr	r2, [r7, #24]
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004eca:	4a1c      	ldr	r2, [pc, #112]	; (8004f3c <HAL_GPIO_Init+0x324>)
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ed0:	4b1a      	ldr	r3, [pc, #104]	; (8004f3c <HAL_GPIO_Init+0x324>)
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	43db      	mvns	r3, r3
 8004eda:	69ba      	ldr	r2, [r7, #24]
 8004edc:	4013      	ands	r3, r2
 8004ede:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d003      	beq.n	8004ef4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004eec:	69ba      	ldr	r2, [r7, #24]
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ef4:	4a11      	ldr	r2, [pc, #68]	; (8004f3c <HAL_GPIO_Init+0x324>)
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	3301      	adds	r3, #1
 8004efe:	61fb      	str	r3, [r7, #28]
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	2b0f      	cmp	r3, #15
 8004f04:	f67f ae96 	bls.w	8004c34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004f08:	bf00      	nop
 8004f0a:	bf00      	nop
 8004f0c:	3724      	adds	r7, #36	; 0x24
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	40023800 	.word	0x40023800
 8004f1c:	40013800 	.word	0x40013800
 8004f20:	40020000 	.word	0x40020000
 8004f24:	40020400 	.word	0x40020400
 8004f28:	40020800 	.word	0x40020800
 8004f2c:	40020c00 	.word	0x40020c00
 8004f30:	40021000 	.word	0x40021000
 8004f34:	40021400 	.word	0x40021400
 8004f38:	40021800 	.word	0x40021800
 8004f3c:	40013c00 	.word	0x40013c00

08004f40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	460b      	mov	r3, r1
 8004f4a:	807b      	strh	r3, [r7, #2]
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f50:	787b      	ldrb	r3, [r7, #1]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d003      	beq.n	8004f5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f56:	887a      	ldrh	r2, [r7, #2]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004f5c:	e003      	b.n	8004f66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004f5e:	887b      	ldrh	r3, [r7, #2]
 8004f60:	041a      	lsls	r2, r3, #16
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	619a      	str	r2, [r3, #24]
}
 8004f66:	bf00      	nop
 8004f68:	370c      	adds	r7, #12
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr
	...

08004f74 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b086      	sub	sp, #24
 8004f78:	af02      	add	r7, sp, #8
 8004f7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004f7c:	f7fe fbac 	bl	80036d8 <HAL_GetTick>
 8004f80:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d101      	bne.n	8004f8c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e069      	b.n	8005060 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d10b      	bne.n	8004fb0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f7fd fce9 	bl	8002978 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004fa6:	f241 3188 	movw	r1, #5000	; 0x1388
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 fd46 	bl	8005a3c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	021a      	lsls	r2, r3, #8
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fce:	9300      	str	r3, [sp, #0]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	2120      	movs	r1, #32
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 fd71 	bl	8005abe <QSPI_WaitFlagStateUntilTimeout>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004fe0:	7afb      	ldrb	r3, [r7, #11]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d137      	bne.n	8005056 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004ff0:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	6852      	ldr	r2, [r2, #4]
 8004ff8:	0611      	lsls	r1, r2, #24
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	68d2      	ldr	r2, [r2, #12]
 8004ffe:	4311      	orrs	r1, r2
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	69d2      	ldr	r2, [r2, #28]
 8005004:	4311      	orrs	r1, r2
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	6a12      	ldr	r2, [r2, #32]
 800500a:	4311      	orrs	r1, r2
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	6812      	ldr	r2, [r2, #0]
 8005010:	430b      	orrs	r3, r1
 8005012:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	685a      	ldr	r2, [r3, #4]
 800501a:	4b13      	ldr	r3, [pc, #76]	; (8005068 <HAL_QSPI_Init+0xf4>)
 800501c:	4013      	ands	r3, r2
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	6912      	ldr	r2, [r2, #16]
 8005022:	0411      	lsls	r1, r2, #16
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	6952      	ldr	r2, [r2, #20]
 8005028:	4311      	orrs	r1, r2
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	6992      	ldr	r2, [r2, #24]
 800502e:	4311      	orrs	r1, r2
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	6812      	ldr	r2, [r2, #0]
 8005034:	430b      	orrs	r3, r1
 8005036:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f042 0201 	orr.w	r2, r2, #1
 8005046:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2201      	movs	r2, #1
 8005052:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800505e:	7afb      	ldrb	r3, [r7, #11]
}
 8005060:	4618      	mov	r0, r3
 8005062:	3710      	adds	r7, #16
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}
 8005068:	ffe0f8fe 	.word	0xffe0f8fe

0800506c <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi : QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b086      	sub	sp, #24
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	f003 0304 	and.w	r3, r3, #4
 800508a:	2b00      	cmp	r3, #0
 800508c:	d064      	beq.n	8005158 <HAL_QSPI_IRQHandler+0xec>
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005094:	2b00      	cmp	r3, #0
 8005096:	d05f      	beq.n	8005158 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	3320      	adds	r3, #32
 800509e:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	2b12      	cmp	r3, #18
 80050aa:	d125      	bne.n	80050f8 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 80050ac:	e01c      	b.n	80050e8 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00f      	beq.n	80050d6 <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ba:	781a      	ldrb	r2, [r3, #0]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c4:	1c5a      	adds	r2, r3, #1
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ce:	1e5a      	subs	r2, r3, #1
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	62da      	str	r2, [r3, #44]	; 0x2c
 80050d4:	e008      	b.n	80050e8 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80050e4:	601a      	str	r2, [r3, #0]
          break;
 80050e6:	e033      	b.n	8005150 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	f003 0304 	and.w	r3, r3, #4
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1db      	bne.n	80050ae <HAL_QSPI_IRQHandler+0x42>
 80050f6:	e02b      	b.n	8005150 <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	2b22      	cmp	r3, #34	; 0x22
 8005102:	d125      	bne.n	8005150 <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8005104:	e01d      	b.n	8005142 <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510a:	2b00      	cmp	r3, #0
 800510c:	d010      	beq.n	8005130 <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005112:	68fa      	ldr	r2, [r7, #12]
 8005114:	7812      	ldrb	r2, [r2, #0]
 8005116:	b2d2      	uxtb	r2, r2
 8005118:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800511e:	1c5a      	adds	r2, r3, #1
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005128:	1e5a      	subs	r2, r3, #1
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	639a      	str	r2, [r3, #56]	; 0x38
 800512e:	e008      	b.n	8005142 <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800513e:	601a      	str	r2, [r3, #0]
          break;
 8005140:	e006      	b.n	8005150 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	f003 0304 	and.w	r3, r3, #4
 800514c:	2b00      	cmp	r3, #0
 800514e:	d1da      	bne.n	8005106 <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 fb8b 	bl	800586c <HAL_QSPI_FifoThresholdCallback>
 8005156:	e142      	b.n	80053de <HAL_QSPI_IRQHandler+0x372>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	f003 0302 	and.w	r3, r3, #2
 800515e:	2b00      	cmp	r3, #0
 8005160:	f000 80b6 	beq.w	80052d0 <HAL_QSPI_IRQHandler+0x264>
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800516a:	2b00      	cmp	r3, #0
 800516c:	f000 80b0 	beq.w	80052d0 <HAL_QSPI_IRQHandler+0x264>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2202      	movs	r2, #2
 8005176:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8005186:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800518e:	b2db      	uxtb	r3, r3
 8005190:	2b12      	cmp	r3, #18
 8005192:	d123      	bne.n	80051dc <HAL_QSPI_IRQHandler+0x170>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0304 	and.w	r3, r3, #4
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d011      	beq.n	80051c6 <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f022 0204 	bic.w	r2, r2, #4
 80051b0:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f022 0201 	bic.w	r2, r2, #1
 80051c4:	601a      	str	r2, [r3, #0]
      }

      /* Clear Busy bit */
      HAL_QSPI_Abort_IT(hqspi);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 fbdc 	bl	8005984 <HAL_QSPI_Abort_IT>

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 fb3f 	bl	8005858 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80051da:	e0fd      	b.n	80053d8 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	2b22      	cmp	r3, #34	; 0x22
 80051e6:	d146      	bne.n	8005276 <HAL_QSPI_IRQHandler+0x20a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0304 	and.w	r3, r3, #4
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d012      	beq.n	800521c <HAL_QSPI_IRQHandler+0x1b0>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f022 0204 	bic.w	r2, r2, #4
 8005204:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f022 0201 	bic.w	r2, r2, #1
 8005218:	601a      	str	r2, [r3, #0]
 800521a:	e021      	b.n	8005260 <HAL_QSPI_IRQHandler+0x1f4>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	3320      	adds	r3, #32
 8005222:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8005224:	e013      	b.n	800524e <HAL_QSPI_IRQHandler+0x1e2>
        {
          if (hqspi->RxXferCount > 0U)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800522a:	2b00      	cmp	r3, #0
 800522c:	d017      	beq.n	800525e <HAL_QSPI_IRQHandler+0x1f2>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	7812      	ldrb	r2, [r2, #0]
 8005236:	b2d2      	uxtb	r2, r2
 8005238:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800523e:	1c5a      	adds	r2, r3, #1
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005248:	1e5a      	subs	r2, r3, #1
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8005258:	2b00      	cmp	r3, #0
 800525a:	d1e4      	bne.n	8005226 <HAL_QSPI_IRQHandler+0x1ba>
 800525c:	e000      	b.n	8005260 <HAL_QSPI_IRQHandler+0x1f4>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 800525e:	bf00      	nop
          }
        }
      }

      /* Workaround - Extra data written in the FIFO at the end of a read transfer */
      HAL_QSPI_Abort_IT(hqspi);
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f000 fb8f 	bl	8005984 <HAL_QSPI_Abort_IT>

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2201      	movs	r2, #1
 800526a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 fae8 	bl	8005844 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8005274:	e0b0      	b.n	80053d8 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800527c:	b2db      	uxtb	r3, r3
 800527e:	2b02      	cmp	r3, #2
 8005280:	d107      	bne.n	8005292 <HAL_QSPI_IRQHandler+0x226>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2201      	movs	r2, #1
 8005286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 fad0 	bl	8005830 <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8005290:	e0a2      	b.n	80053d8 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005298:	b2db      	uxtb	r3, r3
 800529a:	2b08      	cmp	r3, #8
 800529c:	f040 809c 	bne.w	80053d8 <HAL_QSPI_IRQHandler+0x36c>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	695a      	ldr	r2, [r3, #20]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80052ae:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d103      	bne.n	80052c8 <HAL_QSPI_IRQHandler+0x25c>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f000 faab 	bl	800581c <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80052c6:	e087      	b.n	80053d8 <HAL_QSPI_IRQHandler+0x36c>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 fa9d 	bl	8005808 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80052ce:	e083      	b.n	80053d8 <HAL_QSPI_IRQHandler+0x36c>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	f003 0308 	and.w	r3, r3, #8
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d01f      	beq.n	800531a <HAL_QSPI_IRQHandler+0x2ae>
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d01a      	beq.n	800531a <HAL_QSPI_IRQHandler+0x2ae>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	2208      	movs	r2, #8
 80052ea:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d00b      	beq.n	8005312 <HAL_QSPI_IRQHandler+0x2a6>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8005308:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2201      	movs	r2, #1
 800530e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 fab4 	bl	8005880 <HAL_QSPI_StatusMatchCallback>
 8005318:	e061      	b.n	80053de <HAL_QSPI_IRQHandler+0x372>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	f003 0301 	and.w	r3, r3, #1
 8005320:	2b00      	cmp	r3, #0
 8005322:	d047      	beq.n	80053b4 <HAL_QSPI_IRQHandler+0x348>
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d042      	beq.n	80053b4 <HAL_QSPI_IRQHandler+0x348>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2201      	movs	r2, #1
 8005334:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8005344:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800534a:	f043 0202 	orr.w	r2, r3, #2
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0304 	and.w	r3, r3, #4
 800535c:	2b00      	cmp	r3, #0
 800535e:	d021      	beq.n	80053a4 <HAL_QSPI_IRQHandler+0x338>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f022 0204 	bic.w	r2, r2, #4
 800536e:	601a      	str	r2, [r3, #0]

      /* Disable the DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005374:	4a1c      	ldr	r2, [pc, #112]	; (80053e8 <HAL_QSPI_IRQHandler+0x37c>)
 8005376:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800537c:	4618      	mov	r0, r3
 800537e:	f7ff f9bf 	bl	8004700 <HAL_DMA_Abort_IT>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d029      	beq.n	80053dc <HAL_QSPI_IRQHandler+0x370>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800538c:	f043 0204 	orr.w	r2, r3, #4
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f000 fa33 	bl	8005808 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80053a2:	e01b      	b.n	80053dc <HAL_QSPI_IRQHandler+0x370>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 fa2b 	bl	8005808 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80053b2:	e013      	b.n	80053dc <HAL_QSPI_IRQHandler+0x370>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	f003 0310 	and.w	r3, r3, #16
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00f      	beq.n	80053de <HAL_QSPI_IRQHandler+0x372>
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d00a      	beq.n	80053de <HAL_QSPI_IRQHandler+0x372>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2210      	movs	r2, #16
 80053ce:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 fa5f 	bl	8005894 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 80053d6:	e002      	b.n	80053de <HAL_QSPI_IRQHandler+0x372>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80053d8:	bf00      	nop
 80053da:	e000      	b.n	80053de <HAL_QSPI_IRQHandler+0x372>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80053dc:	bf00      	nop
}
 80053de:	bf00      	nop
 80053e0:	3718      	adds	r7, #24
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	08005a59 	.word	0x08005a59

080053ec <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b088      	sub	sp, #32
 80053f0:	af02      	add	r7, sp, #8
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80053f8:	f7fe f96e 	bl	80036d8 <HAL_GetTick>
 80053fc:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005404:	b2db      	uxtb	r3, r3
 8005406:	2b01      	cmp	r3, #1
 8005408:	d101      	bne.n	800540e <HAL_QSPI_Command+0x22>
 800540a:	2302      	movs	r3, #2
 800540c:	e048      	b.n	80054a0 <HAL_QSPI_Command+0xb4>
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2201      	movs	r2, #1
 8005412:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800541c:	b2db      	uxtb	r3, r3
 800541e:	2b01      	cmp	r3, #1
 8005420:	d137      	bne.n	8005492 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2202      	movs	r2, #2
 800542c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	9300      	str	r3, [sp, #0]
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	2200      	movs	r2, #0
 8005438:	2120      	movs	r1, #32
 800543a:	68f8      	ldr	r0, [r7, #12]
 800543c:	f000 fb3f 	bl	8005abe <QSPI_WaitFlagStateUntilTimeout>
 8005440:	4603      	mov	r3, r0
 8005442:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8005444:	7dfb      	ldrb	r3, [r7, #23]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d125      	bne.n	8005496 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800544a:	2200      	movs	r2, #0
 800544c:	68b9      	ldr	r1, [r7, #8]
 800544e:	68f8      	ldr	r0, [r7, #12]
 8005450:	f000 fb6c 	bl	8005b2c <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005458:	2b00      	cmp	r3, #0
 800545a:	d115      	bne.n	8005488 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	9300      	str	r3, [sp, #0]
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	2201      	movs	r2, #1
 8005464:	2102      	movs	r1, #2
 8005466:	68f8      	ldr	r0, [r7, #12]
 8005468:	f000 fb29 	bl	8005abe <QSPI_WaitFlagStateUntilTimeout>
 800546c:	4603      	mov	r3, r0
 800546e:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8005470:	7dfb      	ldrb	r3, [r7, #23]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d10f      	bne.n	8005496 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2202      	movs	r2, #2
 800547c:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2201      	movs	r2, #1
 8005482:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005486:	e006      	b.n	8005496 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005490:	e001      	b.n	8005496 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8005492:	2302      	movs	r3, #2
 8005494:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800549e:	7dfb      	ldrb	r3, [r7, #23]
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3718      	adds	r7, #24
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b08a      	sub	sp, #40	; 0x28
 80054ac:	af02      	add	r7, sp, #8
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054b4:	2300      	movs	r3, #0
 80054b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80054b8:	f7fe f90e 	bl	80036d8 <HAL_GetTick>
 80054bc:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	3320      	adds	r3, #32
 80054c4:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d101      	bne.n	80054d6 <HAL_QSPI_Transmit+0x2e>
 80054d2:	2302      	movs	r3, #2
 80054d4:	e07b      	b.n	80055ce <HAL_QSPI_Transmit+0x126>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2201      	movs	r2, #1
 80054da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d16a      	bne.n	80055c0 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2200      	movs	r2, #0
 80054ee:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d05b      	beq.n	80055ae <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2212      	movs	r2, #18
 80054fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	691b      	ldr	r3, [r3, #16]
 8005504:	1c5a      	adds	r2, r3, #1
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	691b      	ldr	r3, [r3, #16]
 8005510:	1c5a      	adds	r2, r3, #1
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	68ba      	ldr	r2, [r7, #8]
 800551a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	695a      	ldr	r2, [r3, #20]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800552a:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800552c:	e01b      	b.n	8005566 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	9300      	str	r3, [sp, #0]
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	2201      	movs	r2, #1
 8005536:	2104      	movs	r1, #4
 8005538:	68f8      	ldr	r0, [r7, #12]
 800553a:	f000 fac0 	bl	8005abe <QSPI_WaitFlagStateUntilTimeout>
 800553e:	4603      	mov	r3, r0
 8005540:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8005542:	7ffb      	ldrb	r3, [r7, #31]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d113      	bne.n	8005570 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554c:	781a      	ldrb	r2, [r3, #0]
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005556:	1c5a      	adds	r2, r3, #1
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005560:	1e5a      	subs	r2, r3, #1
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800556a:	2b00      	cmp	r3, #0
 800556c:	d1df      	bne.n	800552e <HAL_QSPI_Transmit+0x86>
 800556e:	e000      	b.n	8005572 <HAL_QSPI_Transmit+0xca>
          break;
 8005570:	bf00      	nop
      }

      if (status == HAL_OK)
 8005572:	7ffb      	ldrb	r3, [r7, #31]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d115      	bne.n	80055a4 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	9300      	str	r3, [sp, #0]
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	2201      	movs	r2, #1
 8005580:	2102      	movs	r1, #2
 8005582:	68f8      	ldr	r0, [r7, #12]
 8005584:	f000 fa9b 	bl	8005abe <QSPI_WaitFlagStateUntilTimeout>
 8005588:	4603      	mov	r3, r0
 800558a:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800558c:	7ffb      	ldrb	r3, [r7, #31]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d108      	bne.n	80055a4 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	2202      	movs	r2, #2
 8005598:	60da      	str	r2, [r3, #12]

          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 800559a:	68f8      	ldr	r0, [r7, #12]
 800559c:	f000 f984 	bl	80058a8 <HAL_QSPI_Abort>
 80055a0:	4603      	mov	r3, r0
 80055a2:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80055ac:	e00a      	b.n	80055c4 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055b2:	f043 0208 	orr.w	r2, r3, #8
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	77fb      	strb	r3, [r7, #31]
 80055be:	e001      	b.n	80055c4 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 80055c0:	2302      	movs	r3, #2
 80055c2:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 80055cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3720      	adds	r7, #32
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80055d6:	b580      	push	{r7, lr}
 80055d8:	b08a      	sub	sp, #40	; 0x28
 80055da:	af02      	add	r7, sp, #8
 80055dc:	60f8      	str	r0, [r7, #12]
 80055de:	60b9      	str	r1, [r7, #8]
 80055e0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055e2:	2300      	movs	r3, #0
 80055e4:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80055e6:	f7fe f877 	bl	80036d8 <HAL_GetTick>
 80055ea:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	699b      	ldr	r3, [r3, #24]
 80055f2:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	3320      	adds	r3, #32
 80055fa:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005602:	b2db      	uxtb	r3, r3
 8005604:	2b01      	cmp	r3, #1
 8005606:	d101      	bne.n	800560c <HAL_QSPI_Receive+0x36>
 8005608:	2302      	movs	r3, #2
 800560a:	e082      	b.n	8005712 <HAL_QSPI_Receive+0x13c>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800561a:	b2db      	uxtb	r3, r3
 800561c:	2b01      	cmp	r3, #1
 800561e:	d171      	bne.n	8005704 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2200      	movs	r2, #0
 8005624:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d062      	beq.n	80056f2 <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2222      	movs	r2, #34	; 0x22
 8005630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	1c5a      	adds	r2, r3, #1
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	1c5a      	adds	r2, r3, #1
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	68ba      	ldr	r2, [r7, #8]
 8005650:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	695b      	ldr	r3, [r3, #20]
 8005658:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005664:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	697a      	ldr	r2, [r7, #20]
 800566c:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800566e:	e01c      	b.n	80056aa <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	9300      	str	r3, [sp, #0]
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	2201      	movs	r2, #1
 8005678:	2106      	movs	r1, #6
 800567a:	68f8      	ldr	r0, [r7, #12]
 800567c:	f000 fa1f 	bl	8005abe <QSPI_WaitFlagStateUntilTimeout>
 8005680:	4603      	mov	r3, r0
 8005682:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8005684:	7ffb      	ldrb	r3, [r7, #31]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d114      	bne.n	80056b4 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800568e:	693a      	ldr	r2, [r7, #16]
 8005690:	7812      	ldrb	r2, [r2, #0]
 8005692:	b2d2      	uxtb	r2, r2
 8005694:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800569a:	1c5a      	adds	r2, r3, #1
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a4:	1e5a      	subs	r2, r3, #1
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d1de      	bne.n	8005670 <HAL_QSPI_Receive+0x9a>
 80056b2:	e000      	b.n	80056b6 <HAL_QSPI_Receive+0xe0>
          break;
 80056b4:	bf00      	nop
      }

      if (status == HAL_OK)
 80056b6:	7ffb      	ldrb	r3, [r7, #31]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d115      	bne.n	80056e8 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	9300      	str	r3, [sp, #0]
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	2201      	movs	r2, #1
 80056c4:	2102      	movs	r1, #2
 80056c6:	68f8      	ldr	r0, [r7, #12]
 80056c8:	f000 f9f9 	bl	8005abe <QSPI_WaitFlagStateUntilTimeout>
 80056cc:	4603      	mov	r3, r0
 80056ce:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 80056d0:	7ffb      	ldrb	r3, [r7, #31]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d108      	bne.n	80056e8 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2202      	movs	r2, #2
 80056dc:	60da      	str	r2, [r3, #12]

          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	f000 f8e2 	bl	80058a8 <HAL_QSPI_Abort>
 80056e4:	4603      	mov	r3, r0
 80056e6:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80056f0:	e00a      	b.n	8005708 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056f6:	f043 0208 	orr.w	r2, r3, #8
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	77fb      	strb	r3, [r7, #31]
 8005702:	e001      	b.n	8005708 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 8005704:	2302      	movs	r3, #2
 8005706:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2200      	movs	r2, #0
 800570c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8005710:	7ffb      	ldrb	r3, [r7, #31]
}
 8005712:	4618      	mov	r0, r3
 8005714:	3720      	adds	r7, #32
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}

0800571a <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800571a:	b580      	push	{r7, lr}
 800571c:	b088      	sub	sp, #32
 800571e:	af02      	add	r7, sp, #8
 8005720:	60f8      	str	r0, [r7, #12]
 8005722:	60b9      	str	r1, [r7, #8]
 8005724:	607a      	str	r2, [r7, #4]
 8005726:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005728:	f7fd ffd6 	bl	80036d8 <HAL_GetTick>
 800572c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005734:	b2db      	uxtb	r3, r3
 8005736:	2b01      	cmp	r3, #1
 8005738:	d101      	bne.n	800573e <HAL_QSPI_AutoPolling+0x24>
 800573a:	2302      	movs	r3, #2
 800573c:	e060      	b.n	8005800 <HAL_QSPI_AutoPolling+0xe6>
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2201      	movs	r2, #1
 8005742:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800574c:	b2db      	uxtb	r3, r3
 800574e:	2b01      	cmp	r3, #1
 8005750:	d14f      	bne.n	80057f2 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2200      	movs	r2, #0
 8005756:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2242      	movs	r2, #66	; 0x42
 800575c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	9300      	str	r3, [sp, #0]
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	2200      	movs	r2, #0
 8005768:	2120      	movs	r1, #32
 800576a:	68f8      	ldr	r0, [r7, #12]
 800576c:	f000 f9a7 	bl	8005abe <QSPI_WaitFlagStateUntilTimeout>
 8005770:	4603      	mov	r3, r0
 8005772:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8005774:	7dfb      	ldrb	r3, [r7, #23]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d13d      	bne.n	80057f6 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	6812      	ldr	r2, [r2, #0]
 8005782:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	6852      	ldr	r2, [r2, #4]
 800578c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	6892      	ldr	r2, [r2, #8]
 8005796:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	691b      	ldr	r3, [r3, #16]
 80057a6:	431a      	orrs	r2, r3
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80057b0:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	68da      	ldr	r2, [r3, #12]
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80057ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80057be:	68b9      	ldr	r1, [r7, #8]
 80057c0:	68f8      	ldr	r0, [r7, #12]
 80057c2:	f000 f9b3 	bl	8005b2c <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	9300      	str	r3, [sp, #0]
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	2201      	movs	r2, #1
 80057ce:	2108      	movs	r1, #8
 80057d0:	68f8      	ldr	r0, [r7, #12]
 80057d2:	f000 f974 	bl	8005abe <QSPI_WaitFlagStateUntilTimeout>
 80057d6:	4603      	mov	r3, r0
 80057d8:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 80057da:	7dfb      	ldrb	r3, [r7, #23]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d10a      	bne.n	80057f6 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2208      	movs	r2, #8
 80057e6:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057f0:	e001      	b.n	80057f6 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80057f2:	2302      	movs	r3, #2
 80057f4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80057fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005800:	4618      	mov	r0, r3
 8005802:	3718      	adds	r7, #24
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 8005810:	bf00      	nop
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 8005824:	bf00      	nop
 8005826:	370c      	adds	r7, #12
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 8005838:	bf00      	nop
 800583a:	370c      	adds	r7, #12
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 800584c:	bf00      	nop
 800584e:	370c      	adds	r7, #12
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 8005860:	bf00      	nop
 8005862:	370c      	adds	r7, #12
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 8005874:	bf00      	nop
 8005876:	370c      	adds	r7, #12
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 8005888:	bf00      	nop
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 800589c:	bf00      	nop
 800589e:	370c      	adds	r7, #12
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b086      	sub	sp, #24
 80058ac:	af02      	add	r7, sp, #8
 80058ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058b0:	2300      	movs	r3, #0
 80058b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80058b4:	f7fd ff10 	bl	80036d8 <HAL_GetTick>
 80058b8:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	f003 0302 	and.w	r3, r3, #2
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d056      	beq.n	8005978 <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0304 	and.w	r3, r3, #4
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d017      	beq.n	8005910 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f022 0204 	bic.w	r2, r2, #4
 80058ee:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058f4:	4618      	mov	r0, r3
 80058f6:	f7fe fe93 	bl	8004620 <HAL_DMA_Abort>
 80058fa:	4603      	mov	r3, r0
 80058fc:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 80058fe:	7bfb      	ldrb	r3, [r7, #15]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d005      	beq.n	8005910 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005908:	f043 0204 	orr.w	r2, r3, #4
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f042 0202 	orr.w	r2, r2, #2
 800591e:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005924:	9300      	str	r3, [sp, #0]
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	2201      	movs	r2, #1
 800592a:	2102      	movs	r1, #2
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 f8c6 	bl	8005abe <QSPI_WaitFlagStateUntilTimeout>
 8005932:	4603      	mov	r3, r0
 8005934:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005936:	7bfb      	ldrb	r3, [r7, #15]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d10e      	bne.n	800595a <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2202      	movs	r2, #2
 8005942:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005948:	9300      	str	r3, [sp, #0]
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	2200      	movs	r2, #0
 800594e:	2120      	movs	r1, #32
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f000 f8b4 	bl	8005abe <QSPI_WaitFlagStateUntilTimeout>
 8005956:	4603      	mov	r3, r0
 8005958:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800595a:	7bfb      	ldrb	r3, [r7, #15]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d10b      	bne.n	8005978 <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	695a      	ldr	r2, [r3, #20]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800596e:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
  }

  return status;
 8005978:	7bfb      	ldrb	r3, [r7, #15]
}
 800597a:	4618      	mov	r0, r3
 800597c:	3710      	adds	r7, #16
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
	...

08005984 <HAL_QSPI_Abort_IT>:
* @brief  Abort the current transmission (non-blocking function)
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort_IT(QSPI_HandleTypeDef *hqspi)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800598c:	2300      	movs	r3, #0
 800598e:	73fb      	strb	r3, [r7, #15]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005996:	b2db      	uxtb	r3, r3
 8005998:	f003 0302 	and.w	r3, r3, #2
 800599c:	2b00      	cmp	r3, #0
 800599e:	d046      	beq.n	8005a2e <HAL_QSPI_Abort_IT+0xaa>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_ABORT;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2208      	movs	r2, #8
 80059ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable all interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_TO | QSPI_IT_SM | QSPI_IT_FT | QSPI_IT_TC | QSPI_IT_TE));
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80059be:	601a      	str	r2, [r3, #0]

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 0304 	and.w	r3, r3, #4
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d01b      	beq.n	8005a06 <HAL_QSPI_Abort_IT+0x82>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f022 0204 	bic.w	r2, r2, #4
 80059dc:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059e2:	4a15      	ldr	r2, [pc, #84]	; (8005a38 <HAL_QSPI_Abort_IT+0xb4>)
 80059e4:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ea:	4618      	mov	r0, r3
 80059ec:	f7fe fe88 	bl	8004700 <HAL_DMA_Abort_IT>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d01b      	beq.n	8005a2e <HAL_QSPI_Abort_IT+0xaa>
      {
        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2201      	movs	r2, #1
 80059fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f7ff ff0c 	bl	800581c <HAL_QSPI_AbortCpltCallback>
 8005a04:	e013      	b.n	8005a2e <HAL_QSPI_Abort_IT+0xaa>
      }
    }
    else
    {
      /* Clear interrupt */
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2202      	movs	r2, #2
 8005a0c:	60da      	str	r2, [r3, #12]

      /* Enable the QSPI Transfer Complete Interrupt */
      __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005a1c:	601a      	str	r2, [r3, #0]

      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f042 0202 	orr.w	r2, r2, #2
 8005a2c:	601a      	str	r2, [r3, #0]
    }
  }
  return status;
 8005a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3710      	adds	r7, #16
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	08005a59 	.word	0x08005a59

08005a3c <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	683a      	ldr	r2, [r7, #0]
 8005a4a:	649a      	str	r2, [r3, #72]	; 0x48
}
 8005a4c:	bf00      	nop
 8005a4e:	370c      	adds	r7, #12
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <QSPI_DMAAbortCplt>:
  * @brief  DMA QSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a64:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	2b08      	cmp	r3, #8
 8005a7c:	d114      	bne.n	8005aa8 <QSPI_DMAAbortCplt+0x50>
  {
    /* DMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2202      	movs	r2, #2
 8005a84:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005a94:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f042 0202 	orr.w	r2, r2, #2
 8005aa4:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 8005aa6:	e006      	b.n	8005ab6 <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 8005ab0:	68f8      	ldr	r0, [r7, #12]
 8005ab2:	f7ff fea9 	bl	8005808 <HAL_QSPI_ErrorCallback>
}
 8005ab6:	bf00      	nop
 8005ab8:	3710      	adds	r7, #16
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}

08005abe <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005abe:	b580      	push	{r7, lr}
 8005ac0:	b084      	sub	sp, #16
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	60f8      	str	r0, [r7, #12]
 8005ac6:	60b9      	str	r1, [r7, #8]
 8005ac8:	603b      	str	r3, [r7, #0]
 8005aca:	4613      	mov	r3, r2
 8005acc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005ace:	e01a      	b.n	8005b06 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ad6:	d016      	beq.n	8005b06 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ad8:	f7fd fdfe 	bl	80036d8 <HAL_GetTick>
 8005adc:	4602      	mov	r2, r0
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	69ba      	ldr	r2, [r7, #24]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d302      	bcc.n	8005aee <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d10b      	bne.n	8005b06 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2204      	movs	r2, #4
 8005af2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005afa:	f043 0201 	orr.w	r2, r3, #1
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e00e      	b.n	8005b24 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	689a      	ldr	r2, [r3, #8]
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	4013      	ands	r3, r2
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	bf14      	ite	ne
 8005b14:	2301      	movne	r3, #1
 8005b16:	2300      	moveq	r3, #0
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	79fb      	ldrb	r3, [r7, #7]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d1d6      	bne.n	8005ad0 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b22:	2300      	movs	r3, #0
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3710      	adds	r7, #16
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b085      	sub	sp, #20
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d009      	beq.n	8005b54 <QSPI_Config+0x28>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005b46:	d005      	beq.n	8005b54 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	3a01      	subs	r2, #1
 8005b52:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	699b      	ldr	r3, [r3, #24]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	f000 80b9 	beq.w	8005cd0 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	6a1b      	ldr	r3, [r3, #32]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d05f      	beq.n	8005c26 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	68ba      	ldr	r2, [r7, #8]
 8005b6c:	6892      	ldr	r2, [r2, #8]
 8005b6e:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	69db      	ldr	r3, [r3, #28]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d031      	beq.n	8005bdc <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b80:	431a      	orrs	r2, r3
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b86:	431a      	orrs	r2, r3
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8c:	431a      	orrs	r2, r3
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	695b      	ldr	r3, [r3, #20]
 8005b92:	049b      	lsls	r3, r3, #18
 8005b94:	431a      	orrs	r2, r3
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	431a      	orrs	r2, r3
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	6a1b      	ldr	r3, [r3, #32]
 8005ba0:	431a      	orrs	r2, r3
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	431a      	orrs	r2, r3
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	69db      	ldr	r3, [r3, #28]
 8005bac:	431a      	orrs	r2, r3
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	699b      	ldr	r3, [r3, #24]
 8005bb2:	431a      	orrs	r2, r3
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	ea42 0103 	orr.w	r1, r2, r3
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	430a      	orrs	r2, r1
 8005bc4:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005bcc:	f000 812e 	beq.w	8005e2c <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68ba      	ldr	r2, [r7, #8]
 8005bd6:	6852      	ldr	r2, [r2, #4]
 8005bd8:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8005bda:	e127      	b.n	8005e2c <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be4:	431a      	orrs	r2, r3
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bea:	431a      	orrs	r2, r3
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf0:	431a      	orrs	r2, r3
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	695b      	ldr	r3, [r3, #20]
 8005bf6:	049b      	lsls	r3, r3, #18
 8005bf8:	431a      	orrs	r2, r3
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	431a      	orrs	r2, r3
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	6a1b      	ldr	r3, [r3, #32]
 8005c04:	431a      	orrs	r2, r3
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	69db      	ldr	r3, [r3, #28]
 8005c0a:	431a      	orrs	r2, r3
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	699b      	ldr	r3, [r3, #24]
 8005c10:	431a      	orrs	r2, r3
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	ea42 0103 	orr.w	r1, r2, r3
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	430a      	orrs	r2, r1
 8005c22:	615a      	str	r2, [r3, #20]
}
 8005c24:	e102      	b.n	8005e2c <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	69db      	ldr	r3, [r3, #28]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d02e      	beq.n	8005c8c <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c36:	431a      	orrs	r2, r3
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c3c:	431a      	orrs	r2, r3
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c42:	431a      	orrs	r2, r3
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	695b      	ldr	r3, [r3, #20]
 8005c48:	049b      	lsls	r3, r3, #18
 8005c4a:	431a      	orrs	r2, r3
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	6a1b      	ldr	r3, [r3, #32]
 8005c50:	431a      	orrs	r2, r3
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	431a      	orrs	r2, r3
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	69db      	ldr	r3, [r3, #28]
 8005c5c:	431a      	orrs	r2, r3
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	699b      	ldr	r3, [r3, #24]
 8005c62:	431a      	orrs	r2, r3
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	ea42 0103 	orr.w	r1, r2, r3
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	430a      	orrs	r2, r1
 8005c74:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005c7c:	f000 80d6 	beq.w	8005e2c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68ba      	ldr	r2, [r7, #8]
 8005c86:	6852      	ldr	r2, [r2, #4]
 8005c88:	619a      	str	r2, [r3, #24]
}
 8005c8a:	e0cf      	b.n	8005e2c <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c94:	431a      	orrs	r2, r3
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c9a:	431a      	orrs	r2, r3
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca0:	431a      	orrs	r2, r3
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	695b      	ldr	r3, [r3, #20]
 8005ca6:	049b      	lsls	r3, r3, #18
 8005ca8:	431a      	orrs	r2, r3
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	6a1b      	ldr	r3, [r3, #32]
 8005cae:	431a      	orrs	r2, r3
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	69db      	ldr	r3, [r3, #28]
 8005cb4:	431a      	orrs	r2, r3
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	699b      	ldr	r3, [r3, #24]
 8005cba:	431a      	orrs	r2, r3
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	ea42 0103 	orr.w	r1, r2, r3
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	430a      	orrs	r2, r1
 8005ccc:	615a      	str	r2, [r3, #20]
}
 8005cce:	e0ad      	b.n	8005e2c <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	6a1b      	ldr	r3, [r3, #32]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d058      	beq.n	8005d8a <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68ba      	ldr	r2, [r7, #8]
 8005cde:	6892      	ldr	r2, [r2, #8]
 8005ce0:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	69db      	ldr	r3, [r3, #28]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d02d      	beq.n	8005d46 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf2:	431a      	orrs	r2, r3
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cf8:	431a      	orrs	r2, r3
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfe:	431a      	orrs	r2, r3
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	695b      	ldr	r3, [r3, #20]
 8005d04:	049b      	lsls	r3, r3, #18
 8005d06:	431a      	orrs	r2, r3
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	431a      	orrs	r2, r3
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	6a1b      	ldr	r3, [r3, #32]
 8005d12:	431a      	orrs	r2, r3
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	431a      	orrs	r2, r3
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	69db      	ldr	r3, [r3, #28]
 8005d1e:	431a      	orrs	r2, r3
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	699b      	ldr	r3, [r3, #24]
 8005d24:	ea42 0103 	orr.w	r1, r2, r3
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	430a      	orrs	r2, r1
 8005d30:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005d38:	d078      	beq.n	8005e2c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	68ba      	ldr	r2, [r7, #8]
 8005d40:	6852      	ldr	r2, [r2, #4]
 8005d42:	619a      	str	r2, [r3, #24]
}
 8005d44:	e072      	b.n	8005e2c <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d4e:	431a      	orrs	r2, r3
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d54:	431a      	orrs	r2, r3
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5a:	431a      	orrs	r2, r3
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	695b      	ldr	r3, [r3, #20]
 8005d60:	049b      	lsls	r3, r3, #18
 8005d62:	431a      	orrs	r2, r3
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	431a      	orrs	r2, r3
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	6a1b      	ldr	r3, [r3, #32]
 8005d6e:	431a      	orrs	r2, r3
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	69db      	ldr	r3, [r3, #28]
 8005d74:	431a      	orrs	r2, r3
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	699b      	ldr	r3, [r3, #24]
 8005d7a:	ea42 0103 	orr.w	r1, r2, r3
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	430a      	orrs	r2, r1
 8005d86:	615a      	str	r2, [r3, #20]
}
 8005d88:	e050      	b.n	8005e2c <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	69db      	ldr	r3, [r3, #28]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d02a      	beq.n	8005de8 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d9a:	431a      	orrs	r2, r3
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005da0:	431a      	orrs	r2, r3
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da6:	431a      	orrs	r2, r3
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	695b      	ldr	r3, [r3, #20]
 8005dac:	049b      	lsls	r3, r3, #18
 8005dae:	431a      	orrs	r2, r3
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	6a1b      	ldr	r3, [r3, #32]
 8005db4:	431a      	orrs	r2, r3
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	431a      	orrs	r2, r3
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	69db      	ldr	r3, [r3, #28]
 8005dc0:	431a      	orrs	r2, r3
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	699b      	ldr	r3, [r3, #24]
 8005dc6:	ea42 0103 	orr.w	r1, r2, r3
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	430a      	orrs	r2, r1
 8005dd2:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005dda:	d027      	beq.n	8005e2c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68ba      	ldr	r2, [r7, #8]
 8005de2:	6852      	ldr	r2, [r2, #4]
 8005de4:	619a      	str	r2, [r3, #24]
}
 8005de6:	e021      	b.n	8005e2c <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d01d      	beq.n	8005e2c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df8:	431a      	orrs	r2, r3
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dfe:	431a      	orrs	r2, r3
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e04:	431a      	orrs	r2, r3
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	695b      	ldr	r3, [r3, #20]
 8005e0a:	049b      	lsls	r3, r3, #18
 8005e0c:	431a      	orrs	r2, r3
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	6a1b      	ldr	r3, [r3, #32]
 8005e12:	431a      	orrs	r2, r3
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	69db      	ldr	r3, [r3, #28]
 8005e18:	431a      	orrs	r2, r3
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	ea42 0103 	orr.w	r1, r2, r3
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	430a      	orrs	r2, r1
 8005e2a:	615a      	str	r2, [r3, #20]
}
 8005e2c:	bf00      	nop
 8005e2e:	3714      	adds	r7, #20
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d101      	bne.n	8005e4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e0cc      	b.n	8005fe6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e4c:	4b68      	ldr	r3, [pc, #416]	; (8005ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 030f 	and.w	r3, r3, #15
 8005e54:	683a      	ldr	r2, [r7, #0]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d90c      	bls.n	8005e74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e5a:	4b65      	ldr	r3, [pc, #404]	; (8005ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e5c:	683a      	ldr	r2, [r7, #0]
 8005e5e:	b2d2      	uxtb	r2, r2
 8005e60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e62:	4b63      	ldr	r3, [pc, #396]	; (8005ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 030f 	and.w	r3, r3, #15
 8005e6a:	683a      	ldr	r2, [r7, #0]
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d001      	beq.n	8005e74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e0b8      	b.n	8005fe6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f003 0302 	and.w	r3, r3, #2
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d020      	beq.n	8005ec2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 0304 	and.w	r3, r3, #4
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d005      	beq.n	8005e98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e8c:	4b59      	ldr	r3, [pc, #356]	; (8005ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	4a58      	ldr	r2, [pc, #352]	; (8005ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005e96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 0308 	and.w	r3, r3, #8
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d005      	beq.n	8005eb0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ea4:	4b53      	ldr	r3, [pc, #332]	; (8005ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	4a52      	ldr	r2, [pc, #328]	; (8005ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8005eaa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005eae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005eb0:	4b50      	ldr	r3, [pc, #320]	; (8005ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	494d      	ldr	r1, [pc, #308]	; (8005ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 0301 	and.w	r3, r3, #1
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d044      	beq.n	8005f58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d107      	bne.n	8005ee6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ed6:	4b47      	ldr	r3, [pc, #284]	; (8005ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d119      	bne.n	8005f16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e07f      	b.n	8005fe6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	d003      	beq.n	8005ef6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ef2:	2b03      	cmp	r3, #3
 8005ef4:	d107      	bne.n	8005f06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ef6:	4b3f      	ldr	r3, [pc, #252]	; (8005ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d109      	bne.n	8005f16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e06f      	b.n	8005fe6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f06:	4b3b      	ldr	r3, [pc, #236]	; (8005ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f003 0302 	and.w	r3, r3, #2
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d101      	bne.n	8005f16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e067      	b.n	8005fe6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f16:	4b37      	ldr	r3, [pc, #220]	; (8005ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	f023 0203 	bic.w	r2, r3, #3
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	4934      	ldr	r1, [pc, #208]	; (8005ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f24:	4313      	orrs	r3, r2
 8005f26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f28:	f7fd fbd6 	bl	80036d8 <HAL_GetTick>
 8005f2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f2e:	e00a      	b.n	8005f46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f30:	f7fd fbd2 	bl	80036d8 <HAL_GetTick>
 8005f34:	4602      	mov	r2, r0
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	1ad3      	subs	r3, r2, r3
 8005f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d901      	bls.n	8005f46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f42:	2303      	movs	r3, #3
 8005f44:	e04f      	b.n	8005fe6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f46:	4b2b      	ldr	r3, [pc, #172]	; (8005ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	f003 020c 	and.w	r2, r3, #12
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d1eb      	bne.n	8005f30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f58:	4b25      	ldr	r3, [pc, #148]	; (8005ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 030f 	and.w	r3, r3, #15
 8005f60:	683a      	ldr	r2, [r7, #0]
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d20c      	bcs.n	8005f80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f66:	4b22      	ldr	r3, [pc, #136]	; (8005ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8005f68:	683a      	ldr	r2, [r7, #0]
 8005f6a:	b2d2      	uxtb	r2, r2
 8005f6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f6e:	4b20      	ldr	r3, [pc, #128]	; (8005ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 030f 	and.w	r3, r3, #15
 8005f76:	683a      	ldr	r2, [r7, #0]
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d001      	beq.n	8005f80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e032      	b.n	8005fe6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 0304 	and.w	r3, r3, #4
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d008      	beq.n	8005f9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f8c:	4b19      	ldr	r3, [pc, #100]	; (8005ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	4916      	ldr	r1, [pc, #88]	; (8005ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 0308 	and.w	r3, r3, #8
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d009      	beq.n	8005fbe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005faa:	4b12      	ldr	r3, [pc, #72]	; (8005ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	00db      	lsls	r3, r3, #3
 8005fb8:	490e      	ldr	r1, [pc, #56]	; (8005ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005fbe:	f000 f887 	bl	80060d0 <HAL_RCC_GetSysClockFreq>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	4b0b      	ldr	r3, [pc, #44]	; (8005ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	091b      	lsrs	r3, r3, #4
 8005fca:	f003 030f 	and.w	r3, r3, #15
 8005fce:	490a      	ldr	r1, [pc, #40]	; (8005ff8 <HAL_RCC_ClockConfig+0x1c0>)
 8005fd0:	5ccb      	ldrb	r3, [r1, r3]
 8005fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8005fd6:	4a09      	ldr	r2, [pc, #36]	; (8005ffc <HAL_RCC_ClockConfig+0x1c4>)
 8005fd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005fda:	4b09      	ldr	r3, [pc, #36]	; (8006000 <HAL_RCC_ClockConfig+0x1c8>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f7fc fd76 	bl	8002ad0 <HAL_InitTick>

  return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3710      	adds	r7, #16
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	40023c00 	.word	0x40023c00
 8005ff4:	40023800 	.word	0x40023800
 8005ff8:	0800ad90 	.word	0x0800ad90
 8005ffc:	20000060 	.word	0x20000060
 8006000:	20000064 	.word	0x20000064

08006004 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006004:	b480      	push	{r7}
 8006006:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006008:	4b03      	ldr	r3, [pc, #12]	; (8006018 <HAL_RCC_GetHCLKFreq+0x14>)
 800600a:	681b      	ldr	r3, [r3, #0]
}
 800600c:	4618      	mov	r0, r3
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr
 8006016:	bf00      	nop
 8006018:	20000060 	.word	0x20000060

0800601c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006020:	f7ff fff0 	bl	8006004 <HAL_RCC_GetHCLKFreq>
 8006024:	4602      	mov	r2, r0
 8006026:	4b05      	ldr	r3, [pc, #20]	; (800603c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	0a9b      	lsrs	r3, r3, #10
 800602c:	f003 0307 	and.w	r3, r3, #7
 8006030:	4903      	ldr	r1, [pc, #12]	; (8006040 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006032:	5ccb      	ldrb	r3, [r1, r3]
 8006034:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006038:	4618      	mov	r0, r3
 800603a:	bd80      	pop	{r7, pc}
 800603c:	40023800 	.word	0x40023800
 8006040:	0800ada0 	.word	0x0800ada0

08006044 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006048:	f7ff ffdc 	bl	8006004 <HAL_RCC_GetHCLKFreq>
 800604c:	4602      	mov	r2, r0
 800604e:	4b05      	ldr	r3, [pc, #20]	; (8006064 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	0b5b      	lsrs	r3, r3, #13
 8006054:	f003 0307 	and.w	r3, r3, #7
 8006058:	4903      	ldr	r1, [pc, #12]	; (8006068 <HAL_RCC_GetPCLK2Freq+0x24>)
 800605a:	5ccb      	ldrb	r3, [r1, r3]
 800605c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006060:	4618      	mov	r0, r3
 8006062:	bd80      	pop	{r7, pc}
 8006064:	40023800 	.word	0x40023800
 8006068:	0800ada0 	.word	0x0800ada0

0800606c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	220f      	movs	r2, #15
 800607a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800607c:	4b12      	ldr	r3, [pc, #72]	; (80060c8 <HAL_RCC_GetClockConfig+0x5c>)
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	f003 0203 	and.w	r2, r3, #3
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006088:	4b0f      	ldr	r3, [pc, #60]	; (80060c8 <HAL_RCC_GetClockConfig+0x5c>)
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006094:	4b0c      	ldr	r3, [pc, #48]	; (80060c8 <HAL_RCC_GetClockConfig+0x5c>)
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80060a0:	4b09      	ldr	r3, [pc, #36]	; (80060c8 <HAL_RCC_GetClockConfig+0x5c>)
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	08db      	lsrs	r3, r3, #3
 80060a6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80060ae:	4b07      	ldr	r3, [pc, #28]	; (80060cc <HAL_RCC_GetClockConfig+0x60>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f003 020f 	and.w	r2, r3, #15
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	601a      	str	r2, [r3, #0]
}
 80060ba:	bf00      	nop
 80060bc:	370c      	adds	r7, #12
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
 80060c6:	bf00      	nop
 80060c8:	40023800 	.word	0x40023800
 80060cc:	40023c00 	.word	0x40023c00

080060d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80060d4:	b087      	sub	sp, #28
 80060d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80060d8:	2600      	movs	r6, #0
 80060da:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 80060dc:	2600      	movs	r6, #0
 80060de:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 80060e0:	2600      	movs	r6, #0
 80060e2:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 80060e4:	2600      	movs	r6, #0
 80060e6:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80060e8:	2600      	movs	r6, #0
 80060ea:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80060ec:	4ea3      	ldr	r6, [pc, #652]	; (800637c <HAL_RCC_GetSysClockFreq+0x2ac>)
 80060ee:	68b6      	ldr	r6, [r6, #8]
 80060f0:	f006 060c 	and.w	r6, r6, #12
 80060f4:	2e0c      	cmp	r6, #12
 80060f6:	f200 8137 	bhi.w	8006368 <HAL_RCC_GetSysClockFreq+0x298>
 80060fa:	f20f 0c08 	addw	ip, pc, #8
 80060fe:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 8006102:	bf00      	nop
 8006104:	08006139 	.word	0x08006139
 8006108:	08006369 	.word	0x08006369
 800610c:	08006369 	.word	0x08006369
 8006110:	08006369 	.word	0x08006369
 8006114:	0800613f 	.word	0x0800613f
 8006118:	08006369 	.word	0x08006369
 800611c:	08006369 	.word	0x08006369
 8006120:	08006369 	.word	0x08006369
 8006124:	08006145 	.word	0x08006145
 8006128:	08006369 	.word	0x08006369
 800612c:	08006369 	.word	0x08006369
 8006130:	08006369 	.word	0x08006369
 8006134:	0800625b 	.word	0x0800625b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006138:	4b91      	ldr	r3, [pc, #580]	; (8006380 <HAL_RCC_GetSysClockFreq+0x2b0>)
 800613a:	613b      	str	r3, [r7, #16]
       break;
 800613c:	e117      	b.n	800636e <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800613e:	4b91      	ldr	r3, [pc, #580]	; (8006384 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8006140:	613b      	str	r3, [r7, #16]
      break;
 8006142:	e114      	b.n	800636e <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006144:	4b8d      	ldr	r3, [pc, #564]	; (800637c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800614c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800614e:	4b8b      	ldr	r3, [pc, #556]	; (800637c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006156:	2b00      	cmp	r3, #0
 8006158:	d024      	beq.n	80061a4 <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800615a:	4b88      	ldr	r3, [pc, #544]	; (800637c <HAL_RCC_GetSysClockFreq+0x2ac>)
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	099b      	lsrs	r3, r3, #6
 8006160:	461a      	mov	r2, r3
 8006162:	f04f 0300 	mov.w	r3, #0
 8006166:	f240 14ff 	movw	r4, #511	; 0x1ff
 800616a:	f04f 0500 	mov.w	r5, #0
 800616e:	ea02 0004 	and.w	r0, r2, r4
 8006172:	ea03 0105 	and.w	r1, r3, r5
 8006176:	4b83      	ldr	r3, [pc, #524]	; (8006384 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8006178:	fb03 f201 	mul.w	r2, r3, r1
 800617c:	2300      	movs	r3, #0
 800617e:	fb03 f300 	mul.w	r3, r3, r0
 8006182:	4413      	add	r3, r2
 8006184:	4a7f      	ldr	r2, [pc, #508]	; (8006384 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8006186:	fba0 0102 	umull	r0, r1, r0, r2
 800618a:	440b      	add	r3, r1
 800618c:	4619      	mov	r1, r3
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	461a      	mov	r2, r3
 8006192:	f04f 0300 	mov.w	r3, #0
 8006196:	f7fa f83b 	bl	8000210 <__aeabi_uldivmod>
 800619a:	4602      	mov	r2, r0
 800619c:	460b      	mov	r3, r1
 800619e:	4613      	mov	r3, r2
 80061a0:	617b      	str	r3, [r7, #20]
 80061a2:	e04c      	b.n	800623e <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061a4:	4b75      	ldr	r3, [pc, #468]	; (800637c <HAL_RCC_GetSysClockFreq+0x2ac>)
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	099b      	lsrs	r3, r3, #6
 80061aa:	461a      	mov	r2, r3
 80061ac:	f04f 0300 	mov.w	r3, #0
 80061b0:	f240 10ff 	movw	r0, #511	; 0x1ff
 80061b4:	f04f 0100 	mov.w	r1, #0
 80061b8:	ea02 0800 	and.w	r8, r2, r0
 80061bc:	ea03 0901 	and.w	r9, r3, r1
 80061c0:	4640      	mov	r0, r8
 80061c2:	4649      	mov	r1, r9
 80061c4:	f04f 0200 	mov.w	r2, #0
 80061c8:	f04f 0300 	mov.w	r3, #0
 80061cc:	014b      	lsls	r3, r1, #5
 80061ce:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80061d2:	0142      	lsls	r2, r0, #5
 80061d4:	4610      	mov	r0, r2
 80061d6:	4619      	mov	r1, r3
 80061d8:	ebb0 0008 	subs.w	r0, r0, r8
 80061dc:	eb61 0109 	sbc.w	r1, r1, r9
 80061e0:	f04f 0200 	mov.w	r2, #0
 80061e4:	f04f 0300 	mov.w	r3, #0
 80061e8:	018b      	lsls	r3, r1, #6
 80061ea:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80061ee:	0182      	lsls	r2, r0, #6
 80061f0:	1a12      	subs	r2, r2, r0
 80061f2:	eb63 0301 	sbc.w	r3, r3, r1
 80061f6:	f04f 0000 	mov.w	r0, #0
 80061fa:	f04f 0100 	mov.w	r1, #0
 80061fe:	00d9      	lsls	r1, r3, #3
 8006200:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006204:	00d0      	lsls	r0, r2, #3
 8006206:	4602      	mov	r2, r0
 8006208:	460b      	mov	r3, r1
 800620a:	eb12 0208 	adds.w	r2, r2, r8
 800620e:	eb43 0309 	adc.w	r3, r3, r9
 8006212:	f04f 0000 	mov.w	r0, #0
 8006216:	f04f 0100 	mov.w	r1, #0
 800621a:	0299      	lsls	r1, r3, #10
 800621c:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006220:	0290      	lsls	r0, r2, #10
 8006222:	4602      	mov	r2, r0
 8006224:	460b      	mov	r3, r1
 8006226:	4610      	mov	r0, r2
 8006228:	4619      	mov	r1, r3
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	461a      	mov	r2, r3
 800622e:	f04f 0300 	mov.w	r3, #0
 8006232:	f7f9 ffed 	bl	8000210 <__aeabi_uldivmod>
 8006236:	4602      	mov	r2, r0
 8006238:	460b      	mov	r3, r1
 800623a:	4613      	mov	r3, r2
 800623c:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800623e:	4b4f      	ldr	r3, [pc, #316]	; (800637c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	0c1b      	lsrs	r3, r3, #16
 8006244:	f003 0303 	and.w	r3, r3, #3
 8006248:	3301      	adds	r3, #1
 800624a:	005b      	lsls	r3, r3, #1
 800624c:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800624e:	697a      	ldr	r2, [r7, #20]
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	fbb2 f3f3 	udiv	r3, r2, r3
 8006256:	613b      	str	r3, [r7, #16]
      break;
 8006258:	e089      	b.n	800636e <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800625a:	4948      	ldr	r1, [pc, #288]	; (800637c <HAL_RCC_GetSysClockFreq+0x2ac>)
 800625c:	6849      	ldr	r1, [r1, #4]
 800625e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8006262:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006264:	4945      	ldr	r1, [pc, #276]	; (800637c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8006266:	6849      	ldr	r1, [r1, #4]
 8006268:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800626c:	2900      	cmp	r1, #0
 800626e:	d024      	beq.n	80062ba <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006270:	4942      	ldr	r1, [pc, #264]	; (800637c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8006272:	6849      	ldr	r1, [r1, #4]
 8006274:	0989      	lsrs	r1, r1, #6
 8006276:	4608      	mov	r0, r1
 8006278:	f04f 0100 	mov.w	r1, #0
 800627c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8006280:	f04f 0500 	mov.w	r5, #0
 8006284:	ea00 0204 	and.w	r2, r0, r4
 8006288:	ea01 0305 	and.w	r3, r1, r5
 800628c:	493d      	ldr	r1, [pc, #244]	; (8006384 <HAL_RCC_GetSysClockFreq+0x2b4>)
 800628e:	fb01 f003 	mul.w	r0, r1, r3
 8006292:	2100      	movs	r1, #0
 8006294:	fb01 f102 	mul.w	r1, r1, r2
 8006298:	1844      	adds	r4, r0, r1
 800629a:	493a      	ldr	r1, [pc, #232]	; (8006384 <HAL_RCC_GetSysClockFreq+0x2b4>)
 800629c:	fba2 0101 	umull	r0, r1, r2, r1
 80062a0:	1863      	adds	r3, r4, r1
 80062a2:	4619      	mov	r1, r3
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	461a      	mov	r2, r3
 80062a8:	f04f 0300 	mov.w	r3, #0
 80062ac:	f7f9 ffb0 	bl	8000210 <__aeabi_uldivmod>
 80062b0:	4602      	mov	r2, r0
 80062b2:	460b      	mov	r3, r1
 80062b4:	4613      	mov	r3, r2
 80062b6:	617b      	str	r3, [r7, #20]
 80062b8:	e04a      	b.n	8006350 <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062ba:	4b30      	ldr	r3, [pc, #192]	; (800637c <HAL_RCC_GetSysClockFreq+0x2ac>)
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	099b      	lsrs	r3, r3, #6
 80062c0:	461a      	mov	r2, r3
 80062c2:	f04f 0300 	mov.w	r3, #0
 80062c6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80062ca:	f04f 0100 	mov.w	r1, #0
 80062ce:	ea02 0400 	and.w	r4, r2, r0
 80062d2:	ea03 0501 	and.w	r5, r3, r1
 80062d6:	4620      	mov	r0, r4
 80062d8:	4629      	mov	r1, r5
 80062da:	f04f 0200 	mov.w	r2, #0
 80062de:	f04f 0300 	mov.w	r3, #0
 80062e2:	014b      	lsls	r3, r1, #5
 80062e4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80062e8:	0142      	lsls	r2, r0, #5
 80062ea:	4610      	mov	r0, r2
 80062ec:	4619      	mov	r1, r3
 80062ee:	1b00      	subs	r0, r0, r4
 80062f0:	eb61 0105 	sbc.w	r1, r1, r5
 80062f4:	f04f 0200 	mov.w	r2, #0
 80062f8:	f04f 0300 	mov.w	r3, #0
 80062fc:	018b      	lsls	r3, r1, #6
 80062fe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006302:	0182      	lsls	r2, r0, #6
 8006304:	1a12      	subs	r2, r2, r0
 8006306:	eb63 0301 	sbc.w	r3, r3, r1
 800630a:	f04f 0000 	mov.w	r0, #0
 800630e:	f04f 0100 	mov.w	r1, #0
 8006312:	00d9      	lsls	r1, r3, #3
 8006314:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006318:	00d0      	lsls	r0, r2, #3
 800631a:	4602      	mov	r2, r0
 800631c:	460b      	mov	r3, r1
 800631e:	1912      	adds	r2, r2, r4
 8006320:	eb45 0303 	adc.w	r3, r5, r3
 8006324:	f04f 0000 	mov.w	r0, #0
 8006328:	f04f 0100 	mov.w	r1, #0
 800632c:	0299      	lsls	r1, r3, #10
 800632e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006332:	0290      	lsls	r0, r2, #10
 8006334:	4602      	mov	r2, r0
 8006336:	460b      	mov	r3, r1
 8006338:	4610      	mov	r0, r2
 800633a:	4619      	mov	r1, r3
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	461a      	mov	r2, r3
 8006340:	f04f 0300 	mov.w	r3, #0
 8006344:	f7f9 ff64 	bl	8000210 <__aeabi_uldivmod>
 8006348:	4602      	mov	r2, r0
 800634a:	460b      	mov	r3, r1
 800634c:	4613      	mov	r3, r2
 800634e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006350:	4b0a      	ldr	r3, [pc, #40]	; (800637c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	0f1b      	lsrs	r3, r3, #28
 8006356:	f003 0307 	and.w	r3, r3, #7
 800635a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 800635c:	697a      	ldr	r2, [r7, #20]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	fbb2 f3f3 	udiv	r3, r2, r3
 8006364:	613b      	str	r3, [r7, #16]
      break;
 8006366:	e002      	b.n	800636e <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006368:	4b05      	ldr	r3, [pc, #20]	; (8006380 <HAL_RCC_GetSysClockFreq+0x2b0>)
 800636a:	613b      	str	r3, [r7, #16]
      break;
 800636c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800636e:	693b      	ldr	r3, [r7, #16]
}
 8006370:	4618      	mov	r0, r3
 8006372:	371c      	adds	r7, #28
 8006374:	46bd      	mov	sp, r7
 8006376:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800637a:	bf00      	nop
 800637c:	40023800 	.word	0x40023800
 8006380:	00f42400 	.word	0x00f42400
 8006384:	017d7840 	.word	0x017d7840

08006388 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b086      	sub	sp, #24
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006390:	2300      	movs	r3, #0
 8006392:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 0301 	and.w	r3, r3, #1
 800639c:	2b00      	cmp	r3, #0
 800639e:	f000 8083 	beq.w	80064a8 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80063a2:	4b95      	ldr	r3, [pc, #596]	; (80065f8 <HAL_RCC_OscConfig+0x270>)
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	f003 030c 	and.w	r3, r3, #12
 80063aa:	2b04      	cmp	r3, #4
 80063ac:	d019      	beq.n	80063e2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80063ae:	4b92      	ldr	r3, [pc, #584]	; (80065f8 <HAL_RCC_OscConfig+0x270>)
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80063b6:	2b08      	cmp	r3, #8
 80063b8:	d106      	bne.n	80063c8 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80063ba:	4b8f      	ldr	r3, [pc, #572]	; (80065f8 <HAL_RCC_OscConfig+0x270>)
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063c6:	d00c      	beq.n	80063e2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80063c8:	4b8b      	ldr	r3, [pc, #556]	; (80065f8 <HAL_RCC_OscConfig+0x270>)
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80063d0:	2b0c      	cmp	r3, #12
 80063d2:	d112      	bne.n	80063fa <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80063d4:	4b88      	ldr	r3, [pc, #544]	; (80065f8 <HAL_RCC_OscConfig+0x270>)
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063e0:	d10b      	bne.n	80063fa <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063e2:	4b85      	ldr	r3, [pc, #532]	; (80065f8 <HAL_RCC_OscConfig+0x270>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d05b      	beq.n	80064a6 <HAL_RCC_OscConfig+0x11e>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d157      	bne.n	80064a6 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e216      	b.n	8006828 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006402:	d106      	bne.n	8006412 <HAL_RCC_OscConfig+0x8a>
 8006404:	4b7c      	ldr	r3, [pc, #496]	; (80065f8 <HAL_RCC_OscConfig+0x270>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a7b      	ldr	r2, [pc, #492]	; (80065f8 <HAL_RCC_OscConfig+0x270>)
 800640a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800640e:	6013      	str	r3, [r2, #0]
 8006410:	e01d      	b.n	800644e <HAL_RCC_OscConfig+0xc6>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800641a:	d10c      	bne.n	8006436 <HAL_RCC_OscConfig+0xae>
 800641c:	4b76      	ldr	r3, [pc, #472]	; (80065f8 <HAL_RCC_OscConfig+0x270>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a75      	ldr	r2, [pc, #468]	; (80065f8 <HAL_RCC_OscConfig+0x270>)
 8006422:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006426:	6013      	str	r3, [r2, #0]
 8006428:	4b73      	ldr	r3, [pc, #460]	; (80065f8 <HAL_RCC_OscConfig+0x270>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a72      	ldr	r2, [pc, #456]	; (80065f8 <HAL_RCC_OscConfig+0x270>)
 800642e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006432:	6013      	str	r3, [r2, #0]
 8006434:	e00b      	b.n	800644e <HAL_RCC_OscConfig+0xc6>
 8006436:	4b70      	ldr	r3, [pc, #448]	; (80065f8 <HAL_RCC_OscConfig+0x270>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a6f      	ldr	r2, [pc, #444]	; (80065f8 <HAL_RCC_OscConfig+0x270>)
 800643c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006440:	6013      	str	r3, [r2, #0]
 8006442:	4b6d      	ldr	r3, [pc, #436]	; (80065f8 <HAL_RCC_OscConfig+0x270>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a6c      	ldr	r2, [pc, #432]	; (80065f8 <HAL_RCC_OscConfig+0x270>)
 8006448:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800644c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d013      	beq.n	800647e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006456:	f7fd f93f 	bl	80036d8 <HAL_GetTick>
 800645a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800645c:	e008      	b.n	8006470 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800645e:	f7fd f93b 	bl	80036d8 <HAL_GetTick>
 8006462:	4602      	mov	r2, r0
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	1ad3      	subs	r3, r2, r3
 8006468:	2b64      	cmp	r3, #100	; 0x64
 800646a:	d901      	bls.n	8006470 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800646c:	2303      	movs	r3, #3
 800646e:	e1db      	b.n	8006828 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006470:	4b61      	ldr	r3, [pc, #388]	; (80065f8 <HAL_RCC_OscConfig+0x270>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006478:	2b00      	cmp	r3, #0
 800647a:	d0f0      	beq.n	800645e <HAL_RCC_OscConfig+0xd6>
 800647c:	e014      	b.n	80064a8 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800647e:	f7fd f92b 	bl	80036d8 <HAL_GetTick>
 8006482:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006484:	e008      	b.n	8006498 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006486:	f7fd f927 	bl	80036d8 <HAL_GetTick>
 800648a:	4602      	mov	r2, r0
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	1ad3      	subs	r3, r2, r3
 8006490:	2b64      	cmp	r3, #100	; 0x64
 8006492:	d901      	bls.n	8006498 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8006494:	2303      	movs	r3, #3
 8006496:	e1c7      	b.n	8006828 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006498:	4b57      	ldr	r3, [pc, #348]	; (80065f8 <HAL_RCC_OscConfig+0x270>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d1f0      	bne.n	8006486 <HAL_RCC_OscConfig+0xfe>
 80064a4:	e000      	b.n	80064a8 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064a6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 0302 	and.w	r3, r3, #2
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d06f      	beq.n	8006594 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80064b4:	4b50      	ldr	r3, [pc, #320]	; (80065f8 <HAL_RCC_OscConfig+0x270>)
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	f003 030c 	and.w	r3, r3, #12
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d017      	beq.n	80064f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80064c0:	4b4d      	ldr	r3, [pc, #308]	; (80065f8 <HAL_RCC_OscConfig+0x270>)
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80064c8:	2b08      	cmp	r3, #8
 80064ca:	d105      	bne.n	80064d8 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80064cc:	4b4a      	ldr	r3, [pc, #296]	; (80065f8 <HAL_RCC_OscConfig+0x270>)
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d00b      	beq.n	80064f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064d8:	4b47      	ldr	r3, [pc, #284]	; (80065f8 <HAL_RCC_OscConfig+0x270>)
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80064e0:	2b0c      	cmp	r3, #12
 80064e2:	d11c      	bne.n	800651e <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064e4:	4b44      	ldr	r3, [pc, #272]	; (80065f8 <HAL_RCC_OscConfig+0x270>)
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d116      	bne.n	800651e <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064f0:	4b41      	ldr	r3, [pc, #260]	; (80065f8 <HAL_RCC_OscConfig+0x270>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f003 0302 	and.w	r3, r3, #2
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d005      	beq.n	8006508 <HAL_RCC_OscConfig+0x180>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	2b01      	cmp	r3, #1
 8006502:	d001      	beq.n	8006508 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	e18f      	b.n	8006828 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006508:	4b3b      	ldr	r3, [pc, #236]	; (80065f8 <HAL_RCC_OscConfig+0x270>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	691b      	ldr	r3, [r3, #16]
 8006514:	00db      	lsls	r3, r3, #3
 8006516:	4938      	ldr	r1, [pc, #224]	; (80065f8 <HAL_RCC_OscConfig+0x270>)
 8006518:	4313      	orrs	r3, r2
 800651a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800651c:	e03a      	b.n	8006594 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d020      	beq.n	8006568 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006526:	4b35      	ldr	r3, [pc, #212]	; (80065fc <HAL_RCC_OscConfig+0x274>)
 8006528:	2201      	movs	r2, #1
 800652a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800652c:	f7fd f8d4 	bl	80036d8 <HAL_GetTick>
 8006530:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006532:	e008      	b.n	8006546 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006534:	f7fd f8d0 	bl	80036d8 <HAL_GetTick>
 8006538:	4602      	mov	r2, r0
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	1ad3      	subs	r3, r2, r3
 800653e:	2b02      	cmp	r3, #2
 8006540:	d901      	bls.n	8006546 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006542:	2303      	movs	r3, #3
 8006544:	e170      	b.n	8006828 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006546:	4b2c      	ldr	r3, [pc, #176]	; (80065f8 <HAL_RCC_OscConfig+0x270>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f003 0302 	and.w	r3, r3, #2
 800654e:	2b00      	cmp	r3, #0
 8006550:	d0f0      	beq.n	8006534 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006552:	4b29      	ldr	r3, [pc, #164]	; (80065f8 <HAL_RCC_OscConfig+0x270>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	691b      	ldr	r3, [r3, #16]
 800655e:	00db      	lsls	r3, r3, #3
 8006560:	4925      	ldr	r1, [pc, #148]	; (80065f8 <HAL_RCC_OscConfig+0x270>)
 8006562:	4313      	orrs	r3, r2
 8006564:	600b      	str	r3, [r1, #0]
 8006566:	e015      	b.n	8006594 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006568:	4b24      	ldr	r3, [pc, #144]	; (80065fc <HAL_RCC_OscConfig+0x274>)
 800656a:	2200      	movs	r2, #0
 800656c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800656e:	f7fd f8b3 	bl	80036d8 <HAL_GetTick>
 8006572:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006574:	e008      	b.n	8006588 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006576:	f7fd f8af 	bl	80036d8 <HAL_GetTick>
 800657a:	4602      	mov	r2, r0
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	1ad3      	subs	r3, r2, r3
 8006580:	2b02      	cmp	r3, #2
 8006582:	d901      	bls.n	8006588 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8006584:	2303      	movs	r3, #3
 8006586:	e14f      	b.n	8006828 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006588:	4b1b      	ldr	r3, [pc, #108]	; (80065f8 <HAL_RCC_OscConfig+0x270>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 0302 	and.w	r3, r3, #2
 8006590:	2b00      	cmp	r3, #0
 8006592:	d1f0      	bne.n	8006576 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f003 0308 	and.w	r3, r3, #8
 800659c:	2b00      	cmp	r3, #0
 800659e:	d037      	beq.n	8006610 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	695b      	ldr	r3, [r3, #20]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d016      	beq.n	80065d6 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80065a8:	4b15      	ldr	r3, [pc, #84]	; (8006600 <HAL_RCC_OscConfig+0x278>)
 80065aa:	2201      	movs	r2, #1
 80065ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065ae:	f7fd f893 	bl	80036d8 <HAL_GetTick>
 80065b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065b4:	e008      	b.n	80065c8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065b6:	f7fd f88f 	bl	80036d8 <HAL_GetTick>
 80065ba:	4602      	mov	r2, r0
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	1ad3      	subs	r3, r2, r3
 80065c0:	2b02      	cmp	r3, #2
 80065c2:	d901      	bls.n	80065c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80065c4:	2303      	movs	r3, #3
 80065c6:	e12f      	b.n	8006828 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065c8:	4b0b      	ldr	r3, [pc, #44]	; (80065f8 <HAL_RCC_OscConfig+0x270>)
 80065ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065cc:	f003 0302 	and.w	r3, r3, #2
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d0f0      	beq.n	80065b6 <HAL_RCC_OscConfig+0x22e>
 80065d4:	e01c      	b.n	8006610 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065d6:	4b0a      	ldr	r3, [pc, #40]	; (8006600 <HAL_RCC_OscConfig+0x278>)
 80065d8:	2200      	movs	r2, #0
 80065da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065dc:	f7fd f87c 	bl	80036d8 <HAL_GetTick>
 80065e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065e2:	e00f      	b.n	8006604 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065e4:	f7fd f878 	bl	80036d8 <HAL_GetTick>
 80065e8:	4602      	mov	r2, r0
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	1ad3      	subs	r3, r2, r3
 80065ee:	2b02      	cmp	r3, #2
 80065f0:	d908      	bls.n	8006604 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80065f2:	2303      	movs	r3, #3
 80065f4:	e118      	b.n	8006828 <HAL_RCC_OscConfig+0x4a0>
 80065f6:	bf00      	nop
 80065f8:	40023800 	.word	0x40023800
 80065fc:	42470000 	.word	0x42470000
 8006600:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006604:	4b8a      	ldr	r3, [pc, #552]	; (8006830 <HAL_RCC_OscConfig+0x4a8>)
 8006606:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006608:	f003 0302 	and.w	r3, r3, #2
 800660c:	2b00      	cmp	r3, #0
 800660e:	d1e9      	bne.n	80065e4 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f003 0304 	and.w	r3, r3, #4
 8006618:	2b00      	cmp	r3, #0
 800661a:	f000 8097 	beq.w	800674c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800661e:	2300      	movs	r3, #0
 8006620:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006622:	4b83      	ldr	r3, [pc, #524]	; (8006830 <HAL_RCC_OscConfig+0x4a8>)
 8006624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800662a:	2b00      	cmp	r3, #0
 800662c:	d10f      	bne.n	800664e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800662e:	2300      	movs	r3, #0
 8006630:	60fb      	str	r3, [r7, #12]
 8006632:	4b7f      	ldr	r3, [pc, #508]	; (8006830 <HAL_RCC_OscConfig+0x4a8>)
 8006634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006636:	4a7e      	ldr	r2, [pc, #504]	; (8006830 <HAL_RCC_OscConfig+0x4a8>)
 8006638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800663c:	6413      	str	r3, [r2, #64]	; 0x40
 800663e:	4b7c      	ldr	r3, [pc, #496]	; (8006830 <HAL_RCC_OscConfig+0x4a8>)
 8006640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006646:	60fb      	str	r3, [r7, #12]
 8006648:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800664a:	2301      	movs	r3, #1
 800664c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800664e:	4b79      	ldr	r3, [pc, #484]	; (8006834 <HAL_RCC_OscConfig+0x4ac>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006656:	2b00      	cmp	r3, #0
 8006658:	d118      	bne.n	800668c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800665a:	4b76      	ldr	r3, [pc, #472]	; (8006834 <HAL_RCC_OscConfig+0x4ac>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a75      	ldr	r2, [pc, #468]	; (8006834 <HAL_RCC_OscConfig+0x4ac>)
 8006660:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006664:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006666:	f7fd f837 	bl	80036d8 <HAL_GetTick>
 800666a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800666c:	e008      	b.n	8006680 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800666e:	f7fd f833 	bl	80036d8 <HAL_GetTick>
 8006672:	4602      	mov	r2, r0
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	1ad3      	subs	r3, r2, r3
 8006678:	2b02      	cmp	r3, #2
 800667a:	d901      	bls.n	8006680 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800667c:	2303      	movs	r3, #3
 800667e:	e0d3      	b.n	8006828 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006680:	4b6c      	ldr	r3, [pc, #432]	; (8006834 <HAL_RCC_OscConfig+0x4ac>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006688:	2b00      	cmp	r3, #0
 800668a:	d0f0      	beq.n	800666e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	2b01      	cmp	r3, #1
 8006692:	d106      	bne.n	80066a2 <HAL_RCC_OscConfig+0x31a>
 8006694:	4b66      	ldr	r3, [pc, #408]	; (8006830 <HAL_RCC_OscConfig+0x4a8>)
 8006696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006698:	4a65      	ldr	r2, [pc, #404]	; (8006830 <HAL_RCC_OscConfig+0x4a8>)
 800669a:	f043 0301 	orr.w	r3, r3, #1
 800669e:	6713      	str	r3, [r2, #112]	; 0x70
 80066a0:	e01c      	b.n	80066dc <HAL_RCC_OscConfig+0x354>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	2b05      	cmp	r3, #5
 80066a8:	d10c      	bne.n	80066c4 <HAL_RCC_OscConfig+0x33c>
 80066aa:	4b61      	ldr	r3, [pc, #388]	; (8006830 <HAL_RCC_OscConfig+0x4a8>)
 80066ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ae:	4a60      	ldr	r2, [pc, #384]	; (8006830 <HAL_RCC_OscConfig+0x4a8>)
 80066b0:	f043 0304 	orr.w	r3, r3, #4
 80066b4:	6713      	str	r3, [r2, #112]	; 0x70
 80066b6:	4b5e      	ldr	r3, [pc, #376]	; (8006830 <HAL_RCC_OscConfig+0x4a8>)
 80066b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ba:	4a5d      	ldr	r2, [pc, #372]	; (8006830 <HAL_RCC_OscConfig+0x4a8>)
 80066bc:	f043 0301 	orr.w	r3, r3, #1
 80066c0:	6713      	str	r3, [r2, #112]	; 0x70
 80066c2:	e00b      	b.n	80066dc <HAL_RCC_OscConfig+0x354>
 80066c4:	4b5a      	ldr	r3, [pc, #360]	; (8006830 <HAL_RCC_OscConfig+0x4a8>)
 80066c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066c8:	4a59      	ldr	r2, [pc, #356]	; (8006830 <HAL_RCC_OscConfig+0x4a8>)
 80066ca:	f023 0301 	bic.w	r3, r3, #1
 80066ce:	6713      	str	r3, [r2, #112]	; 0x70
 80066d0:	4b57      	ldr	r3, [pc, #348]	; (8006830 <HAL_RCC_OscConfig+0x4a8>)
 80066d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066d4:	4a56      	ldr	r2, [pc, #344]	; (8006830 <HAL_RCC_OscConfig+0x4a8>)
 80066d6:	f023 0304 	bic.w	r3, r3, #4
 80066da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d015      	beq.n	8006710 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066e4:	f7fc fff8 	bl	80036d8 <HAL_GetTick>
 80066e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066ea:	e00a      	b.n	8006702 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066ec:	f7fc fff4 	bl	80036d8 <HAL_GetTick>
 80066f0:	4602      	mov	r2, r0
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	1ad3      	subs	r3, r2, r3
 80066f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d901      	bls.n	8006702 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80066fe:	2303      	movs	r3, #3
 8006700:	e092      	b.n	8006828 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006702:	4b4b      	ldr	r3, [pc, #300]	; (8006830 <HAL_RCC_OscConfig+0x4a8>)
 8006704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006706:	f003 0302 	and.w	r3, r3, #2
 800670a:	2b00      	cmp	r3, #0
 800670c:	d0ee      	beq.n	80066ec <HAL_RCC_OscConfig+0x364>
 800670e:	e014      	b.n	800673a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006710:	f7fc ffe2 	bl	80036d8 <HAL_GetTick>
 8006714:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006716:	e00a      	b.n	800672e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006718:	f7fc ffde 	bl	80036d8 <HAL_GetTick>
 800671c:	4602      	mov	r2, r0
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	1ad3      	subs	r3, r2, r3
 8006722:	f241 3288 	movw	r2, #5000	; 0x1388
 8006726:	4293      	cmp	r3, r2
 8006728:	d901      	bls.n	800672e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800672a:	2303      	movs	r3, #3
 800672c:	e07c      	b.n	8006828 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800672e:	4b40      	ldr	r3, [pc, #256]	; (8006830 <HAL_RCC_OscConfig+0x4a8>)
 8006730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006732:	f003 0302 	and.w	r3, r3, #2
 8006736:	2b00      	cmp	r3, #0
 8006738:	d1ee      	bne.n	8006718 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800673a:	7dfb      	ldrb	r3, [r7, #23]
 800673c:	2b01      	cmp	r3, #1
 800673e:	d105      	bne.n	800674c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006740:	4b3b      	ldr	r3, [pc, #236]	; (8006830 <HAL_RCC_OscConfig+0x4a8>)
 8006742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006744:	4a3a      	ldr	r2, [pc, #232]	; (8006830 <HAL_RCC_OscConfig+0x4a8>)
 8006746:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800674a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	699b      	ldr	r3, [r3, #24]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d068      	beq.n	8006826 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006754:	4b36      	ldr	r3, [pc, #216]	; (8006830 <HAL_RCC_OscConfig+0x4a8>)
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	f003 030c 	and.w	r3, r3, #12
 800675c:	2b08      	cmp	r3, #8
 800675e:	d060      	beq.n	8006822 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	699b      	ldr	r3, [r3, #24]
 8006764:	2b02      	cmp	r3, #2
 8006766:	d145      	bne.n	80067f4 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006768:	4b33      	ldr	r3, [pc, #204]	; (8006838 <HAL_RCC_OscConfig+0x4b0>)
 800676a:	2200      	movs	r2, #0
 800676c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800676e:	f7fc ffb3 	bl	80036d8 <HAL_GetTick>
 8006772:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006774:	e008      	b.n	8006788 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006776:	f7fc ffaf 	bl	80036d8 <HAL_GetTick>
 800677a:	4602      	mov	r2, r0
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	1ad3      	subs	r3, r2, r3
 8006780:	2b02      	cmp	r3, #2
 8006782:	d901      	bls.n	8006788 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8006784:	2303      	movs	r3, #3
 8006786:	e04f      	b.n	8006828 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006788:	4b29      	ldr	r3, [pc, #164]	; (8006830 <HAL_RCC_OscConfig+0x4a8>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006790:	2b00      	cmp	r3, #0
 8006792:	d1f0      	bne.n	8006776 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	69da      	ldr	r2, [r3, #28]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6a1b      	ldr	r3, [r3, #32]
 800679c:	431a      	orrs	r2, r3
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a2:	019b      	lsls	r3, r3, #6
 80067a4:	431a      	orrs	r2, r3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067aa:	085b      	lsrs	r3, r3, #1
 80067ac:	3b01      	subs	r3, #1
 80067ae:	041b      	lsls	r3, r3, #16
 80067b0:	431a      	orrs	r2, r3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b6:	061b      	lsls	r3, r3, #24
 80067b8:	431a      	orrs	r2, r3
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067be:	071b      	lsls	r3, r3, #28
 80067c0:	491b      	ldr	r1, [pc, #108]	; (8006830 <HAL_RCC_OscConfig+0x4a8>)
 80067c2:	4313      	orrs	r3, r2
 80067c4:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80067c6:	4b1c      	ldr	r3, [pc, #112]	; (8006838 <HAL_RCC_OscConfig+0x4b0>)
 80067c8:	2201      	movs	r2, #1
 80067ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067cc:	f7fc ff84 	bl	80036d8 <HAL_GetTick>
 80067d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067d2:	e008      	b.n	80067e6 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067d4:	f7fc ff80 	bl	80036d8 <HAL_GetTick>
 80067d8:	4602      	mov	r2, r0
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	2b02      	cmp	r3, #2
 80067e0:	d901      	bls.n	80067e6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80067e2:	2303      	movs	r3, #3
 80067e4:	e020      	b.n	8006828 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067e6:	4b12      	ldr	r3, [pc, #72]	; (8006830 <HAL_RCC_OscConfig+0x4a8>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d0f0      	beq.n	80067d4 <HAL_RCC_OscConfig+0x44c>
 80067f2:	e018      	b.n	8006826 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067f4:	4b10      	ldr	r3, [pc, #64]	; (8006838 <HAL_RCC_OscConfig+0x4b0>)
 80067f6:	2200      	movs	r2, #0
 80067f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067fa:	f7fc ff6d 	bl	80036d8 <HAL_GetTick>
 80067fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006800:	e008      	b.n	8006814 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006802:	f7fc ff69 	bl	80036d8 <HAL_GetTick>
 8006806:	4602      	mov	r2, r0
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	1ad3      	subs	r3, r2, r3
 800680c:	2b02      	cmp	r3, #2
 800680e:	d901      	bls.n	8006814 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8006810:	2303      	movs	r3, #3
 8006812:	e009      	b.n	8006828 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006814:	4b06      	ldr	r3, [pc, #24]	; (8006830 <HAL_RCC_OscConfig+0x4a8>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800681c:	2b00      	cmp	r3, #0
 800681e:	d1f0      	bne.n	8006802 <HAL_RCC_OscConfig+0x47a>
 8006820:	e001      	b.n	8006826 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e000      	b.n	8006828 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8006826:	2300      	movs	r3, #0
}
 8006828:	4618      	mov	r0, r3
 800682a:	3718      	adds	r7, #24
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}
 8006830:	40023800 	.word	0x40023800
 8006834:	40007000 	.word	0x40007000
 8006838:	42470060 	.word	0x42470060

0800683c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b082      	sub	sp, #8
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d101      	bne.n	800684e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	e01d      	b.n	800688a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006854:	b2db      	uxtb	r3, r3
 8006856:	2b00      	cmp	r3, #0
 8006858:	d106      	bne.n	8006868 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2200      	movs	r2, #0
 800685e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f7fc fb8e 	bl	8002f84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2202      	movs	r2, #2
 800686c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	3304      	adds	r3, #4
 8006878:	4619      	mov	r1, r3
 800687a:	4610      	mov	r0, r2
 800687c:	f000 fb1c 	bl	8006eb8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006888:	2300      	movs	r3, #0
}
 800688a:	4618      	mov	r0, r3
 800688c:	3708      	adds	r7, #8
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}

08006892 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006892:	b480      	push	{r7}
 8006894:	b085      	sub	sp, #20
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	68da      	ldr	r2, [r3, #12]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f042 0201 	orr.w	r2, r2, #1
 80068a8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	f003 0307 	and.w	r3, r3, #7
 80068b4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2b06      	cmp	r3, #6
 80068ba:	d007      	beq.n	80068cc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f042 0201 	orr.w	r2, r2, #1
 80068ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80068cc:	2300      	movs	r3, #0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3714      	adds	r7, #20
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr

080068da <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80068da:	b580      	push	{r7, lr}
 80068dc:	b082      	sub	sp, #8
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d101      	bne.n	80068ec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	e01d      	b.n	8006928 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d106      	bne.n	8006906 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 f815 	bl	8006930 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2202      	movs	r2, #2
 800690a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	3304      	adds	r3, #4
 8006916:	4619      	mov	r1, r3
 8006918:	4610      	mov	r0, r2
 800691a:	f000 facd 	bl	8006eb8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2201      	movs	r2, #1
 8006922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006926:	2300      	movs	r3, #0
}
 8006928:	4618      	mov	r0, r3
 800692a:	3708      	adds	r7, #8
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006930:	b480      	push	{r7}
 8006932:	b083      	sub	sp, #12
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006938:	bf00      	nop
 800693a:	370c      	adds	r7, #12
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr

08006944 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b082      	sub	sp, #8
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	691b      	ldr	r3, [r3, #16]
 8006952:	f003 0302 	and.w	r3, r3, #2
 8006956:	2b02      	cmp	r3, #2
 8006958:	d122      	bne.n	80069a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	f003 0302 	and.w	r3, r3, #2
 8006964:	2b02      	cmp	r3, #2
 8006966:	d11b      	bne.n	80069a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f06f 0202 	mvn.w	r2, #2
 8006970:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2201      	movs	r2, #1
 8006976:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	699b      	ldr	r3, [r3, #24]
 800697e:	f003 0303 	and.w	r3, r3, #3
 8006982:	2b00      	cmp	r3, #0
 8006984:	d003      	beq.n	800698e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f000 fa78 	bl	8006e7c <HAL_TIM_IC_CaptureCallback>
 800698c:	e005      	b.n	800699a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 fa6a 	bl	8006e68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f000 fa7b 	bl	8006e90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	691b      	ldr	r3, [r3, #16]
 80069a6:	f003 0304 	and.w	r3, r3, #4
 80069aa:	2b04      	cmp	r3, #4
 80069ac:	d122      	bne.n	80069f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	f003 0304 	and.w	r3, r3, #4
 80069b8:	2b04      	cmp	r3, #4
 80069ba:	d11b      	bne.n	80069f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f06f 0204 	mvn.w	r2, #4
 80069c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2202      	movs	r2, #2
 80069ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	699b      	ldr	r3, [r3, #24]
 80069d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d003      	beq.n	80069e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 fa4e 	bl	8006e7c <HAL_TIM_IC_CaptureCallback>
 80069e0:	e005      	b.n	80069ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 fa40 	bl	8006e68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 fa51 	bl	8006e90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2200      	movs	r2, #0
 80069f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	691b      	ldr	r3, [r3, #16]
 80069fa:	f003 0308 	and.w	r3, r3, #8
 80069fe:	2b08      	cmp	r3, #8
 8006a00:	d122      	bne.n	8006a48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	f003 0308 	and.w	r3, r3, #8
 8006a0c:	2b08      	cmp	r3, #8
 8006a0e:	d11b      	bne.n	8006a48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f06f 0208 	mvn.w	r2, #8
 8006a18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2204      	movs	r2, #4
 8006a1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	69db      	ldr	r3, [r3, #28]
 8006a26:	f003 0303 	and.w	r3, r3, #3
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d003      	beq.n	8006a36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 fa24 	bl	8006e7c <HAL_TIM_IC_CaptureCallback>
 8006a34:	e005      	b.n	8006a42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f000 fa16 	bl	8006e68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f000 fa27 	bl	8006e90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2200      	movs	r2, #0
 8006a46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	691b      	ldr	r3, [r3, #16]
 8006a4e:	f003 0310 	and.w	r3, r3, #16
 8006a52:	2b10      	cmp	r3, #16
 8006a54:	d122      	bne.n	8006a9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	f003 0310 	and.w	r3, r3, #16
 8006a60:	2b10      	cmp	r3, #16
 8006a62:	d11b      	bne.n	8006a9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f06f 0210 	mvn.w	r2, #16
 8006a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2208      	movs	r2, #8
 8006a72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	69db      	ldr	r3, [r3, #28]
 8006a7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d003      	beq.n	8006a8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 f9fa 	bl	8006e7c <HAL_TIM_IC_CaptureCallback>
 8006a88:	e005      	b.n	8006a96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 f9ec 	bl	8006e68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 f9fd 	bl	8006e90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	691b      	ldr	r3, [r3, #16]
 8006aa2:	f003 0301 	and.w	r3, r3, #1
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d10e      	bne.n	8006ac8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	f003 0301 	and.w	r3, r3, #1
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d107      	bne.n	8006ac8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f06f 0201 	mvn.w	r2, #1
 8006ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f7fb ff12 	bl	80028ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ad2:	2b80      	cmp	r3, #128	; 0x80
 8006ad4:	d10e      	bne.n	8006af4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	68db      	ldr	r3, [r3, #12]
 8006adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ae0:	2b80      	cmp	r3, #128	; 0x80
 8006ae2:	d107      	bne.n	8006af4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006aec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 fdce 	bl	8007690 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006afe:	2b40      	cmp	r3, #64	; 0x40
 8006b00:	d10e      	bne.n	8006b20 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b0c:	2b40      	cmp	r3, #64	; 0x40
 8006b0e:	d107      	bne.n	8006b20 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 f9c2 	bl	8006ea4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	691b      	ldr	r3, [r3, #16]
 8006b26:	f003 0320 	and.w	r3, r3, #32
 8006b2a:	2b20      	cmp	r3, #32
 8006b2c:	d10e      	bne.n	8006b4c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	f003 0320 	and.w	r3, r3, #32
 8006b38:	2b20      	cmp	r3, #32
 8006b3a:	d107      	bne.n	8006b4c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f06f 0220 	mvn.w	r2, #32
 8006b44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 fd98 	bl	800767c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b4c:	bf00      	nop
 8006b4e:	3708      	adds	r7, #8
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	60b9      	str	r1, [r7, #8]
 8006b5e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d101      	bne.n	8006b6e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006b6a:	2302      	movs	r3, #2
 8006b6c:	e0b4      	b.n	8006cd8 <HAL_TIM_PWM_ConfigChannel+0x184>
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2201      	movs	r2, #1
 8006b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2202      	movs	r2, #2
 8006b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2b0c      	cmp	r3, #12
 8006b82:	f200 809f 	bhi.w	8006cc4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8006b86:	a201      	add	r2, pc, #4	; (adr r2, 8006b8c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b8c:	08006bc1 	.word	0x08006bc1
 8006b90:	08006cc5 	.word	0x08006cc5
 8006b94:	08006cc5 	.word	0x08006cc5
 8006b98:	08006cc5 	.word	0x08006cc5
 8006b9c:	08006c01 	.word	0x08006c01
 8006ba0:	08006cc5 	.word	0x08006cc5
 8006ba4:	08006cc5 	.word	0x08006cc5
 8006ba8:	08006cc5 	.word	0x08006cc5
 8006bac:	08006c43 	.word	0x08006c43
 8006bb0:	08006cc5 	.word	0x08006cc5
 8006bb4:	08006cc5 	.word	0x08006cc5
 8006bb8:	08006cc5 	.word	0x08006cc5
 8006bbc:	08006c83 	.word	0x08006c83
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	68b9      	ldr	r1, [r7, #8]
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f000 fa16 	bl	8006ff8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	699a      	ldr	r2, [r3, #24]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f042 0208 	orr.w	r2, r2, #8
 8006bda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	699a      	ldr	r2, [r3, #24]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f022 0204 	bic.w	r2, r2, #4
 8006bea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	6999      	ldr	r1, [r3, #24]
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	691a      	ldr	r2, [r3, #16]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	430a      	orrs	r2, r1
 8006bfc:	619a      	str	r2, [r3, #24]
      break;
 8006bfe:	e062      	b.n	8006cc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	68b9      	ldr	r1, [r7, #8]
 8006c06:	4618      	mov	r0, r3
 8006c08:	f000 fa66 	bl	80070d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	699a      	ldr	r2, [r3, #24]
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	699a      	ldr	r2, [r3, #24]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	6999      	ldr	r1, [r3, #24]
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	691b      	ldr	r3, [r3, #16]
 8006c36:	021a      	lsls	r2, r3, #8
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	430a      	orrs	r2, r1
 8006c3e:	619a      	str	r2, [r3, #24]
      break;
 8006c40:	e041      	b.n	8006cc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	68b9      	ldr	r1, [r7, #8]
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f000 fabb 	bl	80071c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	69da      	ldr	r2, [r3, #28]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f042 0208 	orr.w	r2, r2, #8
 8006c5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	69da      	ldr	r2, [r3, #28]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f022 0204 	bic.w	r2, r2, #4
 8006c6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	69d9      	ldr	r1, [r3, #28]
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	691a      	ldr	r2, [r3, #16]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	430a      	orrs	r2, r1
 8006c7e:	61da      	str	r2, [r3, #28]
      break;
 8006c80:	e021      	b.n	8006cc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	68b9      	ldr	r1, [r7, #8]
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f000 fb0f 	bl	80072ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	69da      	ldr	r2, [r3, #28]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	69da      	ldr	r2, [r3, #28]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	69d9      	ldr	r1, [r3, #28]
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	691b      	ldr	r3, [r3, #16]
 8006cb8:	021a      	lsls	r2, r3, #8
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	430a      	orrs	r2, r1
 8006cc0:	61da      	str	r2, [r3, #28]
      break;
 8006cc2:	e000      	b.n	8006cc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006cc4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2201      	movs	r2, #1
 8006cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006cd6:	2300      	movs	r3, #0
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3710      	adds	r7, #16
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d101      	bne.n	8006cf8 <HAL_TIM_ConfigClockSource+0x18>
 8006cf4:	2302      	movs	r3, #2
 8006cf6:	e0b3      	b.n	8006e60 <HAL_TIM_ConfigClockSource+0x180>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2202      	movs	r2, #2
 8006d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006d16:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d1e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	68fa      	ldr	r2, [r7, #12]
 8006d26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d30:	d03e      	beq.n	8006db0 <HAL_TIM_ConfigClockSource+0xd0>
 8006d32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d36:	f200 8087 	bhi.w	8006e48 <HAL_TIM_ConfigClockSource+0x168>
 8006d3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d3e:	f000 8085 	beq.w	8006e4c <HAL_TIM_ConfigClockSource+0x16c>
 8006d42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d46:	d87f      	bhi.n	8006e48 <HAL_TIM_ConfigClockSource+0x168>
 8006d48:	2b70      	cmp	r3, #112	; 0x70
 8006d4a:	d01a      	beq.n	8006d82 <HAL_TIM_ConfigClockSource+0xa2>
 8006d4c:	2b70      	cmp	r3, #112	; 0x70
 8006d4e:	d87b      	bhi.n	8006e48 <HAL_TIM_ConfigClockSource+0x168>
 8006d50:	2b60      	cmp	r3, #96	; 0x60
 8006d52:	d050      	beq.n	8006df6 <HAL_TIM_ConfigClockSource+0x116>
 8006d54:	2b60      	cmp	r3, #96	; 0x60
 8006d56:	d877      	bhi.n	8006e48 <HAL_TIM_ConfigClockSource+0x168>
 8006d58:	2b50      	cmp	r3, #80	; 0x50
 8006d5a:	d03c      	beq.n	8006dd6 <HAL_TIM_ConfigClockSource+0xf6>
 8006d5c:	2b50      	cmp	r3, #80	; 0x50
 8006d5e:	d873      	bhi.n	8006e48 <HAL_TIM_ConfigClockSource+0x168>
 8006d60:	2b40      	cmp	r3, #64	; 0x40
 8006d62:	d058      	beq.n	8006e16 <HAL_TIM_ConfigClockSource+0x136>
 8006d64:	2b40      	cmp	r3, #64	; 0x40
 8006d66:	d86f      	bhi.n	8006e48 <HAL_TIM_ConfigClockSource+0x168>
 8006d68:	2b30      	cmp	r3, #48	; 0x30
 8006d6a:	d064      	beq.n	8006e36 <HAL_TIM_ConfigClockSource+0x156>
 8006d6c:	2b30      	cmp	r3, #48	; 0x30
 8006d6e:	d86b      	bhi.n	8006e48 <HAL_TIM_ConfigClockSource+0x168>
 8006d70:	2b20      	cmp	r3, #32
 8006d72:	d060      	beq.n	8006e36 <HAL_TIM_ConfigClockSource+0x156>
 8006d74:	2b20      	cmp	r3, #32
 8006d76:	d867      	bhi.n	8006e48 <HAL_TIM_ConfigClockSource+0x168>
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d05c      	beq.n	8006e36 <HAL_TIM_ConfigClockSource+0x156>
 8006d7c:	2b10      	cmp	r3, #16
 8006d7e:	d05a      	beq.n	8006e36 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006d80:	e062      	b.n	8006e48 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6818      	ldr	r0, [r3, #0]
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	6899      	ldr	r1, [r3, #8]
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	685a      	ldr	r2, [r3, #4]
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	f000 fb5b 	bl	800744c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006da4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	68fa      	ldr	r2, [r7, #12]
 8006dac:	609a      	str	r2, [r3, #8]
      break;
 8006dae:	e04e      	b.n	8006e4e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6818      	ldr	r0, [r3, #0]
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	6899      	ldr	r1, [r3, #8]
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	685a      	ldr	r2, [r3, #4]
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	68db      	ldr	r3, [r3, #12]
 8006dc0:	f000 fb44 	bl	800744c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	689a      	ldr	r2, [r3, #8]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006dd2:	609a      	str	r2, [r3, #8]
      break;
 8006dd4:	e03b      	b.n	8006e4e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6818      	ldr	r0, [r3, #0]
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	6859      	ldr	r1, [r3, #4]
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	68db      	ldr	r3, [r3, #12]
 8006de2:	461a      	mov	r2, r3
 8006de4:	f000 fab8 	bl	8007358 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	2150      	movs	r1, #80	; 0x50
 8006dee:	4618      	mov	r0, r3
 8006df0:	f000 fb11 	bl	8007416 <TIM_ITRx_SetConfig>
      break;
 8006df4:	e02b      	b.n	8006e4e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6818      	ldr	r0, [r3, #0]
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	6859      	ldr	r1, [r3, #4]
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	68db      	ldr	r3, [r3, #12]
 8006e02:	461a      	mov	r2, r3
 8006e04:	f000 fad7 	bl	80073b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	2160      	movs	r1, #96	; 0x60
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f000 fb01 	bl	8007416 <TIM_ITRx_SetConfig>
      break;
 8006e14:	e01b      	b.n	8006e4e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6818      	ldr	r0, [r3, #0]
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	6859      	ldr	r1, [r3, #4]
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	68db      	ldr	r3, [r3, #12]
 8006e22:	461a      	mov	r2, r3
 8006e24:	f000 fa98 	bl	8007358 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2140      	movs	r1, #64	; 0x40
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f000 faf1 	bl	8007416 <TIM_ITRx_SetConfig>
      break;
 8006e34:	e00b      	b.n	8006e4e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4619      	mov	r1, r3
 8006e40:	4610      	mov	r0, r2
 8006e42:	f000 fae8 	bl	8007416 <TIM_ITRx_SetConfig>
      break;
 8006e46:	e002      	b.n	8006e4e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006e48:	bf00      	nop
 8006e4a:	e000      	b.n	8006e4e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006e4c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2201      	movs	r2, #1
 8006e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3710      	adds	r7, #16
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b083      	sub	sp, #12
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e70:	bf00      	nop
 8006e72:	370c      	adds	r7, #12
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr

08006e7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e84:	bf00      	nop
 8006e86:	370c      	adds	r7, #12
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b083      	sub	sp, #12
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e98:	bf00      	nop
 8006e9a:	370c      	adds	r7, #12
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr

08006ea4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b083      	sub	sp, #12
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006eac:	bf00      	nop
 8006eae:	370c      	adds	r7, #12
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr

08006eb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b085      	sub	sp, #20
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	4a40      	ldr	r2, [pc, #256]	; (8006fcc <TIM_Base_SetConfig+0x114>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d013      	beq.n	8006ef8 <TIM_Base_SetConfig+0x40>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ed6:	d00f      	beq.n	8006ef8 <TIM_Base_SetConfig+0x40>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	4a3d      	ldr	r2, [pc, #244]	; (8006fd0 <TIM_Base_SetConfig+0x118>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d00b      	beq.n	8006ef8 <TIM_Base_SetConfig+0x40>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	4a3c      	ldr	r2, [pc, #240]	; (8006fd4 <TIM_Base_SetConfig+0x11c>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d007      	beq.n	8006ef8 <TIM_Base_SetConfig+0x40>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	4a3b      	ldr	r2, [pc, #236]	; (8006fd8 <TIM_Base_SetConfig+0x120>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d003      	beq.n	8006ef8 <TIM_Base_SetConfig+0x40>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	4a3a      	ldr	r2, [pc, #232]	; (8006fdc <TIM_Base_SetConfig+0x124>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d108      	bne.n	8006f0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006efe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	68fa      	ldr	r2, [r7, #12]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4a2f      	ldr	r2, [pc, #188]	; (8006fcc <TIM_Base_SetConfig+0x114>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d02b      	beq.n	8006f6a <TIM_Base_SetConfig+0xb2>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f18:	d027      	beq.n	8006f6a <TIM_Base_SetConfig+0xb2>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4a2c      	ldr	r2, [pc, #176]	; (8006fd0 <TIM_Base_SetConfig+0x118>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d023      	beq.n	8006f6a <TIM_Base_SetConfig+0xb2>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	4a2b      	ldr	r2, [pc, #172]	; (8006fd4 <TIM_Base_SetConfig+0x11c>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d01f      	beq.n	8006f6a <TIM_Base_SetConfig+0xb2>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	4a2a      	ldr	r2, [pc, #168]	; (8006fd8 <TIM_Base_SetConfig+0x120>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d01b      	beq.n	8006f6a <TIM_Base_SetConfig+0xb2>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	4a29      	ldr	r2, [pc, #164]	; (8006fdc <TIM_Base_SetConfig+0x124>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d017      	beq.n	8006f6a <TIM_Base_SetConfig+0xb2>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	4a28      	ldr	r2, [pc, #160]	; (8006fe0 <TIM_Base_SetConfig+0x128>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d013      	beq.n	8006f6a <TIM_Base_SetConfig+0xb2>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	4a27      	ldr	r2, [pc, #156]	; (8006fe4 <TIM_Base_SetConfig+0x12c>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d00f      	beq.n	8006f6a <TIM_Base_SetConfig+0xb2>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4a26      	ldr	r2, [pc, #152]	; (8006fe8 <TIM_Base_SetConfig+0x130>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d00b      	beq.n	8006f6a <TIM_Base_SetConfig+0xb2>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	4a25      	ldr	r2, [pc, #148]	; (8006fec <TIM_Base_SetConfig+0x134>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d007      	beq.n	8006f6a <TIM_Base_SetConfig+0xb2>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4a24      	ldr	r2, [pc, #144]	; (8006ff0 <TIM_Base_SetConfig+0x138>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d003      	beq.n	8006f6a <TIM_Base_SetConfig+0xb2>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	4a23      	ldr	r2, [pc, #140]	; (8006ff4 <TIM_Base_SetConfig+0x13c>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d108      	bne.n	8006f7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	68db      	ldr	r3, [r3, #12]
 8006f76:	68fa      	ldr	r2, [r7, #12]
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	695b      	ldr	r3, [r3, #20]
 8006f86:	4313      	orrs	r3, r2
 8006f88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	68fa      	ldr	r2, [r7, #12]
 8006f8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	689a      	ldr	r2, [r3, #8]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	4a0a      	ldr	r2, [pc, #40]	; (8006fcc <TIM_Base_SetConfig+0x114>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d003      	beq.n	8006fb0 <TIM_Base_SetConfig+0xf8>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	4a0c      	ldr	r2, [pc, #48]	; (8006fdc <TIM_Base_SetConfig+0x124>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d103      	bne.n	8006fb8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	691a      	ldr	r2, [r3, #16]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	615a      	str	r2, [r3, #20]
}
 8006fbe:	bf00      	nop
 8006fc0:	3714      	adds	r7, #20
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr
 8006fca:	bf00      	nop
 8006fcc:	40010000 	.word	0x40010000
 8006fd0:	40000400 	.word	0x40000400
 8006fd4:	40000800 	.word	0x40000800
 8006fd8:	40000c00 	.word	0x40000c00
 8006fdc:	40010400 	.word	0x40010400
 8006fe0:	40014000 	.word	0x40014000
 8006fe4:	40014400 	.word	0x40014400
 8006fe8:	40014800 	.word	0x40014800
 8006fec:	40001800 	.word	0x40001800
 8006ff0:	40001c00 	.word	0x40001c00
 8006ff4:	40002000 	.word	0x40002000

08006ff8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b087      	sub	sp, #28
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a1b      	ldr	r3, [r3, #32]
 8007006:	f023 0201 	bic.w	r2, r3, #1
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a1b      	ldr	r3, [r3, #32]
 8007012:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	699b      	ldr	r3, [r3, #24]
 800701e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f023 0303 	bic.w	r3, r3, #3
 800702e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	68fa      	ldr	r2, [r7, #12]
 8007036:	4313      	orrs	r3, r2
 8007038:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	f023 0302 	bic.w	r3, r3, #2
 8007040:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	697a      	ldr	r2, [r7, #20]
 8007048:	4313      	orrs	r3, r2
 800704a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4a20      	ldr	r2, [pc, #128]	; (80070d0 <TIM_OC1_SetConfig+0xd8>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d003      	beq.n	800705c <TIM_OC1_SetConfig+0x64>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	4a1f      	ldr	r2, [pc, #124]	; (80070d4 <TIM_OC1_SetConfig+0xdc>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d10c      	bne.n	8007076 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	f023 0308 	bic.w	r3, r3, #8
 8007062:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	68db      	ldr	r3, [r3, #12]
 8007068:	697a      	ldr	r2, [r7, #20]
 800706a:	4313      	orrs	r3, r2
 800706c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	f023 0304 	bic.w	r3, r3, #4
 8007074:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	4a15      	ldr	r2, [pc, #84]	; (80070d0 <TIM_OC1_SetConfig+0xd8>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d003      	beq.n	8007086 <TIM_OC1_SetConfig+0x8e>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4a14      	ldr	r2, [pc, #80]	; (80070d4 <TIM_OC1_SetConfig+0xdc>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d111      	bne.n	80070aa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800708c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007094:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	695b      	ldr	r3, [r3, #20]
 800709a:	693a      	ldr	r2, [r7, #16]
 800709c:	4313      	orrs	r3, r2
 800709e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	699b      	ldr	r3, [r3, #24]
 80070a4:	693a      	ldr	r2, [r7, #16]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	693a      	ldr	r2, [r7, #16]
 80070ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	68fa      	ldr	r2, [r7, #12]
 80070b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	685a      	ldr	r2, [r3, #4]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	697a      	ldr	r2, [r7, #20]
 80070c2:	621a      	str	r2, [r3, #32]
}
 80070c4:	bf00      	nop
 80070c6:	371c      	adds	r7, #28
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr
 80070d0:	40010000 	.word	0x40010000
 80070d4:	40010400 	.word	0x40010400

080070d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070d8:	b480      	push	{r7}
 80070da:	b087      	sub	sp, #28
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a1b      	ldr	r3, [r3, #32]
 80070e6:	f023 0210 	bic.w	r2, r3, #16
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6a1b      	ldr	r3, [r3, #32]
 80070f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	699b      	ldr	r3, [r3, #24]
 80070fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007106:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800710e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	021b      	lsls	r3, r3, #8
 8007116:	68fa      	ldr	r2, [r7, #12]
 8007118:	4313      	orrs	r3, r2
 800711a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	f023 0320 	bic.w	r3, r3, #32
 8007122:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	011b      	lsls	r3, r3, #4
 800712a:	697a      	ldr	r2, [r7, #20]
 800712c:	4313      	orrs	r3, r2
 800712e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	4a22      	ldr	r2, [pc, #136]	; (80071bc <TIM_OC2_SetConfig+0xe4>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d003      	beq.n	8007140 <TIM_OC2_SetConfig+0x68>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	4a21      	ldr	r2, [pc, #132]	; (80071c0 <TIM_OC2_SetConfig+0xe8>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d10d      	bne.n	800715c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007146:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	011b      	lsls	r3, r3, #4
 800714e:	697a      	ldr	r2, [r7, #20]
 8007150:	4313      	orrs	r3, r2
 8007152:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800715a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	4a17      	ldr	r2, [pc, #92]	; (80071bc <TIM_OC2_SetConfig+0xe4>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d003      	beq.n	800716c <TIM_OC2_SetConfig+0x94>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	4a16      	ldr	r2, [pc, #88]	; (80071c0 <TIM_OC2_SetConfig+0xe8>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d113      	bne.n	8007194 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007172:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800717a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	695b      	ldr	r3, [r3, #20]
 8007180:	009b      	lsls	r3, r3, #2
 8007182:	693a      	ldr	r2, [r7, #16]
 8007184:	4313      	orrs	r3, r2
 8007186:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	699b      	ldr	r3, [r3, #24]
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	693a      	ldr	r2, [r7, #16]
 8007190:	4313      	orrs	r3, r2
 8007192:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	693a      	ldr	r2, [r7, #16]
 8007198:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	68fa      	ldr	r2, [r7, #12]
 800719e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	685a      	ldr	r2, [r3, #4]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	697a      	ldr	r2, [r7, #20]
 80071ac:	621a      	str	r2, [r3, #32]
}
 80071ae:	bf00      	nop
 80071b0:	371c      	adds	r7, #28
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr
 80071ba:	bf00      	nop
 80071bc:	40010000 	.word	0x40010000
 80071c0:	40010400 	.word	0x40010400

080071c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b087      	sub	sp, #28
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6a1b      	ldr	r3, [r3, #32]
 80071d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6a1b      	ldr	r3, [r3, #32]
 80071de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	69db      	ldr	r3, [r3, #28]
 80071ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f023 0303 	bic.w	r3, r3, #3
 80071fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	68fa      	ldr	r2, [r7, #12]
 8007202:	4313      	orrs	r3, r2
 8007204:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800720c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	021b      	lsls	r3, r3, #8
 8007214:	697a      	ldr	r2, [r7, #20]
 8007216:	4313      	orrs	r3, r2
 8007218:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	4a21      	ldr	r2, [pc, #132]	; (80072a4 <TIM_OC3_SetConfig+0xe0>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d003      	beq.n	800722a <TIM_OC3_SetConfig+0x66>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	4a20      	ldr	r2, [pc, #128]	; (80072a8 <TIM_OC3_SetConfig+0xe4>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d10d      	bne.n	8007246 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007230:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	68db      	ldr	r3, [r3, #12]
 8007236:	021b      	lsls	r3, r3, #8
 8007238:	697a      	ldr	r2, [r7, #20]
 800723a:	4313      	orrs	r3, r2
 800723c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007244:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	4a16      	ldr	r2, [pc, #88]	; (80072a4 <TIM_OC3_SetConfig+0xe0>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d003      	beq.n	8007256 <TIM_OC3_SetConfig+0x92>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	4a15      	ldr	r2, [pc, #84]	; (80072a8 <TIM_OC3_SetConfig+0xe4>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d113      	bne.n	800727e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800725c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007264:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	695b      	ldr	r3, [r3, #20]
 800726a:	011b      	lsls	r3, r3, #4
 800726c:	693a      	ldr	r2, [r7, #16]
 800726e:	4313      	orrs	r3, r2
 8007270:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	699b      	ldr	r3, [r3, #24]
 8007276:	011b      	lsls	r3, r3, #4
 8007278:	693a      	ldr	r2, [r7, #16]
 800727a:	4313      	orrs	r3, r2
 800727c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	693a      	ldr	r2, [r7, #16]
 8007282:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	68fa      	ldr	r2, [r7, #12]
 8007288:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	685a      	ldr	r2, [r3, #4]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	697a      	ldr	r2, [r7, #20]
 8007296:	621a      	str	r2, [r3, #32]
}
 8007298:	bf00      	nop
 800729a:	371c      	adds	r7, #28
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr
 80072a4:	40010000 	.word	0x40010000
 80072a8:	40010400 	.word	0x40010400

080072ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b087      	sub	sp, #28
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6a1b      	ldr	r3, [r3, #32]
 80072ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6a1b      	ldr	r3, [r3, #32]
 80072c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	69db      	ldr	r3, [r3, #28]
 80072d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	021b      	lsls	r3, r3, #8
 80072ea:	68fa      	ldr	r2, [r7, #12]
 80072ec:	4313      	orrs	r3, r2
 80072ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80072f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	031b      	lsls	r3, r3, #12
 80072fe:	693a      	ldr	r2, [r7, #16]
 8007300:	4313      	orrs	r3, r2
 8007302:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	4a12      	ldr	r2, [pc, #72]	; (8007350 <TIM_OC4_SetConfig+0xa4>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d003      	beq.n	8007314 <TIM_OC4_SetConfig+0x68>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	4a11      	ldr	r2, [pc, #68]	; (8007354 <TIM_OC4_SetConfig+0xa8>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d109      	bne.n	8007328 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800731a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	695b      	ldr	r3, [r3, #20]
 8007320:	019b      	lsls	r3, r3, #6
 8007322:	697a      	ldr	r2, [r7, #20]
 8007324:	4313      	orrs	r3, r2
 8007326:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	697a      	ldr	r2, [r7, #20]
 800732c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	68fa      	ldr	r2, [r7, #12]
 8007332:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	685a      	ldr	r2, [r3, #4]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	693a      	ldr	r2, [r7, #16]
 8007340:	621a      	str	r2, [r3, #32]
}
 8007342:	bf00      	nop
 8007344:	371c      	adds	r7, #28
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr
 800734e:	bf00      	nop
 8007350:	40010000 	.word	0x40010000
 8007354:	40010400 	.word	0x40010400

08007358 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007358:	b480      	push	{r7}
 800735a:	b087      	sub	sp, #28
 800735c:	af00      	add	r7, sp, #0
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	60b9      	str	r1, [r7, #8]
 8007362:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	6a1b      	ldr	r3, [r3, #32]
 8007368:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	6a1b      	ldr	r3, [r3, #32]
 800736e:	f023 0201 	bic.w	r2, r3, #1
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	699b      	ldr	r3, [r3, #24]
 800737a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007382:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	011b      	lsls	r3, r3, #4
 8007388:	693a      	ldr	r2, [r7, #16]
 800738a:	4313      	orrs	r3, r2
 800738c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	f023 030a 	bic.w	r3, r3, #10
 8007394:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007396:	697a      	ldr	r2, [r7, #20]
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	4313      	orrs	r3, r2
 800739c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	693a      	ldr	r2, [r7, #16]
 80073a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	697a      	ldr	r2, [r7, #20]
 80073a8:	621a      	str	r2, [r3, #32]
}
 80073aa:	bf00      	nop
 80073ac:	371c      	adds	r7, #28
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr

080073b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073b6:	b480      	push	{r7}
 80073b8:	b087      	sub	sp, #28
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	60f8      	str	r0, [r7, #12]
 80073be:	60b9      	str	r1, [r7, #8]
 80073c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	6a1b      	ldr	r3, [r3, #32]
 80073c6:	f023 0210 	bic.w	r2, r3, #16
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	699b      	ldr	r3, [r3, #24]
 80073d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	6a1b      	ldr	r3, [r3, #32]
 80073d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80073e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	031b      	lsls	r3, r3, #12
 80073e6:	697a      	ldr	r2, [r7, #20]
 80073e8:	4313      	orrs	r3, r2
 80073ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80073f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	011b      	lsls	r3, r3, #4
 80073f8:	693a      	ldr	r2, [r7, #16]
 80073fa:	4313      	orrs	r3, r2
 80073fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	697a      	ldr	r2, [r7, #20]
 8007402:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	693a      	ldr	r2, [r7, #16]
 8007408:	621a      	str	r2, [r3, #32]
}
 800740a:	bf00      	nop
 800740c:	371c      	adds	r7, #28
 800740e:	46bd      	mov	sp, r7
 8007410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007414:	4770      	bx	lr

08007416 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007416:	b480      	push	{r7}
 8007418:	b085      	sub	sp, #20
 800741a:	af00      	add	r7, sp, #0
 800741c:	6078      	str	r0, [r7, #4]
 800741e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800742c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800742e:	683a      	ldr	r2, [r7, #0]
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	4313      	orrs	r3, r2
 8007434:	f043 0307 	orr.w	r3, r3, #7
 8007438:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	68fa      	ldr	r2, [r7, #12]
 800743e:	609a      	str	r2, [r3, #8]
}
 8007440:	bf00      	nop
 8007442:	3714      	adds	r7, #20
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr

0800744c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800744c:	b480      	push	{r7}
 800744e:	b087      	sub	sp, #28
 8007450:	af00      	add	r7, sp, #0
 8007452:	60f8      	str	r0, [r7, #12]
 8007454:	60b9      	str	r1, [r7, #8]
 8007456:	607a      	str	r2, [r7, #4]
 8007458:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007466:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	021a      	lsls	r2, r3, #8
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	431a      	orrs	r2, r3
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	4313      	orrs	r3, r2
 8007474:	697a      	ldr	r2, [r7, #20]
 8007476:	4313      	orrs	r3, r2
 8007478:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	697a      	ldr	r2, [r7, #20]
 800747e:	609a      	str	r2, [r3, #8]
}
 8007480:	bf00      	nop
 8007482:	371c      	adds	r7, #28
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr

0800748c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	2204      	movs	r2, #4
 800749c:	6839      	ldr	r1, [r7, #0]
 800749e:	4618      	mov	r0, r3
 80074a0:	f000 f900 	bl	80076a4 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80074b2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	f003 0307 	and.w	r3, r3, #7
 80074be:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2b06      	cmp	r3, #6
 80074c4:	d007      	beq.n	80074d6 <HAL_TIMEx_PWMN_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	681a      	ldr	r2, [r3, #0]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f042 0201 	orr.w	r2, r2, #1
 80074d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80074d6:	2300      	movs	r3, #0
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3710      	adds	r7, #16
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b085      	sub	sp, #20
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d101      	bne.n	80074f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80074f4:	2302      	movs	r3, #2
 80074f6:	e05a      	b.n	80075ae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2201      	movs	r2, #1
 80074fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2202      	movs	r2, #2
 8007504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	689b      	ldr	r3, [r3, #8]
 8007516:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800751e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	68fa      	ldr	r2, [r7, #12]
 8007526:	4313      	orrs	r3, r2
 8007528:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	68fa      	ldr	r2, [r7, #12]
 8007530:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a21      	ldr	r2, [pc, #132]	; (80075bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d022      	beq.n	8007582 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007544:	d01d      	beq.n	8007582 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a1d      	ldr	r2, [pc, #116]	; (80075c0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d018      	beq.n	8007582 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a1b      	ldr	r2, [pc, #108]	; (80075c4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d013      	beq.n	8007582 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a1a      	ldr	r2, [pc, #104]	; (80075c8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d00e      	beq.n	8007582 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a18      	ldr	r2, [pc, #96]	; (80075cc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d009      	beq.n	8007582 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a17      	ldr	r2, [pc, #92]	; (80075d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d004      	beq.n	8007582 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a15      	ldr	r2, [pc, #84]	; (80075d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d10c      	bne.n	800759c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007588:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	68ba      	ldr	r2, [r7, #8]
 8007590:	4313      	orrs	r3, r2
 8007592:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	68ba      	ldr	r2, [r7, #8]
 800759a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2201      	movs	r2, #1
 80075a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075ac:	2300      	movs	r3, #0
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3714      	adds	r7, #20
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr
 80075ba:	bf00      	nop
 80075bc:	40010000 	.word	0x40010000
 80075c0:	40000400 	.word	0x40000400
 80075c4:	40000800 	.word	0x40000800
 80075c8:	40000c00 	.word	0x40000c00
 80075cc:	40010400 	.word	0x40010400
 80075d0:	40014000 	.word	0x40014000
 80075d4:	40001800 	.word	0x40001800

080075d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80075d8:	b480      	push	{r7}
 80075da:	b085      	sub	sp, #20
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80075e2:	2300      	movs	r3, #0
 80075e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d101      	bne.n	80075f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80075f0:	2302      	movs	r3, #2
 80075f2:	e03d      	b.n	8007670 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2201      	movs	r2, #1
 80075f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	68db      	ldr	r3, [r3, #12]
 8007606:	4313      	orrs	r3, r2
 8007608:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	4313      	orrs	r3, r2
 8007616:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	4313      	orrs	r3, r2
 8007624:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4313      	orrs	r3, r2
 8007632:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	691b      	ldr	r3, [r3, #16]
 800763e:	4313      	orrs	r3, r2
 8007640:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	695b      	ldr	r3, [r3, #20]
 800764c:	4313      	orrs	r3, r2
 800764e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	69db      	ldr	r3, [r3, #28]
 800765a:	4313      	orrs	r3, r2
 800765c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	68fa      	ldr	r2, [r7, #12]
 8007664:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2200      	movs	r2, #0
 800766a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800766e:	2300      	movs	r3, #0
}
 8007670:	4618      	mov	r0, r3
 8007672:	3714      	adds	r7, #20
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr

0800767c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800767c:	b480      	push	{r7}
 800767e:	b083      	sub	sp, #12
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007684:	bf00      	nop
 8007686:	370c      	adds	r7, #12
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr

08007690 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007690:	b480      	push	{r7}
 8007692:	b083      	sub	sp, #12
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007698:	bf00      	nop
 800769a:	370c      	adds	r7, #12
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr

080076a4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b087      	sub	sp, #28
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	60f8      	str	r0, [r7, #12]
 80076ac:	60b9      	str	r1, [r7, #8]
 80076ae:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	f003 031f 	and.w	r3, r3, #31
 80076b6:	2204      	movs	r2, #4
 80076b8:	fa02 f303 	lsl.w	r3, r2, r3
 80076bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	6a1a      	ldr	r2, [r3, #32]
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	43db      	mvns	r3, r3
 80076c6:	401a      	ands	r2, r3
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	6a1a      	ldr	r2, [r3, #32]
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	f003 031f 	and.w	r3, r3, #31
 80076d6:	6879      	ldr	r1, [r7, #4]
 80076d8:	fa01 f303 	lsl.w	r3, r1, r3
 80076dc:	431a      	orrs	r2, r3
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	621a      	str	r2, [r3, #32]
}
 80076e2:	bf00      	nop
 80076e4:	371c      	adds	r7, #28
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr

080076ee <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076ee:	b580      	push	{r7, lr}
 80076f0:	b082      	sub	sp, #8
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d101      	bne.n	8007700 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076fc:	2301      	movs	r3, #1
 80076fe:	e03f      	b.n	8007780 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007706:	b2db      	uxtb	r3, r3
 8007708:	2b00      	cmp	r3, #0
 800770a:	d106      	bne.n	800771a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2200      	movs	r2, #0
 8007710:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f7fb fd59 	bl	80031cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2224      	movs	r2, #36	; 0x24
 800771e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	68da      	ldr	r2, [r3, #12]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007730:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 fc82 	bl	800803c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	691a      	ldr	r2, [r3, #16]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007746:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	695a      	ldr	r2, [r3, #20]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007756:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	68da      	ldr	r2, [r3, #12]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007766:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2220      	movs	r2, #32
 8007772:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2220      	movs	r2, #32
 800777a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800777e:	2300      	movs	r3, #0
}
 8007780:	4618      	mov	r0, r3
 8007782:	3708      	adds	r7, #8
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}

08007788 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b082      	sub	sp, #8
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d101      	bne.n	800779a <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8007796:	2301      	movs	r3, #1
 8007798:	e047      	b.n	800782a <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d106      	bne.n	80077b4 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f7fb fd0c 	bl	80031cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2224      	movs	r2, #36	; 0x24
 80077b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	68da      	ldr	r2, [r3, #12]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80077ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 fc35 	bl	800803c <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	691a      	ldr	r2, [r3, #16]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80077e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	695a      	ldr	r2, [r3, #20]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80077f0:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	695a      	ldr	r2, [r3, #20]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f042 0208 	orr.w	r2, r2, #8
 8007800:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	68da      	ldr	r2, [r3, #12]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007810:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2200      	movs	r2, #0
 8007816:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2220      	movs	r2, #32
 800781c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2220      	movs	r2, #32
 8007824:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007828:	2300      	movs	r3, #0
}
 800782a:	4618      	mov	r0, r3
 800782c:	3708      	adds	r7, #8
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}
	...

08007834 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b086      	sub	sp, #24
 8007838:	af00      	add	r7, sp, #0
 800783a:	60f8      	str	r0, [r7, #12]
 800783c:	60b9      	str	r1, [r7, #8]
 800783e:	4613      	mov	r3, r2
 8007840:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007848:	b2db      	uxtb	r3, r3
 800784a:	2b20      	cmp	r3, #32
 800784c:	d153      	bne.n	80078f6 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d002      	beq.n	800785a <HAL_UART_Transmit_DMA+0x26>
 8007854:	88fb      	ldrh	r3, [r7, #6]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d101      	bne.n	800785e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800785a:	2301      	movs	r3, #1
 800785c:	e04c      	b.n	80078f8 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007864:	2b01      	cmp	r3, #1
 8007866:	d101      	bne.n	800786c <HAL_UART_Transmit_DMA+0x38>
 8007868:	2302      	movs	r3, #2
 800786a:	e045      	b.n	80078f8 <HAL_UART_Transmit_DMA+0xc4>
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2201      	movs	r2, #1
 8007870:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8007874:	68ba      	ldr	r2, [r7, #8]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	88fa      	ldrh	r2, [r7, #6]
 800787e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	88fa      	ldrh	r2, [r7, #6]
 8007884:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2200      	movs	r2, #0
 800788a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2221      	movs	r2, #33	; 0x21
 8007890:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007898:	4a19      	ldr	r2, [pc, #100]	; (8007900 <HAL_UART_Transmit_DMA+0xcc>)
 800789a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078a0:	4a18      	ldr	r2, [pc, #96]	; (8007904 <HAL_UART_Transmit_DMA+0xd0>)
 80078a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078a8:	4a17      	ldr	r2, [pc, #92]	; (8007908 <HAL_UART_Transmit_DMA+0xd4>)
 80078aa:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078b0:	2200      	movs	r2, #0
 80078b2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80078b4:	f107 0308 	add.w	r3, r7, #8
 80078b8:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	6819      	ldr	r1, [r3, #0]
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	3304      	adds	r3, #4
 80078c8:	461a      	mov	r2, r3
 80078ca:	88fb      	ldrh	r3, [r7, #6]
 80078cc:	f7fc fe50 	bl	8004570 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80078d8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2200      	movs	r2, #0
 80078de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	695a      	ldr	r2, [r3, #20]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80078f0:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80078f2:	2300      	movs	r3, #0
 80078f4:	e000      	b.n	80078f8 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80078f6:	2302      	movs	r3, #2
  }
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3718      	adds	r7, #24
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}
 8007900:	08007c49 	.word	0x08007c49
 8007904:	08007c9b 	.word	0x08007c9b
 8007908:	08007d3b 	.word	0x08007d3b

0800790c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b086      	sub	sp, #24
 8007910:	af00      	add	r7, sp, #0
 8007912:	60f8      	str	r0, [r7, #12]
 8007914:	60b9      	str	r1, [r7, #8]
 8007916:	4613      	mov	r3, r2
 8007918:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007920:	b2db      	uxtb	r3, r3
 8007922:	2b20      	cmp	r3, #32
 8007924:	d166      	bne.n	80079f4 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d002      	beq.n	8007932 <HAL_UART_Receive_DMA+0x26>
 800792c:	88fb      	ldrh	r3, [r7, #6]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d101      	bne.n	8007936 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007932:	2301      	movs	r3, #1
 8007934:	e05f      	b.n	80079f6 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800793c:	2b01      	cmp	r3, #1
 800793e:	d101      	bne.n	8007944 <HAL_UART_Receive_DMA+0x38>
 8007940:	2302      	movs	r3, #2
 8007942:	e058      	b.n	80079f6 <HAL_UART_Receive_DMA+0xea>
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2201      	movs	r2, #1
 8007948:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800794c:	68ba      	ldr	r2, [r7, #8]
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	88fa      	ldrh	r2, [r7, #6]
 8007956:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2200      	movs	r2, #0
 800795c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2222      	movs	r2, #34	; 0x22
 8007962:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800796a:	4a25      	ldr	r2, [pc, #148]	; (8007a00 <HAL_UART_Receive_DMA+0xf4>)
 800796c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007972:	4a24      	ldr	r2, [pc, #144]	; (8007a04 <HAL_UART_Receive_DMA+0xf8>)
 8007974:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800797a:	4a23      	ldr	r2, [pc, #140]	; (8007a08 <HAL_UART_Receive_DMA+0xfc>)
 800797c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007982:	2200      	movs	r2, #0
 8007984:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8007986:	f107 0308 	add.w	r3, r7, #8
 800798a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	3304      	adds	r3, #4
 8007996:	4619      	mov	r1, r3
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	88fb      	ldrh	r3, [r7, #6]
 800799e:	f7fc fde7 	bl	8004570 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80079a2:	2300      	movs	r3, #0
 80079a4:	613b      	str	r3, [r7, #16]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	613b      	str	r3, [r7, #16]
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	613b      	str	r3, [r7, #16]
 80079b6:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2200      	movs	r2, #0
 80079bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	68da      	ldr	r2, [r3, #12]
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80079ce:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	695a      	ldr	r2, [r3, #20]
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f042 0201 	orr.w	r2, r2, #1
 80079de:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	695a      	ldr	r2, [r3, #20]
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079ee:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80079f0:	2300      	movs	r3, #0
 80079f2:	e000      	b.n	80079f6 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80079f4:	2302      	movs	r3, #2
  }
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3718      	adds	r7, #24
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	08007cb7 	.word	0x08007cb7
 8007a04:	08007d1f 	.word	0x08007d1f
 8007a08:	08007d3b 	.word	0x08007d3b

08007a0c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b088      	sub	sp, #32
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	695b      	ldr	r3, [r3, #20]
 8007a2a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8007a30:	2300      	movs	r3, #0
 8007a32:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	f003 030f 	and.w	r3, r3, #15
 8007a3a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d10d      	bne.n	8007a5e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a42:	69fb      	ldr	r3, [r7, #28]
 8007a44:	f003 0320 	and.w	r3, r3, #32
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d008      	beq.n	8007a5e <HAL_UART_IRQHandler+0x52>
 8007a4c:	69bb      	ldr	r3, [r7, #24]
 8007a4e:	f003 0320 	and.w	r3, r3, #32
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d003      	beq.n	8007a5e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 fa6f 	bl	8007f3a <UART_Receive_IT>
      return;
 8007a5c:	e0d0      	b.n	8007c00 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	f000 80b0 	beq.w	8007bc6 <HAL_UART_IRQHandler+0x1ba>
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	f003 0301 	and.w	r3, r3, #1
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d105      	bne.n	8007a7c <HAL_UART_IRQHandler+0x70>
 8007a70:	69bb      	ldr	r3, [r7, #24]
 8007a72:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	f000 80a5 	beq.w	8007bc6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007a7c:	69fb      	ldr	r3, [r7, #28]
 8007a7e:	f003 0301 	and.w	r3, r3, #1
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00a      	beq.n	8007a9c <HAL_UART_IRQHandler+0x90>
 8007a86:	69bb      	ldr	r3, [r7, #24]
 8007a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d005      	beq.n	8007a9c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a94:	f043 0201 	orr.w	r2, r3, #1
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a9c:	69fb      	ldr	r3, [r7, #28]
 8007a9e:	f003 0304 	and.w	r3, r3, #4
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d00a      	beq.n	8007abc <HAL_UART_IRQHandler+0xb0>
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	f003 0301 	and.w	r3, r3, #1
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d005      	beq.n	8007abc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ab4:	f043 0202 	orr.w	r2, r3, #2
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007abc:	69fb      	ldr	r3, [r7, #28]
 8007abe:	f003 0302 	and.w	r3, r3, #2
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d00a      	beq.n	8007adc <HAL_UART_IRQHandler+0xd0>
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	f003 0301 	and.w	r3, r3, #1
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d005      	beq.n	8007adc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ad4:	f043 0204 	orr.w	r2, r3, #4
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007adc:	69fb      	ldr	r3, [r7, #28]
 8007ade:	f003 0308 	and.w	r3, r3, #8
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d00f      	beq.n	8007b06 <HAL_UART_IRQHandler+0xfa>
 8007ae6:	69bb      	ldr	r3, [r7, #24]
 8007ae8:	f003 0320 	and.w	r3, r3, #32
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d104      	bne.n	8007afa <HAL_UART_IRQHandler+0xee>
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	f003 0301 	and.w	r3, r3, #1
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d005      	beq.n	8007b06 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007afe:	f043 0208 	orr.w	r2, r3, #8
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d077      	beq.n	8007bfe <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007b0e:	69fb      	ldr	r3, [r7, #28]
 8007b10:	f003 0320 	and.w	r3, r3, #32
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d007      	beq.n	8007b28 <HAL_UART_IRQHandler+0x11c>
 8007b18:	69bb      	ldr	r3, [r7, #24]
 8007b1a:	f003 0320 	and.w	r3, r3, #32
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d002      	beq.n	8007b28 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 fa09 	bl	8007f3a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	695b      	ldr	r3, [r3, #20]
 8007b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b32:	2b40      	cmp	r3, #64	; 0x40
 8007b34:	bf0c      	ite	eq
 8007b36:	2301      	moveq	r3, #1
 8007b38:	2300      	movne	r3, #0
 8007b3a:	b2db      	uxtb	r3, r3
 8007b3c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b42:	f003 0308 	and.w	r3, r3, #8
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d102      	bne.n	8007b50 <HAL_UART_IRQHandler+0x144>
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d031      	beq.n	8007bb4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 f952 	bl	8007dfa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	695b      	ldr	r3, [r3, #20]
 8007b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b60:	2b40      	cmp	r3, #64	; 0x40
 8007b62:	d123      	bne.n	8007bac <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	695a      	ldr	r2, [r3, #20]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b72:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d013      	beq.n	8007ba4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b80:	4a21      	ldr	r2, [pc, #132]	; (8007c08 <HAL_UART_IRQHandler+0x1fc>)
 8007b82:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f7fc fdb9 	bl	8004700 <HAL_DMA_Abort_IT>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d016      	beq.n	8007bc2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b9a:	687a      	ldr	r2, [r7, #4]
 8007b9c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007b9e:	4610      	mov	r0, r2
 8007ba0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ba2:	e00e      	b.n	8007bc2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f7fa f9db 	bl	8001f60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007baa:	e00a      	b.n	8007bc2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f7fa f9d7 	bl	8001f60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bb2:	e006      	b.n	8007bc2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f7fa f9d3 	bl	8001f60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8007bc0:	e01d      	b.n	8007bfe <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bc2:	bf00      	nop
    return;
 8007bc4:	e01b      	b.n	8007bfe <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007bc6:	69fb      	ldr	r3, [r7, #28]
 8007bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d008      	beq.n	8007be2 <HAL_UART_IRQHandler+0x1d6>
 8007bd0:	69bb      	ldr	r3, [r7, #24]
 8007bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d003      	beq.n	8007be2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 f93f 	bl	8007e5e <UART_Transmit_IT>
    return;
 8007be0:	e00e      	b.n	8007c00 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007be2:	69fb      	ldr	r3, [r7, #28]
 8007be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d009      	beq.n	8007c00 <HAL_UART_IRQHandler+0x1f4>
 8007bec:	69bb      	ldr	r3, [r7, #24]
 8007bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d004      	beq.n	8007c00 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 f987 	bl	8007f0a <UART_EndTransmit_IT>
    return;
 8007bfc:	e000      	b.n	8007c00 <HAL_UART_IRQHandler+0x1f4>
    return;
 8007bfe:	bf00      	nop
  }
}
 8007c00:	3720      	adds	r7, #32
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}
 8007c06:	bf00      	nop
 8007c08:	08007e37 	.word	0x08007e37

08007c0c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007c14:	bf00      	nop
 8007c16:	370c      	adds	r7, #12
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr

08007c20 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b083      	sub	sp, #12
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007c28:	bf00      	nop
 8007c2a:	370c      	adds	r7, #12
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr

08007c34 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007c3c:	bf00      	nop
 8007c3e:	370c      	adds	r7, #12
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr

08007c48 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b084      	sub	sp, #16
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c54:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d113      	bne.n	8007c8c <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2200      	movs	r2, #0
 8007c68:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	695a      	ldr	r2, [r3, #20]
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c78:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	68da      	ldr	r2, [r3, #12]
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c88:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007c8a:	e002      	b.n	8007c92 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8007c8c:	68f8      	ldr	r0, [r7, #12]
 8007c8e:	f7ff ffbd 	bl	8007c0c <HAL_UART_TxCpltCallback>
}
 8007c92:	bf00      	nop
 8007c94:	3710      	adds	r7, #16
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}

08007c9a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007c9a:	b580      	push	{r7, lr}
 8007c9c:	b084      	sub	sp, #16
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ca6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007ca8:	68f8      	ldr	r0, [r7, #12]
 8007caa:	f7ff ffb9 	bl	8007c20 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007cae:	bf00      	nop
 8007cb0:	3710      	adds	r7, #16
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}

08007cb6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007cb6:	b580      	push	{r7, lr}
 8007cb8:	b084      	sub	sp, #16
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cc2:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d11e      	bne.n	8007d10 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	68da      	ldr	r2, [r3, #12]
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007ce6:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	695a      	ldr	r2, [r3, #20]
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f022 0201 	bic.w	r2, r2, #1
 8007cf6:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	695a      	ldr	r2, [r3, #20]
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d06:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2220      	movs	r2, #32
 8007d0c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8007d10:	68f8      	ldr	r0, [r7, #12]
 8007d12:	f7fa f8d9 	bl	8001ec8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d16:	bf00      	nop
 8007d18:	3710      	adds	r7, #16
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}

08007d1e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007d1e:	b580      	push	{r7, lr}
 8007d20:	b084      	sub	sp, #16
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d2a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8007d2c:	68f8      	ldr	r0, [r7, #12]
 8007d2e:	f7ff ff81 	bl	8007c34 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d32:	bf00      	nop
 8007d34:	3710      	adds	r7, #16
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}

08007d3a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007d3a:	b580      	push	{r7, lr}
 8007d3c:	b084      	sub	sp, #16
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007d42:	2300      	movs	r3, #0
 8007d44:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d4a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	695b      	ldr	r3, [r3, #20]
 8007d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d56:	2b80      	cmp	r3, #128	; 0x80
 8007d58:	bf0c      	ite	eq
 8007d5a:	2301      	moveq	r3, #1
 8007d5c:	2300      	movne	r3, #0
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007d68:	b2db      	uxtb	r3, r3
 8007d6a:	2b21      	cmp	r3, #33	; 0x21
 8007d6c:	d108      	bne.n	8007d80 <UART_DMAError+0x46>
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d005      	beq.n	8007d80 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	2200      	movs	r2, #0
 8007d78:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007d7a:	68b8      	ldr	r0, [r7, #8]
 8007d7c:	f000 f827 	bl	8007dce <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	695b      	ldr	r3, [r3, #20]
 8007d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d8a:	2b40      	cmp	r3, #64	; 0x40
 8007d8c:	bf0c      	ite	eq
 8007d8e:	2301      	moveq	r3, #1
 8007d90:	2300      	movne	r3, #0
 8007d92:	b2db      	uxtb	r3, r3
 8007d94:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	2b22      	cmp	r3, #34	; 0x22
 8007da0:	d108      	bne.n	8007db4 <UART_DMAError+0x7a>
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d005      	beq.n	8007db4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	2200      	movs	r2, #0
 8007dac:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007dae:	68b8      	ldr	r0, [r7, #8]
 8007db0:	f000 f823 	bl	8007dfa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007db8:	f043 0210 	orr.w	r2, r3, #16
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007dc0:	68b8      	ldr	r0, [r7, #8]
 8007dc2:	f7fa f8cd 	bl	8001f60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007dc6:	bf00      	nop
 8007dc8:	3710      	adds	r7, #16
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}

08007dce <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007dce:	b480      	push	{r7}
 8007dd0:	b083      	sub	sp, #12
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	68da      	ldr	r2, [r3, #12]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007de4:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2220      	movs	r2, #32
 8007dea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8007dee:	bf00      	nop
 8007df0:	370c      	adds	r7, #12
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr

08007dfa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007dfa:	b480      	push	{r7}
 8007dfc:	b083      	sub	sp, #12
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	68da      	ldr	r2, [r3, #12]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007e10:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	695a      	ldr	r2, [r3, #20]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f022 0201 	bic.w	r2, r2, #1
 8007e20:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2220      	movs	r2, #32
 8007e26:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8007e2a:	bf00      	nop
 8007e2c:	370c      	adds	r7, #12
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr

08007e36 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e36:	b580      	push	{r7, lr}
 8007e38:	b084      	sub	sp, #16
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e42:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2200      	movs	r2, #0
 8007e48:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e50:	68f8      	ldr	r0, [r7, #12]
 8007e52:	f7fa f885 	bl	8001f60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e56:	bf00      	nop
 8007e58:	3710      	adds	r7, #16
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}

08007e5e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007e5e:	b480      	push	{r7}
 8007e60:	b085      	sub	sp, #20
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	2b21      	cmp	r3, #33	; 0x21
 8007e70:	d144      	bne.n	8007efc <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e7a:	d11a      	bne.n	8007eb2 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6a1b      	ldr	r3, [r3, #32]
 8007e80:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	881b      	ldrh	r3, [r3, #0]
 8007e86:	461a      	mov	r2, r3
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e90:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	691b      	ldr	r3, [r3, #16]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d105      	bne.n	8007ea6 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6a1b      	ldr	r3, [r3, #32]
 8007e9e:	1c9a      	adds	r2, r3, #2
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	621a      	str	r2, [r3, #32]
 8007ea4:	e00e      	b.n	8007ec4 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6a1b      	ldr	r3, [r3, #32]
 8007eaa:	1c5a      	adds	r2, r3, #1
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	621a      	str	r2, [r3, #32]
 8007eb0:	e008      	b.n	8007ec4 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6a1b      	ldr	r3, [r3, #32]
 8007eb6:	1c59      	adds	r1, r3, #1
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	6211      	str	r1, [r2, #32]
 8007ebc:	781a      	ldrb	r2, [r3, #0]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	3b01      	subs	r3, #1
 8007ecc:	b29b      	uxth	r3, r3
 8007ece:	687a      	ldr	r2, [r7, #4]
 8007ed0:	4619      	mov	r1, r3
 8007ed2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d10f      	bne.n	8007ef8 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	68da      	ldr	r2, [r3, #12]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ee6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	68da      	ldr	r2, [r3, #12]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ef6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	e000      	b.n	8007efe <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007efc:	2302      	movs	r3, #2
  }
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3714      	adds	r7, #20
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr

08007f0a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f0a:	b580      	push	{r7, lr}
 8007f0c:	b082      	sub	sp, #8
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	68da      	ldr	r2, [r3, #12]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f20:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2220      	movs	r2, #32
 8007f26:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f7ff fe6e 	bl	8007c0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007f30:	2300      	movs	r3, #0
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3708      	adds	r7, #8
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}

08007f3a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007f3a:	b580      	push	{r7, lr}
 8007f3c:	b084      	sub	sp, #16
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	2b22      	cmp	r3, #34	; 0x22
 8007f4c:	d171      	bne.n	8008032 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	689b      	ldr	r3, [r3, #8]
 8007f52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f56:	d123      	bne.n	8007fa0 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f5c:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	691b      	ldr	r3, [r3, #16]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d10e      	bne.n	8007f84 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f72:	b29a      	uxth	r2, r3
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f7c:	1c9a      	adds	r2, r3, #2
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	629a      	str	r2, [r3, #40]	; 0x28
 8007f82:	e029      	b.n	8007fd8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	b29a      	uxth	r2, r3
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f98:	1c5a      	adds	r2, r3, #1
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	629a      	str	r2, [r3, #40]	; 0x28
 8007f9e:	e01b      	b.n	8007fd8 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	691b      	ldr	r3, [r3, #16]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d10a      	bne.n	8007fbe <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	6858      	ldr	r0, [r3, #4]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fb2:	1c59      	adds	r1, r3, #1
 8007fb4:	687a      	ldr	r2, [r7, #4]
 8007fb6:	6291      	str	r1, [r2, #40]	; 0x28
 8007fb8:	b2c2      	uxtb	r2, r0
 8007fba:	701a      	strb	r2, [r3, #0]
 8007fbc:	e00c      	b.n	8007fd8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	b2da      	uxtb	r2, r3
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fca:	1c58      	adds	r0, r3, #1
 8007fcc:	6879      	ldr	r1, [r7, #4]
 8007fce:	6288      	str	r0, [r1, #40]	; 0x28
 8007fd0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007fd4:	b2d2      	uxtb	r2, r2
 8007fd6:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	3b01      	subs	r3, #1
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	4619      	mov	r1, r3
 8007fe6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d120      	bne.n	800802e <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	68da      	ldr	r2, [r3, #12]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f022 0220 	bic.w	r2, r2, #32
 8007ffa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	68da      	ldr	r2, [r3, #12]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800800a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	695a      	ldr	r2, [r3, #20]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f022 0201 	bic.w	r2, r2, #1
 800801a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2220      	movs	r2, #32
 8008020:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f7f9 ff4f 	bl	8001ec8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800802a:	2300      	movs	r3, #0
 800802c:	e002      	b.n	8008034 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800802e:	2300      	movs	r3, #0
 8008030:	e000      	b.n	8008034 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8008032:	2302      	movs	r3, #2
  }
}
 8008034:	4618      	mov	r0, r3
 8008036:	3710      	adds	r7, #16
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800803c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008040:	b0bd      	sub	sp, #244	; 0xf4
 8008042:	af00      	add	r7, sp, #0
 8008044:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008048:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	691b      	ldr	r3, [r3, #16]
 8008050:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008058:	68d9      	ldr	r1, [r3, #12]
 800805a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800805e:	681a      	ldr	r2, [r3, #0]
 8008060:	ea40 0301 	orr.w	r3, r0, r1
 8008064:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800806a:	689a      	ldr	r2, [r3, #8]
 800806c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008070:	691b      	ldr	r3, [r3, #16]
 8008072:	431a      	orrs	r2, r3
 8008074:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008078:	695b      	ldr	r3, [r3, #20]
 800807a:	431a      	orrs	r2, r3
 800807c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008080:	69db      	ldr	r3, [r3, #28]
 8008082:	4313      	orrs	r3, r2
 8008084:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8008088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	68db      	ldr	r3, [r3, #12]
 8008090:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008094:	f021 010c 	bic.w	r1, r1, #12
 8008098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800809c:	681a      	ldr	r2, [r3, #0]
 800809e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80080a2:	430b      	orrs	r3, r1
 80080a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80080a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	695b      	ldr	r3, [r3, #20]
 80080ae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80080b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080b6:	6999      	ldr	r1, [r3, #24]
 80080b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080bc:	681a      	ldr	r2, [r3, #0]
 80080be:	ea40 0301 	orr.w	r3, r0, r1
 80080c2:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80080c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080c8:	69db      	ldr	r3, [r3, #28]
 80080ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080ce:	f040 81a5 	bne.w	800841c <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80080d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080d6:	681a      	ldr	r2, [r3, #0]
 80080d8:	4bcd      	ldr	r3, [pc, #820]	; (8008410 <UART_SetConfig+0x3d4>)
 80080da:	429a      	cmp	r2, r3
 80080dc:	d006      	beq.n	80080ec <UART_SetConfig+0xb0>
 80080de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080e2:	681a      	ldr	r2, [r3, #0]
 80080e4:	4bcb      	ldr	r3, [pc, #812]	; (8008414 <UART_SetConfig+0x3d8>)
 80080e6:	429a      	cmp	r2, r3
 80080e8:	f040 80cb 	bne.w	8008282 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80080ec:	f7fd ffaa 	bl	8006044 <HAL_RCC_GetPCLK2Freq>
 80080f0:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80080f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80080f8:	461c      	mov	r4, r3
 80080fa:	f04f 0500 	mov.w	r5, #0
 80080fe:	4622      	mov	r2, r4
 8008100:	462b      	mov	r3, r5
 8008102:	1891      	adds	r1, r2, r2
 8008104:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8008108:	415b      	adcs	r3, r3
 800810a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800810e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8008112:	1912      	adds	r2, r2, r4
 8008114:	eb45 0303 	adc.w	r3, r5, r3
 8008118:	f04f 0000 	mov.w	r0, #0
 800811c:	f04f 0100 	mov.w	r1, #0
 8008120:	00d9      	lsls	r1, r3, #3
 8008122:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008126:	00d0      	lsls	r0, r2, #3
 8008128:	4602      	mov	r2, r0
 800812a:	460b      	mov	r3, r1
 800812c:	1911      	adds	r1, r2, r4
 800812e:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8008132:	416b      	adcs	r3, r5
 8008134:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	461a      	mov	r2, r3
 8008140:	f04f 0300 	mov.w	r3, #0
 8008144:	1891      	adds	r1, r2, r2
 8008146:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800814a:	415b      	adcs	r3, r3
 800814c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008150:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8008154:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8008158:	f7f8 f85a 	bl	8000210 <__aeabi_uldivmod>
 800815c:	4602      	mov	r2, r0
 800815e:	460b      	mov	r3, r1
 8008160:	4bad      	ldr	r3, [pc, #692]	; (8008418 <UART_SetConfig+0x3dc>)
 8008162:	fba3 2302 	umull	r2, r3, r3, r2
 8008166:	095b      	lsrs	r3, r3, #5
 8008168:	011e      	lsls	r6, r3, #4
 800816a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800816e:	461c      	mov	r4, r3
 8008170:	f04f 0500 	mov.w	r5, #0
 8008174:	4622      	mov	r2, r4
 8008176:	462b      	mov	r3, r5
 8008178:	1891      	adds	r1, r2, r2
 800817a:	67b9      	str	r1, [r7, #120]	; 0x78
 800817c:	415b      	adcs	r3, r3
 800817e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008180:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8008184:	1912      	adds	r2, r2, r4
 8008186:	eb45 0303 	adc.w	r3, r5, r3
 800818a:	f04f 0000 	mov.w	r0, #0
 800818e:	f04f 0100 	mov.w	r1, #0
 8008192:	00d9      	lsls	r1, r3, #3
 8008194:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008198:	00d0      	lsls	r0, r2, #3
 800819a:	4602      	mov	r2, r0
 800819c:	460b      	mov	r3, r1
 800819e:	1911      	adds	r1, r2, r4
 80081a0:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80081a4:	416b      	adcs	r3, r5
 80081a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80081aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	461a      	mov	r2, r3
 80081b2:	f04f 0300 	mov.w	r3, #0
 80081b6:	1891      	adds	r1, r2, r2
 80081b8:	6739      	str	r1, [r7, #112]	; 0x70
 80081ba:	415b      	adcs	r3, r3
 80081bc:	677b      	str	r3, [r7, #116]	; 0x74
 80081be:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80081c2:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80081c6:	f7f8 f823 	bl	8000210 <__aeabi_uldivmod>
 80081ca:	4602      	mov	r2, r0
 80081cc:	460b      	mov	r3, r1
 80081ce:	4b92      	ldr	r3, [pc, #584]	; (8008418 <UART_SetConfig+0x3dc>)
 80081d0:	fba3 1302 	umull	r1, r3, r3, r2
 80081d4:	095b      	lsrs	r3, r3, #5
 80081d6:	2164      	movs	r1, #100	; 0x64
 80081d8:	fb01 f303 	mul.w	r3, r1, r3
 80081dc:	1ad3      	subs	r3, r2, r3
 80081de:	00db      	lsls	r3, r3, #3
 80081e0:	3332      	adds	r3, #50	; 0x32
 80081e2:	4a8d      	ldr	r2, [pc, #564]	; (8008418 <UART_SetConfig+0x3dc>)
 80081e4:	fba2 2303 	umull	r2, r3, r2, r3
 80081e8:	095b      	lsrs	r3, r3, #5
 80081ea:	005b      	lsls	r3, r3, #1
 80081ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80081f0:	441e      	add	r6, r3
 80081f2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80081f6:	4618      	mov	r0, r3
 80081f8:	f04f 0100 	mov.w	r1, #0
 80081fc:	4602      	mov	r2, r0
 80081fe:	460b      	mov	r3, r1
 8008200:	1894      	adds	r4, r2, r2
 8008202:	66bc      	str	r4, [r7, #104]	; 0x68
 8008204:	415b      	adcs	r3, r3
 8008206:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008208:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800820c:	1812      	adds	r2, r2, r0
 800820e:	eb41 0303 	adc.w	r3, r1, r3
 8008212:	f04f 0400 	mov.w	r4, #0
 8008216:	f04f 0500 	mov.w	r5, #0
 800821a:	00dd      	lsls	r5, r3, #3
 800821c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008220:	00d4      	lsls	r4, r2, #3
 8008222:	4622      	mov	r2, r4
 8008224:	462b      	mov	r3, r5
 8008226:	1814      	adds	r4, r2, r0
 8008228:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800822c:	414b      	adcs	r3, r1
 800822e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	461a      	mov	r2, r3
 800823a:	f04f 0300 	mov.w	r3, #0
 800823e:	1891      	adds	r1, r2, r2
 8008240:	6639      	str	r1, [r7, #96]	; 0x60
 8008242:	415b      	adcs	r3, r3
 8008244:	667b      	str	r3, [r7, #100]	; 0x64
 8008246:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800824a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800824e:	f7f7 ffdf 	bl	8000210 <__aeabi_uldivmod>
 8008252:	4602      	mov	r2, r0
 8008254:	460b      	mov	r3, r1
 8008256:	4b70      	ldr	r3, [pc, #448]	; (8008418 <UART_SetConfig+0x3dc>)
 8008258:	fba3 1302 	umull	r1, r3, r3, r2
 800825c:	095b      	lsrs	r3, r3, #5
 800825e:	2164      	movs	r1, #100	; 0x64
 8008260:	fb01 f303 	mul.w	r3, r1, r3
 8008264:	1ad3      	subs	r3, r2, r3
 8008266:	00db      	lsls	r3, r3, #3
 8008268:	3332      	adds	r3, #50	; 0x32
 800826a:	4a6b      	ldr	r2, [pc, #428]	; (8008418 <UART_SetConfig+0x3dc>)
 800826c:	fba2 2303 	umull	r2, r3, r2, r3
 8008270:	095b      	lsrs	r3, r3, #5
 8008272:	f003 0207 	and.w	r2, r3, #7
 8008276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4432      	add	r2, r6
 800827e:	609a      	str	r2, [r3, #8]
 8008280:	e26d      	b.n	800875e <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008282:	f7fd fecb 	bl	800601c <HAL_RCC_GetPCLK1Freq>
 8008286:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800828a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800828e:	461c      	mov	r4, r3
 8008290:	f04f 0500 	mov.w	r5, #0
 8008294:	4622      	mov	r2, r4
 8008296:	462b      	mov	r3, r5
 8008298:	1891      	adds	r1, r2, r2
 800829a:	65b9      	str	r1, [r7, #88]	; 0x58
 800829c:	415b      	adcs	r3, r3
 800829e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80082a0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80082a4:	1912      	adds	r2, r2, r4
 80082a6:	eb45 0303 	adc.w	r3, r5, r3
 80082aa:	f04f 0000 	mov.w	r0, #0
 80082ae:	f04f 0100 	mov.w	r1, #0
 80082b2:	00d9      	lsls	r1, r3, #3
 80082b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80082b8:	00d0      	lsls	r0, r2, #3
 80082ba:	4602      	mov	r2, r0
 80082bc:	460b      	mov	r3, r1
 80082be:	1911      	adds	r1, r2, r4
 80082c0:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80082c4:	416b      	adcs	r3, r5
 80082c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80082ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	461a      	mov	r2, r3
 80082d2:	f04f 0300 	mov.w	r3, #0
 80082d6:	1891      	adds	r1, r2, r2
 80082d8:	6539      	str	r1, [r7, #80]	; 0x50
 80082da:	415b      	adcs	r3, r3
 80082dc:	657b      	str	r3, [r7, #84]	; 0x54
 80082de:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80082e2:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80082e6:	f7f7 ff93 	bl	8000210 <__aeabi_uldivmod>
 80082ea:	4602      	mov	r2, r0
 80082ec:	460b      	mov	r3, r1
 80082ee:	4b4a      	ldr	r3, [pc, #296]	; (8008418 <UART_SetConfig+0x3dc>)
 80082f0:	fba3 2302 	umull	r2, r3, r3, r2
 80082f4:	095b      	lsrs	r3, r3, #5
 80082f6:	011e      	lsls	r6, r3, #4
 80082f8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80082fc:	461c      	mov	r4, r3
 80082fe:	f04f 0500 	mov.w	r5, #0
 8008302:	4622      	mov	r2, r4
 8008304:	462b      	mov	r3, r5
 8008306:	1891      	adds	r1, r2, r2
 8008308:	64b9      	str	r1, [r7, #72]	; 0x48
 800830a:	415b      	adcs	r3, r3
 800830c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800830e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008312:	1912      	adds	r2, r2, r4
 8008314:	eb45 0303 	adc.w	r3, r5, r3
 8008318:	f04f 0000 	mov.w	r0, #0
 800831c:	f04f 0100 	mov.w	r1, #0
 8008320:	00d9      	lsls	r1, r3, #3
 8008322:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008326:	00d0      	lsls	r0, r2, #3
 8008328:	4602      	mov	r2, r0
 800832a:	460b      	mov	r3, r1
 800832c:	1911      	adds	r1, r2, r4
 800832e:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8008332:	416b      	adcs	r3, r5
 8008334:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	461a      	mov	r2, r3
 8008340:	f04f 0300 	mov.w	r3, #0
 8008344:	1891      	adds	r1, r2, r2
 8008346:	6439      	str	r1, [r7, #64]	; 0x40
 8008348:	415b      	adcs	r3, r3
 800834a:	647b      	str	r3, [r7, #68]	; 0x44
 800834c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008350:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8008354:	f7f7 ff5c 	bl	8000210 <__aeabi_uldivmod>
 8008358:	4602      	mov	r2, r0
 800835a:	460b      	mov	r3, r1
 800835c:	4b2e      	ldr	r3, [pc, #184]	; (8008418 <UART_SetConfig+0x3dc>)
 800835e:	fba3 1302 	umull	r1, r3, r3, r2
 8008362:	095b      	lsrs	r3, r3, #5
 8008364:	2164      	movs	r1, #100	; 0x64
 8008366:	fb01 f303 	mul.w	r3, r1, r3
 800836a:	1ad3      	subs	r3, r2, r3
 800836c:	00db      	lsls	r3, r3, #3
 800836e:	3332      	adds	r3, #50	; 0x32
 8008370:	4a29      	ldr	r2, [pc, #164]	; (8008418 <UART_SetConfig+0x3dc>)
 8008372:	fba2 2303 	umull	r2, r3, r2, r3
 8008376:	095b      	lsrs	r3, r3, #5
 8008378:	005b      	lsls	r3, r3, #1
 800837a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800837e:	441e      	add	r6, r3
 8008380:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008384:	4618      	mov	r0, r3
 8008386:	f04f 0100 	mov.w	r1, #0
 800838a:	4602      	mov	r2, r0
 800838c:	460b      	mov	r3, r1
 800838e:	1894      	adds	r4, r2, r2
 8008390:	63bc      	str	r4, [r7, #56]	; 0x38
 8008392:	415b      	adcs	r3, r3
 8008394:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008396:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800839a:	1812      	adds	r2, r2, r0
 800839c:	eb41 0303 	adc.w	r3, r1, r3
 80083a0:	f04f 0400 	mov.w	r4, #0
 80083a4:	f04f 0500 	mov.w	r5, #0
 80083a8:	00dd      	lsls	r5, r3, #3
 80083aa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80083ae:	00d4      	lsls	r4, r2, #3
 80083b0:	4622      	mov	r2, r4
 80083b2:	462b      	mov	r3, r5
 80083b4:	1814      	adds	r4, r2, r0
 80083b6:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 80083ba:	414b      	adcs	r3, r1
 80083bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80083c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	461a      	mov	r2, r3
 80083c8:	f04f 0300 	mov.w	r3, #0
 80083cc:	1891      	adds	r1, r2, r2
 80083ce:	6339      	str	r1, [r7, #48]	; 0x30
 80083d0:	415b      	adcs	r3, r3
 80083d2:	637b      	str	r3, [r7, #52]	; 0x34
 80083d4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80083d8:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80083dc:	f7f7 ff18 	bl	8000210 <__aeabi_uldivmod>
 80083e0:	4602      	mov	r2, r0
 80083e2:	460b      	mov	r3, r1
 80083e4:	4b0c      	ldr	r3, [pc, #48]	; (8008418 <UART_SetConfig+0x3dc>)
 80083e6:	fba3 1302 	umull	r1, r3, r3, r2
 80083ea:	095b      	lsrs	r3, r3, #5
 80083ec:	2164      	movs	r1, #100	; 0x64
 80083ee:	fb01 f303 	mul.w	r3, r1, r3
 80083f2:	1ad3      	subs	r3, r2, r3
 80083f4:	00db      	lsls	r3, r3, #3
 80083f6:	3332      	adds	r3, #50	; 0x32
 80083f8:	4a07      	ldr	r2, [pc, #28]	; (8008418 <UART_SetConfig+0x3dc>)
 80083fa:	fba2 2303 	umull	r2, r3, r2, r3
 80083fe:	095b      	lsrs	r3, r3, #5
 8008400:	f003 0207 	and.w	r2, r3, #7
 8008404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4432      	add	r2, r6
 800840c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800840e:	e1a6      	b.n	800875e <UART_SetConfig+0x722>
 8008410:	40011000 	.word	0x40011000
 8008414:	40011400 	.word	0x40011400
 8008418:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800841c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008420:	681a      	ldr	r2, [r3, #0]
 8008422:	4bd1      	ldr	r3, [pc, #836]	; (8008768 <UART_SetConfig+0x72c>)
 8008424:	429a      	cmp	r2, r3
 8008426:	d006      	beq.n	8008436 <UART_SetConfig+0x3fa>
 8008428:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800842c:	681a      	ldr	r2, [r3, #0]
 800842e:	4bcf      	ldr	r3, [pc, #828]	; (800876c <UART_SetConfig+0x730>)
 8008430:	429a      	cmp	r2, r3
 8008432:	f040 80ca 	bne.w	80085ca <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008436:	f7fd fe05 	bl	8006044 <HAL_RCC_GetPCLK2Freq>
 800843a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800843e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008442:	461c      	mov	r4, r3
 8008444:	f04f 0500 	mov.w	r5, #0
 8008448:	4622      	mov	r2, r4
 800844a:	462b      	mov	r3, r5
 800844c:	1891      	adds	r1, r2, r2
 800844e:	62b9      	str	r1, [r7, #40]	; 0x28
 8008450:	415b      	adcs	r3, r3
 8008452:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008454:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008458:	1912      	adds	r2, r2, r4
 800845a:	eb45 0303 	adc.w	r3, r5, r3
 800845e:	f04f 0000 	mov.w	r0, #0
 8008462:	f04f 0100 	mov.w	r1, #0
 8008466:	00d9      	lsls	r1, r3, #3
 8008468:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800846c:	00d0      	lsls	r0, r2, #3
 800846e:	4602      	mov	r2, r0
 8008470:	460b      	mov	r3, r1
 8008472:	eb12 0a04 	adds.w	sl, r2, r4
 8008476:	eb43 0b05 	adc.w	fp, r3, r5
 800847a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	4618      	mov	r0, r3
 8008482:	f04f 0100 	mov.w	r1, #0
 8008486:	f04f 0200 	mov.w	r2, #0
 800848a:	f04f 0300 	mov.w	r3, #0
 800848e:	008b      	lsls	r3, r1, #2
 8008490:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008494:	0082      	lsls	r2, r0, #2
 8008496:	4650      	mov	r0, sl
 8008498:	4659      	mov	r1, fp
 800849a:	f7f7 feb9 	bl	8000210 <__aeabi_uldivmod>
 800849e:	4602      	mov	r2, r0
 80084a0:	460b      	mov	r3, r1
 80084a2:	4bb3      	ldr	r3, [pc, #716]	; (8008770 <UART_SetConfig+0x734>)
 80084a4:	fba3 2302 	umull	r2, r3, r3, r2
 80084a8:	095b      	lsrs	r3, r3, #5
 80084aa:	011e      	lsls	r6, r3, #4
 80084ac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80084b0:	4618      	mov	r0, r3
 80084b2:	f04f 0100 	mov.w	r1, #0
 80084b6:	4602      	mov	r2, r0
 80084b8:	460b      	mov	r3, r1
 80084ba:	1894      	adds	r4, r2, r2
 80084bc:	623c      	str	r4, [r7, #32]
 80084be:	415b      	adcs	r3, r3
 80084c0:	627b      	str	r3, [r7, #36]	; 0x24
 80084c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80084c6:	1812      	adds	r2, r2, r0
 80084c8:	eb41 0303 	adc.w	r3, r1, r3
 80084cc:	f04f 0400 	mov.w	r4, #0
 80084d0:	f04f 0500 	mov.w	r5, #0
 80084d4:	00dd      	lsls	r5, r3, #3
 80084d6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80084da:	00d4      	lsls	r4, r2, #3
 80084dc:	4622      	mov	r2, r4
 80084de:	462b      	mov	r3, r5
 80084e0:	1814      	adds	r4, r2, r0
 80084e2:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80084e6:	414b      	adcs	r3, r1
 80084e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80084ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084f0:	685b      	ldr	r3, [r3, #4]
 80084f2:	4618      	mov	r0, r3
 80084f4:	f04f 0100 	mov.w	r1, #0
 80084f8:	f04f 0200 	mov.w	r2, #0
 80084fc:	f04f 0300 	mov.w	r3, #0
 8008500:	008b      	lsls	r3, r1, #2
 8008502:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008506:	0082      	lsls	r2, r0, #2
 8008508:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800850c:	f7f7 fe80 	bl	8000210 <__aeabi_uldivmod>
 8008510:	4602      	mov	r2, r0
 8008512:	460b      	mov	r3, r1
 8008514:	4b96      	ldr	r3, [pc, #600]	; (8008770 <UART_SetConfig+0x734>)
 8008516:	fba3 1302 	umull	r1, r3, r3, r2
 800851a:	095b      	lsrs	r3, r3, #5
 800851c:	2164      	movs	r1, #100	; 0x64
 800851e:	fb01 f303 	mul.w	r3, r1, r3
 8008522:	1ad3      	subs	r3, r2, r3
 8008524:	011b      	lsls	r3, r3, #4
 8008526:	3332      	adds	r3, #50	; 0x32
 8008528:	4a91      	ldr	r2, [pc, #580]	; (8008770 <UART_SetConfig+0x734>)
 800852a:	fba2 2303 	umull	r2, r3, r2, r3
 800852e:	095b      	lsrs	r3, r3, #5
 8008530:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008534:	441e      	add	r6, r3
 8008536:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800853a:	4618      	mov	r0, r3
 800853c:	f04f 0100 	mov.w	r1, #0
 8008540:	4602      	mov	r2, r0
 8008542:	460b      	mov	r3, r1
 8008544:	1894      	adds	r4, r2, r2
 8008546:	61bc      	str	r4, [r7, #24]
 8008548:	415b      	adcs	r3, r3
 800854a:	61fb      	str	r3, [r7, #28]
 800854c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008550:	1812      	adds	r2, r2, r0
 8008552:	eb41 0303 	adc.w	r3, r1, r3
 8008556:	f04f 0400 	mov.w	r4, #0
 800855a:	f04f 0500 	mov.w	r5, #0
 800855e:	00dd      	lsls	r5, r3, #3
 8008560:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008564:	00d4      	lsls	r4, r2, #3
 8008566:	4622      	mov	r2, r4
 8008568:	462b      	mov	r3, r5
 800856a:	1814      	adds	r4, r2, r0
 800856c:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8008570:	414b      	adcs	r3, r1
 8008572:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	4618      	mov	r0, r3
 800857e:	f04f 0100 	mov.w	r1, #0
 8008582:	f04f 0200 	mov.w	r2, #0
 8008586:	f04f 0300 	mov.w	r3, #0
 800858a:	008b      	lsls	r3, r1, #2
 800858c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008590:	0082      	lsls	r2, r0, #2
 8008592:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8008596:	f7f7 fe3b 	bl	8000210 <__aeabi_uldivmod>
 800859a:	4602      	mov	r2, r0
 800859c:	460b      	mov	r3, r1
 800859e:	4b74      	ldr	r3, [pc, #464]	; (8008770 <UART_SetConfig+0x734>)
 80085a0:	fba3 1302 	umull	r1, r3, r3, r2
 80085a4:	095b      	lsrs	r3, r3, #5
 80085a6:	2164      	movs	r1, #100	; 0x64
 80085a8:	fb01 f303 	mul.w	r3, r1, r3
 80085ac:	1ad3      	subs	r3, r2, r3
 80085ae:	011b      	lsls	r3, r3, #4
 80085b0:	3332      	adds	r3, #50	; 0x32
 80085b2:	4a6f      	ldr	r2, [pc, #444]	; (8008770 <UART_SetConfig+0x734>)
 80085b4:	fba2 2303 	umull	r2, r3, r2, r3
 80085b8:	095b      	lsrs	r3, r3, #5
 80085ba:	f003 020f 	and.w	r2, r3, #15
 80085be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4432      	add	r2, r6
 80085c6:	609a      	str	r2, [r3, #8]
 80085c8:	e0c9      	b.n	800875e <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 80085ca:	f7fd fd27 	bl	800601c <HAL_RCC_GetPCLK1Freq>
 80085ce:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80085d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80085d6:	461c      	mov	r4, r3
 80085d8:	f04f 0500 	mov.w	r5, #0
 80085dc:	4622      	mov	r2, r4
 80085de:	462b      	mov	r3, r5
 80085e0:	1891      	adds	r1, r2, r2
 80085e2:	6139      	str	r1, [r7, #16]
 80085e4:	415b      	adcs	r3, r3
 80085e6:	617b      	str	r3, [r7, #20]
 80085e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80085ec:	1912      	adds	r2, r2, r4
 80085ee:	eb45 0303 	adc.w	r3, r5, r3
 80085f2:	f04f 0000 	mov.w	r0, #0
 80085f6:	f04f 0100 	mov.w	r1, #0
 80085fa:	00d9      	lsls	r1, r3, #3
 80085fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008600:	00d0      	lsls	r0, r2, #3
 8008602:	4602      	mov	r2, r0
 8008604:	460b      	mov	r3, r1
 8008606:	eb12 0804 	adds.w	r8, r2, r4
 800860a:	eb43 0905 	adc.w	r9, r3, r5
 800860e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	4618      	mov	r0, r3
 8008616:	f04f 0100 	mov.w	r1, #0
 800861a:	f04f 0200 	mov.w	r2, #0
 800861e:	f04f 0300 	mov.w	r3, #0
 8008622:	008b      	lsls	r3, r1, #2
 8008624:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008628:	0082      	lsls	r2, r0, #2
 800862a:	4640      	mov	r0, r8
 800862c:	4649      	mov	r1, r9
 800862e:	f7f7 fdef 	bl	8000210 <__aeabi_uldivmod>
 8008632:	4602      	mov	r2, r0
 8008634:	460b      	mov	r3, r1
 8008636:	4b4e      	ldr	r3, [pc, #312]	; (8008770 <UART_SetConfig+0x734>)
 8008638:	fba3 2302 	umull	r2, r3, r3, r2
 800863c:	095b      	lsrs	r3, r3, #5
 800863e:	011e      	lsls	r6, r3, #4
 8008640:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008644:	4618      	mov	r0, r3
 8008646:	f04f 0100 	mov.w	r1, #0
 800864a:	4602      	mov	r2, r0
 800864c:	460b      	mov	r3, r1
 800864e:	1894      	adds	r4, r2, r2
 8008650:	60bc      	str	r4, [r7, #8]
 8008652:	415b      	adcs	r3, r3
 8008654:	60fb      	str	r3, [r7, #12]
 8008656:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800865a:	1812      	adds	r2, r2, r0
 800865c:	eb41 0303 	adc.w	r3, r1, r3
 8008660:	f04f 0400 	mov.w	r4, #0
 8008664:	f04f 0500 	mov.w	r5, #0
 8008668:	00dd      	lsls	r5, r3, #3
 800866a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800866e:	00d4      	lsls	r4, r2, #3
 8008670:	4622      	mov	r2, r4
 8008672:	462b      	mov	r3, r5
 8008674:	1814      	adds	r4, r2, r0
 8008676:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800867a:	414b      	adcs	r3, r1
 800867c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	4618      	mov	r0, r3
 8008688:	f04f 0100 	mov.w	r1, #0
 800868c:	f04f 0200 	mov.w	r2, #0
 8008690:	f04f 0300 	mov.w	r3, #0
 8008694:	008b      	lsls	r3, r1, #2
 8008696:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800869a:	0082      	lsls	r2, r0, #2
 800869c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80086a0:	f7f7 fdb6 	bl	8000210 <__aeabi_uldivmod>
 80086a4:	4602      	mov	r2, r0
 80086a6:	460b      	mov	r3, r1
 80086a8:	4b31      	ldr	r3, [pc, #196]	; (8008770 <UART_SetConfig+0x734>)
 80086aa:	fba3 1302 	umull	r1, r3, r3, r2
 80086ae:	095b      	lsrs	r3, r3, #5
 80086b0:	2164      	movs	r1, #100	; 0x64
 80086b2:	fb01 f303 	mul.w	r3, r1, r3
 80086b6:	1ad3      	subs	r3, r2, r3
 80086b8:	011b      	lsls	r3, r3, #4
 80086ba:	3332      	adds	r3, #50	; 0x32
 80086bc:	4a2c      	ldr	r2, [pc, #176]	; (8008770 <UART_SetConfig+0x734>)
 80086be:	fba2 2303 	umull	r2, r3, r2, r3
 80086c2:	095b      	lsrs	r3, r3, #5
 80086c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80086c8:	441e      	add	r6, r3
 80086ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80086ce:	4618      	mov	r0, r3
 80086d0:	f04f 0100 	mov.w	r1, #0
 80086d4:	4602      	mov	r2, r0
 80086d6:	460b      	mov	r3, r1
 80086d8:	1894      	adds	r4, r2, r2
 80086da:	603c      	str	r4, [r7, #0]
 80086dc:	415b      	adcs	r3, r3
 80086de:	607b      	str	r3, [r7, #4]
 80086e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086e4:	1812      	adds	r2, r2, r0
 80086e6:	eb41 0303 	adc.w	r3, r1, r3
 80086ea:	f04f 0400 	mov.w	r4, #0
 80086ee:	f04f 0500 	mov.w	r5, #0
 80086f2:	00dd      	lsls	r5, r3, #3
 80086f4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80086f8:	00d4      	lsls	r4, r2, #3
 80086fa:	4622      	mov	r2, r4
 80086fc:	462b      	mov	r3, r5
 80086fe:	1814      	adds	r4, r2, r0
 8008700:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8008704:	414b      	adcs	r3, r1
 8008706:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800870a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	4618      	mov	r0, r3
 8008712:	f04f 0100 	mov.w	r1, #0
 8008716:	f04f 0200 	mov.w	r2, #0
 800871a:	f04f 0300 	mov.w	r3, #0
 800871e:	008b      	lsls	r3, r1, #2
 8008720:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008724:	0082      	lsls	r2, r0, #2
 8008726:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800872a:	f7f7 fd71 	bl	8000210 <__aeabi_uldivmod>
 800872e:	4602      	mov	r2, r0
 8008730:	460b      	mov	r3, r1
 8008732:	4b0f      	ldr	r3, [pc, #60]	; (8008770 <UART_SetConfig+0x734>)
 8008734:	fba3 1302 	umull	r1, r3, r3, r2
 8008738:	095b      	lsrs	r3, r3, #5
 800873a:	2164      	movs	r1, #100	; 0x64
 800873c:	fb01 f303 	mul.w	r3, r1, r3
 8008740:	1ad3      	subs	r3, r2, r3
 8008742:	011b      	lsls	r3, r3, #4
 8008744:	3332      	adds	r3, #50	; 0x32
 8008746:	4a0a      	ldr	r2, [pc, #40]	; (8008770 <UART_SetConfig+0x734>)
 8008748:	fba2 2303 	umull	r2, r3, r2, r3
 800874c:	095b      	lsrs	r3, r3, #5
 800874e:	f003 020f 	and.w	r2, r3, #15
 8008752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4432      	add	r2, r6
 800875a:	609a      	str	r2, [r3, #8]
}
 800875c:	e7ff      	b.n	800875e <UART_SetConfig+0x722>
 800875e:	bf00      	nop
 8008760:	37f4      	adds	r7, #244	; 0xf4
 8008762:	46bd      	mov	sp, r7
 8008764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008768:	40011000 	.word	0x40011000
 800876c:	40011400 	.word	0x40011400
 8008770:	51eb851f 	.word	0x51eb851f

08008774 <__read_flags>:


/*
 * Reads the flag status register and returns the value of the 8-bits register
 */
uint8_t __read_flags() {
 8008774:	b580      	push	{r7, lr}
 8008776:	b090      	sub	sp, #64	; 0x40
 8008778:	af00      	add	r7, sp, #0
	Command cmd = get_default_command();
 800877a:	f107 0308 	add.w	r3, r7, #8
 800877e:	4618      	mov	r0, r3
 8008780:	f000 f988 	bl	8008a94 <get_default_command>
	with_data(&cmd, 1);
 8008784:	f107 0308 	add.w	r3, r7, #8
 8008788:	2101      	movs	r1, #1
 800878a:	4618      	mov	r0, r3
 800878c:	f000 f9b8 	bl	8008b00 <with_data>

	if(!qspi_run(&cmd, READ_FLAG_STATUS_REGISTER)) {
 8008790:	f107 0308 	add.w	r3, r7, #8
 8008794:	2170      	movs	r1, #112	; 0x70
 8008796:	4618      	mov	r0, r3
 8008798:	f000 f9c4 	bl	8008b24 <qspi_run>

	}

	uint8_t flags;

	if(!qspi_receive(&flags)) {
 800879c:	1dfb      	adds	r3, r7, #7
 800879e:	4618      	mov	r0, r3
 80087a0:	f000 fa28 	bl	8008bf4 <qspi_receive>

	}

	return flags;
 80087a4:	79fb      	ldrb	r3, [r7, #7]
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3740      	adds	r7, #64	; 0x40
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}

080087ae <__write_enable_latch>:

/*
 * Enables the write latch.
 * This function must be called before each PROGRAM or ERASE operation.
 */
bool __write_enable_latch() {
 80087ae:	b5b0      	push	{r4, r5, r7, lr}
 80087b0:	b09c      	sub	sp, #112	; 0x70
 80087b2:	af00      	add	r7, sp, #0
	Command cmd = get_default_command();
 80087b4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80087b8:	4618      	mov	r0, r3
 80087ba:	f000 f96b 	bl	8008a94 <get_default_command>

	if(qspi_run(&cmd, WRITE_ENABLE_LATCH)) {
 80087be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80087c2:	2106      	movs	r1, #6
 80087c4:	4618      	mov	r0, r3
 80087c6:	f000 f9ad 	bl	8008b24 <qspi_run>
 80087ca:	4603      	mov	r3, r0
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d022      	beq.n	8008816 <__write_enable_latch+0x68>
		cmd = get_default_command();
 80087d0:	463b      	mov	r3, r7
 80087d2:	4618      	mov	r0, r3
 80087d4:	f000 f95e 	bl	8008a94 <get_default_command>
 80087d8:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80087dc:	463d      	mov	r5, r7
 80087de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80087e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80087e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80087e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80087e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80087e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80087ea:	e895 0003 	ldmia.w	r5, {r0, r1}
 80087ee:	e884 0003 	stmia.w	r4, {r0, r1}

		with_data(&cmd, 1);
 80087f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80087f6:	2101      	movs	r1, #1
 80087f8:	4618      	mov	r0, r3
 80087fa:	f000 f981 	bl	8008b00 <with_data>

		if(qspi_poll(&cmd, READ_STATUS_REGISTER, 1, true)) {
 80087fe:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8008802:	2301      	movs	r3, #1
 8008804:	2201      	movs	r2, #1
 8008806:	2105      	movs	r1, #5
 8008808:	f000 f9a8 	bl	8008b5c <qspi_poll>
 800880c:	4603      	mov	r3, r0
 800880e:	2b00      	cmp	r3, #0
 8008810:	d001      	beq.n	8008816 <__write_enable_latch+0x68>
			return true;
 8008812:	2301      	movs	r3, #1
 8008814:	e000      	b.n	8008818 <__write_enable_latch+0x6a>
		}
	}

	return false;
 8008816:	2300      	movs	r3, #0
}
 8008818:	4618      	mov	r0, r3
 800881a:	3770      	adds	r7, #112	; 0x70
 800881c:	46bd      	mov	sp, r7
 800881e:	bdb0      	pop	{r4, r5, r7, pc}

08008820 <__write_disable_latch>:

/*
 * Call this function to prevent data corruption when a hardware fault (e.g. protection fault) occurs.
 * Please refer to the documentation for details.
 */
bool __write_disable_latch() {
 8008820:	b580      	push	{r7, lr}
 8008822:	b08e      	sub	sp, #56	; 0x38
 8008824:	af00      	add	r7, sp, #0
	Command cmd = get_default_command();
 8008826:	463b      	mov	r3, r7
 8008828:	4618      	mov	r0, r3
 800882a:	f000 f933 	bl	8008a94 <get_default_command>
	return qspi_run(&cmd, WRITE_ENABLE_LATCH);
 800882e:	463b      	mov	r3, r7
 8008830:	2106      	movs	r1, #6
 8008832:	4618      	mov	r0, r3
 8008834:	f000 f976 	bl	8008b24 <qspi_run>
 8008838:	4603      	mov	r3, r0
}
 800883a:	4618      	mov	r0, r3
 800883c:	3738      	adds	r7, #56	; 0x38
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}

08008842 <flash_init>:

/*
 * Initialises the flash driver
 */
void flash_init() {
 8008842:	b580      	push	{r7, lr}
 8008844:	b090      	sub	sp, #64	; 0x40
 8008846:	af00      	add	r7, sp, #0
	uint8_t configuration = 0b00011011; // 1 Dummy cycle
 8008848:	231b      	movs	r3, #27
 800884a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	Command cmd = get_default_command();
 800884e:	1d3b      	adds	r3, r7, #4
 8008850:	4618      	mov	r0, r3
 8008852:	f000 f91f 	bl	8008a94 <get_default_command>
	with_data(&cmd, 1);
 8008856:	1d3b      	adds	r3, r7, #4
 8008858:	2101      	movs	r1, #1
 800885a:	4618      	mov	r0, r3
 800885c:	f000 f950 	bl	8008b00 <with_data>

	__write_enable_latch();
 8008860:	f7ff ffa5 	bl	80087ae <__write_enable_latch>

	if(!qspi_run(&cmd, 0x81)) { // Write volatile configuration register
 8008864:	1d3b      	adds	r3, r7, #4
 8008866:	2181      	movs	r1, #129	; 0x81
 8008868:	4618      	mov	r0, r3
 800886a:	f000 f95b 	bl	8008b24 <qspi_run>

	}

	if(!qspi_transmit(&configuration)) {
 800886e:	f107 033f 	add.w	r3, r7, #63	; 0x3f
 8008872:	4618      	mov	r0, r3
 8008874:	f000 f9a8 	bl	8008bc8 <qspi_transmit>

	}

	if(!qspi_poll(&cmd, READ_FLAG_STATUS_REGISTER, 7, true)) {
 8008878:	1d38      	adds	r0, r7, #4
 800887a:	2301      	movs	r3, #1
 800887c:	2207      	movs	r2, #7
 800887e:	2170      	movs	r1, #112	; 0x70
 8008880:	f000 f96c 	bl	8008b5c <qspi_poll>

	}
}
 8008884:	bf00      	nop
 8008886:	3740      	adds	r7, #64	; 0x40
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}

0800888c <flash_read>:
 * Test providers:
 * 	 - read_ut.c
 *
 */

void flash_read(uint32_t address, uint8_t* buffer, uint32_t length) {
 800888c:	b580      	push	{r7, lr}
 800888e:	b084      	sub	sp, #16
 8008890:	af00      	add	r7, sp, #0
 8008892:	60f8      	str	r0, [r7, #12]
 8008894:	60b9      	str	r1, [r7, #8]
 8008896:	607a      	str	r2, [r7, #4]
	while(QUADSPI->SR & QUADSPI_SR_BUSY);
 8008898:	bf00      	nop
 800889a:	4b12      	ldr	r3, [pc, #72]	; (80088e4 <flash_read+0x58>)
 800889c:	689b      	ldr	r3, [r3, #8]
 800889e:	f003 0320 	and.w	r3, r3, #32
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d1f9      	bne.n	800889a <flash_read+0xe>
	QUADSPI->CCR = (uint32_t) (FREAD_SINGLE) | (0b00000001 << 24) | (0b00000100 << 16) | (0b00100101 << 8);
 80088a6:	4b0f      	ldr	r3, [pc, #60]	; (80088e4 <flash_read+0x58>)
 80088a8:	4a0f      	ldr	r2, [pc, #60]	; (80088e8 <flash_read+0x5c>)
 80088aa:	615a      	str	r2, [r3, #20]
	while(QUADSPI->SR & QUADSPI_SR_BUSY);
 80088ac:	bf00      	nop
 80088ae:	4b0d      	ldr	r3, [pc, #52]	; (80088e4 <flash_read+0x58>)
 80088b0:	689b      	ldr	r3, [r3, #8]
 80088b2:	f003 0320 	and.w	r3, r3, #32
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d1f9      	bne.n	80088ae <flash_read+0x22>
	QUADSPI->AR = address;
 80088ba:	4a0a      	ldr	r2, [pc, #40]	; (80088e4 <flash_read+0x58>)
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	6193      	str	r3, [r2, #24]
	while(QUADSPI->SR & QUADSPI_SR_BUSY);
 80088c0:	bf00      	nop
 80088c2:	4b08      	ldr	r3, [pc, #32]	; (80088e4 <flash_read+0x58>)
 80088c4:	689b      	ldr	r3, [r3, #8]
 80088c6:	f003 0320 	and.w	r3, r3, #32
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d1f9      	bne.n	80088c2 <flash_read+0x36>
	QUADSPI->DLR = length;
 80088ce:	4a05      	ldr	r2, [pc, #20]	; (80088e4 <flash_read+0x58>)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6113      	str	r3, [r2, #16]

	if(!qspi_receive(buffer)) {
 80088d4:	68b8      	ldr	r0, [r7, #8]
 80088d6:	f000 f98d 	bl	8008bf4 <qspi_receive>

	}
}
 80088da:	bf00      	nop
 80088dc:	3710      	adds	r7, #16
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}
 80088e2:	bf00      	nop
 80088e4:	a0001000 	.word	0xa0001000
 80088e8:	0104250b 	.word	0x0104250b

080088ec <__flash_write_page>:
 * Test providers:
 * 	 - write_ut.c
 *
 */

void __flash_write_page(uint32_t address, uint8_t* buffer, uint32_t length) {
 80088ec:	b5b0      	push	{r4, r5, r7, lr}
 80088ee:	b0a2      	sub	sp, #136	; 0x88
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6478      	str	r0, [r7, #68]	; 0x44
 80088f4:	6439      	str	r1, [r7, #64]	; 0x40
 80088f6:	63fa      	str	r2, [r7, #60]	; 0x3c
	__write_enable_latch();
 80088f8:	f7ff ff59 	bl	80087ae <__write_enable_latch>

	Command cmd = get_default_command();
 80088fc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008900:	4618      	mov	r0, r3
 8008902:	f000 f8c7 	bl	8008a94 <get_default_command>

	with_address(&cmd, address);
 8008906:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800890a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800890c:	4618      	mov	r0, r3
 800890e:	f000 f8e1 	bl	8008ad4 <with_address>
	with_data(&cmd, length);
 8008912:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008916:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008918:	4618      	mov	r0, r3
 800891a:	f000 f8f1 	bl	8008b00 <with_data>

	if(!qspi_run(&cmd, WRITE_SINGLE)) {
 800891e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008922:	2102      	movs	r1, #2
 8008924:	4618      	mov	r0, r3
 8008926:	f000 f8fd 	bl	8008b24 <qspi_run>

	}

	if(!qspi_transmit(buffer)) {
 800892a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800892c:	f000 f94c 	bl	8008bc8 <qspi_transmit>

	/*
	 * Checks if the controller is ready to proceed to the next command
	 */

	cmd = get_default_command();
 8008930:	463b      	mov	r3, r7
 8008932:	4618      	mov	r0, r3
 8008934:	f000 f8ae 	bl	8008a94 <get_default_command>
 8008938:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800893c:	463d      	mov	r5, r7
 800893e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008940:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008942:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008944:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008946:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008948:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800894a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800894e:	e884 0003 	stmia.w	r4, {r0, r1}
	with_data(&cmd, 1);
 8008952:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008956:	2101      	movs	r1, #1
 8008958:	4618      	mov	r0, r3
 800895a:	f000 f8d1 	bl	8008b00 <with_data>

	if(!qspi_poll(&cmd, READ_FLAG_STATUS_REGISTER, 7, true)) {
 800895e:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8008962:	2301      	movs	r3, #1
 8008964:	2207      	movs	r2, #7
 8008966:	2170      	movs	r1, #112	; 0x70
 8008968:	f000 f8f8 	bl	8008b5c <qspi_poll>

	}

	uint8_t flags = __read_flags();
 800896c:	f7ff ff02 	bl	8008774 <__read_flags>
 8008970:	4603      	mov	r3, r0
 8008972:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	// Checks if the protection fault flag is set
	if(flags & (1 << 4)) {
 8008976:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800897a:	f003 0310 	and.w	r3, r3, #16
 800897e:	2b00      	cmp	r3, #0
 8008980:	d001      	beq.n	8008986 <__flash_write_page+0x9a>
		__write_disable_latch(); // Manually reset the latch
 8008982:	f7ff ff4d 	bl	8008820 <__write_disable_latch>


	}
}
 8008986:	bf00      	nop
 8008988:	3788      	adds	r7, #136	; 0x88
 800898a:	46bd      	mov	sp, r7
 800898c:	bdb0      	pop	{r4, r5, r7, pc}

0800898e <flash_write>:

void flash_write(uint32_t address, uint8_t* buffer, uint32_t length) {
 800898e:	b580      	push	{r7, lr}
 8008990:	b086      	sub	sp, #24
 8008992:	af00      	add	r7, sp, #0
 8008994:	60f8      	str	r0, [r7, #12]
 8008996:	60b9      	str	r1, [r7, #8]
 8008998:	607a      	str	r2, [r7, #4]
	uint32_t internal_address = address % PAGE_SIZE;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	b2db      	uxtb	r3, r3
 800899e:	617b      	str	r3, [r7, #20]

	while(internal_address + length > PAGE_SIZE) {
 80089a0:	e016      	b.n	80089d0 <flash_write+0x42>
		uint32_t write_length = PAGE_SIZE - internal_address;
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80089a8:	613b      	str	r3, [r7, #16]

		__flash_write_page(address, buffer, write_length);
 80089aa:	693a      	ldr	r2, [r7, #16]
 80089ac:	68b9      	ldr	r1, [r7, #8]
 80089ae:	68f8      	ldr	r0, [r7, #12]
 80089b0:	f7ff ff9c 	bl	80088ec <__flash_write_page>
		buffer += write_length;
 80089b4:	68ba      	ldr	r2, [r7, #8]
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	4413      	add	r3, r2
 80089ba:	60bb      	str	r3, [r7, #8]
		address += write_length;
 80089bc:	68fa      	ldr	r2, [r7, #12]
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	4413      	add	r3, r2
 80089c2:	60fb      	str	r3, [r7, #12]
		length -= write_length;
 80089c4:	687a      	ldr	r2, [r7, #4]
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	1ad3      	subs	r3, r2, r3
 80089ca:	607b      	str	r3, [r7, #4]

		internal_address = 0;
 80089cc:	2300      	movs	r3, #0
 80089ce:	617b      	str	r3, [r7, #20]
	while(internal_address + length > PAGE_SIZE) {
 80089d0:	697a      	ldr	r2, [r7, #20]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	4413      	add	r3, r2
 80089d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089da:	d8e2      	bhi.n	80089a2 <flash_write+0x14>
	}

	__flash_write_page(address, buffer, length);
 80089dc:	687a      	ldr	r2, [r7, #4]
 80089de:	68b9      	ldr	r1, [r7, #8]
 80089e0:	68f8      	ldr	r0, [r7, #12]
 80089e2:	f7ff ff83 	bl	80088ec <__flash_write_page>
}
 80089e6:	bf00      	nop
 80089e8:	3718      	adds	r7, #24
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}

080089ee <__flash_erase>:


   }
}

void __flash_erase(uint32_t instruction, uint32_t address) {
 80089ee:	b5b0      	push	{r4, r5, r7, lr}
 80089f0:	b0a0      	sub	sp, #128	; 0x80
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	63f8      	str	r0, [r7, #60]	; 0x3c
 80089f6:	63b9      	str	r1, [r7, #56]	; 0x38

	__write_enable_latch();
 80089f8:	f7ff fed9 	bl	80087ae <__write_enable_latch>


	Command cmd = get_default_command();
 80089fc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008a00:	4618      	mov	r0, r3
 8008a02:	f000 f847 	bl	8008a94 <get_default_command>
	with_address(&cmd, address);
 8008a06:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008a0a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f000 f861 	bl	8008ad4 <with_address>


	if(!qspi_run(&cmd, instruction)) {
 8008a12:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008a16:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f000 f883 	bl	8008b24 <qspi_run>
	}

	/*
	 * Checks if the controller is ready to proceed to the next command
	 */
	cmd = get_default_command();
 8008a1e:	463b      	mov	r3, r7
 8008a20:	4618      	mov	r0, r3
 8008a22:	f000 f837 	bl	8008a94 <get_default_command>
 8008a26:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8008a2a:	463d      	mov	r5, r7
 8008a2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a38:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008a3c:	e884 0003 	stmia.w	r4, {r0, r1}
	with_data(&cmd, 1);
 8008a40:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008a44:	2101      	movs	r1, #1
 8008a46:	4618      	mov	r0, r3
 8008a48:	f000 f85a 	bl	8008b00 <with_data>

	if(!qspi_poll(&cmd, READ_FLAG_STATUS_REGISTER, 7, true)) {
 8008a4c:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8008a50:	2301      	movs	r3, #1
 8008a52:	2207      	movs	r2, #7
 8008a54:	2170      	movs	r1, #112	; 0x70
 8008a56:	f000 f881 	bl	8008b5c <qspi_poll>
	}

	/*
	 * Checks if the protection fault flag is set
	 */
	uint8_t flags = __read_flags();
 8008a5a:	f7ff fe8b 	bl	8008774 <__read_flags>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	if(flags & (1 << 5)) {
 8008a64:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8008a68:	f003 0320 	and.w	r3, r3, #32
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d001      	beq.n	8008a74 <__flash_erase+0x86>
		__write_disable_latch(); // Manually reset the latch
 8008a70:	f7ff fed6 	bl	8008820 <__write_disable_latch>


	}
}
 8008a74:	bf00      	nop
 8008a76:	3780      	adds	r7, #128	; 0x80
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bdb0      	pop	{r4, r5, r7, pc}

08008a7c <flash_erase_subsector>:

/*
 * Erases the whole sub-sector represented by the provided address.
 * The address may be any of those within the sub-sector.
 */
void flash_erase_subsector(uint32_t address) {
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b082      	sub	sp, #8
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
	__flash_erase(ERASE_SUBSECTOR, address);
 8008a84:	6879      	ldr	r1, [r7, #4]
 8008a86:	2020      	movs	r0, #32
 8008a88:	f7ff ffb1 	bl	80089ee <__flash_erase>
}
 8008a8c:	bf00      	nop
 8008a8e:	3708      	adds	r7, #8
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}

08008a94 <get_default_command>:
#include "io_driver.h"




Command get_default_command() {
 8008a94:	b5b0      	push	{r4, r5, r7, lr}
 8008a96:	b090      	sub	sp, #64	; 0x40
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
	Command command = {
 8008a9c:	f107 0308 	add.w	r3, r7, #8
 8008aa0:	2238      	movs	r2, #56	; 0x38
 8008aa2:	2100      	movs	r1, #0
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f002 f931 	bl	800ad0c <memset>
 8008aaa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008aae:	623b      	str	r3, [r7, #32]
			.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY,
			.SIOOMode = QSPI_SIOO_INST_EVERY_CMD
		}
	};

	return command;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	461d      	mov	r5, r3
 8008ab4:	f107 0408 	add.w	r4, r7, #8
 8008ab8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008aba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008abc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008abe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008ac0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008ac2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008ac4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008ac8:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	3740      	adds	r7, #64	; 0x40
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bdb0      	pop	{r4, r5, r7, pc}

08008ad4 <with_address>:

/*
 * The two following functions enable the programmer to build a QSPI command very easily.
 */
void with_address(Command* cmd, uint32_t address) {
 8008ad4:	b480      	push	{r7}
 8008ad6:	b083      	sub	sp, #12
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	6039      	str	r1, [r7, #0]
	cmd->qspi_command.AddressMode = QSPI_ADDRESS_1_LINE;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008ae4:	61da      	str	r2, [r3, #28]
	cmd->qspi_command.AddressSize = QSPI_ADDRESS_24_BITS;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008aec:	60da      	str	r2, [r3, #12]
	cmd->qspi_command.Address = address;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	683a      	ldr	r2, [r7, #0]
 8008af2:	605a      	str	r2, [r3, #4]
}
 8008af4:	bf00      	nop
 8008af6:	370c      	adds	r7, #12
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr

08008b00 <with_data>:

void with_data(Command* cmd, uint32_t length) {
 8008b00:	b480      	push	{r7}
 8008b02:	b083      	sub	sp, #12
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
 8008b08:	6039      	str	r1, [r7, #0]
	cmd->qspi_command.DataMode = QSPI_DATA_1_LINE;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008b10:	625a      	str	r2, [r3, #36]	; 0x24
	cmd->qspi_command.NbData = length;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	683a      	ldr	r2, [r7, #0]
 8008b16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008b18:	bf00      	nop
 8008b1a:	370c      	adds	r7, #12
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b22:	4770      	bx	lr

08008b24 <qspi_run>:


/*
 * Higher-level abstraction layer for the QSPI interface.
 */
bool qspi_run(Command* cmd, uint32_t instruction) {
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b082      	sub	sp, #8
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
 8008b2c:	6039      	str	r1, [r7, #0]
	cmd->qspi_command.Instruction = instruction;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	683a      	ldr	r2, [r7, #0]
 8008b32:	601a      	str	r2, [r3, #0]
	return HAL_QSPI_Command(&hqspi, &(cmd->qspi_command), IO_TIMEOUT) == HAL_OK;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008b3a:	4619      	mov	r1, r3
 8008b3c:	4806      	ldr	r0, [pc, #24]	; (8008b58 <qspi_run+0x34>)
 8008b3e:	f7fc fc55 	bl	80053ec <HAL_QSPI_Command>
 8008b42:	4603      	mov	r3, r0
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	bf0c      	ite	eq
 8008b48:	2301      	moveq	r3, #1
 8008b4a:	2300      	movne	r3, #0
 8008b4c:	b2db      	uxtb	r3, r3
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3708      	adds	r7, #8
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
 8008b56:	bf00      	nop
 8008b58:	20007928 	.word	0x20007928

08008b5c <qspi_poll>:

bool qspi_poll(Command* cmd, uint32_t instruction, uint8_t bit, bool value) {
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b08a      	sub	sp, #40	; 0x28
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	60f8      	str	r0, [r7, #12]
 8008b64:	60b9      	str	r1, [r7, #8]
 8008b66:	4611      	mov	r1, r2
 8008b68:	461a      	mov	r2, r3
 8008b6a:	460b      	mov	r3, r1
 8008b6c:	71fb      	strb	r3, [r7, #7]
 8008b6e:	4613      	mov	r3, r2
 8008b70:	71bb      	strb	r3, [r7, #6]
	QSPI_AutoPollingTypeDef poller;

	poller.MatchMode = QSPI_MATCH_MODE_AND;
 8008b72:	2300      	movs	r3, #0
 8008b74:	623b      	str	r3, [r7, #32]
	poller.StatusBytesSize = 1;
 8008b76:	2301      	movs	r3, #1
 8008b78:	61fb      	str	r3, [r7, #28]
	poller.Interval = 0x10;
 8008b7a:	2310      	movs	r3, #16
 8008b7c:	61bb      	str	r3, [r7, #24]
	poller.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8008b7e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008b82:	627b      	str	r3, [r7, #36]	; 0x24
	poller.Match = value << bit;
 8008b84:	79ba      	ldrb	r2, [r7, #6]
 8008b86:	79fb      	ldrb	r3, [r7, #7]
 8008b88:	fa02 f303 	lsl.w	r3, r2, r3
 8008b8c:	613b      	str	r3, [r7, #16]
	poller.Mask = 1 << bit;
 8008b8e:	79fb      	ldrb	r3, [r7, #7]
 8008b90:	2201      	movs	r2, #1
 8008b92:	fa02 f303 	lsl.w	r3, r2, r3
 8008b96:	617b      	str	r3, [r7, #20]

	cmd->qspi_command.Instruction = instruction;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	68ba      	ldr	r2, [r7, #8]
 8008b9c:	601a      	str	r2, [r3, #0]

	return HAL_QSPI_AutoPolling(&hqspi, &(cmd->qspi_command), &poller, IO_TIMEOUT) == HAL_OK;
 8008b9e:	68f9      	ldr	r1, [r7, #12]
 8008ba0:	f107 0210 	add.w	r2, r7, #16
 8008ba4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8008ba8:	4806      	ldr	r0, [pc, #24]	; (8008bc4 <qspi_poll+0x68>)
 8008baa:	f7fc fdb6 	bl	800571a <HAL_QSPI_AutoPolling>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	bf0c      	ite	eq
 8008bb4:	2301      	moveq	r3, #1
 8008bb6:	2300      	movne	r3, #0
 8008bb8:	b2db      	uxtb	r3, r3
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3728      	adds	r7, #40	; 0x28
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}
 8008bc2:	bf00      	nop
 8008bc4:	20007928 	.word	0x20007928

08008bc8 <qspi_transmit>:

bool qspi_transmit(uint8_t* buffer) {
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b082      	sub	sp, #8
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
	return HAL_QSPI_Transmit(&hqspi, buffer, IO_TIMEOUT) == HAL_OK;
 8008bd0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008bd4:	6879      	ldr	r1, [r7, #4]
 8008bd6:	4806      	ldr	r0, [pc, #24]	; (8008bf0 <qspi_transmit+0x28>)
 8008bd8:	f7fc fc66 	bl	80054a8 <HAL_QSPI_Transmit>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	bf0c      	ite	eq
 8008be2:	2301      	moveq	r3, #1
 8008be4:	2300      	movne	r3, #0
 8008be6:	b2db      	uxtb	r3, r3
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3708      	adds	r7, #8
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}
 8008bf0:	20007928 	.word	0x20007928

08008bf4 <qspi_receive>:

bool qspi_receive(uint8_t* buffer) {
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b082      	sub	sp, #8
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
	return HAL_QSPI_Receive(&hqspi, buffer, IO_TIMEOUT) == HAL_OK;
 8008bfc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008c00:	6879      	ldr	r1, [r7, #4]
 8008c02:	4806      	ldr	r0, [pc, #24]	; (8008c1c <qspi_receive+0x28>)
 8008c04:	f7fc fce7 	bl	80055d6 <HAL_QSPI_Receive>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	bf0c      	ite	eq
 8008c0e:	2301      	moveq	r3, #1
 8008c10:	2300      	movne	r3, #0
 8008c12:	b2db      	uxtb	r3, r3
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3708      	adds	r7, #8
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}
 8008c1c:	20007928 	.word	0x20007928

08008c20 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b085      	sub	sp, #20
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	4603      	mov	r3, r0
 8008c28:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008c2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008c32:	2b84      	cmp	r3, #132	; 0x84
 8008c34:	d005      	beq.n	8008c42 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008c36:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	4413      	add	r3, r2
 8008c3e:	3303      	adds	r3, #3
 8008c40:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008c42:	68fb      	ldr	r3, [r7, #12]
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3714      	adds	r7, #20
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr

08008c50 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008c54:	f000 ffb6 	bl	8009bc4 <vTaskStartScheduler>
  
  return osOK;
 8008c58:	2300      	movs	r3, #0
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	bd80      	pop	{r7, pc}

08008c5e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008c5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c60:	b089      	sub	sp, #36	; 0x24
 8008c62:	af04      	add	r7, sp, #16
 8008c64:	6078      	str	r0, [r7, #4]
 8008c66:	6039      	str	r1, [r7, #0]
      return NULL;
    } 
  }
#elif( configSUPPORT_STATIC_ALLOCATION == 1 )

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	685c      	ldr	r4, [r3, #4]
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681d      	ldr	r5, [r3, #0]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	691e      	ldr	r6, [r3, #16]
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f7ff ffd0 	bl	8008c20 <makeFreeRtosPriority>
 8008c80:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	695b      	ldr	r3, [r3, #20]
 8008c86:	687a      	ldr	r2, [r7, #4]
 8008c88:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008c8a:	9202      	str	r2, [sp, #8]
 8008c8c:	9301      	str	r3, [sp, #4]
 8008c8e:	9100      	str	r1, [sp, #0]
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	4632      	mov	r2, r6
 8008c94:	4629      	mov	r1, r5
 8008c96:	4620      	mov	r0, r4
 8008c98:	f000 fd98 	bl	80097cc <xTaskCreateStatic>
 8008c9c:	60f8      	str	r0, [r7, #12]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3714      	adds	r7, #20
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008ca8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b084      	sub	sp, #16
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d001      	beq.n	8008cbe <osDelay+0x16>
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	e000      	b.n	8008cc0 <osDelay+0x18>
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f000 ff4b 	bl	8009b5c <vTaskDelay>
  
  return osOK;
 8008cc6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3710      	adds	r7, #16
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b083      	sub	sp, #12
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f103 0208 	add.w	r2, r3, #8
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ce8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f103 0208 	add.w	r2, r3, #8
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f103 0208 	add.w	r2, r3, #8
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2200      	movs	r2, #0
 8008d02:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008d04:	bf00      	nop
 8008d06:	370c      	adds	r7, #12
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr

08008d10 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008d10:	b480      	push	{r7}
 8008d12:	b083      	sub	sp, #12
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008d1e:	bf00      	nop
 8008d20:	370c      	adds	r7, #12
 8008d22:	46bd      	mov	sp, r7
 8008d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d28:	4770      	bx	lr

08008d2a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008d2a:	b480      	push	{r7}
 8008d2c:	b085      	sub	sp, #20
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	6078      	str	r0, [r7, #4]
 8008d32:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	68fa      	ldr	r2, [r7, #12]
 8008d3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	689a      	ldr	r2, [r3, #8]
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	689b      	ldr	r3, [r3, #8]
 8008d4c:	683a      	ldr	r2, [r7, #0]
 8008d4e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	683a      	ldr	r2, [r7, #0]
 8008d54:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	687a      	ldr	r2, [r7, #4]
 8008d5a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	1c5a      	adds	r2, r3, #1
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	601a      	str	r2, [r3, #0]
}
 8008d66:	bf00      	nop
 8008d68:	3714      	adds	r7, #20
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr

08008d72 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008d72:	b480      	push	{r7}
 8008d74:	b085      	sub	sp, #20
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	6078      	str	r0, [r7, #4]
 8008d7a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d88:	d103      	bne.n	8008d92 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	691b      	ldr	r3, [r3, #16]
 8008d8e:	60fb      	str	r3, [r7, #12]
 8008d90:	e00c      	b.n	8008dac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	3308      	adds	r3, #8
 8008d96:	60fb      	str	r3, [r7, #12]
 8008d98:	e002      	b.n	8008da0 <vListInsert+0x2e>
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	685b      	ldr	r3, [r3, #4]
 8008d9e:	60fb      	str	r3, [r7, #12]
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	68ba      	ldr	r2, [r7, #8]
 8008da8:	429a      	cmp	r2, r3
 8008daa:	d2f6      	bcs.n	8008d9a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	685a      	ldr	r2, [r3, #4]
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	685b      	ldr	r3, [r3, #4]
 8008db8:	683a      	ldr	r2, [r7, #0]
 8008dba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	68fa      	ldr	r2, [r7, #12]
 8008dc0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	683a      	ldr	r2, [r7, #0]
 8008dc6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	687a      	ldr	r2, [r7, #4]
 8008dcc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	1c5a      	adds	r2, r3, #1
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	601a      	str	r2, [r3, #0]
}
 8008dd8:	bf00      	nop
 8008dda:	3714      	adds	r7, #20
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr

08008de4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008de4:	b480      	push	{r7}
 8008de6:	b085      	sub	sp, #20
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	691b      	ldr	r3, [r3, #16]
 8008df0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	685b      	ldr	r3, [r3, #4]
 8008df6:	687a      	ldr	r2, [r7, #4]
 8008df8:	6892      	ldr	r2, [r2, #8]
 8008dfa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	689b      	ldr	r3, [r3, #8]
 8008e00:	687a      	ldr	r2, [r7, #4]
 8008e02:	6852      	ldr	r2, [r2, #4]
 8008e04:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	687a      	ldr	r2, [r7, #4]
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	d103      	bne.n	8008e18 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	689a      	ldr	r2, [r3, #8]
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	1e5a      	subs	r2, r3, #1
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3714      	adds	r7, #20
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr

08008e38 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b084      	sub	sp, #16
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
 8008e40:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d10a      	bne.n	8008e62 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e50:	f383 8811 	msr	BASEPRI, r3
 8008e54:	f3bf 8f6f 	isb	sy
 8008e58:	f3bf 8f4f 	dsb	sy
 8008e5c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008e5e:	bf00      	nop
 8008e60:	e7fe      	b.n	8008e60 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008e62:	f001 fdff 	bl	800aa64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681a      	ldr	r2, [r3, #0]
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e6e:	68f9      	ldr	r1, [r7, #12]
 8008e70:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008e72:	fb01 f303 	mul.w	r3, r1, r3
 8008e76:	441a      	add	r2, r3
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681a      	ldr	r2, [r3, #0]
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681a      	ldr	r2, [r3, #0]
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e92:	3b01      	subs	r3, #1
 8008e94:	68f9      	ldr	r1, [r7, #12]
 8008e96:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008e98:	fb01 f303 	mul.w	r3, r1, r3
 8008e9c:	441a      	add	r2, r3
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	22ff      	movs	r2, #255	; 0xff
 8008ea6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	22ff      	movs	r2, #255	; 0xff
 8008eae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d114      	bne.n	8008ee2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	691b      	ldr	r3, [r3, #16]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d01a      	beq.n	8008ef6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	3310      	adds	r3, #16
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f001 f8cf 	bl	800a068 <xTaskRemoveFromEventList>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d012      	beq.n	8008ef6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008ed0:	4b0c      	ldr	r3, [pc, #48]	; (8008f04 <xQueueGenericReset+0xcc>)
 8008ed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ed6:	601a      	str	r2, [r3, #0]
 8008ed8:	f3bf 8f4f 	dsb	sy
 8008edc:	f3bf 8f6f 	isb	sy
 8008ee0:	e009      	b.n	8008ef6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	3310      	adds	r3, #16
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f7ff fef2 	bl	8008cd0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	3324      	adds	r3, #36	; 0x24
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f7ff feed 	bl	8008cd0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008ef6:	f001 fde5 	bl	800aac4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008efa:	2301      	movs	r3, #1
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3710      	adds	r7, #16
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}
 8008f04:	e000ed04 	.word	0xe000ed04

08008f08 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b08e      	sub	sp, #56	; 0x38
 8008f0c:	af02      	add	r7, sp, #8
 8008f0e:	60f8      	str	r0, [r7, #12]
 8008f10:	60b9      	str	r1, [r7, #8]
 8008f12:	607a      	str	r2, [r7, #4]
 8008f14:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d10a      	bne.n	8008f32 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f20:	f383 8811 	msr	BASEPRI, r3
 8008f24:	f3bf 8f6f 	isb	sy
 8008f28:	f3bf 8f4f 	dsb	sy
 8008f2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008f2e:	bf00      	nop
 8008f30:	e7fe      	b.n	8008f30 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d10a      	bne.n	8008f4e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f3c:	f383 8811 	msr	BASEPRI, r3
 8008f40:	f3bf 8f6f 	isb	sy
 8008f44:	f3bf 8f4f 	dsb	sy
 8008f48:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008f4a:	bf00      	nop
 8008f4c:	e7fe      	b.n	8008f4c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d002      	beq.n	8008f5a <xQueueGenericCreateStatic+0x52>
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d001      	beq.n	8008f5e <xQueueGenericCreateStatic+0x56>
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	e000      	b.n	8008f60 <xQueueGenericCreateStatic+0x58>
 8008f5e:	2300      	movs	r3, #0
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d10a      	bne.n	8008f7a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f68:	f383 8811 	msr	BASEPRI, r3
 8008f6c:	f3bf 8f6f 	isb	sy
 8008f70:	f3bf 8f4f 	dsb	sy
 8008f74:	623b      	str	r3, [r7, #32]
}
 8008f76:	bf00      	nop
 8008f78:	e7fe      	b.n	8008f78 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d102      	bne.n	8008f86 <xQueueGenericCreateStatic+0x7e>
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d101      	bne.n	8008f8a <xQueueGenericCreateStatic+0x82>
 8008f86:	2301      	movs	r3, #1
 8008f88:	e000      	b.n	8008f8c <xQueueGenericCreateStatic+0x84>
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d10a      	bne.n	8008fa6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f94:	f383 8811 	msr	BASEPRI, r3
 8008f98:	f3bf 8f6f 	isb	sy
 8008f9c:	f3bf 8f4f 	dsb	sy
 8008fa0:	61fb      	str	r3, [r7, #28]
}
 8008fa2:	bf00      	nop
 8008fa4:	e7fe      	b.n	8008fa4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008fa6:	2348      	movs	r3, #72	; 0x48
 8008fa8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	2b48      	cmp	r3, #72	; 0x48
 8008fae:	d00a      	beq.n	8008fc6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fb4:	f383 8811 	msr	BASEPRI, r3
 8008fb8:	f3bf 8f6f 	isb	sy
 8008fbc:	f3bf 8f4f 	dsb	sy
 8008fc0:	61bb      	str	r3, [r7, #24]
}
 8008fc2:	bf00      	nop
 8008fc4:	e7fe      	b.n	8008fc4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008fc6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d009      	beq.n	8008fe6 <xQueueGenericCreateStatic+0xde>
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008fd2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd8:	9300      	str	r3, [sp, #0]
 8008fda:	4613      	mov	r3, r2
 8008fdc:	687a      	ldr	r2, [r7, #4]
 8008fde:	68b9      	ldr	r1, [r7, #8]
 8008fe0:	68f8      	ldr	r0, [r7, #12]
 8008fe2:	f000 f805 	bl	8008ff0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3730      	adds	r7, #48	; 0x30
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b084      	sub	sp, #16
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	60f8      	str	r0, [r7, #12]
 8008ff8:	60b9      	str	r1, [r7, #8]
 8008ffa:	607a      	str	r2, [r7, #4]
 8008ffc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d103      	bne.n	800900c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009004:	69bb      	ldr	r3, [r7, #24]
 8009006:	69ba      	ldr	r2, [r7, #24]
 8009008:	601a      	str	r2, [r3, #0]
 800900a:	e002      	b.n	8009012 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800900c:	69bb      	ldr	r3, [r7, #24]
 800900e:	687a      	ldr	r2, [r7, #4]
 8009010:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009012:	69bb      	ldr	r3, [r7, #24]
 8009014:	68fa      	ldr	r2, [r7, #12]
 8009016:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009018:	69bb      	ldr	r3, [r7, #24]
 800901a:	68ba      	ldr	r2, [r7, #8]
 800901c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800901e:	2101      	movs	r1, #1
 8009020:	69b8      	ldr	r0, [r7, #24]
 8009022:	f7ff ff09 	bl	8008e38 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009026:	bf00      	nop
 8009028:	3710      	adds	r7, #16
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}

0800902e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800902e:	b580      	push	{r7, lr}
 8009030:	b082      	sub	sp, #8
 8009032:	af00      	add	r7, sp, #0
 8009034:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d00e      	beq.n	800905a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2200      	movs	r2, #0
 8009040:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2200      	movs	r2, #0
 8009046:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2200      	movs	r2, #0
 800904c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800904e:	2300      	movs	r3, #0
 8009050:	2200      	movs	r2, #0
 8009052:	2100      	movs	r1, #0
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f000 f81f 	bl	8009098 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800905a:	bf00      	nop
 800905c:	3708      	adds	r7, #8
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}

08009062 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8009062:	b580      	push	{r7, lr}
 8009064:	b088      	sub	sp, #32
 8009066:	af02      	add	r7, sp, #8
 8009068:	4603      	mov	r3, r0
 800906a:	6039      	str	r1, [r7, #0]
 800906c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800906e:	2301      	movs	r3, #1
 8009070:	617b      	str	r3, [r7, #20]
 8009072:	2300      	movs	r3, #0
 8009074:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009076:	79fb      	ldrb	r3, [r7, #7]
 8009078:	9300      	str	r3, [sp, #0]
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	2200      	movs	r2, #0
 800907e:	6939      	ldr	r1, [r7, #16]
 8009080:	6978      	ldr	r0, [r7, #20]
 8009082:	f7ff ff41 	bl	8008f08 <xQueueGenericCreateStatic>
 8009086:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009088:	68f8      	ldr	r0, [r7, #12]
 800908a:	f7ff ffd0 	bl	800902e <prvInitialiseMutex>

		return xNewQueue;
 800908e:	68fb      	ldr	r3, [r7, #12]
	}
 8009090:	4618      	mov	r0, r3
 8009092:	3718      	adds	r7, #24
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}

08009098 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b08e      	sub	sp, #56	; 0x38
 800909c:	af00      	add	r7, sp, #0
 800909e:	60f8      	str	r0, [r7, #12]
 80090a0:	60b9      	str	r1, [r7, #8]
 80090a2:	607a      	str	r2, [r7, #4]
 80090a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80090a6:	2300      	movs	r3, #0
 80090a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80090ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d10a      	bne.n	80090ca <xQueueGenericSend+0x32>
	__asm volatile
 80090b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b8:	f383 8811 	msr	BASEPRI, r3
 80090bc:	f3bf 8f6f 	isb	sy
 80090c0:	f3bf 8f4f 	dsb	sy
 80090c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80090c6:	bf00      	nop
 80090c8:	e7fe      	b.n	80090c8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d103      	bne.n	80090d8 <xQueueGenericSend+0x40>
 80090d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d101      	bne.n	80090dc <xQueueGenericSend+0x44>
 80090d8:	2301      	movs	r3, #1
 80090da:	e000      	b.n	80090de <xQueueGenericSend+0x46>
 80090dc:	2300      	movs	r3, #0
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d10a      	bne.n	80090f8 <xQueueGenericSend+0x60>
	__asm volatile
 80090e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e6:	f383 8811 	msr	BASEPRI, r3
 80090ea:	f3bf 8f6f 	isb	sy
 80090ee:	f3bf 8f4f 	dsb	sy
 80090f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80090f4:	bf00      	nop
 80090f6:	e7fe      	b.n	80090f6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	2b02      	cmp	r3, #2
 80090fc:	d103      	bne.n	8009106 <xQueueGenericSend+0x6e>
 80090fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009102:	2b01      	cmp	r3, #1
 8009104:	d101      	bne.n	800910a <xQueueGenericSend+0x72>
 8009106:	2301      	movs	r3, #1
 8009108:	e000      	b.n	800910c <xQueueGenericSend+0x74>
 800910a:	2300      	movs	r3, #0
 800910c:	2b00      	cmp	r3, #0
 800910e:	d10a      	bne.n	8009126 <xQueueGenericSend+0x8e>
	__asm volatile
 8009110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009114:	f383 8811 	msr	BASEPRI, r3
 8009118:	f3bf 8f6f 	isb	sy
 800911c:	f3bf 8f4f 	dsb	sy
 8009120:	623b      	str	r3, [r7, #32]
}
 8009122:	bf00      	nop
 8009124:	e7fe      	b.n	8009124 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009126:	f001 f935 	bl	800a394 <xTaskGetSchedulerState>
 800912a:	4603      	mov	r3, r0
 800912c:	2b00      	cmp	r3, #0
 800912e:	d102      	bne.n	8009136 <xQueueGenericSend+0x9e>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d101      	bne.n	800913a <xQueueGenericSend+0xa2>
 8009136:	2301      	movs	r3, #1
 8009138:	e000      	b.n	800913c <xQueueGenericSend+0xa4>
 800913a:	2300      	movs	r3, #0
 800913c:	2b00      	cmp	r3, #0
 800913e:	d10a      	bne.n	8009156 <xQueueGenericSend+0xbe>
	__asm volatile
 8009140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009144:	f383 8811 	msr	BASEPRI, r3
 8009148:	f3bf 8f6f 	isb	sy
 800914c:	f3bf 8f4f 	dsb	sy
 8009150:	61fb      	str	r3, [r7, #28]
}
 8009152:	bf00      	nop
 8009154:	e7fe      	b.n	8009154 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009156:	f001 fc85 	bl	800aa64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800915a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800915c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800915e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009162:	429a      	cmp	r2, r3
 8009164:	d302      	bcc.n	800916c <xQueueGenericSend+0xd4>
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	2b02      	cmp	r3, #2
 800916a:	d129      	bne.n	80091c0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800916c:	683a      	ldr	r2, [r7, #0]
 800916e:	68b9      	ldr	r1, [r7, #8]
 8009170:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009172:	f000 fa41 	bl	80095f8 <prvCopyDataToQueue>
 8009176:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800917a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800917c:	2b00      	cmp	r3, #0
 800917e:	d010      	beq.n	80091a2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009182:	3324      	adds	r3, #36	; 0x24
 8009184:	4618      	mov	r0, r3
 8009186:	f000 ff6f 	bl	800a068 <xTaskRemoveFromEventList>
 800918a:	4603      	mov	r3, r0
 800918c:	2b00      	cmp	r3, #0
 800918e:	d013      	beq.n	80091b8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009190:	4b3f      	ldr	r3, [pc, #252]	; (8009290 <xQueueGenericSend+0x1f8>)
 8009192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009196:	601a      	str	r2, [r3, #0]
 8009198:	f3bf 8f4f 	dsb	sy
 800919c:	f3bf 8f6f 	isb	sy
 80091a0:	e00a      	b.n	80091b8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80091a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d007      	beq.n	80091b8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80091a8:	4b39      	ldr	r3, [pc, #228]	; (8009290 <xQueueGenericSend+0x1f8>)
 80091aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091ae:	601a      	str	r2, [r3, #0]
 80091b0:	f3bf 8f4f 	dsb	sy
 80091b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80091b8:	f001 fc84 	bl	800aac4 <vPortExitCritical>
				return pdPASS;
 80091bc:	2301      	movs	r3, #1
 80091be:	e063      	b.n	8009288 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d103      	bne.n	80091ce <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80091c6:	f001 fc7d 	bl	800aac4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80091ca:	2300      	movs	r3, #0
 80091cc:	e05c      	b.n	8009288 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80091ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d106      	bne.n	80091e2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80091d4:	f107 0314 	add.w	r3, r7, #20
 80091d8:	4618      	mov	r0, r3
 80091da:	f000 ffa7 	bl	800a12c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80091de:	2301      	movs	r3, #1
 80091e0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80091e2:	f001 fc6f 	bl	800aac4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80091e6:	f000 fd4d 	bl	8009c84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80091ea:	f001 fc3b 	bl	800aa64 <vPortEnterCritical>
 80091ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80091f4:	b25b      	sxtb	r3, r3
 80091f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091fa:	d103      	bne.n	8009204 <xQueueGenericSend+0x16c>
 80091fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091fe:	2200      	movs	r2, #0
 8009200:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009206:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800920a:	b25b      	sxtb	r3, r3
 800920c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009210:	d103      	bne.n	800921a <xQueueGenericSend+0x182>
 8009212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009214:	2200      	movs	r2, #0
 8009216:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800921a:	f001 fc53 	bl	800aac4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800921e:	1d3a      	adds	r2, r7, #4
 8009220:	f107 0314 	add.w	r3, r7, #20
 8009224:	4611      	mov	r1, r2
 8009226:	4618      	mov	r0, r3
 8009228:	f000 ff96 	bl	800a158 <xTaskCheckForTimeOut>
 800922c:	4603      	mov	r3, r0
 800922e:	2b00      	cmp	r3, #0
 8009230:	d124      	bne.n	800927c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009232:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009234:	f000 fab2 	bl	800979c <prvIsQueueFull>
 8009238:	4603      	mov	r3, r0
 800923a:	2b00      	cmp	r3, #0
 800923c:	d018      	beq.n	8009270 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800923e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009240:	3310      	adds	r3, #16
 8009242:	687a      	ldr	r2, [r7, #4]
 8009244:	4611      	mov	r1, r2
 8009246:	4618      	mov	r0, r3
 8009248:	f000 feea 	bl	800a020 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800924c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800924e:	f000 fa3d 	bl	80096cc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009252:	f000 fd25 	bl	8009ca0 <xTaskResumeAll>
 8009256:	4603      	mov	r3, r0
 8009258:	2b00      	cmp	r3, #0
 800925a:	f47f af7c 	bne.w	8009156 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800925e:	4b0c      	ldr	r3, [pc, #48]	; (8009290 <xQueueGenericSend+0x1f8>)
 8009260:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009264:	601a      	str	r2, [r3, #0]
 8009266:	f3bf 8f4f 	dsb	sy
 800926a:	f3bf 8f6f 	isb	sy
 800926e:	e772      	b.n	8009156 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009270:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009272:	f000 fa2b 	bl	80096cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009276:	f000 fd13 	bl	8009ca0 <xTaskResumeAll>
 800927a:	e76c      	b.n	8009156 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800927c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800927e:	f000 fa25 	bl	80096cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009282:	f000 fd0d 	bl	8009ca0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009286:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009288:	4618      	mov	r0, r3
 800928a:	3738      	adds	r7, #56	; 0x38
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}
 8009290:	e000ed04 	.word	0xe000ed04

08009294 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b08e      	sub	sp, #56	; 0x38
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80092a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d10a      	bne.n	80092be <xQueueGiveFromISR+0x2a>
	__asm volatile
 80092a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ac:	f383 8811 	msr	BASEPRI, r3
 80092b0:	f3bf 8f6f 	isb	sy
 80092b4:	f3bf 8f4f 	dsb	sy
 80092b8:	623b      	str	r3, [r7, #32]
}
 80092ba:	bf00      	nop
 80092bc:	e7fe      	b.n	80092bc <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80092be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d00a      	beq.n	80092dc <xQueueGiveFromISR+0x48>
	__asm volatile
 80092c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ca:	f383 8811 	msr	BASEPRI, r3
 80092ce:	f3bf 8f6f 	isb	sy
 80092d2:	f3bf 8f4f 	dsb	sy
 80092d6:	61fb      	str	r3, [r7, #28]
}
 80092d8:	bf00      	nop
 80092da:	e7fe      	b.n	80092da <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80092dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d103      	bne.n	80092ec <xQueueGiveFromISR+0x58>
 80092e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e6:	689b      	ldr	r3, [r3, #8]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d101      	bne.n	80092f0 <xQueueGiveFromISR+0x5c>
 80092ec:	2301      	movs	r3, #1
 80092ee:	e000      	b.n	80092f2 <xQueueGiveFromISR+0x5e>
 80092f0:	2300      	movs	r3, #0
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d10a      	bne.n	800930c <xQueueGiveFromISR+0x78>
	__asm volatile
 80092f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092fa:	f383 8811 	msr	BASEPRI, r3
 80092fe:	f3bf 8f6f 	isb	sy
 8009302:	f3bf 8f4f 	dsb	sy
 8009306:	61bb      	str	r3, [r7, #24]
}
 8009308:	bf00      	nop
 800930a:	e7fe      	b.n	800930a <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800930c:	f001 fc8c 	bl	800ac28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009310:	f3ef 8211 	mrs	r2, BASEPRI
 8009314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009318:	f383 8811 	msr	BASEPRI, r3
 800931c:	f3bf 8f6f 	isb	sy
 8009320:	f3bf 8f4f 	dsb	sy
 8009324:	617a      	str	r2, [r7, #20]
 8009326:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009328:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800932a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800932c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800932e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009330:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009336:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009338:	429a      	cmp	r2, r3
 800933a:	d22b      	bcs.n	8009394 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800933c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800933e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009342:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009348:	1c5a      	adds	r2, r3, #1
 800934a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800934c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800934e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009352:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009356:	d112      	bne.n	800937e <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800935a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800935c:	2b00      	cmp	r3, #0
 800935e:	d016      	beq.n	800938e <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009362:	3324      	adds	r3, #36	; 0x24
 8009364:	4618      	mov	r0, r3
 8009366:	f000 fe7f 	bl	800a068 <xTaskRemoveFromEventList>
 800936a:	4603      	mov	r3, r0
 800936c:	2b00      	cmp	r3, #0
 800936e:	d00e      	beq.n	800938e <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d00b      	beq.n	800938e <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	2201      	movs	r2, #1
 800937a:	601a      	str	r2, [r3, #0]
 800937c:	e007      	b.n	800938e <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800937e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009382:	3301      	adds	r3, #1
 8009384:	b2db      	uxtb	r3, r3
 8009386:	b25a      	sxtb	r2, r3
 8009388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800938a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800938e:	2301      	movs	r3, #1
 8009390:	637b      	str	r3, [r7, #52]	; 0x34
 8009392:	e001      	b.n	8009398 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009394:	2300      	movs	r3, #0
 8009396:	637b      	str	r3, [r7, #52]	; 0x34
 8009398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800939a:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80093a2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80093a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3738      	adds	r7, #56	; 0x38
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}
	...

080093b0 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b08e      	sub	sp, #56	; 0x38
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80093ba:	2300      	movs	r3, #0
 80093bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80093c2:	2300      	movs	r3, #0
 80093c4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80093c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d10a      	bne.n	80093e2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80093cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d0:	f383 8811 	msr	BASEPRI, r3
 80093d4:	f3bf 8f6f 	isb	sy
 80093d8:	f3bf 8f4f 	dsb	sy
 80093dc:	623b      	str	r3, [r7, #32]
}
 80093de:	bf00      	nop
 80093e0:	e7fe      	b.n	80093e0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80093e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d00a      	beq.n	8009400 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80093ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ee:	f383 8811 	msr	BASEPRI, r3
 80093f2:	f3bf 8f6f 	isb	sy
 80093f6:	f3bf 8f4f 	dsb	sy
 80093fa:	61fb      	str	r3, [r7, #28]
}
 80093fc:	bf00      	nop
 80093fe:	e7fe      	b.n	80093fe <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009400:	f000 ffc8 	bl	800a394 <xTaskGetSchedulerState>
 8009404:	4603      	mov	r3, r0
 8009406:	2b00      	cmp	r3, #0
 8009408:	d102      	bne.n	8009410 <xQueueSemaphoreTake+0x60>
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d101      	bne.n	8009414 <xQueueSemaphoreTake+0x64>
 8009410:	2301      	movs	r3, #1
 8009412:	e000      	b.n	8009416 <xQueueSemaphoreTake+0x66>
 8009414:	2300      	movs	r3, #0
 8009416:	2b00      	cmp	r3, #0
 8009418:	d10a      	bne.n	8009430 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800941a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800941e:	f383 8811 	msr	BASEPRI, r3
 8009422:	f3bf 8f6f 	isb	sy
 8009426:	f3bf 8f4f 	dsb	sy
 800942a:	61bb      	str	r3, [r7, #24]
}
 800942c:	bf00      	nop
 800942e:	e7fe      	b.n	800942e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009430:	f001 fb18 	bl	800aa64 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009438:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800943a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800943c:	2b00      	cmp	r3, #0
 800943e:	d024      	beq.n	800948a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009442:	1e5a      	subs	r2, r3, #1
 8009444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009446:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d104      	bne.n	800945a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009450:	f001 f95e 	bl	800a710 <pvTaskIncrementMutexHeldCount>
 8009454:	4602      	mov	r2, r0
 8009456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009458:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800945a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800945c:	691b      	ldr	r3, [r3, #16]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d00f      	beq.n	8009482 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009464:	3310      	adds	r3, #16
 8009466:	4618      	mov	r0, r3
 8009468:	f000 fdfe 	bl	800a068 <xTaskRemoveFromEventList>
 800946c:	4603      	mov	r3, r0
 800946e:	2b00      	cmp	r3, #0
 8009470:	d007      	beq.n	8009482 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009472:	4b54      	ldr	r3, [pc, #336]	; (80095c4 <xQueueSemaphoreTake+0x214>)
 8009474:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009478:	601a      	str	r2, [r3, #0]
 800947a:	f3bf 8f4f 	dsb	sy
 800947e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009482:	f001 fb1f 	bl	800aac4 <vPortExitCritical>
				return pdPASS;
 8009486:	2301      	movs	r3, #1
 8009488:	e097      	b.n	80095ba <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d111      	bne.n	80094b4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009492:	2b00      	cmp	r3, #0
 8009494:	d00a      	beq.n	80094ac <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8009496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800949a:	f383 8811 	msr	BASEPRI, r3
 800949e:	f3bf 8f6f 	isb	sy
 80094a2:	f3bf 8f4f 	dsb	sy
 80094a6:	617b      	str	r3, [r7, #20]
}
 80094a8:	bf00      	nop
 80094aa:	e7fe      	b.n	80094aa <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80094ac:	f001 fb0a 	bl	800aac4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80094b0:	2300      	movs	r3, #0
 80094b2:	e082      	b.n	80095ba <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80094b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d106      	bne.n	80094c8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80094ba:	f107 030c 	add.w	r3, r7, #12
 80094be:	4618      	mov	r0, r3
 80094c0:	f000 fe34 	bl	800a12c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80094c4:	2301      	movs	r3, #1
 80094c6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80094c8:	f001 fafc 	bl	800aac4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80094cc:	f000 fbda 	bl	8009c84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80094d0:	f001 fac8 	bl	800aa64 <vPortEnterCritical>
 80094d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80094da:	b25b      	sxtb	r3, r3
 80094dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80094e0:	d103      	bne.n	80094ea <xQueueSemaphoreTake+0x13a>
 80094e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094e4:	2200      	movs	r2, #0
 80094e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80094ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80094f0:	b25b      	sxtb	r3, r3
 80094f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80094f6:	d103      	bne.n	8009500 <xQueueSemaphoreTake+0x150>
 80094f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094fa:	2200      	movs	r2, #0
 80094fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009500:	f001 fae0 	bl	800aac4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009504:	463a      	mov	r2, r7
 8009506:	f107 030c 	add.w	r3, r7, #12
 800950a:	4611      	mov	r1, r2
 800950c:	4618      	mov	r0, r3
 800950e:	f000 fe23 	bl	800a158 <xTaskCheckForTimeOut>
 8009512:	4603      	mov	r3, r0
 8009514:	2b00      	cmp	r3, #0
 8009516:	d132      	bne.n	800957e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009518:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800951a:	f000 f929 	bl	8009770 <prvIsQueueEmpty>
 800951e:	4603      	mov	r3, r0
 8009520:	2b00      	cmp	r3, #0
 8009522:	d026      	beq.n	8009572 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d109      	bne.n	8009540 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800952c:	f001 fa9a 	bl	800aa64 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009532:	689b      	ldr	r3, [r3, #8]
 8009534:	4618      	mov	r0, r3
 8009536:	f000 ff4b 	bl	800a3d0 <xTaskPriorityInherit>
 800953a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800953c:	f001 fac2 	bl	800aac4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009542:	3324      	adds	r3, #36	; 0x24
 8009544:	683a      	ldr	r2, [r7, #0]
 8009546:	4611      	mov	r1, r2
 8009548:	4618      	mov	r0, r3
 800954a:	f000 fd69 	bl	800a020 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800954e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009550:	f000 f8bc 	bl	80096cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009554:	f000 fba4 	bl	8009ca0 <xTaskResumeAll>
 8009558:	4603      	mov	r3, r0
 800955a:	2b00      	cmp	r3, #0
 800955c:	f47f af68 	bne.w	8009430 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8009560:	4b18      	ldr	r3, [pc, #96]	; (80095c4 <xQueueSemaphoreTake+0x214>)
 8009562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009566:	601a      	str	r2, [r3, #0]
 8009568:	f3bf 8f4f 	dsb	sy
 800956c:	f3bf 8f6f 	isb	sy
 8009570:	e75e      	b.n	8009430 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009572:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009574:	f000 f8aa 	bl	80096cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009578:	f000 fb92 	bl	8009ca0 <xTaskResumeAll>
 800957c:	e758      	b.n	8009430 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800957e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009580:	f000 f8a4 	bl	80096cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009584:	f000 fb8c 	bl	8009ca0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009588:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800958a:	f000 f8f1 	bl	8009770 <prvIsQueueEmpty>
 800958e:	4603      	mov	r3, r0
 8009590:	2b00      	cmp	r3, #0
 8009592:	f43f af4d 	beq.w	8009430 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009598:	2b00      	cmp	r3, #0
 800959a:	d00d      	beq.n	80095b8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800959c:	f001 fa62 	bl	800aa64 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80095a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80095a2:	f000 f811 	bl	80095c8 <prvGetDisinheritPriorityAfterTimeout>
 80095a6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80095a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095aa:	689b      	ldr	r3, [r3, #8]
 80095ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80095ae:	4618      	mov	r0, r3
 80095b0:	f001 f814 	bl	800a5dc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80095b4:	f001 fa86 	bl	800aac4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80095b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	3738      	adds	r7, #56	; 0x38
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}
 80095c2:	bf00      	nop
 80095c4:	e000ed04 	.word	0xe000ed04

080095c8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80095c8:	b480      	push	{r7}
 80095ca:	b085      	sub	sp, #20
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d006      	beq.n	80095e6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f1c3 0307 	rsb	r3, r3, #7
 80095e2:	60fb      	str	r3, [r7, #12]
 80095e4:	e001      	b.n	80095ea <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80095e6:	2300      	movs	r3, #0
 80095e8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80095ea:	68fb      	ldr	r3, [r7, #12]
	}
 80095ec:	4618      	mov	r0, r3
 80095ee:	3714      	adds	r7, #20
 80095f0:	46bd      	mov	sp, r7
 80095f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f6:	4770      	bx	lr

080095f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b086      	sub	sp, #24
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	60f8      	str	r0, [r7, #12]
 8009600:	60b9      	str	r1, [r7, #8]
 8009602:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009604:	2300      	movs	r3, #0
 8009606:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800960c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009612:	2b00      	cmp	r3, #0
 8009614:	d10d      	bne.n	8009632 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d14d      	bne.n	80096ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	689b      	ldr	r3, [r3, #8]
 8009622:	4618      	mov	r0, r3
 8009624:	f000 ff54 	bl	800a4d0 <xTaskPriorityDisinherit>
 8009628:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	2200      	movs	r2, #0
 800962e:	609a      	str	r2, [r3, #8]
 8009630:	e043      	b.n	80096ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d119      	bne.n	800966c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	6858      	ldr	r0, [r3, #4]
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009640:	461a      	mov	r2, r3
 8009642:	68b9      	ldr	r1, [r7, #8]
 8009644:	f001 fb54 	bl	800acf0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	685a      	ldr	r2, [r3, #4]
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009650:	441a      	add	r2, r3
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	685a      	ldr	r2, [r3, #4]
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	689b      	ldr	r3, [r3, #8]
 800965e:	429a      	cmp	r2, r3
 8009660:	d32b      	bcc.n	80096ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681a      	ldr	r2, [r3, #0]
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	605a      	str	r2, [r3, #4]
 800966a:	e026      	b.n	80096ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	68d8      	ldr	r0, [r3, #12]
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009674:	461a      	mov	r2, r3
 8009676:	68b9      	ldr	r1, [r7, #8]
 8009678:	f001 fb3a 	bl	800acf0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	68da      	ldr	r2, [r3, #12]
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009684:	425b      	negs	r3, r3
 8009686:	441a      	add	r2, r3
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	68da      	ldr	r2, [r3, #12]
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	429a      	cmp	r2, r3
 8009696:	d207      	bcs.n	80096a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	689a      	ldr	r2, [r3, #8]
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096a0:	425b      	negs	r3, r3
 80096a2:	441a      	add	r2, r3
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2b02      	cmp	r3, #2
 80096ac:	d105      	bne.n	80096ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80096ae:	693b      	ldr	r3, [r7, #16]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d002      	beq.n	80096ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	3b01      	subs	r3, #1
 80096b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80096ba:	693b      	ldr	r3, [r7, #16]
 80096bc:	1c5a      	adds	r2, r3, #1
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80096c2:	697b      	ldr	r3, [r7, #20]
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3718      	adds	r7, #24
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}

080096cc <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b084      	sub	sp, #16
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80096d4:	f001 f9c6 	bl	800aa64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80096de:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80096e0:	e011      	b.n	8009706 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d012      	beq.n	8009710 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	3324      	adds	r3, #36	; 0x24
 80096ee:	4618      	mov	r0, r3
 80096f0:	f000 fcba 	bl	800a068 <xTaskRemoveFromEventList>
 80096f4:	4603      	mov	r3, r0
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d001      	beq.n	80096fe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80096fa:	f000 fd8f 	bl	800a21c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80096fe:	7bfb      	ldrb	r3, [r7, #15]
 8009700:	3b01      	subs	r3, #1
 8009702:	b2db      	uxtb	r3, r3
 8009704:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009706:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800970a:	2b00      	cmp	r3, #0
 800970c:	dce9      	bgt.n	80096e2 <prvUnlockQueue+0x16>
 800970e:	e000      	b.n	8009712 <prvUnlockQueue+0x46>
					break;
 8009710:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	22ff      	movs	r2, #255	; 0xff
 8009716:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800971a:	f001 f9d3 	bl	800aac4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800971e:	f001 f9a1 	bl	800aa64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009728:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800972a:	e011      	b.n	8009750 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	691b      	ldr	r3, [r3, #16]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d012      	beq.n	800975a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	3310      	adds	r3, #16
 8009738:	4618      	mov	r0, r3
 800973a:	f000 fc95 	bl	800a068 <xTaskRemoveFromEventList>
 800973e:	4603      	mov	r3, r0
 8009740:	2b00      	cmp	r3, #0
 8009742:	d001      	beq.n	8009748 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009744:	f000 fd6a 	bl	800a21c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009748:	7bbb      	ldrb	r3, [r7, #14]
 800974a:	3b01      	subs	r3, #1
 800974c:	b2db      	uxtb	r3, r3
 800974e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009750:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009754:	2b00      	cmp	r3, #0
 8009756:	dce9      	bgt.n	800972c <prvUnlockQueue+0x60>
 8009758:	e000      	b.n	800975c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800975a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	22ff      	movs	r2, #255	; 0xff
 8009760:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009764:	f001 f9ae 	bl	800aac4 <vPortExitCritical>
}
 8009768:	bf00      	nop
 800976a:	3710      	adds	r7, #16
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}

08009770 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b084      	sub	sp, #16
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009778:	f001 f974 	bl	800aa64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009780:	2b00      	cmp	r3, #0
 8009782:	d102      	bne.n	800978a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009784:	2301      	movs	r3, #1
 8009786:	60fb      	str	r3, [r7, #12]
 8009788:	e001      	b.n	800978e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800978a:	2300      	movs	r3, #0
 800978c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800978e:	f001 f999 	bl	800aac4 <vPortExitCritical>

	return xReturn;
 8009792:	68fb      	ldr	r3, [r7, #12]
}
 8009794:	4618      	mov	r0, r3
 8009796:	3710      	adds	r7, #16
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}

0800979c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b084      	sub	sp, #16
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80097a4:	f001 f95e 	bl	800aa64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097b0:	429a      	cmp	r2, r3
 80097b2:	d102      	bne.n	80097ba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80097b4:	2301      	movs	r3, #1
 80097b6:	60fb      	str	r3, [r7, #12]
 80097b8:	e001      	b.n	80097be <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80097ba:	2300      	movs	r3, #0
 80097bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80097be:	f001 f981 	bl	800aac4 <vPortExitCritical>

	return xReturn;
 80097c2:	68fb      	ldr	r3, [r7, #12]
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3710      	adds	r7, #16
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}

080097cc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b08e      	sub	sp, #56	; 0x38
 80097d0:	af04      	add	r7, sp, #16
 80097d2:	60f8      	str	r0, [r7, #12]
 80097d4:	60b9      	str	r1, [r7, #8]
 80097d6:	607a      	str	r2, [r7, #4]
 80097d8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80097da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d10a      	bne.n	80097f6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80097e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e4:	f383 8811 	msr	BASEPRI, r3
 80097e8:	f3bf 8f6f 	isb	sy
 80097ec:	f3bf 8f4f 	dsb	sy
 80097f0:	623b      	str	r3, [r7, #32]
}
 80097f2:	bf00      	nop
 80097f4:	e7fe      	b.n	80097f4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80097f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d10a      	bne.n	8009812 <xTaskCreateStatic+0x46>
	__asm volatile
 80097fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009800:	f383 8811 	msr	BASEPRI, r3
 8009804:	f3bf 8f6f 	isb	sy
 8009808:	f3bf 8f4f 	dsb	sy
 800980c:	61fb      	str	r3, [r7, #28]
}
 800980e:	bf00      	nop
 8009810:	e7fe      	b.n	8009810 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009812:	2354      	movs	r3, #84	; 0x54
 8009814:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009816:	693b      	ldr	r3, [r7, #16]
 8009818:	2b54      	cmp	r3, #84	; 0x54
 800981a:	d00a      	beq.n	8009832 <xTaskCreateStatic+0x66>
	__asm volatile
 800981c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009820:	f383 8811 	msr	BASEPRI, r3
 8009824:	f3bf 8f6f 	isb	sy
 8009828:	f3bf 8f4f 	dsb	sy
 800982c:	61bb      	str	r3, [r7, #24]
}
 800982e:	bf00      	nop
 8009830:	e7fe      	b.n	8009830 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009832:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009836:	2b00      	cmp	r3, #0
 8009838:	d01a      	beq.n	8009870 <xTaskCreateStatic+0xa4>
 800983a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800983c:	2b00      	cmp	r3, #0
 800983e:	d017      	beq.n	8009870 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009842:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009846:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009848:	631a      	str	r2, [r3, #48]	; 0x30
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800984a:	2300      	movs	r3, #0
 800984c:	9303      	str	r3, [sp, #12]
 800984e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009850:	9302      	str	r3, [sp, #8]
 8009852:	f107 0314 	add.w	r3, r7, #20
 8009856:	9301      	str	r3, [sp, #4]
 8009858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800985a:	9300      	str	r3, [sp, #0]
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	687a      	ldr	r2, [r7, #4]
 8009860:	68b9      	ldr	r1, [r7, #8]
 8009862:	68f8      	ldr	r0, [r7, #12]
 8009864:	f000 f80b 	bl	800987e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009868:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800986a:	f000 f88f 	bl	800998c <prvAddNewTaskToReadyList>
 800986e:	e001      	b.n	8009874 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8009870:	2300      	movs	r3, #0
 8009872:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009874:	697b      	ldr	r3, [r7, #20]
	}
 8009876:	4618      	mov	r0, r3
 8009878:	3728      	adds	r7, #40	; 0x28
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}

0800987e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800987e:	b580      	push	{r7, lr}
 8009880:	b088      	sub	sp, #32
 8009882:	af00      	add	r7, sp, #0
 8009884:	60f8      	str	r0, [r7, #12]
 8009886:	60b9      	str	r1, [r7, #8]
 8009888:	607a      	str	r2, [r7, #4]
 800988a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800988c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800988e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009896:	3b01      	subs	r3, #1
 8009898:	009b      	lsls	r3, r3, #2
 800989a:	4413      	add	r3, r2
 800989c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800989e:	69bb      	ldr	r3, [r7, #24]
 80098a0:	f023 0307 	bic.w	r3, r3, #7
 80098a4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80098a6:	69bb      	ldr	r3, [r7, #24]
 80098a8:	f003 0307 	and.w	r3, r3, #7
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d00a      	beq.n	80098c6 <prvInitialiseNewTask+0x48>
	__asm volatile
 80098b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098b4:	f383 8811 	msr	BASEPRI, r3
 80098b8:	f3bf 8f6f 	isb	sy
 80098bc:	f3bf 8f4f 	dsb	sy
 80098c0:	617b      	str	r3, [r7, #20]
}
 80098c2:	bf00      	nop
 80098c4:	e7fe      	b.n	80098c4 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d01f      	beq.n	800990c <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80098cc:	2300      	movs	r3, #0
 80098ce:	61fb      	str	r3, [r7, #28]
 80098d0:	e012      	b.n	80098f8 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80098d2:	68ba      	ldr	r2, [r7, #8]
 80098d4:	69fb      	ldr	r3, [r7, #28]
 80098d6:	4413      	add	r3, r2
 80098d8:	7819      	ldrb	r1, [r3, #0]
 80098da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098dc:	69fb      	ldr	r3, [r7, #28]
 80098de:	4413      	add	r3, r2
 80098e0:	3334      	adds	r3, #52	; 0x34
 80098e2:	460a      	mov	r2, r1
 80098e4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80098e6:	68ba      	ldr	r2, [r7, #8]
 80098e8:	69fb      	ldr	r3, [r7, #28]
 80098ea:	4413      	add	r3, r2
 80098ec:	781b      	ldrb	r3, [r3, #0]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d006      	beq.n	8009900 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80098f2:	69fb      	ldr	r3, [r7, #28]
 80098f4:	3301      	adds	r3, #1
 80098f6:	61fb      	str	r3, [r7, #28]
 80098f8:	69fb      	ldr	r3, [r7, #28]
 80098fa:	2b0f      	cmp	r3, #15
 80098fc:	d9e9      	bls.n	80098d2 <prvInitialiseNewTask+0x54>
 80098fe:	e000      	b.n	8009902 <prvInitialiseNewTask+0x84>
			{
				break;
 8009900:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009904:	2200      	movs	r2, #0
 8009906:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800990a:	e003      	b.n	8009914 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800990c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800990e:	2200      	movs	r2, #0
 8009910:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009916:	2b06      	cmp	r3, #6
 8009918:	d901      	bls.n	800991e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800991a:	2306      	movs	r3, #6
 800991c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800991e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009920:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009922:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009926:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009928:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800992a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800992c:	2200      	movs	r2, #0
 800992e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009932:	3304      	adds	r3, #4
 8009934:	4618      	mov	r0, r3
 8009936:	f7ff f9eb 	bl	8008d10 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800993a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800993c:	3318      	adds	r3, #24
 800993e:	4618      	mov	r0, r3
 8009940:	f7ff f9e6 	bl	8008d10 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009946:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009948:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800994a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800994c:	f1c3 0207 	rsb	r2, r3, #7
 8009950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009952:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009956:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009958:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800995a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800995c:	2200      	movs	r2, #0
 800995e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009962:	2200      	movs	r2, #0
 8009964:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009968:	683a      	ldr	r2, [r7, #0]
 800996a:	68f9      	ldr	r1, [r7, #12]
 800996c:	69b8      	ldr	r0, [r7, #24]
 800996e:	f000 ff49 	bl	800a804 <pxPortInitialiseStack>
 8009972:	4602      	mov	r2, r0
 8009974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009976:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800997a:	2b00      	cmp	r3, #0
 800997c:	d002      	beq.n	8009984 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800997e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009980:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009982:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009984:	bf00      	nop
 8009986:	3720      	adds	r7, #32
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}

0800998c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b082      	sub	sp, #8
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009994:	f001 f866 	bl	800aa64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009998:	4b2a      	ldr	r3, [pc, #168]	; (8009a44 <prvAddNewTaskToReadyList+0xb8>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	3301      	adds	r3, #1
 800999e:	4a29      	ldr	r2, [pc, #164]	; (8009a44 <prvAddNewTaskToReadyList+0xb8>)
 80099a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80099a2:	4b29      	ldr	r3, [pc, #164]	; (8009a48 <prvAddNewTaskToReadyList+0xbc>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d109      	bne.n	80099be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80099aa:	4a27      	ldr	r2, [pc, #156]	; (8009a48 <prvAddNewTaskToReadyList+0xbc>)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80099b0:	4b24      	ldr	r3, [pc, #144]	; (8009a44 <prvAddNewTaskToReadyList+0xb8>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	2b01      	cmp	r3, #1
 80099b6:	d110      	bne.n	80099da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80099b8:	f000 fc54 	bl	800a264 <prvInitialiseTaskLists>
 80099bc:	e00d      	b.n	80099da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80099be:	4b23      	ldr	r3, [pc, #140]	; (8009a4c <prvAddNewTaskToReadyList+0xc0>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d109      	bne.n	80099da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80099c6:	4b20      	ldr	r3, [pc, #128]	; (8009a48 <prvAddNewTaskToReadyList+0xbc>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099d0:	429a      	cmp	r2, r3
 80099d2:	d802      	bhi.n	80099da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80099d4:	4a1c      	ldr	r2, [pc, #112]	; (8009a48 <prvAddNewTaskToReadyList+0xbc>)
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80099da:	4b1d      	ldr	r3, [pc, #116]	; (8009a50 <prvAddNewTaskToReadyList+0xc4>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	3301      	adds	r3, #1
 80099e0:	4a1b      	ldr	r2, [pc, #108]	; (8009a50 <prvAddNewTaskToReadyList+0xc4>)
 80099e2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099e8:	2201      	movs	r2, #1
 80099ea:	409a      	lsls	r2, r3
 80099ec:	4b19      	ldr	r3, [pc, #100]	; (8009a54 <prvAddNewTaskToReadyList+0xc8>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4313      	orrs	r3, r2
 80099f2:	4a18      	ldr	r2, [pc, #96]	; (8009a54 <prvAddNewTaskToReadyList+0xc8>)
 80099f4:	6013      	str	r3, [r2, #0]
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099fa:	4613      	mov	r3, r2
 80099fc:	009b      	lsls	r3, r3, #2
 80099fe:	4413      	add	r3, r2
 8009a00:	009b      	lsls	r3, r3, #2
 8009a02:	4a15      	ldr	r2, [pc, #84]	; (8009a58 <prvAddNewTaskToReadyList+0xcc>)
 8009a04:	441a      	add	r2, r3
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	3304      	adds	r3, #4
 8009a0a:	4619      	mov	r1, r3
 8009a0c:	4610      	mov	r0, r2
 8009a0e:	f7ff f98c 	bl	8008d2a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009a12:	f001 f857 	bl	800aac4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009a16:	4b0d      	ldr	r3, [pc, #52]	; (8009a4c <prvAddNewTaskToReadyList+0xc0>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d00e      	beq.n	8009a3c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009a1e:	4b0a      	ldr	r3, [pc, #40]	; (8009a48 <prvAddNewTaskToReadyList+0xbc>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	d207      	bcs.n	8009a3c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009a2c:	4b0b      	ldr	r3, [pc, #44]	; (8009a5c <prvAddNewTaskToReadyList+0xd0>)
 8009a2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a32:	601a      	str	r2, [r3, #0]
 8009a34:	f3bf 8f4f 	dsb	sy
 8009a38:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a3c:	bf00      	nop
 8009a3e:	3708      	adds	r7, #8
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}
 8009a44:	20007224 	.word	0x20007224
 8009a48:	20007124 	.word	0x20007124
 8009a4c:	20007230 	.word	0x20007230
 8009a50:	20007240 	.word	0x20007240
 8009a54:	2000722c 	.word	0x2000722c
 8009a58:	20007128 	.word	0x20007128
 8009a5c:	e000ed04 	.word	0xe000ed04

08009a60 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b08a      	sub	sp, #40	; 0x28
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
 8009a68:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d10a      	bne.n	8009a8a <vTaskDelayUntil+0x2a>
	__asm volatile
 8009a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a78:	f383 8811 	msr	BASEPRI, r3
 8009a7c:	f3bf 8f6f 	isb	sy
 8009a80:	f3bf 8f4f 	dsb	sy
 8009a84:	617b      	str	r3, [r7, #20]
}
 8009a86:	bf00      	nop
 8009a88:	e7fe      	b.n	8009a88 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d10a      	bne.n	8009aa6 <vTaskDelayUntil+0x46>
	__asm volatile
 8009a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a94:	f383 8811 	msr	BASEPRI, r3
 8009a98:	f3bf 8f6f 	isb	sy
 8009a9c:	f3bf 8f4f 	dsb	sy
 8009aa0:	613b      	str	r3, [r7, #16]
}
 8009aa2:	bf00      	nop
 8009aa4:	e7fe      	b.n	8009aa4 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8009aa6:	4b2a      	ldr	r3, [pc, #168]	; (8009b50 <vTaskDelayUntil+0xf0>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d00a      	beq.n	8009ac4 <vTaskDelayUntil+0x64>
	__asm volatile
 8009aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab2:	f383 8811 	msr	BASEPRI, r3
 8009ab6:	f3bf 8f6f 	isb	sy
 8009aba:	f3bf 8f4f 	dsb	sy
 8009abe:	60fb      	str	r3, [r7, #12]
}
 8009ac0:	bf00      	nop
 8009ac2:	e7fe      	b.n	8009ac2 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8009ac4:	f000 f8de 	bl	8009c84 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8009ac8:	4b22      	ldr	r3, [pc, #136]	; (8009b54 <vTaskDelayUntil+0xf4>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	683a      	ldr	r2, [r7, #0]
 8009ad4:	4413      	add	r3, r2
 8009ad6:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	6a3a      	ldr	r2, [r7, #32]
 8009ade:	429a      	cmp	r2, r3
 8009ae0:	d20b      	bcs.n	8009afa <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	69fa      	ldr	r2, [r7, #28]
 8009ae8:	429a      	cmp	r2, r3
 8009aea:	d211      	bcs.n	8009b10 <vTaskDelayUntil+0xb0>
 8009aec:	69fa      	ldr	r2, [r7, #28]
 8009aee:	6a3b      	ldr	r3, [r7, #32]
 8009af0:	429a      	cmp	r2, r3
 8009af2:	d90d      	bls.n	8009b10 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8009af4:	2301      	movs	r3, #1
 8009af6:	627b      	str	r3, [r7, #36]	; 0x24
 8009af8:	e00a      	b.n	8009b10 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	69fa      	ldr	r2, [r7, #28]
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d303      	bcc.n	8009b0c <vTaskDelayUntil+0xac>
 8009b04:	69fa      	ldr	r2, [r7, #28]
 8009b06:	6a3b      	ldr	r3, [r7, #32]
 8009b08:	429a      	cmp	r2, r3
 8009b0a:	d901      	bls.n	8009b10 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	69fa      	ldr	r2, [r7, #28]
 8009b14:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8009b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d006      	beq.n	8009b2a <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8009b1c:	69fa      	ldr	r2, [r7, #28]
 8009b1e:	6a3b      	ldr	r3, [r7, #32]
 8009b20:	1ad3      	subs	r3, r2, r3
 8009b22:	2100      	movs	r1, #0
 8009b24:	4618      	mov	r0, r3
 8009b26:	f000 fe07 	bl	800a738 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8009b2a:	f000 f8b9 	bl	8009ca0 <xTaskResumeAll>
 8009b2e:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009b30:	69bb      	ldr	r3, [r7, #24]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d107      	bne.n	8009b46 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8009b36:	4b08      	ldr	r3, [pc, #32]	; (8009b58 <vTaskDelayUntil+0xf8>)
 8009b38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b3c:	601a      	str	r2, [r3, #0]
 8009b3e:	f3bf 8f4f 	dsb	sy
 8009b42:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009b46:	bf00      	nop
 8009b48:	3728      	adds	r7, #40	; 0x28
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}
 8009b4e:	bf00      	nop
 8009b50:	2000724c 	.word	0x2000724c
 8009b54:	20007228 	.word	0x20007228
 8009b58:	e000ed04 	.word	0xe000ed04

08009b5c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b084      	sub	sp, #16
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009b64:	2300      	movs	r3, #0
 8009b66:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d017      	beq.n	8009b9e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009b6e:	4b13      	ldr	r3, [pc, #76]	; (8009bbc <vTaskDelay+0x60>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d00a      	beq.n	8009b8c <vTaskDelay+0x30>
	__asm volatile
 8009b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b7a:	f383 8811 	msr	BASEPRI, r3
 8009b7e:	f3bf 8f6f 	isb	sy
 8009b82:	f3bf 8f4f 	dsb	sy
 8009b86:	60bb      	str	r3, [r7, #8]
}
 8009b88:	bf00      	nop
 8009b8a:	e7fe      	b.n	8009b8a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009b8c:	f000 f87a 	bl	8009c84 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009b90:	2100      	movs	r1, #0
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f000 fdd0 	bl	800a738 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009b98:	f000 f882 	bl	8009ca0 <xTaskResumeAll>
 8009b9c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d107      	bne.n	8009bb4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009ba4:	4b06      	ldr	r3, [pc, #24]	; (8009bc0 <vTaskDelay+0x64>)
 8009ba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009baa:	601a      	str	r2, [r3, #0]
 8009bac:	f3bf 8f4f 	dsb	sy
 8009bb0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009bb4:	bf00      	nop
 8009bb6:	3710      	adds	r7, #16
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}
 8009bbc:	2000724c 	.word	0x2000724c
 8009bc0:	e000ed04 	.word	0xe000ed04

08009bc4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b08a      	sub	sp, #40	; 0x28
 8009bc8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009bd2:	463a      	mov	r2, r7
 8009bd4:	1d39      	adds	r1, r7, #4
 8009bd6:	f107 0308 	add.w	r3, r7, #8
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f7f8 fd44 	bl	8002668 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009be0:	6839      	ldr	r1, [r7, #0]
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	68ba      	ldr	r2, [r7, #8]
 8009be6:	9202      	str	r2, [sp, #8]
 8009be8:	9301      	str	r3, [sp, #4]
 8009bea:	2300      	movs	r3, #0
 8009bec:	9300      	str	r3, [sp, #0]
 8009bee:	2300      	movs	r3, #0
 8009bf0:	460a      	mov	r2, r1
 8009bf2:	491e      	ldr	r1, [pc, #120]	; (8009c6c <vTaskStartScheduler+0xa8>)
 8009bf4:	481e      	ldr	r0, [pc, #120]	; (8009c70 <vTaskStartScheduler+0xac>)
 8009bf6:	f7ff fde9 	bl	80097cc <xTaskCreateStatic>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	4a1d      	ldr	r2, [pc, #116]	; (8009c74 <vTaskStartScheduler+0xb0>)
 8009bfe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009c00:	4b1c      	ldr	r3, [pc, #112]	; (8009c74 <vTaskStartScheduler+0xb0>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d002      	beq.n	8009c0e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009c08:	2301      	movs	r3, #1
 8009c0a:	617b      	str	r3, [r7, #20]
 8009c0c:	e001      	b.n	8009c12 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	2b01      	cmp	r3, #1
 8009c16:	d116      	bne.n	8009c46 <vTaskStartScheduler+0x82>
	__asm volatile
 8009c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c1c:	f383 8811 	msr	BASEPRI, r3
 8009c20:	f3bf 8f6f 	isb	sy
 8009c24:	f3bf 8f4f 	dsb	sy
 8009c28:	613b      	str	r3, [r7, #16]
}
 8009c2a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009c2c:	4b12      	ldr	r3, [pc, #72]	; (8009c78 <vTaskStartScheduler+0xb4>)
 8009c2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009c32:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009c34:	4b11      	ldr	r3, [pc, #68]	; (8009c7c <vTaskStartScheduler+0xb8>)
 8009c36:	2201      	movs	r2, #1
 8009c38:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009c3a:	4b11      	ldr	r3, [pc, #68]	; (8009c80 <vTaskStartScheduler+0xbc>)
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009c40:	f000 fe6e 	bl	800a920 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009c44:	e00e      	b.n	8009c64 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c4c:	d10a      	bne.n	8009c64 <vTaskStartScheduler+0xa0>
	__asm volatile
 8009c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c52:	f383 8811 	msr	BASEPRI, r3
 8009c56:	f3bf 8f6f 	isb	sy
 8009c5a:	f3bf 8f4f 	dsb	sy
 8009c5e:	60fb      	str	r3, [r7, #12]
}
 8009c60:	bf00      	nop
 8009c62:	e7fe      	b.n	8009c62 <vTaskStartScheduler+0x9e>
}
 8009c64:	bf00      	nop
 8009c66:	3718      	adds	r7, #24
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}
 8009c6c:	0800ad80 	.word	0x0800ad80
 8009c70:	0800a235 	.word	0x0800a235
 8009c74:	20007248 	.word	0x20007248
 8009c78:	20007244 	.word	0x20007244
 8009c7c:	20007230 	.word	0x20007230
 8009c80:	20007228 	.word	0x20007228

08009c84 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009c84:	b480      	push	{r7}
 8009c86:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009c88:	4b04      	ldr	r3, [pc, #16]	; (8009c9c <vTaskSuspendAll+0x18>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	3301      	adds	r3, #1
 8009c8e:	4a03      	ldr	r2, [pc, #12]	; (8009c9c <vTaskSuspendAll+0x18>)
 8009c90:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009c92:	bf00      	nop
 8009c94:	46bd      	mov	sp, r7
 8009c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9a:	4770      	bx	lr
 8009c9c:	2000724c 	.word	0x2000724c

08009ca0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b084      	sub	sp, #16
 8009ca4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009caa:	2300      	movs	r3, #0
 8009cac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009cae:	4b41      	ldr	r3, [pc, #260]	; (8009db4 <xTaskResumeAll+0x114>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d10a      	bne.n	8009ccc <xTaskResumeAll+0x2c>
	__asm volatile
 8009cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cba:	f383 8811 	msr	BASEPRI, r3
 8009cbe:	f3bf 8f6f 	isb	sy
 8009cc2:	f3bf 8f4f 	dsb	sy
 8009cc6:	603b      	str	r3, [r7, #0]
}
 8009cc8:	bf00      	nop
 8009cca:	e7fe      	b.n	8009cca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009ccc:	f000 feca 	bl	800aa64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009cd0:	4b38      	ldr	r3, [pc, #224]	; (8009db4 <xTaskResumeAll+0x114>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	3b01      	subs	r3, #1
 8009cd6:	4a37      	ldr	r2, [pc, #220]	; (8009db4 <xTaskResumeAll+0x114>)
 8009cd8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009cda:	4b36      	ldr	r3, [pc, #216]	; (8009db4 <xTaskResumeAll+0x114>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d161      	bne.n	8009da6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009ce2:	4b35      	ldr	r3, [pc, #212]	; (8009db8 <xTaskResumeAll+0x118>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d05d      	beq.n	8009da6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009cea:	e02e      	b.n	8009d4a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cec:	4b33      	ldr	r3, [pc, #204]	; (8009dbc <xTaskResumeAll+0x11c>)
 8009cee:	68db      	ldr	r3, [r3, #12]
 8009cf0:	68db      	ldr	r3, [r3, #12]
 8009cf2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	3318      	adds	r3, #24
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f7ff f873 	bl	8008de4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	3304      	adds	r3, #4
 8009d02:	4618      	mov	r0, r3
 8009d04:	f7ff f86e 	bl	8008de4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d0c:	2201      	movs	r2, #1
 8009d0e:	409a      	lsls	r2, r3
 8009d10:	4b2b      	ldr	r3, [pc, #172]	; (8009dc0 <xTaskResumeAll+0x120>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	4313      	orrs	r3, r2
 8009d16:	4a2a      	ldr	r2, [pc, #168]	; (8009dc0 <xTaskResumeAll+0x120>)
 8009d18:	6013      	str	r3, [r2, #0]
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d1e:	4613      	mov	r3, r2
 8009d20:	009b      	lsls	r3, r3, #2
 8009d22:	4413      	add	r3, r2
 8009d24:	009b      	lsls	r3, r3, #2
 8009d26:	4a27      	ldr	r2, [pc, #156]	; (8009dc4 <xTaskResumeAll+0x124>)
 8009d28:	441a      	add	r2, r3
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	3304      	adds	r3, #4
 8009d2e:	4619      	mov	r1, r3
 8009d30:	4610      	mov	r0, r2
 8009d32:	f7fe fffa 	bl	8008d2a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d3a:	4b23      	ldr	r3, [pc, #140]	; (8009dc8 <xTaskResumeAll+0x128>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d40:	429a      	cmp	r2, r3
 8009d42:	d302      	bcc.n	8009d4a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009d44:	4b21      	ldr	r3, [pc, #132]	; (8009dcc <xTaskResumeAll+0x12c>)
 8009d46:	2201      	movs	r2, #1
 8009d48:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009d4a:	4b1c      	ldr	r3, [pc, #112]	; (8009dbc <xTaskResumeAll+0x11c>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d1cc      	bne.n	8009cec <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d001      	beq.n	8009d5c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009d58:	f000 fafc 	bl	800a354 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009d5c:	4b1c      	ldr	r3, [pc, #112]	; (8009dd0 <xTaskResumeAll+0x130>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d010      	beq.n	8009d8a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009d68:	f000 f846 	bl	8009df8 <xTaskIncrementTick>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d002      	beq.n	8009d78 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8009d72:	4b16      	ldr	r3, [pc, #88]	; (8009dcc <xTaskResumeAll+0x12c>)
 8009d74:	2201      	movs	r2, #1
 8009d76:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	3b01      	subs	r3, #1
 8009d7c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d1f1      	bne.n	8009d68 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8009d84:	4b12      	ldr	r3, [pc, #72]	; (8009dd0 <xTaskResumeAll+0x130>)
 8009d86:	2200      	movs	r2, #0
 8009d88:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009d8a:	4b10      	ldr	r3, [pc, #64]	; (8009dcc <xTaskResumeAll+0x12c>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d009      	beq.n	8009da6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009d92:	2301      	movs	r3, #1
 8009d94:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009d96:	4b0f      	ldr	r3, [pc, #60]	; (8009dd4 <xTaskResumeAll+0x134>)
 8009d98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d9c:	601a      	str	r2, [r3, #0]
 8009d9e:	f3bf 8f4f 	dsb	sy
 8009da2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009da6:	f000 fe8d 	bl	800aac4 <vPortExitCritical>

	return xAlreadyYielded;
 8009daa:	68bb      	ldr	r3, [r7, #8]
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3710      	adds	r7, #16
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}
 8009db4:	2000724c 	.word	0x2000724c
 8009db8:	20007224 	.word	0x20007224
 8009dbc:	200071e4 	.word	0x200071e4
 8009dc0:	2000722c 	.word	0x2000722c
 8009dc4:	20007128 	.word	0x20007128
 8009dc8:	20007124 	.word	0x20007124
 8009dcc:	20007238 	.word	0x20007238
 8009dd0:	20007234 	.word	0x20007234
 8009dd4:	e000ed04 	.word	0xe000ed04

08009dd8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b083      	sub	sp, #12
 8009ddc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009dde:	4b05      	ldr	r3, [pc, #20]	; (8009df4 <xTaskGetTickCount+0x1c>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009de4:	687b      	ldr	r3, [r7, #4]
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	370c      	adds	r7, #12
 8009dea:	46bd      	mov	sp, r7
 8009dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df0:	4770      	bx	lr
 8009df2:	bf00      	nop
 8009df4:	20007228 	.word	0x20007228

08009df8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b086      	sub	sp, #24
 8009dfc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e02:	4b4e      	ldr	r3, [pc, #312]	; (8009f3c <xTaskIncrementTick+0x144>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	f040 8088 	bne.w	8009f1c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009e0c:	4b4c      	ldr	r3, [pc, #304]	; (8009f40 <xTaskIncrementTick+0x148>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	3301      	adds	r3, #1
 8009e12:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009e14:	4a4a      	ldr	r2, [pc, #296]	; (8009f40 <xTaskIncrementTick+0x148>)
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d120      	bne.n	8009e62 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009e20:	4b48      	ldr	r3, [pc, #288]	; (8009f44 <xTaskIncrementTick+0x14c>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d00a      	beq.n	8009e40 <xTaskIncrementTick+0x48>
	__asm volatile
 8009e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e2e:	f383 8811 	msr	BASEPRI, r3
 8009e32:	f3bf 8f6f 	isb	sy
 8009e36:	f3bf 8f4f 	dsb	sy
 8009e3a:	603b      	str	r3, [r7, #0]
}
 8009e3c:	bf00      	nop
 8009e3e:	e7fe      	b.n	8009e3e <xTaskIncrementTick+0x46>
 8009e40:	4b40      	ldr	r3, [pc, #256]	; (8009f44 <xTaskIncrementTick+0x14c>)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	60fb      	str	r3, [r7, #12]
 8009e46:	4b40      	ldr	r3, [pc, #256]	; (8009f48 <xTaskIncrementTick+0x150>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	4a3e      	ldr	r2, [pc, #248]	; (8009f44 <xTaskIncrementTick+0x14c>)
 8009e4c:	6013      	str	r3, [r2, #0]
 8009e4e:	4a3e      	ldr	r2, [pc, #248]	; (8009f48 <xTaskIncrementTick+0x150>)
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	6013      	str	r3, [r2, #0]
 8009e54:	4b3d      	ldr	r3, [pc, #244]	; (8009f4c <xTaskIncrementTick+0x154>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	3301      	adds	r3, #1
 8009e5a:	4a3c      	ldr	r2, [pc, #240]	; (8009f4c <xTaskIncrementTick+0x154>)
 8009e5c:	6013      	str	r3, [r2, #0]
 8009e5e:	f000 fa79 	bl	800a354 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009e62:	4b3b      	ldr	r3, [pc, #236]	; (8009f50 <xTaskIncrementTick+0x158>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	693a      	ldr	r2, [r7, #16]
 8009e68:	429a      	cmp	r2, r3
 8009e6a:	d348      	bcc.n	8009efe <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e6c:	4b35      	ldr	r3, [pc, #212]	; (8009f44 <xTaskIncrementTick+0x14c>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d104      	bne.n	8009e80 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e76:	4b36      	ldr	r3, [pc, #216]	; (8009f50 <xTaskIncrementTick+0x158>)
 8009e78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009e7c:	601a      	str	r2, [r3, #0]
					break;
 8009e7e:	e03e      	b.n	8009efe <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e80:	4b30      	ldr	r3, [pc, #192]	; (8009f44 <xTaskIncrementTick+0x14c>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	68db      	ldr	r3, [r3, #12]
 8009e86:	68db      	ldr	r3, [r3, #12]
 8009e88:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	685b      	ldr	r3, [r3, #4]
 8009e8e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009e90:	693a      	ldr	r2, [r7, #16]
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	429a      	cmp	r2, r3
 8009e96:	d203      	bcs.n	8009ea0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009e98:	4a2d      	ldr	r2, [pc, #180]	; (8009f50 <xTaskIncrementTick+0x158>)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009e9e:	e02e      	b.n	8009efe <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	3304      	adds	r3, #4
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f7fe ff9d 	bl	8008de4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d004      	beq.n	8009ebc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	3318      	adds	r3, #24
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f7fe ff94 	bl	8008de4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ec0:	2201      	movs	r2, #1
 8009ec2:	409a      	lsls	r2, r3
 8009ec4:	4b23      	ldr	r3, [pc, #140]	; (8009f54 <xTaskIncrementTick+0x15c>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	4313      	orrs	r3, r2
 8009eca:	4a22      	ldr	r2, [pc, #136]	; (8009f54 <xTaskIncrementTick+0x15c>)
 8009ecc:	6013      	str	r3, [r2, #0]
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ed2:	4613      	mov	r3, r2
 8009ed4:	009b      	lsls	r3, r3, #2
 8009ed6:	4413      	add	r3, r2
 8009ed8:	009b      	lsls	r3, r3, #2
 8009eda:	4a1f      	ldr	r2, [pc, #124]	; (8009f58 <xTaskIncrementTick+0x160>)
 8009edc:	441a      	add	r2, r3
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	3304      	adds	r3, #4
 8009ee2:	4619      	mov	r1, r3
 8009ee4:	4610      	mov	r0, r2
 8009ee6:	f7fe ff20 	bl	8008d2a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eee:	4b1b      	ldr	r3, [pc, #108]	; (8009f5c <xTaskIncrementTick+0x164>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ef4:	429a      	cmp	r2, r3
 8009ef6:	d3b9      	bcc.n	8009e6c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009ef8:	2301      	movs	r3, #1
 8009efa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009efc:	e7b6      	b.n	8009e6c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009efe:	4b17      	ldr	r3, [pc, #92]	; (8009f5c <xTaskIncrementTick+0x164>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f04:	4914      	ldr	r1, [pc, #80]	; (8009f58 <xTaskIncrementTick+0x160>)
 8009f06:	4613      	mov	r3, r2
 8009f08:	009b      	lsls	r3, r3, #2
 8009f0a:	4413      	add	r3, r2
 8009f0c:	009b      	lsls	r3, r3, #2
 8009f0e:	440b      	add	r3, r1
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	2b01      	cmp	r3, #1
 8009f14:	d907      	bls.n	8009f26 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8009f16:	2301      	movs	r3, #1
 8009f18:	617b      	str	r3, [r7, #20]
 8009f1a:	e004      	b.n	8009f26 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009f1c:	4b10      	ldr	r3, [pc, #64]	; (8009f60 <xTaskIncrementTick+0x168>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	3301      	adds	r3, #1
 8009f22:	4a0f      	ldr	r2, [pc, #60]	; (8009f60 <xTaskIncrementTick+0x168>)
 8009f24:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009f26:	4b0f      	ldr	r3, [pc, #60]	; (8009f64 <xTaskIncrementTick+0x16c>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d001      	beq.n	8009f32 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8009f2e:	2301      	movs	r3, #1
 8009f30:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009f32:	697b      	ldr	r3, [r7, #20]
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	3718      	adds	r7, #24
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}
 8009f3c:	2000724c 	.word	0x2000724c
 8009f40:	20007228 	.word	0x20007228
 8009f44:	200071dc 	.word	0x200071dc
 8009f48:	200071e0 	.word	0x200071e0
 8009f4c:	2000723c 	.word	0x2000723c
 8009f50:	20007244 	.word	0x20007244
 8009f54:	2000722c 	.word	0x2000722c
 8009f58:	20007128 	.word	0x20007128
 8009f5c:	20007124 	.word	0x20007124
 8009f60:	20007234 	.word	0x20007234
 8009f64:	20007238 	.word	0x20007238

08009f68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b087      	sub	sp, #28
 8009f6c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009f6e:	4b27      	ldr	r3, [pc, #156]	; (800a00c <vTaskSwitchContext+0xa4>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d003      	beq.n	8009f7e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009f76:	4b26      	ldr	r3, [pc, #152]	; (800a010 <vTaskSwitchContext+0xa8>)
 8009f78:	2201      	movs	r2, #1
 8009f7a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009f7c:	e03f      	b.n	8009ffe <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8009f7e:	4b24      	ldr	r3, [pc, #144]	; (800a010 <vTaskSwitchContext+0xa8>)
 8009f80:	2200      	movs	r2, #0
 8009f82:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f84:	4b23      	ldr	r3, [pc, #140]	; (800a014 <vTaskSwitchContext+0xac>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	fab3 f383 	clz	r3, r3
 8009f90:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009f92:	7afb      	ldrb	r3, [r7, #11]
 8009f94:	f1c3 031f 	rsb	r3, r3, #31
 8009f98:	617b      	str	r3, [r7, #20]
 8009f9a:	491f      	ldr	r1, [pc, #124]	; (800a018 <vTaskSwitchContext+0xb0>)
 8009f9c:	697a      	ldr	r2, [r7, #20]
 8009f9e:	4613      	mov	r3, r2
 8009fa0:	009b      	lsls	r3, r3, #2
 8009fa2:	4413      	add	r3, r2
 8009fa4:	009b      	lsls	r3, r3, #2
 8009fa6:	440b      	add	r3, r1
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d10a      	bne.n	8009fc4 <vTaskSwitchContext+0x5c>
	__asm volatile
 8009fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fb2:	f383 8811 	msr	BASEPRI, r3
 8009fb6:	f3bf 8f6f 	isb	sy
 8009fba:	f3bf 8f4f 	dsb	sy
 8009fbe:	607b      	str	r3, [r7, #4]
}
 8009fc0:	bf00      	nop
 8009fc2:	e7fe      	b.n	8009fc2 <vTaskSwitchContext+0x5a>
 8009fc4:	697a      	ldr	r2, [r7, #20]
 8009fc6:	4613      	mov	r3, r2
 8009fc8:	009b      	lsls	r3, r3, #2
 8009fca:	4413      	add	r3, r2
 8009fcc:	009b      	lsls	r3, r3, #2
 8009fce:	4a12      	ldr	r2, [pc, #72]	; (800a018 <vTaskSwitchContext+0xb0>)
 8009fd0:	4413      	add	r3, r2
 8009fd2:	613b      	str	r3, [r7, #16]
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	685b      	ldr	r3, [r3, #4]
 8009fd8:	685a      	ldr	r2, [r3, #4]
 8009fda:	693b      	ldr	r3, [r7, #16]
 8009fdc:	605a      	str	r2, [r3, #4]
 8009fde:	693b      	ldr	r3, [r7, #16]
 8009fe0:	685a      	ldr	r2, [r3, #4]
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	3308      	adds	r3, #8
 8009fe6:	429a      	cmp	r2, r3
 8009fe8:	d104      	bne.n	8009ff4 <vTaskSwitchContext+0x8c>
 8009fea:	693b      	ldr	r3, [r7, #16]
 8009fec:	685b      	ldr	r3, [r3, #4]
 8009fee:	685a      	ldr	r2, [r3, #4]
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	605a      	str	r2, [r3, #4]
 8009ff4:	693b      	ldr	r3, [r7, #16]
 8009ff6:	685b      	ldr	r3, [r3, #4]
 8009ff8:	68db      	ldr	r3, [r3, #12]
 8009ffa:	4a08      	ldr	r2, [pc, #32]	; (800a01c <vTaskSwitchContext+0xb4>)
 8009ffc:	6013      	str	r3, [r2, #0]
}
 8009ffe:	bf00      	nop
 800a000:	371c      	adds	r7, #28
 800a002:	46bd      	mov	sp, r7
 800a004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a008:	4770      	bx	lr
 800a00a:	bf00      	nop
 800a00c:	2000724c 	.word	0x2000724c
 800a010:	20007238 	.word	0x20007238
 800a014:	2000722c 	.word	0x2000722c
 800a018:	20007128 	.word	0x20007128
 800a01c:	20007124 	.word	0x20007124

0800a020 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b084      	sub	sp, #16
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
 800a028:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d10a      	bne.n	800a046 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a030:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a034:	f383 8811 	msr	BASEPRI, r3
 800a038:	f3bf 8f6f 	isb	sy
 800a03c:	f3bf 8f4f 	dsb	sy
 800a040:	60fb      	str	r3, [r7, #12]
}
 800a042:	bf00      	nop
 800a044:	e7fe      	b.n	800a044 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a046:	4b07      	ldr	r3, [pc, #28]	; (800a064 <vTaskPlaceOnEventList+0x44>)
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	3318      	adds	r3, #24
 800a04c:	4619      	mov	r1, r3
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f7fe fe8f 	bl	8008d72 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a054:	2101      	movs	r1, #1
 800a056:	6838      	ldr	r0, [r7, #0]
 800a058:	f000 fb6e 	bl	800a738 <prvAddCurrentTaskToDelayedList>
}
 800a05c:	bf00      	nop
 800a05e:	3710      	adds	r7, #16
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}
 800a064:	20007124 	.word	0x20007124

0800a068 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b086      	sub	sp, #24
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	68db      	ldr	r3, [r3, #12]
 800a074:	68db      	ldr	r3, [r3, #12]
 800a076:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a078:	693b      	ldr	r3, [r7, #16]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d10a      	bne.n	800a094 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a082:	f383 8811 	msr	BASEPRI, r3
 800a086:	f3bf 8f6f 	isb	sy
 800a08a:	f3bf 8f4f 	dsb	sy
 800a08e:	60fb      	str	r3, [r7, #12]
}
 800a090:	bf00      	nop
 800a092:	e7fe      	b.n	800a092 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	3318      	adds	r3, #24
 800a098:	4618      	mov	r0, r3
 800a09a:	f7fe fea3 	bl	8008de4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a09e:	4b1d      	ldr	r3, [pc, #116]	; (800a114 <xTaskRemoveFromEventList+0xac>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d11c      	bne.n	800a0e0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a0a6:	693b      	ldr	r3, [r7, #16]
 800a0a8:	3304      	adds	r3, #4
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f7fe fe9a 	bl	8008de4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a0b0:	693b      	ldr	r3, [r7, #16]
 800a0b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0b4:	2201      	movs	r2, #1
 800a0b6:	409a      	lsls	r2, r3
 800a0b8:	4b17      	ldr	r3, [pc, #92]	; (800a118 <xTaskRemoveFromEventList+0xb0>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	4313      	orrs	r3, r2
 800a0be:	4a16      	ldr	r2, [pc, #88]	; (800a118 <xTaskRemoveFromEventList+0xb0>)
 800a0c0:	6013      	str	r3, [r2, #0]
 800a0c2:	693b      	ldr	r3, [r7, #16]
 800a0c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0c6:	4613      	mov	r3, r2
 800a0c8:	009b      	lsls	r3, r3, #2
 800a0ca:	4413      	add	r3, r2
 800a0cc:	009b      	lsls	r3, r3, #2
 800a0ce:	4a13      	ldr	r2, [pc, #76]	; (800a11c <xTaskRemoveFromEventList+0xb4>)
 800a0d0:	441a      	add	r2, r3
 800a0d2:	693b      	ldr	r3, [r7, #16]
 800a0d4:	3304      	adds	r3, #4
 800a0d6:	4619      	mov	r1, r3
 800a0d8:	4610      	mov	r0, r2
 800a0da:	f7fe fe26 	bl	8008d2a <vListInsertEnd>
 800a0de:	e005      	b.n	800a0ec <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a0e0:	693b      	ldr	r3, [r7, #16]
 800a0e2:	3318      	adds	r3, #24
 800a0e4:	4619      	mov	r1, r3
 800a0e6:	480e      	ldr	r0, [pc, #56]	; (800a120 <xTaskRemoveFromEventList+0xb8>)
 800a0e8:	f7fe fe1f 	bl	8008d2a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0f0:	4b0c      	ldr	r3, [pc, #48]	; (800a124 <xTaskRemoveFromEventList+0xbc>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0f6:	429a      	cmp	r2, r3
 800a0f8:	d905      	bls.n	800a106 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a0fe:	4b0a      	ldr	r3, [pc, #40]	; (800a128 <xTaskRemoveFromEventList+0xc0>)
 800a100:	2201      	movs	r2, #1
 800a102:	601a      	str	r2, [r3, #0]
 800a104:	e001      	b.n	800a10a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800a106:	2300      	movs	r3, #0
 800a108:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a10a:	697b      	ldr	r3, [r7, #20]
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	3718      	adds	r7, #24
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}
 800a114:	2000724c 	.word	0x2000724c
 800a118:	2000722c 	.word	0x2000722c
 800a11c:	20007128 	.word	0x20007128
 800a120:	200071e4 	.word	0x200071e4
 800a124:	20007124 	.word	0x20007124
 800a128:	20007238 	.word	0x20007238

0800a12c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a12c:	b480      	push	{r7}
 800a12e:	b083      	sub	sp, #12
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a134:	4b06      	ldr	r3, [pc, #24]	; (800a150 <vTaskInternalSetTimeOutState+0x24>)
 800a136:	681a      	ldr	r2, [r3, #0]
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a13c:	4b05      	ldr	r3, [pc, #20]	; (800a154 <vTaskInternalSetTimeOutState+0x28>)
 800a13e:	681a      	ldr	r2, [r3, #0]
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	605a      	str	r2, [r3, #4]
}
 800a144:	bf00      	nop
 800a146:	370c      	adds	r7, #12
 800a148:	46bd      	mov	sp, r7
 800a14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14e:	4770      	bx	lr
 800a150:	2000723c 	.word	0x2000723c
 800a154:	20007228 	.word	0x20007228

0800a158 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b088      	sub	sp, #32
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
 800a160:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d10a      	bne.n	800a17e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a16c:	f383 8811 	msr	BASEPRI, r3
 800a170:	f3bf 8f6f 	isb	sy
 800a174:	f3bf 8f4f 	dsb	sy
 800a178:	613b      	str	r3, [r7, #16]
}
 800a17a:	bf00      	nop
 800a17c:	e7fe      	b.n	800a17c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d10a      	bne.n	800a19a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a184:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a188:	f383 8811 	msr	BASEPRI, r3
 800a18c:	f3bf 8f6f 	isb	sy
 800a190:	f3bf 8f4f 	dsb	sy
 800a194:	60fb      	str	r3, [r7, #12]
}
 800a196:	bf00      	nop
 800a198:	e7fe      	b.n	800a198 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a19a:	f000 fc63 	bl	800aa64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a19e:	4b1d      	ldr	r3, [pc, #116]	; (800a214 <xTaskCheckForTimeOut+0xbc>)
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	685b      	ldr	r3, [r3, #4]
 800a1a8:	69ba      	ldr	r2, [r7, #24]
 800a1aa:	1ad3      	subs	r3, r2, r3
 800a1ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a1b6:	d102      	bne.n	800a1be <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	61fb      	str	r3, [r7, #28]
 800a1bc:	e023      	b.n	800a206 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681a      	ldr	r2, [r3, #0]
 800a1c2:	4b15      	ldr	r3, [pc, #84]	; (800a218 <xTaskCheckForTimeOut+0xc0>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	d007      	beq.n	800a1da <xTaskCheckForTimeOut+0x82>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	685b      	ldr	r3, [r3, #4]
 800a1ce:	69ba      	ldr	r2, [r7, #24]
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	d302      	bcc.n	800a1da <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	61fb      	str	r3, [r7, #28]
 800a1d8:	e015      	b.n	800a206 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	697a      	ldr	r2, [r7, #20]
 800a1e0:	429a      	cmp	r2, r3
 800a1e2:	d20b      	bcs.n	800a1fc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	681a      	ldr	r2, [r3, #0]
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	1ad2      	subs	r2, r2, r3
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f7ff ff9b 	bl	800a12c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	61fb      	str	r3, [r7, #28]
 800a1fa:	e004      	b.n	800a206 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	2200      	movs	r2, #0
 800a200:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a202:	2301      	movs	r3, #1
 800a204:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a206:	f000 fc5d 	bl	800aac4 <vPortExitCritical>

	return xReturn;
 800a20a:	69fb      	ldr	r3, [r7, #28]
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	3720      	adds	r7, #32
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}
 800a214:	20007228 	.word	0x20007228
 800a218:	2000723c 	.word	0x2000723c

0800a21c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a21c:	b480      	push	{r7}
 800a21e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a220:	4b03      	ldr	r3, [pc, #12]	; (800a230 <vTaskMissedYield+0x14>)
 800a222:	2201      	movs	r2, #1
 800a224:	601a      	str	r2, [r3, #0]
}
 800a226:	bf00      	nop
 800a228:	46bd      	mov	sp, r7
 800a22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22e:	4770      	bx	lr
 800a230:	20007238 	.word	0x20007238

0800a234 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b082      	sub	sp, #8
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a23c:	f000 f852 	bl	800a2e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a240:	4b06      	ldr	r3, [pc, #24]	; (800a25c <prvIdleTask+0x28>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	2b01      	cmp	r3, #1
 800a246:	d9f9      	bls.n	800a23c <prvIdleTask+0x8>
			{
				taskYIELD();
 800a248:	4b05      	ldr	r3, [pc, #20]	; (800a260 <prvIdleTask+0x2c>)
 800a24a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a24e:	601a      	str	r2, [r3, #0]
 800a250:	f3bf 8f4f 	dsb	sy
 800a254:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a258:	e7f0      	b.n	800a23c <prvIdleTask+0x8>
 800a25a:	bf00      	nop
 800a25c:	20007128 	.word	0x20007128
 800a260:	e000ed04 	.word	0xe000ed04

0800a264 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b082      	sub	sp, #8
 800a268:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a26a:	2300      	movs	r3, #0
 800a26c:	607b      	str	r3, [r7, #4]
 800a26e:	e00c      	b.n	800a28a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a270:	687a      	ldr	r2, [r7, #4]
 800a272:	4613      	mov	r3, r2
 800a274:	009b      	lsls	r3, r3, #2
 800a276:	4413      	add	r3, r2
 800a278:	009b      	lsls	r3, r3, #2
 800a27a:	4a12      	ldr	r2, [pc, #72]	; (800a2c4 <prvInitialiseTaskLists+0x60>)
 800a27c:	4413      	add	r3, r2
 800a27e:	4618      	mov	r0, r3
 800a280:	f7fe fd26 	bl	8008cd0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	3301      	adds	r3, #1
 800a288:	607b      	str	r3, [r7, #4]
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2b06      	cmp	r3, #6
 800a28e:	d9ef      	bls.n	800a270 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a290:	480d      	ldr	r0, [pc, #52]	; (800a2c8 <prvInitialiseTaskLists+0x64>)
 800a292:	f7fe fd1d 	bl	8008cd0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a296:	480d      	ldr	r0, [pc, #52]	; (800a2cc <prvInitialiseTaskLists+0x68>)
 800a298:	f7fe fd1a 	bl	8008cd0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a29c:	480c      	ldr	r0, [pc, #48]	; (800a2d0 <prvInitialiseTaskLists+0x6c>)
 800a29e:	f7fe fd17 	bl	8008cd0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a2a2:	480c      	ldr	r0, [pc, #48]	; (800a2d4 <prvInitialiseTaskLists+0x70>)
 800a2a4:	f7fe fd14 	bl	8008cd0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a2a8:	480b      	ldr	r0, [pc, #44]	; (800a2d8 <prvInitialiseTaskLists+0x74>)
 800a2aa:	f7fe fd11 	bl	8008cd0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a2ae:	4b0b      	ldr	r3, [pc, #44]	; (800a2dc <prvInitialiseTaskLists+0x78>)
 800a2b0:	4a05      	ldr	r2, [pc, #20]	; (800a2c8 <prvInitialiseTaskLists+0x64>)
 800a2b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a2b4:	4b0a      	ldr	r3, [pc, #40]	; (800a2e0 <prvInitialiseTaskLists+0x7c>)
 800a2b6:	4a05      	ldr	r2, [pc, #20]	; (800a2cc <prvInitialiseTaskLists+0x68>)
 800a2b8:	601a      	str	r2, [r3, #0]
}
 800a2ba:	bf00      	nop
 800a2bc:	3708      	adds	r7, #8
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}
 800a2c2:	bf00      	nop
 800a2c4:	20007128 	.word	0x20007128
 800a2c8:	200071b4 	.word	0x200071b4
 800a2cc:	200071c8 	.word	0x200071c8
 800a2d0:	200071e4 	.word	0x200071e4
 800a2d4:	200071f8 	.word	0x200071f8
 800a2d8:	20007210 	.word	0x20007210
 800a2dc:	200071dc 	.word	0x200071dc
 800a2e0:	200071e0 	.word	0x200071e0

0800a2e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b082      	sub	sp, #8
 800a2e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a2ea:	e019      	b.n	800a320 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a2ec:	f000 fbba 	bl	800aa64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2f0:	4b10      	ldr	r3, [pc, #64]	; (800a334 <prvCheckTasksWaitingTermination+0x50>)
 800a2f2:	68db      	ldr	r3, [r3, #12]
 800a2f4:	68db      	ldr	r3, [r3, #12]
 800a2f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	3304      	adds	r3, #4
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f7fe fd71 	bl	8008de4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a302:	4b0d      	ldr	r3, [pc, #52]	; (800a338 <prvCheckTasksWaitingTermination+0x54>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	3b01      	subs	r3, #1
 800a308:	4a0b      	ldr	r2, [pc, #44]	; (800a338 <prvCheckTasksWaitingTermination+0x54>)
 800a30a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a30c:	4b0b      	ldr	r3, [pc, #44]	; (800a33c <prvCheckTasksWaitingTermination+0x58>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	3b01      	subs	r3, #1
 800a312:	4a0a      	ldr	r2, [pc, #40]	; (800a33c <prvCheckTasksWaitingTermination+0x58>)
 800a314:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a316:	f000 fbd5 	bl	800aac4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f000 f810 	bl	800a340 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a320:	4b06      	ldr	r3, [pc, #24]	; (800a33c <prvCheckTasksWaitingTermination+0x58>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d1e1      	bne.n	800a2ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a328:	bf00      	nop
 800a32a:	bf00      	nop
 800a32c:	3708      	adds	r7, #8
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}
 800a332:	bf00      	nop
 800a334:	200071f8 	.word	0x200071f8
 800a338:	20007224 	.word	0x20007224
 800a33c:	2000720c 	.word	0x2000720c

0800a340 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a340:	b480      	push	{r7}
 800a342:	b083      	sub	sp, #12
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a348:	bf00      	nop
 800a34a:	370c      	adds	r7, #12
 800a34c:	46bd      	mov	sp, r7
 800a34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a352:	4770      	bx	lr

0800a354 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a354:	b480      	push	{r7}
 800a356:	b083      	sub	sp, #12
 800a358:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a35a:	4b0c      	ldr	r3, [pc, #48]	; (800a38c <prvResetNextTaskUnblockTime+0x38>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d104      	bne.n	800a36e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a364:	4b0a      	ldr	r3, [pc, #40]	; (800a390 <prvResetNextTaskUnblockTime+0x3c>)
 800a366:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a36a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a36c:	e008      	b.n	800a380 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a36e:	4b07      	ldr	r3, [pc, #28]	; (800a38c <prvResetNextTaskUnblockTime+0x38>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	68db      	ldr	r3, [r3, #12]
 800a374:	68db      	ldr	r3, [r3, #12]
 800a376:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	685b      	ldr	r3, [r3, #4]
 800a37c:	4a04      	ldr	r2, [pc, #16]	; (800a390 <prvResetNextTaskUnblockTime+0x3c>)
 800a37e:	6013      	str	r3, [r2, #0]
}
 800a380:	bf00      	nop
 800a382:	370c      	adds	r7, #12
 800a384:	46bd      	mov	sp, r7
 800a386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38a:	4770      	bx	lr
 800a38c:	200071dc 	.word	0x200071dc
 800a390:	20007244 	.word	0x20007244

0800a394 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a394:	b480      	push	{r7}
 800a396:	b083      	sub	sp, #12
 800a398:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a39a:	4b0b      	ldr	r3, [pc, #44]	; (800a3c8 <xTaskGetSchedulerState+0x34>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d102      	bne.n	800a3a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	607b      	str	r3, [r7, #4]
 800a3a6:	e008      	b.n	800a3ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a3a8:	4b08      	ldr	r3, [pc, #32]	; (800a3cc <xTaskGetSchedulerState+0x38>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d102      	bne.n	800a3b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a3b0:	2302      	movs	r3, #2
 800a3b2:	607b      	str	r3, [r7, #4]
 800a3b4:	e001      	b.n	800a3ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a3ba:	687b      	ldr	r3, [r7, #4]
	}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	370c      	adds	r7, #12
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c6:	4770      	bx	lr
 800a3c8:	20007230 	.word	0x20007230
 800a3cc:	2000724c 	.word	0x2000724c

0800a3d0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b084      	sub	sp, #16
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d069      	beq.n	800a4ba <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3ea:	4b36      	ldr	r3, [pc, #216]	; (800a4c4 <xTaskPriorityInherit+0xf4>)
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3f0:	429a      	cmp	r2, r3
 800a3f2:	d259      	bcs.n	800a4a8 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	699b      	ldr	r3, [r3, #24]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	db06      	blt.n	800a40a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a3fc:	4b31      	ldr	r3, [pc, #196]	; (800a4c4 <xTaskPriorityInherit+0xf4>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a402:	f1c3 0207 	rsb	r2, r3, #7
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	6959      	ldr	r1, [r3, #20]
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a412:	4613      	mov	r3, r2
 800a414:	009b      	lsls	r3, r3, #2
 800a416:	4413      	add	r3, r2
 800a418:	009b      	lsls	r3, r3, #2
 800a41a:	4a2b      	ldr	r2, [pc, #172]	; (800a4c8 <xTaskPriorityInherit+0xf8>)
 800a41c:	4413      	add	r3, r2
 800a41e:	4299      	cmp	r1, r3
 800a420:	d13a      	bne.n	800a498 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	3304      	adds	r3, #4
 800a426:	4618      	mov	r0, r3
 800a428:	f7fe fcdc 	bl	8008de4 <uxListRemove>
 800a42c:	4603      	mov	r3, r0
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d115      	bne.n	800a45e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a436:	4924      	ldr	r1, [pc, #144]	; (800a4c8 <xTaskPriorityInherit+0xf8>)
 800a438:	4613      	mov	r3, r2
 800a43a:	009b      	lsls	r3, r3, #2
 800a43c:	4413      	add	r3, r2
 800a43e:	009b      	lsls	r3, r3, #2
 800a440:	440b      	add	r3, r1
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d10a      	bne.n	800a45e <xTaskPriorityInherit+0x8e>
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a44c:	2201      	movs	r2, #1
 800a44e:	fa02 f303 	lsl.w	r3, r2, r3
 800a452:	43da      	mvns	r2, r3
 800a454:	4b1d      	ldr	r3, [pc, #116]	; (800a4cc <xTaskPriorityInherit+0xfc>)
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	4013      	ands	r3, r2
 800a45a:	4a1c      	ldr	r2, [pc, #112]	; (800a4cc <xTaskPriorityInherit+0xfc>)
 800a45c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a45e:	4b19      	ldr	r3, [pc, #100]	; (800a4c4 <xTaskPriorityInherit+0xf4>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a46c:	2201      	movs	r2, #1
 800a46e:	409a      	lsls	r2, r3
 800a470:	4b16      	ldr	r3, [pc, #88]	; (800a4cc <xTaskPriorityInherit+0xfc>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	4313      	orrs	r3, r2
 800a476:	4a15      	ldr	r2, [pc, #84]	; (800a4cc <xTaskPriorityInherit+0xfc>)
 800a478:	6013      	str	r3, [r2, #0]
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a47e:	4613      	mov	r3, r2
 800a480:	009b      	lsls	r3, r3, #2
 800a482:	4413      	add	r3, r2
 800a484:	009b      	lsls	r3, r3, #2
 800a486:	4a10      	ldr	r2, [pc, #64]	; (800a4c8 <xTaskPriorityInherit+0xf8>)
 800a488:	441a      	add	r2, r3
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	3304      	adds	r3, #4
 800a48e:	4619      	mov	r1, r3
 800a490:	4610      	mov	r0, r2
 800a492:	f7fe fc4a 	bl	8008d2a <vListInsertEnd>
 800a496:	e004      	b.n	800a4a2 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a498:	4b0a      	ldr	r3, [pc, #40]	; (800a4c4 <xTaskPriorityInherit+0xf4>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	60fb      	str	r3, [r7, #12]
 800a4a6:	e008      	b.n	800a4ba <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a4a8:	68bb      	ldr	r3, [r7, #8]
 800a4aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a4ac:	4b05      	ldr	r3, [pc, #20]	; (800a4c4 <xTaskPriorityInherit+0xf4>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4b2:	429a      	cmp	r2, r3
 800a4b4:	d201      	bcs.n	800a4ba <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
	}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	3710      	adds	r7, #16
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}
 800a4c4:	20007124 	.word	0x20007124
 800a4c8:	20007128 	.word	0x20007128
 800a4cc:	2000722c 	.word	0x2000722c

0800a4d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b086      	sub	sp, #24
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a4dc:	2300      	movs	r3, #0
 800a4de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d06e      	beq.n	800a5c4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a4e6:	4b3a      	ldr	r3, [pc, #232]	; (800a5d0 <xTaskPriorityDisinherit+0x100>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	693a      	ldr	r2, [r7, #16]
 800a4ec:	429a      	cmp	r2, r3
 800a4ee:	d00a      	beq.n	800a506 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a4f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f4:	f383 8811 	msr	BASEPRI, r3
 800a4f8:	f3bf 8f6f 	isb	sy
 800a4fc:	f3bf 8f4f 	dsb	sy
 800a500:	60fb      	str	r3, [r7, #12]
}
 800a502:	bf00      	nop
 800a504:	e7fe      	b.n	800a504 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a506:	693b      	ldr	r3, [r7, #16]
 800a508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d10a      	bne.n	800a524 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a512:	f383 8811 	msr	BASEPRI, r3
 800a516:	f3bf 8f6f 	isb	sy
 800a51a:	f3bf 8f4f 	dsb	sy
 800a51e:	60bb      	str	r3, [r7, #8]
}
 800a520:	bf00      	nop
 800a522:	e7fe      	b.n	800a522 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a524:	693b      	ldr	r3, [r7, #16]
 800a526:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a528:	1e5a      	subs	r2, r3, #1
 800a52a:	693b      	ldr	r3, [r7, #16]
 800a52c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a536:	429a      	cmp	r2, r3
 800a538:	d044      	beq.n	800a5c4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a53a:	693b      	ldr	r3, [r7, #16]
 800a53c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d140      	bne.n	800a5c4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a542:	693b      	ldr	r3, [r7, #16]
 800a544:	3304      	adds	r3, #4
 800a546:	4618      	mov	r0, r3
 800a548:	f7fe fc4c 	bl	8008de4 <uxListRemove>
 800a54c:	4603      	mov	r3, r0
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d115      	bne.n	800a57e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a552:	693b      	ldr	r3, [r7, #16]
 800a554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a556:	491f      	ldr	r1, [pc, #124]	; (800a5d4 <xTaskPriorityDisinherit+0x104>)
 800a558:	4613      	mov	r3, r2
 800a55a:	009b      	lsls	r3, r3, #2
 800a55c:	4413      	add	r3, r2
 800a55e:	009b      	lsls	r3, r3, #2
 800a560:	440b      	add	r3, r1
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d10a      	bne.n	800a57e <xTaskPriorityDisinherit+0xae>
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a56c:	2201      	movs	r2, #1
 800a56e:	fa02 f303 	lsl.w	r3, r2, r3
 800a572:	43da      	mvns	r2, r3
 800a574:	4b18      	ldr	r3, [pc, #96]	; (800a5d8 <xTaskPriorityDisinherit+0x108>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	4013      	ands	r3, r2
 800a57a:	4a17      	ldr	r2, [pc, #92]	; (800a5d8 <xTaskPriorityDisinherit+0x108>)
 800a57c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a57e:	693b      	ldr	r3, [r7, #16]
 800a580:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a582:	693b      	ldr	r3, [r7, #16]
 800a584:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a586:	693b      	ldr	r3, [r7, #16]
 800a588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a58a:	f1c3 0207 	rsb	r2, r3, #7
 800a58e:	693b      	ldr	r3, [r7, #16]
 800a590:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a592:	693b      	ldr	r3, [r7, #16]
 800a594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a596:	2201      	movs	r2, #1
 800a598:	409a      	lsls	r2, r3
 800a59a:	4b0f      	ldr	r3, [pc, #60]	; (800a5d8 <xTaskPriorityDisinherit+0x108>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	4313      	orrs	r3, r2
 800a5a0:	4a0d      	ldr	r2, [pc, #52]	; (800a5d8 <xTaskPriorityDisinherit+0x108>)
 800a5a2:	6013      	str	r3, [r2, #0]
 800a5a4:	693b      	ldr	r3, [r7, #16]
 800a5a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5a8:	4613      	mov	r3, r2
 800a5aa:	009b      	lsls	r3, r3, #2
 800a5ac:	4413      	add	r3, r2
 800a5ae:	009b      	lsls	r3, r3, #2
 800a5b0:	4a08      	ldr	r2, [pc, #32]	; (800a5d4 <xTaskPriorityDisinherit+0x104>)
 800a5b2:	441a      	add	r2, r3
 800a5b4:	693b      	ldr	r3, [r7, #16]
 800a5b6:	3304      	adds	r3, #4
 800a5b8:	4619      	mov	r1, r3
 800a5ba:	4610      	mov	r0, r2
 800a5bc:	f7fe fbb5 	bl	8008d2a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a5c4:	697b      	ldr	r3, [r7, #20]
	}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	3718      	adds	r7, #24
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}
 800a5ce:	bf00      	nop
 800a5d0:	20007124 	.word	0x20007124
 800a5d4:	20007128 	.word	0x20007128
 800a5d8:	2000722c 	.word	0x2000722c

0800a5dc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b088      	sub	sp, #32
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	f000 8083 	beq.w	800a6fc <vTaskPriorityDisinheritAfterTimeout+0x120>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a5f6:	69bb      	ldr	r3, [r7, #24]
 800a5f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d10a      	bne.n	800a614 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800a5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a602:	f383 8811 	msr	BASEPRI, r3
 800a606:	f3bf 8f6f 	isb	sy
 800a60a:	f3bf 8f4f 	dsb	sy
 800a60e:	60fb      	str	r3, [r7, #12]
}
 800a610:	bf00      	nop
 800a612:	e7fe      	b.n	800a612 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a614:	69bb      	ldr	r3, [r7, #24]
 800a616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a618:	683a      	ldr	r2, [r7, #0]
 800a61a:	429a      	cmp	r2, r3
 800a61c:	d902      	bls.n	800a624 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	61fb      	str	r3, [r7, #28]
 800a622:	e002      	b.n	800a62a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a624:	69bb      	ldr	r3, [r7, #24]
 800a626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a628:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a62a:	69bb      	ldr	r3, [r7, #24]
 800a62c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a62e:	69fa      	ldr	r2, [r7, #28]
 800a630:	429a      	cmp	r2, r3
 800a632:	d063      	beq.n	800a6fc <vTaskPriorityDisinheritAfterTimeout+0x120>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a634:	69bb      	ldr	r3, [r7, #24]
 800a636:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a638:	697a      	ldr	r2, [r7, #20]
 800a63a:	429a      	cmp	r2, r3
 800a63c:	d15e      	bne.n	800a6fc <vTaskPriorityDisinheritAfterTimeout+0x120>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a63e:	4b31      	ldr	r3, [pc, #196]	; (800a704 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	69ba      	ldr	r2, [r7, #24]
 800a644:	429a      	cmp	r2, r3
 800a646:	d10a      	bne.n	800a65e <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 800a648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a64c:	f383 8811 	msr	BASEPRI, r3
 800a650:	f3bf 8f6f 	isb	sy
 800a654:	f3bf 8f4f 	dsb	sy
 800a658:	60bb      	str	r3, [r7, #8]
}
 800a65a:	bf00      	nop
 800a65c:	e7fe      	b.n	800a65c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a65e:	69bb      	ldr	r3, [r7, #24]
 800a660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a662:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a664:	69bb      	ldr	r3, [r7, #24]
 800a666:	69fa      	ldr	r2, [r7, #28]
 800a668:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a66a:	69bb      	ldr	r3, [r7, #24]
 800a66c:	699b      	ldr	r3, [r3, #24]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	db04      	blt.n	800a67c <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a672:	69fb      	ldr	r3, [r7, #28]
 800a674:	f1c3 0207 	rsb	r2, r3, #7
 800a678:	69bb      	ldr	r3, [r7, #24]
 800a67a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a67c:	69bb      	ldr	r3, [r7, #24]
 800a67e:	6959      	ldr	r1, [r3, #20]
 800a680:	693a      	ldr	r2, [r7, #16]
 800a682:	4613      	mov	r3, r2
 800a684:	009b      	lsls	r3, r3, #2
 800a686:	4413      	add	r3, r2
 800a688:	009b      	lsls	r3, r3, #2
 800a68a:	4a1f      	ldr	r2, [pc, #124]	; (800a708 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800a68c:	4413      	add	r3, r2
 800a68e:	4299      	cmp	r1, r3
 800a690:	d134      	bne.n	800a6fc <vTaskPriorityDisinheritAfterTimeout+0x120>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a692:	69bb      	ldr	r3, [r7, #24]
 800a694:	3304      	adds	r3, #4
 800a696:	4618      	mov	r0, r3
 800a698:	f7fe fba4 	bl	8008de4 <uxListRemove>
 800a69c:	4603      	mov	r3, r0
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d115      	bne.n	800a6ce <vTaskPriorityDisinheritAfterTimeout+0xf2>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a6a2:	69bb      	ldr	r3, [r7, #24]
 800a6a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6a6:	4918      	ldr	r1, [pc, #96]	; (800a708 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800a6a8:	4613      	mov	r3, r2
 800a6aa:	009b      	lsls	r3, r3, #2
 800a6ac:	4413      	add	r3, r2
 800a6ae:	009b      	lsls	r3, r3, #2
 800a6b0:	440b      	add	r3, r1
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d10a      	bne.n	800a6ce <vTaskPriorityDisinheritAfterTimeout+0xf2>
 800a6b8:	69bb      	ldr	r3, [r7, #24]
 800a6ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6bc:	2201      	movs	r2, #1
 800a6be:	fa02 f303 	lsl.w	r3, r2, r3
 800a6c2:	43da      	mvns	r2, r3
 800a6c4:	4b11      	ldr	r3, [pc, #68]	; (800a70c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	4013      	ands	r3, r2
 800a6ca:	4a10      	ldr	r2, [pc, #64]	; (800a70c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800a6cc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a6ce:	69bb      	ldr	r3, [r7, #24]
 800a6d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6d2:	2201      	movs	r2, #1
 800a6d4:	409a      	lsls	r2, r3
 800a6d6:	4b0d      	ldr	r3, [pc, #52]	; (800a70c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	4313      	orrs	r3, r2
 800a6dc:	4a0b      	ldr	r2, [pc, #44]	; (800a70c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800a6de:	6013      	str	r3, [r2, #0]
 800a6e0:	69bb      	ldr	r3, [r7, #24]
 800a6e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6e4:	4613      	mov	r3, r2
 800a6e6:	009b      	lsls	r3, r3, #2
 800a6e8:	4413      	add	r3, r2
 800a6ea:	009b      	lsls	r3, r3, #2
 800a6ec:	4a06      	ldr	r2, [pc, #24]	; (800a708 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800a6ee:	441a      	add	r2, r3
 800a6f0:	69bb      	ldr	r3, [r7, #24]
 800a6f2:	3304      	adds	r3, #4
 800a6f4:	4619      	mov	r1, r3
 800a6f6:	4610      	mov	r0, r2
 800a6f8:	f7fe fb17 	bl	8008d2a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a6fc:	bf00      	nop
 800a6fe:	3720      	adds	r7, #32
 800a700:	46bd      	mov	sp, r7
 800a702:	bd80      	pop	{r7, pc}
 800a704:	20007124 	.word	0x20007124
 800a708:	20007128 	.word	0x20007128
 800a70c:	2000722c 	.word	0x2000722c

0800a710 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a710:	b480      	push	{r7}
 800a712:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a714:	4b07      	ldr	r3, [pc, #28]	; (800a734 <pvTaskIncrementMutexHeldCount+0x24>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d004      	beq.n	800a726 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a71c:	4b05      	ldr	r3, [pc, #20]	; (800a734 <pvTaskIncrementMutexHeldCount+0x24>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a722:	3201      	adds	r2, #1
 800a724:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800a726:	4b03      	ldr	r3, [pc, #12]	; (800a734 <pvTaskIncrementMutexHeldCount+0x24>)
 800a728:	681b      	ldr	r3, [r3, #0]
	}
 800a72a:	4618      	mov	r0, r3
 800a72c:	46bd      	mov	sp, r7
 800a72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a732:	4770      	bx	lr
 800a734:	20007124 	.word	0x20007124

0800a738 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b084      	sub	sp, #16
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
 800a740:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a742:	4b29      	ldr	r3, [pc, #164]	; (800a7e8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a748:	4b28      	ldr	r3, [pc, #160]	; (800a7ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	3304      	adds	r3, #4
 800a74e:	4618      	mov	r0, r3
 800a750:	f7fe fb48 	bl	8008de4 <uxListRemove>
 800a754:	4603      	mov	r3, r0
 800a756:	2b00      	cmp	r3, #0
 800a758:	d10b      	bne.n	800a772 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a75a:	4b24      	ldr	r3, [pc, #144]	; (800a7ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a760:	2201      	movs	r2, #1
 800a762:	fa02 f303 	lsl.w	r3, r2, r3
 800a766:	43da      	mvns	r2, r3
 800a768:	4b21      	ldr	r3, [pc, #132]	; (800a7f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	4013      	ands	r3, r2
 800a76e:	4a20      	ldr	r2, [pc, #128]	; (800a7f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a770:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a778:	d10a      	bne.n	800a790 <prvAddCurrentTaskToDelayedList+0x58>
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d007      	beq.n	800a790 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a780:	4b1a      	ldr	r3, [pc, #104]	; (800a7ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	3304      	adds	r3, #4
 800a786:	4619      	mov	r1, r3
 800a788:	481a      	ldr	r0, [pc, #104]	; (800a7f4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a78a:	f7fe face 	bl	8008d2a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a78e:	e026      	b.n	800a7de <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a790:	68fa      	ldr	r2, [r7, #12]
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	4413      	add	r3, r2
 800a796:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a798:	4b14      	ldr	r3, [pc, #80]	; (800a7ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	68ba      	ldr	r2, [r7, #8]
 800a79e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a7a0:	68ba      	ldr	r2, [r7, #8]
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	429a      	cmp	r2, r3
 800a7a6:	d209      	bcs.n	800a7bc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a7a8:	4b13      	ldr	r3, [pc, #76]	; (800a7f8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a7aa:	681a      	ldr	r2, [r3, #0]
 800a7ac:	4b0f      	ldr	r3, [pc, #60]	; (800a7ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	3304      	adds	r3, #4
 800a7b2:	4619      	mov	r1, r3
 800a7b4:	4610      	mov	r0, r2
 800a7b6:	f7fe fadc 	bl	8008d72 <vListInsert>
}
 800a7ba:	e010      	b.n	800a7de <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a7bc:	4b0f      	ldr	r3, [pc, #60]	; (800a7fc <prvAddCurrentTaskToDelayedList+0xc4>)
 800a7be:	681a      	ldr	r2, [r3, #0]
 800a7c0:	4b0a      	ldr	r3, [pc, #40]	; (800a7ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	3304      	adds	r3, #4
 800a7c6:	4619      	mov	r1, r3
 800a7c8:	4610      	mov	r0, r2
 800a7ca:	f7fe fad2 	bl	8008d72 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a7ce:	4b0c      	ldr	r3, [pc, #48]	; (800a800 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	68ba      	ldr	r2, [r7, #8]
 800a7d4:	429a      	cmp	r2, r3
 800a7d6:	d202      	bcs.n	800a7de <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a7d8:	4a09      	ldr	r2, [pc, #36]	; (800a800 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a7da:	68bb      	ldr	r3, [r7, #8]
 800a7dc:	6013      	str	r3, [r2, #0]
}
 800a7de:	bf00      	nop
 800a7e0:	3710      	adds	r7, #16
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bd80      	pop	{r7, pc}
 800a7e6:	bf00      	nop
 800a7e8:	20007228 	.word	0x20007228
 800a7ec:	20007124 	.word	0x20007124
 800a7f0:	2000722c 	.word	0x2000722c
 800a7f4:	20007210 	.word	0x20007210
 800a7f8:	200071e0 	.word	0x200071e0
 800a7fc:	200071dc 	.word	0x200071dc
 800a800:	20007244 	.word	0x20007244

0800a804 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a804:	b480      	push	{r7}
 800a806:	b085      	sub	sp, #20
 800a808:	af00      	add	r7, sp, #0
 800a80a:	60f8      	str	r0, [r7, #12]
 800a80c:	60b9      	str	r1, [r7, #8]
 800a80e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	3b04      	subs	r3, #4
 800a814:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a81c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	3b04      	subs	r3, #4
 800a822:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a824:	68bb      	ldr	r3, [r7, #8]
 800a826:	f023 0201 	bic.w	r2, r3, #1
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	3b04      	subs	r3, #4
 800a832:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a834:	4a0c      	ldr	r2, [pc, #48]	; (800a868 <pxPortInitialiseStack+0x64>)
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	3b14      	subs	r3, #20
 800a83e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a840:	687a      	ldr	r2, [r7, #4]
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	3b04      	subs	r3, #4
 800a84a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	f06f 0202 	mvn.w	r2, #2
 800a852:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	3b20      	subs	r3, #32
 800a858:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a85a:	68fb      	ldr	r3, [r7, #12]
}
 800a85c:	4618      	mov	r0, r3
 800a85e:	3714      	adds	r7, #20
 800a860:	46bd      	mov	sp, r7
 800a862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a866:	4770      	bx	lr
 800a868:	0800a86d 	.word	0x0800a86d

0800a86c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a86c:	b480      	push	{r7}
 800a86e:	b085      	sub	sp, #20
 800a870:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a872:	2300      	movs	r3, #0
 800a874:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a876:	4b12      	ldr	r3, [pc, #72]	; (800a8c0 <prvTaskExitError+0x54>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a87e:	d00a      	beq.n	800a896 <prvTaskExitError+0x2a>
	__asm volatile
 800a880:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a884:	f383 8811 	msr	BASEPRI, r3
 800a888:	f3bf 8f6f 	isb	sy
 800a88c:	f3bf 8f4f 	dsb	sy
 800a890:	60fb      	str	r3, [r7, #12]
}
 800a892:	bf00      	nop
 800a894:	e7fe      	b.n	800a894 <prvTaskExitError+0x28>
	__asm volatile
 800a896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a89a:	f383 8811 	msr	BASEPRI, r3
 800a89e:	f3bf 8f6f 	isb	sy
 800a8a2:	f3bf 8f4f 	dsb	sy
 800a8a6:	60bb      	str	r3, [r7, #8]
}
 800a8a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a8aa:	bf00      	nop
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d0fc      	beq.n	800a8ac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a8b2:	bf00      	nop
 800a8b4:	bf00      	nop
 800a8b6:	3714      	adds	r7, #20
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8be:	4770      	bx	lr
 800a8c0:	2000006c 	.word	0x2000006c
	...

0800a8d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a8d0:	4b07      	ldr	r3, [pc, #28]	; (800a8f0 <pxCurrentTCBConst2>)
 800a8d2:	6819      	ldr	r1, [r3, #0]
 800a8d4:	6808      	ldr	r0, [r1, #0]
 800a8d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8da:	f380 8809 	msr	PSP, r0
 800a8de:	f3bf 8f6f 	isb	sy
 800a8e2:	f04f 0000 	mov.w	r0, #0
 800a8e6:	f380 8811 	msr	BASEPRI, r0
 800a8ea:	4770      	bx	lr
 800a8ec:	f3af 8000 	nop.w

0800a8f0 <pxCurrentTCBConst2>:
 800a8f0:	20007124 	.word	0x20007124
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a8f4:	bf00      	nop
 800a8f6:	bf00      	nop

0800a8f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a8f8:	4808      	ldr	r0, [pc, #32]	; (800a91c <prvPortStartFirstTask+0x24>)
 800a8fa:	6800      	ldr	r0, [r0, #0]
 800a8fc:	6800      	ldr	r0, [r0, #0]
 800a8fe:	f380 8808 	msr	MSP, r0
 800a902:	f04f 0000 	mov.w	r0, #0
 800a906:	f380 8814 	msr	CONTROL, r0
 800a90a:	b662      	cpsie	i
 800a90c:	b661      	cpsie	f
 800a90e:	f3bf 8f4f 	dsb	sy
 800a912:	f3bf 8f6f 	isb	sy
 800a916:	df00      	svc	0
 800a918:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a91a:	bf00      	nop
 800a91c:	e000ed08 	.word	0xe000ed08

0800a920 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b086      	sub	sp, #24
 800a924:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a926:	4b46      	ldr	r3, [pc, #280]	; (800aa40 <xPortStartScheduler+0x120>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	4a46      	ldr	r2, [pc, #280]	; (800aa44 <xPortStartScheduler+0x124>)
 800a92c:	4293      	cmp	r3, r2
 800a92e:	d10a      	bne.n	800a946 <xPortStartScheduler+0x26>
	__asm volatile
 800a930:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a934:	f383 8811 	msr	BASEPRI, r3
 800a938:	f3bf 8f6f 	isb	sy
 800a93c:	f3bf 8f4f 	dsb	sy
 800a940:	613b      	str	r3, [r7, #16]
}
 800a942:	bf00      	nop
 800a944:	e7fe      	b.n	800a944 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a946:	4b3e      	ldr	r3, [pc, #248]	; (800aa40 <xPortStartScheduler+0x120>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	4a3f      	ldr	r2, [pc, #252]	; (800aa48 <xPortStartScheduler+0x128>)
 800a94c:	4293      	cmp	r3, r2
 800a94e:	d10a      	bne.n	800a966 <xPortStartScheduler+0x46>
	__asm volatile
 800a950:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a954:	f383 8811 	msr	BASEPRI, r3
 800a958:	f3bf 8f6f 	isb	sy
 800a95c:	f3bf 8f4f 	dsb	sy
 800a960:	60fb      	str	r3, [r7, #12]
}
 800a962:	bf00      	nop
 800a964:	e7fe      	b.n	800a964 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a966:	4b39      	ldr	r3, [pc, #228]	; (800aa4c <xPortStartScheduler+0x12c>)
 800a968:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a96a:	697b      	ldr	r3, [r7, #20]
 800a96c:	781b      	ldrb	r3, [r3, #0]
 800a96e:	b2db      	uxtb	r3, r3
 800a970:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a972:	697b      	ldr	r3, [r7, #20]
 800a974:	22ff      	movs	r2, #255	; 0xff
 800a976:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a978:	697b      	ldr	r3, [r7, #20]
 800a97a:	781b      	ldrb	r3, [r3, #0]
 800a97c:	b2db      	uxtb	r3, r3
 800a97e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a980:	78fb      	ldrb	r3, [r7, #3]
 800a982:	b2db      	uxtb	r3, r3
 800a984:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a988:	b2da      	uxtb	r2, r3
 800a98a:	4b31      	ldr	r3, [pc, #196]	; (800aa50 <xPortStartScheduler+0x130>)
 800a98c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a98e:	4b31      	ldr	r3, [pc, #196]	; (800aa54 <xPortStartScheduler+0x134>)
 800a990:	2207      	movs	r2, #7
 800a992:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a994:	e009      	b.n	800a9aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a996:	4b2f      	ldr	r3, [pc, #188]	; (800aa54 <xPortStartScheduler+0x134>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	3b01      	subs	r3, #1
 800a99c:	4a2d      	ldr	r2, [pc, #180]	; (800aa54 <xPortStartScheduler+0x134>)
 800a99e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a9a0:	78fb      	ldrb	r3, [r7, #3]
 800a9a2:	b2db      	uxtb	r3, r3
 800a9a4:	005b      	lsls	r3, r3, #1
 800a9a6:	b2db      	uxtb	r3, r3
 800a9a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a9aa:	78fb      	ldrb	r3, [r7, #3]
 800a9ac:	b2db      	uxtb	r3, r3
 800a9ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9b2:	2b80      	cmp	r3, #128	; 0x80
 800a9b4:	d0ef      	beq.n	800a996 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a9b6:	4b27      	ldr	r3, [pc, #156]	; (800aa54 <xPortStartScheduler+0x134>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f1c3 0307 	rsb	r3, r3, #7
 800a9be:	2b04      	cmp	r3, #4
 800a9c0:	d00a      	beq.n	800a9d8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a9c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c6:	f383 8811 	msr	BASEPRI, r3
 800a9ca:	f3bf 8f6f 	isb	sy
 800a9ce:	f3bf 8f4f 	dsb	sy
 800a9d2:	60bb      	str	r3, [r7, #8]
}
 800a9d4:	bf00      	nop
 800a9d6:	e7fe      	b.n	800a9d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a9d8:	4b1e      	ldr	r3, [pc, #120]	; (800aa54 <xPortStartScheduler+0x134>)
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	021b      	lsls	r3, r3, #8
 800a9de:	4a1d      	ldr	r2, [pc, #116]	; (800aa54 <xPortStartScheduler+0x134>)
 800a9e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a9e2:	4b1c      	ldr	r3, [pc, #112]	; (800aa54 <xPortStartScheduler+0x134>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a9ea:	4a1a      	ldr	r2, [pc, #104]	; (800aa54 <xPortStartScheduler+0x134>)
 800a9ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	b2da      	uxtb	r2, r3
 800a9f2:	697b      	ldr	r3, [r7, #20]
 800a9f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a9f6:	4b18      	ldr	r3, [pc, #96]	; (800aa58 <xPortStartScheduler+0x138>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	4a17      	ldr	r2, [pc, #92]	; (800aa58 <xPortStartScheduler+0x138>)
 800a9fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800aa00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800aa02:	4b15      	ldr	r3, [pc, #84]	; (800aa58 <xPortStartScheduler+0x138>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	4a14      	ldr	r2, [pc, #80]	; (800aa58 <xPortStartScheduler+0x138>)
 800aa08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800aa0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800aa0e:	f000 f8dd 	bl	800abcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800aa12:	4b12      	ldr	r3, [pc, #72]	; (800aa5c <xPortStartScheduler+0x13c>)
 800aa14:	2200      	movs	r2, #0
 800aa16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800aa18:	f000 f8fc 	bl	800ac14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800aa1c:	4b10      	ldr	r3, [pc, #64]	; (800aa60 <xPortStartScheduler+0x140>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	4a0f      	ldr	r2, [pc, #60]	; (800aa60 <xPortStartScheduler+0x140>)
 800aa22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800aa26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800aa28:	f7ff ff66 	bl	800a8f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800aa2c:	f7ff fa9c 	bl	8009f68 <vTaskSwitchContext>
	prvTaskExitError();
 800aa30:	f7ff ff1c 	bl	800a86c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800aa34:	2300      	movs	r3, #0
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3718      	adds	r7, #24
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}
 800aa3e:	bf00      	nop
 800aa40:	e000ed00 	.word	0xe000ed00
 800aa44:	410fc271 	.word	0x410fc271
 800aa48:	410fc270 	.word	0x410fc270
 800aa4c:	e000e400 	.word	0xe000e400
 800aa50:	20007250 	.word	0x20007250
 800aa54:	20007254 	.word	0x20007254
 800aa58:	e000ed20 	.word	0xe000ed20
 800aa5c:	2000006c 	.word	0x2000006c
 800aa60:	e000ef34 	.word	0xe000ef34

0800aa64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800aa64:	b480      	push	{r7}
 800aa66:	b083      	sub	sp, #12
 800aa68:	af00      	add	r7, sp, #0
	__asm volatile
 800aa6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa6e:	f383 8811 	msr	BASEPRI, r3
 800aa72:	f3bf 8f6f 	isb	sy
 800aa76:	f3bf 8f4f 	dsb	sy
 800aa7a:	607b      	str	r3, [r7, #4]
}
 800aa7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800aa7e:	4b0f      	ldr	r3, [pc, #60]	; (800aabc <vPortEnterCritical+0x58>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	3301      	adds	r3, #1
 800aa84:	4a0d      	ldr	r2, [pc, #52]	; (800aabc <vPortEnterCritical+0x58>)
 800aa86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800aa88:	4b0c      	ldr	r3, [pc, #48]	; (800aabc <vPortEnterCritical+0x58>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	2b01      	cmp	r3, #1
 800aa8e:	d10f      	bne.n	800aab0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800aa90:	4b0b      	ldr	r3, [pc, #44]	; (800aac0 <vPortEnterCritical+0x5c>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	b2db      	uxtb	r3, r3
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d00a      	beq.n	800aab0 <vPortEnterCritical+0x4c>
	__asm volatile
 800aa9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa9e:	f383 8811 	msr	BASEPRI, r3
 800aaa2:	f3bf 8f6f 	isb	sy
 800aaa6:	f3bf 8f4f 	dsb	sy
 800aaaa:	603b      	str	r3, [r7, #0]
}
 800aaac:	bf00      	nop
 800aaae:	e7fe      	b.n	800aaae <vPortEnterCritical+0x4a>
	}
}
 800aab0:	bf00      	nop
 800aab2:	370c      	adds	r7, #12
 800aab4:	46bd      	mov	sp, r7
 800aab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaba:	4770      	bx	lr
 800aabc:	2000006c 	.word	0x2000006c
 800aac0:	e000ed04 	.word	0xe000ed04

0800aac4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800aac4:	b480      	push	{r7}
 800aac6:	b083      	sub	sp, #12
 800aac8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800aaca:	4b12      	ldr	r3, [pc, #72]	; (800ab14 <vPortExitCritical+0x50>)
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d10a      	bne.n	800aae8 <vPortExitCritical+0x24>
	__asm volatile
 800aad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aad6:	f383 8811 	msr	BASEPRI, r3
 800aada:	f3bf 8f6f 	isb	sy
 800aade:	f3bf 8f4f 	dsb	sy
 800aae2:	607b      	str	r3, [r7, #4]
}
 800aae4:	bf00      	nop
 800aae6:	e7fe      	b.n	800aae6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800aae8:	4b0a      	ldr	r3, [pc, #40]	; (800ab14 <vPortExitCritical+0x50>)
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	3b01      	subs	r3, #1
 800aaee:	4a09      	ldr	r2, [pc, #36]	; (800ab14 <vPortExitCritical+0x50>)
 800aaf0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800aaf2:	4b08      	ldr	r3, [pc, #32]	; (800ab14 <vPortExitCritical+0x50>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d105      	bne.n	800ab06 <vPortExitCritical+0x42>
 800aafa:	2300      	movs	r3, #0
 800aafc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	f383 8811 	msr	BASEPRI, r3
}
 800ab04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ab06:	bf00      	nop
 800ab08:	370c      	adds	r7, #12
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab10:	4770      	bx	lr
 800ab12:	bf00      	nop
 800ab14:	2000006c 	.word	0x2000006c
	...

0800ab20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ab20:	f3ef 8009 	mrs	r0, PSP
 800ab24:	f3bf 8f6f 	isb	sy
 800ab28:	4b15      	ldr	r3, [pc, #84]	; (800ab80 <pxCurrentTCBConst>)
 800ab2a:	681a      	ldr	r2, [r3, #0]
 800ab2c:	f01e 0f10 	tst.w	lr, #16
 800ab30:	bf08      	it	eq
 800ab32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ab36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab3a:	6010      	str	r0, [r2, #0]
 800ab3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ab40:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ab44:	f380 8811 	msr	BASEPRI, r0
 800ab48:	f3bf 8f4f 	dsb	sy
 800ab4c:	f3bf 8f6f 	isb	sy
 800ab50:	f7ff fa0a 	bl	8009f68 <vTaskSwitchContext>
 800ab54:	f04f 0000 	mov.w	r0, #0
 800ab58:	f380 8811 	msr	BASEPRI, r0
 800ab5c:	bc09      	pop	{r0, r3}
 800ab5e:	6819      	ldr	r1, [r3, #0]
 800ab60:	6808      	ldr	r0, [r1, #0]
 800ab62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab66:	f01e 0f10 	tst.w	lr, #16
 800ab6a:	bf08      	it	eq
 800ab6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ab70:	f380 8809 	msr	PSP, r0
 800ab74:	f3bf 8f6f 	isb	sy
 800ab78:	4770      	bx	lr
 800ab7a:	bf00      	nop
 800ab7c:	f3af 8000 	nop.w

0800ab80 <pxCurrentTCBConst>:
 800ab80:	20007124 	.word	0x20007124
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ab84:	bf00      	nop
 800ab86:	bf00      	nop

0800ab88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b082      	sub	sp, #8
 800ab8c:	af00      	add	r7, sp, #0
	__asm volatile
 800ab8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab92:	f383 8811 	msr	BASEPRI, r3
 800ab96:	f3bf 8f6f 	isb	sy
 800ab9a:	f3bf 8f4f 	dsb	sy
 800ab9e:	607b      	str	r3, [r7, #4]
}
 800aba0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aba2:	f7ff f929 	bl	8009df8 <xTaskIncrementTick>
 800aba6:	4603      	mov	r3, r0
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d003      	beq.n	800abb4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800abac:	4b06      	ldr	r3, [pc, #24]	; (800abc8 <SysTick_Handler+0x40>)
 800abae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abb2:	601a      	str	r2, [r3, #0]
 800abb4:	2300      	movs	r3, #0
 800abb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	f383 8811 	msr	BASEPRI, r3
}
 800abbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800abc0:	bf00      	nop
 800abc2:	3708      	adds	r7, #8
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}
 800abc8:	e000ed04 	.word	0xe000ed04

0800abcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800abcc:	b480      	push	{r7}
 800abce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800abd0:	4b0b      	ldr	r3, [pc, #44]	; (800ac00 <vPortSetupTimerInterrupt+0x34>)
 800abd2:	2200      	movs	r2, #0
 800abd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800abd6:	4b0b      	ldr	r3, [pc, #44]	; (800ac04 <vPortSetupTimerInterrupt+0x38>)
 800abd8:	2200      	movs	r2, #0
 800abda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800abdc:	4b0a      	ldr	r3, [pc, #40]	; (800ac08 <vPortSetupTimerInterrupt+0x3c>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	4a0a      	ldr	r2, [pc, #40]	; (800ac0c <vPortSetupTimerInterrupt+0x40>)
 800abe2:	fba2 2303 	umull	r2, r3, r2, r3
 800abe6:	099b      	lsrs	r3, r3, #6
 800abe8:	4a09      	ldr	r2, [pc, #36]	; (800ac10 <vPortSetupTimerInterrupt+0x44>)
 800abea:	3b01      	subs	r3, #1
 800abec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800abee:	4b04      	ldr	r3, [pc, #16]	; (800ac00 <vPortSetupTimerInterrupt+0x34>)
 800abf0:	2207      	movs	r2, #7
 800abf2:	601a      	str	r2, [r3, #0]
}
 800abf4:	bf00      	nop
 800abf6:	46bd      	mov	sp, r7
 800abf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfc:	4770      	bx	lr
 800abfe:	bf00      	nop
 800ac00:	e000e010 	.word	0xe000e010
 800ac04:	e000e018 	.word	0xe000e018
 800ac08:	20000060 	.word	0x20000060
 800ac0c:	10624dd3 	.word	0x10624dd3
 800ac10:	e000e014 	.word	0xe000e014

0800ac14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ac14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ac24 <vPortEnableVFP+0x10>
 800ac18:	6801      	ldr	r1, [r0, #0]
 800ac1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ac1e:	6001      	str	r1, [r0, #0]
 800ac20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ac22:	bf00      	nop
 800ac24:	e000ed88 	.word	0xe000ed88

0800ac28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ac28:	b480      	push	{r7}
 800ac2a:	b085      	sub	sp, #20
 800ac2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ac2e:	f3ef 8305 	mrs	r3, IPSR
 800ac32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	2b0f      	cmp	r3, #15
 800ac38:	d914      	bls.n	800ac64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ac3a:	4a17      	ldr	r2, [pc, #92]	; (800ac98 <vPortValidateInterruptPriority+0x70>)
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	4413      	add	r3, r2
 800ac40:	781b      	ldrb	r3, [r3, #0]
 800ac42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ac44:	4b15      	ldr	r3, [pc, #84]	; (800ac9c <vPortValidateInterruptPriority+0x74>)
 800ac46:	781b      	ldrb	r3, [r3, #0]
 800ac48:	7afa      	ldrb	r2, [r7, #11]
 800ac4a:	429a      	cmp	r2, r3
 800ac4c:	d20a      	bcs.n	800ac64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ac4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac52:	f383 8811 	msr	BASEPRI, r3
 800ac56:	f3bf 8f6f 	isb	sy
 800ac5a:	f3bf 8f4f 	dsb	sy
 800ac5e:	607b      	str	r3, [r7, #4]
}
 800ac60:	bf00      	nop
 800ac62:	e7fe      	b.n	800ac62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ac64:	4b0e      	ldr	r3, [pc, #56]	; (800aca0 <vPortValidateInterruptPriority+0x78>)
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ac6c:	4b0d      	ldr	r3, [pc, #52]	; (800aca4 <vPortValidateInterruptPriority+0x7c>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	429a      	cmp	r2, r3
 800ac72:	d90a      	bls.n	800ac8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ac74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac78:	f383 8811 	msr	BASEPRI, r3
 800ac7c:	f3bf 8f6f 	isb	sy
 800ac80:	f3bf 8f4f 	dsb	sy
 800ac84:	603b      	str	r3, [r7, #0]
}
 800ac86:	bf00      	nop
 800ac88:	e7fe      	b.n	800ac88 <vPortValidateInterruptPriority+0x60>
	}
 800ac8a:	bf00      	nop
 800ac8c:	3714      	adds	r7, #20
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac94:	4770      	bx	lr
 800ac96:	bf00      	nop
 800ac98:	e000e3f0 	.word	0xe000e3f0
 800ac9c:	20007250 	.word	0x20007250
 800aca0:	e000ed0c 	.word	0xe000ed0c
 800aca4:	20007254 	.word	0x20007254

0800aca8 <__libc_init_array>:
 800aca8:	b570      	push	{r4, r5, r6, lr}
 800acaa:	4d0d      	ldr	r5, [pc, #52]	; (800ace0 <__libc_init_array+0x38>)
 800acac:	4c0d      	ldr	r4, [pc, #52]	; (800ace4 <__libc_init_array+0x3c>)
 800acae:	1b64      	subs	r4, r4, r5
 800acb0:	10a4      	asrs	r4, r4, #2
 800acb2:	2600      	movs	r6, #0
 800acb4:	42a6      	cmp	r6, r4
 800acb6:	d109      	bne.n	800accc <__libc_init_array+0x24>
 800acb8:	4d0b      	ldr	r5, [pc, #44]	; (800ace8 <__libc_init_array+0x40>)
 800acba:	4c0c      	ldr	r4, [pc, #48]	; (800acec <__libc_init_array+0x44>)
 800acbc:	f000 f82e 	bl	800ad1c <_init>
 800acc0:	1b64      	subs	r4, r4, r5
 800acc2:	10a4      	asrs	r4, r4, #2
 800acc4:	2600      	movs	r6, #0
 800acc6:	42a6      	cmp	r6, r4
 800acc8:	d105      	bne.n	800acd6 <__libc_init_array+0x2e>
 800acca:	bd70      	pop	{r4, r5, r6, pc}
 800accc:	f855 3b04 	ldr.w	r3, [r5], #4
 800acd0:	4798      	blx	r3
 800acd2:	3601      	adds	r6, #1
 800acd4:	e7ee      	b.n	800acb4 <__libc_init_array+0xc>
 800acd6:	f855 3b04 	ldr.w	r3, [r5], #4
 800acda:	4798      	blx	r3
 800acdc:	3601      	adds	r6, #1
 800acde:	e7f2      	b.n	800acc6 <__libc_init_array+0x1e>
 800ace0:	0800adb8 	.word	0x0800adb8
 800ace4:	0800adb8 	.word	0x0800adb8
 800ace8:	0800adb8 	.word	0x0800adb8
 800acec:	0800adbc 	.word	0x0800adbc

0800acf0 <memcpy>:
 800acf0:	440a      	add	r2, r1
 800acf2:	4291      	cmp	r1, r2
 800acf4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800acf8:	d100      	bne.n	800acfc <memcpy+0xc>
 800acfa:	4770      	bx	lr
 800acfc:	b510      	push	{r4, lr}
 800acfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad02:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ad06:	4291      	cmp	r1, r2
 800ad08:	d1f9      	bne.n	800acfe <memcpy+0xe>
 800ad0a:	bd10      	pop	{r4, pc}

0800ad0c <memset>:
 800ad0c:	4402      	add	r2, r0
 800ad0e:	4603      	mov	r3, r0
 800ad10:	4293      	cmp	r3, r2
 800ad12:	d100      	bne.n	800ad16 <memset+0xa>
 800ad14:	4770      	bx	lr
 800ad16:	f803 1b01 	strb.w	r1, [r3], #1
 800ad1a:	e7f9      	b.n	800ad10 <memset+0x4>

0800ad1c <_init>:
 800ad1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad1e:	bf00      	nop
 800ad20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad22:	bc08      	pop	{r3}
 800ad24:	469e      	mov	lr, r3
 800ad26:	4770      	bx	lr

0800ad28 <_fini>:
 800ad28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad2a:	bf00      	nop
 800ad2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad2e:	bc08      	pop	{r3}
 800ad30:	469e      	mov	lr, r3
 800ad32:	4770      	bx	lr
