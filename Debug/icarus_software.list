
icarus_software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b354  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  0800b524  0800b524  0001b524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b590  0800b590  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800b590  0800b590  0001b590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b598  0800b598  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b598  0800b598  0001b598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b59c  0800b59c  0001b59c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800b5a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006f60  20000088  0800b628  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006fe8  0800b628  00026fe8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027d08  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005912  00000000  00000000  00047dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b20  00000000  00000000  0004d6d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018d8  00000000  00000000  0004f1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000276a3  00000000  00000000  00050ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020598  00000000  00000000  00078173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0334  00000000  00000000  0009870b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00178a3f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ed0  00000000  00000000  00178a94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000088 	.word	0x20000088
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b50c 	.word	0x0800b50c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000008c 	.word	0x2000008c
 800020c:	0800b50c 	.word	0x0800b50c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000224:	f000 b96e 	b.w	8000504 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468c      	mov	ip, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	f040 8083 	bne.w	8000356 <__udivmoddi4+0x116>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d947      	bls.n	80002e6 <__udivmoddi4+0xa6>
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	b142      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025c:	f1c2 0020 	rsb	r0, r2, #32
 8000260:	fa24 f000 	lsr.w	r0, r4, r0
 8000264:	4091      	lsls	r1, r2
 8000266:	4097      	lsls	r7, r2
 8000268:	ea40 0c01 	orr.w	ip, r0, r1
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbbc f6f8 	udiv	r6, ip, r8
 8000278:	fa1f fe87 	uxth.w	lr, r7
 800027c:	fb08 c116 	mls	r1, r8, r6, ip
 8000280:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000284:	fb06 f10e 	mul.w	r1, r6, lr
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000292:	f080 8119 	bcs.w	80004c8 <__udivmoddi4+0x288>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8116 	bls.w	80004c8 <__udivmoddi4+0x288>
 800029c:	3e02      	subs	r6, #2
 800029e:	443b      	add	r3, r7
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b4:	45a6      	cmp	lr, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002be:	f080 8105 	bcs.w	80004cc <__udivmoddi4+0x28c>
 80002c2:	45a6      	cmp	lr, r4
 80002c4:	f240 8102 	bls.w	80004cc <__udivmoddi4+0x28c>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	2600      	movs	r6, #0
 80002d6:	b11d      	cbz	r5, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c5 4300 	strd	r4, r3, [r5]
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xaa>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	d150      	bne.n	8000394 <__udivmoddi4+0x154>
 80002f2:	1bcb      	subs	r3, r1, r7
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	fa1f f887 	uxth.w	r8, r7
 80002fc:	2601      	movs	r6, #1
 80002fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000302:	0c21      	lsrs	r1, r4, #16
 8000304:	fb0e 331c 	mls	r3, lr, ip, r3
 8000308:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800030c:	fb08 f30c 	mul.w	r3, r8, ip
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000314:	1879      	adds	r1, r7, r1
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0xe2>
 800031c:	428b      	cmp	r3, r1
 800031e:	f200 80e9 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 8000322:	4684      	mov	ip, r0
 8000324:	1ac9      	subs	r1, r1, r3
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000330:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x10c>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x10a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80d9 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e7bf      	b.n	80002d6 <__udivmoddi4+0x96>
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x12e>
 800035a:	2d00      	cmp	r5, #0
 800035c:	f000 80b1 	beq.w	80004c2 <__udivmoddi4+0x282>
 8000360:	2600      	movs	r6, #0
 8000362:	e9c5 0100 	strd	r0, r1, [r5]
 8000366:	4630      	mov	r0, r6
 8000368:	4631      	mov	r1, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f683 	clz	r6, r3
 8000372:	2e00      	cmp	r6, #0
 8000374:	d14a      	bne.n	800040c <__udivmoddi4+0x1cc>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0x140>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80b8 	bhi.w	80004f0 <__udivmoddi4+0x2b0>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0103 	sbc.w	r1, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	468c      	mov	ip, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0a8      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800038e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000394:	f1c2 0320 	rsb	r3, r2, #32
 8000398:	fa20 f603 	lsr.w	r6, r0, r3
 800039c:	4097      	lsls	r7, r2
 800039e:	fa01 f002 	lsl.w	r0, r1, r2
 80003a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a6:	40d9      	lsrs	r1, r3
 80003a8:	4330      	orrs	r0, r6
 80003aa:	0c03      	lsrs	r3, r0, #16
 80003ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b0:	fa1f f887 	uxth.w	r8, r7
 80003b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb06 f108 	mul.w	r1, r6, r8
 80003c0:	4299      	cmp	r1, r3
 80003c2:	fa04 f402 	lsl.w	r4, r4, r2
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x19c>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003ce:	f080 808d 	bcs.w	80004ec <__udivmoddi4+0x2ac>
 80003d2:	4299      	cmp	r1, r3
 80003d4:	f240 808a 	bls.w	80004ec <__udivmoddi4+0x2ac>
 80003d8:	3e02      	subs	r6, #2
 80003da:	443b      	add	r3, r7
 80003dc:	1a5b      	subs	r3, r3, r1
 80003de:	b281      	uxth	r1, r0
 80003e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb00 f308 	mul.w	r3, r0, r8
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x1c4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003fa:	d273      	bcs.n	80004e4 <__udivmoddi4+0x2a4>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d971      	bls.n	80004e4 <__udivmoddi4+0x2a4>
 8000400:	3802      	subs	r0, #2
 8000402:	4439      	add	r1, r7
 8000404:	1acb      	subs	r3, r1, r3
 8000406:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040a:	e778      	b.n	80002fe <__udivmoddi4+0xbe>
 800040c:	f1c6 0c20 	rsb	ip, r6, #32
 8000410:	fa03 f406 	lsl.w	r4, r3, r6
 8000414:	fa22 f30c 	lsr.w	r3, r2, ip
 8000418:	431c      	orrs	r4, r3
 800041a:	fa20 f70c 	lsr.w	r7, r0, ip
 800041e:	fa01 f306 	lsl.w	r3, r1, r6
 8000422:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000426:	fa21 f10c 	lsr.w	r1, r1, ip
 800042a:	431f      	orrs	r7, r3
 800042c:	0c3b      	lsrs	r3, r7, #16
 800042e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000432:	fa1f f884 	uxth.w	r8, r4
 8000436:	fb0e 1119 	mls	r1, lr, r9, r1
 800043a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043e:	fb09 fa08 	mul.w	sl, r9, r8
 8000442:	458a      	cmp	sl, r1
 8000444:	fa02 f206 	lsl.w	r2, r2, r6
 8000448:	fa00 f306 	lsl.w	r3, r0, r6
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x220>
 800044e:	1861      	adds	r1, r4, r1
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000454:	d248      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 8000456:	458a      	cmp	sl, r1
 8000458:	d946      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4421      	add	r1, r4
 8000460:	eba1 010a 	sub.w	r1, r1, sl
 8000464:	b2bf      	uxth	r7, r7
 8000466:	fbb1 f0fe 	udiv	r0, r1, lr
 800046a:	fb0e 1110 	mls	r1, lr, r0, r1
 800046e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45b8      	cmp	r8, r7
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x24a>
 800047a:	19e7      	adds	r7, r4, r7
 800047c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000480:	d22e      	bcs.n	80004e0 <__udivmoddi4+0x2a0>
 8000482:	45b8      	cmp	r8, r7
 8000484:	d92c      	bls.n	80004e0 <__udivmoddi4+0x2a0>
 8000486:	3802      	subs	r0, #2
 8000488:	4427      	add	r7, r4
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba7 0708 	sub.w	r7, r7, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454f      	cmp	r7, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	4649      	mov	r1, r9
 800049c:	d31a      	bcc.n	80004d4 <__udivmoddi4+0x294>
 800049e:	d017      	beq.n	80004d0 <__udivmoddi4+0x290>
 80004a0:	b15d      	cbz	r5, 80004ba <__udivmoddi4+0x27a>
 80004a2:	ebb3 020e 	subs.w	r2, r3, lr
 80004a6:	eb67 0701 	sbc.w	r7, r7, r1
 80004aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ae:	40f2      	lsrs	r2, r6
 80004b0:	ea4c 0202 	orr.w	r2, ip, r2
 80004b4:	40f7      	lsrs	r7, r6
 80004b6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ba:	2600      	movs	r6, #0
 80004bc:	4631      	mov	r1, r6
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e70b      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fd      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d0:	4543      	cmp	r3, r8
 80004d2:	d2e5      	bcs.n	80004a0 <__udivmoddi4+0x260>
 80004d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d8:	eb69 0104 	sbc.w	r1, r9, r4
 80004dc:	3801      	subs	r0, #1
 80004de:	e7df      	b.n	80004a0 <__udivmoddi4+0x260>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e7d2      	b.n	800048a <__udivmoddi4+0x24a>
 80004e4:	4660      	mov	r0, ip
 80004e6:	e78d      	b.n	8000404 <__udivmoddi4+0x1c4>
 80004e8:	4681      	mov	r9, r0
 80004ea:	e7b9      	b.n	8000460 <__udivmoddi4+0x220>
 80004ec:	4666      	mov	r6, ip
 80004ee:	e775      	b.n	80003dc <__udivmoddi4+0x19c>
 80004f0:	4630      	mov	r0, r6
 80004f2:	e74a      	b.n	800038a <__udivmoddi4+0x14a>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	4439      	add	r1, r7
 80004fa:	e713      	b.n	8000324 <__udivmoddi4+0xe4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	443c      	add	r4, r7
 8000500:	e724      	b.n	800034c <__udivmoddi4+0x10c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <pointer_inc>:
volatile int32_t can_buffer_pointer_tx = 0;


uint32_t can_readFrame(void);

uint32_t pointer_inc(uint32_t val, uint32_t size) {
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	6039      	str	r1, [r7, #0]
	return (val + 1) % size;
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	3301      	adds	r3, #1
 8000516:	683a      	ldr	r2, [r7, #0]
 8000518:	fbb3 f2f2 	udiv	r2, r3, r2
 800051c:	6839      	ldr	r1, [r7, #0]
 800051e:	fb01 f202 	mul.w	r2, r1, r2
 8000522:	1a9b      	subs	r3, r3, r2
}
 8000524:	4618      	mov	r0, r3
 8000526:	370c      	adds	r7, #12
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr

08000530 <can_addMsg>:

void can_addMsg(CAN_msg msg) {
 8000530:	b590      	push	{r4, r7, lr}
 8000532:	b085      	sub	sp, #20
 8000534:	af00      	add	r7, sp, #0
 8000536:	463c      	mov	r4, r7
 8000538:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	can_buffer[can_buffer_pointer_tx] = msg;
 800053c:	4b13      	ldr	r3, [pc, #76]	; (800058c <can_addMsg+0x5c>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a13      	ldr	r2, [pc, #76]	; (8000590 <can_addMsg+0x60>)
 8000542:	011b      	lsls	r3, r3, #4
 8000544:	4413      	add	r3, r2
 8000546:	461c      	mov	r4, r3
 8000548:	463b      	mov	r3, r7
 800054a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800054c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	can_buffer_pointer_tx = pointer_inc(can_buffer_pointer_tx, CAN_BUFFER_DEPTH);
 8000550:	4b0e      	ldr	r3, [pc, #56]	; (800058c <can_addMsg+0x5c>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2140      	movs	r1, #64	; 0x40
 8000556:	4618      	mov	r0, r3
 8000558:	f7ff ffd6 	bl	8000508 <pointer_inc>
 800055c:	4603      	mov	r3, r0
 800055e:	461a      	mov	r2, r3
 8000560:	4b0a      	ldr	r3, [pc, #40]	; (800058c <can_addMsg+0x5c>)
 8000562:	601a      	str	r2, [r3, #0]

	if (can_buffer_pointer_tx == can_buffer_pointer_rx) { // indicates overflow
 8000564:	4b09      	ldr	r3, [pc, #36]	; (800058c <can_addMsg+0x5c>)
 8000566:	681a      	ldr	r2, [r3, #0]
 8000568:	4b0a      	ldr	r3, [pc, #40]	; (8000594 <can_addMsg+0x64>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	429a      	cmp	r2, r3
 800056e:	d109      	bne.n	8000584 <can_addMsg+0x54>
		can_buffer_pointer_rx = pointer_inc(can_buffer_pointer_rx, CAN_BUFFER_DEPTH); // skip one msg in the rx buffer
 8000570:	4b08      	ldr	r3, [pc, #32]	; (8000594 <can_addMsg+0x64>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	2140      	movs	r1, #64	; 0x40
 8000576:	4618      	mov	r0, r3
 8000578:	f7ff ffc6 	bl	8000508 <pointer_inc>
 800057c:	4603      	mov	r3, r0
 800057e:	461a      	mov	r2, r3
 8000580:	4b04      	ldr	r3, [pc, #16]	; (8000594 <can_addMsg+0x64>)
 8000582:	601a      	str	r2, [r3, #0]
	}
}
 8000584:	bf00      	nop
 8000586:	3714      	adds	r7, #20
 8000588:	46bd      	mov	sp, r7
 800058a:	bd90      	pop	{r4, r7, pc}
 800058c:	200000a8 	.word	0x200000a8
 8000590:	200064a0 	.word	0x200064a0
 8000594:	200000a4 	.word	0x200000a4

08000598 <CAN_Config>:

/*
 * Configures CAN protocol for 250kbit/s without interrupt for reading (only polling).
 */
void CAN_Config(uint32_t id)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b08c      	sub	sp, #48	; 0x30
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]

    /*##-1- Configure the CAN peripheral #######################################*/
    // Done in MX_CAN1_Init()

    /*##-2- Configure the CAN Filter ###########################################*/
    sFilterConfig.FilterBank = 0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	61fb      	str	r3, [r7, #28]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80005a4:	2300      	movs	r3, #0
 80005a6:	623b      	str	r3, [r7, #32]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80005a8:	2301      	movs	r3, #1
 80005aa:	627b      	str	r3, [r7, #36]	; 0x24
    sFilterConfig.FilterIdHigh = 0x0000;
 80005ac:	2300      	movs	r3, #0
 80005ae:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterIdLow = 0x0000;
 80005b0:	2300      	movs	r3, #0
 80005b2:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterMaskIdHigh = 0x0000;
 80005b4:	2300      	movs	r3, #0
 80005b6:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterMaskIdLow = 0x0000;
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80005bc:	2300      	movs	r3, #0
 80005be:	61bb      	str	r3, [r7, #24]
    sFilterConfig.FilterActivation = ENABLE;
 80005c0:	2301      	movs	r3, #1
 80005c2:	62bb      	str	r3, [r7, #40]	; 0x28
    sFilterConfig.SlaveStartFilterBank = 14;
 80005c4:	230e      	movs	r3, #14
 80005c6:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 80005c8:	f107 0308 	add.w	r3, r7, #8
 80005cc:	4619      	mov	r1, r3
 80005ce:	4810      	ldr	r0, [pc, #64]	; (8000610 <CAN_Config+0x78>)
 80005d0:	f003 fcda 	bl	8003f88 <HAL_CAN_ConfigFilter>
        /* Filter configuration Error */
        //      _Error_Handler(__FILE__, __LINE__);
    }

    /*##-3- Start the CAN peripheral ###########################################*/
    if (HAL_CAN_Start(&hcan1) != HAL_OK)
 80005d4:	480e      	ldr	r0, [pc, #56]	; (8000610 <CAN_Config+0x78>)
 80005d6:	f003 fdb7 	bl	8004148 <HAL_CAN_Start>
        /* Start Error */
        //      _Error_Handler(__FILE__, __LINE__);
    }

    /*##-4- Activate CAN RX notification #######################################*/
    if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80005da:	2102      	movs	r1, #2
 80005dc:	480c      	ldr	r0, [pc, #48]	; (8000610 <CAN_Config+0x78>)
 80005de:	f003 ff31 	bl	8004444 <HAL_CAN_ActivateNotification>
        /* Notification Error */
    	//_Error_Handler(__FILE__, __LINE__);
    }

    /*##-5- Configure Transmission process #####################################*/
    TxHeader.StdId = id;
 80005e2:	4a0c      	ldr	r2, [pc, #48]	; (8000614 <CAN_Config+0x7c>)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	6013      	str	r3, [r2, #0]
    TxHeader.ExtId = id; // not needed
 80005e8:	4a0a      	ldr	r2, [pc, #40]	; (8000614 <CAN_Config+0x7c>)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	6053      	str	r3, [r2, #4]
    TxHeader.RTR = CAN_RTR_DATA;
 80005ee:	4b09      	ldr	r3, [pc, #36]	; (8000614 <CAN_Config+0x7c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	60da      	str	r2, [r3, #12]
    TxHeader.IDE = CAN_ID_STD;
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <CAN_Config+0x7c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	609a      	str	r2, [r3, #8]
    TxHeader.DLC = 8;
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <CAN_Config+0x7c>)
 80005fc:	2208      	movs	r2, #8
 80005fe:	611a      	str	r2, [r3, #16]
    TxHeader.TransmitGlobalTime = DISABLE;
 8000600:	4b04      	ldr	r3, [pc, #16]	; (8000614 <CAN_Config+0x7c>)
 8000602:	2200      	movs	r2, #0
 8000604:	751a      	strb	r2, [r3, #20]
}
 8000606:	bf00      	nop
 8000608:	3730      	adds	r7, #48	; 0x30
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	200068a0 	.word	0x200068a0
 8000614:	2000646c 	.word	0x2000646c

08000618 <HAL_CAN_RxFifo0MsgPendingCallback>:
    } else { // something bad happen
    	// not sure what to do
    }
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	can_readFrame();
 8000620:	f000 f80a 	bl	8000638 <can_readFrame>
	can_addMsg(can_current_msg);
 8000624:	4b03      	ldr	r3, [pc, #12]	; (8000634 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 8000626:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000628:	f7ff ff82 	bl	8000530 <can_addMsg>
}
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20006450 	.word	0x20006450

08000638 <can_readFrame>:
 *
 * byte 0..3 --> some uint32_t
 * byte 4    --> data_id, see CAN_communication.h
 * byte 5..7 --> timestamp
 */
uint32_t can_readFrame(void) {
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
    uint32_t fill_level = HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0);
 800063e:	2100      	movs	r1, #0
 8000640:	482a      	ldr	r0, [pc, #168]	; (80006ec <can_readFrame+0xb4>)
 8000642:	f003 fed7 	bl	80043f4 <HAL_CAN_GetRxFifoFillLevel>
 8000646:	6078      	str	r0, [r7, #4]
    if (fill_level > 0) {
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d049      	beq.n	80006e2 <can_readFrame+0xaa>
        HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData);
 800064e:	4b28      	ldr	r3, [pc, #160]	; (80006f0 <can_readFrame+0xb8>)
 8000650:	4a28      	ldr	r2, [pc, #160]	; (80006f4 <can_readFrame+0xbc>)
 8000652:	2100      	movs	r1, #0
 8000654:	4825      	ldr	r0, [pc, #148]	; (80006ec <can_readFrame+0xb4>)
 8000656:	f003 fdbb 	bl	80041d0 <HAL_CAN_GetRxMessage>

        can_current_msg.data = 0;
 800065a:	4b27      	ldr	r3, [pc, #156]	; (80006f8 <can_readFrame+0xc0>)
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
        can_current_msg.data += (uint32_t) RxData[0] << 24;
 8000660:	4b25      	ldr	r3, [pc, #148]	; (80006f8 <can_readFrame+0xc0>)
 8000662:	681a      	ldr	r2, [r3, #0]
 8000664:	4b22      	ldr	r3, [pc, #136]	; (80006f0 <can_readFrame+0xb8>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	061b      	lsls	r3, r3, #24
 800066a:	4413      	add	r3, r2
 800066c:	4a22      	ldr	r2, [pc, #136]	; (80006f8 <can_readFrame+0xc0>)
 800066e:	6013      	str	r3, [r2, #0]
        can_current_msg.data += (uint32_t) RxData[1] << 16;
 8000670:	4b21      	ldr	r3, [pc, #132]	; (80006f8 <can_readFrame+0xc0>)
 8000672:	681a      	ldr	r2, [r3, #0]
 8000674:	4b1e      	ldr	r3, [pc, #120]	; (80006f0 <can_readFrame+0xb8>)
 8000676:	785b      	ldrb	r3, [r3, #1]
 8000678:	041b      	lsls	r3, r3, #16
 800067a:	4413      	add	r3, r2
 800067c:	4a1e      	ldr	r2, [pc, #120]	; (80006f8 <can_readFrame+0xc0>)
 800067e:	6013      	str	r3, [r2, #0]
        can_current_msg.data += (uint32_t) RxData[2] << 8;
 8000680:	4b1d      	ldr	r3, [pc, #116]	; (80006f8 <can_readFrame+0xc0>)
 8000682:	681a      	ldr	r2, [r3, #0]
 8000684:	4b1a      	ldr	r3, [pc, #104]	; (80006f0 <can_readFrame+0xb8>)
 8000686:	789b      	ldrb	r3, [r3, #2]
 8000688:	021b      	lsls	r3, r3, #8
 800068a:	4413      	add	r3, r2
 800068c:	4a1a      	ldr	r2, [pc, #104]	; (80006f8 <can_readFrame+0xc0>)
 800068e:	6013      	str	r3, [r2, #0]
		can_current_msg.data += (uint32_t) RxData[3] << 0;
 8000690:	4b19      	ldr	r3, [pc, #100]	; (80006f8 <can_readFrame+0xc0>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a16      	ldr	r2, [pc, #88]	; (80006f0 <can_readFrame+0xb8>)
 8000696:	78d2      	ldrb	r2, [r2, #3]
 8000698:	4413      	add	r3, r2
 800069a:	4a17      	ldr	r2, [pc, #92]	; (80006f8 <can_readFrame+0xc0>)
 800069c:	6013      	str	r3, [r2, #0]

        can_current_msg.id = RxData[4];
 800069e:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <can_readFrame+0xb8>)
 80006a0:	791a      	ldrb	r2, [r3, #4]
 80006a2:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <can_readFrame+0xc0>)
 80006a4:	711a      	strb	r2, [r3, #4]

        can_current_msg.timestamp = 0;
 80006a6:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <can_readFrame+0xc0>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
        can_current_msg.timestamp += (uint32_t) RxData[5] << 16;
 80006ac:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <can_readFrame+0xc0>)
 80006ae:	689a      	ldr	r2, [r3, #8]
 80006b0:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <can_readFrame+0xb8>)
 80006b2:	795b      	ldrb	r3, [r3, #5]
 80006b4:	041b      	lsls	r3, r3, #16
 80006b6:	4413      	add	r3, r2
 80006b8:	4a0f      	ldr	r2, [pc, #60]	; (80006f8 <can_readFrame+0xc0>)
 80006ba:	6093      	str	r3, [r2, #8]
        can_current_msg.timestamp += (uint32_t) RxData[6] << 8;
 80006bc:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <can_readFrame+0xc0>)
 80006be:	689a      	ldr	r2, [r3, #8]
 80006c0:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <can_readFrame+0xb8>)
 80006c2:	799b      	ldrb	r3, [r3, #6]
 80006c4:	021b      	lsls	r3, r3, #8
 80006c6:	4413      	add	r3, r2
 80006c8:	4a0b      	ldr	r2, [pc, #44]	; (80006f8 <can_readFrame+0xc0>)
 80006ca:	6093      	str	r3, [r2, #8]
		can_current_msg.timestamp += (uint32_t) RxData[7] << 0;
 80006cc:	4b0a      	ldr	r3, [pc, #40]	; (80006f8 <can_readFrame+0xc0>)
 80006ce:	689b      	ldr	r3, [r3, #8]
 80006d0:	4a07      	ldr	r2, [pc, #28]	; (80006f0 <can_readFrame+0xb8>)
 80006d2:	79d2      	ldrb	r2, [r2, #7]
 80006d4:	4413      	add	r3, r2
 80006d6:	4a08      	ldr	r2, [pc, #32]	; (80006f8 <can_readFrame+0xc0>)
 80006d8:	6093      	str	r3, [r2, #8]

        can_current_msg.id_CAN = RxHeader.StdId;
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <can_readFrame+0xbc>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a06      	ldr	r2, [pc, #24]	; (80006f8 <can_readFrame+0xc0>)
 80006e0:	60d3      	str	r3, [r2, #12]
    }
    return fill_level;
 80006e2:	687b      	ldr	r3, [r7, #4]
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	200068a0 	.word	0x200068a0
 80006f0:	20006464 	.word	0x20006464
 80006f4:	20006484 	.word	0x20006484
 80006f8:	20006450 	.word	0x20006450

080006fc <can_init>:


void can_init(void) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
	CAN_Config(CAN_ID_PROPULSION_BOARD);
 8000700:	2005      	movs	r0, #5
 8000702:	f7ff ff49 	bl	8000598 <CAN_Config>
}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}

0800070a <util_encode_u32>:
	data[0] = value;
	data[1] = value>>8;
	data[2] = 0x00;
	data[3] = 0x00;
}
static inline void util_encode_u32(uint8_t * data, uint32_t value) {
 800070a:	b480      	push	{r7}
 800070c:	b083      	sub	sp, #12
 800070e:	af00      	add	r7, sp, #0
 8000710:	6078      	str	r0, [r7, #4]
 8000712:	6039      	str	r1, [r7, #0]
	data[0] = value;
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	b2da      	uxtb	r2, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	701a      	strb	r2, [r3, #0]
	data[1] = value>>8;
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	0a1a      	lsrs	r2, r3, #8
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	3301      	adds	r3, #1
 8000724:	b2d2      	uxtb	r2, r2
 8000726:	701a      	strb	r2, [r3, #0]
	data[2] = value>>16;
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	0c1a      	lsrs	r2, r3, #16
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	3302      	adds	r3, #2
 8000730:	b2d2      	uxtb	r2, r2
 8000732:	701a      	strb	r2, [r3, #0]
	data[3] = value>>24;
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	0e1a      	lsrs	r2, r3, #24
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	3303      	adds	r3, #3
 800073c:	b2d2      	uxtb	r2, r2
 800073e:	701a      	strb	r2, [r3, #0]
}
 8000740:	bf00      	nop
 8000742:	370c      	adds	r7, #12
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr

0800074c <util_encode_i32>:
	data[0] = value;
	data[1] = value>>8;
	data[2] = 0x00;
	data[3] = 0x00;
}
static inline void util_encode_i32(uint8_t * data, int32_t value) {
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	6039      	str	r1, [r7, #0]
	data[0] = value;
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	b2da      	uxtb	r2, r3
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	701a      	strb	r2, [r3, #0]
	data[1] = value>>8;
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	121a      	asrs	r2, r3, #8
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	3301      	adds	r3, #1
 8000766:	b2d2      	uxtb	r2, r2
 8000768:	701a      	strb	r2, [r3, #0]
	data[2] = value>>16;
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	141a      	asrs	r2, r3, #16
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	3302      	adds	r3, #2
 8000772:	b2d2      	uxtb	r2, r2
 8000774:	701a      	strb	r2, [r3, #0]
	data[3] = value>>24;
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	161a      	asrs	r2, r3, #24
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	3303      	adds	r3, #3
 800077e:	b2d2      	uxtb	r2, r2
 8000780:	701a      	strb	r2, [r3, #0]
}
 8000782:	bf00      	nop
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr

0800078e <util_decode_u16>:

static inline uint8_t util_decode_u8(uint8_t * data) {
	return data[0];
}

static inline uint16_t util_decode_u16(uint8_t * data) {
 800078e:	b480      	push	{r7}
 8000790:	b083      	sub	sp, #12
 8000792:	af00      	add	r7, sp, #0
 8000794:	6078      	str	r0, [r7, #4]
	return (uint16_t) data[0] | data[1] << 8;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	b21a      	sxth	r2, r3
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	3301      	adds	r3, #1
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	021b      	lsls	r3, r3, #8
 80007a4:	b21b      	sxth	r3, r3
 80007a6:	4313      	orrs	r3, r2
 80007a8:	b21b      	sxth	r3, r3
 80007aa:	b29b      	uxth	r3, r3
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	370c      	adds	r7, #12
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr

080007b8 <util_decode_u32>:

static inline uint32_t util_decode_u32(uint8_t * data) {
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
	return (uint32_t) data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	461a      	mov	r2, r3
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	3301      	adds	r3, #1
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	021b      	lsls	r3, r3, #8
 80007ce:	4313      	orrs	r3, r2
 80007d0:	687a      	ldr	r2, [r7, #4]
 80007d2:	3202      	adds	r2, #2
 80007d4:	7812      	ldrb	r2, [r2, #0]
 80007d6:	0412      	lsls	r2, r2, #16
 80007d8:	4313      	orrs	r3, r2
 80007da:	687a      	ldr	r2, [r7, #4]
 80007dc:	3203      	adds	r2, #3
 80007de:	7812      	ldrb	r2, [r2, #0]
 80007e0:	0612      	lsls	r2, r2, #24
 80007e2:	4313      	orrs	r3, r2
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr

080007f0 <util_decode_i32>:

static inline int16_t util_decode_i16(uint8_t * data) {
	return (int16_t) data[0] | data[1] << 8;
}

static inline int32_t util_decode_i32(uint8_t * data) {
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
	return (int32_t) data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	461a      	mov	r2, r3
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	3301      	adds	r3, #1
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	021b      	lsls	r3, r3, #8
 8000806:	431a      	orrs	r2, r3
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	3302      	adds	r3, #2
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	041b      	lsls	r3, r3, #16
 8000810:	431a      	orrs	r2, r3
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	3303      	adds	r3, #3
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	061b      	lsls	r3, r3, #24
 800081a:	4313      	orrs	r3, r2
}
 800081c:	4618      	mov	r0, r3
 800081e:	370c      	adds	r7, #12
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr

08000828 <cm4_global_init>:

/**********************
 *	DECLARATIONS
 **********************/

void cm4_global_init(void) {
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
	cm4_busy_sem = xSemaphoreCreateMutexStatic(&cm4_busy_sem_buffer);
 800082c:	4904      	ldr	r1, [pc, #16]	; (8000840 <cm4_global_init+0x18>)
 800082e:	2001      	movs	r0, #1
 8000830:	f009 f805 	bl	800983e <xQueueCreateMutexStatic>
 8000834:	4603      	mov	r3, r0
 8000836:	4a03      	ldr	r2, [pc, #12]	; (8000844 <cm4_global_init+0x1c>)
 8000838:	6013      	str	r3, [r2, #0]
}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	200000b0 	.word	0x200000b0
 8000844:	200000ac 	.word	0x200000ac

08000848 <cm4_init>:

void cm4_init(CM4_INST_t * cm4) {
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af02      	add	r7, sp, #8
 800084e:	6078      	str	r0, [r7, #4]
	static uint32_t id_counter = 0;
	cm4->id = id_counter++;
 8000850:	4b17      	ldr	r3, [pc, #92]	; (80008b0 <cm4_init+0x68>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	1c5a      	adds	r2, r3, #1
 8000856:	4916      	ldr	r1, [pc, #88]	; (80008b0 <cm4_init+0x68>)
 8000858:	600a      	str	r2, [r1, #0]
 800085a:	687a      	ldr	r2, [r7, #4]
 800085c:	6013      	str	r3, [r2, #0]
	cm4->garbage_counter = 0;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	f503 53a4 	add.w	r3, r3, #5248	; 0x1480
 8000864:	3304      	adds	r3, #4
 8000866:	2200      	movs	r2, #0
 8000868:	801a      	strh	r2, [r3, #0]
	cm4->rx_sem = xSemaphoreCreateBinaryStatic(&cm4->rx_sem_buffer);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8000870:	331c      	adds	r3, #28
 8000872:	2203      	movs	r2, #3
 8000874:	9200      	str	r2, [sp, #0]
 8000876:	2200      	movs	r2, #0
 8000878:	2100      	movs	r1, #0
 800087a:	2001      	movs	r0, #1
 800087c:	f008 ff32 	bl	80096e4 <xQueueGenericCreateStatic>
 8000880:	4602      	mov	r2, r0
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8000888:	3318      	adds	r3, #24
 800088a:	601a      	str	r2, [r3, #0]
	msv2_init(&cm4->msv2);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	3304      	adds	r3, #4
 8000890:	4618      	mov	r0, r3
 8000892:	f001 fb89 	bl	8001fa8 <msv2_init>
	serial_init(&cm4->ser, &CM4_UART, cm4, cm4_decode_fcn);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	f503 5080 	add.w	r0, r3, #4096	; 0x1000
 800089c:	3018      	adds	r0, #24
 800089e:	4b05      	ldr	r3, [pc, #20]	; (80008b4 <cm4_init+0x6c>)
 80008a0:	687a      	ldr	r2, [r7, #4]
 80008a2:	4905      	ldr	r1, [pc, #20]	; (80008b8 <cm4_init+0x70>)
 80008a4:	f001 fe54 	bl	8002550 <serial_init>


}
 80008a8:	bf00      	nop
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	200000f8 	.word	0x200000f8
 80008b4:	080008bd 	.word	0x080008bd
 80008b8:	20006fa0 	.word	0x20006fa0

080008bc <cm4_decode_fcn>:


SERIAL_RET_t cm4_decode_fcn(void * inst, uint8_t data) {
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	460b      	mov	r3, r1
 80008c6:	70fb      	strb	r3, [r7, #3]
	CM4_INST_t * cm4 = (CM4_INST_t *) inst;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	60fb      	str	r3, [r7, #12]
	MSV2_ERROR_t tmp = msv2_decode_fragment(&cm4->msv2, data);
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	3304      	adds	r3, #4
 80008d0:	78fa      	ldrb	r2, [r7, #3]
 80008d2:	4611      	mov	r1, r2
 80008d4:	4618      	mov	r0, r3
 80008d6:	f001 fc61 	bl	800219c <msv2_decode_fragment>
 80008da:	4603      	mov	r3, r0
 80008dc:	72fb      	strb	r3, [r7, #11]
	if(tmp == MSV2_SUCCESS || tmp == MSV2_WRONG_CRC) {
 80008de:	7afb      	ldrb	r3, [r7, #11]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d002      	beq.n	80008ea <cm4_decode_fcn+0x2e>
 80008e4:	7afb      	ldrb	r3, [r7, #11]
 80008e6:	2b02      	cmp	r3, #2
 80008e8:	d112      	bne.n	8000910 <cm4_decode_fcn+0x54>
		if(cm4->msv2.rx.opcode & 0x80) { //CM4 is master
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	7a1b      	ldrb	r3, [r3, #8]
 80008ee:	b25b      	sxtb	r3, r3
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	da03      	bge.n	80008fc <cm4_decode_fcn+0x40>
			cm4_generate_response(cm4);
 80008f4:	68f8      	ldr	r0, [r7, #12]
 80008f6:	f000 f811 	bl	800091c <cm4_generate_response>
 80008fa:	e009      	b.n	8000910 <cm4_decode_fcn+0x54>
		} else { //HB is master
			xSemaphoreGive(cm4->rx_sem);
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8000902:	3318      	adds	r3, #24
 8000904:	6818      	ldr	r0, [r3, #0]
 8000906:	2300      	movs	r3, #0
 8000908:	2200      	movs	r2, #0
 800090a:	2100      	movs	r1, #0
 800090c:	f008 ffb2 	bl	8009874 <xQueueGenericSend>
		}

	}
	return tmp;
 8000910:	7afb      	ldrb	r3, [r7, #11]
}
 8000912:	4618      	mov	r0, r3
 8000914:	3710      	adds	r7, #16
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
	...

0800091c <cm4_generate_response>:

void cm4_generate_response(CM4_INST_t * cm4) {
 800091c:	b590      	push	{r4, r7, lr}
 800091e:	b085      	sub	sp, #20
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
	static uint8_t send_data[MSV2_MAX_DATA_LEN];
	static uint16_t length = 0;
	static uint16_t bin_length = 0;
	uint8_t opcode = cm4->msv2.rx.opcode;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	7a1b      	ldrb	r3, [r3, #8]
 8000928:	73fb      	strb	r3, [r7, #15]
	opcode &= ~CM4_SALVE_PREFIX;
 800092a:	7bfb      	ldrb	r3, [r7, #15]
 800092c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000930:	73fb      	strb	r3, [r7, #15]
	if(opcode < response_fcn_max) {
 8000932:	7bfb      	ldrb	r3, [r7, #15]
 8000934:	b29a      	uxth	r2, r3
 8000936:	4b2f      	ldr	r3, [pc, #188]	; (80009f4 <cm4_generate_response+0xd8>)
 8000938:	881b      	ldrh	r3, [r3, #0]
 800093a:	429a      	cmp	r2, r3
 800093c:	d22c      	bcs.n	8000998 <cm4_generate_response+0x7c>
		response_fcn[opcode](cm4->msv2.rx.data, cm4->msv2.rx.length, send_data, &length);
 800093e:	7bfb      	ldrb	r3, [r7, #15]
 8000940:	4a2d      	ldr	r2, [pc, #180]	; (80009f8 <cm4_generate_response+0xdc>)
 8000942:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	f103 0012 	add.w	r0, r3, #18
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	89d9      	ldrh	r1, [r3, #14]
 8000950:	4b2a      	ldr	r3, [pc, #168]	; (80009fc <cm4_generate_response+0xe0>)
 8000952:	4a2b      	ldr	r2, [pc, #172]	; (8000a00 <cm4_generate_response+0xe4>)
 8000954:	47a0      	blx	r4
		//length is in words
		bin_length = msv2_create_frame(&cm4->msv2, cm4->msv2.rx.opcode, length/2, send_data);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	1d18      	adds	r0, r3, #4
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	7a19      	ldrb	r1, [r3, #8]
 800095e:	4b27      	ldr	r3, [pc, #156]	; (80009fc <cm4_generate_response+0xe0>)
 8000960:	881b      	ldrh	r3, [r3, #0]
 8000962:	085b      	lsrs	r3, r3, #1
 8000964:	b29b      	uxth	r3, r3
 8000966:	b2da      	uxtb	r2, r3
 8000968:	4b25      	ldr	r3, [pc, #148]	; (8000a00 <cm4_generate_response+0xe4>)
 800096a:	f001 fb31 	bl	8001fd0 <msv2_create_frame>
 800096e:	4603      	mov	r3, r0
 8000970:	461a      	mov	r2, r3
 8000972:	4b24      	ldr	r3, [pc, #144]	; (8000a04 <cm4_generate_response+0xe8>)
 8000974:	801a      	strh	r2, [r3, #0]
		serial_send(&cm4->ser, msv2_tx_data(&cm4->msv2), bin_length);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	f503 5480 	add.w	r4, r3, #4096	; 0x1000
 800097c:	3418      	adds	r4, #24
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	3304      	adds	r3, #4
 8000982:	4618      	mov	r0, r3
 8000984:	f001 fcfe 	bl	8002384 <msv2_tx_data>
 8000988:	4601      	mov	r1, r0
 800098a:	4b1e      	ldr	r3, [pc, #120]	; (8000a04 <cm4_generate_response+0xe8>)
 800098c:	881b      	ldrh	r3, [r3, #0]
 800098e:	461a      	mov	r2, r3
 8000990:	4620      	mov	r0, r4
 8000992:	f001 fe1d 	bl	80025d0 <serial_send>
		send_data[1] = MSV2_CRC_ERROR_HI;
		length = 2;
		bin_length = msv2_create_frame(&cm4->msv2, cm4->msv2.rx.opcode, length/2, send_data);
		serial_send(&cm4->ser, msv2_tx_data(&cm4->msv2), bin_length);
	}
}
 8000996:	e028      	b.n	80009ea <cm4_generate_response+0xce>
		send_data[0] = MSV2_CRC_ERROR_LO;
 8000998:	4b19      	ldr	r3, [pc, #100]	; (8000a00 <cm4_generate_response+0xe4>)
 800099a:	22be      	movs	r2, #190	; 0xbe
 800099c:	701a      	strb	r2, [r3, #0]
		send_data[1] = MSV2_CRC_ERROR_HI;
 800099e:	4b18      	ldr	r3, [pc, #96]	; (8000a00 <cm4_generate_response+0xe4>)
 80009a0:	22eb      	movs	r2, #235	; 0xeb
 80009a2:	705a      	strb	r2, [r3, #1]
		length = 2;
 80009a4:	4b15      	ldr	r3, [pc, #84]	; (80009fc <cm4_generate_response+0xe0>)
 80009a6:	2202      	movs	r2, #2
 80009a8:	801a      	strh	r2, [r3, #0]
		bin_length = msv2_create_frame(&cm4->msv2, cm4->msv2.rx.opcode, length/2, send_data);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	1d18      	adds	r0, r3, #4
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	7a19      	ldrb	r1, [r3, #8]
 80009b2:	4b12      	ldr	r3, [pc, #72]	; (80009fc <cm4_generate_response+0xe0>)
 80009b4:	881b      	ldrh	r3, [r3, #0]
 80009b6:	085b      	lsrs	r3, r3, #1
 80009b8:	b29b      	uxth	r3, r3
 80009ba:	b2da      	uxtb	r2, r3
 80009bc:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <cm4_generate_response+0xe4>)
 80009be:	f001 fb07 	bl	8001fd0 <msv2_create_frame>
 80009c2:	4603      	mov	r3, r0
 80009c4:	461a      	mov	r2, r3
 80009c6:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <cm4_generate_response+0xe8>)
 80009c8:	801a      	strh	r2, [r3, #0]
		serial_send(&cm4->ser, msv2_tx_data(&cm4->msv2), bin_length);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	f503 5480 	add.w	r4, r3, #4096	; 0x1000
 80009d0:	3418      	adds	r4, #24
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	3304      	adds	r3, #4
 80009d6:	4618      	mov	r0, r3
 80009d8:	f001 fcd4 	bl	8002384 <msv2_tx_data>
 80009dc:	4601      	mov	r1, r0
 80009de:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <cm4_generate_response+0xe8>)
 80009e0:	881b      	ldrh	r3, [r3, #0]
 80009e2:	461a      	mov	r2, r3
 80009e4:	4620      	mov	r0, r4
 80009e6:	f001 fdf3 	bl	80025d0 <serial_send>
}
 80009ea:	bf00      	nop
 80009ec:	3714      	adds	r7, #20
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd90      	pop	{r4, r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20000008 	.word	0x20000008
 80009f8:	20000000 	.word	0x20000000
 80009fc:	200002fc 	.word	0x200002fc
 8000a00:	200000fc 	.word	0x200000fc
 8000a04:	200002fe 	.word	0x200002fe

08000a08 <cm4_response_ping>:

static void cm4_response_ping(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 8000a08:	b480      	push	{r7}
 8000a0a:	b085      	sub	sp, #20
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	60f8      	str	r0, [r7, #12]
 8000a10:	607a      	str	r2, [r7, #4]
 8000a12:	603b      	str	r3, [r7, #0]
 8000a14:	460b      	mov	r3, r1
 8000a16:	817b      	strh	r3, [r7, #10]
	resp[0] = MSV2_OK_LO;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	22c5      	movs	r2, #197	; 0xc5
 8000a1c:	701a      	strb	r2, [r3, #0]
	resp[1] = MSV2_OK_HI;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	3301      	adds	r3, #1
 8000a22:	225c      	movs	r2, #92	; 0x5c
 8000a24:	701a      	strb	r2, [r3, #0]
	*resp_len = 2;
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	2202      	movs	r2, #2
 8000a2a:	801a      	strh	r2, [r3, #0]
}
 8000a2c:	bf00      	nop
 8000a2e:	3714      	adds	r7, #20
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr

08000a38 <cm4_response_command>:

static void cm4_response_command(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 8000a38:	b5b0      	push	{r4, r5, r7, lr}
 8000a3a:	b09c      	sub	sp, #112	; 0x70
 8000a3c:	af0a      	add	r7, sp, #40	; 0x28
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	607a      	str	r2, [r7, #4]
 8000a42:	603b      	str	r3, [r7, #0]
 8000a44:	460b      	mov	r3, r1
 8000a46:	817b      	strh	r3, [r7, #10]
	CM4_PAYLOAD_COMMAND_t cmd = {0};
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	2234      	movs	r2, #52	; 0x34
 8000a4e:	2100      	movs	r1, #0
 8000a50:	4618      	mov	r0, r3
 8000a52:	f00a fd53 	bl	800b4fc <memset>
	if(data_len == 50) {
 8000a56:	897b      	ldrh	r3, [r7, #10]
 8000a58:	2b32      	cmp	r3, #50	; 0x32
 8000a5a:	d172      	bne.n	8000b42 <cm4_response_command+0x10a>
		cmd.timestamp = util_decode_u32(data);
 8000a5c:	68f8      	ldr	r0, [r7, #12]
 8000a5e:	f7ff feab 	bl	80007b8 <util_decode_u32>
 8000a62:	4603      	mov	r3, r0
 8000a64:	617b      	str	r3, [r7, #20]
		cmd.thrust = util_decode_i32(data+4);
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	3304      	adds	r3, #4
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff fec0 	bl	80007f0 <util_decode_i32>
 8000a70:	4603      	mov	r3, r0
 8000a72:	61bb      	str	r3, [r7, #24]

		cmd.dynamixel[0] = util_decode_i32(data+8);
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	3308      	adds	r3, #8
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff feb9 	bl	80007f0 <util_decode_i32>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	61fb      	str	r3, [r7, #28]
		cmd.dynamixel[1] = util_decode_i32(data+12);
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	330c      	adds	r3, #12
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff feb2 	bl	80007f0 <util_decode_i32>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	623b      	str	r3, [r7, #32]
		cmd.dynamixel[2] = util_decode_i32(data+16);
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	3310      	adds	r3, #16
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff feab 	bl	80007f0 <util_decode_i32>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24
		cmd.dynamixel[3] = util_decode_i32(data+20);
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	3314      	adds	r3, #20
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff fea4 	bl	80007f0 <util_decode_i32>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	62bb      	str	r3, [r7, #40]	; 0x28

		cmd.position[0] = util_decode_i32(data+24);
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	3318      	adds	r3, #24
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff fe9d 	bl	80007f0 <util_decode_i32>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
		cmd.position[1] = util_decode_i32(data+28);
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	331c      	adds	r3, #28
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f7ff fe96 	bl	80007f0 <util_decode_i32>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	633b      	str	r3, [r7, #48]	; 0x30
		cmd.position[2] = util_decode_i32(data+32);
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	3320      	adds	r3, #32
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff fe8f 	bl	80007f0 <util_decode_i32>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	637b      	str	r3, [r7, #52]	; 0x34

		cmd.speed[0] = util_decode_i32(data+36);
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	3324      	adds	r3, #36	; 0x24
 8000ada:	4618      	mov	r0, r3
 8000adc:	f7ff fe88 	bl	80007f0 <util_decode_i32>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	63bb      	str	r3, [r7, #56]	; 0x38
		cmd.speed[1] = util_decode_i32(data+40);
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	3328      	adds	r3, #40	; 0x28
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff fe81 	bl	80007f0 <util_decode_i32>
 8000aee:	4603      	mov	r3, r0
 8000af0:	63fb      	str	r3, [r7, #60]	; 0x3c
		cmd.speed[2] = util_decode_i32(data+44);
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	332c      	adds	r3, #44	; 0x2c
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff fe7a 	bl	80007f0 <util_decode_i32>
 8000afc:	4603      	mov	r3, r0
 8000afe:	643b      	str	r3, [r7, #64]	; 0x40

		cmd.state = util_decode_u16(data+48);
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	3330      	adds	r3, #48	; 0x30
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff fe42 	bl	800078e <util_decode_u16>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

		control_set_cmd(cmd);
 8000b10:	466d      	mov	r5, sp
 8000b12:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000b16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b1e:	6823      	ldr	r3, [r4, #0]
 8000b20:	602b      	str	r3, [r5, #0]
 8000b22:	f107 0314 	add.w	r3, r7, #20
 8000b26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b28:	f000 fcce 	bl	80014c8 <control_set_cmd>

		resp[0] = MSV2_OK_LO;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	22c5      	movs	r2, #197	; 0xc5
 8000b30:	701a      	strb	r2, [r3, #0]
		resp[1] = MSV2_OK_HI;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	3301      	adds	r3, #1
 8000b36:	225c      	movs	r2, #92	; 0x5c
 8000b38:	701a      	strb	r2, [r3, #0]
		*resp_len = 2;
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	2202      	movs	r2, #2
 8000b3e:	801a      	strh	r2, [r3, #0]
	} else {
		resp[0] = MSV2_ERROR_LO;
		resp[1] = MSV2_ERROR_HI;
		*resp_len = 2;
	}
}
 8000b40:	e009      	b.n	8000b56 <cm4_response_command+0x11e>
		resp[0] = MSV2_ERROR_LO;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	22ce      	movs	r2, #206	; 0xce
 8000b46:	701a      	strb	r2, [r3, #0]
		resp[1] = MSV2_ERROR_HI;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	22ec      	movs	r2, #236	; 0xec
 8000b4e:	701a      	strb	r2, [r3, #0]
		*resp_len = 2;
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	2202      	movs	r2, #2
 8000b54:	801a      	strh	r2, [r3, #0]
}
 8000b56:	bf00      	nop
 8000b58:	3748      	adds	r7, #72	; 0x48
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000b60 <cm4_send>:



CM4_ERROR_t cm4_send(CM4_INST_t * cm4, uint8_t cmd, uint8_t * data, uint16_t length, uint8_t ** resp_data, uint16_t * resp_len) {
 8000b60:	b590      	push	{r4, r7, lr}
 8000b62:	b087      	sub	sp, #28
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	60f8      	str	r0, [r7, #12]
 8000b68:	607a      	str	r2, [r7, #4]
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	460b      	mov	r3, r1
 8000b6e:	72fb      	strb	r3, [r7, #11]
 8000b70:	4613      	mov	r3, r2
 8000b72:	813b      	strh	r3, [r7, #8]
	if (xSemaphoreTake(cm4_busy_sem, DRIV_TIMEOUT) == pdTRUE) {
 8000b74:	4b50      	ldr	r3, [pc, #320]	; (8000cb8 <cm4_send+0x158>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	21c8      	movs	r1, #200	; 0xc8
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f009 f806 	bl	8009b8c <xQueueSemaphoreTake>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	f040 8092 	bne.w	8000cac <cm4_send+0x14c>
		uint16_t frame_length = msv2_create_frame(&cm4->msv2, cmd, length/2, data);
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	1d18      	adds	r0, r3, #4
 8000b8c:	893b      	ldrh	r3, [r7, #8]
 8000b8e:	085b      	lsrs	r3, r3, #1
 8000b90:	b29b      	uxth	r3, r3
 8000b92:	b2da      	uxtb	r2, r3
 8000b94:	7af9      	ldrb	r1, [r7, #11]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	f001 fa1a 	bl	8001fd0 <msv2_create_frame>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	82fb      	strh	r3, [r7, #22]
		serial_send(&cm4->ser, msv2_tx_data(&cm4->msv2), frame_length);
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	f503 5480 	add.w	r4, r3, #4096	; 0x1000
 8000ba6:	3418      	adds	r4, #24
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	3304      	adds	r3, #4
 8000bac:	4618      	mov	r0, r3
 8000bae:	f001 fbe9 	bl	8002384 <msv2_tx_data>
 8000bb2:	4601      	mov	r1, r0
 8000bb4:	8afb      	ldrh	r3, [r7, #22]
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	4620      	mov	r0, r4
 8000bba:	f001 fd09 	bl	80025d0 <serial_send>
		if(cm4->rx_sem == NULL) {
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8000bc4:	3318      	adds	r3, #24
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d108      	bne.n	8000bde <cm4_send+0x7e>
			xSemaphoreGive(cm4_busy_sem);
 8000bcc:	4b3a      	ldr	r3, [pc, #232]	; (8000cb8 <cm4_send+0x158>)
 8000bce:	6818      	ldr	r0, [r3, #0]
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	f008 fe4d 	bl	8009874 <xQueueGenericSend>
			return CM4_LOCAL_ERROR;
 8000bda:	2308      	movs	r3, #8
 8000bdc:	e067      	b.n	8000cae <cm4_send+0x14e>
		}
		if(xSemaphoreTake(cm4->rx_sem, COMM_TIMEOUT) == pdTRUE) {
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8000be4:	3318      	adds	r3, #24
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	210a      	movs	r1, #10
 8000bea:	4618      	mov	r0, r3
 8000bec:	f008 ffce 	bl	8009b8c <xQueueSemaphoreTake>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d131      	bne.n	8000c5a <cm4_send+0xfa>
			cm4->garbage_counter = 0;
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	f503 53a4 	add.w	r3, r3, #5248	; 0x1480
 8000bfc:	3304      	adds	r3, #4
 8000bfe:	2200      	movs	r2, #0
 8000c00:	801a      	strh	r2, [r3, #0]
			if(cm4->msv2.rx.opcode == cmd) {
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	7a1b      	ldrb	r3, [r3, #8]
 8000c06:	7afa      	ldrb	r2, [r7, #11]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d117      	bne.n	8000c3c <cm4_send+0xdc>
				if(resp_len != NULL && resp_data != NULL) {
 8000c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d00b      	beq.n	8000c2a <cm4_send+0xca>
 8000c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d008      	beq.n	8000c2a <cm4_send+0xca>
					*resp_len = cm4->msv2.rx.length;
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	89da      	ldrh	r2, [r3, #14]
 8000c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c1e:	801a      	strh	r2, [r3, #0]
					*resp_data = cm4->msv2.rx.data;
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	f103 0212 	add.w	r2, r3, #18
 8000c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c28:	601a      	str	r2, [r3, #0]
				}
				xSemaphoreGive(cm4_busy_sem);
 8000c2a:	4b23      	ldr	r3, [pc, #140]	; (8000cb8 <cm4_send+0x158>)
 8000c2c:	6818      	ldr	r0, [r3, #0]
 8000c2e:	2300      	movs	r3, #0
 8000c30:	2200      	movs	r2, #0
 8000c32:	2100      	movs	r1, #0
 8000c34:	f008 fe1e 	bl	8009874 <xQueueGenericSend>
				return CM4_SUCCESS;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	e038      	b.n	8000cae <cm4_send+0x14e>
			} else {
				if(resp_len != NULL) {
 8000c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d002      	beq.n	8000c48 <cm4_send+0xe8>
					*resp_len = 0;
 8000c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c44:	2200      	movs	r2, #0
 8000c46:	801a      	strh	r2, [r3, #0]
				}
				xSemaphoreGive(cm4_busy_sem);
 8000c48:	4b1b      	ldr	r3, [pc, #108]	; (8000cb8 <cm4_send+0x158>)
 8000c4a:	6818      	ldr	r0, [r3, #0]
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2100      	movs	r1, #0
 8000c52:	f008 fe0f 	bl	8009874 <xQueueGenericSend>
				return CM4_REMOTE_ERROR;
 8000c56:	2302      	movs	r3, #2
 8000c58:	e029      	b.n	8000cae <cm4_send+0x14e>
			}
		} else {
			cm4->garbage_counter++;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	f503 53a4 	add.w	r3, r3, #5248	; 0x1480
 8000c60:	3304      	adds	r3, #4
 8000c62:	881b      	ldrh	r3, [r3, #0]
 8000c64:	3301      	adds	r3, #1
 8000c66:	b29a      	uxth	r2, r3
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	f503 53a4 	add.w	r3, r3, #5248	; 0x1480
 8000c6e:	3304      	adds	r3, #4
 8000c70:	801a      	strh	r2, [r3, #0]
			if(cm4->garbage_counter > GARBAGE_THRESHOLD) {
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	f503 53a4 	add.w	r3, r3, #5248	; 0x1480
 8000c78:	3304      	adds	r3, #4
 8000c7a:	881b      	ldrh	r3, [r3, #0]
 8000c7c:	2b0a      	cmp	r3, #10
 8000c7e:	d90c      	bls.n	8000c9a <cm4_send+0x13a>
				serial_garbage_clean(&cm4->ser);
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000c86:	3318      	adds	r3, #24
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f001 fcb3 	bl	80025f4 <serial_garbage_clean>
				cm4->garbage_counter = 0;
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	f503 53a4 	add.w	r3, r3, #5248	; 0x1480
 8000c94:	3304      	adds	r3, #4
 8000c96:	2200      	movs	r2, #0
 8000c98:	801a      	strh	r2, [r3, #0]
			}
			xSemaphoreGive(cm4_busy_sem);
 8000c9a:	4b07      	ldr	r3, [pc, #28]	; (8000cb8 <cm4_send+0x158>)
 8000c9c:	6818      	ldr	r0, [r3, #0]
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	f008 fde6 	bl	8009874 <xQueueGenericSend>
			return CM4_TIMEOUT;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	e000      	b.n	8000cae <cm4_send+0x14e>
		}

	} else {
		return CM4_BUSY;
 8000cac:	2304      	movs	r3, #4
	}

}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	371c      	adds	r7, #28
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd90      	pop	{r4, r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	200000ac 	.word	0x200000ac

08000cbc <cm4_ping>:

CM4_ERROR_t cm4_ping(CM4_INST_t * cm4) {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b086      	sub	sp, #24
 8000cc0:	af02      	add	r7, sp, #8
 8000cc2:	6078      	str	r0, [r7, #4]
	CM4_ERROR_t error = 0;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	73fb      	strb	r3, [r7, #15]
	uint8_t data[] = {0xc5, 0x5c};
 8000cc8:	f645 43c5 	movw	r3, #23749	; 0x5cc5
 8000ccc:	81bb      	strh	r3, [r7, #12]
	error |= cm4_send(cm4, CM4_MASTER_PING, data, 2, NULL, NULL);
 8000cce:	f107 020c 	add.w	r2, r7, #12
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	9301      	str	r3, [sp, #4]
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	9300      	str	r3, [sp, #0]
 8000cda:	2302      	movs	r3, #2
 8000cdc:	2100      	movs	r1, #0
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f7ff ff3e 	bl	8000b60 <cm4_send>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	73fb      	strb	r3, [r7, #15]

	return error;
 8000cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3710      	adds	r7, #16
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <cm4_transaction>:


CM4_ERROR_t cm4_transaction(CM4_INST_t * cm4, CM4_PAYLOAD_SENSOR_t * sens, CM4_PAYLOAD_COMMAND_t * cmd) {
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b096      	sub	sp, #88	; 0x58
 8000cfc:	af02      	add	r7, sp, #8
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	607a      	str	r2, [r7, #4]
	CM4_ERROR_t error = 0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t * recv_data;
	uint16_t recv_len = 0;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	uint16_t send_len = 52;
 8000d10:	2334      	movs	r3, #52	; 0x34
 8000d12:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	uint8_t send_data[52];

	util_encode_u32(send_data, sens->timestamp);
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	f107 0310 	add.w	r3, r7, #16
 8000d1e:	4611      	mov	r1, r2
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fcf2 	bl	800070a <util_encode_u32>
	util_encode_i32(send_data+4, sens->acc_x);
 8000d26:	f107 0310 	add.w	r3, r7, #16
 8000d2a:	3304      	adds	r3, #4
 8000d2c:	68ba      	ldr	r2, [r7, #8]
 8000d2e:	6852      	ldr	r2, [r2, #4]
 8000d30:	4611      	mov	r1, r2
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff fd0a 	bl	800074c <util_encode_i32>
	util_encode_i32(send_data+8, sens->acc_y);
 8000d38:	f107 0310 	add.w	r3, r7, #16
 8000d3c:	3308      	adds	r3, #8
 8000d3e:	68ba      	ldr	r2, [r7, #8]
 8000d40:	6892      	ldr	r2, [r2, #8]
 8000d42:	4611      	mov	r1, r2
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff fd01 	bl	800074c <util_encode_i32>
	util_encode_i32(send_data+12, sens->acc_z);
 8000d4a:	f107 0310 	add.w	r3, r7, #16
 8000d4e:	330c      	adds	r3, #12
 8000d50:	68ba      	ldr	r2, [r7, #8]
 8000d52:	68d2      	ldr	r2, [r2, #12]
 8000d54:	4611      	mov	r1, r2
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff fcf8 	bl	800074c <util_encode_i32>

	util_encode_i32(send_data+16, sens->gyro_x);
 8000d5c:	f107 0310 	add.w	r3, r7, #16
 8000d60:	3310      	adds	r3, #16
 8000d62:	68ba      	ldr	r2, [r7, #8]
 8000d64:	6912      	ldr	r2, [r2, #16]
 8000d66:	4611      	mov	r1, r2
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff fcef 	bl	800074c <util_encode_i32>
	util_encode_i32(send_data+20, sens->gyro_y);
 8000d6e:	f107 0310 	add.w	r3, r7, #16
 8000d72:	3314      	adds	r3, #20
 8000d74:	68ba      	ldr	r2, [r7, #8]
 8000d76:	6952      	ldr	r2, [r2, #20]
 8000d78:	4611      	mov	r1, r2
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff fce6 	bl	800074c <util_encode_i32>
	util_encode_i32(send_data+24, sens->gyro_z);
 8000d80:	f107 0310 	add.w	r3, r7, #16
 8000d84:	3318      	adds	r3, #24
 8000d86:	68ba      	ldr	r2, [r7, #8]
 8000d88:	6992      	ldr	r2, [r2, #24]
 8000d8a:	4611      	mov	r1, r2
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff fcdd 	bl	800074c <util_encode_i32>

	util_encode_i32(send_data+28, sens->baro);
 8000d92:	f107 0310 	add.w	r3, r7, #16
 8000d96:	331c      	adds	r3, #28
 8000d98:	68ba      	ldr	r2, [r7, #8]
 8000d9a:	69d2      	ldr	r2, [r2, #28]
 8000d9c:	4611      	mov	r1, r2
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff fcd4 	bl	800074c <util_encode_i32>
	util_encode_i32(send_data+32, sens->cc_pressure);
 8000da4:	f107 0310 	add.w	r3, r7, #16
 8000da8:	3320      	adds	r3, #32
 8000daa:	68ba      	ldr	r2, [r7, #8]
 8000dac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000dae:	4611      	mov	r1, r2
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff fccb 	bl	800074c <util_encode_i32>

	util_encode_i32(send_data+36, sens->dynamixel[0]);
 8000db6:	f107 0310 	add.w	r3, r7, #16
 8000dba:	3324      	adds	r3, #36	; 0x24
 8000dbc:	68ba      	ldr	r2, [r7, #8]
 8000dbe:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000dc0:	4611      	mov	r1, r2
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff fcc2 	bl	800074c <util_encode_i32>
	util_encode_i32(send_data+40, sens->dynamixel[1]);
 8000dc8:	f107 0310 	add.w	r3, r7, #16
 8000dcc:	3328      	adds	r3, #40	; 0x28
 8000dce:	68ba      	ldr	r2, [r7, #8]
 8000dd0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000dd2:	4611      	mov	r1, r2
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fcb9 	bl	800074c <util_encode_i32>
	util_encode_i32(send_data+44, sens->dynamixel[2]);
 8000dda:	f107 0310 	add.w	r3, r7, #16
 8000dde:	332c      	adds	r3, #44	; 0x2c
 8000de0:	68ba      	ldr	r2, [r7, #8]
 8000de2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000de4:	4611      	mov	r1, r2
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff fcb0 	bl	800074c <util_encode_i32>
	util_encode_i32(send_data+48, sens->dynamixel[3]);
 8000dec:	f107 0310 	add.w	r3, r7, #16
 8000df0:	3330      	adds	r3, #48	; 0x30
 8000df2:	68ba      	ldr	r2, [r7, #8]
 8000df4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000df6:	4611      	mov	r1, r2
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff fca7 	bl	800074c <util_encode_i32>

	error |= cm4_send(cm4, CM4_MASTER_PAYLOAD, send_data, send_len , &recv_data, &recv_len);
 8000dfe:	f8b7 104c 	ldrh.w	r1, [r7, #76]	; 0x4c
 8000e02:	f107 0210 	add.w	r2, r7, #16
 8000e06:	f107 0346 	add.w	r3, r7, #70	; 0x46
 8000e0a:	9301      	str	r3, [sp, #4]
 8000e0c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e10:	9300      	str	r3, [sp, #0]
 8000e12:	460b      	mov	r3, r1
 8000e14:	2102      	movs	r1, #2
 8000e16:	68f8      	ldr	r0, [r7, #12]
 8000e18:	f7ff fea2 	bl	8000b60 <cm4_send>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	461a      	mov	r2, r3
 8000e20:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000e24:	4313      	orrs	r3, r2
 8000e26:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if(recv_len == 50) {
 8000e2a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8000e2e:	2b32      	cmp	r3, #50	; 0x32
 8000e30:	d167      	bne.n	8000f02 <cm4_transaction+0x20a>
		cmd->timestamp = util_decode_u32(recv_data);
 8000e32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff fcbf 	bl	80007b8 <util_decode_u32>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	601a      	str	r2, [r3, #0]
		cmd->thrust = util_decode_i32(recv_data+4);
 8000e40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e42:	3304      	adds	r3, #4
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff fcd3 	bl	80007f0 <util_decode_i32>
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	605a      	str	r2, [r3, #4]

		cmd->dynamixel[0] = util_decode_i32(recv_data+8);
 8000e50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e52:	3308      	adds	r3, #8
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff fccb 	bl	80007f0 <util_decode_i32>
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
		cmd->dynamixel[1] = util_decode_i32(recv_data+12);
 8000e60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e62:	330c      	adds	r3, #12
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff fcc3 	bl	80007f0 <util_decode_i32>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	60da      	str	r2, [r3, #12]
		cmd->dynamixel[2] = util_decode_i32(recv_data+16);
 8000e70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e72:	3310      	adds	r3, #16
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff fcbb 	bl	80007f0 <util_decode_i32>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	611a      	str	r2, [r3, #16]
		cmd->dynamixel[3] = util_decode_i32(recv_data+20);
 8000e80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e82:	3314      	adds	r3, #20
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff fcb3 	bl	80007f0 <util_decode_i32>
 8000e8a:	4602      	mov	r2, r0
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	615a      	str	r2, [r3, #20]

		cmd->position[0] = util_decode_i32(recv_data+24);
 8000e90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e92:	3318      	adds	r3, #24
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff fcab 	bl	80007f0 <util_decode_i32>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	619a      	str	r2, [r3, #24]
		cmd->position[1] = util_decode_i32(recv_data+28);
 8000ea0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ea2:	331c      	adds	r3, #28
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff fca3 	bl	80007f0 <util_decode_i32>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	61da      	str	r2, [r3, #28]
		cmd->position[2] = util_decode_i32(recv_data+32);
 8000eb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000eb2:	3320      	adds	r3, #32
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff fc9b 	bl	80007f0 <util_decode_i32>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	621a      	str	r2, [r3, #32]

		cmd->speed[0] = util_decode_i32(recv_data+36);
 8000ec0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ec2:	3324      	adds	r3, #36	; 0x24
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff fc93 	bl	80007f0 <util_decode_i32>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	625a      	str	r2, [r3, #36]	; 0x24
		cmd->speed[1] = util_decode_i32(recv_data+40);
 8000ed0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ed2:	3328      	adds	r3, #40	; 0x28
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff fc8b 	bl	80007f0 <util_decode_i32>
 8000eda:	4602      	mov	r2, r0
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	629a      	str	r2, [r3, #40]	; 0x28
		cmd->speed[2] = util_decode_i32(recv_data+44);
 8000ee0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ee2:	332c      	adds	r3, #44	; 0x2c
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff fc83 	bl	80007f0 <util_decode_i32>
 8000eea:	4602      	mov	r2, r0
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	62da      	str	r2, [r3, #44]	; 0x2c

		cmd->state = util_decode_u16(recv_data+48);
 8000ef0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ef2:	3330      	adds	r3, #48	; 0x30
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff fc4a 	bl	800078e <util_decode_u16>
 8000efa:	4603      	mov	r3, r0
 8000efc:	461a      	mov	r2, r3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	861a      	strh	r2, [r3, #48]	; 0x30

	}

	return CM4_SUCCESS;
 8000f02:	2300      	movs	r3, #0
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3750      	adds	r7, #80	; 0x50
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <cm4_boot>:

CM4_ERROR_t cm4_boot(CM4_INST_t * cm4) {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
	allow_boot();
 8000f14:	f000 f876 	bl	8001004 <allow_boot>
	return CM4_SUCCESS;
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <cm4_is_ready>:

CM4_ERROR_t cm4_is_ready(CM4_INST_t * cm4, uint8_t * ready) {
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b082      	sub	sp, #8
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
 8000f2a:	6039      	str	r1, [r7, #0]
	if(ready == NULL){
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d101      	bne.n	8000f36 <cm4_is_ready+0x14>
		return CM4_LOCAL_ERROR;
 8000f32:	2308      	movs	r3, #8
 8000f34:	e011      	b.n	8000f5a <cm4_is_ready+0x38>
	}
	*ready = 0;
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	701a      	strb	r2, [r3, #0]
	if(is_booted()) {
 8000f3c:	f000 f850 	bl	8000fe0 <is_booted>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d008      	beq.n	8000f58 <cm4_is_ready+0x36>
		if(cm4_ping(cm4) == CM4_SUCCESS) {
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f7ff feb8 	bl	8000cbc <cm4_ping>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d102      	bne.n	8000f58 <cm4_is_ready+0x36>
			*ready = 1;
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	2201      	movs	r2, #1
 8000f56:	701a      	strb	r2, [r3, #0]
		}
	}
	return CM4_SUCCESS;
 8000f58:	2300      	movs	r3, #0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <cm4_shutdown>:

CM4_ERROR_t cm4_shutdown(CM4_INST_t * cm4) {
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b086      	sub	sp, #24
 8000f66:	af02      	add	r7, sp, #8
 8000f68:	6078      	str	r0, [r7, #4]
	//send shutdown command through uart
	uint8_t data[] = {0x00, 0x00};
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	81bb      	strh	r3, [r7, #12]
	cm4_send(cm4, CM4_MASTER_SHUTDOWN, data, 2, NULL, NULL);
 8000f6e:	f107 020c 	add.w	r2, r7, #12
 8000f72:	2300      	movs	r3, #0
 8000f74:	9301      	str	r3, [sp, #4]
 8000f76:	2300      	movs	r3, #0
 8000f78:	9300      	str	r3, [sp, #0]
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f7ff fdee 	bl	8000b60 <cm4_send>

	return CM4_SUCCESS;
 8000f84:	2300      	movs	r3, #0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <cm4_is_shutdown>:

CM4_ERROR_t cm4_is_shutdown(CM4_INST_t * cm4, uint8_t * shutdown) {
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b082      	sub	sp, #8
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
 8000f96:	6039      	str	r1, [r7, #0]
	if(shutdown == NULL){
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d101      	bne.n	8000fa2 <cm4_is_shutdown+0x14>
		return CM4_LOCAL_ERROR;
 8000f9e:	2308      	movs	r3, #8
 8000fa0:	e00f      	b.n	8000fc2 <cm4_is_shutdown+0x34>
	}
	if(!is_booted()) {
 8000fa2:	f000 f81d 	bl	8000fe0 <is_booted>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d106      	bne.n	8000fba <cm4_is_shutdown+0x2c>
		//check wheter the CM4 answers
		//if answers
		hold_boot();
 8000fac:	f000 f838 	bl	8001020 <hold_boot>
		*shutdown = 1;
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	701a      	strb	r2, [r3, #0]
		return CM4_SUCCESS;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	e003      	b.n	8000fc2 <cm4_is_shutdown+0x34>
	} else {
		*shutdown = 0;
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	701a      	strb	r2, [r3, #0]
		return CM4_SUCCESS;
 8000fc0:	2300      	movs	r3, #0
	}
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <cm4_force_shutdown>:


CM4_ERROR_t cm4_force_shutdown(CM4_INST_t * cm4) {
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b082      	sub	sp, #8
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
	hold_boot();
 8000fd2:	f000 f825 	bl	8001020 <hold_boot>
	return CM4_SUCCESS;
 8000fd6:	2300      	movs	r3, #0
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <is_booted>:



static uint8_t is_booted(void) {
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
	return CM4_RUN_PG_PORT->IDR & CM4_RUN_PG_PIN ?1:0;
 8000fe4:	4b06      	ldr	r3, [pc, #24]	; (8001000 <is_booted+0x20>)
 8000fe6:	691b      	ldr	r3, [r3, #16]
 8000fe8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	bf14      	ite	ne
 8000ff0:	2301      	movne	r3, #1
 8000ff2:	2300      	moveq	r3, #0
 8000ff4:	b2db      	uxtb	r3, r3
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	40020400 	.word	0x40020400

08001004 <allow_boot>:

static void allow_boot(void) {
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
	CM4_GLOBAL_EN_PORT->BSRR = CM4_GLOBAL_EN_PIN;
 8001008:	4b04      	ldr	r3, [pc, #16]	; (800101c <allow_boot+0x18>)
 800100a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800100e:	619a      	str	r2, [r3, #24]
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	40020000 	.word	0x40020000

08001020 <hold_boot>:

static void hold_boot(void) {
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
	CM4_GLOBAL_EN_PORT->BSRR = CM4_GLOBAL_EN_PIN << 16;
 8001024:	4b04      	ldr	r3, [pc, #16]	; (8001038 <hold_boot+0x18>)
 8001026:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800102a:	619a      	str	r2, [r3, #24]
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	40020000 	.word	0x40020000

0800103c <control_thread>:

/**********************
 *	DECLARATIONS
 **********************/

void control_thread(void * arg) {
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
	static TickType_t last_wake_time;
	static const TickType_t period = pdMS_TO_TICKS(CONTROL_HEART_BEAT);



	led_init();
 8001044:	f000 ff30 	bl	8001ea8 <led_init>

	init_control(&control);
 8001048:	4814      	ldr	r0, [pc, #80]	; (800109c <control_thread+0x60>)
 800104a:	f000 f865 	bl	8001118 <init_control>
	servo_config(&tvc_servo);

	control.tvc_servo = &tvc_servo;
#endif

	cm4_global_init();
 800104e:	f7ff fbeb 	bl	8000828 <cm4_global_init>

	static CM4_INST_t cm4;

	cm4_init(&cm4);
 8001052:	4813      	ldr	r0, [pc, #76]	; (80010a0 <control_thread+0x64>)
 8001054:	f7ff fbf8 	bl	8000848 <cm4_init>

	control.cm4 = &cm4;
 8001058:	4b10      	ldr	r3, [pc, #64]	; (800109c <control_thread+0x60>)
 800105a:	4a11      	ldr	r2, [pc, #68]	; (80010a0 <control_thread+0x64>)
 800105c:	619a      	str	r2, [r3, #24]


	init_idle(&control);
 800105e:	480f      	ldr	r0, [pc, #60]	; (800109c <control_thread+0x60>)
 8001060:	f000 f86b 	bl	800113a <init_idle>



	last_wake_time = xTaskGetTickCount();
 8001064:	f009 faac 	bl	800a5c0 <xTaskGetTickCount>
 8001068:	4603      	mov	r3, r0
 800106a:	4a0e      	ldr	r2, [pc, #56]	; (80010a4 <control_thread+0x68>)
 800106c:	6013      	str	r3, [r2, #0]
		} else {
			servo_disable_led(control.tvc_servo, NULL);
		}
#endif

		control_update(&control);
 800106e:	480b      	ldr	r0, [pc, #44]	; (800109c <control_thread+0x60>)
 8001070:	f000 f81e 	bl	80010b0 <control_update>


		if(control.state < CS_NUM && control.state >= 0) {
 8001074:	4b09      	ldr	r3, [pc, #36]	; (800109c <control_thread+0x60>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	2b05      	cmp	r3, #5
 800107a:	d807      	bhi.n	800108c <control_thread+0x50>
			control_fcn[control.state](&control);
 800107c:	4b07      	ldr	r3, [pc, #28]	; (800109c <control_thread+0x60>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	461a      	mov	r2, r3
 8001082:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <control_thread+0x6c>)
 8001084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001088:	4804      	ldr	r0, [pc, #16]	; (800109c <control_thread+0x60>)
 800108a:	4798      	blx	r3
		}
		vTaskDelayUntil( &last_wake_time, period );
 800108c:	4b07      	ldr	r3, [pc, #28]	; (80010ac <control_thread+0x70>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4619      	mov	r1, r3
 8001092:	4804      	ldr	r0, [pc, #16]	; (80010a4 <control_thread+0x68>)
 8001094:	f009 f8d6 	bl	800a244 <vTaskDelayUntil>
		control_update(&control);
 8001098:	e7e9      	b.n	800106e <control_thread+0x32>
 800109a:	bf00      	nop
 800109c:	20000300 	.word	0x20000300
 80010a0:	200003a4 	.word	0x200003a4
 80010a4:	2000182c 	.word	0x2000182c
 80010a8:	20000030 	.word	0x20000030
 80010ac:	0800b56c 	.word	0x0800b56c

080010b0 <control_update>:
	}
}


static void control_update(CONTROL_INST_t * control) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]

	control->last_time = control->time;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	685a      	ldr	r2, [r3, #4]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	609a      	str	r2, [r3, #8]
	control->time = HAL_GetTick();
 80010c0:	f002 fe5a 	bl	8003d78 <HAL_GetTick>
 80010c4:	4602      	mov	r2, r0
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	605a      	str	r2, [r3, #4]
	control->iter++;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	695b      	ldr	r3, [r3, #20]
 80010ce:	1c5a      	adds	r2, r3, #1
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	615a      	str	r2, [r3, #20]

	if(control->counter_active) {
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	7c1b      	ldrb	r3, [r3, #16]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d00b      	beq.n	80010f4 <control_update+0x44>
		control->counter -= (control->time - control->last_time);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	4619      	mov	r1, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	689a      	ldr	r2, [r3, #8]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	440b      	add	r3, r1
 80010ee:	461a      	mov	r2, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	60da      	str	r2, [r3, #12]
	servo_sync(control->tvc_servo);
#endif

	//init error if there is an issue with a motor

	if(control_sched_should_run(control, CONTROL_SCHED_ABORT)) {
 80010f4:	2101      	movs	r1, #1
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f000 fa1a 	bl	8001530 <control_sched_should_run>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d006      	beq.n	8001110 <control_update+0x60>
		init_abort(control);
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f000 f8d0 	bl	80012a8 <init_abort>
		control_sched_done(control, CONTROL_SCHED_ABORT);
 8001108:	2101      	movs	r1, #1
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f000 fa25 	bl	800155a <control_sched_done>
	}
}
 8001110:	bf00      	nop
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <init_control>:

static void init_control(CONTROL_INST_t * control) {
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
	control->sched = CONTROL_SCHED_NOTHING;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2200      	movs	r2, #0
 8001124:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	control->counter_active = 0;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2200      	movs	r2, #0
 800112c:	741a      	strb	r2, [r3, #16]
}
 800112e:	bf00      	nop
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <init_idle>:

static void init_idle(CONTROL_INST_t * control) {
 800113a:	b580      	push	{r7, lr}
 800113c:	b082      	sub	sp, #8
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
	control->state = CS_IDLE;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2200      	movs	r2, #0
 8001146:	701a      	strb	r2, [r3, #0]
	led_set_color(LED_GREEN);
 8001148:	2200      	movs	r2, #0
 800114a:	21ff      	movs	r1, #255	; 0xff
 800114c:	2000      	movs	r0, #0
 800114e:	f000 fecf 	bl	8001ef0 <led_set_color>
	storage_disable();
 8001152:	f001 fb8f 	bl	8002874 <storage_disable>
	cm4_force_shutdown(control->cm4);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	699b      	ldr	r3, [r3, #24]
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff ff35 	bl	8000fca <cm4_force_shutdown>
}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <idle>:

static void idle(CONTROL_INST_t * control) {
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	if(control_sched_should_run(control, CONTROL_SCHED_MOVE_TVC)) {
		servo_move(control->tvc_servo, control->tvc_mov_target);
		control_sched_done(control, CONTROL_SCHED_MOVE_TVC);
	}
#endif
	if(control_sched_should_run(control, CONTROL_SCHED_BOOT)) {
 8001170:	2102      	movs	r1, #2
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f000 f9dc 	bl	8001530 <control_sched_should_run>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d006      	beq.n	800118c <idle+0x24>
		init_boot(control);
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f000 f808 	bl	8001194 <init_boot>
		control_sched_done(control, CONTROL_SCHED_BOOT);
 8001184:	2102      	movs	r1, #2
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f000 f9e7 	bl	800155a <control_sched_done>
	}

}
 800118c:	bf00      	nop
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <init_boot>:

static void init_boot(CONTROL_INST_t * control) {
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
	//global enable
	//to boot the rpi
	led_set_color(LED_LILA);
 800119c:	224f      	movs	r2, #79	; 0x4f
 800119e:	2103      	movs	r1, #3
 80011a0:	20ff      	movs	r0, #255	; 0xff
 80011a2:	f000 fea5 	bl	8001ef0 <led_set_color>
	control->state = CS_BOOT;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2201      	movs	r2, #1
 80011aa:	701a      	strb	r2, [r3, #0]
	cm4_boot(control->cm4);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff feab 	bl	8000f0c <cm4_boot>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <boot>:

static void boot(CONTROL_INST_t * control) {
 80011be:	b580      	push	{r7, lr}
 80011c0:	b084      	sub	sp, #16
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
	//wait for the cm4 to start answering with concluent status packets
	uint8_t ready = 0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	73fb      	strb	r3, [r7, #15]
	cm4_is_ready(control->cm4, &ready);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	699b      	ldr	r3, [r3, #24]
 80011ce:	f107 020f 	add.w	r2, r7, #15
 80011d2:	4611      	mov	r1, r2
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff fea4 	bl	8000f22 <cm4_is_ready>
	if(ready) {
 80011da:	7bfb      	ldrb	r3, [r7, #15]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d002      	beq.n	80011e6 <boot+0x28>
		init_compute(control);
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f000 f804 	bl	80011ee <init_compute>
	}
}
 80011e6:	bf00      	nop
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <init_compute>:

static void init_compute(CONTROL_INST_t * control) {
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b082      	sub	sp, #8
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
	//start sending data to raspberry pi
	led_set_color(LED_BLUE);
 80011f6:	22ff      	movs	r2, #255	; 0xff
 80011f8:	2100      	movs	r1, #0
 80011fa:	2000      	movs	r0, #0
 80011fc:	f000 fe78 	bl	8001ef0 <led_set_color>
	control->state = CS_COMPUTE;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2202      	movs	r2, #2
 8001204:	701a      	strb	r2, [r3, #0]
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <compute>:

static void compute(CONTROL_INST_t * control) {
 800120e:	b580      	push	{r7, lr}
 8001210:	b082      	sub	sp, #8
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]

#if USE_PIPELINE == 0
	cm4_transaction(control->cm4, &control->sensor_payload, &control->command_payload);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6998      	ldr	r0, [r3, #24]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3370      	adds	r3, #112	; 0x70
 8001224:	461a      	mov	r2, r3
 8001226:	f7ff fd67 	bl	8000cf8 <cm4_transaction>
#endif

	if(control_sched_should_run(control, CONTROL_SCHED_SHUTDOWN)) {
 800122a:	2103      	movs	r1, #3
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f000 f97f 	bl	8001530 <control_sched_should_run>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d006      	beq.n	8001246 <compute+0x38>
		init_shutdown(control);
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f000 f808 	bl	800124e <init_shutdown>
		control_sched_done(control, CONTROL_SCHED_SHUTDOWN);
 800123e:	2103      	movs	r1, #3
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f000 f98a 	bl	800155a <control_sched_done>
	}
}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <init_shutdown>:


static void init_shutdown(CONTROL_INST_t * control) {
 800124e:	b580      	push	{r7, lr}
 8001250:	b082      	sub	sp, #8
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
	led_set_color(LED_ORANGE);
 8001256:	2207      	movs	r2, #7
 8001258:	210f      	movs	r1, #15
 800125a:	207f      	movs	r0, #127	; 0x7f
 800125c:	f000 fe48 	bl	8001ef0 <led_set_color>
	control->state = CS_SHUTDOWN;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2203      	movs	r2, #3
 8001264:	701a      	strb	r2, [r3, #0]
	cm4_shutdown(control->cm4);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	699b      	ldr	r3, [r3, #24]
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff fe79 	bl	8000f62 <cm4_shutdown>
}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <shutdown>:

static void shutdown(CONTROL_INST_t * control) {
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
	uint8_t shutdown = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	73fb      	strb	r3, [r7, #15]
	cm4_is_shutdown(control->cm4, &shutdown);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	f107 020f 	add.w	r2, r7, #15
 800128c:	4611      	mov	r1, r2
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff fe7d 	bl	8000f8e <cm4_is_shutdown>
	if(shutdown) {
 8001294:	7bfb      	ldrb	r3, [r7, #15]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d002      	beq.n	80012a0 <shutdown+0x28>
		init_idle(control);
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f7ff ff4d 	bl	800113a <init_idle>
	}
}
 80012a0:	bf00      	nop
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <init_abort>:

static void init_abort(CONTROL_INST_t * control) {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
	led_set_color(LED_PINK);
 80012b0:	227f      	movs	r2, #127	; 0x7f
 80012b2:	2100      	movs	r1, #0
 80012b4:	207f      	movs	r0, #127	; 0x7f
 80012b6:	f000 fe1b 	bl	8001ef0 <led_set_color>
	control->shadow_state = control->state;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	781a      	ldrb	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	705a      	strb	r2, [r3, #1]
	control->state = CS_ABORT;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2204      	movs	r2, #4
 80012c6:	701a      	strb	r2, [r3, #0]
#if USE_DYNAMIXEL == 1
	servo_move(control->tvc_servo, 2048); //2048 is the straight position
#endif
	control->counter_active=0;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2200      	movs	r2, #0
 80012cc:	741a      	strb	r2, [r3, #16]
	storage_disable();
 80012ce:	f001 fad1 	bl	8002874 <storage_disable>
	cm4_force_shutdown(control->cm4);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	699b      	ldr	r3, [r3, #24]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff fe77 	bl	8000fca <cm4_force_shutdown>
}
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <_abort>:

static void _abort(CONTROL_INST_t * control) {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
	if(control_sched_should_run(control, CONTROL_SCHED_RECOVER)) {
 80012ec:	2105      	movs	r1, #5
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f000 f91e 	bl	8001530 <control_sched_should_run>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d006      	beq.n	8001308 <_abort+0x24>
		init_idle(control);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff ff1d 	bl	800113a <init_idle>
		control_sched_done(control, CONTROL_SCHED_RECOVER);
 8001300:	2105      	movs	r1, #5
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f000 f929 	bl	800155a <control_sched_done>
	}
}
 8001308:	bf00      	nop
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <init_error>:

static void init_error(CONTROL_INST_t * control) {
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
	led_set_color(LED_RED);
 8001318:	2200      	movs	r2, #0
 800131a:	2100      	movs	r1, #0
 800131c:	20ff      	movs	r0, #255	; 0xff
 800131e:	f000 fde7 	bl	8001ef0 <led_set_color>
	control->state = CS_ERROR;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2205      	movs	r2, #5
 8001326:	701a      	strb	r2, [r3, #0]
	control->counter_active = 0;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2200      	movs	r2, #0
 800132c:	741a      	strb	r2, [r3, #16]
	storage_disable();
 800132e:	f001 faa1 	bl	8002874 <storage_disable>
}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <error>:

static void error(CONTROL_INST_t * control) {
 800133a:	b580      	push	{r7, lr}
 800133c:	b082      	sub	sp, #8
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
	//wait for user release
	if(control_sched_should_run(control, CONTROL_SCHED_RECOVER)) {
 8001342:	2105      	movs	r1, #5
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f000 f8f3 	bl	8001530 <control_sched_should_run>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d006      	beq.n	800135e <error+0x24>
		init_idle(control);
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff fef2 	bl	800113a <init_idle>
		control_sched_done(control, CONTROL_SCHED_RECOVER);
 8001356:	2105      	movs	r1, #5
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f000 f8fe 	bl	800155a <control_sched_done>
	}
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
	...

08001368 <control_move_tvc>:
CONTROL_STATE_t control_get_state() {
	return control.state;
}


void control_move_tvc(int32_t target) {
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
	control_sched_set(&control, CONTROL_SCHED_MOVE_TVC);
 8001370:	2104      	movs	r1, #4
 8001372:	4805      	ldr	r0, [pc, #20]	; (8001388 <control_move_tvc+0x20>)
 8001374:	f000 f90a 	bl	800158c <control_sched_set>
	control.tvc_mov_target = target;
 8001378:	4a03      	ldr	r2, [pc, #12]	; (8001388 <control_move_tvc+0x20>)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6213      	str	r3, [r2, #32]
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000300 	.word	0x20000300

0800138c <control_boot>:

void control_boot(void) {
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
	control_sched_set(&control, CONTROL_SCHED_BOOT);
 8001390:	2102      	movs	r1, #2
 8001392:	4802      	ldr	r0, [pc, #8]	; (800139c <control_boot+0x10>)
 8001394:	f000 f8fa 	bl	800158c <control_sched_set>
}
 8001398:	bf00      	nop
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20000300 	.word	0x20000300

080013a0 <control_shutdown>:

void control_shutdown(void) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
	control_sched_set(&control, CONTROL_SCHED_SHUTDOWN);
 80013a4:	2103      	movs	r1, #3
 80013a6:	4802      	ldr	r0, [pc, #8]	; (80013b0 <control_shutdown+0x10>)
 80013a8:	f000 f8f0 	bl	800158c <control_sched_set>
}
 80013ac:	bf00      	nop
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000300 	.word	0x20000300

080013b4 <control_abort>:

void control_abort() {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
	control_sched_set(&control, CONTROL_SCHED_ABORT);
 80013b8:	2101      	movs	r1, #1
 80013ba:	4802      	ldr	r0, [pc, #8]	; (80013c4 <control_abort+0x10>)
 80013bc:	f000 f8e6 	bl	800158c <control_sched_set>
}
 80013c0:	bf00      	nop
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20000300 	.word	0x20000300

080013c8 <control_recover>:

void control_recover() {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
	control_sched_set(&control, CONTROL_SCHED_RECOVER);
 80013cc:	2105      	movs	r1, #5
 80013ce:	4802      	ldr	r0, [pc, #8]	; (80013d8 <control_recover+0x10>)
 80013d0:	f000 f8dc 	bl	800158c <control_sched_set>
}
 80013d4:	bf00      	nop
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000300 	.word	0x20000300

080013dc <control_get_status>:

CONTROL_STATUS_t control_get_status() {
 80013dc:	b4b0      	push	{r4, r5, r7}
 80013de:	b089      	sub	sp, #36	; 0x24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
	CONTROL_STATUS_t status = {0};
 80013e4:	f107 0308 	add.w	r3, r7, #8
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]
 80013f4:	615a      	str	r2, [r3, #20]
	status.state = control.state;
 80013f6:	4b17      	ldr	r3, [pc, #92]	; (8001454 <control_get_status+0x78>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	723b      	strb	r3, [r7, #8]
	status.tvc_error = control.tvc_servo->error;
 80013fc:	4b15      	ldr	r3, [pc, #84]	; (8001454 <control_get_status+0x78>)
 80013fe:	69db      	ldr	r3, [r3, #28]
 8001400:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 8001404:	3318      	adds	r3, #24
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	737b      	strb	r3, [r7, #13]
	status.tvc_psu_voltage = control.tvc_servo->psu_voltage;
 800140a:	4b12      	ldr	r3, [pc, #72]	; (8001454 <control_get_status+0x78>)
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 8001412:	3310      	adds	r3, #16
 8001414:	881b      	ldrh	r3, [r3, #0]
 8001416:	817b      	strh	r3, [r7, #10]
	status.tvc_temperature = control.tvc_servo->temperature;
 8001418:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <control_get_status+0x78>)
 800141a:	69db      	ldr	r3, [r3, #28]
 800141c:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 8001420:	3312      	adds	r3, #18
 8001422:	f993 3000 	ldrsb.w	r3, [r3]
 8001426:	733b      	strb	r3, [r7, #12]
	status.tvc_position = control.tvc_servo->position;
 8001428:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <control_get_status+0x78>)
 800142a:	69db      	ldr	r3, [r3, #28]
 800142c:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 8001430:	3314      	adds	r3, #20
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	613b      	str	r3, [r7, #16]

	return status;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	461d      	mov	r5, r3
 800143a:	f107 0408 	add.w	r4, r7, #8
 800143e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001440:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001442:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001446:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	3724      	adds	r7, #36	; 0x24
 800144e:	46bd      	mov	sp, r7
 8001450:	bcb0      	pop	{r4, r5, r7}
 8001452:	4770      	bx	lr
 8001454:	20000300 	.word	0x20000300

08001458 <control_set_sens>:

void control_set_sens(CM4_PAYLOAD_SENSOR_t sens) {
 8001458:	b084      	sub	sp, #16
 800145a:	b4b0      	push	{r4, r5, r7}
 800145c:	af00      	add	r7, sp, #0
 800145e:	f107 040c 	add.w	r4, r7, #12
 8001462:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	control.sensor_payload = sens;
 8001466:	4b0a      	ldr	r3, [pc, #40]	; (8001490 <control_set_sens+0x38>)
 8001468:	f103 0438 	add.w	r4, r3, #56	; 0x38
 800146c:	f107 050c 	add.w	r5, r7, #12
 8001470:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001472:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001474:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001476:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001478:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800147a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800147c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001480:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	bcb0      	pop	{r4, r5, r7}
 800148a:	b004      	add	sp, #16
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	20000300 	.word	0x20000300

08001494 <control_get_sens>:

CM4_PAYLOAD_SENSOR_t control_get_sens(void) {
 8001494:	b4b0      	push	{r4, r5, r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
	return control.sensor_payload;
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <control_get_sens+0x30>)
 80014a0:	4615      	mov	r5, r2
 80014a2:	f103 0438 	add.w	r4, r3, #56	; 0x38
 80014a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014b6:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	bcb0      	pop	{r4, r5, r7}
 80014c2:	4770      	bx	lr
 80014c4:	20000300 	.word	0x20000300

080014c8 <control_set_cmd>:

void control_set_cmd(CM4_PAYLOAD_COMMAND_t cmd) {
 80014c8:	b084      	sub	sp, #16
 80014ca:	b4b0      	push	{r4, r5, r7}
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	f107 040c 	add.w	r4, r7, #12
 80014d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	control.command_payload = cmd;
 80014d6:	4b09      	ldr	r3, [pc, #36]	; (80014fc <control_set_cmd+0x34>)
 80014d8:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80014dc:	f107 050c 	add.w	r5, r7, #12
 80014e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014ec:	682b      	ldr	r3, [r5, #0]
 80014ee:	6023      	str	r3, [r4, #0]
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bcb0      	pop	{r4, r5, r7}
 80014f6:	b004      	add	sp, #16
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	20000300 	.word	0x20000300

08001500 <control_get_cmd>:

CM4_PAYLOAD_COMMAND_t control_get_cmd(void) {
 8001500:	b4b0      	push	{r4, r5, r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
	return control.command_payload;
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	4b08      	ldr	r3, [pc, #32]	; (800152c <control_get_cmd+0x2c>)
 800150c:	4615      	mov	r5, r2
 800150e:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8001512:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001514:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001516:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001518:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800151a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800151c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800151e:	6823      	ldr	r3, [r4, #0]
 8001520:	602b      	str	r3, [r5, #0]
}
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	bcb0      	pop	{r4, r5, r7}
 800152a:	4770      	bx	lr
 800152c:	20000300 	.word	0x20000300

08001530 <control_sched_should_run>:


static uint8_t control_sched_should_run(CONTROL_INST_t * control, CONTROL_SCHED_t num) {
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	460b      	mov	r3, r1
 800153a:	70fb      	strb	r3, [r7, #3]
	return control->sched == num;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001542:	78fa      	ldrb	r2, [r7, #3]
 8001544:	429a      	cmp	r2, r3
 8001546:	bf0c      	ite	eq
 8001548:	2301      	moveq	r3, #1
 800154a:	2300      	movne	r3, #0
 800154c:	b2db      	uxtb	r3, r3
}
 800154e:	4618      	mov	r0, r3
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr

0800155a <control_sched_done>:

static void control_sched_done(CONTROL_INST_t * control, CONTROL_SCHED_t num) {
 800155a:	b580      	push	{r7, lr}
 800155c:	b082      	sub	sp, #8
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
 8001562:	460b      	mov	r3, r1
 8001564:	70fb      	strb	r3, [r7, #3]
	if(control->sched == num) {
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800156c:	78fa      	ldrb	r2, [r7, #3]
 800156e:	429a      	cmp	r2, r3
 8001570:	d104      	bne.n	800157c <control_sched_done+0x22>
		control->sched = CONTROL_SCHED_NOTHING;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	} else {
		init_error(control);
	}
}
 800157a:	e002      	b.n	8001582 <control_sched_done+0x28>
		init_error(control);
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f7ff fec7 	bl	8001310 <init_error>
}
 8001582:	bf00      	nop
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
	...

0800158c <control_sched_set>:

static void control_sched_set(CONTROL_INST_t * control, CONTROL_SCHED_t num) {
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	460b      	mov	r3, r1
 8001596:	70fb      	strb	r3, [r7, #3]
	if(num == CONTROL_SCHED_ABORT) { //ABORT ALWAYS TAKES OVER
 8001598:	78fb      	ldrb	r3, [r7, #3]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d103      	bne.n	80015a6 <control_sched_set+0x1a>
		control->sched = num;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	78fa      	ldrb	r2, [r7, #3]
 80015a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	}
	if(control->sched == CONTROL_SCHED_NOTHING) {
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d11c      	bne.n	80015ea <control_sched_set+0x5e>
		for(uint8_t i = 0; i < SCHED_ALLOWED_WIDTH; i++) {
 80015b0:	2300      	movs	r3, #0
 80015b2:	73fb      	strb	r3, [r7, #15]
 80015b4:	e016      	b.n	80015e4 <control_sched_set+0x58>
			if(sched_allowed[control->state][i] == num) {
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	4618      	mov	r0, r3
 80015bc:	7bfa      	ldrb	r2, [r7, #15]
 80015be:	490d      	ldr	r1, [pc, #52]	; (80015f4 <control_sched_set+0x68>)
 80015c0:	4603      	mov	r3, r0
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	4403      	add	r3, r0
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	440b      	add	r3, r1
 80015ca:	4413      	add	r3, r2
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	78fa      	ldrb	r2, [r7, #3]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d104      	bne.n	80015de <control_sched_set+0x52>
				control->sched = num;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	78fa      	ldrb	r2, [r7, #3]
 80015d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				return;
 80015dc:	e005      	b.n	80015ea <control_sched_set+0x5e>
		for(uint8_t i = 0; i < SCHED_ALLOWED_WIDTH; i++) {
 80015de:	7bfb      	ldrb	r3, [r7, #15]
 80015e0:	3301      	adds	r3, #1
 80015e2:	73fb      	strb	r3, [r7, #15]
 80015e4:	7bfb      	ldrb	r3, [r7, #15]
 80015e6:	2b05      	cmp	r3, #5
 80015e8:	d9e5      	bls.n	80015b6 <control_sched_set+0x2a>
			}
		}
	}
}
 80015ea:	3714      	adds	r7, #20
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	2000000c 	.word	0x2000000c

080015f8 <util_encode_u8>:
static inline void util_encode_u8(uint8_t * data, uint8_t value) {
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	460b      	mov	r3, r1
 8001602:	70fb      	strb	r3, [r7, #3]
	data[0] = value;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	78fa      	ldrb	r2, [r7, #3]
 8001608:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	3301      	adds	r3, #1
 800160e:	2200      	movs	r2, #0
 8001610:	701a      	strb	r2, [r3, #0]
	data[2] = 0x00;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	3302      	adds	r3, #2
 8001616:	2200      	movs	r2, #0
 8001618:	701a      	strb	r2, [r3, #0]
	data[3] = 0x00;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	3303      	adds	r3, #3
 800161e:	2200      	movs	r2, #0
 8001620:	701a      	strb	r2, [r3, #0]
}
 8001622:	bf00      	nop
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <util_encode_u16>:
static inline void util_encode_u16(uint8_t * data, uint16_t value) {
 800162e:	b480      	push	{r7}
 8001630:	b083      	sub	sp, #12
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
 8001636:	460b      	mov	r3, r1
 8001638:	807b      	strh	r3, [r7, #2]
	data[0] = value;
 800163a:	887b      	ldrh	r3, [r7, #2]
 800163c:	b2da      	uxtb	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	701a      	strb	r2, [r3, #0]
	data[1] = value>>8;
 8001642:	887b      	ldrh	r3, [r7, #2]
 8001644:	0a1b      	lsrs	r3, r3, #8
 8001646:	b29a      	uxth	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3301      	adds	r3, #1
 800164c:	b2d2      	uxtb	r2, r2
 800164e:	701a      	strb	r2, [r3, #0]
	data[2] = 0x00;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3302      	adds	r3, #2
 8001654:	2200      	movs	r2, #0
 8001656:	701a      	strb	r2, [r3, #0]
	data[3] = 0x00;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3303      	adds	r3, #3
 800165c:	2200      	movs	r2, #0
 800165e:	701a      	strb	r2, [r3, #0]
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <util_encode_u32>:
static inline void util_encode_u32(uint8_t * data, uint32_t value) {
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
	data[0] = value;
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	b2da      	uxtb	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	701a      	strb	r2, [r3, #0]
	data[1] = value>>8;
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	0a1a      	lsrs	r2, r3, #8
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	3301      	adds	r3, #1
 8001686:	b2d2      	uxtb	r2, r2
 8001688:	701a      	strb	r2, [r3, #0]
	data[2] = value>>16;
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	0c1a      	lsrs	r2, r3, #16
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	3302      	adds	r3, #2
 8001692:	b2d2      	uxtb	r2, r2
 8001694:	701a      	strb	r2, [r3, #0]
	data[3] = value>>24;
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	0e1a      	lsrs	r2, r3, #24
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	3303      	adds	r3, #3
 800169e:	b2d2      	uxtb	r2, r2
 80016a0:	701a      	strb	r2, [r3, #0]
}
 80016a2:	bf00      	nop
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <util_encode_i8>:
static inline void util_encode_i8(uint8_t * data, int8_t value) {
 80016ae:	b480      	push	{r7}
 80016b0:	b083      	sub	sp, #12
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
 80016b6:	460b      	mov	r3, r1
 80016b8:	70fb      	strb	r3, [r7, #3]
	data[0] = value;
 80016ba:	78fa      	ldrb	r2, [r7, #3]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3301      	adds	r3, #1
 80016c4:	2200      	movs	r2, #0
 80016c6:	701a      	strb	r2, [r3, #0]
	data[2] = 0x00;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	3302      	adds	r3, #2
 80016cc:	2200      	movs	r2, #0
 80016ce:	701a      	strb	r2, [r3, #0]
	data[3] = 0x00;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3303      	adds	r3, #3
 80016d4:	2200      	movs	r2, #0
 80016d6:	701a      	strb	r2, [r3, #0]
}
 80016d8:	bf00      	nop
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <util_encode_i32>:
static inline void util_encode_i32(uint8_t * data, int32_t value) {
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
	data[0] = value;
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	b2da      	uxtb	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	701a      	strb	r2, [r3, #0]
	data[1] = value>>8;
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	121a      	asrs	r2, r3, #8
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	3301      	adds	r3, #1
 80016fe:	b2d2      	uxtb	r2, r2
 8001700:	701a      	strb	r2, [r3, #0]
	data[2] = value>>16;
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	141a      	asrs	r2, r3, #16
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	3302      	adds	r3, #2
 800170a:	b2d2      	uxtb	r2, r2
 800170c:	701a      	strb	r2, [r3, #0]
	data[3] = value>>24;
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	161a      	asrs	r2, r3, #24
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	3303      	adds	r3, #3
 8001716:	b2d2      	uxtb	r2, r2
 8001718:	701a      	strb	r2, [r3, #0]
}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr

08001726 <util_decode_u32>:
static inline uint32_t util_decode_u32(uint8_t * data) {
 8001726:	b480      	push	{r7}
 8001728:	b083      	sub	sp, #12
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
	return (uint32_t) data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	461a      	mov	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3301      	adds	r3, #1
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	021b      	lsls	r3, r3, #8
 800173c:	4313      	orrs	r3, r2
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	3202      	adds	r2, #2
 8001742:	7812      	ldrb	r2, [r2, #0]
 8001744:	0412      	lsls	r2, r2, #16
 8001746:	4313      	orrs	r3, r2
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	3203      	adds	r2, #3
 800174c:	7812      	ldrb	r2, [r2, #0]
 800174e:	0612      	lsls	r2, r2, #24
 8001750:	4313      	orrs	r3, r2
}
 8001752:	4618      	mov	r0, r3
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <util_decode_i32>:
static inline int32_t util_decode_i32(uint8_t * data) {
 800175e:	b480      	push	{r7}
 8001760:	b083      	sub	sp, #12
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
	return (int32_t) data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	461a      	mov	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	3301      	adds	r3, #1
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	021b      	lsls	r3, r3, #8
 8001774:	431a      	orrs	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	3302      	adds	r3, #2
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	041b      	lsls	r3, r3, #16
 800177e:	431a      	orrs	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	3303      	adds	r3, #3
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	061b      	lsls	r3, r3, #24
 8001788:	4313      	orrs	r3, r2
}
 800178a:	4618      	mov	r0, r3
 800178c:	370c      	adds	r7, #12
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
	...

08001798 <debug_decode_fcn>:
 *	DECLARATIONS
 **********************/


//Requires an instance of type debug
SERIAL_RET_t debug_decode_fcn(void * inst, uint8_t data) {
 8001798:	b590      	push	{r4, r7, lr}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	460b      	mov	r3, r1
 80017a2:	70fb      	strb	r3, [r7, #3]
	static uint8_t send_data[MSV2_MAX_DATA_LEN];
	static uint16_t length = 0;
	static uint16_t bin_length = 0;
	DEBUG_INST_t * debug = (DEBUG_INST_t *) inst;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	60fb      	str	r3, [r7, #12]
	MSV2_ERROR_t tmp = msv2_decode_fragment(&debug->msv2, data);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	3304      	adds	r3, #4
 80017ac:	78fa      	ldrb	r2, [r7, #3]
 80017ae:	4611      	mov	r1, r2
 80017b0:	4618      	mov	r0, r3
 80017b2:	f000 fcf3 	bl	800219c <msv2_decode_fragment>
 80017b6:	4603      	mov	r3, r0
 80017b8:	72fb      	strb	r3, [r7, #11]

	if(tmp == MSV2_SUCCESS) {
 80017ba:	7afb      	ldrb	r3, [r7, #11]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d15e      	bne.n	800187e <debug_decode_fcn+0xe6>
		if(debug->msv2.rx.opcode < debug_fcn_max) {
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	7a1b      	ldrb	r3, [r3, #8]
 80017c4:	b29a      	uxth	r2, r3
 80017c6:	4b30      	ldr	r3, [pc, #192]	; (8001888 <debug_decode_fcn+0xf0>)
 80017c8:	881b      	ldrh	r3, [r3, #0]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d22e      	bcs.n	800182c <debug_decode_fcn+0x94>

			debug_fcn[debug->msv2.rx.opcode](debug->msv2.rx.data, debug->msv2.rx.length, send_data, &length);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	7a1b      	ldrb	r3, [r3, #8]
 80017d2:	461a      	mov	r2, r3
 80017d4:	4b2d      	ldr	r3, [pc, #180]	; (800188c <debug_decode_fcn+0xf4>)
 80017d6:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f103 0012 	add.w	r0, r3, #18
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	89d9      	ldrh	r1, [r3, #14]
 80017e4:	4b2a      	ldr	r3, [pc, #168]	; (8001890 <debug_decode_fcn+0xf8>)
 80017e6:	4a2b      	ldr	r2, [pc, #172]	; (8001894 <debug_decode_fcn+0xfc>)
 80017e8:	47a0      	blx	r4
			//length is in words
			bin_length = msv2_create_frame(&debug->msv2, debug->msv2.rx.opcode, length/2, send_data);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	1d18      	adds	r0, r3, #4
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	7a19      	ldrb	r1, [r3, #8]
 80017f2:	4b27      	ldr	r3, [pc, #156]	; (8001890 <debug_decode_fcn+0xf8>)
 80017f4:	881b      	ldrh	r3, [r3, #0]
 80017f6:	085b      	lsrs	r3, r3, #1
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	b2da      	uxtb	r2, r3
 80017fc:	4b25      	ldr	r3, [pc, #148]	; (8001894 <debug_decode_fcn+0xfc>)
 80017fe:	f000 fbe7 	bl	8001fd0 <msv2_create_frame>
 8001802:	4603      	mov	r3, r0
 8001804:	461a      	mov	r2, r3
 8001806:	4b24      	ldr	r3, [pc, #144]	; (8001898 <debug_decode_fcn+0x100>)
 8001808:	801a      	strh	r2, [r3, #0]
			serial_send(&debug->ser, msv2_tx_data(&debug->msv2), bin_length);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	f503 5480 	add.w	r4, r3, #4096	; 0x1000
 8001810:	3418      	adds	r4, #24
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	3304      	adds	r3, #4
 8001816:	4618      	mov	r0, r3
 8001818:	f000 fdb4 	bl	8002384 <msv2_tx_data>
 800181c:	4601      	mov	r1, r0
 800181e:	4b1e      	ldr	r3, [pc, #120]	; (8001898 <debug_decode_fcn+0x100>)
 8001820:	881b      	ldrh	r3, [r3, #0]
 8001822:	461a      	mov	r2, r3
 8001824:	4620      	mov	r0, r4
 8001826:	f000 fed3 	bl	80025d0 <serial_send>
 800182a:	e028      	b.n	800187e <debug_decode_fcn+0xe6>
		} else {
			send_data[0] = CRC_ERROR_LO;
 800182c:	4b19      	ldr	r3, [pc, #100]	; (8001894 <debug_decode_fcn+0xfc>)
 800182e:	22be      	movs	r2, #190	; 0xbe
 8001830:	701a      	strb	r2, [r3, #0]
			send_data[1] = CRC_ERROR_HI;
 8001832:	4b18      	ldr	r3, [pc, #96]	; (8001894 <debug_decode_fcn+0xfc>)
 8001834:	22eb      	movs	r2, #235	; 0xeb
 8001836:	705a      	strb	r2, [r3, #1]
			length = 2;
 8001838:	4b15      	ldr	r3, [pc, #84]	; (8001890 <debug_decode_fcn+0xf8>)
 800183a:	2202      	movs	r2, #2
 800183c:	801a      	strh	r2, [r3, #0]
			bin_length = msv2_create_frame(&debug->msv2, debug->msv2.rx.opcode, length/2, send_data);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	1d18      	adds	r0, r3, #4
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	7a19      	ldrb	r1, [r3, #8]
 8001846:	4b12      	ldr	r3, [pc, #72]	; (8001890 <debug_decode_fcn+0xf8>)
 8001848:	881b      	ldrh	r3, [r3, #0]
 800184a:	085b      	lsrs	r3, r3, #1
 800184c:	b29b      	uxth	r3, r3
 800184e:	b2da      	uxtb	r2, r3
 8001850:	4b10      	ldr	r3, [pc, #64]	; (8001894 <debug_decode_fcn+0xfc>)
 8001852:	f000 fbbd 	bl	8001fd0 <msv2_create_frame>
 8001856:	4603      	mov	r3, r0
 8001858:	461a      	mov	r2, r3
 800185a:	4b0f      	ldr	r3, [pc, #60]	; (8001898 <debug_decode_fcn+0x100>)
 800185c:	801a      	strh	r2, [r3, #0]
			serial_send(&debug->ser, msv2_tx_data(&debug->msv2), bin_length);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	f503 5480 	add.w	r4, r3, #4096	; 0x1000
 8001864:	3418      	adds	r4, #24
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	3304      	adds	r3, #4
 800186a:	4618      	mov	r0, r3
 800186c:	f000 fd8a 	bl	8002384 <msv2_tx_data>
 8001870:	4601      	mov	r1, r0
 8001872:	4b09      	ldr	r3, [pc, #36]	; (8001898 <debug_decode_fcn+0x100>)
 8001874:	881b      	ldrh	r3, [r3, #0]
 8001876:	461a      	mov	r2, r3
 8001878:	4620      	mov	r0, r4
 800187a:	f000 fea9 	bl	80025d0 <serial_send>
		}
	}

	return tmp;
 800187e:	7afb      	ldrb	r3, [r7, #11]
}
 8001880:	4618      	mov	r0, r3
 8001882:	3714      	adds	r7, #20
 8001884:	46bd      	mov	sp, r7
 8001886:	bd90      	pop	{r4, r7, pc}
 8001888:	20000074 	.word	0x20000074
 800188c:	20000048 	.word	0x20000048
 8001890:	20001a30 	.word	0x20001a30
 8001894:	20001830 	.word	0x20001830
 8001898:	20001a32 	.word	0x20001a32

0800189c <debug_init>:

void debug_init(DEBUG_INST_t * debug) {
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
	static uint32_t id_counter = 0;
	msv2_init(&debug->msv2);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	3304      	adds	r3, #4
 80018a8:	4618      	mov	r0, r3
 80018aa:	f000 fb7d 	bl	8001fa8 <msv2_init>
	serial_init(&debug->ser, &DEBUG_UART, debug, debug_decode_fcn);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f503 5080 	add.w	r0, r3, #4096	; 0x1000
 80018b4:	3018      	adds	r0, #24
 80018b6:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <debug_init+0x3c>)
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	4908      	ldr	r1, [pc, #32]	; (80018dc <debug_init+0x40>)
 80018bc:	f000 fe48 	bl	8002550 <serial_init>
	debug->id = id_counter++;
 80018c0:	4b07      	ldr	r3, [pc, #28]	; (80018e0 <debug_init+0x44>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	1c5a      	adds	r2, r3, #1
 80018c6:	4906      	ldr	r1, [pc, #24]	; (80018e0 <debug_init+0x44>)
 80018c8:	600a      	str	r2, [r1, #0]
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	6013      	str	r3, [r2, #0]
}
 80018ce:	bf00      	nop
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	08001799 	.word	0x08001799
 80018dc:	20006d98 	.word	0x20006d98
 80018e0:	20001a34 	.word	0x20001a34

080018e4 <debug_get_status>:

static void debug_get_status(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b08c      	sub	sp, #48	; 0x30
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	607a      	str	r2, [r7, #4]
 80018ee:	603b      	str	r3, [r7, #0]
 80018f0:	460b      	mov	r3, r1
 80018f2:	817b      	strh	r3, [r7, #10]
	CONTROL_STATUS_t status = control_get_status();
 80018f4:	f107 0314 	add.w	r3, r7, #20
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff fd6f 	bl	80013dc <control_get_status>
	util_encode_u16(resp, status.state);
 80018fe:	7d3b      	ldrb	r3, [r7, #20]
 8001900:	b29b      	uxth	r3, r3
 8001902:	4619      	mov	r1, r3
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f7ff fe92 	bl	800162e <util_encode_u16>
	util_encode_u16(resp+2, 0); //padding
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	3302      	adds	r3, #2
 800190e:	2100      	movs	r1, #0
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff fe8c 	bl	800162e <util_encode_u16>
	util_encode_i32(resp+4, status.counter);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	3304      	adds	r3, #4
 800191a:	6a3a      	ldr	r2, [r7, #32]
 800191c:	4611      	mov	r1, r2
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff fee0 	bl	80016e4 <util_encode_i32>
	uint32_t memory = storage_get_used();
 8001924:	f000 ff82 	bl	800282c <storage_get_used>
 8001928:	62f8      	str	r0, [r7, #44]	; 0x2c
	util_encode_u32(resp+8, memory);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	3308      	adds	r3, #8
 800192e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff fe9b 	bl	800166c <util_encode_u32>
	util_encode_i32(resp+12, status.tvc_position);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	330c      	adds	r3, #12
 800193a:	69fa      	ldr	r2, [r7, #28]
 800193c:	4611      	mov	r1, r2
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff fed0 	bl	80016e4 <util_encode_i32>
	util_encode_u16(resp+16, status.tvc_psu_voltage);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	3310      	adds	r3, #16
 8001948:	8afa      	ldrh	r2, [r7, #22]
 800194a:	4611      	mov	r1, r2
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff fe6e 	bl	800162e <util_encode_u16>
	util_encode_u8(resp+18, status.tvc_error);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	3312      	adds	r3, #18
 8001956:	7e7a      	ldrb	r2, [r7, #25]
 8001958:	4611      	mov	r1, r2
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff fe4c 	bl	80015f8 <util_encode_u8>
	util_encode_i8(resp+19, status.tvc_temperature);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3313      	adds	r3, #19
 8001964:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8001968:	4611      	mov	r1, r2
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff fe9f 	bl	80016ae <util_encode_i8>
	*resp_len = 20;
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	2214      	movs	r2, #20
 8001974:	801a      	strh	r2, [r3, #0]
}
 8001976:	bf00      	nop
 8001978:	3730      	adds	r7, #48	; 0x30
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <debug_boot>:

static void debug_boot(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 800197e:	b580      	push	{r7, lr}
 8001980:	b084      	sub	sp, #16
 8001982:	af00      	add	r7, sp, #0
 8001984:	60f8      	str	r0, [r7, #12]
 8001986:	607a      	str	r2, [r7, #4]
 8001988:	603b      	str	r3, [r7, #0]
 800198a:	460b      	mov	r3, r1
 800198c:	817b      	strh	r3, [r7, #10]
	control_boot();
 800198e:	f7ff fcfd 	bl	800138c <control_boot>
	resp[0] = OK_LO;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	22c5      	movs	r2, #197	; 0xc5
 8001996:	701a      	strb	r2, [r3, #0]
	resp[1] = OK_HI;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3301      	adds	r3, #1
 800199c:	225c      	movs	r2, #92	; 0x5c
 800199e:	701a      	strb	r2, [r3, #0]
	*resp_len = 2;
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	2202      	movs	r2, #2
 80019a4:	801a      	strh	r2, [r3, #0]
}
 80019a6:	bf00      	nop
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <debug_shutdown>:


static void debug_shutdown(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b084      	sub	sp, #16
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	60f8      	str	r0, [r7, #12]
 80019b6:	607a      	str	r2, [r7, #4]
 80019b8:	603b      	str	r3, [r7, #0]
 80019ba:	460b      	mov	r3, r1
 80019bc:	817b      	strh	r3, [r7, #10]
	control_shutdown();
 80019be:	f7ff fcef 	bl	80013a0 <control_shutdown>
	resp[0] = OK_LO;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	22c5      	movs	r2, #197	; 0xc5
 80019c6:	701a      	strb	r2, [r3, #0]
	resp[1] = OK_HI;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3301      	adds	r3, #1
 80019cc:	225c      	movs	r2, #92	; 0x5c
 80019ce:	701a      	strb	r2, [r3, #0]
	*resp_len = 2;
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	2202      	movs	r2, #2
 80019d4:	801a      	strh	r2, [r3, #0]
}
 80019d6:	bf00      	nop
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <debug_download>:

static void debug_download(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 80019de:	b580      	push	{r7, lr}
 80019e0:	b086      	sub	sp, #24
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	60f8      	str	r0, [r7, #12]
 80019e6:	607a      	str	r2, [r7, #4]
 80019e8:	603b      	str	r3, [r7, #0]
 80019ea:	460b      	mov	r3, r1
 80019ec:	817b      	strh	r3, [r7, #10]
	//downloads 5 samples at a certain location
	if(data_len == DOWNLOAD_LEN) {
 80019ee:	897b      	ldrh	r3, [r7, #10]
 80019f0:	2b04      	cmp	r3, #4
 80019f2:	d11b      	bne.n	8001a2c <debug_download+0x4e>
		uint32_t location = util_decode_u32(data);
 80019f4:	68f8      	ldr	r0, [r7, #12]
 80019f6:	f7ff fe96 	bl	8001726 <util_decode_u32>
 80019fa:	6138      	str	r0, [r7, #16]
		for(uint8_t i = 0; i < 5; i++) {
 80019fc:	2300      	movs	r3, #0
 80019fe:	75fb      	strb	r3, [r7, #23]
 8001a00:	e00e      	b.n	8001a20 <debug_download+0x42>
			storage_get_sample(location+i, resp+i*32);
 8001a02:	7dfa      	ldrb	r2, [r7, #23]
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	441a      	add	r2, r3
 8001a08:	7dfb      	ldrb	r3, [r7, #23]
 8001a0a:	015b      	lsls	r3, r3, #5
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	440b      	add	r3, r1
 8001a12:	4619      	mov	r1, r3
 8001a14:	4610      	mov	r0, r2
 8001a16:	f000 ff15 	bl	8002844 <storage_get_sample>
		for(uint8_t i = 0; i < 5; i++) {
 8001a1a:	7dfb      	ldrb	r3, [r7, #23]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	75fb      	strb	r3, [r7, #23]
 8001a20:	7dfb      	ldrb	r3, [r7, #23]
 8001a22:	2b04      	cmp	r3, #4
 8001a24:	d9ed      	bls.n	8001a02 <debug_download+0x24>
		}
		*resp_len = 32*5;
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	22a0      	movs	r2, #160	; 0xa0
 8001a2a:	801a      	strh	r2, [r3, #0]
	}
}
 8001a2c:	bf00      	nop
 8001a2e:	3718      	adds	r7, #24
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <debug_tvc_move>:

static void debug_tvc_move(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	607a      	str	r2, [r7, #4]
 8001a3e:	603b      	str	r3, [r7, #0]
 8001a40:	460b      	mov	r3, r1
 8001a42:	817b      	strh	r3, [r7, #10]
	if(data_len == TVC_MOVE_LEN) {
 8001a44:	897b      	ldrh	r3, [r7, #10]
 8001a46:	2b04      	cmp	r3, #4
 8001a48:	d111      	bne.n	8001a6e <debug_tvc_move+0x3a>
		int32_t target = util_decode_i32(data);
 8001a4a:	68f8      	ldr	r0, [r7, #12]
 8001a4c:	f7ff fe87 	bl	800175e <util_decode_i32>
 8001a50:	6178      	str	r0, [r7, #20]
		control_move_tvc(target);
 8001a52:	6978      	ldr	r0, [r7, #20]
 8001a54:	f7ff fc88 	bl	8001368 <control_move_tvc>
		resp[0] = OK_LO;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	22c5      	movs	r2, #197	; 0xc5
 8001a5c:	701a      	strb	r2, [r3, #0]
		resp[1] = OK_HI;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	3301      	adds	r3, #1
 8001a62:	225c      	movs	r2, #92	; 0x5c
 8001a64:	701a      	strb	r2, [r3, #0]
		*resp_len = 2;
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	2202      	movs	r2, #2
 8001a6a:	801a      	strh	r2, [r3, #0]
	} else {
		resp[0] = ERROR_LO;
		resp[1] = ERROR_HI;
		*resp_len = 2;
	}
}
 8001a6c:	e009      	b.n	8001a82 <debug_tvc_move+0x4e>
		resp[0] = ERROR_LO;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	22ce      	movs	r2, #206	; 0xce
 8001a72:	701a      	strb	r2, [r3, #0]
		resp[1] = ERROR_HI;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3301      	adds	r3, #1
 8001a78:	22ec      	movs	r2, #236	; 0xec
 8001a7a:	701a      	strb	r2, [r3, #0]
		*resp_len = 2;
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	2202      	movs	r2, #2
 8001a80:	801a      	strh	r2, [r3, #0]
}
 8001a82:	bf00      	nop
 8001a84:	3718      	adds	r7, #24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <debug_abort>:

static void debug_abort(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b084      	sub	sp, #16
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	60f8      	str	r0, [r7, #12]
 8001a92:	607a      	str	r2, [r7, #4]
 8001a94:	603b      	str	r3, [r7, #0]
 8001a96:	460b      	mov	r3, r1
 8001a98:	817b      	strh	r3, [r7, #10]
	control_abort();
 8001a9a:	f7ff fc8b 	bl	80013b4 <control_abort>
	resp[0] = OK_LO;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	22c5      	movs	r2, #197	; 0xc5
 8001aa2:	701a      	strb	r2, [r3, #0]
	resp[1] = OK_HI;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	225c      	movs	r2, #92	; 0x5c
 8001aaa:	701a      	strb	r2, [r3, #0]
	*resp_len = 2;
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	2202      	movs	r2, #2
 8001ab0:	801a      	strh	r2, [r3, #0]
}
 8001ab2:	bf00      	nop
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <debug_recover>:

static void debug_recover(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b084      	sub	sp, #16
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	60f8      	str	r0, [r7, #12]
 8001ac2:	607a      	str	r2, [r7, #4]
 8001ac4:	603b      	str	r3, [r7, #0]
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	817b      	strh	r3, [r7, #10]
	control_recover();
 8001aca:	f7ff fc7d 	bl	80013c8 <control_recover>
	resp[0] = OK_LO;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	22c5      	movs	r2, #197	; 0xc5
 8001ad2:	701a      	strb	r2, [r3, #0]
	resp[1] = OK_HI;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	225c      	movs	r2, #92	; 0x5c
 8001ada:	701a      	strb	r2, [r3, #0]
	*resp_len = 2;
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	2202      	movs	r2, #2
 8001ae0:	801a      	strh	r2, [r3, #0]
}
 8001ae2:	bf00      	nop
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <debug_transaction>:

static void debug_transaction(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 8001aea:	b5b0      	push	{r4, r5, r7, lr}
 8001aec:	b0aa      	sub	sp, #168	; 0xa8
 8001aee:	af0a      	add	r7, sp, #40	; 0x28
 8001af0:	60f8      	str	r0, [r7, #12]
 8001af2:	607a      	str	r2, [r7, #4]
 8001af4:	603b      	str	r3, [r7, #0]
 8001af6:	460b      	mov	r3, r1
 8001af8:	817b      	strh	r3, [r7, #10]
	if(data_len == TRANSACTION_SENS_LEN) {
 8001afa:	897b      	ldrh	r3, [r7, #10]
 8001afc:	2b20      	cmp	r3, #32
 8001afe:	f040 80a9 	bne.w	8001c54 <debug_transaction+0x16a>
		CM4_PAYLOAD_SENSOR_t sens_data = {0};
 8001b02:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b06:	2238      	movs	r2, #56	; 0x38
 8001b08:	2100      	movs	r1, #0
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f009 fcf6 	bl	800b4fc <memset>
		sens_data.acc_x = util_decode_i32(data);
 8001b10:	68f8      	ldr	r0, [r7, #12]
 8001b12:	f7ff fe24 	bl	800175e <util_decode_i32>
 8001b16:	4603      	mov	r3, r0
 8001b18:	64fb      	str	r3, [r7, #76]	; 0x4c
		sens_data.acc_y = util_decode_i32(data+4);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	3304      	adds	r3, #4
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff fe1d 	bl	800175e <util_decode_i32>
 8001b24:	4603      	mov	r3, r0
 8001b26:	653b      	str	r3, [r7, #80]	; 0x50
		sens_data.acc_z = util_decode_i32(data+8);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	3308      	adds	r3, #8
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff fe16 	bl	800175e <util_decode_i32>
 8001b32:	4603      	mov	r3, r0
 8001b34:	657b      	str	r3, [r7, #84]	; 0x54

		sens_data.gyro_x = util_decode_i32(data+12);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	330c      	adds	r3, #12
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff fe0f 	bl	800175e <util_decode_i32>
 8001b40:	4603      	mov	r3, r0
 8001b42:	65bb      	str	r3, [r7, #88]	; 0x58
		sens_data.gyro_y = util_decode_i32(data+16);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	3310      	adds	r3, #16
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff fe08 	bl	800175e <util_decode_i32>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	65fb      	str	r3, [r7, #92]	; 0x5c
		sens_data.gyro_z = util_decode_i32(data+20);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	3314      	adds	r3, #20
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff fe01 	bl	800175e <util_decode_i32>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	663b      	str	r3, [r7, #96]	; 0x60

		sens_data.baro = util_decode_i32(data+24);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	3318      	adds	r3, #24
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff fdfa 	bl	800175e <util_decode_i32>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	667b      	str	r3, [r7, #100]	; 0x64
		sens_data.cc_pressure = util_decode_i32(data+28);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	331c      	adds	r3, #28
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff fdf3 	bl	800175e <util_decode_i32>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	66fb      	str	r3, [r7, #108]	; 0x6c

		control_set_sens(sens_data);
 8001b7c:	466d      	mov	r5, sp
 8001b7e:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001b82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b8a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b8e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b92:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b98:	f7ff fc5e 	bl	8001458 <control_set_sens>

		CM4_PAYLOAD_COMMAND_t cmd_data = control_get_cmd();
 8001b9c:	f107 0314 	add.w	r3, r7, #20
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff fcad 	bl	8001500 <control_get_cmd>

		util_encode_i32(resp, cmd_data.thrust);
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	4619      	mov	r1, r3
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7ff fd9a 	bl	80016e4 <util_encode_i32>
		util_encode_i32(resp+4, cmd_data.dynamixel[0]);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3304      	adds	r3, #4
 8001bb4:	69fa      	ldr	r2, [r7, #28]
 8001bb6:	4611      	mov	r1, r2
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff fd93 	bl	80016e4 <util_encode_i32>
		util_encode_i32(resp+8, cmd_data.dynamixel[1]);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	3308      	adds	r3, #8
 8001bc2:	6a3a      	ldr	r2, [r7, #32]
 8001bc4:	4611      	mov	r1, r2
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff fd8c 	bl	80016e4 <util_encode_i32>
		util_encode_i32(resp+12, cmd_data.dynamixel[2]);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	330c      	adds	r3, #12
 8001bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bd2:	4611      	mov	r1, r2
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff fd85 	bl	80016e4 <util_encode_i32>
		util_encode_i32(resp+16, cmd_data.dynamixel[3]);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	3310      	adds	r3, #16
 8001bde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001be0:	4611      	mov	r1, r2
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff fd7e 	bl	80016e4 <util_encode_i32>

		util_encode_i32(resp+20, cmd_data.position[0]);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	3314      	adds	r3, #20
 8001bec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bee:	4611      	mov	r1, r2
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff fd77 	bl	80016e4 <util_encode_i32>
		util_encode_i32(resp+24, cmd_data.position[1]);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	3318      	adds	r3, #24
 8001bfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001bfc:	4611      	mov	r1, r2
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff fd70 	bl	80016e4 <util_encode_i32>
		util_encode_i32(resp+28, cmd_data.position[2]);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	331c      	adds	r3, #28
 8001c08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c0a:	4611      	mov	r1, r2
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff fd69 	bl	80016e4 <util_encode_i32>

		util_encode_i32(resp+32, cmd_data.speed[0]);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	3320      	adds	r3, #32
 8001c16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c18:	4611      	mov	r1, r2
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff fd62 	bl	80016e4 <util_encode_i32>
		util_encode_i32(resp+36, cmd_data.speed[1]);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3324      	adds	r3, #36	; 0x24
 8001c24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c26:	4611      	mov	r1, r2
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff fd5b 	bl	80016e4 <util_encode_i32>
		util_encode_i32(resp+40, cmd_data.speed[2]);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	3328      	adds	r3, #40	; 0x28
 8001c32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001c34:	4611      	mov	r1, r2
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff fd54 	bl	80016e4 <util_encode_i32>

		util_encode_i32(resp+44, cmd_data.state);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	332c      	adds	r3, #44	; 0x2c
 8001c40:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8001c44:	4611      	mov	r1, r2
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff fd4c 	bl	80016e4 <util_encode_i32>

		*resp_len = TRANSACTION_CMD_LEN;
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	222e      	movs	r2, #46	; 0x2e
 8001c50:	801a      	strh	r2, [r3, #0]
	} else {
		resp[0] = ERROR_LO;
		resp[1] = ERROR_HI;
		*resp_len = 2;
	}
}
 8001c52:	e009      	b.n	8001c68 <debug_transaction+0x17e>
		resp[0] = ERROR_LO;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	22ce      	movs	r2, #206	; 0xce
 8001c58:	701a      	strb	r2, [r3, #0]
		resp[1] = ERROR_HI;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	22ec      	movs	r2, #236	; 0xec
 8001c60:	701a      	strb	r2, [r3, #0]
		*resp_len = 2;
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	2202      	movs	r2, #2
 8001c66:	801a      	strh	r2, [r3, #0]
}
 8001c68:	bf00      	nop
 8001c6a:	3780      	adds	r7, #128	; 0x80
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bdb0      	pop	{r4, r5, r7, pc}

08001c70 <debug_sensor_write>:

static void debug_sensor_write(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 8001c70:	b5b0      	push	{r4, r5, r7, lr}
 8001c72:	b09c      	sub	sp, #112	; 0x70
 8001c74:	af0a      	add	r7, sp, #40	; 0x28
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	607a      	str	r2, [r7, #4]
 8001c7a:	603b      	str	r3, [r7, #0]
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	817b      	strh	r3, [r7, #10]
	if(data_len == TRANSACTION_SENS_LEN) {
 8001c80:	897b      	ldrh	r3, [r7, #10]
 8001c82:	2b20      	cmp	r3, #32
 8001c84:	d150      	bne.n	8001d28 <debug_sensor_write+0xb8>
		CM4_PAYLOAD_SENSOR_t sens_data = {0};
 8001c86:	f107 0310 	add.w	r3, r7, #16
 8001c8a:	2238      	movs	r2, #56	; 0x38
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f009 fc34 	bl	800b4fc <memset>
		sens_data.acc_x = util_decode_i32(data);
 8001c94:	68f8      	ldr	r0, [r7, #12]
 8001c96:	f7ff fd62 	bl	800175e <util_decode_i32>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	617b      	str	r3, [r7, #20]
		sens_data.acc_y = util_decode_i32(data+4);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	3304      	adds	r3, #4
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff fd5b 	bl	800175e <util_decode_i32>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	61bb      	str	r3, [r7, #24]
		sens_data.acc_z = util_decode_i32(data+8);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	3308      	adds	r3, #8
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff fd54 	bl	800175e <util_decode_i32>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	61fb      	str	r3, [r7, #28]

		sens_data.gyro_x = util_decode_i32(data+12);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	330c      	adds	r3, #12
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff fd4d 	bl	800175e <util_decode_i32>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	623b      	str	r3, [r7, #32]
		sens_data.gyro_y = util_decode_i32(data+16);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	3310      	adds	r3, #16
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff fd46 	bl	800175e <util_decode_i32>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	627b      	str	r3, [r7, #36]	; 0x24
		sens_data.gyro_z = util_decode_i32(data+20);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	3314      	adds	r3, #20
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff fd3f 	bl	800175e <util_decode_i32>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	62bb      	str	r3, [r7, #40]	; 0x28

		sens_data.baro = util_decode_i32(data+24);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	3318      	adds	r3, #24
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff fd38 	bl	800175e <util_decode_i32>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
		sens_data.cc_pressure = util_decode_i32(data+28);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	331c      	adds	r3, #28
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff fd31 	bl	800175e <util_decode_i32>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	637b      	str	r3, [r7, #52]	; 0x34

		control_set_sens(sens_data);
 8001d00:	466d      	mov	r5, sp
 8001d02:	f107 0420 	add.w	r4, r7, #32
 8001d06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d0e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d12:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d16:	f107 0310 	add.w	r3, r7, #16
 8001d1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d1c:	f7ff fb9c 	bl	8001458 <control_set_sens>


		*resp_len = 2;
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	2202      	movs	r2, #2
 8001d24:	801a      	strh	r2, [r3, #0]
	} else {
		resp[0] = ERROR_LO;
		resp[1] = ERROR_HI;
		*resp_len = 2;
	}
}
 8001d26:	e009      	b.n	8001d3c <debug_sensor_write+0xcc>
		resp[0] = ERROR_LO;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	22ce      	movs	r2, #206	; 0xce
 8001d2c:	701a      	strb	r2, [r3, #0]
		resp[1] = ERROR_HI;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	3301      	adds	r3, #1
 8001d32:	22ec      	movs	r2, #236	; 0xec
 8001d34:	701a      	strb	r2, [r3, #0]
		*resp_len = 2;
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	2202      	movs	r2, #2
 8001d3a:	801a      	strh	r2, [r3, #0]
}
 8001d3c:	bf00      	nop
 8001d3e:	3748      	adds	r7, #72	; 0x48
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bdb0      	pop	{r4, r5, r7, pc}

08001d44 <debug_command_read>:

static void debug_command_read(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b092      	sub	sp, #72	; 0x48
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	607a      	str	r2, [r7, #4]
 8001d4e:	603b      	str	r3, [r7, #0]
 8001d50:	460b      	mov	r3, r1
 8001d52:	817b      	strh	r3, [r7, #10]

	CM4_PAYLOAD_COMMAND_t cmd_data = control_get_cmd();
 8001d54:	f107 0314 	add.w	r3, r7, #20
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff fbd1 	bl	8001500 <control_get_cmd>

	util_encode_i32(resp, cmd_data.thrust);
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	4619      	mov	r1, r3
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f7ff fcbe 	bl	80016e4 <util_encode_i32>
	util_encode_i32(resp+4, cmd_data.dynamixel[0]);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	3304      	adds	r3, #4
 8001d6c:	69fa      	ldr	r2, [r7, #28]
 8001d6e:	4611      	mov	r1, r2
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff fcb7 	bl	80016e4 <util_encode_i32>
	util_encode_i32(resp+8, cmd_data.dynamixel[1]);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	3308      	adds	r3, #8
 8001d7a:	6a3a      	ldr	r2, [r7, #32]
 8001d7c:	4611      	mov	r1, r2
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff fcb0 	bl	80016e4 <util_encode_i32>
	util_encode_i32(resp+12, cmd_data.dynamixel[2]);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	330c      	adds	r3, #12
 8001d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d8a:	4611      	mov	r1, r2
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff fca9 	bl	80016e4 <util_encode_i32>
	util_encode_i32(resp+16, cmd_data.dynamixel[3]);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	3310      	adds	r3, #16
 8001d96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d98:	4611      	mov	r1, r2
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff fca2 	bl	80016e4 <util_encode_i32>

	util_encode_i32(resp+20, cmd_data.position[0]);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3314      	adds	r3, #20
 8001da4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001da6:	4611      	mov	r1, r2
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff fc9b 	bl	80016e4 <util_encode_i32>
	util_encode_i32(resp+24, cmd_data.position[1]);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	3318      	adds	r3, #24
 8001db2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001db4:	4611      	mov	r1, r2
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff fc94 	bl	80016e4 <util_encode_i32>
	util_encode_i32(resp+28, cmd_data.position[2]);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	331c      	adds	r3, #28
 8001dc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001dc2:	4611      	mov	r1, r2
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff fc8d 	bl	80016e4 <util_encode_i32>

	util_encode_i32(resp+32, cmd_data.speed[0]);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	3320      	adds	r3, #32
 8001dce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001dd0:	4611      	mov	r1, r2
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff fc86 	bl	80016e4 <util_encode_i32>
	util_encode_i32(resp+36, cmd_data.speed[1]);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3324      	adds	r3, #36	; 0x24
 8001ddc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001dde:	4611      	mov	r1, r2
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff fc7f 	bl	80016e4 <util_encode_i32>
	util_encode_i32(resp+40, cmd_data.speed[2]);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	3328      	adds	r3, #40	; 0x28
 8001dea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001dec:	4611      	mov	r1, r2
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff fc78 	bl	80016e4 <util_encode_i32>

	util_encode_i32(resp+44, cmd_data.state);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	332c      	adds	r3, #44	; 0x2c
 8001df8:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8001dfc:	4611      	mov	r1, r2
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff fc70 	bl	80016e4 <util_encode_i32>

	*resp_len = TRANSACTION_CMD_LEN;
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	222e      	movs	r2, #46	; 0x2e
 8001e08:	801a      	strh	r2, [r3, #0]

}
 8001e0a:	bf00      	nop
 8001e0c:	3748      	adds	r7, #72	; 0x48
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <debug_sensor_read>:

static void debug_sensor_read(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b092      	sub	sp, #72	; 0x48
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	60f8      	str	r0, [r7, #12]
 8001e1a:	607a      	str	r2, [r7, #4]
 8001e1c:	603b      	str	r3, [r7, #0]
 8001e1e:	460b      	mov	r3, r1
 8001e20:	817b      	strh	r3, [r7, #10]

	CM4_PAYLOAD_SENSOR_t sens_data = control_get_sens();
 8001e22:	f107 0310 	add.w	r3, r7, #16
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff fb34 	bl	8001494 <control_get_sens>

	util_encode_i32(resp, sens_data.acc_x);
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	4619      	mov	r1, r3
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f7ff fc57 	bl	80016e4 <util_encode_i32>
	util_encode_i32(resp+4, sens_data.acc_y);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	3304      	adds	r3, #4
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	4611      	mov	r1, r2
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff fc50 	bl	80016e4 <util_encode_i32>
	util_encode_i32(resp+8, sens_data.acc_z);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3308      	adds	r3, #8
 8001e48:	69fa      	ldr	r2, [r7, #28]
 8001e4a:	4611      	mov	r1, r2
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff fc49 	bl	80016e4 <util_encode_i32>

	util_encode_i32(resp+12, sens_data.gyro_x);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	330c      	adds	r3, #12
 8001e56:	6a3a      	ldr	r2, [r7, #32]
 8001e58:	4611      	mov	r1, r2
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff fc42 	bl	80016e4 <util_encode_i32>
	util_encode_i32(resp+16, sens_data.gyro_y);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3310      	adds	r3, #16
 8001e64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e66:	4611      	mov	r1, r2
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff fc3b 	bl	80016e4 <util_encode_i32>
	util_encode_i32(resp+20, sens_data.gyro_z);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	3314      	adds	r3, #20
 8001e72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e74:	4611      	mov	r1, r2
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff fc34 	bl	80016e4 <util_encode_i32>

	util_encode_i32(resp+24, sens_data.baro);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3318      	adds	r3, #24
 8001e80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e82:	4611      	mov	r1, r2
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff fc2d 	bl	80016e4 <util_encode_i32>
	util_encode_i32(resp+28, sens_data.cc_pressure);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	331c      	adds	r3, #28
 8001e8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e90:	4611      	mov	r1, r2
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff fc26 	bl	80016e4 <util_encode_i32>

	*resp_len = TRANSACTION_SENS_LEN;
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	2220      	movs	r2, #32
 8001e9c:	801a      	strh	r2, [r3, #0]

}
 8001e9e:	bf00      	nop
 8001ea0:	3748      	adds	r7, #72	; 0x48
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
	...

08001ea8 <led_init>:

/**********************
 *	DECLARATIONS
 **********************/

void led_init(void) {
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
	LED_TIM.Instance->ARR = LED_MAX;
 8001eac:	4b0f      	ldr	r3, [pc, #60]	; (8001eec <led_init+0x44>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001eb4:	62da      	str	r2, [r3, #44]	; 0x2c
	LED_TIM.Instance->CCR1 = 0;
 8001eb6:	4b0d      	ldr	r3, [pc, #52]	; (8001eec <led_init+0x44>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	635a      	str	r2, [r3, #52]	; 0x34
	LED_TIM.Instance->CCR2 = 0;
 8001ebe:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <led_init+0x44>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	639a      	str	r2, [r3, #56]	; 0x38
	LED_TIM.Instance->CCR3 = 0;
 8001ec6:	4b09      	ldr	r3, [pc, #36]	; (8001eec <led_init+0x44>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIMEx_PWMN_Start(&LED_TIM, TIM_CHANNEL_1);
 8001ece:	2100      	movs	r1, #0
 8001ed0:	4806      	ldr	r0, [pc, #24]	; (8001eec <led_init+0x44>)
 8001ed2:	f005 fefd 	bl	8007cd0 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&LED_TIM, TIM_CHANNEL_2);
 8001ed6:	2104      	movs	r1, #4
 8001ed8:	4804      	ldr	r0, [pc, #16]	; (8001eec <led_init+0x44>)
 8001eda:	f005 fef9 	bl	8007cd0 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&LED_TIM, TIM_CHANNEL_3);
 8001ede:	2108      	movs	r1, #8
 8001ee0:	4802      	ldr	r0, [pc, #8]	; (8001eec <led_init+0x44>)
 8001ee2:	f005 fef5 	bl	8007cd0 <HAL_TIMEx_PWMN_Start>
}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	20006bb8 	.word	0x20006bb8

08001ef0 <led_set_color>:

void led_set_color(uint8_t r, uint8_t g, uint8_t b) {
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	71fb      	strb	r3, [r7, #7]
 8001efa:	460b      	mov	r3, r1
 8001efc:	71bb      	strb	r3, [r7, #6]
 8001efe:	4613      	mov	r3, r2
 8001f00:	717b      	strb	r3, [r7, #5]
	LED_TIM.Instance->CCR1 = r;
 8001f02:	4b09      	ldr	r3, [pc, #36]	; (8001f28 <led_set_color+0x38>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	79fa      	ldrb	r2, [r7, #7]
 8001f08:	635a      	str	r2, [r3, #52]	; 0x34
	LED_TIM.Instance->CCR2 = g;
 8001f0a:	4b07      	ldr	r3, [pc, #28]	; (8001f28 <led_set_color+0x38>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	79ba      	ldrb	r2, [r7, #6]
 8001f10:	639a      	str	r2, [r3, #56]	; 0x38
	LED_TIM.Instance->CCR3 = b;
 8001f12:	4b05      	ldr	r3, [pc, #20]	; (8001f28 <led_set_color+0x38>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	797a      	ldrb	r2, [r7, #5]
 8001f18:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001f1a:	bf00      	nop
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	20006bb8 	.word	0x20006bb8

08001f2c <calc_field_CRC>:

/**********************
 *	DECLARATIONS
 **********************/

uint16_t calc_field_CRC(uint16_t *p_data_array, uint16_t length) {
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	460b      	mov	r3, r1
 8001f36:	807b      	strh	r3, [r7, #2]
	uint16_t shifter, c;
	uint16_t carry;
	uint16_t crc = 0;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	81bb      	strh	r3, [r7, #12]
	while (length--) {
 8001f3c:	e028      	b.n	8001f90 <calc_field_CRC+0x64>
		shifter = 0x8000;
 8001f3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f42:	81fb      	strh	r3, [r7, #14]
		c = *p_data_array++;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	1c9a      	adds	r2, r3, #2
 8001f48:	607a      	str	r2, [r7, #4]
 8001f4a:	881b      	ldrh	r3, [r3, #0]
 8001f4c:	817b      	strh	r3, [r7, #10]
		do {
			carry = crc & 0x8000;
 8001f4e:	89bb      	ldrh	r3, [r7, #12]
 8001f50:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001f54:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001f58:	813b      	strh	r3, [r7, #8]
			crc <<= 1;
 8001f5a:	89bb      	ldrh	r3, [r7, #12]
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	81bb      	strh	r3, [r7, #12]
			if (c & shifter) crc++;
 8001f60:	897a      	ldrh	r2, [r7, #10]
 8001f62:	89fb      	ldrh	r3, [r7, #14]
 8001f64:	4013      	ands	r3, r2
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d002      	beq.n	8001f72 <calc_field_CRC+0x46>
 8001f6c:	89bb      	ldrh	r3, [r7, #12]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	81bb      	strh	r3, [r7, #12]
			if (carry) crc ^= 0x1021;
 8001f72:	893b      	ldrh	r3, [r7, #8]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d005      	beq.n	8001f84 <calc_field_CRC+0x58>
 8001f78:	89bb      	ldrh	r3, [r7, #12]
 8001f7a:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8001f7e:	f083 0301 	eor.w	r3, r3, #1
 8001f82:	81bb      	strh	r3, [r7, #12]
			shifter >>= 1;
 8001f84:	89fb      	ldrh	r3, [r7, #14]
 8001f86:	085b      	lsrs	r3, r3, #1
 8001f88:	81fb      	strh	r3, [r7, #14]

		} while (shifter);
 8001f8a:	89fb      	ldrh	r3, [r7, #14]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d1de      	bne.n	8001f4e <calc_field_CRC+0x22>
	while (length--) {
 8001f90:	887b      	ldrh	r3, [r7, #2]
 8001f92:	1e5a      	subs	r2, r3, #1
 8001f94:	807a      	strh	r2, [r7, #2]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1d1      	bne.n	8001f3e <calc_field_CRC+0x12>

	}
	return crc;
 8001f9a:	89bb      	ldrh	r3, [r7, #12]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3714      	adds	r7, #20
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <msv2_init>:

void msv2_init(MSV2_INST_t * msv2) {
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
	static uint32_t id_counter = 0;
	msv2->id = id_counter++;
 8001fb0:	4b06      	ldr	r3, [pc, #24]	; (8001fcc <msv2_init+0x24>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	1c5a      	adds	r2, r3, #1
 8001fb6:	4905      	ldr	r1, [pc, #20]	; (8001fcc <msv2_init+0x24>)
 8001fb8:	600a      	str	r2, [r1, #0]
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	6013      	str	r3, [r2, #0]
}
 8001fbe:	bf00      	nop
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	20001a38 	.word	0x20001a38

08001fd0 <msv2_create_frame>:

uint16_t msv2_create_frame(MSV2_INST_t * msv2, uint8_t opcode, uint8_t data_len, uint8_t * data) {
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	607b      	str	r3, [r7, #4]
 8001fda:	460b      	mov	r3, r1
 8001fdc:	72fb      	strb	r3, [r7, #11]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	72bb      	strb	r3, [r7, #10]
	uint16_t array_len = data_len+2; //we add 1 for the opcode and len fields and 1 for the crc
 8001fe2:	7abb      	ldrb	r3, [r7, #10]
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	3302      	adds	r3, #2
 8001fe8:	827b      	strh	r3, [r7, #18]
	msv2->tx.data_len = data_len;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	7aba      	ldrb	r2, [r7, #10]
 8001fee:	f883 280f 	strb.w	r2, [r3, #2063]	; 0x80f
	msv2->tx.opcode = opcode;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	7afa      	ldrb	r2, [r7, #11]
 8001ff6:	f883 280e 	strb.w	r2, [r3, #2062]	; 0x80e
	msv2->tx.data[0] = DLE;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2290      	movs	r2, #144	; 0x90
 8001ffe:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
	msv2->tx.data[1] = STX;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2202      	movs	r2, #2
 8002006:	f883 2813 	strb.w	r2, [r3, #2067]	; 0x813
	msv2->tx.data[2] = opcode;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	7afa      	ldrb	r2, [r7, #11]
 800200e:	f883 2814 	strb.w	r2, [r3, #2068]	; 0x814
	msv2->tx.data[3] = data_len;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	7aba      	ldrb	r2, [r7, #10]
 8002016:	f883 2815 	strb.w	r2, [r3, #2069]	; 0x815
	msv2->tx.crc_data[0] = (data_len<<8) | opcode;  //header bytes inverted
 800201a:	7abb      	ldrb	r3, [r7, #10]
 800201c:	021b      	lsls	r3, r3, #8
 800201e:	b21a      	sxth	r2, r3
 8002020:	7afb      	ldrb	r3, [r7, #11]
 8002022:	b21b      	sxth	r3, r3
 8002024:	4313      	orrs	r3, r2
 8002026:	b21b      	sxth	r3, r3
 8002028:	b29a      	uxth	r2, r3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f8a3 2c12 	strh.w	r2, [r3, #3090]	; 0xc12
	uint16_t counter=4;
 8002030:	2304      	movs	r3, #4
 8002032:	82fb      	strh	r3, [r7, #22]
	for(uint16_t i = 0; i < data_len; i++) {
 8002034:	2300      	movs	r3, #0
 8002036:	82bb      	strh	r3, [r7, #20]
 8002038:	e05b      	b.n	80020f2 <msv2_create_frame+0x122>
		msv2->tx.data[counter++] = data[2*i]; //bytes in data need to be inverted before
 800203a:	8abb      	ldrh	r3, [r7, #20]
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	461a      	mov	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	441a      	add	r2, r3
 8002044:	8afb      	ldrh	r3, [r7, #22]
 8002046:	1c59      	adds	r1, r3, #1
 8002048:	82f9      	strh	r1, [r7, #22]
 800204a:	4619      	mov	r1, r3
 800204c:	7812      	ldrb	r2, [r2, #0]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	440b      	add	r3, r1
 8002052:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
		if(msv2->tx.data[counter-1] == DLE) {
 8002056:	8afb      	ldrh	r3, [r7, #22]
 8002058:	3b01      	subs	r3, #1
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	4413      	add	r3, r2
 800205e:	f893 3812 	ldrb.w	r3, [r3, #2066]	; 0x812
 8002062:	2b90      	cmp	r3, #144	; 0x90
 8002064:	d108      	bne.n	8002078 <msv2_create_frame+0xa8>
			msv2->tx.data[counter++] = DLE;
 8002066:	8afb      	ldrh	r3, [r7, #22]
 8002068:	1c5a      	adds	r2, r3, #1
 800206a:	82fa      	strh	r2, [r7, #22]
 800206c:	461a      	mov	r2, r3
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	4413      	add	r3, r2
 8002072:	2290      	movs	r2, #144	; 0x90
 8002074:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
		}
		msv2->tx.data[counter++] = data[2*i+1];
 8002078:	8abb      	ldrh	r3, [r7, #20]
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	3301      	adds	r3, #1
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	441a      	add	r2, r3
 8002082:	8afb      	ldrh	r3, [r7, #22]
 8002084:	1c59      	adds	r1, r3, #1
 8002086:	82f9      	strh	r1, [r7, #22]
 8002088:	4619      	mov	r1, r3
 800208a:	7812      	ldrb	r2, [r2, #0]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	440b      	add	r3, r1
 8002090:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
		if(msv2->tx.data[counter-1] == DLE) {
 8002094:	8afb      	ldrh	r3, [r7, #22]
 8002096:	3b01      	subs	r3, #1
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	4413      	add	r3, r2
 800209c:	f893 3812 	ldrb.w	r3, [r3, #2066]	; 0x812
 80020a0:	2b90      	cmp	r3, #144	; 0x90
 80020a2:	d108      	bne.n	80020b6 <msv2_create_frame+0xe6>
			msv2->tx.data[counter++] = DLE;
 80020a4:	8afb      	ldrh	r3, [r7, #22]
 80020a6:	1c5a      	adds	r2, r3, #1
 80020a8:	82fa      	strh	r2, [r7, #22]
 80020aa:	461a      	mov	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	4413      	add	r3, r2
 80020b0:	2290      	movs	r2, #144	; 0x90
 80020b2:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
		}
		msv2->tx.crc_data[i+1] = (data[2*i+1]<<8) |  data[2*i];
 80020b6:	8abb      	ldrh	r3, [r7, #20]
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	3301      	adds	r3, #1
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	4413      	add	r3, r2
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	021b      	lsls	r3, r3, #8
 80020c4:	b21a      	sxth	r2, r3
 80020c6:	8abb      	ldrh	r3, [r7, #20]
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	4619      	mov	r1, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	440b      	add	r3, r1
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	b21b      	sxth	r3, r3
 80020d4:	4313      	orrs	r3, r2
 80020d6:	b21a      	sxth	r2, r3
 80020d8:	8abb      	ldrh	r3, [r7, #20]
 80020da:	3301      	adds	r3, #1
 80020dc:	b291      	uxth	r1, r2
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	f203 6304 	addw	r3, r3, #1540	; 0x604
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	4413      	add	r3, r2
 80020e8:	460a      	mov	r2, r1
 80020ea:	815a      	strh	r2, [r3, #10]
	for(uint16_t i = 0; i < data_len; i++) {
 80020ec:	8abb      	ldrh	r3, [r7, #20]
 80020ee:	3301      	adds	r3, #1
 80020f0:	82bb      	strh	r3, [r7, #20]
 80020f2:	7abb      	ldrb	r3, [r7, #10]
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	8aba      	ldrh	r2, [r7, #20]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d39e      	bcc.n	800203a <msv2_create_frame+0x6a>
	}
	msv2->tx.crc_data[array_len-1] = 0x0000;
 80020fc:	8a7b      	ldrh	r3, [r7, #18]
 80020fe:	3b01      	subs	r3, #1
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	f203 6304 	addw	r3, r3, #1540	; 0x604
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	4413      	add	r3, r2
 800210a:	2200      	movs	r2, #0
 800210c:	815a      	strh	r2, [r3, #10]
	uint16_t crc = calc_field_CRC(msv2->tx.crc_data, array_len);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f603 4312 	addw	r3, r3, #3090	; 0xc12
 8002114:	8a7a      	ldrh	r2, [r7, #18]
 8002116:	4611      	mov	r1, r2
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff ff07 	bl	8001f2c <calc_field_CRC>
 800211e:	4603      	mov	r3, r0
 8002120:	823b      	strh	r3, [r7, #16]
	msv2->tx.data[counter++] = crc&0xff; //crc bytes are inverted (LSB first) !!
 8002122:	8afb      	ldrh	r3, [r7, #22]
 8002124:	1c5a      	adds	r2, r3, #1
 8002126:	82fa      	strh	r2, [r7, #22]
 8002128:	4619      	mov	r1, r3
 800212a:	8a3b      	ldrh	r3, [r7, #16]
 800212c:	b2da      	uxtb	r2, r3
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	440b      	add	r3, r1
 8002132:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
	if(msv2->tx.data[counter-1] == DLE) {
 8002136:	8afb      	ldrh	r3, [r7, #22]
 8002138:	3b01      	subs	r3, #1
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	4413      	add	r3, r2
 800213e:	f893 3812 	ldrb.w	r3, [r3, #2066]	; 0x812
 8002142:	2b90      	cmp	r3, #144	; 0x90
 8002144:	d108      	bne.n	8002158 <msv2_create_frame+0x188>
		msv2->tx.data[counter++] = DLE;
 8002146:	8afb      	ldrh	r3, [r7, #22]
 8002148:	1c5a      	adds	r2, r3, #1
 800214a:	82fa      	strh	r2, [r7, #22]
 800214c:	461a      	mov	r2, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	4413      	add	r3, r2
 8002152:	2290      	movs	r2, #144	; 0x90
 8002154:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
	}
	msv2->tx.data[counter++] = crc>>8;
 8002158:	8a3b      	ldrh	r3, [r7, #16]
 800215a:	0a1b      	lsrs	r3, r3, #8
 800215c:	b29a      	uxth	r2, r3
 800215e:	8afb      	ldrh	r3, [r7, #22]
 8002160:	1c59      	adds	r1, r3, #1
 8002162:	82f9      	strh	r1, [r7, #22]
 8002164:	4619      	mov	r1, r3
 8002166:	b2d2      	uxtb	r2, r2
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	440b      	add	r3, r1
 800216c:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
	if(msv2->tx.data[counter-1] == DLE) {
 8002170:	8afb      	ldrh	r3, [r7, #22]
 8002172:	3b01      	subs	r3, #1
 8002174:	68fa      	ldr	r2, [r7, #12]
 8002176:	4413      	add	r3, r2
 8002178:	f893 3812 	ldrb.w	r3, [r3, #2066]	; 0x812
 800217c:	2b90      	cmp	r3, #144	; 0x90
 800217e:	d108      	bne.n	8002192 <msv2_create_frame+0x1c2>
		msv2->tx.data[counter++] = DLE;
 8002180:	8afb      	ldrh	r3, [r7, #22]
 8002182:	1c5a      	adds	r2, r3, #1
 8002184:	82fa      	strh	r2, [r7, #22]
 8002186:	461a      	mov	r2, r3
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	4413      	add	r3, r2
 800218c:	2290      	movs	r2, #144	; 0x90
 800218e:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
	}
	return counter;
 8002192:	8afb      	ldrh	r3, [r7, #22]
}
 8002194:	4618      	mov	r0, r3
 8002196:	3718      	adds	r7, #24
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <msv2_decode_fragment>:

/*
 * 	d: received byte
 *
 */
MSV2_ERROR_t msv2_decode_fragment(MSV2_INST_t * msv2, uint8_t d) {
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	460b      	mov	r3, r1
 80021a6:	70fb      	strb	r3, [r7, #3]
    //if a DLE in data is followed by STX, we start again
    if (msv2->rx.escape == 1 && d == STX) {
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	7a5b      	ldrb	r3, [r3, #9]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d10a      	bne.n	80021c6 <msv2_decode_fragment+0x2a>
 80021b0:	78fb      	ldrb	r3, [r7, #3]
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d107      	bne.n	80021c6 <msv2_decode_fragment+0x2a>
    	msv2->rx.state = WAITING_OPCODE;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2202      	movs	r2, #2
 80021ba:	721a      	strb	r2, [r3, #8]
    	msv2->rx.escape = 0;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	725a      	strb	r2, [r3, #9]
        return MSV2_PROGRESS;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e0da      	b.n	800237c <msv2_decode_fragment+0x1e0>
    }

    if (msv2->rx.state == WAITING_DLE && d == DLE) {
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	7a1b      	ldrb	r3, [r3, #8]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d107      	bne.n	80021de <msv2_decode_fragment+0x42>
 80021ce:	78fb      	ldrb	r3, [r7, #3]
 80021d0:	2b90      	cmp	r3, #144	; 0x90
 80021d2:	d104      	bne.n	80021de <msv2_decode_fragment+0x42>
    	msv2->rx.state = WAITING_STX;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	721a      	strb	r2, [r3, #8]
        return MSV2_PROGRESS;
 80021da:	2301      	movs	r3, #1
 80021dc:	e0ce      	b.n	800237c <msv2_decode_fragment+0x1e0>
    }
    //escape in case a DLE is in the data
    if (d == DLE && msv2->rx.escape == 0) {
 80021de:	78fb      	ldrb	r3, [r7, #3]
 80021e0:	2b90      	cmp	r3, #144	; 0x90
 80021e2:	d108      	bne.n	80021f6 <msv2_decode_fragment+0x5a>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	7a5b      	ldrb	r3, [r3, #9]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d104      	bne.n	80021f6 <msv2_decode_fragment+0x5a>
    	msv2->rx.escape = 1;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	725a      	strb	r2, [r3, #9]
        return MSV2_PROGRESS;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e0c2      	b.n	800237c <msv2_decode_fragment+0x1e0>
    }
    //if it is doubled, it counts as data
    if (d == DLE && msv2->rx.escape == 1) {
 80021f6:	78fb      	ldrb	r3, [r7, #3]
 80021f8:	2b90      	cmp	r3, #144	; 0x90
 80021fa:	d106      	bne.n	800220a <msv2_decode_fragment+0x6e>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	7a5b      	ldrb	r3, [r3, #9]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d102      	bne.n	800220a <msv2_decode_fragment+0x6e>
    	msv2->rx.escape = 0;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	725a      	strb	r2, [r3, #9]

    }

    if (msv2->rx.state == WAITING_STX && d == STX) {
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	7a1b      	ldrb	r3, [r3, #8]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d107      	bne.n	8002222 <msv2_decode_fragment+0x86>
 8002212:	78fb      	ldrb	r3, [r7, #3]
 8002214:	2b02      	cmp	r3, #2
 8002216:	d104      	bne.n	8002222 <msv2_decode_fragment+0x86>
    	msv2->rx.state = WAITING_OPCODE;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2202      	movs	r2, #2
 800221c:	721a      	strb	r2, [r3, #8]
        return MSV2_PROGRESS;
 800221e:	2301      	movs	r3, #1
 8002220:	e0ac      	b.n	800237c <msv2_decode_fragment+0x1e0>
    }

    if (msv2->rx.state == WAITING_OPCODE) {
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	7a1b      	ldrb	r3, [r3, #8]
 8002226:	2b02      	cmp	r3, #2
 8002228:	d107      	bne.n	800223a <msv2_decode_fragment+0x9e>
    	msv2->rx.opcode = d;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	78fa      	ldrb	r2, [r7, #3]
 800222e:	711a      	strb	r2, [r3, #4]
    	msv2->rx.state = WAITING_LEN;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2203      	movs	r2, #3
 8002234:	721a      	strb	r2, [r3, #8]
        return MSV2_PROGRESS;
 8002236:	2301      	movs	r3, #1
 8002238:	e0a0      	b.n	800237c <msv2_decode_fragment+0x1e0>
    }

    if (msv2->rx.state == WAITING_LEN) {
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	7a1b      	ldrb	r3, [r3, #8]
 800223e:	2b03      	cmp	r3, #3
 8002240:	d11d      	bne.n	800227e <msv2_decode_fragment+0xe2>
    	msv2->rx.data_len = d; //legth in words
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	78fa      	ldrb	r2, [r7, #3]
 8002246:	715a      	strb	r2, [r3, #5]
    	msv2->rx.length = 2*d; //length in bytes
 8002248:	78fb      	ldrb	r3, [r7, #3]
 800224a:	b29b      	uxth	r3, r3
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	b29a      	uxth	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	815a      	strh	r2, [r3, #10]
    	msv2->rx.crc_data[0] = (msv2->rx.data_len<<8) | msv2->rx.opcode;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	795b      	ldrb	r3, [r3, #5]
 8002258:	021b      	lsls	r3, r3, #8
 800225a:	b21a      	sxth	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	791b      	ldrb	r3, [r3, #4]
 8002260:	b21b      	sxth	r3, r3
 8002262:	4313      	orrs	r3, r2
 8002264:	b21b      	sxth	r3, r3
 8002266:	b29a      	uxth	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
    	msv2->rx.counter = 0;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	819a      	strh	r2, [r3, #12]
    	msv2->rx.state = WAITING_DATA;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2204      	movs	r2, #4
 8002278:	721a      	strb	r2, [r3, #8]
        return MSV2_PROGRESS;
 800227a:	2301      	movs	r3, #1
 800227c:	e07e      	b.n	800237c <msv2_decode_fragment+0x1e0>
    }

    if (msv2->rx.state == WAITING_DATA) {
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	7a1b      	ldrb	r3, [r3, #8]
 8002282:	2b04      	cmp	r3, #4
 8002284:	d136      	bne.n	80022f4 <msv2_decode_fragment+0x158>
    	msv2->rx.data[msv2->rx.counter] = d;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	899b      	ldrh	r3, [r3, #12]
 800228a:	461a      	mov	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4413      	add	r3, r2
 8002290:	78fa      	ldrb	r2, [r7, #3]
 8002292:	739a      	strb	r2, [r3, #14]
    	if(msv2->rx.counter & 0x01) { //LSB == '1'
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	899b      	ldrh	r3, [r3, #12]
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	2b00      	cmp	r3, #0
 800229e:	d018      	beq.n	80022d2 <msv2_decode_fragment+0x136>
    		msv2->rx.crc_data[msv2->rx.counter/2 + 1] = (msv2->rx.data[msv2->rx.counter - 1]) |  d<<8;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	899b      	ldrh	r3, [r3, #12]
 80022a4:	3b01      	subs	r3, #1
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	4413      	add	r3, r2
 80022aa:	7b9b      	ldrb	r3, [r3, #14]
 80022ac:	b21a      	sxth	r2, r3
 80022ae:	78fb      	ldrb	r3, [r7, #3]
 80022b0:	021b      	lsls	r3, r3, #8
 80022b2:	b21b      	sxth	r3, r3
 80022b4:	4313      	orrs	r3, r2
 80022b6:	b21a      	sxth	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	899b      	ldrh	r3, [r3, #12]
 80022bc:	085b      	lsrs	r3, r3, #1
 80022be:	b29b      	uxth	r3, r3
 80022c0:	3301      	adds	r3, #1
 80022c2:	b291      	uxth	r1, r2
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	4413      	add	r3, r2
 80022ce:	460a      	mov	r2, r1
 80022d0:	80da      	strh	r2, [r3, #6]
    	}
    	msv2->rx.counter += 1;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	899b      	ldrh	r3, [r3, #12]
 80022d6:	3301      	adds	r3, #1
 80022d8:	b29a      	uxth	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	819a      	strh	r2, [r3, #12]
        //the length  is in WORDS, but we read BYTES
        if (msv2->rx.counter==msv2->rx.length) {
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	899a      	ldrh	r2, [r3, #12]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	895b      	ldrh	r3, [r3, #10]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d102      	bne.n	80022f0 <msv2_decode_fragment+0x154>
        	msv2->rx.state = WAITING_CRC1;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2205      	movs	r2, #5
 80022ee:	721a      	strb	r2, [r3, #8]
        }
        return MSV2_PROGRESS;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e043      	b.n	800237c <msv2_decode_fragment+0x1e0>
    }

    if (msv2->rx.state == WAITING_CRC1) {
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	7a1b      	ldrb	r3, [r3, #8]
 80022f8:	2b05      	cmp	r3, #5
 80022fa:	d108      	bne.n	800230e <msv2_decode_fragment+0x172>
    	msv2->rx.crc = d;
 80022fc:	78fb      	ldrb	r3, [r7, #3]
 80022fe:	b29a      	uxth	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	80da      	strh	r2, [r3, #6]
    	msv2->rx.state = WAITING_CRC2;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2206      	movs	r2, #6
 8002308:	721a      	strb	r2, [r3, #8]
        return MSV2_PROGRESS;
 800230a:	2301      	movs	r3, #1
 800230c:	e036      	b.n	800237c <msv2_decode_fragment+0x1e0>

    }

    if (msv2->rx.state == WAITING_CRC2) {
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	7a1b      	ldrb	r3, [r3, #8]
 8002312:	2b06      	cmp	r3, #6
 8002314:	d12e      	bne.n	8002374 <msv2_decode_fragment+0x1d8>
    	msv2->rx.crc |= d<<8;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	88db      	ldrh	r3, [r3, #6]
 800231a:	b21a      	sxth	r2, r3
 800231c:	78fb      	ldrb	r3, [r7, #3]
 800231e:	021b      	lsls	r3, r3, #8
 8002320:	b21b      	sxth	r3, r3
 8002322:	4313      	orrs	r3, r2
 8002324:	b21b      	sxth	r3, r3
 8002326:	b29a      	uxth	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	80da      	strh	r2, [r3, #6]
    	msv2->rx.state = WAITING_DLE;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	721a      	strb	r2, [r3, #8]
    	msv2->rx.crc_data[msv2->rx.data_len+1] = 0;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	795b      	ldrb	r3, [r3, #5]
 8002336:	3301      	adds	r3, #1
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	4413      	add	r3, r2
 8002342:	2200      	movs	r2, #0
 8002344:	80da      	strh	r2, [r3, #6]
    	uint16_t crc = calc_field_CRC(msv2->rx.crc_data, msv2->rx.data_len+2);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f203 420e 	addw	r2, r3, #1038	; 0x40e
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	795b      	ldrb	r3, [r3, #5]
 8002350:	b29b      	uxth	r3, r3
 8002352:	3302      	adds	r3, #2
 8002354:	b29b      	uxth	r3, r3
 8002356:	4619      	mov	r1, r3
 8002358:	4610      	mov	r0, r2
 800235a:	f7ff fde7 	bl	8001f2c <calc_field_CRC>
 800235e:	4603      	mov	r3, r0
 8002360:	81fb      	strh	r3, [r7, #14]
    	if(msv2->rx.crc == crc) {
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	88db      	ldrh	r3, [r3, #6]
 8002366:	89fa      	ldrh	r2, [r7, #14]
 8002368:	429a      	cmp	r2, r3
 800236a:	d101      	bne.n	8002370 <msv2_decode_fragment+0x1d4>
    		return MSV2_SUCCESS;
 800236c:	2300      	movs	r3, #0
 800236e:	e005      	b.n	800237c <msv2_decode_fragment+0x1e0>
    	} else {
    		return MSV2_WRONG_CRC;
 8002370:	2302      	movs	r3, #2
 8002372:	e003      	b.n	800237c <msv2_decode_fragment+0x1e0>
    	}
    }
    msv2->rx.state=WAITING_DLE;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	721a      	strb	r2, [r3, #8]
    return MSV2_PROGRESS;
 800237a:	2301      	movs	r3, #1
}
 800237c:	4618      	mov	r0, r3
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <msv2_tx_data>:

uint8_t * msv2_rx_data(MSV2_INST_t * msv2) {
	return msv2->rx.data;
}

uint8_t * msv2_tx_data(MSV2_INST_t * msv2) {
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
	return msv2->tx.data;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f603 0312 	addw	r3, r3, #2066	; 0x812
}
 8002392:	4618      	mov	r0, r3
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <util_buffer_u8_init>:
static inline void util_buffer_u8_init(UTIL_BUFFER_U8_t * bfr, uint8_t * buffer, uint16_t bfr_len) {
 800239e:	b480      	push	{r7}
 80023a0:	b085      	sub	sp, #20
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	60f8      	str	r0, [r7, #12]
 80023a6:	60b9      	str	r1, [r7, #8]
 80023a8:	4613      	mov	r3, r2
 80023aa:	80fb      	strh	r3, [r7, #6]
	bfr->c_ix = 0;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2200      	movs	r2, #0
 80023b0:	801a      	strh	r2, [r3, #0]
	bfr->l_ix = 0;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2200      	movs	r2, #0
 80023b6:	805a      	strh	r2, [r3, #2]
	bfr->bfr_len = bfr_len;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	88fa      	ldrh	r2, [r7, #6]
 80023bc:	809a      	strh	r2, [r3, #4]
	bfr->buffer = buffer;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	68ba      	ldr	r2, [r7, #8]
 80023c2:	609a      	str	r2, [r3, #8]
}
 80023c4:	bf00      	nop
 80023c6:	3714      	adds	r7, #20
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <util_buffer_u8_add>:
static inline void util_buffer_u8_add(UTIL_BUFFER_U8_t * bfr, uint8_t d) {
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	460b      	mov	r3, r1
 80023da:	70fb      	strb	r3, [r7, #3]
	bfr->buffer[bfr->c_ix++] = d;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689a      	ldr	r2, [r3, #8]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	881b      	ldrh	r3, [r3, #0]
 80023e4:	1c59      	adds	r1, r3, #1
 80023e6:	b288      	uxth	r0, r1
 80023e8:	6879      	ldr	r1, [r7, #4]
 80023ea:	8008      	strh	r0, [r1, #0]
 80023ec:	4413      	add	r3, r2
 80023ee:	78fa      	ldrb	r2, [r7, #3]
 80023f0:	701a      	strb	r2, [r3, #0]
	if(bfr->c_ix == bfr->bfr_len) bfr->c_ix = 0;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	881a      	ldrh	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	889b      	ldrh	r3, [r3, #4]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d102      	bne.n	8002404 <util_buffer_u8_add+0x34>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	801a      	strh	r2, [r3, #0]
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <util_buffer_u8_get>:
static inline uint8_t util_buffer_u8_get(UTIL_BUFFER_U8_t * bfr) {
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
	uint8_t tmp = bfr->buffer[bfr->l_ix++];
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689a      	ldr	r2, [r3, #8]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	885b      	ldrh	r3, [r3, #2]
 8002420:	1c59      	adds	r1, r3, #1
 8002422:	b288      	uxth	r0, r1
 8002424:	6879      	ldr	r1, [r7, #4]
 8002426:	8048      	strh	r0, [r1, #2]
 8002428:	4413      	add	r3, r2
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	73fb      	strb	r3, [r7, #15]
	if(bfr->l_ix == bfr->bfr_len) bfr->l_ix=0;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	885a      	ldrh	r2, [r3, #2]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	889b      	ldrh	r3, [r3, #4]
 8002436:	429a      	cmp	r2, r3
 8002438:	d102      	bne.n	8002440 <util_buffer_u8_get+0x30>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	805a      	strh	r2, [r3, #2]
	return tmp;
 8002440:	7bfb      	ldrb	r3, [r7, #15]
}
 8002442:	4618      	mov	r0, r3
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr

0800244e <util_buffer_u8_isempty>:
static inline uint8_t util_buffer_u8_isempty(UTIL_BUFFER_U8_t * bfr) {
 800244e:	b480      	push	{r7}
 8002450:	b083      	sub	sp, #12
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
	return bfr->l_ix == bfr->c_ix;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	885a      	ldrh	r2, [r3, #2]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	881b      	ldrh	r3, [r3, #0]
 800245e:	429a      	cmp	r2, r3
 8002460:	bf0c      	ite	eq
 8002462:	2301      	moveq	r3, #1
 8002464:	2300      	movne	r3, #0
 8002466:	b2db      	uxtb	r3, r3
}
 8002468:	4618      	mov	r0, r3
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <HAL_UART_RxCpltCallback>:

/*
 * UART RX ISR
 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800247c:	2300      	movs	r3, #0
 800247e:	60bb      	str	r3, [r7, #8]
	for(uint16_t i = 0; i < serial_devices_count; i++) {
 8002480:	2300      	movs	r3, #0
 8002482:	81fb      	strh	r3, [r7, #14]
 8002484:	e025      	b.n	80024d2 <HAL_UART_RxCpltCallback+0x5e>
		if(serial_devices[i]->uart == huart) {
 8002486:	89fb      	ldrh	r3, [r7, #14]
 8002488:	4a1c      	ldr	r2, [pc, #112]	; (80024fc <HAL_UART_RxCpltCallback+0x88>)
 800248a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	429a      	cmp	r2, r3
 8002494:	d11a      	bne.n	80024cc <HAL_UART_RxCpltCallback+0x58>
			util_buffer_u8_add(&serial_devices[i]->bfr, serial_devices[i]->dma_buffer);
 8002496:	89fb      	ldrh	r3, [r7, #14]
 8002498:	4a18      	ldr	r2, [pc, #96]	; (80024fc <HAL_UART_RxCpltCallback+0x88>)
 800249a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800249e:	f103 0210 	add.w	r2, r3, #16
 80024a2:	89fb      	ldrh	r3, [r7, #14]
 80024a4:	4915      	ldr	r1, [pc, #84]	; (80024fc <HAL_UART_RxCpltCallback+0x88>)
 80024a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80024aa:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 80024ae:	4619      	mov	r1, r3
 80024b0:	4610      	mov	r0, r2
 80024b2:	f7ff ff8d 	bl	80023d0 <util_buffer_u8_add>
			xSemaphoreGiveFromISR( serial_rx_sem, &xHigherPriorityTaskWoken );
 80024b6:	4b12      	ldr	r3, [pc, #72]	; (8002500 <HAL_UART_RxCpltCallback+0x8c>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f107 0208 	add.w	r2, r7, #8
 80024be:	4611      	mov	r1, r2
 80024c0:	4618      	mov	r0, r3
 80024c2:	f007 fad5 	bl	8009a70 <xQueueGiveFromISR>
			if(i==2) {
 80024c6:	89fb      	ldrh	r3, [r7, #14]
 80024c8:	2b02      	cmp	r3, #2
				break;
			}
			break;
 80024ca:	e007      	b.n	80024dc <HAL_UART_RxCpltCallback+0x68>
	for(uint16_t i = 0; i < serial_devices_count; i++) {
 80024cc:	89fb      	ldrh	r3, [r7, #14]
 80024ce:	3301      	adds	r3, #1
 80024d0:	81fb      	strh	r3, [r7, #14]
 80024d2:	4b0c      	ldr	r3, [pc, #48]	; (8002504 <HAL_UART_RxCpltCallback+0x90>)
 80024d4:	881b      	ldrh	r3, [r3, #0]
 80024d6:	89fa      	ldrh	r2, [r7, #14]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d3d4      	bcc.n	8002486 <HAL_UART_RxCpltCallback+0x12>
		}
	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d007      	beq.n	80024f2 <HAL_UART_RxCpltCallback+0x7e>
 80024e2:	4b09      	ldr	r3, [pc, #36]	; (8002508 <HAL_UART_RxCpltCallback+0x94>)
 80024e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	f3bf 8f4f 	dsb	sy
 80024ee:	f3bf 8f6f 	isb	sy
}
 80024f2:	bf00      	nop
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	20001a3c 	.word	0x20001a3c
 8002500:	20001a80 	.word	0x20001a80
 8002504:	20001a7c 	.word	0x20001a7c
 8002508:	e000ed04 	.word	0xe000ed04

0800250c <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef * lol = huart;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	60fb      	str	r3, [r7, #12]
}
 8002518:	bf00      	nop
 800251a:	3714      	adds	r7, #20
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <serial_global_init>:



void serial_global_init(void) {
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af02      	add	r7, sp, #8
	serial_rx_sem = xSemaphoreCreateBinaryStatic( &serial_rx_sem_buffer );
 800252a:	2303      	movs	r3, #3
 800252c:	9300      	str	r3, [sp, #0]
 800252e:	4b06      	ldr	r3, [pc, #24]	; (8002548 <serial_global_init+0x24>)
 8002530:	2200      	movs	r2, #0
 8002532:	2100      	movs	r1, #0
 8002534:	2001      	movs	r0, #1
 8002536:	f007 f8d5 	bl	80096e4 <xQueueGenericCreateStatic>
 800253a:	4603      	mov	r3, r0
 800253c:	4a03      	ldr	r2, [pc, #12]	; (800254c <serial_global_init+0x28>)
 800253e:	6013      	str	r3, [r2, #0]
}
 8002540:	bf00      	nop
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	20001a84 	.word	0x20001a84
 800254c:	20001a80 	.word	0x20001a80

08002550 <serial_init>:


void serial_init(SERIAL_INST_t * ser, UART_HandleTypeDef * uart, void * inst, SERIAL_RET_t (*decode_fcn)(void *, uint8_t)) {
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
 800255c:	603b      	str	r3, [r7, #0]
	ser->id = serial_devices_count;
 800255e:	4b1a      	ldr	r3, [pc, #104]	; (80025c8 <serial_init+0x78>)
 8002560:	881b      	ldrh	r3, [r3, #0]
 8002562:	461a      	mov	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	601a      	str	r2, [r3, #0]
	ser->uart = uart;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	68ba      	ldr	r2, [r7, #8]
 800256c:	605a      	str	r2, [r3, #4]
	ser->inst = inst;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	609a      	str	r2, [r3, #8]
	ser->decode_fcn = decode_fcn;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	683a      	ldr	r2, [r7, #0]
 8002578:	60da      	str	r2, [r3, #12]
	util_buffer_u8_init(&ser->bfr, ser->buffer, SERIAL_FIFO_LEN);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f103 0010 	add.w	r0, r3, #16
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	331c      	adds	r3, #28
 8002584:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002588:	4619      	mov	r1, r3
 800258a:	f7ff ff08 	bl	800239e <util_buffer_u8_init>
	if(serial_devices_count < SERIAL_MAX_INST) {
 800258e:	4b0e      	ldr	r3, [pc, #56]	; (80025c8 <serial_init+0x78>)
 8002590:	881b      	ldrh	r3, [r3, #0]
 8002592:	2b0f      	cmp	r3, #15
 8002594:	d80e      	bhi.n	80025b4 <serial_init+0x64>
		HAL_UART_Receive_DMA(uart, &ser->dma_buffer, 1);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 800259c:	2201      	movs	r2, #1
 800259e:	4619      	mov	r1, r3
 80025a0:	68b8      	ldr	r0, [r7, #8]
 80025a2:	f005 fe65 	bl	8008270 <HAL_UART_Receive_DMA>
		serial_devices[serial_devices_count] = ser;
 80025a6:	4b08      	ldr	r3, [pc, #32]	; (80025c8 <serial_init+0x78>)
 80025a8:	881b      	ldrh	r3, [r3, #0]
 80025aa:	4619      	mov	r1, r3
 80025ac:	4a07      	ldr	r2, [pc, #28]	; (80025cc <serial_init+0x7c>)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	}
	serial_devices_count++;
 80025b4:	4b04      	ldr	r3, [pc, #16]	; (80025c8 <serial_init+0x78>)
 80025b6:	881b      	ldrh	r3, [r3, #0]
 80025b8:	3301      	adds	r3, #1
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	4b02      	ldr	r3, [pc, #8]	; (80025c8 <serial_init+0x78>)
 80025be:	801a      	strh	r2, [r3, #0]
}
 80025c0:	bf00      	nop
 80025c2:	3710      	adds	r7, #16
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	20001a7c 	.word	0x20001a7c
 80025cc:	20001a3c 	.word	0x20001a3c

080025d0 <serial_send>:

void serial_send(SERIAL_INST_t * ser, uint8_t * data, uint16_t length) {
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	4613      	mov	r3, r2
 80025dc:	80fb      	strh	r3, [r7, #6]
	HAL_UART_Transmit_DMA(ser->uart, data, length);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	88fa      	ldrh	r2, [r7, #6]
 80025e4:	68b9      	ldr	r1, [r7, #8]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f005 fdd6 	bl	8008198 <HAL_UART_Transmit_DMA>
	//HAL_UART_Transmit(ser->uart, data, length, 500);
}
 80025ec:	bf00      	nop
 80025ee:	3710      	adds	r7, #16
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <serial_garbage_clean>:

void serial_garbage_clean(SERIAL_INST_t * ser) {
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(ser->uart, &ser->dma_buffer, 1);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6858      	ldr	r0, [r3, #4]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8002606:	2201      	movs	r2, #1
 8002608:	4619      	mov	r1, r3
 800260a:	f005 fe31 	bl	8008270 <HAL_UART_Receive_DMA>
}
 800260e:	bf00      	nop
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
	...

08002618 <serial_thread>:

void serial_thread(void * arg) {
 8002618:	b5b0      	push	{r4, r5, r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]

	serial_global_init();
 8002620:	f7ff ff80 	bl	8002524 <serial_global_init>

	for(;;) {
		if( xSemaphoreTake(serial_rx_sem, 0xffff) == pdTRUE ) {
 8002624:	4b1b      	ldr	r3, [pc, #108]	; (8002694 <serial_thread+0x7c>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800262c:	4618      	mov	r0, r3
 800262e:	f007 faad 	bl	8009b8c <xQueueSemaphoreTake>
 8002632:	4603      	mov	r3, r0
 8002634:	2b01      	cmp	r3, #1
 8002636:	d1f5      	bne.n	8002624 <serial_thread+0xc>
			for(uint16_t i = 0; i < serial_devices_count; i++) {
 8002638:	2300      	movs	r3, #0
 800263a:	81fb      	strh	r3, [r7, #14]
 800263c:	e023      	b.n	8002686 <serial_thread+0x6e>
				while(!util_buffer_u8_isempty(&serial_devices[i]->bfr)) {
					serial_devices[i]->decode_fcn(serial_devices[i]->inst, util_buffer_u8_get(&serial_devices[i]->bfr));
 800263e:	89fb      	ldrh	r3, [r7, #14]
 8002640:	4a15      	ldr	r2, [pc, #84]	; (8002698 <serial_thread+0x80>)
 8002642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002646:	68dc      	ldr	r4, [r3, #12]
 8002648:	89fb      	ldrh	r3, [r7, #14]
 800264a:	4a13      	ldr	r2, [pc, #76]	; (8002698 <serial_thread+0x80>)
 800264c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002650:	689d      	ldr	r5, [r3, #8]
 8002652:	89fb      	ldrh	r3, [r7, #14]
 8002654:	4a10      	ldr	r2, [pc, #64]	; (8002698 <serial_thread+0x80>)
 8002656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800265a:	3310      	adds	r3, #16
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff fed7 	bl	8002410 <util_buffer_u8_get>
 8002662:	4603      	mov	r3, r0
 8002664:	4619      	mov	r1, r3
 8002666:	4628      	mov	r0, r5
 8002668:	47a0      	blx	r4
				while(!util_buffer_u8_isempty(&serial_devices[i]->bfr)) {
 800266a:	89fb      	ldrh	r3, [r7, #14]
 800266c:	4a0a      	ldr	r2, [pc, #40]	; (8002698 <serial_thread+0x80>)
 800266e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002672:	3310      	adds	r3, #16
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff feea 	bl	800244e <util_buffer_u8_isempty>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d0de      	beq.n	800263e <serial_thread+0x26>
			for(uint16_t i = 0; i < serial_devices_count; i++) {
 8002680:	89fb      	ldrh	r3, [r7, #14]
 8002682:	3301      	adds	r3, #1
 8002684:	81fb      	strh	r3, [r7, #14]
 8002686:	4b05      	ldr	r3, [pc, #20]	; (800269c <serial_thread+0x84>)
 8002688:	881b      	ldrh	r3, [r3, #0]
 800268a:	89fa      	ldrh	r2, [r7, #14]
 800268c:	429a      	cmp	r2, r3
 800268e:	d3ec      	bcc.n	800266a <serial_thread+0x52>
		if( xSemaphoreTake(serial_rx_sem, 0xffff) == pdTRUE ) {
 8002690:	e7c8      	b.n	8002624 <serial_thread+0xc>
 8002692:	bf00      	nop
 8002694:	20001a80 	.word	0x20001a80
 8002698:	20001a3c 	.word	0x20001a3c
 800269c:	20001a7c 	.word	0x20001a7c

080026a0 <storage_init>:

/**********************
 *	DECLARATIONS
 **********************/

void storage_init() {
 80026a0:	b5b0      	push	{r4, r5, r7, lr}
 80026a2:	b09c      	sub	sp, #112	; 0x70
 80026a4:	af02      	add	r7, sp, #8
	static STORAGE_HEADER_t header;
	flash_init();
 80026a6:	f006 fcba 	bl	800901e <flash_init>
	flash_read(HEADER_ADDR, (uint8_t *) &header, sizeof(STORAGE_HEADER_t));
 80026aa:	2210      	movs	r2, #16
 80026ac:	4936      	ldr	r1, [pc, #216]	; (8002788 <storage_init+0xe8>)
 80026ae:	2000      	movs	r0, #0
 80026b0:	f006 fcda 	bl	8009068 <flash_read>
	if(header.magic == MAGIC_NUMBER) {
 80026b4:	4b34      	ldr	r3, [pc, #208]	; (8002788 <storage_init+0xe8>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a34      	ldr	r2, [pc, #208]	; (800278c <storage_init+0xec>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d149      	bne.n	8002752 <storage_init+0xb2>
		used_subsectors = header.used;
 80026be:	4b32      	ldr	r3, [pc, #200]	; (8002788 <storage_init+0xe8>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	4a33      	ldr	r2, [pc, #204]	; (8002790 <storage_init+0xf0>)
 80026c4:	6013      	str	r3, [r2, #0]
		if(used_subsectors > 1) {
 80026c6:	4b32      	ldr	r3, [pc, #200]	; (8002790 <storage_init+0xf0>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d93d      	bls.n	800274a <storage_init+0xaa>
			STORAGE_DATA_t data = {0};
 80026ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026d2:	2220      	movs	r2, #32
 80026d4:	2100      	movs	r1, #0
 80026d6:	4618      	mov	r0, r3
 80026d8:	f008 ff10 	bl	800b4fc <memset>
			STORAGE_DATA_t last_valid_data = {0};
 80026dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80026e0:	2220      	movs	r2, #32
 80026e2:	2100      	movs	r1, #0
 80026e4:	4618      	mov	r0, r3
 80026e6:	f008 ff09 	bl	800b4fc <memset>
			uint32_t count = (used_subsectors-2)*SAMPLES_PER_SS;
 80026ea:	4b29      	ldr	r3, [pc, #164]	; (8002790 <storage_init+0xf0>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	3b02      	subs	r3, #2
 80026f0:	01db      	lsls	r3, r3, #7
 80026f2:	667b      	str	r3, [r7, #100]	; 0x64
			data = read_data(count);
 80026f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026f8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80026fa:	4618      	mov	r0, r3
 80026fc:	f000 f878 	bl	80027f0 <read_data>
			while(data.sample_id == count){
 8002700:	e01a      	b.n	8002738 <storage_init+0x98>
				last_valid_data = data;
 8002702:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8002706:	f107 0524 	add.w	r5, r7, #36	; 0x24
 800270a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800270c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800270e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002712:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				data = read_data(++count);
 8002716:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002718:	3301      	adds	r3, #1
 800271a:	667b      	str	r3, [r7, #100]	; 0x64
 800271c:	463b      	mov	r3, r7
 800271e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002720:	4618      	mov	r0, r3
 8002722:	f000 f865 	bl	80027f0 <read_data>
 8002726:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800272a:	463d      	mov	r5, r7
 800272c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800272e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002730:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002734:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			while(data.sample_id == count){
 8002738:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800273a:	461a      	mov	r2, r3
 800273c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800273e:	4293      	cmp	r3, r2
 8002740:	d0df      	beq.n	8002702 <storage_init+0x62>
			}

			data_counter = count;
 8002742:	4a14      	ldr	r2, [pc, #80]	; (8002794 <storage_init+0xf4>)
 8002744:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002746:	6013      	str	r3, [r2, #0]
 8002748:	e009      	b.n	800275e <storage_init+0xbe>
		} else {
			data_counter = 0;
 800274a:	4b12      	ldr	r3, [pc, #72]	; (8002794 <storage_init+0xf4>)
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	e005      	b.n	800275e <storage_init+0xbe>
		}
	} else {
		write_header_used(1);
 8002752:	2001      	movs	r0, #1
 8002754:	f000 f828 	bl	80027a8 <write_header_used>
		data_counter = 0;
 8002758:	4b0e      	ldr	r3, [pc, #56]	; (8002794 <storage_init+0xf4>)
 800275a:	2200      	movs	r2, #0
 800275c:	601a      	str	r2, [r3, #0]
	}
	record_active = 0;
 800275e:	4b0e      	ldr	r3, [pc, #56]	; (8002798 <storage_init+0xf8>)
 8002760:	2200      	movs	r2, #0
 8002762:	701a      	strb	r2, [r3, #0]
	restart_required = 0;
 8002764:	4b0d      	ldr	r3, [pc, #52]	; (800279c <storage_init+0xfc>)
 8002766:	2200      	movs	r2, #0
 8002768:	701a      	strb	r2, [r3, #0]
	storage_sem = xSemaphoreCreateBinaryStatic(&storage_sem_buffer);
 800276a:	2303      	movs	r3, #3
 800276c:	9300      	str	r3, [sp, #0]
 800276e:	4b0c      	ldr	r3, [pc, #48]	; (80027a0 <storage_init+0x100>)
 8002770:	2200      	movs	r2, #0
 8002772:	2100      	movs	r1, #0
 8002774:	2001      	movs	r0, #1
 8002776:	f006 ffb5 	bl	80096e4 <xQueueGenericCreateStatic>
 800277a:	4603      	mov	r3, r0
 800277c:	4a09      	ldr	r2, [pc, #36]	; (80027a4 <storage_init+0x104>)
 800277e:	6013      	str	r3, [r2, #0]
}
 8002780:	bf00      	nop
 8002782:	3768      	adds	r7, #104	; 0x68
 8002784:	46bd      	mov	sp, r7
 8002786:	bdb0      	pop	{r4, r5, r7, pc}
 8002788:	20001b28 	.word	0x20001b28
 800278c:	cbe0c5e6 	.word	0xcbe0c5e6
 8002790:	20001acc 	.word	0x20001acc
 8002794:	20001ad0 	.word	0x20001ad0
 8002798:	20001ad4 	.word	0x20001ad4
 800279c:	20001ad5 	.word	0x20001ad5
 80027a0:	20001ae0 	.word	0x20001ae0
 80027a4:	20001adc 	.word	0x20001adc

080027a8 <write_header_used>:

}



static void write_header_used(uint32_t used) {
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
	static STORAGE_HEADER_t header;
	flash_read(HEADER_ADDR, (uint8_t *) &header, sizeof(STORAGE_HEADER_t));
 80027b0:	2210      	movs	r2, #16
 80027b2:	490c      	ldr	r1, [pc, #48]	; (80027e4 <write_header_used+0x3c>)
 80027b4:	2000      	movs	r0, #0
 80027b6:	f006 fc57 	bl	8009068 <flash_read>
	flash_erase_subsector(HEADER_ADDR);
 80027ba:	2000      	movs	r0, #0
 80027bc:	f006 fd4c 	bl	8009258 <flash_erase_subsector>
	header.magic = MAGIC_NUMBER;
 80027c0:	4b08      	ldr	r3, [pc, #32]	; (80027e4 <write_header_used+0x3c>)
 80027c2:	4a09      	ldr	r2, [pc, #36]	; (80027e8 <write_header_used+0x40>)
 80027c4:	601a      	str	r2, [r3, #0]
	header.used = used;
 80027c6:	4a07      	ldr	r2, [pc, #28]	; (80027e4 <write_header_used+0x3c>)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6053      	str	r3, [r2, #4]
	flash_write(HEADER_ADDR, (uint8_t *) &header, sizeof(STORAGE_HEADER_t));
 80027cc:	2210      	movs	r2, #16
 80027ce:	4905      	ldr	r1, [pc, #20]	; (80027e4 <write_header_used+0x3c>)
 80027d0:	2000      	movs	r0, #0
 80027d2:	f006 fcca 	bl	800916a <flash_write>
	used_subsectors = used;
 80027d6:	4a05      	ldr	r2, [pc, #20]	; (80027ec <write_header_used+0x44>)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6013      	str	r3, [r2, #0]
}
 80027dc:	bf00      	nop
 80027de:	3708      	adds	r7, #8
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	20001b38 	.word	0x20001b38
 80027e8:	cbe0c5e6 	.word	0xcbe0c5e6
 80027ec:	20001acc 	.word	0x20001acc

080027f0 <read_data>:



static STORAGE_DATA_t read_data(uint32_t id) {
 80027f0:	b5b0      	push	{r4, r5, r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
	static STORAGE_DATA_t data;
	flash_read(ADDRESS(id), (uint8_t *) &data, sizeof(STORAGE_DATA_t));
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	3380      	adds	r3, #128	; 0x80
 80027fe:	015b      	lsls	r3, r3, #5
 8002800:	2220      	movs	r2, #32
 8002802:	4909      	ldr	r1, [pc, #36]	; (8002828 <read_data+0x38>)
 8002804:	4618      	mov	r0, r3
 8002806:	f006 fc2f 	bl	8009068 <flash_read>
	return data;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a06      	ldr	r2, [pc, #24]	; (8002828 <read_data+0x38>)
 800280e:	461c      	mov	r4, r3
 8002810:	4615      	mov	r5, r2
 8002812:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002814:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002816:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800281a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	3708      	adds	r7, #8
 8002822:	46bd      	mov	sp, r7
 8002824:	bdb0      	pop	{r4, r5, r7, pc}
 8002826:	bf00      	nop
 8002828:	20001b48 	.word	0x20001b48

0800282c <storage_get_used>:
		flash_erase_subsector(addr);
	}
	flash_write(addr, (uint8_t *) &data, sizeof(STORAGE_DATA_t));
}

uint32_t storage_get_used() {
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
	return data_counter;
 8002830:	4b03      	ldr	r3, [pc, #12]	; (8002840 <storage_get_used+0x14>)
 8002832:	681b      	ldr	r3, [r3, #0]
}
 8002834:	4618      	mov	r0, r3
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	20001ad0 	.word	0x20001ad0

08002844 <storage_get_sample>:

void storage_get_sample(uint32_t id, void * dest) {
 8002844:	b5b0      	push	{r4, r5, r7, lr}
 8002846:	b08a      	sub	sp, #40	; 0x28
 8002848:	af00      	add	r7, sp, #0
 800284a:	6278      	str	r0, [r7, #36]	; 0x24
 800284c:	6239      	str	r1, [r7, #32]
	*((STORAGE_DATA_t *)dest) = read_data(id);
 800284e:	6a3c      	ldr	r4, [r7, #32]
 8002850:	463b      	mov	r3, r7
 8002852:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff ffcb 	bl	80027f0 <read_data>
 800285a:	4625      	mov	r5, r4
 800285c:	463c      	mov	r4, r7
 800285e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002860:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002862:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002866:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 800286a:	bf00      	nop
 800286c:	3728      	adds	r7, #40	; 0x28
 800286e:	46bd      	mov	sp, r7
 8002870:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002874 <storage_disable>:

void storage_enable() {
	record_active = 1;
}

void storage_disable() {
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
	record_should_stop = STORAGE_AFTER_SAVE;
 8002878:	4b04      	ldr	r3, [pc, #16]	; (800288c <storage_disable+0x18>)
 800287a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800287e:	601a      	str	r2, [r3, #0]
}
 8002880:	bf00      	nop
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	20001ad8 	.word	0x20001ad8

08002890 <storage_thread>:
		xSemaphoreGive(storage_sem);
	}
}


void storage_thread(void * arg) {
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]



	storage_init();
 8002898:	f7ff ff02 	bl	80026a0 <storage_init>




	for(;;) {
		last_time = time;
 800289c:	4b1b      	ldr	r3, [pc, #108]	; (800290c <storage_thread+0x7c>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a1b      	ldr	r2, [pc, #108]	; (8002910 <storage_thread+0x80>)
 80028a2:	6013      	str	r3, [r2, #0]
		time = HAL_GetTick();
 80028a4:	f001 fa68 	bl	8003d78 <HAL_GetTick>
 80028a8:	4603      	mov	r3, r0
 80028aa:	4a18      	ldr	r2, [pc, #96]	; (800290c <storage_thread+0x7c>)
 80028ac:	6013      	str	r3, [r2, #0]
		if(restart_required) {
 80028ae:	4b19      	ldr	r3, [pc, #100]	; (8002914 <storage_thread+0x84>)
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d008      	beq.n	80028c8 <storage_thread+0x38>
			write_header_used(1);
 80028b6:	2001      	movs	r0, #1
 80028b8:	f7ff ff76 	bl	80027a8 <write_header_used>
			data_counter = 0;
 80028bc:	4b16      	ldr	r3, [pc, #88]	; (8002918 <storage_thread+0x88>)
 80028be:	2200      	movs	r2, #0
 80028c0:	601a      	str	r2, [r3, #0]
			restart_required = 0;
 80028c2:	4b14      	ldr	r3, [pc, #80]	; (8002914 <storage_thread+0x84>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	701a      	strb	r2, [r3, #0]
		}
		if(record_should_stop) {
 80028c8:	4b14      	ldr	r3, [pc, #80]	; (800291c <storage_thread+0x8c>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d014      	beq.n	80028fa <storage_thread+0x6a>
			record_should_stop -= time-last_time;;
 80028d0:	4b0f      	ldr	r3, [pc, #60]	; (8002910 <storage_thread+0x80>)
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	4b0d      	ldr	r3, [pc, #52]	; (800290c <storage_thread+0x7c>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	4a10      	ldr	r2, [pc, #64]	; (800291c <storage_thread+0x8c>)
 80028dc:	6812      	ldr	r2, [r2, #0]
 80028de:	4413      	add	r3, r2
 80028e0:	461a      	mov	r2, r3
 80028e2:	4b0e      	ldr	r3, [pc, #56]	; (800291c <storage_thread+0x8c>)
 80028e4:	601a      	str	r2, [r3, #0]
			if(record_should_stop<=0){
 80028e6:	4b0d      	ldr	r3, [pc, #52]	; (800291c <storage_thread+0x8c>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	dc05      	bgt.n	80028fa <storage_thread+0x6a>
				record_active=0;
 80028ee:	4b0c      	ldr	r3, [pc, #48]	; (8002920 <storage_thread+0x90>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	701a      	strb	r2, [r3, #0]
				record_should_stop=0;
 80028f4:	4b09      	ldr	r3, [pc, #36]	; (800291c <storage_thread+0x8c>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	601a      	str	r2, [r3, #0]
			}
		}
		if(xSemaphoreTake(storage_sem, 0xffff) == pdTRUE) {
 80028fa:	4b0a      	ldr	r3, [pc, #40]	; (8002924 <storage_thread+0x94>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002902:	4618      	mov	r0, r3
 8002904:	f007 f942 	bl	8009b8c <xQueueSemaphoreTake>
		last_time = time;
 8002908:	e7c8      	b.n	800289c <storage_thread+0xc>
 800290a:	bf00      	nop
 800290c:	20001b68 	.word	0x20001b68
 8002910:	20001b6c 	.word	0x20001b6c
 8002914:	20001ad5 	.word	0x20001ad5
 8002918:	20001ad0 	.word	0x20001ad0
 800291c:	20001ad8 	.word	0x20001ad8
 8002920:	20001ad4 	.word	0x20001ad4
 8002924:	20001adc 	.word	0x20001adc

08002928 <threads_init>:
 **********************/

/*
 * Create all the threads needed by the software
 */
void threads_init(void) {
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af04      	add	r7, sp, #16


	serial_global_init();
 800292e:	f7ff fdf9 	bl	8002524 <serial_global_init>
	static DEBUG_INST_t debug;
	debug_init(&debug);
 8002932:	481c      	ldr	r0, [pc, #112]	; (80029a4 <threads_init+0x7c>)
 8002934:	f7fe ffb2 	bl	800189c <debug_init>

	can_init();
 8002938:	f7fd fee0 	bl	80006fc <can_init>
	/*
	 * Storage thread
	 * lowest priority
	 */

	CREATE_THREAD(storage_handle, storage, storage_thread, STORAGE_SZ, STORAGE_PRIO);
 800293c:	4b1a      	ldr	r3, [pc, #104]	; (80029a8 <threads_init+0x80>)
 800293e:	9302      	str	r3, [sp, #8]
 8002940:	4b1a      	ldr	r3, [pc, #104]	; (80029ac <threads_init+0x84>)
 8002942:	9301      	str	r3, [sp, #4]
 8002944:	2303      	movs	r3, #3
 8002946:	9300      	str	r3, [sp, #0]
 8002948:	2300      	movs	r3, #0
 800294a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800294e:	4918      	ldr	r1, [pc, #96]	; (80029b0 <threads_init+0x88>)
 8002950:	4818      	ldr	r0, [pc, #96]	; (80029b4 <threads_init+0x8c>)
 8002952:	f007 fb29 	bl	8009fa8 <xTaskCreateStatic>
 8002956:	4603      	mov	r3, r0
 8002958:	4a17      	ldr	r2, [pc, #92]	; (80029b8 <threads_init+0x90>)
 800295a:	6013      	str	r3, [r2, #0]

	/*
	 *  Serial RX processing thread (Bottom half)
	 *  low priority
	 */
	CREATE_THREAD(serial_handle, serial, serial_thread, SERIAL_SZ, SERIAL_PRIO);
 800295c:	4b17      	ldr	r3, [pc, #92]	; (80029bc <threads_init+0x94>)
 800295e:	9302      	str	r3, [sp, #8]
 8002960:	4b17      	ldr	r3, [pc, #92]	; (80029c0 <threads_init+0x98>)
 8002962:	9301      	str	r3, [sp, #4]
 8002964:	2305      	movs	r3, #5
 8002966:	9300      	str	r3, [sp, #0]
 8002968:	2300      	movs	r3, #0
 800296a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800296e:	4915      	ldr	r1, [pc, #84]	; (80029c4 <threads_init+0x9c>)
 8002970:	4815      	ldr	r0, [pc, #84]	; (80029c8 <threads_init+0xa0>)
 8002972:	f007 fb19 	bl	8009fa8 <xTaskCreateStatic>
 8002976:	4603      	mov	r3, r0
 8002978:	4a14      	ldr	r2, [pc, #80]	; (80029cc <threads_init+0xa4>)
 800297a:	6013      	str	r3, [r2, #0]

	/*
	 *  Main control thread
	 *  Highest priority
	 */
	CREATE_THREAD(control_handle, control, control_thread, CONTROL_SZ, CONTROL_PRIO);
 800297c:	4b14      	ldr	r3, [pc, #80]	; (80029d0 <threads_init+0xa8>)
 800297e:	9302      	str	r3, [sp, #8]
 8002980:	4b14      	ldr	r3, [pc, #80]	; (80029d4 <threads_init+0xac>)
 8002982:	9301      	str	r3, [sp, #4]
 8002984:	2306      	movs	r3, #6
 8002986:	9300      	str	r3, [sp, #0]
 8002988:	2300      	movs	r3, #0
 800298a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800298e:	4912      	ldr	r1, [pc, #72]	; (80029d8 <threads_init+0xb0>)
 8002990:	4812      	ldr	r0, [pc, #72]	; (80029dc <threads_init+0xb4>)
 8002992:	f007 fb09 	bl	8009fa8 <xTaskCreateStatic>
 8002996:	4603      	mov	r3, r0
 8002998:	4a11      	ldr	r2, [pc, #68]	; (80029e0 <threads_init+0xb8>)
 800299a:	6013      	str	r3, [r2, #0]



}
 800299c:	bf00      	nop
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	20001b7c 	.word	0x20001b7c
 80029a8:	20003fb4 	.word	0x20003fb4
 80029ac:	20002fb4 	.word	0x20002fb4
 80029b0:	0800b524 	.word	0x0800b524
 80029b4:	08002891 	.word	0x08002891
 80029b8:	20001b78 	.word	0x20001b78
 80029bc:	2000500c 	.word	0x2000500c
 80029c0:	2000400c 	.word	0x2000400c
 80029c4:	0800b52c 	.word	0x0800b52c
 80029c8:	08002619 	.word	0x08002619
 80029cc:	20001b74 	.word	0x20001b74
 80029d0:	20006064 	.word	0x20006064
 80029d4:	20005064 	.word	0x20005064
 80029d8:	0800b534 	.word	0x0800b534
 80029dc:	0800103d 	.word	0x0800103d
 80029e0:	20001b70 	.word	0x20001b70

080029e4 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80029e8:	4b17      	ldr	r3, [pc, #92]	; (8002a48 <MX_CAN1_Init+0x64>)
 80029ea:	4a18      	ldr	r2, [pc, #96]	; (8002a4c <MX_CAN1_Init+0x68>)
 80029ec:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 80029ee:	4b16      	ldr	r3, [pc, #88]	; (8002a48 <MX_CAN1_Init+0x64>)
 80029f0:	2209      	movs	r2, #9
 80029f2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80029f4:	4b14      	ldr	r3, [pc, #80]	; (8002a48 <MX_CAN1_Init+0x64>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80029fa:	4b13      	ldr	r3, [pc, #76]	; (8002a48 <MX_CAN1_Init+0x64>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8002a00:	4b11      	ldr	r3, [pc, #68]	; (8002a48 <MX_CAN1_Init+0x64>)
 8002a02:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8002a06:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8002a08:	4b0f      	ldr	r3, [pc, #60]	; (8002a48 <MX_CAN1_Init+0x64>)
 8002a0a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002a0e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002a10:	4b0d      	ldr	r3, [pc, #52]	; (8002a48 <MX_CAN1_Init+0x64>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002a16:	4b0c      	ldr	r3, [pc, #48]	; (8002a48 <MX_CAN1_Init+0x64>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002a1c:	4b0a      	ldr	r3, [pc, #40]	; (8002a48 <MX_CAN1_Init+0x64>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8002a22:	4b09      	ldr	r3, [pc, #36]	; (8002a48 <MX_CAN1_Init+0x64>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002a28:	4b07      	ldr	r3, [pc, #28]	; (8002a48 <MX_CAN1_Init+0x64>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002a2e:	4b06      	ldr	r3, [pc, #24]	; (8002a48 <MX_CAN1_Init+0x64>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002a34:	4804      	ldr	r0, [pc, #16]	; (8002a48 <MX_CAN1_Init+0x64>)
 8002a36:	f001 f9ab 	bl	8003d90 <HAL_CAN_Init>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8002a40:	f000 fa2c 	bl	8002e9c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8002a44:	bf00      	nop
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	200068a0 	.word	0x200068a0
 8002a4c:	40006400 	.word	0x40006400

08002a50 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b08a      	sub	sp, #40	; 0x28
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a58:	f107 0314 	add.w	r3, r7, #20
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	601a      	str	r2, [r3, #0]
 8002a60:	605a      	str	r2, [r3, #4]
 8002a62:	609a      	str	r2, [r3, #8]
 8002a64:	60da      	str	r2, [r3, #12]
 8002a66:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a2d      	ldr	r2, [pc, #180]	; (8002b24 <HAL_CAN_MspInit+0xd4>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d153      	bne.n	8002b1a <HAL_CAN_MspInit+0xca>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002a72:	2300      	movs	r3, #0
 8002a74:	613b      	str	r3, [r7, #16]
 8002a76:	4b2c      	ldr	r3, [pc, #176]	; (8002b28 <HAL_CAN_MspInit+0xd8>)
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	4a2b      	ldr	r2, [pc, #172]	; (8002b28 <HAL_CAN_MspInit+0xd8>)
 8002a7c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a80:	6413      	str	r3, [r2, #64]	; 0x40
 8002a82:	4b29      	ldr	r3, [pc, #164]	; (8002b28 <HAL_CAN_MspInit+0xd8>)
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a8a:	613b      	str	r3, [r7, #16]
 8002a8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a8e:	2300      	movs	r3, #0
 8002a90:	60fb      	str	r3, [r7, #12]
 8002a92:	4b25      	ldr	r3, [pc, #148]	; (8002b28 <HAL_CAN_MspInit+0xd8>)
 8002a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a96:	4a24      	ldr	r2, [pc, #144]	; (8002b28 <HAL_CAN_MspInit+0xd8>)
 8002a98:	f043 0301 	orr.w	r3, r3, #1
 8002a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a9e:	4b22      	ldr	r3, [pc, #136]	; (8002b28 <HAL_CAN_MspInit+0xd8>)
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	60fb      	str	r3, [r7, #12]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aaa:	2300      	movs	r3, #0
 8002aac:	60bb      	str	r3, [r7, #8]
 8002aae:	4b1e      	ldr	r3, [pc, #120]	; (8002b28 <HAL_CAN_MspInit+0xd8>)
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab2:	4a1d      	ldr	r2, [pc, #116]	; (8002b28 <HAL_CAN_MspInit+0xd8>)
 8002ab4:	f043 0302 	orr.w	r3, r3, #2
 8002ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aba:	4b1b      	ldr	r3, [pc, #108]	; (8002b28 <HAL_CAN_MspInit+0xd8>)
 8002abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	60bb      	str	r3, [r7, #8]
 8002ac4:	68bb      	ldr	r3, [r7, #8]
    /**CAN1 GPIO Configuration
    PA12     ------> CAN1_TX
    PB8     ------> CAN1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002ac6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002aca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002acc:	2302      	movs	r3, #2
 8002ace:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002ad8:	2309      	movs	r3, #9
 8002ada:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002adc:	f107 0314 	add.w	r3, r7, #20
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	4812      	ldr	r0, [pc, #72]	; (8002b2c <HAL_CAN_MspInit+0xdc>)
 8002ae4:	f002 fbe8 	bl	80052b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002ae8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002aec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aee:	2302      	movs	r3, #2
 8002af0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af2:	2300      	movs	r3, #0
 8002af4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002af6:	2303      	movs	r3, #3
 8002af8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002afa:	2309      	movs	r3, #9
 8002afc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002afe:	f107 0314 	add.w	r3, r7, #20
 8002b02:	4619      	mov	r1, r3
 8002b04:	480a      	ldr	r0, [pc, #40]	; (8002b30 <HAL_CAN_MspInit+0xe0>)
 8002b06:	f002 fbd7 	bl	80052b8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	2105      	movs	r1, #5
 8002b0e:	2014      	movs	r0, #20
 8002b10:	f001 ffa6 	bl	8004a60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002b14:	2014      	movs	r0, #20
 8002b16:	f001 ffbf 	bl	8004a98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8002b1a:	bf00      	nop
 8002b1c:	3728      	adds	r7, #40	; 0x28
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	40006400 	.word	0x40006400
 8002b28:	40023800 	.word	0x40023800
 8002b2c:	40020000 	.word	0x40020000
 8002b30:	40020400 	.word	0x40020400

08002b34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	607b      	str	r3, [r7, #4]
 8002b3e:	4b27      	ldr	r3, [pc, #156]	; (8002bdc <MX_DMA_Init+0xa8>)
 8002b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b42:	4a26      	ldr	r2, [pc, #152]	; (8002bdc <MX_DMA_Init+0xa8>)
 8002b44:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b48:	6313      	str	r3, [r2, #48]	; 0x30
 8002b4a:	4b24      	ldr	r3, [pc, #144]	; (8002bdc <MX_DMA_Init+0xa8>)
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b52:	607b      	str	r3, [r7, #4]
 8002b54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b56:	2300      	movs	r3, #0
 8002b58:	603b      	str	r3, [r7, #0]
 8002b5a:	4b20      	ldr	r3, [pc, #128]	; (8002bdc <MX_DMA_Init+0xa8>)
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5e:	4a1f      	ldr	r2, [pc, #124]	; (8002bdc <MX_DMA_Init+0xa8>)
 8002b60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b64:	6313      	str	r3, [r2, #48]	; 0x30
 8002b66:	4b1d      	ldr	r3, [pc, #116]	; (8002bdc <MX_DMA_Init+0xa8>)
 8002b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b6e:	603b      	str	r3, [r7, #0]
 8002b70:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8002b72:	2200      	movs	r2, #0
 8002b74:	2105      	movs	r1, #5
 8002b76:	200c      	movs	r0, #12
 8002b78:	f001 ff72 	bl	8004a60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002b7c:	200c      	movs	r0, #12
 8002b7e:	f001 ff8b 	bl	8004a98 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8002b82:	2200      	movs	r2, #0
 8002b84:	2105      	movs	r1, #5
 8002b86:	200e      	movs	r0, #14
 8002b88:	f001 ff6a 	bl	8004a60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002b8c:	200e      	movs	r0, #14
 8002b8e:	f001 ff83 	bl	8004a98 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8002b92:	2200      	movs	r2, #0
 8002b94:	2105      	movs	r1, #5
 8002b96:	203a      	movs	r0, #58	; 0x3a
 8002b98:	f001 ff62 	bl	8004a60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002b9c:	203a      	movs	r0, #58	; 0x3a
 8002b9e:	f001 ff7b 	bl	8004a98 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	2105      	movs	r1, #5
 8002ba6:	2044      	movs	r0, #68	; 0x44
 8002ba8:	f001 ff5a 	bl	8004a60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8002bac:	2044      	movs	r0, #68	; 0x44
 8002bae:	f001 ff73 	bl	8004a98 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	2105      	movs	r1, #5
 8002bb6:	2045      	movs	r0, #69	; 0x45
 8002bb8:	f001 ff52 	bl	8004a60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002bbc:	2045      	movs	r0, #69	; 0x45
 8002bbe:	f001 ff6b 	bl	8004a98 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	2105      	movs	r1, #5
 8002bc6:	2046      	movs	r0, #70	; 0x46
 8002bc8:	f001 ff4a 	bl	8004a60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002bcc:	2046      	movs	r0, #70	; 0x46
 8002bce:	f001 ff63 	bl	8004a98 <HAL_NVIC_EnableIRQ>

}
 8002bd2:	bf00      	nop
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	40023800 	.word	0x40023800

08002be0 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
	TIM5->CR1 = 0b1;
 8002be4:	4b03      	ldr	r3, [pc, #12]	; (8002bf4 <configureTimerForRunTimeStats+0x14>)
 8002be6:	2201      	movs	r2, #1
 8002be8:	601a      	str	r2, [r3, #0]
}
 8002bea:	bf00      	nop
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr
 8002bf4:	40000c00 	.word	0x40000c00

08002bf8 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
return TIM5->CNT;
 8002bfc:	4b03      	ldr	r3, [pc, #12]	; (8002c0c <getRunTimeCounterValue+0x14>)
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	40000c00 	.word	0x40000c00

08002c10 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	4a07      	ldr	r2, [pc, #28]	; (8002c3c <vApplicationGetIdleTaskMemory+0x2c>)
 8002c20:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	4a06      	ldr	r2, [pc, #24]	; (8002c40 <vApplicationGetIdleTaskMemory+0x30>)
 8002c26:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2280      	movs	r2, #128	; 0x80
 8002c2c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002c2e:	bf00      	nop
 8002c30:	3714      	adds	r7, #20
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	200060bc 	.word	0x200060bc
 8002c40:	20006114 	.word	0x20006114

08002c44 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002c44:	b5b0      	push	{r4, r5, r7, lr}
 8002c46:	b088      	sub	sp, #32
 8002c48:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128, defaultTaskBuffer, &defaultTaskControlBlock);
 8002c4a:	4b0a      	ldr	r3, [pc, #40]	; (8002c74 <MX_FREERTOS_Init+0x30>)
 8002c4c:	1d3c      	adds	r4, r7, #4
 8002c4e:	461d      	mov	r5, r3
 8002c50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c54:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002c58:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002c5c:	1d3b      	adds	r3, r7, #4
 8002c5e:	2100      	movs	r1, #0
 8002c60:	4618      	mov	r0, r3
 8002c62:	f006 fbea 	bl	800943a <osThreadCreate>
 8002c66:	4603      	mov	r3, r0
 8002c68:	4a03      	ldr	r2, [pc, #12]	; (8002c78 <MX_FREERTOS_Init+0x34>)
 8002c6a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002c6c:	bf00      	nop
 8002c6e:	3720      	adds	r7, #32
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bdb0      	pop	{r4, r5, r7, pc}
 8002c74:	0800b548 	.word	0x0800b548
 8002c78:	200068c8 	.word	0x200068c8

08002c7c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002c84:	2001      	movs	r0, #1
 8002c86:	f006 fbfd 	bl	8009484 <osDelay>
 8002c8a:	e7fb      	b.n	8002c84 <StartDefaultTask+0x8>

08002c8c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b088      	sub	sp, #32
 8002c90:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c92:	f107 030c 	add.w	r3, r7, #12
 8002c96:	2200      	movs	r2, #0
 8002c98:	601a      	str	r2, [r3, #0]
 8002c9a:	605a      	str	r2, [r3, #4]
 8002c9c:	609a      	str	r2, [r3, #8]
 8002c9e:	60da      	str	r2, [r3, #12]
 8002ca0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	60bb      	str	r3, [r7, #8]
 8002ca6:	4b27      	ldr	r3, [pc, #156]	; (8002d44 <MX_GPIO_Init+0xb8>)
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002caa:	4a26      	ldr	r2, [pc, #152]	; (8002d44 <MX_GPIO_Init+0xb8>)
 8002cac:	f043 0301 	orr.w	r3, r3, #1
 8002cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002cb2:	4b24      	ldr	r3, [pc, #144]	; (8002d44 <MX_GPIO_Init+0xb8>)
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	60bb      	str	r3, [r7, #8]
 8002cbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	607b      	str	r3, [r7, #4]
 8002cc2:	4b20      	ldr	r3, [pc, #128]	; (8002d44 <MX_GPIO_Init+0xb8>)
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc6:	4a1f      	ldr	r2, [pc, #124]	; (8002d44 <MX_GPIO_Init+0xb8>)
 8002cc8:	f043 0304 	orr.w	r3, r3, #4
 8002ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cce:	4b1d      	ldr	r3, [pc, #116]	; (8002d44 <MX_GPIO_Init+0xb8>)
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd2:	f003 0304 	and.w	r3, r3, #4
 8002cd6:	607b      	str	r3, [r7, #4]
 8002cd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cda:	2300      	movs	r3, #0
 8002cdc:	603b      	str	r3, [r7, #0]
 8002cde:	4b19      	ldr	r3, [pc, #100]	; (8002d44 <MX_GPIO_Init+0xb8>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	4a18      	ldr	r2, [pc, #96]	; (8002d44 <MX_GPIO_Init+0xb8>)
 8002ce4:	f043 0302 	orr.w	r3, r3, #2
 8002ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cea:	4b16      	ldr	r3, [pc, #88]	; (8002d44 <MX_GPIO_Init+0xb8>)
 8002cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	603b      	str	r3, [r7, #0]
 8002cf4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GLOBAL_EN_GPIO_Port, GLOBAL_EN_Pin, GPIO_PIN_RESET);
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002cfc:	4812      	ldr	r0, [pc, #72]	; (8002d48 <MX_GPIO_Init+0xbc>)
 8002cfe:	f002 fc6f 	bl	80055e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RUN_PG_Pin;
 8002d02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(RUN_PG_GPIO_Port, &GPIO_InitStruct);
 8002d10:	f107 030c 	add.w	r3, r7, #12
 8002d14:	4619      	mov	r1, r3
 8002d16:	480d      	ldr	r0, [pc, #52]	; (8002d4c <MX_GPIO_Init+0xc0>)
 8002d18:	f002 face 	bl	80052b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GLOBAL_EN_Pin;
 8002d1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002d22:	2311      	movs	r3, #17
 8002d24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d26:	2300      	movs	r3, #0
 8002d28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GLOBAL_EN_GPIO_Port, &GPIO_InitStruct);
 8002d2e:	f107 030c 	add.w	r3, r7, #12
 8002d32:	4619      	mov	r1, r3
 8002d34:	4804      	ldr	r0, [pc, #16]	; (8002d48 <MX_GPIO_Init+0xbc>)
 8002d36:	f002 fabf 	bl	80052b8 <HAL_GPIO_Init>

}
 8002d3a:	bf00      	nop
 8002d3c:	3720      	adds	r7, #32
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	40023800 	.word	0x40023800
 8002d48:	40020000 	.word	0x40020000
 8002d4c:	40020400 	.word	0x40020400

08002d50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d54:	f000 ffda 	bl	8003d0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d58:	f000 f822 	bl	8002da0 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d5c:	f7ff ff96 	bl	8002c8c <MX_GPIO_Init>
  MX_DMA_Init();
 8002d60:	f7ff fee8 	bl	8002b34 <MX_DMA_Init>
  MX_TIM8_Init();
 8002d64:	f000 fb68 	bl	8003438 <MX_TIM8_Init>
  MX_TIM2_Init();
 8002d68:	f000 fa7e 	bl	8003268 <MX_TIM2_Init>
  MX_USART6_UART_Init();
 8002d6c:	f000 fd54 	bl	8003818 <MX_USART6_UART_Init>
  MX_USART3_UART_Init();
 8002d70:	f000 fd28 	bl	80037c4 <MX_USART3_UART_Init>
  MX_QUADSPI_Init();
 8002d74:	f000 f89a 	bl	8002eac <MX_QUADSPI_Init>
  MX_TIM3_Init();
 8002d78:	f000 fac2 	bl	8003300 <MX_TIM3_Init>
  MX_CAN1_Init();
 8002d7c:	f7ff fe32 	bl	80029e4 <MX_CAN1_Init>
  MX_USART1_UART_Init();
 8002d80:	f000 fcf6 	bl	8003770 <MX_USART1_UART_Init>
  MX_TIM5_Init();
 8002d84:	f000 fb0a 	bl	800339c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */



  threads_init();
 8002d88:	f7ff fdce 	bl	8002928 <threads_init>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8002d8c:	f7ff ff5a 	bl	8002c44 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8002d90:	f006 fb4c 	bl	800942c <osKernelStart>



  while (1)
  {
	osDelay(1000);
 8002d94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d98:	f006 fb74 	bl	8009484 <osDelay>
 8002d9c:	e7fa      	b.n	8002d94 <main+0x44>
	...

08002da0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b094      	sub	sp, #80	; 0x50
 8002da4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002da6:	f107 031c 	add.w	r3, r7, #28
 8002daa:	2234      	movs	r2, #52	; 0x34
 8002dac:	2100      	movs	r1, #0
 8002dae:	4618      	mov	r0, r3
 8002db0:	f008 fba4 	bl	800b4fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002db4:	f107 0308 	add.w	r3, r7, #8
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	605a      	str	r2, [r3, #4]
 8002dbe:	609a      	str	r2, [r3, #8]
 8002dc0:	60da      	str	r2, [r3, #12]
 8002dc2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	607b      	str	r3, [r7, #4]
 8002dc8:	4b29      	ldr	r3, [pc, #164]	; (8002e70 <SystemClock_Config+0xd0>)
 8002dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dcc:	4a28      	ldr	r2, [pc, #160]	; (8002e70 <SystemClock_Config+0xd0>)
 8002dce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dd2:	6413      	str	r3, [r2, #64]	; 0x40
 8002dd4:	4b26      	ldr	r3, [pc, #152]	; (8002e70 <SystemClock_Config+0xd0>)
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ddc:	607b      	str	r3, [r7, #4]
 8002dde:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002de0:	2300      	movs	r3, #0
 8002de2:	603b      	str	r3, [r7, #0]
 8002de4:	4b23      	ldr	r3, [pc, #140]	; (8002e74 <SystemClock_Config+0xd4>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002dec:	4a21      	ldr	r2, [pc, #132]	; (8002e74 <SystemClock_Config+0xd4>)
 8002dee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002df2:	6013      	str	r3, [r2, #0]
 8002df4:	4b1f      	ldr	r3, [pc, #124]	; (8002e74 <SystemClock_Config+0xd4>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002dfc:	603b      	str	r3, [r7, #0]
 8002dfe:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002e00:	2302      	movs	r3, #2
 8002e02:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e04:	2301      	movs	r3, #1
 8002e06:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002e08:	2310      	movs	r3, #16
 8002e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002e10:	2300      	movs	r3, #0
 8002e12:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002e14:	2308      	movs	r3, #8
 8002e16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002e18:	2348      	movs	r3, #72	; 0x48
 8002e1a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002e20:	2303      	movs	r3, #3
 8002e22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002e24:	2302      	movs	r3, #2
 8002e26:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e28:	f107 031c 	add.w	r3, r7, #28
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f003 fdfb 	bl	8006a28 <HAL_RCC_OscConfig>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002e38:	f000 f830 	bl	8002e9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e3c:	230f      	movs	r3, #15
 8002e3e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e40:	2302      	movs	r3, #2
 8002e42:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e44:	2300      	movs	r3, #0
 8002e46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002e48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e4c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002e52:	f107 0308 	add.w	r3, r7, #8
 8002e56:	2102      	movs	r1, #2
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f003 fb3d 	bl	80064d8 <HAL_RCC_ClockConfig>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8002e64:	f000 f81a 	bl	8002e9c <Error_Handler>
  }
}
 8002e68:	bf00      	nop
 8002e6a:	3750      	adds	r7, #80	; 0x50
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	40023800 	.word	0x40023800
 8002e74:	40007000 	.word	0x40007000

08002e78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a04      	ldr	r2, [pc, #16]	; (8002e98 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d101      	bne.n	8002e8e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002e8a:	f000 ff61 	bl	8003d50 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002e8e:	bf00      	nop
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	40010000 	.word	0x40010000

08002e9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002ea0:	bf00      	nop
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
	...

08002eac <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8002eb0:	4b12      	ldr	r3, [pc, #72]	; (8002efc <MX_QUADSPI_Init+0x50>)
 8002eb2:	4a13      	ldr	r2, [pc, #76]	; (8002f00 <MX_QUADSPI_Init+0x54>)
 8002eb4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 100;
 8002eb6:	4b11      	ldr	r3, [pc, #68]	; (8002efc <MX_QUADSPI_Init+0x50>)
 8002eb8:	2264      	movs	r2, #100	; 0x64
 8002eba:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8002ebc:	4b0f      	ldr	r3, [pc, #60]	; (8002efc <MX_QUADSPI_Init+0x50>)
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8002ec2:	4b0e      	ldr	r3, [pc, #56]	; (8002efc <MX_QUADSPI_Init+0x50>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 26;
 8002ec8:	4b0c      	ldr	r3, [pc, #48]	; (8002efc <MX_QUADSPI_Init+0x50>)
 8002eca:	221a      	movs	r2, #26
 8002ecc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8002ece:	4b0b      	ldr	r3, [pc, #44]	; (8002efc <MX_QUADSPI_Init+0x50>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8002ed4:	4b09      	ldr	r3, [pc, #36]	; (8002efc <MX_QUADSPI_Init+0x50>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8002eda:	4b08      	ldr	r3, [pc, #32]	; (8002efc <MX_QUADSPI_Init+0x50>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8002ee0:	4b06      	ldr	r3, [pc, #24]	; (8002efc <MX_QUADSPI_Init+0x50>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8002ee6:	4805      	ldr	r0, [pc, #20]	; (8002efc <MX_QUADSPI_Init+0x50>)
 8002ee8:	f002 fb94 	bl	8005614 <HAL_QSPI_Init>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8002ef2:	f7ff ffd3 	bl	8002e9c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8002ef6:	bf00      	nop
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	20006b24 	.word	0x20006b24
 8002f00:	a0001000 	.word	0xa0001000

08002f04 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b08a      	sub	sp, #40	; 0x28
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f0c:	f107 0314 	add.w	r3, r7, #20
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	605a      	str	r2, [r3, #4]
 8002f16:	609a      	str	r2, [r3, #8]
 8002f18:	60da      	str	r2, [r3, #12]
 8002f1a:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a34      	ldr	r2, [pc, #208]	; (8002ff4 <HAL_QSPI_MspInit+0xf0>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d162      	bne.n	8002fec <HAL_QSPI_MspInit+0xe8>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002f26:	2300      	movs	r3, #0
 8002f28:	613b      	str	r3, [r7, #16]
 8002f2a:	4b33      	ldr	r3, [pc, #204]	; (8002ff8 <HAL_QSPI_MspInit+0xf4>)
 8002f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2e:	4a32      	ldr	r2, [pc, #200]	; (8002ff8 <HAL_QSPI_MspInit+0xf4>)
 8002f30:	f043 0302 	orr.w	r3, r3, #2
 8002f34:	6393      	str	r3, [r2, #56]	; 0x38
 8002f36:	4b30      	ldr	r3, [pc, #192]	; (8002ff8 <HAL_QSPI_MspInit+0xf4>)
 8002f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	613b      	str	r3, [r7, #16]
 8002f40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f42:	2300      	movs	r3, #0
 8002f44:	60fb      	str	r3, [r7, #12]
 8002f46:	4b2c      	ldr	r3, [pc, #176]	; (8002ff8 <HAL_QSPI_MspInit+0xf4>)
 8002f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4a:	4a2b      	ldr	r2, [pc, #172]	; (8002ff8 <HAL_QSPI_MspInit+0xf4>)
 8002f4c:	f043 0302 	orr.w	r3, r3, #2
 8002f50:	6313      	str	r3, [r2, #48]	; 0x30
 8002f52:	4b29      	ldr	r3, [pc, #164]	; (8002ff8 <HAL_QSPI_MspInit+0xf4>)
 8002f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	60fb      	str	r3, [r7, #12]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f5e:	2300      	movs	r3, #0
 8002f60:	60bb      	str	r3, [r7, #8]
 8002f62:	4b25      	ldr	r3, [pc, #148]	; (8002ff8 <HAL_QSPI_MspInit+0xf4>)
 8002f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f66:	4a24      	ldr	r2, [pc, #144]	; (8002ff8 <HAL_QSPI_MspInit+0xf4>)
 8002f68:	f043 0304 	orr.w	r3, r3, #4
 8002f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f6e:	4b22      	ldr	r3, [pc, #136]	; (8002ff8 <HAL_QSPI_MspInit+0xf4>)
 8002f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f72:	f003 0304 	and.w	r3, r3, #4
 8002f76:	60bb      	str	r3, [r7, #8]
 8002f78:	68bb      	ldr	r3, [r7, #8]
    PB2     ------> QUADSPI_CLK
    PC9     ------> QUADSPI_BK1_IO0
    PC10     ------> QUADSPI_BK1_IO1
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002f7a:	2304      	movs	r3, #4
 8002f7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f7e:	2302      	movs	r3, #2
 8002f80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f82:	2300      	movs	r3, #0
 8002f84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f86:	2303      	movs	r3, #3
 8002f88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8002f8a:	2309      	movs	r3, #9
 8002f8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f8e:	f107 0314 	add.w	r3, r7, #20
 8002f92:	4619      	mov	r1, r3
 8002f94:	4819      	ldr	r0, [pc, #100]	; (8002ffc <HAL_QSPI_MspInit+0xf8>)
 8002f96:	f002 f98f 	bl	80052b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002f9a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002f9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8002fac:	2309      	movs	r3, #9
 8002fae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fb0:	f107 0314 	add.w	r3, r7, #20
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	4812      	ldr	r0, [pc, #72]	; (8003000 <HAL_QSPI_MspInit+0xfc>)
 8002fb8:	f002 f97e 	bl	80052b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002fbc:	2340      	movs	r3, #64	; 0x40
 8002fbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8002fcc:	230a      	movs	r3, #10
 8002fce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fd0:	f107 0314 	add.w	r3, r7, #20
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	4809      	ldr	r0, [pc, #36]	; (8002ffc <HAL_QSPI_MspInit+0xf8>)
 8002fd8:	f002 f96e 	bl	80052b8 <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 5, 0);
 8002fdc:	2200      	movs	r2, #0
 8002fde:	2105      	movs	r1, #5
 8002fe0:	205c      	movs	r0, #92	; 0x5c
 8002fe2:	f001 fd3d 	bl	8004a60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8002fe6:	205c      	movs	r0, #92	; 0x5c
 8002fe8:	f001 fd56 	bl	8004a98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8002fec:	bf00      	nop
 8002fee:	3728      	adds	r7, #40	; 0x28
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	a0001000 	.word	0xa0001000
 8002ff8:	40023800 	.word	0x40023800
 8002ffc:	40020400 	.word	0x40020400
 8003000:	40020800 	.word	0x40020800

08003004 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800300a:	2300      	movs	r3, #0
 800300c:	607b      	str	r3, [r7, #4]
 800300e:	4b12      	ldr	r3, [pc, #72]	; (8003058 <HAL_MspInit+0x54>)
 8003010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003012:	4a11      	ldr	r2, [pc, #68]	; (8003058 <HAL_MspInit+0x54>)
 8003014:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003018:	6453      	str	r3, [r2, #68]	; 0x44
 800301a:	4b0f      	ldr	r3, [pc, #60]	; (8003058 <HAL_MspInit+0x54>)
 800301c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003022:	607b      	str	r3, [r7, #4]
 8003024:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003026:	2300      	movs	r3, #0
 8003028:	603b      	str	r3, [r7, #0]
 800302a:	4b0b      	ldr	r3, [pc, #44]	; (8003058 <HAL_MspInit+0x54>)
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	4a0a      	ldr	r2, [pc, #40]	; (8003058 <HAL_MspInit+0x54>)
 8003030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003034:	6413      	str	r3, [r2, #64]	; 0x40
 8003036:	4b08      	ldr	r3, [pc, #32]	; (8003058 <HAL_MspInit+0x54>)
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800303e:	603b      	str	r3, [r7, #0]
 8003040:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003042:	2200      	movs	r2, #0
 8003044:	210f      	movs	r1, #15
 8003046:	f06f 0001 	mvn.w	r0, #1
 800304a:	f001 fd09 	bl	8004a60 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800304e:	bf00      	nop
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	40023800 	.word	0x40023800

0800305c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b08c      	sub	sp, #48	; 0x30
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003064:	2300      	movs	r3, #0
 8003066:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003068:	2300      	movs	r3, #0
 800306a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800306c:	2200      	movs	r2, #0
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	2019      	movs	r0, #25
 8003072:	f001 fcf5 	bl	8004a60 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003076:	2019      	movs	r0, #25
 8003078:	f001 fd0e 	bl	8004a98 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800307c:	2300      	movs	r3, #0
 800307e:	60fb      	str	r3, [r7, #12]
 8003080:	4b1e      	ldr	r3, [pc, #120]	; (80030fc <HAL_InitTick+0xa0>)
 8003082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003084:	4a1d      	ldr	r2, [pc, #116]	; (80030fc <HAL_InitTick+0xa0>)
 8003086:	f043 0301 	orr.w	r3, r3, #1
 800308a:	6453      	str	r3, [r2, #68]	; 0x44
 800308c:	4b1b      	ldr	r3, [pc, #108]	; (80030fc <HAL_InitTick+0xa0>)
 800308e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003090:	f003 0301 	and.w	r3, r3, #1
 8003094:	60fb      	str	r3, [r7, #12]
 8003096:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003098:	f107 0210 	add.w	r2, r7, #16
 800309c:	f107 0314 	add.w	r3, r7, #20
 80030a0:	4611      	mov	r1, r2
 80030a2:	4618      	mov	r0, r3
 80030a4:	f003 fb32 	bl	800670c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80030a8:	f003 fb1c 	bl	80066e4 <HAL_RCC_GetPCLK2Freq>
 80030ac:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80030ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b0:	4a13      	ldr	r2, [pc, #76]	; (8003100 <HAL_InitTick+0xa4>)
 80030b2:	fba2 2303 	umull	r2, r3, r2, r3
 80030b6:	0c9b      	lsrs	r3, r3, #18
 80030b8:	3b01      	subs	r3, #1
 80030ba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80030bc:	4b11      	ldr	r3, [pc, #68]	; (8003104 <HAL_InitTick+0xa8>)
 80030be:	4a12      	ldr	r2, [pc, #72]	; (8003108 <HAL_InitTick+0xac>)
 80030c0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80030c2:	4b10      	ldr	r3, [pc, #64]	; (8003104 <HAL_InitTick+0xa8>)
 80030c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80030c8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80030ca:	4a0e      	ldr	r2, [pc, #56]	; (8003104 <HAL_InitTick+0xa8>)
 80030cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ce:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80030d0:	4b0c      	ldr	r3, [pc, #48]	; (8003104 <HAL_InitTick+0xa8>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030d6:	4b0b      	ldr	r3, [pc, #44]	; (8003104 <HAL_InitTick+0xa8>)
 80030d8:	2200      	movs	r2, #0
 80030da:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80030dc:	4809      	ldr	r0, [pc, #36]	; (8003104 <HAL_InitTick+0xa8>)
 80030de:	f003 ff41 	bl	8006f64 <HAL_TIM_Base_Init>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d104      	bne.n	80030f2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80030e8:	4806      	ldr	r0, [pc, #24]	; (8003104 <HAL_InitTick+0xa8>)
 80030ea:	f003 ff8b 	bl	8007004 <HAL_TIM_Base_Start_IT>
 80030ee:	4603      	mov	r3, r0
 80030f0:	e000      	b.n	80030f4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3730      	adds	r7, #48	; 0x30
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	40023800 	.word	0x40023800
 8003100:	431bde83 	.word	0x431bde83
 8003104:	20006b70 	.word	0x20006b70
 8003108:	40010000 	.word	0x40010000

0800310c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003110:	bf00      	nop
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr

0800311a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800311a:	b580      	push	{r7, lr}
 800311c:	af00      	add	r7, sp, #0
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */

	  led_set_color(LED_WHITE);
 800311e:	222f      	movs	r2, #47	; 0x2f
 8003120:	212f      	movs	r1, #47	; 0x2f
 8003122:	202f      	movs	r0, #47	; 0x2f
 8003124:	f7fe fee4 	bl	8001ef0 <led_set_color>
 8003128:	e7f9      	b.n	800311e <HardFault_Handler+0x4>

0800312a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800312a:	b480      	push	{r7}
 800312c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800312e:	e7fe      	b.n	800312e <MemManage_Handler+0x4>

08003130 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003134:	e7fe      	b.n	8003134 <BusFault_Handler+0x4>

08003136 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003136:	b480      	push	{r7}
 8003138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800313a:	e7fe      	b.n	800313a <UsageFault_Handler+0x4>

0800313c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003140:	bf00      	nop
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
	...

0800314c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003150:	4802      	ldr	r0, [pc, #8]	; (800315c <DMA1_Stream1_IRQHandler+0x10>)
 8003152:	f001 fe47 	bl	8004de4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003156:	bf00      	nop
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	20006d38 	.word	0x20006d38

08003160 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003164:	4802      	ldr	r0, [pc, #8]	; (8003170 <DMA1_Stream3_IRQHandler+0x10>)
 8003166:	f001 fe3d 	bl	8004de4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800316a:	bf00      	nop
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	20006ddc 	.word	0x20006ddc

08003174 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003178:	4802      	ldr	r0, [pc, #8]	; (8003184 <CAN1_RX0_IRQHandler+0x10>)
 800317a:	f001 f989 	bl	8004490 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800317e:	bf00      	nop
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	200068a0 	.word	0x200068a0

08003188 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800318c:	4802      	ldr	r0, [pc, #8]	; (8003198 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800318e:	f004 f802 	bl	8007196 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003192:	bf00      	nop
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	20006b70 	.word	0x20006b70

0800319c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80031a0:	4802      	ldr	r0, [pc, #8]	; (80031ac <USART1_IRQHandler+0x10>)
 80031a2:	f005 f895 	bl	80082d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80031a6:	bf00      	nop
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	20006f5c 	.word	0x20006f5c

080031b0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80031b4:	4802      	ldr	r0, [pc, #8]	; (80031c0 <USART3_IRQHandler+0x10>)
 80031b6:	f005 f88b 	bl	80082d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80031ba:	bf00      	nop
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	20006d98 	.word	0x20006d98

080031c4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80031c8:	4802      	ldr	r0, [pc, #8]	; (80031d4 <DMA2_Stream2_IRQHandler+0x10>)
 80031ca:	f001 fe0b 	bl	8004de4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80031ce:	bf00      	nop
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	20006cd8 	.word	0x20006cd8

080031d8 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80031dc:	4802      	ldr	r0, [pc, #8]	; (80031e8 <DMA2_Stream5_IRQHandler+0x10>)
 80031de:	f001 fe01 	bl	8004de4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 80031e2:	bf00      	nop
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	20006efc 	.word	0x20006efc

080031ec <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 80031f0:	4802      	ldr	r0, [pc, #8]	; (80031fc <DMA2_Stream6_IRQHandler+0x10>)
 80031f2:	f001 fdf7 	bl	8004de4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80031f6:	bf00      	nop
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	20006e9c 	.word	0x20006e9c

08003200 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003204:	4802      	ldr	r0, [pc, #8]	; (8003210 <DMA2_Stream7_IRQHandler+0x10>)
 8003206:	f001 fded 	bl	8004de4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800320a:	bf00      	nop
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	20006e3c 	.word	0x20006e3c

08003214 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003218:	4802      	ldr	r0, [pc, #8]	; (8003224 <USART6_IRQHandler+0x10>)
 800321a:	f005 f859 	bl	80082d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800321e:	bf00      	nop
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	20006fa0 	.word	0x20006fa0

08003228 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 800322c:	4802      	ldr	r0, [pc, #8]	; (8003238 <QUADSPI_IRQHandler+0x10>)
 800322e:	f002 fa6d 	bl	800570c <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 8003232:	bf00      	nop
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	20006b24 	.word	0x20006b24

0800323c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003240:	4b08      	ldr	r3, [pc, #32]	; (8003264 <SystemInit+0x28>)
 8003242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003246:	4a07      	ldr	r2, [pc, #28]	; (8003264 <SystemInit+0x28>)
 8003248:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800324c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003250:	4b04      	ldr	r3, [pc, #16]	; (8003264 <SystemInit+0x28>)
 8003252:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003256:	609a      	str	r2, [r3, #8]
#endif
}
 8003258:	bf00      	nop
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	e000ed00 	.word	0xe000ed00

08003268 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b086      	sub	sp, #24
 800326c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800326e:	f107 0308 	add.w	r3, r7, #8
 8003272:	2200      	movs	r2, #0
 8003274:	601a      	str	r2, [r3, #0]
 8003276:	605a      	str	r2, [r3, #4]
 8003278:	609a      	str	r2, [r3, #8]
 800327a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800327c:	463b      	mov	r3, r7
 800327e:	2200      	movs	r2, #0
 8003280:	601a      	str	r2, [r3, #0]
 8003282:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003284:	4b1d      	ldr	r3, [pc, #116]	; (80032fc <MX_TIM2_Init+0x94>)
 8003286:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800328a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 49;
 800328c:	4b1b      	ldr	r3, [pc, #108]	; (80032fc <MX_TIM2_Init+0x94>)
 800328e:	2231      	movs	r2, #49	; 0x31
 8003290:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8003292:	4b1a      	ldr	r3, [pc, #104]	; (80032fc <MX_TIM2_Init+0x94>)
 8003294:	2210      	movs	r2, #16
 8003296:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8003298:	4b18      	ldr	r3, [pc, #96]	; (80032fc <MX_TIM2_Init+0x94>)
 800329a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800329e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032a0:	4b16      	ldr	r3, [pc, #88]	; (80032fc <MX_TIM2_Init+0x94>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032a6:	4b15      	ldr	r3, [pc, #84]	; (80032fc <MX_TIM2_Init+0x94>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80032ac:	4813      	ldr	r0, [pc, #76]	; (80032fc <MX_TIM2_Init+0x94>)
 80032ae:	f003 fe59 	bl	8006f64 <HAL_TIM_Base_Init>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d001      	beq.n	80032bc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80032b8:	f7ff fdf0 	bl	8002e9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80032c2:	f107 0308 	add.w	r3, r7, #8
 80032c6:	4619      	mov	r1, r3
 80032c8:	480c      	ldr	r0, [pc, #48]	; (80032fc <MX_TIM2_Init+0x94>)
 80032ca:	f004 f92b 	bl	8007524 <HAL_TIM_ConfigClockSource>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d001      	beq.n	80032d8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80032d4:	f7ff fde2 	bl	8002e9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032d8:	2300      	movs	r3, #0
 80032da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032dc:	2300      	movs	r3, #0
 80032de:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80032e0:	463b      	mov	r3, r7
 80032e2:	4619      	mov	r1, r3
 80032e4:	4805      	ldr	r0, [pc, #20]	; (80032fc <MX_TIM2_Init+0x94>)
 80032e6:	f004 fdad 	bl	8007e44 <HAL_TIMEx_MasterConfigSynchronization>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d001      	beq.n	80032f4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80032f0:	f7ff fdd4 	bl	8002e9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80032f4:	bf00      	nop
 80032f6:	3718      	adds	r7, #24
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	20006c90 	.word	0x20006c90

08003300 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003306:	f107 0308 	add.w	r3, r7, #8
 800330a:	2200      	movs	r2, #0
 800330c:	601a      	str	r2, [r3, #0]
 800330e:	605a      	str	r2, [r3, #4]
 8003310:	609a      	str	r2, [r3, #8]
 8003312:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003314:	463b      	mov	r3, r7
 8003316:	2200      	movs	r2, #0
 8003318:	601a      	str	r2, [r3, #0]
 800331a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800331c:	4b1d      	ldr	r3, [pc, #116]	; (8003394 <MX_TIM3_Init+0x94>)
 800331e:	4a1e      	ldr	r2, [pc, #120]	; (8003398 <MX_TIM3_Init+0x98>)
 8003320:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003322:	4b1c      	ldr	r3, [pc, #112]	; (8003394 <MX_TIM3_Init+0x94>)
 8003324:	2200      	movs	r2, #0
 8003326:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003328:	4b1a      	ldr	r3, [pc, #104]	; (8003394 <MX_TIM3_Init+0x94>)
 800332a:	2200      	movs	r2, #0
 800332c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1125;
 800332e:	4b19      	ldr	r3, [pc, #100]	; (8003394 <MX_TIM3_Init+0x94>)
 8003330:	f240 4265 	movw	r2, #1125	; 0x465
 8003334:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003336:	4b17      	ldr	r3, [pc, #92]	; (8003394 <MX_TIM3_Init+0x94>)
 8003338:	2200      	movs	r2, #0
 800333a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800333c:	4b15      	ldr	r3, [pc, #84]	; (8003394 <MX_TIM3_Init+0x94>)
 800333e:	2200      	movs	r2, #0
 8003340:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003342:	4814      	ldr	r0, [pc, #80]	; (8003394 <MX_TIM3_Init+0x94>)
 8003344:	f003 fe0e 	bl	8006f64 <HAL_TIM_Base_Init>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800334e:	f7ff fda5 	bl	8002e9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003352:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003356:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003358:	f107 0308 	add.w	r3, r7, #8
 800335c:	4619      	mov	r1, r3
 800335e:	480d      	ldr	r0, [pc, #52]	; (8003394 <MX_TIM3_Init+0x94>)
 8003360:	f004 f8e0 	bl	8007524 <HAL_TIM_ConfigClockSource>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800336a:	f7ff fd97 	bl	8002e9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800336e:	2320      	movs	r3, #32
 8003370:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003372:	2300      	movs	r3, #0
 8003374:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003376:	463b      	mov	r3, r7
 8003378:	4619      	mov	r1, r3
 800337a:	4806      	ldr	r0, [pc, #24]	; (8003394 <MX_TIM3_Init+0x94>)
 800337c:	f004 fd62 	bl	8007e44 <HAL_TIMEx_MasterConfigSynchronization>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8003386:	f7ff fd89 	bl	8002e9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800338a:	bf00      	nop
 800338c:	3718      	adds	r7, #24
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	20006c48 	.word	0x20006c48
 8003398:	40000400 	.word	0x40000400

0800339c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033a2:	f107 0308 	add.w	r3, r7, #8
 80033a6:	2200      	movs	r2, #0
 80033a8:	601a      	str	r2, [r3, #0]
 80033aa:	605a      	str	r2, [r3, #4]
 80033ac:	609a      	str	r2, [r3, #8]
 80033ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033b0:	463b      	mov	r3, r7
 80033b2:	2200      	movs	r2, #0
 80033b4:	601a      	str	r2, [r3, #0]
 80033b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80033b8:	4b1d      	ldr	r3, [pc, #116]	; (8003430 <MX_TIM5_Init+0x94>)
 80033ba:	4a1e      	ldr	r2, [pc, #120]	; (8003434 <MX_TIM5_Init+0x98>)
 80033bc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 7199;
 80033be:	4b1c      	ldr	r3, [pc, #112]	; (8003430 <MX_TIM5_Init+0x94>)
 80033c0:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80033c4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033c6:	4b1a      	ldr	r3, [pc, #104]	; (8003430 <MX_TIM5_Init+0x94>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80033cc:	4b18      	ldr	r3, [pc, #96]	; (8003430 <MX_TIM5_Init+0x94>)
 80033ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80033d2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033d4:	4b16      	ldr	r3, [pc, #88]	; (8003430 <MX_TIM5_Init+0x94>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033da:	4b15      	ldr	r3, [pc, #84]	; (8003430 <MX_TIM5_Init+0x94>)
 80033dc:	2200      	movs	r2, #0
 80033de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80033e0:	4813      	ldr	r0, [pc, #76]	; (8003430 <MX_TIM5_Init+0x94>)
 80033e2:	f003 fdbf 	bl	8006f64 <HAL_TIM_Base_Init>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d001      	beq.n	80033f0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80033ec:	f7ff fd56 	bl	8002e9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80033f6:	f107 0308 	add.w	r3, r7, #8
 80033fa:	4619      	mov	r1, r3
 80033fc:	480c      	ldr	r0, [pc, #48]	; (8003430 <MX_TIM5_Init+0x94>)
 80033fe:	f004 f891 	bl	8007524 <HAL_TIM_ConfigClockSource>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d001      	beq.n	800340c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8003408:	f7ff fd48 	bl	8002e9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800340c:	2300      	movs	r3, #0
 800340e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003410:	2300      	movs	r3, #0
 8003412:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003414:	463b      	mov	r3, r7
 8003416:	4619      	mov	r1, r3
 8003418:	4805      	ldr	r0, [pc, #20]	; (8003430 <MX_TIM5_Init+0x94>)
 800341a:	f004 fd13 	bl	8007e44 <HAL_TIMEx_MasterConfigSynchronization>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d001      	beq.n	8003428 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8003424:	f7ff fd3a 	bl	8002e9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003428:	bf00      	nop
 800342a:	3718      	adds	r7, #24
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	20006c00 	.word	0x20006c00
 8003434:	40000c00 	.word	0x40000c00

08003438 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b096      	sub	sp, #88	; 0x58
 800343c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800343e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003442:	2200      	movs	r2, #0
 8003444:	601a      	str	r2, [r3, #0]
 8003446:	605a      	str	r2, [r3, #4]
 8003448:	609a      	str	r2, [r3, #8]
 800344a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800344c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]
 8003454:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003456:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800345a:	2200      	movs	r2, #0
 800345c:	601a      	str	r2, [r3, #0]
 800345e:	605a      	str	r2, [r3, #4]
 8003460:	609a      	str	r2, [r3, #8]
 8003462:	60da      	str	r2, [r3, #12]
 8003464:	611a      	str	r2, [r3, #16]
 8003466:	615a      	str	r2, [r3, #20]
 8003468:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800346a:	1d3b      	adds	r3, r7, #4
 800346c:	2220      	movs	r2, #32
 800346e:	2100      	movs	r1, #0
 8003470:	4618      	mov	r0, r3
 8003472:	f008 f843 	bl	800b4fc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003476:	4b4b      	ldr	r3, [pc, #300]	; (80035a4 <MX_TIM8_Init+0x16c>)
 8003478:	4a4b      	ldr	r2, [pc, #300]	; (80035a8 <MX_TIM8_Init+0x170>)
 800347a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800347c:	4b49      	ldr	r3, [pc, #292]	; (80035a4 <MX_TIM8_Init+0x16c>)
 800347e:	2200      	movs	r2, #0
 8003480:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003482:	4b48      	ldr	r3, [pc, #288]	; (80035a4 <MX_TIM8_Init+0x16c>)
 8003484:	2200      	movs	r2, #0
 8003486:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 255;
 8003488:	4b46      	ldr	r3, [pc, #280]	; (80035a4 <MX_TIM8_Init+0x16c>)
 800348a:	22ff      	movs	r2, #255	; 0xff
 800348c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800348e:	4b45      	ldr	r3, [pc, #276]	; (80035a4 <MX_TIM8_Init+0x16c>)
 8003490:	2200      	movs	r2, #0
 8003492:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003494:	4b43      	ldr	r3, [pc, #268]	; (80035a4 <MX_TIM8_Init+0x16c>)
 8003496:	2200      	movs	r2, #0
 8003498:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800349a:	4b42      	ldr	r3, [pc, #264]	; (80035a4 <MX_TIM8_Init+0x16c>)
 800349c:	2200      	movs	r2, #0
 800349e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80034a0:	4840      	ldr	r0, [pc, #256]	; (80035a4 <MX_TIM8_Init+0x16c>)
 80034a2:	f003 fd5f 	bl	8006f64 <HAL_TIM_Base_Init>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d001      	beq.n	80034b0 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 80034ac:	f7ff fcf6 	bl	8002e9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034b4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80034b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80034ba:	4619      	mov	r1, r3
 80034bc:	4839      	ldr	r0, [pc, #228]	; (80035a4 <MX_TIM8_Init+0x16c>)
 80034be:	f004 f831 	bl	8007524 <HAL_TIM_ConfigClockSource>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d001      	beq.n	80034cc <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 80034c8:	f7ff fce8 	bl	8002e9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80034cc:	4835      	ldr	r0, [pc, #212]	; (80035a4 <MX_TIM8_Init+0x16c>)
 80034ce:	f003 fe09 	bl	80070e4 <HAL_TIM_PWM_Init>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d001      	beq.n	80034dc <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80034d8:	f7ff fce0 	bl	8002e9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034dc:	2300      	movs	r3, #0
 80034de:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034e0:	2300      	movs	r3, #0
 80034e2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80034e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80034e8:	4619      	mov	r1, r3
 80034ea:	482e      	ldr	r0, [pc, #184]	; (80035a4 <MX_TIM8_Init+0x16c>)
 80034ec:	f004 fcaa 	bl	8007e44 <HAL_TIMEx_MasterConfigSynchronization>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 80034f6:	f7ff fcd1 	bl	8002e9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80034fa:	2360      	movs	r3, #96	; 0x60
 80034fc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 128;
 80034fe:	2380      	movs	r3, #128	; 0x80
 8003500:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003502:	2300      	movs	r3, #0
 8003504:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8003506:	2308      	movs	r3, #8
 8003508:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800350a:	2300      	movs	r3, #0
 800350c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800350e:	2300      	movs	r3, #0
 8003510:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003512:	2300      	movs	r3, #0
 8003514:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003516:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800351a:	2200      	movs	r2, #0
 800351c:	4619      	mov	r1, r3
 800351e:	4821      	ldr	r0, [pc, #132]	; (80035a4 <MX_TIM8_Init+0x16c>)
 8003520:	f003 ff42 	bl	80073a8 <HAL_TIM_PWM_ConfigChannel>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 800352a:	f7ff fcb7 	bl	8002e9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800352e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003532:	2204      	movs	r2, #4
 8003534:	4619      	mov	r1, r3
 8003536:	481b      	ldr	r0, [pc, #108]	; (80035a4 <MX_TIM8_Init+0x16c>)
 8003538:	f003 ff36 	bl	80073a8 <HAL_TIM_PWM_ConfigChannel>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d001      	beq.n	8003546 <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 8003542:	f7ff fcab 	bl	8002e9c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8003546:	2300      	movs	r3, #0
 8003548:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800354a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800354e:	2208      	movs	r2, #8
 8003550:	4619      	mov	r1, r3
 8003552:	4814      	ldr	r0, [pc, #80]	; (80035a4 <MX_TIM8_Init+0x16c>)
 8003554:	f003 ff28 	bl	80073a8 <HAL_TIM_PWM_ConfigChannel>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 800355e:	f7ff fc9d 	bl	8002e9c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003562:	2300      	movs	r3, #0
 8003564:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003566:	2300      	movs	r3, #0
 8003568:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800356a:	2300      	movs	r3, #0
 800356c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800356e:	2300      	movs	r3, #0
 8003570:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003572:	2300      	movs	r3, #0
 8003574:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003576:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800357a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800357c:	2300      	movs	r3, #0
 800357e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003580:	1d3b      	adds	r3, r7, #4
 8003582:	4619      	mov	r1, r3
 8003584:	4807      	ldr	r0, [pc, #28]	; (80035a4 <MX_TIM8_Init+0x16c>)
 8003586:	f004 fcd9 	bl	8007f3c <HAL_TIMEx_ConfigBreakDeadTime>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d001      	beq.n	8003594 <MX_TIM8_Init+0x15c>
  {
    Error_Handler();
 8003590:	f7ff fc84 	bl	8002e9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003594:	4803      	ldr	r0, [pc, #12]	; (80035a4 <MX_TIM8_Init+0x16c>)
 8003596:	f000 f891 	bl	80036bc <HAL_TIM_MspPostInit>

}
 800359a:	bf00      	nop
 800359c:	3758      	adds	r7, #88	; 0x58
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	20006bb8 	.word	0x20006bb8
 80035a8:	40010400 	.word	0x40010400

080035ac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b08c      	sub	sp, #48	; 0x30
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035b4:	f107 031c 	add.w	r3, r7, #28
 80035b8:	2200      	movs	r2, #0
 80035ba:	601a      	str	r2, [r3, #0]
 80035bc:	605a      	str	r2, [r3, #4]
 80035be:	609a      	str	r2, [r3, #8]
 80035c0:	60da      	str	r2, [r3, #12]
 80035c2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035cc:	d10e      	bne.n	80035ec <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80035ce:	2300      	movs	r3, #0
 80035d0:	61bb      	str	r3, [r7, #24]
 80035d2:	4b35      	ldr	r3, [pc, #212]	; (80036a8 <HAL_TIM_Base_MspInit+0xfc>)
 80035d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d6:	4a34      	ldr	r2, [pc, #208]	; (80036a8 <HAL_TIM_Base_MspInit+0xfc>)
 80035d8:	f043 0301 	orr.w	r3, r3, #1
 80035dc:	6413      	str	r3, [r2, #64]	; 0x40
 80035de:	4b32      	ldr	r3, [pc, #200]	; (80036a8 <HAL_TIM_Base_MspInit+0xfc>)
 80035e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	61bb      	str	r3, [r7, #24]
 80035e8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80035ea:	e058      	b.n	800369e <HAL_TIM_Base_MspInit+0xf2>
  else if(tim_baseHandle->Instance==TIM3)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a2e      	ldr	r2, [pc, #184]	; (80036ac <HAL_TIM_Base_MspInit+0x100>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d10e      	bne.n	8003614 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80035f6:	2300      	movs	r3, #0
 80035f8:	617b      	str	r3, [r7, #20]
 80035fa:	4b2b      	ldr	r3, [pc, #172]	; (80036a8 <HAL_TIM_Base_MspInit+0xfc>)
 80035fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fe:	4a2a      	ldr	r2, [pc, #168]	; (80036a8 <HAL_TIM_Base_MspInit+0xfc>)
 8003600:	f043 0302 	orr.w	r3, r3, #2
 8003604:	6413      	str	r3, [r2, #64]	; 0x40
 8003606:	4b28      	ldr	r3, [pc, #160]	; (80036a8 <HAL_TIM_Base_MspInit+0xfc>)
 8003608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	617b      	str	r3, [r7, #20]
 8003610:	697b      	ldr	r3, [r7, #20]
}
 8003612:	e044      	b.n	800369e <HAL_TIM_Base_MspInit+0xf2>
  else if(tim_baseHandle->Instance==TIM5)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a25      	ldr	r2, [pc, #148]	; (80036b0 <HAL_TIM_Base_MspInit+0x104>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d12c      	bne.n	8003678 <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800361e:	2300      	movs	r3, #0
 8003620:	613b      	str	r3, [r7, #16]
 8003622:	4b21      	ldr	r3, [pc, #132]	; (80036a8 <HAL_TIM_Base_MspInit+0xfc>)
 8003624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003626:	4a20      	ldr	r2, [pc, #128]	; (80036a8 <HAL_TIM_Base_MspInit+0xfc>)
 8003628:	f043 0308 	orr.w	r3, r3, #8
 800362c:	6413      	str	r3, [r2, #64]	; 0x40
 800362e:	4b1e      	ldr	r3, [pc, #120]	; (80036a8 <HAL_TIM_Base_MspInit+0xfc>)
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	f003 0308 	and.w	r3, r3, #8
 8003636:	613b      	str	r3, [r7, #16]
 8003638:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800363a:	2300      	movs	r3, #0
 800363c:	60fb      	str	r3, [r7, #12]
 800363e:	4b1a      	ldr	r3, [pc, #104]	; (80036a8 <HAL_TIM_Base_MspInit+0xfc>)
 8003640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003642:	4a19      	ldr	r2, [pc, #100]	; (80036a8 <HAL_TIM_Base_MspInit+0xfc>)
 8003644:	f043 0301 	orr.w	r3, r3, #1
 8003648:	6313      	str	r3, [r2, #48]	; 0x30
 800364a:	4b17      	ldr	r3, [pc, #92]	; (80036a8 <HAL_TIM_Base_MspInit+0xfc>)
 800364c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	60fb      	str	r3, [r7, #12]
 8003654:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003656:	230f      	movs	r3, #15
 8003658:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800365a:	2302      	movs	r3, #2
 800365c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800365e:	2300      	movs	r3, #0
 8003660:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003662:	2300      	movs	r3, #0
 8003664:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003666:	2302      	movs	r3, #2
 8003668:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800366a:	f107 031c 	add.w	r3, r7, #28
 800366e:	4619      	mov	r1, r3
 8003670:	4810      	ldr	r0, [pc, #64]	; (80036b4 <HAL_TIM_Base_MspInit+0x108>)
 8003672:	f001 fe21 	bl	80052b8 <HAL_GPIO_Init>
}
 8003676:	e012      	b.n	800369e <HAL_TIM_Base_MspInit+0xf2>
  else if(tim_baseHandle->Instance==TIM8)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a0e      	ldr	r2, [pc, #56]	; (80036b8 <HAL_TIM_Base_MspInit+0x10c>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d10d      	bne.n	800369e <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003682:	2300      	movs	r3, #0
 8003684:	60bb      	str	r3, [r7, #8]
 8003686:	4b08      	ldr	r3, [pc, #32]	; (80036a8 <HAL_TIM_Base_MspInit+0xfc>)
 8003688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368a:	4a07      	ldr	r2, [pc, #28]	; (80036a8 <HAL_TIM_Base_MspInit+0xfc>)
 800368c:	f043 0302 	orr.w	r3, r3, #2
 8003690:	6453      	str	r3, [r2, #68]	; 0x44
 8003692:	4b05      	ldr	r3, [pc, #20]	; (80036a8 <HAL_TIM_Base_MspInit+0xfc>)
 8003694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	60bb      	str	r3, [r7, #8]
 800369c:	68bb      	ldr	r3, [r7, #8]
}
 800369e:	bf00      	nop
 80036a0:	3730      	adds	r7, #48	; 0x30
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	40023800 	.word	0x40023800
 80036ac:	40000400 	.word	0x40000400
 80036b0:	40000c00 	.word	0x40000c00
 80036b4:	40020000 	.word	0x40020000
 80036b8:	40010400 	.word	0x40010400

080036bc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b08a      	sub	sp, #40	; 0x28
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036c4:	f107 0314 	add.w	r3, r7, #20
 80036c8:	2200      	movs	r2, #0
 80036ca:	601a      	str	r2, [r3, #0]
 80036cc:	605a      	str	r2, [r3, #4]
 80036ce:	609a      	str	r2, [r3, #8]
 80036d0:	60da      	str	r2, [r3, #12]
 80036d2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a21      	ldr	r2, [pc, #132]	; (8003760 <HAL_TIM_MspPostInit+0xa4>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d13c      	bne.n	8003758 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036de:	2300      	movs	r3, #0
 80036e0:	613b      	str	r3, [r7, #16]
 80036e2:	4b20      	ldr	r3, [pc, #128]	; (8003764 <HAL_TIM_MspPostInit+0xa8>)
 80036e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e6:	4a1f      	ldr	r2, [pc, #124]	; (8003764 <HAL_TIM_MspPostInit+0xa8>)
 80036e8:	f043 0301 	orr.w	r3, r3, #1
 80036ec:	6313      	str	r3, [r2, #48]	; 0x30
 80036ee:	4b1d      	ldr	r3, [pc, #116]	; (8003764 <HAL_TIM_MspPostInit+0xa8>)
 80036f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	613b      	str	r3, [r7, #16]
 80036f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036fa:	2300      	movs	r3, #0
 80036fc:	60fb      	str	r3, [r7, #12]
 80036fe:	4b19      	ldr	r3, [pc, #100]	; (8003764 <HAL_TIM_MspPostInit+0xa8>)
 8003700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003702:	4a18      	ldr	r2, [pc, #96]	; (8003764 <HAL_TIM_MspPostInit+0xa8>)
 8003704:	f043 0302 	orr.w	r3, r3, #2
 8003708:	6313      	str	r3, [r2, #48]	; 0x30
 800370a:	4b16      	ldr	r3, [pc, #88]	; (8003764 <HAL_TIM_MspPostInit+0xa8>)
 800370c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	60fb      	str	r3, [r7, #12]
 8003714:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PA7     ------> TIM8_CH1N
    PB14     ------> TIM8_CH2N
    PB15     ------> TIM8_CH3N
    */
    GPIO_InitStruct.Pin = LED_RED_Pin;
 8003716:	2380      	movs	r3, #128	; 0x80
 8003718:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800371a:	2302      	movs	r3, #2
 800371c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800371e:	2300      	movs	r3, #0
 8003720:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003722:	2300      	movs	r3, #0
 8003724:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003726:	2303      	movs	r3, #3
 8003728:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 800372a:	f107 0314 	add.w	r3, r7, #20
 800372e:	4619      	mov	r1, r3
 8003730:	480d      	ldr	r0, [pc, #52]	; (8003768 <HAL_TIM_MspPostInit+0xac>)
 8003732:	f001 fdc1 	bl	80052b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_BLUE_Pin;
 8003736:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800373a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800373c:	2302      	movs	r3, #2
 800373e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003740:	2300      	movs	r3, #0
 8003742:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003744:	2300      	movs	r3, #0
 8003746:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003748:	2303      	movs	r3, #3
 800374a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800374c:	f107 0314 	add.w	r3, r7, #20
 8003750:	4619      	mov	r1, r3
 8003752:	4806      	ldr	r0, [pc, #24]	; (800376c <HAL_TIM_MspPostInit+0xb0>)
 8003754:	f001 fdb0 	bl	80052b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003758:	bf00      	nop
 800375a:	3728      	adds	r7, #40	; 0x28
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	40010400 	.word	0x40010400
 8003764:	40023800 	.word	0x40023800
 8003768:	40020000 	.word	0x40020000
 800376c:	40020400 	.word	0x40020400

08003770 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003774:	4b11      	ldr	r3, [pc, #68]	; (80037bc <MX_USART1_UART_Init+0x4c>)
 8003776:	4a12      	ldr	r2, [pc, #72]	; (80037c0 <MX_USART1_UART_Init+0x50>)
 8003778:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800377a:	4b10      	ldr	r3, [pc, #64]	; (80037bc <MX_USART1_UART_Init+0x4c>)
 800377c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003780:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003782:	4b0e      	ldr	r3, [pc, #56]	; (80037bc <MX_USART1_UART_Init+0x4c>)
 8003784:	2200      	movs	r2, #0
 8003786:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003788:	4b0c      	ldr	r3, [pc, #48]	; (80037bc <MX_USART1_UART_Init+0x4c>)
 800378a:	2200      	movs	r2, #0
 800378c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800378e:	4b0b      	ldr	r3, [pc, #44]	; (80037bc <MX_USART1_UART_Init+0x4c>)
 8003790:	2200      	movs	r2, #0
 8003792:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003794:	4b09      	ldr	r3, [pc, #36]	; (80037bc <MX_USART1_UART_Init+0x4c>)
 8003796:	220c      	movs	r2, #12
 8003798:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800379a:	4b08      	ldr	r3, [pc, #32]	; (80037bc <MX_USART1_UART_Init+0x4c>)
 800379c:	2200      	movs	r2, #0
 800379e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80037a0:	4b06      	ldr	r3, [pc, #24]	; (80037bc <MX_USART1_UART_Init+0x4c>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 80037a6:	4805      	ldr	r0, [pc, #20]	; (80037bc <MX_USART1_UART_Init+0x4c>)
 80037a8:	f004 fca0 	bl	80080ec <HAL_HalfDuplex_Init>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80037b2:	f7ff fb73 	bl	8002e9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80037b6:	bf00      	nop
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	20006f5c 	.word	0x20006f5c
 80037c0:	40011000 	.word	0x40011000

080037c4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80037c8:	4b11      	ldr	r3, [pc, #68]	; (8003810 <MX_USART3_UART_Init+0x4c>)
 80037ca:	4a12      	ldr	r2, [pc, #72]	; (8003814 <MX_USART3_UART_Init+0x50>)
 80037cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80037ce:	4b10      	ldr	r3, [pc, #64]	; (8003810 <MX_USART3_UART_Init+0x4c>)
 80037d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80037d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80037d6:	4b0e      	ldr	r3, [pc, #56]	; (8003810 <MX_USART3_UART_Init+0x4c>)
 80037d8:	2200      	movs	r2, #0
 80037da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80037dc:	4b0c      	ldr	r3, [pc, #48]	; (8003810 <MX_USART3_UART_Init+0x4c>)
 80037de:	2200      	movs	r2, #0
 80037e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80037e2:	4b0b      	ldr	r3, [pc, #44]	; (8003810 <MX_USART3_UART_Init+0x4c>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80037e8:	4b09      	ldr	r3, [pc, #36]	; (8003810 <MX_USART3_UART_Init+0x4c>)
 80037ea:	220c      	movs	r2, #12
 80037ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037ee:	4b08      	ldr	r3, [pc, #32]	; (8003810 <MX_USART3_UART_Init+0x4c>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80037f4:	4b06      	ldr	r3, [pc, #24]	; (8003810 <MX_USART3_UART_Init+0x4c>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80037fa:	4805      	ldr	r0, [pc, #20]	; (8003810 <MX_USART3_UART_Init+0x4c>)
 80037fc:	f004 fc29 	bl	8008052 <HAL_UART_Init>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003806:	f7ff fb49 	bl	8002e9c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800380a:	bf00      	nop
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	20006d98 	.word	0x20006d98
 8003814:	40004800 	.word	0x40004800

08003818 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800381c:	4b11      	ldr	r3, [pc, #68]	; (8003864 <MX_USART6_UART_Init+0x4c>)
 800381e:	4a12      	ldr	r2, [pc, #72]	; (8003868 <MX_USART6_UART_Init+0x50>)
 8003820:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8003822:	4b10      	ldr	r3, [pc, #64]	; (8003864 <MX_USART6_UART_Init+0x4c>)
 8003824:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003828:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800382a:	4b0e      	ldr	r3, [pc, #56]	; (8003864 <MX_USART6_UART_Init+0x4c>)
 800382c:	2200      	movs	r2, #0
 800382e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003830:	4b0c      	ldr	r3, [pc, #48]	; (8003864 <MX_USART6_UART_Init+0x4c>)
 8003832:	2200      	movs	r2, #0
 8003834:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003836:	4b0b      	ldr	r3, [pc, #44]	; (8003864 <MX_USART6_UART_Init+0x4c>)
 8003838:	2200      	movs	r2, #0
 800383a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800383c:	4b09      	ldr	r3, [pc, #36]	; (8003864 <MX_USART6_UART_Init+0x4c>)
 800383e:	220c      	movs	r2, #12
 8003840:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003842:	4b08      	ldr	r3, [pc, #32]	; (8003864 <MX_USART6_UART_Init+0x4c>)
 8003844:	2200      	movs	r2, #0
 8003846:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003848:	4b06      	ldr	r3, [pc, #24]	; (8003864 <MX_USART6_UART_Init+0x4c>)
 800384a:	2200      	movs	r2, #0
 800384c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800384e:	4805      	ldr	r0, [pc, #20]	; (8003864 <MX_USART6_UART_Init+0x4c>)
 8003850:	f004 fbff 	bl	8008052 <HAL_UART_Init>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d001      	beq.n	800385e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800385a:	f7ff fb1f 	bl	8002e9c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800385e:	bf00      	nop
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	20006fa0 	.word	0x20006fa0
 8003868:	40011400 	.word	0x40011400

0800386c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b08e      	sub	sp, #56	; 0x38
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003874:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003878:	2200      	movs	r2, #0
 800387a:	601a      	str	r2, [r3, #0]
 800387c:	605a      	str	r2, [r3, #4]
 800387e:	609a      	str	r2, [r3, #8]
 8003880:	60da      	str	r2, [r3, #12]
 8003882:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a4b      	ldr	r2, [pc, #300]	; (80039b8 <HAL_UART_MspInit+0x14c>)
 800388a:	4293      	cmp	r3, r2
 800388c:	f040 80a2 	bne.w	80039d4 <HAL_UART_MspInit+0x168>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003890:	2300      	movs	r3, #0
 8003892:	623b      	str	r3, [r7, #32]
 8003894:	4b49      	ldr	r3, [pc, #292]	; (80039bc <HAL_UART_MspInit+0x150>)
 8003896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003898:	4a48      	ldr	r2, [pc, #288]	; (80039bc <HAL_UART_MspInit+0x150>)
 800389a:	f043 0310 	orr.w	r3, r3, #16
 800389e:	6453      	str	r3, [r2, #68]	; 0x44
 80038a0:	4b46      	ldr	r3, [pc, #280]	; (80039bc <HAL_UART_MspInit+0x150>)
 80038a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a4:	f003 0310 	and.w	r3, r3, #16
 80038a8:	623b      	str	r3, [r7, #32]
 80038aa:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038ac:	2300      	movs	r3, #0
 80038ae:	61fb      	str	r3, [r7, #28]
 80038b0:	4b42      	ldr	r3, [pc, #264]	; (80039bc <HAL_UART_MspInit+0x150>)
 80038b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b4:	4a41      	ldr	r2, [pc, #260]	; (80039bc <HAL_UART_MspInit+0x150>)
 80038b6:	f043 0301 	orr.w	r3, r3, #1
 80038ba:	6313      	str	r3, [r2, #48]	; 0x30
 80038bc:	4b3f      	ldr	r3, [pc, #252]	; (80039bc <HAL_UART_MspInit+0x150>)
 80038be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c0:	f003 0301 	and.w	r3, r3, #1
 80038c4:	61fb      	str	r3, [r7, #28]
 80038c6:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = SERVO_TX_Pin;
 80038c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80038ce:	2312      	movs	r3, #18
 80038d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80038d2:	2301      	movs	r3, #1
 80038d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038d6:	2303      	movs	r3, #3
 80038d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80038da:	2307      	movs	r3, #7
 80038dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SERVO_TX_GPIO_Port, &GPIO_InitStruct);
 80038de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038e2:	4619      	mov	r1, r3
 80038e4:	4836      	ldr	r0, [pc, #216]	; (80039c0 <HAL_UART_MspInit+0x154>)
 80038e6:	f001 fce7 	bl	80052b8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 80038ea:	4b36      	ldr	r3, [pc, #216]	; (80039c4 <HAL_UART_MspInit+0x158>)
 80038ec:	4a36      	ldr	r2, [pc, #216]	; (80039c8 <HAL_UART_MspInit+0x15c>)
 80038ee:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80038f0:	4b34      	ldr	r3, [pc, #208]	; (80039c4 <HAL_UART_MspInit+0x158>)
 80038f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80038f6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80038f8:	4b32      	ldr	r3, [pc, #200]	; (80039c4 <HAL_UART_MspInit+0x158>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80038fe:	4b31      	ldr	r3, [pc, #196]	; (80039c4 <HAL_UART_MspInit+0x158>)
 8003900:	2200      	movs	r2, #0
 8003902:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003904:	4b2f      	ldr	r3, [pc, #188]	; (80039c4 <HAL_UART_MspInit+0x158>)
 8003906:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800390a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800390c:	4b2d      	ldr	r3, [pc, #180]	; (80039c4 <HAL_UART_MspInit+0x158>)
 800390e:	2200      	movs	r2, #0
 8003910:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003912:	4b2c      	ldr	r3, [pc, #176]	; (80039c4 <HAL_UART_MspInit+0x158>)
 8003914:	2200      	movs	r2, #0
 8003916:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003918:	4b2a      	ldr	r3, [pc, #168]	; (80039c4 <HAL_UART_MspInit+0x158>)
 800391a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800391e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003920:	4b28      	ldr	r3, [pc, #160]	; (80039c4 <HAL_UART_MspInit+0x158>)
 8003922:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003926:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003928:	4b26      	ldr	r3, [pc, #152]	; (80039c4 <HAL_UART_MspInit+0x158>)
 800392a:	2200      	movs	r2, #0
 800392c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800392e:	4825      	ldr	r0, [pc, #148]	; (80039c4 <HAL_UART_MspInit+0x158>)
 8003930:	f001 f8c0 	bl	8004ab4 <HAL_DMA_Init>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 800393a:	f7ff faaf 	bl	8002e9c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a20      	ldr	r2, [pc, #128]	; (80039c4 <HAL_UART_MspInit+0x158>)
 8003942:	639a      	str	r2, [r3, #56]	; 0x38
 8003944:	4a1f      	ldr	r2, [pc, #124]	; (80039c4 <HAL_UART_MspInit+0x158>)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800394a:	4b20      	ldr	r3, [pc, #128]	; (80039cc <HAL_UART_MspInit+0x160>)
 800394c:	4a20      	ldr	r2, [pc, #128]	; (80039d0 <HAL_UART_MspInit+0x164>)
 800394e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8003950:	4b1e      	ldr	r3, [pc, #120]	; (80039cc <HAL_UART_MspInit+0x160>)
 8003952:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003956:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003958:	4b1c      	ldr	r3, [pc, #112]	; (80039cc <HAL_UART_MspInit+0x160>)
 800395a:	2240      	movs	r2, #64	; 0x40
 800395c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800395e:	4b1b      	ldr	r3, [pc, #108]	; (80039cc <HAL_UART_MspInit+0x160>)
 8003960:	2200      	movs	r2, #0
 8003962:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003964:	4b19      	ldr	r3, [pc, #100]	; (80039cc <HAL_UART_MspInit+0x160>)
 8003966:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800396a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800396c:	4b17      	ldr	r3, [pc, #92]	; (80039cc <HAL_UART_MspInit+0x160>)
 800396e:	2200      	movs	r2, #0
 8003970:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003972:	4b16      	ldr	r3, [pc, #88]	; (80039cc <HAL_UART_MspInit+0x160>)
 8003974:	2200      	movs	r2, #0
 8003976:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003978:	4b14      	ldr	r3, [pc, #80]	; (80039cc <HAL_UART_MspInit+0x160>)
 800397a:	2200      	movs	r2, #0
 800397c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800397e:	4b13      	ldr	r3, [pc, #76]	; (80039cc <HAL_UART_MspInit+0x160>)
 8003980:	2200      	movs	r2, #0
 8003982:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003984:	4b11      	ldr	r3, [pc, #68]	; (80039cc <HAL_UART_MspInit+0x160>)
 8003986:	2200      	movs	r2, #0
 8003988:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800398a:	4810      	ldr	r0, [pc, #64]	; (80039cc <HAL_UART_MspInit+0x160>)
 800398c:	f001 f892 	bl	8004ab4 <HAL_DMA_Init>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8003996:	f7ff fa81 	bl	8002e9c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a0b      	ldr	r2, [pc, #44]	; (80039cc <HAL_UART_MspInit+0x160>)
 800399e:	635a      	str	r2, [r3, #52]	; 0x34
 80039a0:	4a0a      	ldr	r2, [pc, #40]	; (80039cc <HAL_UART_MspInit+0x160>)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80039a6:	2200      	movs	r2, #0
 80039a8:	2105      	movs	r1, #5
 80039aa:	2025      	movs	r0, #37	; 0x25
 80039ac:	f001 f858 	bl	8004a60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80039b0:	2025      	movs	r0, #37	; 0x25
 80039b2:	f001 f871 	bl	8004a98 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80039b6:	e16d      	b.n	8003c94 <HAL_UART_MspInit+0x428>
 80039b8:	40011000 	.word	0x40011000
 80039bc:	40023800 	.word	0x40023800
 80039c0:	40020000 	.word	0x40020000
 80039c4:	20006efc 	.word	0x20006efc
 80039c8:	40026488 	.word	0x40026488
 80039cc:	20006e3c 	.word	0x20006e3c
 80039d0:	400264b8 	.word	0x400264b8
  else if(uartHandle->Instance==USART3)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a5a      	ldr	r2, [pc, #360]	; (8003b44 <HAL_UART_MspInit+0x2d8>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	f040 80c2 	bne.w	8003b64 <HAL_UART_MspInit+0x2f8>
    __HAL_RCC_USART3_CLK_ENABLE();
 80039e0:	2300      	movs	r3, #0
 80039e2:	61bb      	str	r3, [r7, #24]
 80039e4:	4b58      	ldr	r3, [pc, #352]	; (8003b48 <HAL_UART_MspInit+0x2dc>)
 80039e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e8:	4a57      	ldr	r2, [pc, #348]	; (8003b48 <HAL_UART_MspInit+0x2dc>)
 80039ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039ee:	6413      	str	r3, [r2, #64]	; 0x40
 80039f0:	4b55      	ldr	r3, [pc, #340]	; (8003b48 <HAL_UART_MspInit+0x2dc>)
 80039f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039f8:	61bb      	str	r3, [r7, #24]
 80039fa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039fc:	2300      	movs	r3, #0
 80039fe:	617b      	str	r3, [r7, #20]
 8003a00:	4b51      	ldr	r3, [pc, #324]	; (8003b48 <HAL_UART_MspInit+0x2dc>)
 8003a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a04:	4a50      	ldr	r2, [pc, #320]	; (8003b48 <HAL_UART_MspInit+0x2dc>)
 8003a06:	f043 0304 	orr.w	r3, r3, #4
 8003a0a:	6313      	str	r3, [r2, #48]	; 0x30
 8003a0c:	4b4e      	ldr	r3, [pc, #312]	; (8003b48 <HAL_UART_MspInit+0x2dc>)
 8003a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a10:	f003 0304 	and.w	r3, r3, #4
 8003a14:	617b      	str	r3, [r7, #20]
 8003a16:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a18:	2300      	movs	r3, #0
 8003a1a:	613b      	str	r3, [r7, #16]
 8003a1c:	4b4a      	ldr	r3, [pc, #296]	; (8003b48 <HAL_UART_MspInit+0x2dc>)
 8003a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a20:	4a49      	ldr	r2, [pc, #292]	; (8003b48 <HAL_UART_MspInit+0x2dc>)
 8003a22:	f043 0302 	orr.w	r3, r3, #2
 8003a26:	6313      	str	r3, [r2, #48]	; 0x30
 8003a28:	4b47      	ldr	r3, [pc, #284]	; (8003b48 <HAL_UART_MspInit+0x2dc>)
 8003a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	613b      	str	r3, [r7, #16]
 8003a32:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = DEBUG_RX_Pin;
 8003a34:	2320      	movs	r3, #32
 8003a36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a38:	2302      	movs	r3, #2
 8003a3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a40:	2303      	movs	r3, #3
 8003a42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003a44:	2307      	movs	r3, #7
 8003a46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DEBUG_RX_GPIO_Port, &GPIO_InitStruct);
 8003a48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	483f      	ldr	r0, [pc, #252]	; (8003b4c <HAL_UART_MspInit+0x2e0>)
 8003a50:	f001 fc32 	bl	80052b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DEBUG_TX_Pin;
 8003a54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a5a:	2302      	movs	r3, #2
 8003a5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a62:	2303      	movs	r3, #3
 8003a64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003a66:	2307      	movs	r3, #7
 8003a68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DEBUG_TX_GPIO_Port, &GPIO_InitStruct);
 8003a6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a6e:	4619      	mov	r1, r3
 8003a70:	4837      	ldr	r0, [pc, #220]	; (8003b50 <HAL_UART_MspInit+0x2e4>)
 8003a72:	f001 fc21 	bl	80052b8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003a76:	4b37      	ldr	r3, [pc, #220]	; (8003b54 <HAL_UART_MspInit+0x2e8>)
 8003a78:	4a37      	ldr	r2, [pc, #220]	; (8003b58 <HAL_UART_MspInit+0x2ec>)
 8003a7a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003a7c:	4b35      	ldr	r3, [pc, #212]	; (8003b54 <HAL_UART_MspInit+0x2e8>)
 8003a7e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003a82:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a84:	4b33      	ldr	r3, [pc, #204]	; (8003b54 <HAL_UART_MspInit+0x2e8>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a8a:	4b32      	ldr	r3, [pc, #200]	; (8003b54 <HAL_UART_MspInit+0x2e8>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003a90:	4b30      	ldr	r3, [pc, #192]	; (8003b54 <HAL_UART_MspInit+0x2e8>)
 8003a92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a96:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a98:	4b2e      	ldr	r3, [pc, #184]	; (8003b54 <HAL_UART_MspInit+0x2e8>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a9e:	4b2d      	ldr	r3, [pc, #180]	; (8003b54 <HAL_UART_MspInit+0x2e8>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8003aa4:	4b2b      	ldr	r3, [pc, #172]	; (8003b54 <HAL_UART_MspInit+0x2e8>)
 8003aa6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003aaa:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003aac:	4b29      	ldr	r3, [pc, #164]	; (8003b54 <HAL_UART_MspInit+0x2e8>)
 8003aae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003ab2:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ab4:	4b27      	ldr	r3, [pc, #156]	; (8003b54 <HAL_UART_MspInit+0x2e8>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003aba:	4826      	ldr	r0, [pc, #152]	; (8003b54 <HAL_UART_MspInit+0x2e8>)
 8003abc:	f000 fffa 	bl	8004ab4 <HAL_DMA_Init>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d001      	beq.n	8003aca <HAL_UART_MspInit+0x25e>
      Error_Handler();
 8003ac6:	f7ff f9e9 	bl	8002e9c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a21      	ldr	r2, [pc, #132]	; (8003b54 <HAL_UART_MspInit+0x2e8>)
 8003ace:	639a      	str	r2, [r3, #56]	; 0x38
 8003ad0:	4a20      	ldr	r2, [pc, #128]	; (8003b54 <HAL_UART_MspInit+0x2e8>)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8003ad6:	4b21      	ldr	r3, [pc, #132]	; (8003b5c <HAL_UART_MspInit+0x2f0>)
 8003ad8:	4a21      	ldr	r2, [pc, #132]	; (8003b60 <HAL_UART_MspInit+0x2f4>)
 8003ada:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8003adc:	4b1f      	ldr	r3, [pc, #124]	; (8003b5c <HAL_UART_MspInit+0x2f0>)
 8003ade:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003ae2:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ae4:	4b1d      	ldr	r3, [pc, #116]	; (8003b5c <HAL_UART_MspInit+0x2f0>)
 8003ae6:	2240      	movs	r2, #64	; 0x40
 8003ae8:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003aea:	4b1c      	ldr	r3, [pc, #112]	; (8003b5c <HAL_UART_MspInit+0x2f0>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003af0:	4b1a      	ldr	r3, [pc, #104]	; (8003b5c <HAL_UART_MspInit+0x2f0>)
 8003af2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003af6:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003af8:	4b18      	ldr	r3, [pc, #96]	; (8003b5c <HAL_UART_MspInit+0x2f0>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003afe:	4b17      	ldr	r3, [pc, #92]	; (8003b5c <HAL_UART_MspInit+0x2f0>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003b04:	4b15      	ldr	r3, [pc, #84]	; (8003b5c <HAL_UART_MspInit+0x2f0>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003b0a:	4b14      	ldr	r3, [pc, #80]	; (8003b5c <HAL_UART_MspInit+0x2f0>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b10:	4b12      	ldr	r3, [pc, #72]	; (8003b5c <HAL_UART_MspInit+0x2f0>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003b16:	4811      	ldr	r0, [pc, #68]	; (8003b5c <HAL_UART_MspInit+0x2f0>)
 8003b18:	f000 ffcc 	bl	8004ab4 <HAL_DMA_Init>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d001      	beq.n	8003b26 <HAL_UART_MspInit+0x2ba>
      Error_Handler();
 8003b22:	f7ff f9bb 	bl	8002e9c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a0c      	ldr	r2, [pc, #48]	; (8003b5c <HAL_UART_MspInit+0x2f0>)
 8003b2a:	635a      	str	r2, [r3, #52]	; 0x34
 8003b2c:	4a0b      	ldr	r2, [pc, #44]	; (8003b5c <HAL_UART_MspInit+0x2f0>)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003b32:	2200      	movs	r2, #0
 8003b34:	2105      	movs	r1, #5
 8003b36:	2027      	movs	r0, #39	; 0x27
 8003b38:	f000 ff92 	bl	8004a60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003b3c:	2027      	movs	r0, #39	; 0x27
 8003b3e:	f000 ffab 	bl	8004a98 <HAL_NVIC_EnableIRQ>
}
 8003b42:	e0a7      	b.n	8003c94 <HAL_UART_MspInit+0x428>
 8003b44:	40004800 	.word	0x40004800
 8003b48:	40023800 	.word	0x40023800
 8003b4c:	40020800 	.word	0x40020800
 8003b50:	40020400 	.word	0x40020400
 8003b54:	20006d38 	.word	0x20006d38
 8003b58:	40026028 	.word	0x40026028
 8003b5c:	20006ddc 	.word	0x20006ddc
 8003b60:	40026058 	.word	0x40026058
  else if(uartHandle->Instance==USART6)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a4c      	ldr	r2, [pc, #304]	; (8003c9c <HAL_UART_MspInit+0x430>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	f040 8092 	bne.w	8003c94 <HAL_UART_MspInit+0x428>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003b70:	2300      	movs	r3, #0
 8003b72:	60fb      	str	r3, [r7, #12]
 8003b74:	4b4a      	ldr	r3, [pc, #296]	; (8003ca0 <HAL_UART_MspInit+0x434>)
 8003b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b78:	4a49      	ldr	r2, [pc, #292]	; (8003ca0 <HAL_UART_MspInit+0x434>)
 8003b7a:	f043 0320 	orr.w	r3, r3, #32
 8003b7e:	6453      	str	r3, [r2, #68]	; 0x44
 8003b80:	4b47      	ldr	r3, [pc, #284]	; (8003ca0 <HAL_UART_MspInit+0x434>)
 8003b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b84:	f003 0320 	and.w	r3, r3, #32
 8003b88:	60fb      	str	r3, [r7, #12]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	60bb      	str	r3, [r7, #8]
 8003b90:	4b43      	ldr	r3, [pc, #268]	; (8003ca0 <HAL_UART_MspInit+0x434>)
 8003b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b94:	4a42      	ldr	r2, [pc, #264]	; (8003ca0 <HAL_UART_MspInit+0x434>)
 8003b96:	f043 0304 	orr.w	r3, r3, #4
 8003b9a:	6313      	str	r3, [r2, #48]	; 0x30
 8003b9c:	4b40      	ldr	r3, [pc, #256]	; (8003ca0 <HAL_UART_MspInit+0x434>)
 8003b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba0:	f003 0304 	and.w	r3, r3, #4
 8003ba4:	60bb      	str	r3, [r7, #8]
 8003ba6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CM4_TX_Pin|CM4_RX_Pin;
 8003ba8:	23c0      	movs	r3, #192	; 0xc0
 8003baa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bac:	2302      	movs	r3, #2
 8003bae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003bb8:	2308      	movs	r3, #8
 8003bba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	4838      	ldr	r0, [pc, #224]	; (8003ca4 <HAL_UART_MspInit+0x438>)
 8003bc4:	f001 fb78 	bl	80052b8 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream2;
 8003bc8:	4b37      	ldr	r3, [pc, #220]	; (8003ca8 <HAL_UART_MspInit+0x43c>)
 8003bca:	4a38      	ldr	r2, [pc, #224]	; (8003cac <HAL_UART_MspInit+0x440>)
 8003bcc:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8003bce:	4b36      	ldr	r3, [pc, #216]	; (8003ca8 <HAL_UART_MspInit+0x43c>)
 8003bd0:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8003bd4:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003bd6:	4b34      	ldr	r3, [pc, #208]	; (8003ca8 <HAL_UART_MspInit+0x43c>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003bdc:	4b32      	ldr	r3, [pc, #200]	; (8003ca8 <HAL_UART_MspInit+0x43c>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003be2:	4b31      	ldr	r3, [pc, #196]	; (8003ca8 <HAL_UART_MspInit+0x43c>)
 8003be4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003be8:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003bea:	4b2f      	ldr	r3, [pc, #188]	; (8003ca8 <HAL_UART_MspInit+0x43c>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003bf0:	4b2d      	ldr	r3, [pc, #180]	; (8003ca8 <HAL_UART_MspInit+0x43c>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8003bf6:	4b2c      	ldr	r3, [pc, #176]	; (8003ca8 <HAL_UART_MspInit+0x43c>)
 8003bf8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bfc:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003bfe:	4b2a      	ldr	r3, [pc, #168]	; (8003ca8 <HAL_UART_MspInit+0x43c>)
 8003c00:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003c04:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c06:	4b28      	ldr	r3, [pc, #160]	; (8003ca8 <HAL_UART_MspInit+0x43c>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8003c0c:	4826      	ldr	r0, [pc, #152]	; (8003ca8 <HAL_UART_MspInit+0x43c>)
 8003c0e:	f000 ff51 	bl	8004ab4 <HAL_DMA_Init>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d001      	beq.n	8003c1c <HAL_UART_MspInit+0x3b0>
      Error_Handler();
 8003c18:	f7ff f940 	bl	8002e9c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a22      	ldr	r2, [pc, #136]	; (8003ca8 <HAL_UART_MspInit+0x43c>)
 8003c20:	639a      	str	r2, [r3, #56]	; 0x38
 8003c22:	4a21      	ldr	r2, [pc, #132]	; (8003ca8 <HAL_UART_MspInit+0x43c>)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8003c28:	4b21      	ldr	r3, [pc, #132]	; (8003cb0 <HAL_UART_MspInit+0x444>)
 8003c2a:	4a22      	ldr	r2, [pc, #136]	; (8003cb4 <HAL_UART_MspInit+0x448>)
 8003c2c:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8003c2e:	4b20      	ldr	r3, [pc, #128]	; (8003cb0 <HAL_UART_MspInit+0x444>)
 8003c30:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8003c34:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c36:	4b1e      	ldr	r3, [pc, #120]	; (8003cb0 <HAL_UART_MspInit+0x444>)
 8003c38:	2240      	movs	r2, #64	; 0x40
 8003c3a:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c3c:	4b1c      	ldr	r3, [pc, #112]	; (8003cb0 <HAL_UART_MspInit+0x444>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003c42:	4b1b      	ldr	r3, [pc, #108]	; (8003cb0 <HAL_UART_MspInit+0x444>)
 8003c44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c48:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c4a:	4b19      	ldr	r3, [pc, #100]	; (8003cb0 <HAL_UART_MspInit+0x444>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c50:	4b17      	ldr	r3, [pc, #92]	; (8003cb0 <HAL_UART_MspInit+0x444>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8003c56:	4b16      	ldr	r3, [pc, #88]	; (8003cb0 <HAL_UART_MspInit+0x444>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003c5c:	4b14      	ldr	r3, [pc, #80]	; (8003cb0 <HAL_UART_MspInit+0x444>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c62:	4b13      	ldr	r3, [pc, #76]	; (8003cb0 <HAL_UART_MspInit+0x444>)
 8003c64:	2200      	movs	r2, #0
 8003c66:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8003c68:	4811      	ldr	r0, [pc, #68]	; (8003cb0 <HAL_UART_MspInit+0x444>)
 8003c6a:	f000 ff23 	bl	8004ab4 <HAL_DMA_Init>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d001      	beq.n	8003c78 <HAL_UART_MspInit+0x40c>
      Error_Handler();
 8003c74:	f7ff f912 	bl	8002e9c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a0d      	ldr	r2, [pc, #52]	; (8003cb0 <HAL_UART_MspInit+0x444>)
 8003c7c:	635a      	str	r2, [r3, #52]	; 0x34
 8003c7e:	4a0c      	ldr	r2, [pc, #48]	; (8003cb0 <HAL_UART_MspInit+0x444>)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8003c84:	2200      	movs	r2, #0
 8003c86:	2105      	movs	r1, #5
 8003c88:	2047      	movs	r0, #71	; 0x47
 8003c8a:	f000 fee9 	bl	8004a60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003c8e:	2047      	movs	r0, #71	; 0x47
 8003c90:	f000 ff02 	bl	8004a98 <HAL_NVIC_EnableIRQ>
}
 8003c94:	bf00      	nop
 8003c96:	3738      	adds	r7, #56	; 0x38
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	40011400 	.word	0x40011400
 8003ca0:	40023800 	.word	0x40023800
 8003ca4:	40020800 	.word	0x40020800
 8003ca8:	20006cd8 	.word	0x20006cd8
 8003cac:	40026440 	.word	0x40026440
 8003cb0:	20006e9c 	.word	0x20006e9c
 8003cb4:	400264a0 	.word	0x400264a0

08003cb8 <Reset_Handler>:
 8003cb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003cf0 <LoopFillZerobss+0x14>
 8003cbc:	2100      	movs	r1, #0
 8003cbe:	e003      	b.n	8003cc8 <LoopCopyDataInit>

08003cc0 <CopyDataInit>:
 8003cc0:	4b0c      	ldr	r3, [pc, #48]	; (8003cf4 <LoopFillZerobss+0x18>)
 8003cc2:	585b      	ldr	r3, [r3, r1]
 8003cc4:	5043      	str	r3, [r0, r1]
 8003cc6:	3104      	adds	r1, #4

08003cc8 <LoopCopyDataInit>:
 8003cc8:	480b      	ldr	r0, [pc, #44]	; (8003cf8 <LoopFillZerobss+0x1c>)
 8003cca:	4b0c      	ldr	r3, [pc, #48]	; (8003cfc <LoopFillZerobss+0x20>)
 8003ccc:	1842      	adds	r2, r0, r1
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d3f6      	bcc.n	8003cc0 <CopyDataInit>
 8003cd2:	4a0b      	ldr	r2, [pc, #44]	; (8003d00 <LoopFillZerobss+0x24>)
 8003cd4:	e002      	b.n	8003cdc <LoopFillZerobss>

08003cd6 <FillZerobss>:
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	f842 3b04 	str.w	r3, [r2], #4

08003cdc <LoopFillZerobss>:
 8003cdc:	4b09      	ldr	r3, [pc, #36]	; (8003d04 <LoopFillZerobss+0x28>)
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d3f9      	bcc.n	8003cd6 <FillZerobss>
 8003ce2:	f7ff faab 	bl	800323c <SystemInit>
 8003ce6:	f007 fbd7 	bl	800b498 <__libc_init_array>
 8003cea:	f7ff f831 	bl	8002d50 <main>
 8003cee:	4770      	bx	lr
 8003cf0:	20020000 	.word	0x20020000
 8003cf4:	0800b5a0 	.word	0x0800b5a0
 8003cf8:	20000000 	.word	0x20000000
 8003cfc:	20000088 	.word	0x20000088
 8003d00:	20000088 	.word	0x20000088
 8003d04:	20006fe8 	.word	0x20006fe8

08003d08 <ADC_IRQHandler>:
 8003d08:	e7fe      	b.n	8003d08 <ADC_IRQHandler>
	...

08003d0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d10:	4b0e      	ldr	r3, [pc, #56]	; (8003d4c <HAL_Init+0x40>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a0d      	ldr	r2, [pc, #52]	; (8003d4c <HAL_Init+0x40>)
 8003d16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003d1c:	4b0b      	ldr	r3, [pc, #44]	; (8003d4c <HAL_Init+0x40>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a0a      	ldr	r2, [pc, #40]	; (8003d4c <HAL_Init+0x40>)
 8003d22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d28:	4b08      	ldr	r3, [pc, #32]	; (8003d4c <HAL_Init+0x40>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a07      	ldr	r2, [pc, #28]	; (8003d4c <HAL_Init+0x40>)
 8003d2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d34:	2003      	movs	r0, #3
 8003d36:	f000 fe88 	bl	8004a4a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d3a:	2000      	movs	r0, #0
 8003d3c:	f7ff f98e 	bl	800305c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d40:	f7ff f960 	bl	8003004 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	40023c00 	.word	0x40023c00

08003d50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d50:	b480      	push	{r7}
 8003d52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d54:	4b06      	ldr	r3, [pc, #24]	; (8003d70 <HAL_IncTick+0x20>)
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	461a      	mov	r2, r3
 8003d5a:	4b06      	ldr	r3, [pc, #24]	; (8003d74 <HAL_IncTick+0x24>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4413      	add	r3, r2
 8003d60:	4a04      	ldr	r2, [pc, #16]	; (8003d74 <HAL_IncTick+0x24>)
 8003d62:	6013      	str	r3, [r2, #0]
}
 8003d64:	bf00      	nop
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	20000080 	.word	0x20000080
 8003d74:	20006fe4 	.word	0x20006fe4

08003d78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	af00      	add	r7, sp, #0
  return uwTick;
 8003d7c:	4b03      	ldr	r3, [pc, #12]	; (8003d8c <HAL_GetTick+0x14>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	20006fe4 	.word	0x20006fe4

08003d90 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d101      	bne.n	8003da2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e0ed      	b.n	8003f7e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d102      	bne.n	8003db4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f7fe fe4e 	bl	8002a50 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f022 0202 	bic.w	r2, r2, #2
 8003dc2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003dc4:	f7ff ffd8 	bl	8003d78 <HAL_GetTick>
 8003dc8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003dca:	e012      	b.n	8003df2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003dcc:	f7ff ffd4 	bl	8003d78 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b0a      	cmp	r3, #10
 8003dd8:	d90b      	bls.n	8003df2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dde:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2205      	movs	r2, #5
 8003dea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e0c5      	b.n	8003f7e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f003 0302 	and.w	r3, r3, #2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d1e5      	bne.n	8003dcc <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f042 0201 	orr.w	r2, r2, #1
 8003e0e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e10:	f7ff ffb2 	bl	8003d78 <HAL_GetTick>
 8003e14:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003e16:	e012      	b.n	8003e3e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003e18:	f7ff ffae 	bl	8003d78 <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	2b0a      	cmp	r3, #10
 8003e24:	d90b      	bls.n	8003e3e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2205      	movs	r2, #5
 8003e36:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e09f      	b.n	8003f7e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f003 0301 	and.w	r3, r3, #1
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d0e5      	beq.n	8003e18 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	7e1b      	ldrb	r3, [r3, #24]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d108      	bne.n	8003e66 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e62:	601a      	str	r2, [r3, #0]
 8003e64:	e007      	b.n	8003e76 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e74:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	7e5b      	ldrb	r3, [r3, #25]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d108      	bne.n	8003e90 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e8c:	601a      	str	r2, [r3, #0]
 8003e8e:	e007      	b.n	8003ea0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	7e9b      	ldrb	r3, [r3, #26]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d108      	bne.n	8003eba <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f042 0220 	orr.w	r2, r2, #32
 8003eb6:	601a      	str	r2, [r3, #0]
 8003eb8:	e007      	b.n	8003eca <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f022 0220 	bic.w	r2, r2, #32
 8003ec8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	7edb      	ldrb	r3, [r3, #27]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d108      	bne.n	8003ee4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f022 0210 	bic.w	r2, r2, #16
 8003ee0:	601a      	str	r2, [r3, #0]
 8003ee2:	e007      	b.n	8003ef4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f042 0210 	orr.w	r2, r2, #16
 8003ef2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	7f1b      	ldrb	r3, [r3, #28]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d108      	bne.n	8003f0e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f042 0208 	orr.w	r2, r2, #8
 8003f0a:	601a      	str	r2, [r3, #0]
 8003f0c:	e007      	b.n	8003f1e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f022 0208 	bic.w	r2, r2, #8
 8003f1c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	7f5b      	ldrb	r3, [r3, #29]
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d108      	bne.n	8003f38 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f042 0204 	orr.w	r2, r2, #4
 8003f34:	601a      	str	r2, [r3, #0]
 8003f36:	e007      	b.n	8003f48 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f022 0204 	bic.w	r2, r2, #4
 8003f46:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689a      	ldr	r2, [r3, #8]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	431a      	orrs	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	431a      	orrs	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	695b      	ldr	r3, [r3, #20]
 8003f5c:	ea42 0103 	orr.w	r1, r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	1e5a      	subs	r2, r3, #1
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3710      	adds	r7, #16
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
	...

08003f88 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b087      	sub	sp, #28
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f9e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003fa0:	7cfb      	ldrb	r3, [r7, #19]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d003      	beq.n	8003fae <HAL_CAN_ConfigFilter+0x26>
 8003fa6:	7cfb      	ldrb	r3, [r7, #19]
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	f040 80be 	bne.w	800412a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003fae:	4b65      	ldr	r3, [pc, #404]	; (8004144 <HAL_CAN_ConfigFilter+0x1bc>)
 8003fb0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003fb8:	f043 0201 	orr.w	r2, r3, #1
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003fc8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fdc:	021b      	lsls	r3, r3, #8
 8003fde:	431a      	orrs	r2, r3
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	695b      	ldr	r3, [r3, #20]
 8003fea:	f003 031f 	and.w	r3, r3, #31
 8003fee:	2201      	movs	r2, #1
 8003ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	43db      	mvns	r3, r3
 8004000:	401a      	ands	r2, r3
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	69db      	ldr	r3, [r3, #28]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d123      	bne.n	8004058 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	43db      	mvns	r3, r3
 800401a:	401a      	ands	r2, r3
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800402e:	683a      	ldr	r2, [r7, #0]
 8004030:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004032:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	3248      	adds	r2, #72	; 0x48
 8004038:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800404c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800404e:	6979      	ldr	r1, [r7, #20]
 8004050:	3348      	adds	r3, #72	; 0x48
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	440b      	add	r3, r1
 8004056:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	69db      	ldr	r3, [r3, #28]
 800405c:	2b01      	cmp	r3, #1
 800405e:	d122      	bne.n	80040a6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	431a      	orrs	r2, r3
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004080:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	3248      	adds	r2, #72	; 0x48
 8004086:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800409a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800409c:	6979      	ldr	r1, [r7, #20]
 800409e:	3348      	adds	r3, #72	; 0x48
 80040a0:	00db      	lsls	r3, r3, #3
 80040a2:	440b      	add	r3, r1
 80040a4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d109      	bne.n	80040c2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	43db      	mvns	r3, r3
 80040b8:	401a      	ands	r2, r3
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80040c0:	e007      	b.n	80040d2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	431a      	orrs	r2, r3
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d109      	bne.n	80040ee <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	43db      	mvns	r3, r3
 80040e4:	401a      	ands	r2, r3
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80040ec:	e007      	b.n	80040fe <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	431a      	orrs	r2, r3
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d107      	bne.n	8004116 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	431a      	orrs	r2, r3
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800411c:	f023 0201 	bic.w	r2, r3, #1
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004126:	2300      	movs	r3, #0
 8004128:	e006      	b.n	8004138 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
  }
}
 8004138:	4618      	mov	r0, r3
 800413a:	371c      	adds	r7, #28
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr
 8004144:	40006400 	.word	0x40006400

08004148 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004156:	b2db      	uxtb	r3, r3
 8004158:	2b01      	cmp	r3, #1
 800415a:	d12e      	bne.n	80041ba <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2202      	movs	r2, #2
 8004160:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f022 0201 	bic.w	r2, r2, #1
 8004172:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004174:	f7ff fe00 	bl	8003d78 <HAL_GetTick>
 8004178:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800417a:	e012      	b.n	80041a2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800417c:	f7ff fdfc 	bl	8003d78 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	2b0a      	cmp	r3, #10
 8004188:	d90b      	bls.n	80041a2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2205      	movs	r2, #5
 800419a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e012      	b.n	80041c8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f003 0301 	and.w	r3, r3, #1
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d1e5      	bne.n	800417c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80041b6:	2300      	movs	r3, #0
 80041b8:	e006      	b.n	80041c8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041be:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
  }
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3710      	adds	r7, #16
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80041d0:	b480      	push	{r7}
 80041d2:	b087      	sub	sp, #28
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
 80041dc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041e4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80041e6:	7dfb      	ldrb	r3, [r7, #23]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d003      	beq.n	80041f4 <HAL_CAN_GetRxMessage+0x24>
 80041ec:	7dfb      	ldrb	r3, [r7, #23]
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	f040 80f3 	bne.w	80043da <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d10e      	bne.n	8004218 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	f003 0303 	and.w	r3, r3, #3
 8004204:	2b00      	cmp	r3, #0
 8004206:	d116      	bne.n	8004236 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e0e7      	b.n	80043e8 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	f003 0303 	and.w	r3, r3, #3
 8004222:	2b00      	cmp	r3, #0
 8004224:	d107      	bne.n	8004236 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e0d8      	b.n	80043e8 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	331b      	adds	r3, #27
 800423e:	011b      	lsls	r3, r3, #4
 8004240:	4413      	add	r3, r2
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0204 	and.w	r2, r3, #4
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d10c      	bne.n	800426e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	331b      	adds	r3, #27
 800425c:	011b      	lsls	r3, r3, #4
 800425e:	4413      	add	r3, r2
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	0d5b      	lsrs	r3, r3, #21
 8004264:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	601a      	str	r2, [r3, #0]
 800426c:	e00b      	b.n	8004286 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	331b      	adds	r3, #27
 8004276:	011b      	lsls	r3, r3, #4
 8004278:	4413      	add	r3, r2
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	08db      	lsrs	r3, r3, #3
 800427e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	331b      	adds	r3, #27
 800428e:	011b      	lsls	r3, r3, #4
 8004290:	4413      	add	r3, r2
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0202 	and.w	r2, r3, #2
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	331b      	adds	r3, #27
 80042a4:	011b      	lsls	r3, r3, #4
 80042a6:	4413      	add	r3, r2
 80042a8:	3304      	adds	r3, #4
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 020f 	and.w	r2, r3, #15
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	331b      	adds	r3, #27
 80042bc:	011b      	lsls	r3, r3, #4
 80042be:	4413      	add	r3, r2
 80042c0:	3304      	adds	r3, #4
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	0a1b      	lsrs	r3, r3, #8
 80042c6:	b2da      	uxtb	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	331b      	adds	r3, #27
 80042d4:	011b      	lsls	r3, r3, #4
 80042d6:	4413      	add	r3, r2
 80042d8:	3304      	adds	r3, #4
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	0c1b      	lsrs	r3, r3, #16
 80042de:	b29a      	uxth	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	011b      	lsls	r3, r3, #4
 80042ec:	4413      	add	r3, r2
 80042ee:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	b2da      	uxtb	r2, r3
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	011b      	lsls	r3, r3, #4
 8004302:	4413      	add	r3, r2
 8004304:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	0a1a      	lsrs	r2, r3, #8
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	3301      	adds	r3, #1
 8004310:	b2d2      	uxtb	r2, r2
 8004312:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	011b      	lsls	r3, r3, #4
 800431c:	4413      	add	r3, r2
 800431e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	0c1a      	lsrs	r2, r3, #16
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	3302      	adds	r3, #2
 800432a:	b2d2      	uxtb	r2, r2
 800432c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	011b      	lsls	r3, r3, #4
 8004336:	4413      	add	r3, r2
 8004338:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	0e1a      	lsrs	r2, r3, #24
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	3303      	adds	r3, #3
 8004344:	b2d2      	uxtb	r2, r2
 8004346:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	011b      	lsls	r3, r3, #4
 8004350:	4413      	add	r3, r2
 8004352:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	3304      	adds	r3, #4
 800435c:	b2d2      	uxtb	r2, r2
 800435e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	011b      	lsls	r3, r3, #4
 8004368:	4413      	add	r3, r2
 800436a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	0a1a      	lsrs	r2, r3, #8
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	3305      	adds	r3, #5
 8004376:	b2d2      	uxtb	r2, r2
 8004378:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	011b      	lsls	r3, r3, #4
 8004382:	4413      	add	r3, r2
 8004384:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	0c1a      	lsrs	r2, r3, #16
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	3306      	adds	r3, #6
 8004390:	b2d2      	uxtb	r2, r2
 8004392:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	011b      	lsls	r3, r3, #4
 800439c:	4413      	add	r3, r2
 800439e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	0e1a      	lsrs	r2, r3, #24
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	3307      	adds	r3, #7
 80043aa:	b2d2      	uxtb	r2, r2
 80043ac:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d108      	bne.n	80043c6 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68da      	ldr	r2, [r3, #12]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f042 0220 	orr.w	r2, r2, #32
 80043c2:	60da      	str	r2, [r3, #12]
 80043c4:	e007      	b.n	80043d6 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	691a      	ldr	r2, [r3, #16]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f042 0220 	orr.w	r2, r2, #32
 80043d4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80043d6:	2300      	movs	r3, #0
 80043d8:	e006      	b.n	80043e8 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043de:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
  }
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	371c      	adds	r7, #28
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b085      	sub	sp, #20
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80043fe:	2300      	movs	r3, #0
 8004400:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004408:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800440a:	7afb      	ldrb	r3, [r7, #11]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d002      	beq.n	8004416 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8004410:	7afb      	ldrb	r3, [r7, #11]
 8004412:	2b02      	cmp	r3, #2
 8004414:	d10f      	bne.n	8004436 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d106      	bne.n	800442a <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	f003 0303 	and.w	r3, r3, #3
 8004426:	60fb      	str	r3, [r7, #12]
 8004428:	e005      	b.n	8004436 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	f003 0303 	and.w	r3, r3, #3
 8004434:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8004436:	68fb      	ldr	r3, [r7, #12]
}
 8004438:	4618      	mov	r0, r3
 800443a:	3714      	adds	r7, #20
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004444:	b480      	push	{r7}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004454:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004456:	7bfb      	ldrb	r3, [r7, #15]
 8004458:	2b01      	cmp	r3, #1
 800445a:	d002      	beq.n	8004462 <HAL_CAN_ActivateNotification+0x1e>
 800445c:	7bfb      	ldrb	r3, [r7, #15]
 800445e:	2b02      	cmp	r3, #2
 8004460:	d109      	bne.n	8004476 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	6959      	ldr	r1, [r3, #20]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	683a      	ldr	r2, [r7, #0]
 800446e:	430a      	orrs	r2, r1
 8004470:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004472:	2300      	movs	r3, #0
 8004474:	e006      	b.n	8004484 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
  }
}
 8004484:	4618      	mov	r0, r3
 8004486:	3714      	adds	r7, #20
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b08a      	sub	sp, #40	; 0x28
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004498:	2300      	movs	r3, #0
 800449a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80044cc:	6a3b      	ldr	r3, [r7, #32]
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d07c      	beq.n	80045d0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	f003 0301 	and.w	r3, r3, #1
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d023      	beq.n	8004528 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2201      	movs	r2, #1
 80044e6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	f003 0302 	and.w	r3, r3, #2
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d003      	beq.n	80044fa <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 f983 	bl	80047fe <HAL_CAN_TxMailbox0CompleteCallback>
 80044f8:	e016      	b.n	8004528 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	f003 0304 	and.w	r3, r3, #4
 8004500:	2b00      	cmp	r3, #0
 8004502:	d004      	beq.n	800450e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004506:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800450a:	627b      	str	r3, [r7, #36]	; 0x24
 800450c:	e00c      	b.n	8004528 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	f003 0308 	and.w	r3, r3, #8
 8004514:	2b00      	cmp	r3, #0
 8004516:	d004      	beq.n	8004522 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800451e:	627b      	str	r3, [r7, #36]	; 0x24
 8004520:	e002      	b.n	8004528 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 f989 	bl	800483a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800452e:	2b00      	cmp	r3, #0
 8004530:	d024      	beq.n	800457c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f44f 7280 	mov.w	r2, #256	; 0x100
 800453a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800453c:	69bb      	ldr	r3, [r7, #24]
 800453e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004542:	2b00      	cmp	r3, #0
 8004544:	d003      	beq.n	800454e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 f963 	bl	8004812 <HAL_CAN_TxMailbox1CompleteCallback>
 800454c:	e016      	b.n	800457c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004554:	2b00      	cmp	r3, #0
 8004556:	d004      	beq.n	8004562 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800455e:	627b      	str	r3, [r7, #36]	; 0x24
 8004560:	e00c      	b.n	800457c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004568:	2b00      	cmp	r3, #0
 800456a:	d004      	beq.n	8004576 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800456c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004572:	627b      	str	r3, [r7, #36]	; 0x24
 8004574:	e002      	b.n	800457c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f969 	bl	800484e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d024      	beq.n	80045d0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800458e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d003      	beq.n	80045a2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 f943 	bl	8004826 <HAL_CAN_TxMailbox2CompleteCallback>
 80045a0:	e016      	b.n	80045d0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d004      	beq.n	80045b6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80045ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045b2:	627b      	str	r3, [r7, #36]	; 0x24
 80045b4:	e00c      	b.n	80045d0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d004      	beq.n	80045ca <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80045c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045c6:	627b      	str	r3, [r7, #36]	; 0x24
 80045c8:	e002      	b.n	80045d0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 f949 	bl	8004862 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80045d0:	6a3b      	ldr	r3, [r7, #32]
 80045d2:	f003 0308 	and.w	r3, r3, #8
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00c      	beq.n	80045f4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	f003 0310 	and.w	r3, r3, #16
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d007      	beq.n	80045f4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80045e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045ea:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2210      	movs	r2, #16
 80045f2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80045f4:	6a3b      	ldr	r3, [r7, #32]
 80045f6:	f003 0304 	and.w	r3, r3, #4
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00b      	beq.n	8004616 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	f003 0308 	and.w	r3, r3, #8
 8004604:	2b00      	cmp	r3, #0
 8004606:	d006      	beq.n	8004616 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2208      	movs	r2, #8
 800460e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 f930 	bl	8004876 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004616:	6a3b      	ldr	r3, [r7, #32]
 8004618:	f003 0302 	and.w	r3, r3, #2
 800461c:	2b00      	cmp	r3, #0
 800461e:	d009      	beq.n	8004634 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	f003 0303 	and.w	r3, r3, #3
 800462a:	2b00      	cmp	r3, #0
 800462c:	d002      	beq.n	8004634 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f7fb fff2 	bl	8000618 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004634:	6a3b      	ldr	r3, [r7, #32]
 8004636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00c      	beq.n	8004658 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	f003 0310 	and.w	r3, r3, #16
 8004644:	2b00      	cmp	r3, #0
 8004646:	d007      	beq.n	8004658 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800464e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2210      	movs	r2, #16
 8004656:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004658:	6a3b      	ldr	r3, [r7, #32]
 800465a:	f003 0320 	and.w	r3, r3, #32
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00b      	beq.n	800467a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	f003 0308 	and.w	r3, r3, #8
 8004668:	2b00      	cmp	r3, #0
 800466a:	d006      	beq.n	800467a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2208      	movs	r2, #8
 8004672:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f000 f912 	bl	800489e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800467a:	6a3b      	ldr	r3, [r7, #32]
 800467c:	f003 0310 	and.w	r3, r3, #16
 8004680:	2b00      	cmp	r3, #0
 8004682:	d009      	beq.n	8004698 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	f003 0303 	and.w	r3, r3, #3
 800468e:	2b00      	cmp	r3, #0
 8004690:	d002      	beq.n	8004698 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 f8f9 	bl	800488a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004698:	6a3b      	ldr	r3, [r7, #32]
 800469a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d00b      	beq.n	80046ba <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	f003 0310 	and.w	r3, r3, #16
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d006      	beq.n	80046ba <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2210      	movs	r2, #16
 80046b2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f000 f8fc 	bl	80048b2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80046ba:	6a3b      	ldr	r3, [r7, #32]
 80046bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00b      	beq.n	80046dc <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	f003 0308 	and.w	r3, r3, #8
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d006      	beq.n	80046dc <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2208      	movs	r2, #8
 80046d4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 f8f5 	bl	80048c6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80046dc:	6a3b      	ldr	r3, [r7, #32]
 80046de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d07b      	beq.n	80047de <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	f003 0304 	and.w	r3, r3, #4
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d072      	beq.n	80047d6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80046f0:	6a3b      	ldr	r3, [r7, #32]
 80046f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d008      	beq.n	800470c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004700:	2b00      	cmp	r3, #0
 8004702:	d003      	beq.n	800470c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004706:	f043 0301 	orr.w	r3, r3, #1
 800470a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800470c:	6a3b      	ldr	r3, [r7, #32]
 800470e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004712:	2b00      	cmp	r3, #0
 8004714:	d008      	beq.n	8004728 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800471c:	2b00      	cmp	r3, #0
 800471e:	d003      	beq.n	8004728 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004722:	f043 0302 	orr.w	r3, r3, #2
 8004726:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004728:	6a3b      	ldr	r3, [r7, #32]
 800472a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800472e:	2b00      	cmp	r3, #0
 8004730:	d008      	beq.n	8004744 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004738:	2b00      	cmp	r3, #0
 800473a:	d003      	beq.n	8004744 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800473c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473e:	f043 0304 	orr.w	r3, r3, #4
 8004742:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004744:	6a3b      	ldr	r3, [r7, #32]
 8004746:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800474a:	2b00      	cmp	r3, #0
 800474c:	d043      	beq.n	80047d6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004754:	2b00      	cmp	r3, #0
 8004756:	d03e      	beq.n	80047d6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800475e:	2b60      	cmp	r3, #96	; 0x60
 8004760:	d02b      	beq.n	80047ba <HAL_CAN_IRQHandler+0x32a>
 8004762:	2b60      	cmp	r3, #96	; 0x60
 8004764:	d82e      	bhi.n	80047c4 <HAL_CAN_IRQHandler+0x334>
 8004766:	2b50      	cmp	r3, #80	; 0x50
 8004768:	d022      	beq.n	80047b0 <HAL_CAN_IRQHandler+0x320>
 800476a:	2b50      	cmp	r3, #80	; 0x50
 800476c:	d82a      	bhi.n	80047c4 <HAL_CAN_IRQHandler+0x334>
 800476e:	2b40      	cmp	r3, #64	; 0x40
 8004770:	d019      	beq.n	80047a6 <HAL_CAN_IRQHandler+0x316>
 8004772:	2b40      	cmp	r3, #64	; 0x40
 8004774:	d826      	bhi.n	80047c4 <HAL_CAN_IRQHandler+0x334>
 8004776:	2b30      	cmp	r3, #48	; 0x30
 8004778:	d010      	beq.n	800479c <HAL_CAN_IRQHandler+0x30c>
 800477a:	2b30      	cmp	r3, #48	; 0x30
 800477c:	d822      	bhi.n	80047c4 <HAL_CAN_IRQHandler+0x334>
 800477e:	2b10      	cmp	r3, #16
 8004780:	d002      	beq.n	8004788 <HAL_CAN_IRQHandler+0x2f8>
 8004782:	2b20      	cmp	r3, #32
 8004784:	d005      	beq.n	8004792 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004786:	e01d      	b.n	80047c4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478a:	f043 0308 	orr.w	r3, r3, #8
 800478e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004790:	e019      	b.n	80047c6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004794:	f043 0310 	orr.w	r3, r3, #16
 8004798:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800479a:	e014      	b.n	80047c6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800479c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479e:	f043 0320 	orr.w	r3, r3, #32
 80047a2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80047a4:	e00f      	b.n	80047c6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80047a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047ac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80047ae:	e00a      	b.n	80047c6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80047b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047b6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80047b8:	e005      	b.n	80047c6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80047ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047c0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80047c2:	e000      	b.n	80047c6 <HAL_CAN_IRQHandler+0x336>
            break;
 80047c4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	699a      	ldr	r2, [r3, #24]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80047d4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2204      	movs	r2, #4
 80047dc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80047de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d008      	beq.n	80047f6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ea:	431a      	orrs	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f000 f872 	bl	80048da <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80047f6:	bf00      	nop
 80047f8:	3728      	adds	r7, #40	; 0x28
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80047fe:	b480      	push	{r7}
 8004800:	b083      	sub	sp, #12
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004806:	bf00      	nop
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr

08004812 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004812:	b480      	push	{r7}
 8004814:	b083      	sub	sp, #12
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800481a:	bf00      	nop
 800481c:	370c      	adds	r7, #12
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr

08004826 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004826:	b480      	push	{r7}
 8004828:	b083      	sub	sp, #12
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800482e:	bf00      	nop
 8004830:	370c      	adds	r7, #12
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr

0800483a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800483a:	b480      	push	{r7}
 800483c:	b083      	sub	sp, #12
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004842:	bf00      	nop
 8004844:	370c      	adds	r7, #12
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr

0800484e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800484e:	b480      	push	{r7}
 8004850:	b083      	sub	sp, #12
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004856:	bf00      	nop
 8004858:	370c      	adds	r7, #12
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004862:	b480      	push	{r7}
 8004864:	b083      	sub	sp, #12
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800486a:	bf00      	nop
 800486c:	370c      	adds	r7, #12
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr

08004876 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004876:	b480      	push	{r7}
 8004878:	b083      	sub	sp, #12
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800487e:	bf00      	nop
 8004880:	370c      	adds	r7, #12
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr

0800488a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800488a:	b480      	push	{r7}
 800488c:	b083      	sub	sp, #12
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004892:	bf00      	nop
 8004894:	370c      	adds	r7, #12
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr

0800489e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800489e:	b480      	push	{r7}
 80048a0:	b083      	sub	sp, #12
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80048a6:	bf00      	nop
 80048a8:	370c      	adds	r7, #12
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr

080048b2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80048b2:	b480      	push	{r7}
 80048b4:	b083      	sub	sp, #12
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80048ba:	bf00      	nop
 80048bc:	370c      	adds	r7, #12
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr

080048c6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80048c6:	b480      	push	{r7}
 80048c8:	b083      	sub	sp, #12
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80048ce:	bf00      	nop
 80048d0:	370c      	adds	r7, #12
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr

080048da <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80048da:	b480      	push	{r7}
 80048dc:	b083      	sub	sp, #12
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80048e2:	bf00      	nop
 80048e4:	370c      	adds	r7, #12
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
	...

080048f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b085      	sub	sp, #20
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f003 0307 	and.w	r3, r3, #7
 80048fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004900:	4b0c      	ldr	r3, [pc, #48]	; (8004934 <__NVIC_SetPriorityGrouping+0x44>)
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004906:	68ba      	ldr	r2, [r7, #8]
 8004908:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800490c:	4013      	ands	r3, r2
 800490e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004918:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800491c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004920:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004922:	4a04      	ldr	r2, [pc, #16]	; (8004934 <__NVIC_SetPriorityGrouping+0x44>)
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	60d3      	str	r3, [r2, #12]
}
 8004928:	bf00      	nop
 800492a:	3714      	adds	r7, #20
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr
 8004934:	e000ed00 	.word	0xe000ed00

08004938 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004938:	b480      	push	{r7}
 800493a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800493c:	4b04      	ldr	r3, [pc, #16]	; (8004950 <__NVIC_GetPriorityGrouping+0x18>)
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	0a1b      	lsrs	r3, r3, #8
 8004942:	f003 0307 	and.w	r3, r3, #7
}
 8004946:	4618      	mov	r0, r3
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr
 8004950:	e000ed00 	.word	0xe000ed00

08004954 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	4603      	mov	r3, r0
 800495c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800495e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004962:	2b00      	cmp	r3, #0
 8004964:	db0b      	blt.n	800497e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004966:	79fb      	ldrb	r3, [r7, #7]
 8004968:	f003 021f 	and.w	r2, r3, #31
 800496c:	4907      	ldr	r1, [pc, #28]	; (800498c <__NVIC_EnableIRQ+0x38>)
 800496e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004972:	095b      	lsrs	r3, r3, #5
 8004974:	2001      	movs	r0, #1
 8004976:	fa00 f202 	lsl.w	r2, r0, r2
 800497a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800497e:	bf00      	nop
 8004980:	370c      	adds	r7, #12
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr
 800498a:	bf00      	nop
 800498c:	e000e100 	.word	0xe000e100

08004990 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	4603      	mov	r3, r0
 8004998:	6039      	str	r1, [r7, #0]
 800499a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800499c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	db0a      	blt.n	80049ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	b2da      	uxtb	r2, r3
 80049a8:	490c      	ldr	r1, [pc, #48]	; (80049dc <__NVIC_SetPriority+0x4c>)
 80049aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ae:	0112      	lsls	r2, r2, #4
 80049b0:	b2d2      	uxtb	r2, r2
 80049b2:	440b      	add	r3, r1
 80049b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80049b8:	e00a      	b.n	80049d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	b2da      	uxtb	r2, r3
 80049be:	4908      	ldr	r1, [pc, #32]	; (80049e0 <__NVIC_SetPriority+0x50>)
 80049c0:	79fb      	ldrb	r3, [r7, #7]
 80049c2:	f003 030f 	and.w	r3, r3, #15
 80049c6:	3b04      	subs	r3, #4
 80049c8:	0112      	lsls	r2, r2, #4
 80049ca:	b2d2      	uxtb	r2, r2
 80049cc:	440b      	add	r3, r1
 80049ce:	761a      	strb	r2, [r3, #24]
}
 80049d0:	bf00      	nop
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr
 80049dc:	e000e100 	.word	0xe000e100
 80049e0:	e000ed00 	.word	0xe000ed00

080049e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b089      	sub	sp, #36	; 0x24
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f003 0307 	and.w	r3, r3, #7
 80049f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	f1c3 0307 	rsb	r3, r3, #7
 80049fe:	2b04      	cmp	r3, #4
 8004a00:	bf28      	it	cs
 8004a02:	2304      	movcs	r3, #4
 8004a04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	3304      	adds	r3, #4
 8004a0a:	2b06      	cmp	r3, #6
 8004a0c:	d902      	bls.n	8004a14 <NVIC_EncodePriority+0x30>
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	3b03      	subs	r3, #3
 8004a12:	e000      	b.n	8004a16 <NVIC_EncodePriority+0x32>
 8004a14:	2300      	movs	r3, #0
 8004a16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a22:	43da      	mvns	r2, r3
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	401a      	ands	r2, r3
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	fa01 f303 	lsl.w	r3, r1, r3
 8004a36:	43d9      	mvns	r1, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a3c:	4313      	orrs	r3, r2
         );
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3724      	adds	r7, #36	; 0x24
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr

08004a4a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a4a:	b580      	push	{r7, lr}
 8004a4c:	b082      	sub	sp, #8
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f7ff ff4c 	bl	80048f0 <__NVIC_SetPriorityGrouping>
}
 8004a58:	bf00      	nop
 8004a5a:	3708      	adds	r7, #8
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b086      	sub	sp, #24
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	4603      	mov	r3, r0
 8004a68:	60b9      	str	r1, [r7, #8]
 8004a6a:	607a      	str	r2, [r7, #4]
 8004a6c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004a72:	f7ff ff61 	bl	8004938 <__NVIC_GetPriorityGrouping>
 8004a76:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	68b9      	ldr	r1, [r7, #8]
 8004a7c:	6978      	ldr	r0, [r7, #20]
 8004a7e:	f7ff ffb1 	bl	80049e4 <NVIC_EncodePriority>
 8004a82:	4602      	mov	r2, r0
 8004a84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a88:	4611      	mov	r1, r2
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f7ff ff80 	bl	8004990 <__NVIC_SetPriority>
}
 8004a90:	bf00      	nop
 8004a92:	3718      	adds	r7, #24
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f7ff ff54 	bl	8004954 <__NVIC_EnableIRQ>
}
 8004aac:	bf00      	nop
 8004aae:	3708      	adds	r7, #8
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b086      	sub	sp, #24
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004abc:	2300      	movs	r3, #0
 8004abe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004ac0:	f7ff f95a 	bl	8003d78 <HAL_GetTick>
 8004ac4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d101      	bne.n	8004ad0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e099      	b.n	8004c04 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2202      	movs	r2, #2
 8004adc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f022 0201 	bic.w	r2, r2, #1
 8004aee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004af0:	e00f      	b.n	8004b12 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004af2:	f7ff f941 	bl	8003d78 <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	2b05      	cmp	r3, #5
 8004afe:	d908      	bls.n	8004b12 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2220      	movs	r2, #32
 8004b04:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2203      	movs	r2, #3
 8004b0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e078      	b.n	8004c04 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0301 	and.w	r3, r3, #1
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d1e8      	bne.n	8004af2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004b28:	697a      	ldr	r2, [r7, #20]
 8004b2a:	4b38      	ldr	r3, [pc, #224]	; (8004c0c <HAL_DMA_Init+0x158>)
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685a      	ldr	r2, [r3, #4]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a1b      	ldr	r3, [r3, #32]
 8004b5c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b5e:	697a      	ldr	r2, [r7, #20]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b68:	2b04      	cmp	r3, #4
 8004b6a:	d107      	bne.n	8004b7c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b74:	4313      	orrs	r3, r2
 8004b76:	697a      	ldr	r2, [r7, #20]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	697a      	ldr	r2, [r7, #20]
 8004b82:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	f023 0307 	bic.w	r3, r3, #7
 8004b92:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b98:	697a      	ldr	r2, [r7, #20]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba2:	2b04      	cmp	r3, #4
 8004ba4:	d117      	bne.n	8004bd6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004baa:	697a      	ldr	r2, [r7, #20]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d00e      	beq.n	8004bd6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f000 fb01 	bl	80051c0 <DMA_CheckFifoParam>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d008      	beq.n	8004bd6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2240      	movs	r2, #64	; 0x40
 8004bc8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e016      	b.n	8004c04 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	697a      	ldr	r2, [r7, #20]
 8004bdc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 fab8 	bl	8005154 <DMA_CalcBaseAndBitshift>
 8004be4:	4603      	mov	r3, r0
 8004be6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bec:	223f      	movs	r2, #63	; 0x3f
 8004bee:	409a      	lsls	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004c02:	2300      	movs	r3, #0
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3718      	adds	r7, #24
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	f010803f 	.word	0xf010803f

08004c10 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b086      	sub	sp, #24
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	607a      	str	r2, [r7, #4]
 8004c1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c26:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d101      	bne.n	8004c36 <HAL_DMA_Start_IT+0x26>
 8004c32:	2302      	movs	r3, #2
 8004c34:	e040      	b.n	8004cb8 <HAL_DMA_Start_IT+0xa8>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d12f      	bne.n	8004caa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2202      	movs	r2, #2
 8004c4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2200      	movs	r2, #0
 8004c56:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	68b9      	ldr	r1, [r7, #8]
 8004c5e:	68f8      	ldr	r0, [r7, #12]
 8004c60:	f000 fa4a 	bl	80050f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c68:	223f      	movs	r2, #63	; 0x3f
 8004c6a:	409a      	lsls	r2, r3
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f042 0216 	orr.w	r2, r2, #22
 8004c7e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d007      	beq.n	8004c98 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f042 0208 	orr.w	r2, r2, #8
 8004c96:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f042 0201 	orr.w	r2, r2, #1
 8004ca6:	601a      	str	r2, [r3, #0]
 8004ca8:	e005      	b.n	8004cb6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004cb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3718      	adds	r7, #24
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ccc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004cce:	f7ff f853 	bl	8003d78 <HAL_GetTick>
 8004cd2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d008      	beq.n	8004cf2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2280      	movs	r2, #128	; 0x80
 8004ce4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e052      	b.n	8004d98 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f022 0216 	bic.w	r2, r2, #22
 8004d00:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	695a      	ldr	r2, [r3, #20]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d10:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d103      	bne.n	8004d22 <HAL_DMA_Abort+0x62>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d007      	beq.n	8004d32 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f022 0208 	bic.w	r2, r2, #8
 8004d30:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f022 0201 	bic.w	r2, r2, #1
 8004d40:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d42:	e013      	b.n	8004d6c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d44:	f7ff f818 	bl	8003d78 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	2b05      	cmp	r3, #5
 8004d50:	d90c      	bls.n	8004d6c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2220      	movs	r2, #32
 8004d56:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2203      	movs	r2, #3
 8004d64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e015      	b.n	8004d98 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0301 	and.w	r3, r3, #1
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d1e4      	bne.n	8004d44 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d7e:	223f      	movs	r2, #63	; 0x3f
 8004d80:	409a      	lsls	r2, r3
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3710      	adds	r7, #16
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d004      	beq.n	8004dbe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2280      	movs	r2, #128	; 0x80
 8004db8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e00c      	b.n	8004dd8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2205      	movs	r2, #5
 8004dc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f022 0201 	bic.w	r2, r2, #1
 8004dd4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004dd6:	2300      	movs	r3, #0
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	370c      	adds	r7, #12
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b086      	sub	sp, #24
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004dec:	2300      	movs	r3, #0
 8004dee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004df0:	4b92      	ldr	r3, [pc, #584]	; (800503c <HAL_DMA_IRQHandler+0x258>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a92      	ldr	r2, [pc, #584]	; (8005040 <HAL_DMA_IRQHandler+0x25c>)
 8004df6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dfa:	0a9b      	lsrs	r3, r3, #10
 8004dfc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e02:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e0e:	2208      	movs	r2, #8
 8004e10:	409a      	lsls	r2, r3
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	4013      	ands	r3, r2
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d01a      	beq.n	8004e50 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0304 	and.w	r3, r3, #4
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d013      	beq.n	8004e50 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f022 0204 	bic.w	r2, r2, #4
 8004e36:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e3c:	2208      	movs	r2, #8
 8004e3e:	409a      	lsls	r2, r3
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e48:	f043 0201 	orr.w	r2, r3, #1
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e54:	2201      	movs	r2, #1
 8004e56:	409a      	lsls	r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d012      	beq.n	8004e86 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00b      	beq.n	8004e86 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e72:	2201      	movs	r2, #1
 8004e74:	409a      	lsls	r2, r3
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e7e:	f043 0202 	orr.w	r2, r3, #2
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e8a:	2204      	movs	r2, #4
 8004e8c:	409a      	lsls	r2, r3
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	4013      	ands	r3, r2
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d012      	beq.n	8004ebc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 0302 	and.w	r3, r3, #2
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00b      	beq.n	8004ebc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ea8:	2204      	movs	r2, #4
 8004eaa:	409a      	lsls	r2, r3
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eb4:	f043 0204 	orr.w	r2, r3, #4
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ec0:	2210      	movs	r2, #16
 8004ec2:	409a      	lsls	r2, r3
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d043      	beq.n	8004f54 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 0308 	and.w	r3, r3, #8
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d03c      	beq.n	8004f54 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ede:	2210      	movs	r2, #16
 8004ee0:	409a      	lsls	r2, r3
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d018      	beq.n	8004f26 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d108      	bne.n	8004f14 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d024      	beq.n	8004f54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	4798      	blx	r3
 8004f12:	e01f      	b.n	8004f54 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d01b      	beq.n	8004f54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	4798      	blx	r3
 8004f24:	e016      	b.n	8004f54 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d107      	bne.n	8004f44 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f022 0208 	bic.w	r2, r2, #8
 8004f42:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d003      	beq.n	8004f54 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f58:	2220      	movs	r2, #32
 8004f5a:	409a      	lsls	r2, r3
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	4013      	ands	r3, r2
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f000 808e 	beq.w	8005082 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0310 	and.w	r3, r3, #16
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	f000 8086 	beq.w	8005082 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f7a:	2220      	movs	r2, #32
 8004f7c:	409a      	lsls	r2, r3
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	2b05      	cmp	r3, #5
 8004f8c:	d136      	bne.n	8004ffc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f022 0216 	bic.w	r2, r2, #22
 8004f9c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	695a      	ldr	r2, [r3, #20]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004fac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d103      	bne.n	8004fbe <HAL_DMA_IRQHandler+0x1da>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d007      	beq.n	8004fce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f022 0208 	bic.w	r2, r2, #8
 8004fcc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fd2:	223f      	movs	r2, #63	; 0x3f
 8004fd4:	409a      	lsls	r2, r3
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d07d      	beq.n	80050ee <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	4798      	blx	r3
        }
        return;
 8004ffa:	e078      	b.n	80050ee <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d01c      	beq.n	8005044 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d108      	bne.n	800502a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800501c:	2b00      	cmp	r3, #0
 800501e:	d030      	beq.n	8005082 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	4798      	blx	r3
 8005028:	e02b      	b.n	8005082 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800502e:	2b00      	cmp	r3, #0
 8005030:	d027      	beq.n	8005082 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	4798      	blx	r3
 800503a:	e022      	b.n	8005082 <HAL_DMA_IRQHandler+0x29e>
 800503c:	20000078 	.word	0x20000078
 8005040:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800504e:	2b00      	cmp	r3, #0
 8005050:	d10f      	bne.n	8005072 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f022 0210 	bic.w	r2, r2, #16
 8005060:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005076:	2b00      	cmp	r3, #0
 8005078:	d003      	beq.n	8005082 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005086:	2b00      	cmp	r3, #0
 8005088:	d032      	beq.n	80050f0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800508e:	f003 0301 	and.w	r3, r3, #1
 8005092:	2b00      	cmp	r3, #0
 8005094:	d022      	beq.n	80050dc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2205      	movs	r2, #5
 800509a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f022 0201 	bic.w	r2, r2, #1
 80050ac:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	3301      	adds	r3, #1
 80050b2:	60bb      	str	r3, [r7, #8]
 80050b4:	697a      	ldr	r2, [r7, #20]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d307      	bcc.n	80050ca <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0301 	and.w	r3, r3, #1
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1f2      	bne.n	80050ae <HAL_DMA_IRQHandler+0x2ca>
 80050c8:	e000      	b.n	80050cc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80050ca:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d005      	beq.n	80050f0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	4798      	blx	r3
 80050ec:	e000      	b.n	80050f0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80050ee:	bf00      	nop
    }
  }
}
 80050f0:	3718      	adds	r7, #24
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop

080050f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b085      	sub	sp, #20
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	607a      	str	r2, [r7, #4]
 8005104:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005114:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	683a      	ldr	r2, [r7, #0]
 800511c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	2b40      	cmp	r3, #64	; 0x40
 8005124:	d108      	bne.n	8005138 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68ba      	ldr	r2, [r7, #8]
 8005134:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005136:	e007      	b.n	8005148 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68ba      	ldr	r2, [r7, #8]
 800513e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	60da      	str	r2, [r3, #12]
}
 8005148:	bf00      	nop
 800514a:	3714      	adds	r7, #20
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005154:	b480      	push	{r7}
 8005156:	b085      	sub	sp, #20
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	b2db      	uxtb	r3, r3
 8005162:	3b10      	subs	r3, #16
 8005164:	4a14      	ldr	r2, [pc, #80]	; (80051b8 <DMA_CalcBaseAndBitshift+0x64>)
 8005166:	fba2 2303 	umull	r2, r3, r2, r3
 800516a:	091b      	lsrs	r3, r3, #4
 800516c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800516e:	4a13      	ldr	r2, [pc, #76]	; (80051bc <DMA_CalcBaseAndBitshift+0x68>)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	4413      	add	r3, r2
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	461a      	mov	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2b03      	cmp	r3, #3
 8005180:	d909      	bls.n	8005196 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800518a:	f023 0303 	bic.w	r3, r3, #3
 800518e:	1d1a      	adds	r2, r3, #4
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	659a      	str	r2, [r3, #88]	; 0x58
 8005194:	e007      	b.n	80051a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800519e:	f023 0303 	bic.w	r3, r3, #3
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3714      	adds	r7, #20
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop
 80051b8:	aaaaaaab 	.word	0xaaaaaaab
 80051bc:	0800b588 	.word	0x0800b588

080051c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b085      	sub	sp, #20
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051c8:	2300      	movs	r3, #0
 80051ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	699b      	ldr	r3, [r3, #24]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d11f      	bne.n	800521a <DMA_CheckFifoParam+0x5a>
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	2b03      	cmp	r3, #3
 80051de:	d856      	bhi.n	800528e <DMA_CheckFifoParam+0xce>
 80051e0:	a201      	add	r2, pc, #4	; (adr r2, 80051e8 <DMA_CheckFifoParam+0x28>)
 80051e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e6:	bf00      	nop
 80051e8:	080051f9 	.word	0x080051f9
 80051ec:	0800520b 	.word	0x0800520b
 80051f0:	080051f9 	.word	0x080051f9
 80051f4:	0800528f 	.word	0x0800528f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d046      	beq.n	8005292 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005208:	e043      	b.n	8005292 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800520e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005212:	d140      	bne.n	8005296 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005218:	e03d      	b.n	8005296 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005222:	d121      	bne.n	8005268 <DMA_CheckFifoParam+0xa8>
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	2b03      	cmp	r3, #3
 8005228:	d837      	bhi.n	800529a <DMA_CheckFifoParam+0xda>
 800522a:	a201      	add	r2, pc, #4	; (adr r2, 8005230 <DMA_CheckFifoParam+0x70>)
 800522c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005230:	08005241 	.word	0x08005241
 8005234:	08005247 	.word	0x08005247
 8005238:	08005241 	.word	0x08005241
 800523c:	08005259 	.word	0x08005259
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	73fb      	strb	r3, [r7, #15]
      break;
 8005244:	e030      	b.n	80052a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800524e:	2b00      	cmp	r3, #0
 8005250:	d025      	beq.n	800529e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005256:	e022      	b.n	800529e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005260:	d11f      	bne.n	80052a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005266:	e01c      	b.n	80052a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	2b02      	cmp	r3, #2
 800526c:	d903      	bls.n	8005276 <DMA_CheckFifoParam+0xb6>
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	2b03      	cmp	r3, #3
 8005272:	d003      	beq.n	800527c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005274:	e018      	b.n	80052a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	73fb      	strb	r3, [r7, #15]
      break;
 800527a:	e015      	b.n	80052a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005280:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00e      	beq.n	80052a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	73fb      	strb	r3, [r7, #15]
      break;
 800528c:	e00b      	b.n	80052a6 <DMA_CheckFifoParam+0xe6>
      break;
 800528e:	bf00      	nop
 8005290:	e00a      	b.n	80052a8 <DMA_CheckFifoParam+0xe8>
      break;
 8005292:	bf00      	nop
 8005294:	e008      	b.n	80052a8 <DMA_CheckFifoParam+0xe8>
      break;
 8005296:	bf00      	nop
 8005298:	e006      	b.n	80052a8 <DMA_CheckFifoParam+0xe8>
      break;
 800529a:	bf00      	nop
 800529c:	e004      	b.n	80052a8 <DMA_CheckFifoParam+0xe8>
      break;
 800529e:	bf00      	nop
 80052a0:	e002      	b.n	80052a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80052a2:	bf00      	nop
 80052a4:	e000      	b.n	80052a8 <DMA_CheckFifoParam+0xe8>
      break;
 80052a6:	bf00      	nop
    }
  } 
  
  return status; 
 80052a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3714      	adds	r7, #20
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop

080052b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b089      	sub	sp, #36	; 0x24
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80052c2:	2300      	movs	r3, #0
 80052c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80052c6:	2300      	movs	r3, #0
 80052c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80052ca:	2300      	movs	r3, #0
 80052cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80052ce:	2300      	movs	r3, #0
 80052d0:	61fb      	str	r3, [r7, #28]
 80052d2:	e165      	b.n	80055a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80052d4:	2201      	movs	r2, #1
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	fa02 f303 	lsl.w	r3, r2, r3
 80052dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	697a      	ldr	r2, [r7, #20]
 80052e4:	4013      	ands	r3, r2
 80052e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	f040 8154 	bne.w	800559a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	f003 0303 	and.w	r3, r3, #3
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d005      	beq.n	800530a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005306:	2b02      	cmp	r3, #2
 8005308:	d130      	bne.n	800536c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	005b      	lsls	r3, r3, #1
 8005314:	2203      	movs	r2, #3
 8005316:	fa02 f303 	lsl.w	r3, r2, r3
 800531a:	43db      	mvns	r3, r3
 800531c:	69ba      	ldr	r2, [r7, #24]
 800531e:	4013      	ands	r3, r2
 8005320:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	68da      	ldr	r2, [r3, #12]
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	005b      	lsls	r3, r3, #1
 800532a:	fa02 f303 	lsl.w	r3, r2, r3
 800532e:	69ba      	ldr	r2, [r7, #24]
 8005330:	4313      	orrs	r3, r2
 8005332:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	69ba      	ldr	r2, [r7, #24]
 8005338:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005340:	2201      	movs	r2, #1
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	fa02 f303 	lsl.w	r3, r2, r3
 8005348:	43db      	mvns	r3, r3
 800534a:	69ba      	ldr	r2, [r7, #24]
 800534c:	4013      	ands	r3, r2
 800534e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	091b      	lsrs	r3, r3, #4
 8005356:	f003 0201 	and.w	r2, r3, #1
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	fa02 f303 	lsl.w	r3, r2, r3
 8005360:	69ba      	ldr	r2, [r7, #24]
 8005362:	4313      	orrs	r3, r2
 8005364:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	69ba      	ldr	r2, [r7, #24]
 800536a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	f003 0303 	and.w	r3, r3, #3
 8005374:	2b03      	cmp	r3, #3
 8005376:	d017      	beq.n	80053a8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	005b      	lsls	r3, r3, #1
 8005382:	2203      	movs	r2, #3
 8005384:	fa02 f303 	lsl.w	r3, r2, r3
 8005388:	43db      	mvns	r3, r3
 800538a:	69ba      	ldr	r2, [r7, #24]
 800538c:	4013      	ands	r3, r2
 800538e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	689a      	ldr	r2, [r3, #8]
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	005b      	lsls	r3, r3, #1
 8005398:	fa02 f303 	lsl.w	r3, r2, r3
 800539c:	69ba      	ldr	r2, [r7, #24]
 800539e:	4313      	orrs	r3, r2
 80053a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	69ba      	ldr	r2, [r7, #24]
 80053a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	f003 0303 	and.w	r3, r3, #3
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d123      	bne.n	80053fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	08da      	lsrs	r2, r3, #3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	3208      	adds	r2, #8
 80053bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	f003 0307 	and.w	r3, r3, #7
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	220f      	movs	r2, #15
 80053cc:	fa02 f303 	lsl.w	r3, r2, r3
 80053d0:	43db      	mvns	r3, r3
 80053d2:	69ba      	ldr	r2, [r7, #24]
 80053d4:	4013      	ands	r3, r2
 80053d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	691a      	ldr	r2, [r3, #16]
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	f003 0307 	and.w	r3, r3, #7
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	fa02 f303 	lsl.w	r3, r2, r3
 80053e8:	69ba      	ldr	r2, [r7, #24]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	08da      	lsrs	r2, r3, #3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	3208      	adds	r2, #8
 80053f6:	69b9      	ldr	r1, [r7, #24]
 80053f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	005b      	lsls	r3, r3, #1
 8005406:	2203      	movs	r2, #3
 8005408:	fa02 f303 	lsl.w	r3, r2, r3
 800540c:	43db      	mvns	r3, r3
 800540e:	69ba      	ldr	r2, [r7, #24]
 8005410:	4013      	ands	r3, r2
 8005412:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	f003 0203 	and.w	r2, r3, #3
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	005b      	lsls	r3, r3, #1
 8005420:	fa02 f303 	lsl.w	r3, r2, r3
 8005424:	69ba      	ldr	r2, [r7, #24]
 8005426:	4313      	orrs	r3, r2
 8005428:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	69ba      	ldr	r2, [r7, #24]
 800542e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005438:	2b00      	cmp	r3, #0
 800543a:	f000 80ae 	beq.w	800559a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800543e:	2300      	movs	r3, #0
 8005440:	60fb      	str	r3, [r7, #12]
 8005442:	4b5d      	ldr	r3, [pc, #372]	; (80055b8 <HAL_GPIO_Init+0x300>)
 8005444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005446:	4a5c      	ldr	r2, [pc, #368]	; (80055b8 <HAL_GPIO_Init+0x300>)
 8005448:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800544c:	6453      	str	r3, [r2, #68]	; 0x44
 800544e:	4b5a      	ldr	r3, [pc, #360]	; (80055b8 <HAL_GPIO_Init+0x300>)
 8005450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005452:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005456:	60fb      	str	r3, [r7, #12]
 8005458:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800545a:	4a58      	ldr	r2, [pc, #352]	; (80055bc <HAL_GPIO_Init+0x304>)
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	089b      	lsrs	r3, r3, #2
 8005460:	3302      	adds	r3, #2
 8005462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005466:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	f003 0303 	and.w	r3, r3, #3
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	220f      	movs	r2, #15
 8005472:	fa02 f303 	lsl.w	r3, r2, r3
 8005476:	43db      	mvns	r3, r3
 8005478:	69ba      	ldr	r2, [r7, #24]
 800547a:	4013      	ands	r3, r2
 800547c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a4f      	ldr	r2, [pc, #316]	; (80055c0 <HAL_GPIO_Init+0x308>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d025      	beq.n	80054d2 <HAL_GPIO_Init+0x21a>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a4e      	ldr	r2, [pc, #312]	; (80055c4 <HAL_GPIO_Init+0x30c>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d01f      	beq.n	80054ce <HAL_GPIO_Init+0x216>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a4d      	ldr	r2, [pc, #308]	; (80055c8 <HAL_GPIO_Init+0x310>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d019      	beq.n	80054ca <HAL_GPIO_Init+0x212>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a4c      	ldr	r2, [pc, #304]	; (80055cc <HAL_GPIO_Init+0x314>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d013      	beq.n	80054c6 <HAL_GPIO_Init+0x20e>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a4b      	ldr	r2, [pc, #300]	; (80055d0 <HAL_GPIO_Init+0x318>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d00d      	beq.n	80054c2 <HAL_GPIO_Init+0x20a>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a4a      	ldr	r2, [pc, #296]	; (80055d4 <HAL_GPIO_Init+0x31c>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d007      	beq.n	80054be <HAL_GPIO_Init+0x206>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a49      	ldr	r2, [pc, #292]	; (80055d8 <HAL_GPIO_Init+0x320>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d101      	bne.n	80054ba <HAL_GPIO_Init+0x202>
 80054b6:	2306      	movs	r3, #6
 80054b8:	e00c      	b.n	80054d4 <HAL_GPIO_Init+0x21c>
 80054ba:	2307      	movs	r3, #7
 80054bc:	e00a      	b.n	80054d4 <HAL_GPIO_Init+0x21c>
 80054be:	2305      	movs	r3, #5
 80054c0:	e008      	b.n	80054d4 <HAL_GPIO_Init+0x21c>
 80054c2:	2304      	movs	r3, #4
 80054c4:	e006      	b.n	80054d4 <HAL_GPIO_Init+0x21c>
 80054c6:	2303      	movs	r3, #3
 80054c8:	e004      	b.n	80054d4 <HAL_GPIO_Init+0x21c>
 80054ca:	2302      	movs	r3, #2
 80054cc:	e002      	b.n	80054d4 <HAL_GPIO_Init+0x21c>
 80054ce:	2301      	movs	r3, #1
 80054d0:	e000      	b.n	80054d4 <HAL_GPIO_Init+0x21c>
 80054d2:	2300      	movs	r3, #0
 80054d4:	69fa      	ldr	r2, [r7, #28]
 80054d6:	f002 0203 	and.w	r2, r2, #3
 80054da:	0092      	lsls	r2, r2, #2
 80054dc:	4093      	lsls	r3, r2
 80054de:	69ba      	ldr	r2, [r7, #24]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80054e4:	4935      	ldr	r1, [pc, #212]	; (80055bc <HAL_GPIO_Init+0x304>)
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	089b      	lsrs	r3, r3, #2
 80054ea:	3302      	adds	r3, #2
 80054ec:	69ba      	ldr	r2, [r7, #24]
 80054ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80054f2:	4b3a      	ldr	r3, [pc, #232]	; (80055dc <HAL_GPIO_Init+0x324>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	43db      	mvns	r3, r3
 80054fc:	69ba      	ldr	r2, [r7, #24]
 80054fe:	4013      	ands	r3, r2
 8005500:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800550a:	2b00      	cmp	r3, #0
 800550c:	d003      	beq.n	8005516 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800550e:	69ba      	ldr	r2, [r7, #24]
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	4313      	orrs	r3, r2
 8005514:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005516:	4a31      	ldr	r2, [pc, #196]	; (80055dc <HAL_GPIO_Init+0x324>)
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800551c:	4b2f      	ldr	r3, [pc, #188]	; (80055dc <HAL_GPIO_Init+0x324>)
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	43db      	mvns	r3, r3
 8005526:	69ba      	ldr	r2, [r7, #24]
 8005528:	4013      	ands	r3, r2
 800552a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005534:	2b00      	cmp	r3, #0
 8005536:	d003      	beq.n	8005540 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005538:	69ba      	ldr	r2, [r7, #24]
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	4313      	orrs	r3, r2
 800553e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005540:	4a26      	ldr	r2, [pc, #152]	; (80055dc <HAL_GPIO_Init+0x324>)
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005546:	4b25      	ldr	r3, [pc, #148]	; (80055dc <HAL_GPIO_Init+0x324>)
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	43db      	mvns	r3, r3
 8005550:	69ba      	ldr	r2, [r7, #24]
 8005552:	4013      	ands	r3, r2
 8005554:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800555e:	2b00      	cmp	r3, #0
 8005560:	d003      	beq.n	800556a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005562:	69ba      	ldr	r2, [r7, #24]
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	4313      	orrs	r3, r2
 8005568:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800556a:	4a1c      	ldr	r2, [pc, #112]	; (80055dc <HAL_GPIO_Init+0x324>)
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005570:	4b1a      	ldr	r3, [pc, #104]	; (80055dc <HAL_GPIO_Init+0x324>)
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	43db      	mvns	r3, r3
 800557a:	69ba      	ldr	r2, [r7, #24]
 800557c:	4013      	ands	r3, r2
 800557e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005588:	2b00      	cmp	r3, #0
 800558a:	d003      	beq.n	8005594 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800558c:	69ba      	ldr	r2, [r7, #24]
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	4313      	orrs	r3, r2
 8005592:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005594:	4a11      	ldr	r2, [pc, #68]	; (80055dc <HAL_GPIO_Init+0x324>)
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	3301      	adds	r3, #1
 800559e:	61fb      	str	r3, [r7, #28]
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	2b0f      	cmp	r3, #15
 80055a4:	f67f ae96 	bls.w	80052d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80055a8:	bf00      	nop
 80055aa:	bf00      	nop
 80055ac:	3724      	adds	r7, #36	; 0x24
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
 80055b6:	bf00      	nop
 80055b8:	40023800 	.word	0x40023800
 80055bc:	40013800 	.word	0x40013800
 80055c0:	40020000 	.word	0x40020000
 80055c4:	40020400 	.word	0x40020400
 80055c8:	40020800 	.word	0x40020800
 80055cc:	40020c00 	.word	0x40020c00
 80055d0:	40021000 	.word	0x40021000
 80055d4:	40021400 	.word	0x40021400
 80055d8:	40021800 	.word	0x40021800
 80055dc:	40013c00 	.word	0x40013c00

080055e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	460b      	mov	r3, r1
 80055ea:	807b      	strh	r3, [r7, #2]
 80055ec:	4613      	mov	r3, r2
 80055ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80055f0:	787b      	ldrb	r3, [r7, #1]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d003      	beq.n	80055fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80055f6:	887a      	ldrh	r2, [r7, #2]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80055fc:	e003      	b.n	8005606 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80055fe:	887b      	ldrh	r3, [r7, #2]
 8005600:	041a      	lsls	r2, r3, #16
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	619a      	str	r2, [r3, #24]
}
 8005606:	bf00      	nop
 8005608:	370c      	adds	r7, #12
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
	...

08005614 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b086      	sub	sp, #24
 8005618:	af02      	add	r7, sp, #8
 800561a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800561c:	f7fe fbac 	bl	8003d78 <HAL_GetTick>
 8005620:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d101      	bne.n	800562c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e069      	b.n	8005700 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005632:	b2db      	uxtb	r3, r3
 8005634:	2b00      	cmp	r3, #0
 8005636:	d10b      	bne.n	8005650 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f7fd fc5f 	bl	8002f04 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8005646:	f241 3188 	movw	r1, #5000	; 0x1388
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 fd46 	bl	80060dc <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	3b01      	subs	r3, #1
 8005660:	021a      	lsls	r2, r3, #8
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	430a      	orrs	r2, r1
 8005668:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800566e:	9300      	str	r3, [sp, #0]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2200      	movs	r2, #0
 8005674:	2120      	movs	r1, #32
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 fd71 	bl	800615e <QSPI_WaitFlagStateUntilTimeout>
 800567c:	4603      	mov	r3, r0
 800567e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005680:	7afb      	ldrb	r3, [r7, #11]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d137      	bne.n	80056f6 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005690:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	6852      	ldr	r2, [r2, #4]
 8005698:	0611      	lsls	r1, r2, #24
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	68d2      	ldr	r2, [r2, #12]
 800569e:	4311      	orrs	r1, r2
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	69d2      	ldr	r2, [r2, #28]
 80056a4:	4311      	orrs	r1, r2
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	6a12      	ldr	r2, [r2, #32]
 80056aa:	4311      	orrs	r1, r2
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	6812      	ldr	r2, [r2, #0]
 80056b0:	430b      	orrs	r3, r1
 80056b2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	685a      	ldr	r2, [r3, #4]
 80056ba:	4b13      	ldr	r3, [pc, #76]	; (8005708 <HAL_QSPI_Init+0xf4>)
 80056bc:	4013      	ands	r3, r2
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	6912      	ldr	r2, [r2, #16]
 80056c2:	0411      	lsls	r1, r2, #16
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	6952      	ldr	r2, [r2, #20]
 80056c8:	4311      	orrs	r1, r2
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	6992      	ldr	r2, [r2, #24]
 80056ce:	4311      	orrs	r1, r2
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	6812      	ldr	r2, [r2, #0]
 80056d4:	430b      	orrs	r3, r1
 80056d6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f042 0201 	orr.w	r2, r2, #1
 80056e6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2201      	movs	r2, #1
 80056f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80056fe:	7afb      	ldrb	r3, [r7, #11]
}
 8005700:	4618      	mov	r0, r3
 8005702:	3710      	adds	r7, #16
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}
 8005708:	ffe0f8fe 	.word	0xffe0f8fe

0800570c <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi : QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b086      	sub	sp, #24
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	f003 0304 	and.w	r3, r3, #4
 800572a:	2b00      	cmp	r3, #0
 800572c:	d064      	beq.n	80057f8 <HAL_QSPI_IRQHandler+0xec>
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005734:	2b00      	cmp	r3, #0
 8005736:	d05f      	beq.n	80057f8 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	3320      	adds	r3, #32
 800573e:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005746:	b2db      	uxtb	r3, r3
 8005748:	2b12      	cmp	r3, #18
 800574a:	d125      	bne.n	8005798 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800574c:	e01c      	b.n	8005788 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005752:	2b00      	cmp	r3, #0
 8005754:	d00f      	beq.n	8005776 <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575a:	781a      	ldrb	r2, [r3, #0]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005764:	1c5a      	adds	r2, r3, #1
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576e:	1e5a      	subs	r2, r3, #1
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	62da      	str	r2, [r3, #44]	; 0x2c
 8005774:	e008      	b.n	8005788 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005784:	601a      	str	r2, [r3, #0]
          break;
 8005786:	e033      	b.n	80057f0 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	f003 0304 	and.w	r3, r3, #4
 8005792:	2b00      	cmp	r3, #0
 8005794:	d1db      	bne.n	800574e <HAL_QSPI_IRQHandler+0x42>
 8005796:	e02b      	b.n	80057f0 <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	2b22      	cmp	r3, #34	; 0x22
 80057a2:	d125      	bne.n	80057f0 <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 80057a4:	e01d      	b.n	80057e2 <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d010      	beq.n	80057d0 <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	7812      	ldrb	r2, [r2, #0]
 80057b6:	b2d2      	uxtb	r2, r2
 80057b8:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057be:	1c5a      	adds	r2, r3, #1
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c8:	1e5a      	subs	r2, r3, #1
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	639a      	str	r2, [r3, #56]	; 0x38
 80057ce:	e008      	b.n	80057e2 <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80057de:	601a      	str	r2, [r3, #0]
          break;
 80057e0:	e006      	b.n	80057f0 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	f003 0304 	and.w	r3, r3, #4
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d1da      	bne.n	80057a6 <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f000 fb8b 	bl	8005f0c <HAL_QSPI_FifoThresholdCallback>
 80057f6:	e142      	b.n	8005a7e <HAL_QSPI_IRQHandler+0x372>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	f003 0302 	and.w	r3, r3, #2
 80057fe:	2b00      	cmp	r3, #0
 8005800:	f000 80b6 	beq.w	8005970 <HAL_QSPI_IRQHandler+0x264>
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800580a:	2b00      	cmp	r3, #0
 800580c:	f000 80b0 	beq.w	8005970 <HAL_QSPI_IRQHandler+0x264>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2202      	movs	r2, #2
 8005816:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8005826:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800582e:	b2db      	uxtb	r3, r3
 8005830:	2b12      	cmp	r3, #18
 8005832:	d123      	bne.n	800587c <HAL_QSPI_IRQHandler+0x170>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 0304 	and.w	r3, r3, #4
 800583e:	2b00      	cmp	r3, #0
 8005840:	d011      	beq.n	8005866 <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f022 0204 	bic.w	r2, r2, #4
 8005850:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f022 0201 	bic.w	r2, r2, #1
 8005864:	601a      	str	r2, [r3, #0]
      }

      /* Clear Busy bit */
      HAL_QSPI_Abort_IT(hqspi);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 fbdc 	bl	8006024 <HAL_QSPI_Abort_IT>

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f000 fb3f 	bl	8005ef8 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800587a:	e0fd      	b.n	8005a78 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005882:	b2db      	uxtb	r3, r3
 8005884:	2b22      	cmp	r3, #34	; 0x22
 8005886:	d146      	bne.n	8005916 <HAL_QSPI_IRQHandler+0x20a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0304 	and.w	r3, r3, #4
 8005892:	2b00      	cmp	r3, #0
 8005894:	d012      	beq.n	80058bc <HAL_QSPI_IRQHandler+0x1b0>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f022 0204 	bic.w	r2, r2, #4
 80058a4:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f022 0201 	bic.w	r2, r2, #1
 80058b8:	601a      	str	r2, [r3, #0]
 80058ba:	e021      	b.n	8005900 <HAL_QSPI_IRQHandler+0x1f4>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	3320      	adds	r3, #32
 80058c2:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 80058c4:	e013      	b.n	80058ee <HAL_QSPI_IRQHandler+0x1e2>
        {
          if (hqspi->RxXferCount > 0U)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d017      	beq.n	80058fe <HAL_QSPI_IRQHandler+0x1f2>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	7812      	ldrb	r2, [r2, #0]
 80058d6:	b2d2      	uxtb	r2, r2
 80058d8:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058de:	1c5a      	adds	r2, r3, #1
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e8:	1e5a      	subs	r2, r3, #1
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d1e4      	bne.n	80058c6 <HAL_QSPI_IRQHandler+0x1ba>
 80058fc:	e000      	b.n	8005900 <HAL_QSPI_IRQHandler+0x1f4>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 80058fe:	bf00      	nop
          }
        }
      }

      /* Workaround - Extra data written in the FIFO at the end of a read transfer */
      HAL_QSPI_Abort_IT(hqspi);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 fb8f 	bl	8006024 <HAL_QSPI_Abort_IT>

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2201      	movs	r2, #1
 800590a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 fae8 	bl	8005ee4 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8005914:	e0b0      	b.n	8005a78 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800591c:	b2db      	uxtb	r3, r3
 800591e:	2b02      	cmp	r3, #2
 8005920:	d107      	bne.n	8005932 <HAL_QSPI_IRQHandler+0x226>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2201      	movs	r2, #1
 8005926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 fad0 	bl	8005ed0 <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8005930:	e0a2      	b.n	8005a78 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005938:	b2db      	uxtb	r3, r3
 800593a:	2b08      	cmp	r3, #8
 800593c:	f040 809c 	bne.w	8005a78 <HAL_QSPI_IRQHandler+0x36c>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	695a      	ldr	r2, [r3, #20]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800594e:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800595c:	2b00      	cmp	r3, #0
 800595e:	d103      	bne.n	8005968 <HAL_QSPI_IRQHandler+0x25c>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f000 faab 	bl	8005ebc <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8005966:	e087      	b.n	8005a78 <HAL_QSPI_IRQHandler+0x36c>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 fa9d 	bl	8005ea8 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800596e:	e083      	b.n	8005a78 <HAL_QSPI_IRQHandler+0x36c>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	f003 0308 	and.w	r3, r3, #8
 8005976:	2b00      	cmp	r3, #0
 8005978:	d01f      	beq.n	80059ba <HAL_QSPI_IRQHandler+0x2ae>
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005980:	2b00      	cmp	r3, #0
 8005982:	d01a      	beq.n	80059ba <HAL_QSPI_IRQHandler+0x2ae>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2208      	movs	r2, #8
 800598a:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005996:	2b00      	cmp	r3, #0
 8005998:	d00b      	beq.n	80059b2 <HAL_QSPI_IRQHandler+0x2a6>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80059a8:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2201      	movs	r2, #1
 80059ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 fab4 	bl	8005f20 <HAL_QSPI_StatusMatchCallback>
 80059b8:	e061      	b.n	8005a7e <HAL_QSPI_IRQHandler+0x372>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	f003 0301 	and.w	r3, r3, #1
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d047      	beq.n	8005a54 <HAL_QSPI_IRQHandler+0x348>
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d042      	beq.n	8005a54 <HAL_QSPI_IRQHandler+0x348>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	2201      	movs	r2, #1
 80059d4:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80059e4:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ea:	f043 0202 	orr.w	r2, r3, #2
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 0304 	and.w	r3, r3, #4
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d021      	beq.n	8005a44 <HAL_QSPI_IRQHandler+0x338>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f022 0204 	bic.w	r2, r2, #4
 8005a0e:	601a      	str	r2, [r3, #0]

      /* Disable the DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a14:	4a1c      	ldr	r2, [pc, #112]	; (8005a88 <HAL_QSPI_IRQHandler+0x37c>)
 8005a16:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f7ff f9bf 	bl	8004da0 <HAL_DMA_Abort_IT>
 8005a22:	4603      	mov	r3, r0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d029      	beq.n	8005a7c <HAL_QSPI_IRQHandler+0x370>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a2c:	f043 0204 	orr.w	r2, r3, #4
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f000 fa33 	bl	8005ea8 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005a42:	e01b      	b.n	8005a7c <HAL_QSPI_IRQHandler+0x370>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f000 fa2b 	bl	8005ea8 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005a52:	e013      	b.n	8005a7c <HAL_QSPI_IRQHandler+0x370>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	f003 0310 	and.w	r3, r3, #16
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00f      	beq.n	8005a7e <HAL_QSPI_IRQHandler+0x372>
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d00a      	beq.n	8005a7e <HAL_QSPI_IRQHandler+0x372>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2210      	movs	r2, #16
 8005a6e:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f000 fa5f 	bl	8005f34 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 8005a76:	e002      	b.n	8005a7e <HAL_QSPI_IRQHandler+0x372>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8005a78:	bf00      	nop
 8005a7a:	e000      	b.n	8005a7e <HAL_QSPI_IRQHandler+0x372>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005a7c:	bf00      	nop
}
 8005a7e:	bf00      	nop
 8005a80:	3718      	adds	r7, #24
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	080060f9 	.word	0x080060f9

08005a8c <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b088      	sub	sp, #32
 8005a90:	af02      	add	r7, sp, #8
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005a98:	f7fe f96e 	bl	8003d78 <HAL_GetTick>
 8005a9c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d101      	bne.n	8005aae <HAL_QSPI_Command+0x22>
 8005aaa:	2302      	movs	r3, #2
 8005aac:	e048      	b.n	8005b40 <HAL_QSPI_Command+0xb4>
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d137      	bne.n	8005b32 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2202      	movs	r2, #2
 8005acc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	9300      	str	r3, [sp, #0]
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	2120      	movs	r1, #32
 8005ada:	68f8      	ldr	r0, [r7, #12]
 8005adc:	f000 fb3f 	bl	800615e <QSPI_WaitFlagStateUntilTimeout>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8005ae4:	7dfb      	ldrb	r3, [r7, #23]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d125      	bne.n	8005b36 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8005aea:	2200      	movs	r2, #0
 8005aec:	68b9      	ldr	r1, [r7, #8]
 8005aee:	68f8      	ldr	r0, [r7, #12]
 8005af0:	f000 fb6c 	bl	80061cc <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d115      	bne.n	8005b28 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	9300      	str	r3, [sp, #0]
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	2201      	movs	r2, #1
 8005b04:	2102      	movs	r1, #2
 8005b06:	68f8      	ldr	r0, [r7, #12]
 8005b08:	f000 fb29 	bl	800615e <QSPI_WaitFlagStateUntilTimeout>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8005b10:	7dfb      	ldrb	r3, [r7, #23]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d10f      	bne.n	8005b36 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2202      	movs	r2, #2
 8005b1c:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2201      	movs	r2, #1
 8005b22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b26:	e006      	b.n	8005b36 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b30:	e001      	b.n	8005b36 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8005b32:	2302      	movs	r3, #2
 8005b34:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005b3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3718      	adds	r7, #24
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b08a      	sub	sp, #40	; 0x28
 8005b4c:	af02      	add	r7, sp, #8
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b54:	2300      	movs	r3, #0
 8005b56:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8005b58:	f7fe f90e 	bl	8003d78 <HAL_GetTick>
 8005b5c:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	3320      	adds	r3, #32
 8005b64:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d101      	bne.n	8005b76 <HAL_QSPI_Transmit+0x2e>
 8005b72:	2302      	movs	r3, #2
 8005b74:	e07b      	b.n	8005c6e <HAL_QSPI_Transmit+0x126>
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d16a      	bne.n	8005c60 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d05b      	beq.n	8005c4e <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2212      	movs	r2, #18
 8005b9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	691b      	ldr	r3, [r3, #16]
 8005ba4:	1c5a      	adds	r2, r3, #1
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	691b      	ldr	r3, [r3, #16]
 8005bb0:	1c5a      	adds	r2, r3, #1
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	68ba      	ldr	r2, [r7, #8]
 8005bba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	695a      	ldr	r2, [r3, #20]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8005bca:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8005bcc:	e01b      	b.n	8005c06 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	9300      	str	r3, [sp, #0]
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	2104      	movs	r1, #4
 8005bd8:	68f8      	ldr	r0, [r7, #12]
 8005bda:	f000 fac0 	bl	800615e <QSPI_WaitFlagStateUntilTimeout>
 8005bde:	4603      	mov	r3, r0
 8005be0:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8005be2:	7ffb      	ldrb	r3, [r7, #31]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d113      	bne.n	8005c10 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bec:	781a      	ldrb	r2, [r3, #0]
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf6:	1c5a      	adds	r2, r3, #1
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c00:	1e5a      	subs	r2, r3, #1
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d1df      	bne.n	8005bce <HAL_QSPI_Transmit+0x86>
 8005c0e:	e000      	b.n	8005c12 <HAL_QSPI_Transmit+0xca>
          break;
 8005c10:	bf00      	nop
      }

      if (status == HAL_OK)
 8005c12:	7ffb      	ldrb	r3, [r7, #31]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d115      	bne.n	8005c44 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	9300      	str	r3, [sp, #0]
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	2102      	movs	r1, #2
 8005c22:	68f8      	ldr	r0, [r7, #12]
 8005c24:	f000 fa9b 	bl	800615e <QSPI_WaitFlagStateUntilTimeout>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8005c2c:	7ffb      	ldrb	r3, [r7, #31]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d108      	bne.n	8005c44 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2202      	movs	r2, #2
 8005c38:	60da      	str	r2, [r3, #12]

          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 8005c3a:	68f8      	ldr	r0, [r7, #12]
 8005c3c:	f000 f984 	bl	8005f48 <HAL_QSPI_Abort>
 8005c40:	4603      	mov	r3, r0
 8005c42:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c4c:	e00a      	b.n	8005c64 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c52:	f043 0208 	orr.w	r2, r3, #8
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	77fb      	strb	r3, [r7, #31]
 8005c5e:	e001      	b.n	8005c64 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 8005c60:	2302      	movs	r3, #2
 8005c62:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2200      	movs	r2, #0
 8005c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8005c6c:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3720      	adds	r7, #32
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}

08005c76 <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8005c76:	b580      	push	{r7, lr}
 8005c78:	b08a      	sub	sp, #40	; 0x28
 8005c7a:	af02      	add	r7, sp, #8
 8005c7c:	60f8      	str	r0, [r7, #12]
 8005c7e:	60b9      	str	r1, [r7, #8]
 8005c80:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c82:	2300      	movs	r3, #0
 8005c84:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8005c86:	f7fe f877 	bl	8003d78 <HAL_GetTick>
 8005c8a:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	699b      	ldr	r3, [r3, #24]
 8005c92:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	3320      	adds	r3, #32
 8005c9a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d101      	bne.n	8005cac <HAL_QSPI_Receive+0x36>
 8005ca8:	2302      	movs	r3, #2
 8005caa:	e082      	b.n	8005db2 <HAL_QSPI_Receive+0x13c>
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d171      	bne.n	8005da4 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d062      	beq.n	8005d92 <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2222      	movs	r2, #34	; 0x22
 8005cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	1c5a      	adds	r2, r3, #1
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	1c5a      	adds	r2, r3, #1
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	68ba      	ldr	r2, [r7, #8]
 8005cf0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	695b      	ldr	r3, [r3, #20]
 8005cf8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005d04:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8005d0e:	e01c      	b.n	8005d4a <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	9300      	str	r3, [sp, #0]
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	2201      	movs	r2, #1
 8005d18:	2106      	movs	r1, #6
 8005d1a:	68f8      	ldr	r0, [r7, #12]
 8005d1c:	f000 fa1f 	bl	800615e <QSPI_WaitFlagStateUntilTimeout>
 8005d20:	4603      	mov	r3, r0
 8005d22:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8005d24:	7ffb      	ldrb	r3, [r7, #31]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d114      	bne.n	8005d54 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d2e:	693a      	ldr	r2, [r7, #16]
 8005d30:	7812      	ldrb	r2, [r2, #0]
 8005d32:	b2d2      	uxtb	r2, r2
 8005d34:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d3a:	1c5a      	adds	r2, r3, #1
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d44:	1e5a      	subs	r2, r3, #1
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d1de      	bne.n	8005d10 <HAL_QSPI_Receive+0x9a>
 8005d52:	e000      	b.n	8005d56 <HAL_QSPI_Receive+0xe0>
          break;
 8005d54:	bf00      	nop
      }

      if (status == HAL_OK)
 8005d56:	7ffb      	ldrb	r3, [r7, #31]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d115      	bne.n	8005d88 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	9300      	str	r3, [sp, #0]
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	2201      	movs	r2, #1
 8005d64:	2102      	movs	r1, #2
 8005d66:	68f8      	ldr	r0, [r7, #12]
 8005d68:	f000 f9f9 	bl	800615e <QSPI_WaitFlagStateUntilTimeout>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8005d70:	7ffb      	ldrb	r3, [r7, #31]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d108      	bne.n	8005d88 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	2202      	movs	r2, #2
 8005d7c:	60da      	str	r2, [r3, #12]

          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 8005d7e:	68f8      	ldr	r0, [r7, #12]
 8005d80:	f000 f8e2 	bl	8005f48 <HAL_QSPI_Abort>
 8005d84:	4603      	mov	r3, r0
 8005d86:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d90:	e00a      	b.n	8005da8 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d96:	f043 0208 	orr.w	r2, r3, #8
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	77fb      	strb	r3, [r7, #31]
 8005da2:	e001      	b.n	8005da8 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 8005da4:	2302      	movs	r3, #2
 8005da6:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2200      	movs	r2, #0
 8005dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8005db0:	7ffb      	ldrb	r3, [r7, #31]
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3720      	adds	r7, #32
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}

08005dba <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8005dba:	b580      	push	{r7, lr}
 8005dbc:	b088      	sub	sp, #32
 8005dbe:	af02      	add	r7, sp, #8
 8005dc0:	60f8      	str	r0, [r7, #12]
 8005dc2:	60b9      	str	r1, [r7, #8]
 8005dc4:	607a      	str	r2, [r7, #4]
 8005dc6:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005dc8:	f7fd ffd6 	bl	8003d78 <HAL_GetTick>
 8005dcc:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d101      	bne.n	8005dde <HAL_QSPI_AutoPolling+0x24>
 8005dda:	2302      	movs	r3, #2
 8005ddc:	e060      	b.n	8005ea0 <HAL_QSPI_AutoPolling+0xe6>
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2201      	movs	r2, #1
 8005de2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d14f      	bne.n	8005e92 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2200      	movs	r2, #0
 8005df6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2242      	movs	r2, #66	; 0x42
 8005dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	9300      	str	r3, [sp, #0]
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	2200      	movs	r2, #0
 8005e08:	2120      	movs	r1, #32
 8005e0a:	68f8      	ldr	r0, [r7, #12]
 8005e0c:	f000 f9a7 	bl	800615e <QSPI_WaitFlagStateUntilTimeout>
 8005e10:	4603      	mov	r3, r0
 8005e12:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8005e14:	7dfb      	ldrb	r3, [r7, #23]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d13d      	bne.n	8005e96 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	6812      	ldr	r2, [r2, #0]
 8005e22:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	6852      	ldr	r2, [r2, #4]
 8005e2c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	6892      	ldr	r2, [r2, #8]
 8005e36:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	431a      	orrs	r2, r3
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005e50:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	68da      	ldr	r2, [r3, #12]
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8005e5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005e5e:	68b9      	ldr	r1, [r7, #8]
 8005e60:	68f8      	ldr	r0, [r7, #12]
 8005e62:	f000 f9b3 	bl	80061cc <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	9300      	str	r3, [sp, #0]
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	2108      	movs	r1, #8
 8005e70:	68f8      	ldr	r0, [r7, #12]
 8005e72:	f000 f974 	bl	800615e <QSPI_WaitFlagStateUntilTimeout>
 8005e76:	4603      	mov	r3, r0
 8005e78:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8005e7a:	7dfb      	ldrb	r3, [r7, #23]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d10a      	bne.n	8005e96 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2208      	movs	r2, #8
 8005e86:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e90:	e001      	b.n	8005e96 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8005e92:	2302      	movs	r3, #2
 8005e94:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005e9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3718      	adds	r7, #24
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 8005eb0:	bf00      	nop
 8005eb2:	370c      	adds	r7, #12
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b083      	sub	sp, #12
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 8005ec4:	bf00      	nop
 8005ec6:	370c      	adds	r7, #12
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr

08005ed0 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 8005ed8:	bf00      	nop
 8005eda:	370c      	adds	r7, #12
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr

08005ee4 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 8005eec:	bf00      	nop
 8005eee:	370c      	adds	r7, #12
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b083      	sub	sp, #12
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 8005f00:	bf00      	nop
 8005f02:	370c      	adds	r7, #12
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 8005f14:	bf00      	nop
 8005f16:	370c      	adds	r7, #12
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 8005f28:	bf00      	nop
 8005f2a:	370c      	adds	r7, #12
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 8005f3c:	bf00      	nop
 8005f3e:	370c      	adds	r7, #12
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b086      	sub	sp, #24
 8005f4c:	af02      	add	r7, sp, #8
 8005f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f50:	2300      	movs	r3, #0
 8005f52:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8005f54:	f7fd ff10 	bl	8003d78 <HAL_GetTick>
 8005f58:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	f003 0302 	and.w	r3, r3, #2
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d056      	beq.n	8006018 <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f003 0304 	and.w	r3, r3, #4
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d017      	beq.n	8005fb0 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f022 0204 	bic.w	r2, r2, #4
 8005f8e:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f94:	4618      	mov	r0, r3
 8005f96:	f7fe fe93 	bl	8004cc0 <HAL_DMA_Abort>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 8005f9e:	7bfb      	ldrb	r3, [r7, #15]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d005      	beq.n	8005fb0 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fa8:	f043 0204 	orr.w	r2, r3, #4
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f042 0202 	orr.w	r2, r2, #2
 8005fbe:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fc4:	9300      	str	r3, [sp, #0]
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	2102      	movs	r1, #2
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f000 f8c6 	bl	800615e <QSPI_WaitFlagStateUntilTimeout>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005fd6:	7bfb      	ldrb	r3, [r7, #15]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d10e      	bne.n	8005ffa <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2202      	movs	r2, #2
 8005fe2:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fe8:	9300      	str	r3, [sp, #0]
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	2200      	movs	r2, #0
 8005fee:	2120      	movs	r1, #32
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 f8b4 	bl	800615e <QSPI_WaitFlagStateUntilTimeout>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005ffa:	7bfb      	ldrb	r3, [r7, #15]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d10b      	bne.n	8006018 <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	695a      	ldr	r2, [r3, #20]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800600e:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
  }

  return status;
 8006018:	7bfb      	ldrb	r3, [r7, #15]
}
 800601a:	4618      	mov	r0, r3
 800601c:	3710      	adds	r7, #16
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
	...

08006024 <HAL_QSPI_Abort_IT>:
* @brief  Abort the current transmission (non-blocking function)
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort_IT(QSPI_HandleTypeDef *hqspi)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b084      	sub	sp, #16
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800602c:	2300      	movs	r3, #0
 800602e:	73fb      	strb	r3, [r7, #15]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006036:	b2db      	uxtb	r3, r3
 8006038:	f003 0302 	and.w	r3, r3, #2
 800603c:	2b00      	cmp	r3, #0
 800603e:	d046      	beq.n	80060ce <HAL_QSPI_Abort_IT+0xaa>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_ABORT;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2208      	movs	r2, #8
 800604c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable all interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_TO | QSPI_IT_SM | QSPI_IT_FT | QSPI_IT_TC | QSPI_IT_TE));
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800605e:	601a      	str	r2, [r3, #0]

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 0304 	and.w	r3, r3, #4
 800606a:	2b00      	cmp	r3, #0
 800606c:	d01b      	beq.n	80060a6 <HAL_QSPI_Abort_IT+0x82>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f022 0204 	bic.w	r2, r2, #4
 800607c:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006082:	4a15      	ldr	r2, [pc, #84]	; (80060d8 <HAL_QSPI_Abort_IT+0xb4>)
 8006084:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800608a:	4618      	mov	r0, r3
 800608c:	f7fe fe88 	bl	8004da0 <HAL_DMA_Abort_IT>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d01b      	beq.n	80060ce <HAL_QSPI_Abort_IT+0xaa>
      {
        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2201      	movs	r2, #1
 800609a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f7ff ff0c 	bl	8005ebc <HAL_QSPI_AbortCpltCallback>
 80060a4:	e013      	b.n	80060ce <HAL_QSPI_Abort_IT+0xaa>
      }
    }
    else
    {
      /* Clear interrupt */
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2202      	movs	r2, #2
 80060ac:	60da      	str	r2, [r3, #12]

      /* Enable the QSPI Transfer Complete Interrupt */
      __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80060bc:	601a      	str	r2, [r3, #0]

      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f042 0202 	orr.w	r2, r2, #2
 80060cc:	601a      	str	r2, [r3, #0]
    }
  }
  return status;
 80060ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3710      	adds	r7, #16
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}
 80060d8:	080060f9 	.word	0x080060f9

080060dc <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	683a      	ldr	r2, [r7, #0]
 80060ea:	649a      	str	r2, [r3, #72]	; 0x48
}
 80060ec:	bf00      	nop
 80060ee:	370c      	adds	r7, #12
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <QSPI_DMAAbortCplt>:
  * @brief  DMA QSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006104:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2200      	movs	r2, #0
 800610a:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2200      	movs	r2, #0
 8006110:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006118:	b2db      	uxtb	r3, r3
 800611a:	2b08      	cmp	r3, #8
 800611c:	d114      	bne.n	8006148 <QSPI_DMAAbortCplt+0x50>
  {
    /* DMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	2202      	movs	r2, #2
 8006124:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006134:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f042 0202 	orr.w	r2, r2, #2
 8006144:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 8006146:	e006      	b.n	8006156 <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 8006150:	68f8      	ldr	r0, [r7, #12]
 8006152:	f7ff fea9 	bl	8005ea8 <HAL_QSPI_ErrorCallback>
}
 8006156:	bf00      	nop
 8006158:	3710      	adds	r7, #16
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}

0800615e <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800615e:	b580      	push	{r7, lr}
 8006160:	b084      	sub	sp, #16
 8006162:	af00      	add	r7, sp, #0
 8006164:	60f8      	str	r0, [r7, #12]
 8006166:	60b9      	str	r1, [r7, #8]
 8006168:	603b      	str	r3, [r7, #0]
 800616a:	4613      	mov	r3, r2
 800616c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800616e:	e01a      	b.n	80061a6 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006176:	d016      	beq.n	80061a6 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006178:	f7fd fdfe 	bl	8003d78 <HAL_GetTick>
 800617c:	4602      	mov	r2, r0
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	69ba      	ldr	r2, [r7, #24]
 8006184:	429a      	cmp	r2, r3
 8006186:	d302      	bcc.n	800618e <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006188:	69bb      	ldr	r3, [r7, #24]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d10b      	bne.n	80061a6 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2204      	movs	r2, #4
 8006192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800619a:	f043 0201 	orr.w	r2, r3, #1
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	e00e      	b.n	80061c4 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	689a      	ldr	r2, [r3, #8]
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	4013      	ands	r3, r2
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	bf14      	ite	ne
 80061b4:	2301      	movne	r3, #1
 80061b6:	2300      	moveq	r3, #0
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	461a      	mov	r2, r3
 80061bc:	79fb      	ldrb	r3, [r7, #7]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d1d6      	bne.n	8006170 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3710      	adds	r7, #16
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}

080061cc <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b085      	sub	sp, #20
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	60f8      	str	r0, [r7, #12]
 80061d4:	60b9      	str	r1, [r7, #8]
 80061d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d009      	beq.n	80061f4 <QSPI_Config+0x28>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80061e6:	d005      	beq.n	80061f4 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	3a01      	subs	r2, #1
 80061f2:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	699b      	ldr	r3, [r3, #24]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	f000 80b9 	beq.w	8006370 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	6a1b      	ldr	r3, [r3, #32]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d05f      	beq.n	80062c6 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68ba      	ldr	r2, [r7, #8]
 800620c:	6892      	ldr	r2, [r2, #8]
 800620e:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	69db      	ldr	r3, [r3, #28]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d031      	beq.n	800627c <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006220:	431a      	orrs	r2, r3
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006226:	431a      	orrs	r2, r3
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622c:	431a      	orrs	r2, r3
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	695b      	ldr	r3, [r3, #20]
 8006232:	049b      	lsls	r3, r3, #18
 8006234:	431a      	orrs	r2, r3
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	431a      	orrs	r2, r3
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	6a1b      	ldr	r3, [r3, #32]
 8006240:	431a      	orrs	r2, r3
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	431a      	orrs	r2, r3
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	69db      	ldr	r3, [r3, #28]
 800624c:	431a      	orrs	r2, r3
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	699b      	ldr	r3, [r3, #24]
 8006252:	431a      	orrs	r2, r3
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	ea42 0103 	orr.w	r1, r2, r3
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	430a      	orrs	r2, r1
 8006264:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800626c:	f000 812e 	beq.w	80064cc <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	68ba      	ldr	r2, [r7, #8]
 8006276:	6852      	ldr	r2, [r2, #4]
 8006278:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800627a:	e127      	b.n	80064cc <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006284:	431a      	orrs	r2, r3
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800628a:	431a      	orrs	r2, r3
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006290:	431a      	orrs	r2, r3
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	695b      	ldr	r3, [r3, #20]
 8006296:	049b      	lsls	r3, r3, #18
 8006298:	431a      	orrs	r2, r3
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	431a      	orrs	r2, r3
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	6a1b      	ldr	r3, [r3, #32]
 80062a4:	431a      	orrs	r2, r3
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	69db      	ldr	r3, [r3, #28]
 80062aa:	431a      	orrs	r2, r3
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	699b      	ldr	r3, [r3, #24]
 80062b0:	431a      	orrs	r2, r3
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	ea42 0103 	orr.w	r1, r2, r3
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	430a      	orrs	r2, r1
 80062c2:	615a      	str	r2, [r3, #20]
}
 80062c4:	e102      	b.n	80064cc <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	69db      	ldr	r3, [r3, #28]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d02e      	beq.n	800632c <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d6:	431a      	orrs	r2, r3
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062dc:	431a      	orrs	r2, r3
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e2:	431a      	orrs	r2, r3
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	695b      	ldr	r3, [r3, #20]
 80062e8:	049b      	lsls	r3, r3, #18
 80062ea:	431a      	orrs	r2, r3
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	6a1b      	ldr	r3, [r3, #32]
 80062f0:	431a      	orrs	r2, r3
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	431a      	orrs	r2, r3
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	69db      	ldr	r3, [r3, #28]
 80062fc:	431a      	orrs	r2, r3
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	699b      	ldr	r3, [r3, #24]
 8006302:	431a      	orrs	r2, r3
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	ea42 0103 	orr.w	r1, r2, r3
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	430a      	orrs	r2, r1
 8006314:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800631c:	f000 80d6 	beq.w	80064cc <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	68ba      	ldr	r2, [r7, #8]
 8006326:	6852      	ldr	r2, [r2, #4]
 8006328:	619a      	str	r2, [r3, #24]
}
 800632a:	e0cf      	b.n	80064cc <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006334:	431a      	orrs	r2, r3
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800633a:	431a      	orrs	r2, r3
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006340:	431a      	orrs	r2, r3
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	695b      	ldr	r3, [r3, #20]
 8006346:	049b      	lsls	r3, r3, #18
 8006348:	431a      	orrs	r2, r3
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	6a1b      	ldr	r3, [r3, #32]
 800634e:	431a      	orrs	r2, r3
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	69db      	ldr	r3, [r3, #28]
 8006354:	431a      	orrs	r2, r3
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	699b      	ldr	r3, [r3, #24]
 800635a:	431a      	orrs	r2, r3
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	ea42 0103 	orr.w	r1, r2, r3
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	430a      	orrs	r2, r1
 800636c:	615a      	str	r2, [r3, #20]
}
 800636e:	e0ad      	b.n	80064cc <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	6a1b      	ldr	r3, [r3, #32]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d058      	beq.n	800642a <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68ba      	ldr	r2, [r7, #8]
 800637e:	6892      	ldr	r2, [r2, #8]
 8006380:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	69db      	ldr	r3, [r3, #28]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d02d      	beq.n	80063e6 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006392:	431a      	orrs	r2, r3
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006398:	431a      	orrs	r2, r3
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639e:	431a      	orrs	r2, r3
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	695b      	ldr	r3, [r3, #20]
 80063a4:	049b      	lsls	r3, r3, #18
 80063a6:	431a      	orrs	r2, r3
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	691b      	ldr	r3, [r3, #16]
 80063ac:	431a      	orrs	r2, r3
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	6a1b      	ldr	r3, [r3, #32]
 80063b2:	431a      	orrs	r2, r3
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	431a      	orrs	r2, r3
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	69db      	ldr	r3, [r3, #28]
 80063be:	431a      	orrs	r2, r3
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	699b      	ldr	r3, [r3, #24]
 80063c4:	ea42 0103 	orr.w	r1, r2, r3
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	430a      	orrs	r2, r1
 80063d0:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80063d8:	d078      	beq.n	80064cc <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	68ba      	ldr	r2, [r7, #8]
 80063e0:	6852      	ldr	r2, [r2, #4]
 80063e2:	619a      	str	r2, [r3, #24]
}
 80063e4:	e072      	b.n	80064cc <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ee:	431a      	orrs	r2, r3
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063f4:	431a      	orrs	r2, r3
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063fa:	431a      	orrs	r2, r3
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	695b      	ldr	r3, [r3, #20]
 8006400:	049b      	lsls	r3, r3, #18
 8006402:	431a      	orrs	r2, r3
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	691b      	ldr	r3, [r3, #16]
 8006408:	431a      	orrs	r2, r3
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	6a1b      	ldr	r3, [r3, #32]
 800640e:	431a      	orrs	r2, r3
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	69db      	ldr	r3, [r3, #28]
 8006414:	431a      	orrs	r2, r3
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	699b      	ldr	r3, [r3, #24]
 800641a:	ea42 0103 	orr.w	r1, r2, r3
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	430a      	orrs	r2, r1
 8006426:	615a      	str	r2, [r3, #20]
}
 8006428:	e050      	b.n	80064cc <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	69db      	ldr	r3, [r3, #28]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d02a      	beq.n	8006488 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800643a:	431a      	orrs	r2, r3
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006440:	431a      	orrs	r2, r3
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006446:	431a      	orrs	r2, r3
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	695b      	ldr	r3, [r3, #20]
 800644c:	049b      	lsls	r3, r3, #18
 800644e:	431a      	orrs	r2, r3
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	6a1b      	ldr	r3, [r3, #32]
 8006454:	431a      	orrs	r2, r3
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	431a      	orrs	r2, r3
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	69db      	ldr	r3, [r3, #28]
 8006460:	431a      	orrs	r2, r3
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	699b      	ldr	r3, [r3, #24]
 8006466:	ea42 0103 	orr.w	r1, r2, r3
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	430a      	orrs	r2, r1
 8006472:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800647a:	d027      	beq.n	80064cc <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	68ba      	ldr	r2, [r7, #8]
 8006482:	6852      	ldr	r2, [r2, #4]
 8006484:	619a      	str	r2, [r3, #24]
}
 8006486:	e021      	b.n	80064cc <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648c:	2b00      	cmp	r3, #0
 800648e:	d01d      	beq.n	80064cc <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006498:	431a      	orrs	r2, r3
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800649e:	431a      	orrs	r2, r3
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a4:	431a      	orrs	r2, r3
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	695b      	ldr	r3, [r3, #20]
 80064aa:	049b      	lsls	r3, r3, #18
 80064ac:	431a      	orrs	r2, r3
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	6a1b      	ldr	r3, [r3, #32]
 80064b2:	431a      	orrs	r2, r3
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	69db      	ldr	r3, [r3, #28]
 80064b8:	431a      	orrs	r2, r3
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	699b      	ldr	r3, [r3, #24]
 80064be:	ea42 0103 	orr.w	r1, r2, r3
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	430a      	orrs	r2, r1
 80064ca:	615a      	str	r2, [r3, #20]
}
 80064cc:	bf00      	nop
 80064ce:	3714      	adds	r7, #20
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d101      	bne.n	80064ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	e0cc      	b.n	8006686 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80064ec:	4b68      	ldr	r3, [pc, #416]	; (8006690 <HAL_RCC_ClockConfig+0x1b8>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f003 030f 	and.w	r3, r3, #15
 80064f4:	683a      	ldr	r2, [r7, #0]
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d90c      	bls.n	8006514 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064fa:	4b65      	ldr	r3, [pc, #404]	; (8006690 <HAL_RCC_ClockConfig+0x1b8>)
 80064fc:	683a      	ldr	r2, [r7, #0]
 80064fe:	b2d2      	uxtb	r2, r2
 8006500:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006502:	4b63      	ldr	r3, [pc, #396]	; (8006690 <HAL_RCC_ClockConfig+0x1b8>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f003 030f 	and.w	r3, r3, #15
 800650a:	683a      	ldr	r2, [r7, #0]
 800650c:	429a      	cmp	r2, r3
 800650e:	d001      	beq.n	8006514 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	e0b8      	b.n	8006686 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 0302 	and.w	r3, r3, #2
 800651c:	2b00      	cmp	r3, #0
 800651e:	d020      	beq.n	8006562 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 0304 	and.w	r3, r3, #4
 8006528:	2b00      	cmp	r3, #0
 800652a:	d005      	beq.n	8006538 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800652c:	4b59      	ldr	r3, [pc, #356]	; (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	4a58      	ldr	r2, [pc, #352]	; (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 8006532:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006536:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 0308 	and.w	r3, r3, #8
 8006540:	2b00      	cmp	r3, #0
 8006542:	d005      	beq.n	8006550 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006544:	4b53      	ldr	r3, [pc, #332]	; (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	4a52      	ldr	r2, [pc, #328]	; (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 800654a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800654e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006550:	4b50      	ldr	r3, [pc, #320]	; (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	494d      	ldr	r1, [pc, #308]	; (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 800655e:	4313      	orrs	r3, r2
 8006560:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f003 0301 	and.w	r3, r3, #1
 800656a:	2b00      	cmp	r3, #0
 800656c:	d044      	beq.n	80065f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	2b01      	cmp	r3, #1
 8006574:	d107      	bne.n	8006586 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006576:	4b47      	ldr	r3, [pc, #284]	; (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800657e:	2b00      	cmp	r3, #0
 8006580:	d119      	bne.n	80065b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	e07f      	b.n	8006686 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	2b02      	cmp	r3, #2
 800658c:	d003      	beq.n	8006596 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006592:	2b03      	cmp	r3, #3
 8006594:	d107      	bne.n	80065a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006596:	4b3f      	ldr	r3, [pc, #252]	; (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d109      	bne.n	80065b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e06f      	b.n	8006686 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065a6:	4b3b      	ldr	r3, [pc, #236]	; (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f003 0302 	and.w	r3, r3, #2
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d101      	bne.n	80065b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	e067      	b.n	8006686 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80065b6:	4b37      	ldr	r3, [pc, #220]	; (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	f023 0203 	bic.w	r2, r3, #3
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	4934      	ldr	r1, [pc, #208]	; (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 80065c4:	4313      	orrs	r3, r2
 80065c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80065c8:	f7fd fbd6 	bl	8003d78 <HAL_GetTick>
 80065cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065ce:	e00a      	b.n	80065e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065d0:	f7fd fbd2 	bl	8003d78 <HAL_GetTick>
 80065d4:	4602      	mov	r2, r0
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	1ad3      	subs	r3, r2, r3
 80065da:	f241 3288 	movw	r2, #5000	; 0x1388
 80065de:	4293      	cmp	r3, r2
 80065e0:	d901      	bls.n	80065e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80065e2:	2303      	movs	r3, #3
 80065e4:	e04f      	b.n	8006686 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065e6:	4b2b      	ldr	r3, [pc, #172]	; (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	f003 020c 	and.w	r2, r3, #12
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d1eb      	bne.n	80065d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80065f8:	4b25      	ldr	r3, [pc, #148]	; (8006690 <HAL_RCC_ClockConfig+0x1b8>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 030f 	and.w	r3, r3, #15
 8006600:	683a      	ldr	r2, [r7, #0]
 8006602:	429a      	cmp	r2, r3
 8006604:	d20c      	bcs.n	8006620 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006606:	4b22      	ldr	r3, [pc, #136]	; (8006690 <HAL_RCC_ClockConfig+0x1b8>)
 8006608:	683a      	ldr	r2, [r7, #0]
 800660a:	b2d2      	uxtb	r2, r2
 800660c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800660e:	4b20      	ldr	r3, [pc, #128]	; (8006690 <HAL_RCC_ClockConfig+0x1b8>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 030f 	and.w	r3, r3, #15
 8006616:	683a      	ldr	r2, [r7, #0]
 8006618:	429a      	cmp	r2, r3
 800661a:	d001      	beq.n	8006620 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	e032      	b.n	8006686 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 0304 	and.w	r3, r3, #4
 8006628:	2b00      	cmp	r3, #0
 800662a:	d008      	beq.n	800663e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800662c:	4b19      	ldr	r3, [pc, #100]	; (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	4916      	ldr	r1, [pc, #88]	; (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 800663a:	4313      	orrs	r3, r2
 800663c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 0308 	and.w	r3, r3, #8
 8006646:	2b00      	cmp	r3, #0
 8006648:	d009      	beq.n	800665e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800664a:	4b12      	ldr	r3, [pc, #72]	; (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	00db      	lsls	r3, r3, #3
 8006658:	490e      	ldr	r1, [pc, #56]	; (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 800665a:	4313      	orrs	r3, r2
 800665c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800665e:	f000 f887 	bl	8006770 <HAL_RCC_GetSysClockFreq>
 8006662:	4602      	mov	r2, r0
 8006664:	4b0b      	ldr	r3, [pc, #44]	; (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	091b      	lsrs	r3, r3, #4
 800666a:	f003 030f 	and.w	r3, r3, #15
 800666e:	490a      	ldr	r1, [pc, #40]	; (8006698 <HAL_RCC_ClockConfig+0x1c0>)
 8006670:	5ccb      	ldrb	r3, [r1, r3]
 8006672:	fa22 f303 	lsr.w	r3, r2, r3
 8006676:	4a09      	ldr	r2, [pc, #36]	; (800669c <HAL_RCC_ClockConfig+0x1c4>)
 8006678:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800667a:	4b09      	ldr	r3, [pc, #36]	; (80066a0 <HAL_RCC_ClockConfig+0x1c8>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4618      	mov	r0, r3
 8006680:	f7fc fcec 	bl	800305c <HAL_InitTick>

  return HAL_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3710      	adds	r7, #16
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	40023c00 	.word	0x40023c00
 8006694:	40023800 	.word	0x40023800
 8006698:	0800b570 	.word	0x0800b570
 800669c:	20000078 	.word	0x20000078
 80066a0:	2000007c 	.word	0x2000007c

080066a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066a4:	b480      	push	{r7}
 80066a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80066a8:	4b03      	ldr	r3, [pc, #12]	; (80066b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80066aa:	681b      	ldr	r3, [r3, #0]
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr
 80066b6:	bf00      	nop
 80066b8:	20000078 	.word	0x20000078

080066bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80066c0:	f7ff fff0 	bl	80066a4 <HAL_RCC_GetHCLKFreq>
 80066c4:	4602      	mov	r2, r0
 80066c6:	4b05      	ldr	r3, [pc, #20]	; (80066dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	0a9b      	lsrs	r3, r3, #10
 80066cc:	f003 0307 	and.w	r3, r3, #7
 80066d0:	4903      	ldr	r1, [pc, #12]	; (80066e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80066d2:	5ccb      	ldrb	r3, [r1, r3]
 80066d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066d8:	4618      	mov	r0, r3
 80066da:	bd80      	pop	{r7, pc}
 80066dc:	40023800 	.word	0x40023800
 80066e0:	0800b580 	.word	0x0800b580

080066e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80066e8:	f7ff ffdc 	bl	80066a4 <HAL_RCC_GetHCLKFreq>
 80066ec:	4602      	mov	r2, r0
 80066ee:	4b05      	ldr	r3, [pc, #20]	; (8006704 <HAL_RCC_GetPCLK2Freq+0x20>)
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	0b5b      	lsrs	r3, r3, #13
 80066f4:	f003 0307 	and.w	r3, r3, #7
 80066f8:	4903      	ldr	r1, [pc, #12]	; (8006708 <HAL_RCC_GetPCLK2Freq+0x24>)
 80066fa:	5ccb      	ldrb	r3, [r1, r3]
 80066fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006700:	4618      	mov	r0, r3
 8006702:	bd80      	pop	{r7, pc}
 8006704:	40023800 	.word	0x40023800
 8006708:	0800b580 	.word	0x0800b580

0800670c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800670c:	b480      	push	{r7}
 800670e:	b083      	sub	sp, #12
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	220f      	movs	r2, #15
 800671a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800671c:	4b12      	ldr	r3, [pc, #72]	; (8006768 <HAL_RCC_GetClockConfig+0x5c>)
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	f003 0203 	and.w	r2, r3, #3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006728:	4b0f      	ldr	r3, [pc, #60]	; (8006768 <HAL_RCC_GetClockConfig+0x5c>)
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006734:	4b0c      	ldr	r3, [pc, #48]	; (8006768 <HAL_RCC_GetClockConfig+0x5c>)
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006740:	4b09      	ldr	r3, [pc, #36]	; (8006768 <HAL_RCC_GetClockConfig+0x5c>)
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	08db      	lsrs	r3, r3, #3
 8006746:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800674e:	4b07      	ldr	r3, [pc, #28]	; (800676c <HAL_RCC_GetClockConfig+0x60>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f003 020f 	and.w	r2, r3, #15
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	601a      	str	r2, [r3, #0]
}
 800675a:	bf00      	nop
 800675c:	370c      	adds	r7, #12
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr
 8006766:	bf00      	nop
 8006768:	40023800 	.word	0x40023800
 800676c:	40023c00 	.word	0x40023c00

08006770 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006770:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006774:	b087      	sub	sp, #28
 8006776:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006778:	2600      	movs	r6, #0
 800677a:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 800677c:	2600      	movs	r6, #0
 800677e:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 8006780:	2600      	movs	r6, #0
 8006782:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 8006784:	2600      	movs	r6, #0
 8006786:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006788:	2600      	movs	r6, #0
 800678a:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800678c:	4ea3      	ldr	r6, [pc, #652]	; (8006a1c <HAL_RCC_GetSysClockFreq+0x2ac>)
 800678e:	68b6      	ldr	r6, [r6, #8]
 8006790:	f006 060c 	and.w	r6, r6, #12
 8006794:	2e0c      	cmp	r6, #12
 8006796:	f200 8137 	bhi.w	8006a08 <HAL_RCC_GetSysClockFreq+0x298>
 800679a:	f20f 0c08 	addw	ip, pc, #8
 800679e:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 80067a2:	bf00      	nop
 80067a4:	080067d9 	.word	0x080067d9
 80067a8:	08006a09 	.word	0x08006a09
 80067ac:	08006a09 	.word	0x08006a09
 80067b0:	08006a09 	.word	0x08006a09
 80067b4:	080067df 	.word	0x080067df
 80067b8:	08006a09 	.word	0x08006a09
 80067bc:	08006a09 	.word	0x08006a09
 80067c0:	08006a09 	.word	0x08006a09
 80067c4:	080067e5 	.word	0x080067e5
 80067c8:	08006a09 	.word	0x08006a09
 80067cc:	08006a09 	.word	0x08006a09
 80067d0:	08006a09 	.word	0x08006a09
 80067d4:	080068fb 	.word	0x080068fb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80067d8:	4b91      	ldr	r3, [pc, #580]	; (8006a20 <HAL_RCC_GetSysClockFreq+0x2b0>)
 80067da:	613b      	str	r3, [r7, #16]
       break;
 80067dc:	e117      	b.n	8006a0e <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80067de:	4b91      	ldr	r3, [pc, #580]	; (8006a24 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80067e0:	613b      	str	r3, [r7, #16]
      break;
 80067e2:	e114      	b.n	8006a0e <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80067e4:	4b8d      	ldr	r3, [pc, #564]	; (8006a1c <HAL_RCC_GetSysClockFreq+0x2ac>)
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067ec:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80067ee:	4b8b      	ldr	r3, [pc, #556]	; (8006a1c <HAL_RCC_GetSysClockFreq+0x2ac>)
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d024      	beq.n	8006844 <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067fa:	4b88      	ldr	r3, [pc, #544]	; (8006a1c <HAL_RCC_GetSysClockFreq+0x2ac>)
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	099b      	lsrs	r3, r3, #6
 8006800:	461a      	mov	r2, r3
 8006802:	f04f 0300 	mov.w	r3, #0
 8006806:	f240 14ff 	movw	r4, #511	; 0x1ff
 800680a:	f04f 0500 	mov.w	r5, #0
 800680e:	ea02 0004 	and.w	r0, r2, r4
 8006812:	ea03 0105 	and.w	r1, r3, r5
 8006816:	4b83      	ldr	r3, [pc, #524]	; (8006a24 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8006818:	fb03 f201 	mul.w	r2, r3, r1
 800681c:	2300      	movs	r3, #0
 800681e:	fb03 f300 	mul.w	r3, r3, r0
 8006822:	4413      	add	r3, r2
 8006824:	4a7f      	ldr	r2, [pc, #508]	; (8006a24 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8006826:	fba0 0102 	umull	r0, r1, r0, r2
 800682a:	440b      	add	r3, r1
 800682c:	4619      	mov	r1, r3
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	461a      	mov	r2, r3
 8006832:	f04f 0300 	mov.w	r3, #0
 8006836:	f7f9 fceb 	bl	8000210 <__aeabi_uldivmod>
 800683a:	4602      	mov	r2, r0
 800683c:	460b      	mov	r3, r1
 800683e:	4613      	mov	r3, r2
 8006840:	617b      	str	r3, [r7, #20]
 8006842:	e04c      	b.n	80068de <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006844:	4b75      	ldr	r3, [pc, #468]	; (8006a1c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	099b      	lsrs	r3, r3, #6
 800684a:	461a      	mov	r2, r3
 800684c:	f04f 0300 	mov.w	r3, #0
 8006850:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006854:	f04f 0100 	mov.w	r1, #0
 8006858:	ea02 0800 	and.w	r8, r2, r0
 800685c:	ea03 0901 	and.w	r9, r3, r1
 8006860:	4640      	mov	r0, r8
 8006862:	4649      	mov	r1, r9
 8006864:	f04f 0200 	mov.w	r2, #0
 8006868:	f04f 0300 	mov.w	r3, #0
 800686c:	014b      	lsls	r3, r1, #5
 800686e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006872:	0142      	lsls	r2, r0, #5
 8006874:	4610      	mov	r0, r2
 8006876:	4619      	mov	r1, r3
 8006878:	ebb0 0008 	subs.w	r0, r0, r8
 800687c:	eb61 0109 	sbc.w	r1, r1, r9
 8006880:	f04f 0200 	mov.w	r2, #0
 8006884:	f04f 0300 	mov.w	r3, #0
 8006888:	018b      	lsls	r3, r1, #6
 800688a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800688e:	0182      	lsls	r2, r0, #6
 8006890:	1a12      	subs	r2, r2, r0
 8006892:	eb63 0301 	sbc.w	r3, r3, r1
 8006896:	f04f 0000 	mov.w	r0, #0
 800689a:	f04f 0100 	mov.w	r1, #0
 800689e:	00d9      	lsls	r1, r3, #3
 80068a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80068a4:	00d0      	lsls	r0, r2, #3
 80068a6:	4602      	mov	r2, r0
 80068a8:	460b      	mov	r3, r1
 80068aa:	eb12 0208 	adds.w	r2, r2, r8
 80068ae:	eb43 0309 	adc.w	r3, r3, r9
 80068b2:	f04f 0000 	mov.w	r0, #0
 80068b6:	f04f 0100 	mov.w	r1, #0
 80068ba:	0299      	lsls	r1, r3, #10
 80068bc:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80068c0:	0290      	lsls	r0, r2, #10
 80068c2:	4602      	mov	r2, r0
 80068c4:	460b      	mov	r3, r1
 80068c6:	4610      	mov	r0, r2
 80068c8:	4619      	mov	r1, r3
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	461a      	mov	r2, r3
 80068ce:	f04f 0300 	mov.w	r3, #0
 80068d2:	f7f9 fc9d 	bl	8000210 <__aeabi_uldivmod>
 80068d6:	4602      	mov	r2, r0
 80068d8:	460b      	mov	r3, r1
 80068da:	4613      	mov	r3, r2
 80068dc:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80068de:	4b4f      	ldr	r3, [pc, #316]	; (8006a1c <HAL_RCC_GetSysClockFreq+0x2ac>)
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	0c1b      	lsrs	r3, r3, #16
 80068e4:	f003 0303 	and.w	r3, r3, #3
 80068e8:	3301      	adds	r3, #1
 80068ea:	005b      	lsls	r3, r3, #1
 80068ec:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80068ee:	697a      	ldr	r2, [r7, #20]
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80068f6:	613b      	str	r3, [r7, #16]
      break;
 80068f8:	e089      	b.n	8006a0e <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80068fa:	4948      	ldr	r1, [pc, #288]	; (8006a1c <HAL_RCC_GetSysClockFreq+0x2ac>)
 80068fc:	6849      	ldr	r1, [r1, #4]
 80068fe:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8006902:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006904:	4945      	ldr	r1, [pc, #276]	; (8006a1c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8006906:	6849      	ldr	r1, [r1, #4]
 8006908:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800690c:	2900      	cmp	r1, #0
 800690e:	d024      	beq.n	800695a <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006910:	4942      	ldr	r1, [pc, #264]	; (8006a1c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8006912:	6849      	ldr	r1, [r1, #4]
 8006914:	0989      	lsrs	r1, r1, #6
 8006916:	4608      	mov	r0, r1
 8006918:	f04f 0100 	mov.w	r1, #0
 800691c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8006920:	f04f 0500 	mov.w	r5, #0
 8006924:	ea00 0204 	and.w	r2, r0, r4
 8006928:	ea01 0305 	and.w	r3, r1, r5
 800692c:	493d      	ldr	r1, [pc, #244]	; (8006a24 <HAL_RCC_GetSysClockFreq+0x2b4>)
 800692e:	fb01 f003 	mul.w	r0, r1, r3
 8006932:	2100      	movs	r1, #0
 8006934:	fb01 f102 	mul.w	r1, r1, r2
 8006938:	1844      	adds	r4, r0, r1
 800693a:	493a      	ldr	r1, [pc, #232]	; (8006a24 <HAL_RCC_GetSysClockFreq+0x2b4>)
 800693c:	fba2 0101 	umull	r0, r1, r2, r1
 8006940:	1863      	adds	r3, r4, r1
 8006942:	4619      	mov	r1, r3
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	461a      	mov	r2, r3
 8006948:	f04f 0300 	mov.w	r3, #0
 800694c:	f7f9 fc60 	bl	8000210 <__aeabi_uldivmod>
 8006950:	4602      	mov	r2, r0
 8006952:	460b      	mov	r3, r1
 8006954:	4613      	mov	r3, r2
 8006956:	617b      	str	r3, [r7, #20]
 8006958:	e04a      	b.n	80069f0 <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800695a:	4b30      	ldr	r3, [pc, #192]	; (8006a1c <HAL_RCC_GetSysClockFreq+0x2ac>)
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	099b      	lsrs	r3, r3, #6
 8006960:	461a      	mov	r2, r3
 8006962:	f04f 0300 	mov.w	r3, #0
 8006966:	f240 10ff 	movw	r0, #511	; 0x1ff
 800696a:	f04f 0100 	mov.w	r1, #0
 800696e:	ea02 0400 	and.w	r4, r2, r0
 8006972:	ea03 0501 	and.w	r5, r3, r1
 8006976:	4620      	mov	r0, r4
 8006978:	4629      	mov	r1, r5
 800697a:	f04f 0200 	mov.w	r2, #0
 800697e:	f04f 0300 	mov.w	r3, #0
 8006982:	014b      	lsls	r3, r1, #5
 8006984:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006988:	0142      	lsls	r2, r0, #5
 800698a:	4610      	mov	r0, r2
 800698c:	4619      	mov	r1, r3
 800698e:	1b00      	subs	r0, r0, r4
 8006990:	eb61 0105 	sbc.w	r1, r1, r5
 8006994:	f04f 0200 	mov.w	r2, #0
 8006998:	f04f 0300 	mov.w	r3, #0
 800699c:	018b      	lsls	r3, r1, #6
 800699e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80069a2:	0182      	lsls	r2, r0, #6
 80069a4:	1a12      	subs	r2, r2, r0
 80069a6:	eb63 0301 	sbc.w	r3, r3, r1
 80069aa:	f04f 0000 	mov.w	r0, #0
 80069ae:	f04f 0100 	mov.w	r1, #0
 80069b2:	00d9      	lsls	r1, r3, #3
 80069b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80069b8:	00d0      	lsls	r0, r2, #3
 80069ba:	4602      	mov	r2, r0
 80069bc:	460b      	mov	r3, r1
 80069be:	1912      	adds	r2, r2, r4
 80069c0:	eb45 0303 	adc.w	r3, r5, r3
 80069c4:	f04f 0000 	mov.w	r0, #0
 80069c8:	f04f 0100 	mov.w	r1, #0
 80069cc:	0299      	lsls	r1, r3, #10
 80069ce:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80069d2:	0290      	lsls	r0, r2, #10
 80069d4:	4602      	mov	r2, r0
 80069d6:	460b      	mov	r3, r1
 80069d8:	4610      	mov	r0, r2
 80069da:	4619      	mov	r1, r3
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	461a      	mov	r2, r3
 80069e0:	f04f 0300 	mov.w	r3, #0
 80069e4:	f7f9 fc14 	bl	8000210 <__aeabi_uldivmod>
 80069e8:	4602      	mov	r2, r0
 80069ea:	460b      	mov	r3, r1
 80069ec:	4613      	mov	r3, r2
 80069ee:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80069f0:	4b0a      	ldr	r3, [pc, #40]	; (8006a1c <HAL_RCC_GetSysClockFreq+0x2ac>)
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	0f1b      	lsrs	r3, r3, #28
 80069f6:	f003 0307 	and.w	r3, r3, #7
 80069fa:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80069fc:	697a      	ldr	r2, [r7, #20]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a04:	613b      	str	r3, [r7, #16]
      break;
 8006a06:	e002      	b.n	8006a0e <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a08:	4b05      	ldr	r3, [pc, #20]	; (8006a20 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8006a0a:	613b      	str	r3, [r7, #16]
      break;
 8006a0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a0e:	693b      	ldr	r3, [r7, #16]
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	371c      	adds	r7, #28
 8006a14:	46bd      	mov	sp, r7
 8006a16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a1a:	bf00      	nop
 8006a1c:	40023800 	.word	0x40023800
 8006a20:	00f42400 	.word	0x00f42400
 8006a24:	017d7840 	.word	0x017d7840

08006a28 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b086      	sub	sp, #24
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d101      	bne.n	8006a3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	e28d      	b.n	8006f56 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f003 0301 	and.w	r3, r3, #1
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	f000 8083 	beq.w	8006b4e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006a48:	4b94      	ldr	r3, [pc, #592]	; (8006c9c <HAL_RCC_OscConfig+0x274>)
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	f003 030c 	and.w	r3, r3, #12
 8006a50:	2b04      	cmp	r3, #4
 8006a52:	d019      	beq.n	8006a88 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006a54:	4b91      	ldr	r3, [pc, #580]	; (8006c9c <HAL_RCC_OscConfig+0x274>)
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006a5c:	2b08      	cmp	r3, #8
 8006a5e:	d106      	bne.n	8006a6e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006a60:	4b8e      	ldr	r3, [pc, #568]	; (8006c9c <HAL_RCC_OscConfig+0x274>)
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a6c:	d00c      	beq.n	8006a88 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a6e:	4b8b      	ldr	r3, [pc, #556]	; (8006c9c <HAL_RCC_OscConfig+0x274>)
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006a76:	2b0c      	cmp	r3, #12
 8006a78:	d112      	bne.n	8006aa0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a7a:	4b88      	ldr	r3, [pc, #544]	; (8006c9c <HAL_RCC_OscConfig+0x274>)
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a86:	d10b      	bne.n	8006aa0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a88:	4b84      	ldr	r3, [pc, #528]	; (8006c9c <HAL_RCC_OscConfig+0x274>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d05b      	beq.n	8006b4c <HAL_RCC_OscConfig+0x124>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d157      	bne.n	8006b4c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e25a      	b.n	8006f56 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006aa8:	d106      	bne.n	8006ab8 <HAL_RCC_OscConfig+0x90>
 8006aaa:	4b7c      	ldr	r3, [pc, #496]	; (8006c9c <HAL_RCC_OscConfig+0x274>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a7b      	ldr	r2, [pc, #492]	; (8006c9c <HAL_RCC_OscConfig+0x274>)
 8006ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ab4:	6013      	str	r3, [r2, #0]
 8006ab6:	e01d      	b.n	8006af4 <HAL_RCC_OscConfig+0xcc>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ac0:	d10c      	bne.n	8006adc <HAL_RCC_OscConfig+0xb4>
 8006ac2:	4b76      	ldr	r3, [pc, #472]	; (8006c9c <HAL_RCC_OscConfig+0x274>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a75      	ldr	r2, [pc, #468]	; (8006c9c <HAL_RCC_OscConfig+0x274>)
 8006ac8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006acc:	6013      	str	r3, [r2, #0]
 8006ace:	4b73      	ldr	r3, [pc, #460]	; (8006c9c <HAL_RCC_OscConfig+0x274>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a72      	ldr	r2, [pc, #456]	; (8006c9c <HAL_RCC_OscConfig+0x274>)
 8006ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ad8:	6013      	str	r3, [r2, #0]
 8006ada:	e00b      	b.n	8006af4 <HAL_RCC_OscConfig+0xcc>
 8006adc:	4b6f      	ldr	r3, [pc, #444]	; (8006c9c <HAL_RCC_OscConfig+0x274>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a6e      	ldr	r2, [pc, #440]	; (8006c9c <HAL_RCC_OscConfig+0x274>)
 8006ae2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ae6:	6013      	str	r3, [r2, #0]
 8006ae8:	4b6c      	ldr	r3, [pc, #432]	; (8006c9c <HAL_RCC_OscConfig+0x274>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a6b      	ldr	r2, [pc, #428]	; (8006c9c <HAL_RCC_OscConfig+0x274>)
 8006aee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006af2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d013      	beq.n	8006b24 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006afc:	f7fd f93c 	bl	8003d78 <HAL_GetTick>
 8006b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b02:	e008      	b.n	8006b16 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b04:	f7fd f938 	bl	8003d78 <HAL_GetTick>
 8006b08:	4602      	mov	r2, r0
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	1ad3      	subs	r3, r2, r3
 8006b0e:	2b64      	cmp	r3, #100	; 0x64
 8006b10:	d901      	bls.n	8006b16 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006b12:	2303      	movs	r3, #3
 8006b14:	e21f      	b.n	8006f56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b16:	4b61      	ldr	r3, [pc, #388]	; (8006c9c <HAL_RCC_OscConfig+0x274>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d0f0      	beq.n	8006b04 <HAL_RCC_OscConfig+0xdc>
 8006b22:	e014      	b.n	8006b4e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b24:	f7fd f928 	bl	8003d78 <HAL_GetTick>
 8006b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b2a:	e008      	b.n	8006b3e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b2c:	f7fd f924 	bl	8003d78 <HAL_GetTick>
 8006b30:	4602      	mov	r2, r0
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	1ad3      	subs	r3, r2, r3
 8006b36:	2b64      	cmp	r3, #100	; 0x64
 8006b38:	d901      	bls.n	8006b3e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006b3a:	2303      	movs	r3, #3
 8006b3c:	e20b      	b.n	8006f56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b3e:	4b57      	ldr	r3, [pc, #348]	; (8006c9c <HAL_RCC_OscConfig+0x274>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d1f0      	bne.n	8006b2c <HAL_RCC_OscConfig+0x104>
 8006b4a:	e000      	b.n	8006b4e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 0302 	and.w	r3, r3, #2
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d06f      	beq.n	8006c3a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006b5a:	4b50      	ldr	r3, [pc, #320]	; (8006c9c <HAL_RCC_OscConfig+0x274>)
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	f003 030c 	and.w	r3, r3, #12
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d017      	beq.n	8006b96 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006b66:	4b4d      	ldr	r3, [pc, #308]	; (8006c9c <HAL_RCC_OscConfig+0x274>)
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006b6e:	2b08      	cmp	r3, #8
 8006b70:	d105      	bne.n	8006b7e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006b72:	4b4a      	ldr	r3, [pc, #296]	; (8006c9c <HAL_RCC_OscConfig+0x274>)
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00b      	beq.n	8006b96 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b7e:	4b47      	ldr	r3, [pc, #284]	; (8006c9c <HAL_RCC_OscConfig+0x274>)
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006b86:	2b0c      	cmp	r3, #12
 8006b88:	d11c      	bne.n	8006bc4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b8a:	4b44      	ldr	r3, [pc, #272]	; (8006c9c <HAL_RCC_OscConfig+0x274>)
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d116      	bne.n	8006bc4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b96:	4b41      	ldr	r3, [pc, #260]	; (8006c9c <HAL_RCC_OscConfig+0x274>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f003 0302 	and.w	r3, r3, #2
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d005      	beq.n	8006bae <HAL_RCC_OscConfig+0x186>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	68db      	ldr	r3, [r3, #12]
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d001      	beq.n	8006bae <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	e1d3      	b.n	8006f56 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bae:	4b3b      	ldr	r3, [pc, #236]	; (8006c9c <HAL_RCC_OscConfig+0x274>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	691b      	ldr	r3, [r3, #16]
 8006bba:	00db      	lsls	r3, r3, #3
 8006bbc:	4937      	ldr	r1, [pc, #220]	; (8006c9c <HAL_RCC_OscConfig+0x274>)
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bc2:	e03a      	b.n	8006c3a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d020      	beq.n	8006c0e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006bcc:	4b34      	ldr	r3, [pc, #208]	; (8006ca0 <HAL_RCC_OscConfig+0x278>)
 8006bce:	2201      	movs	r2, #1
 8006bd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bd2:	f7fd f8d1 	bl	8003d78 <HAL_GetTick>
 8006bd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bd8:	e008      	b.n	8006bec <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006bda:	f7fd f8cd 	bl	8003d78 <HAL_GetTick>
 8006bde:	4602      	mov	r2, r0
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	1ad3      	subs	r3, r2, r3
 8006be4:	2b02      	cmp	r3, #2
 8006be6:	d901      	bls.n	8006bec <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006be8:	2303      	movs	r3, #3
 8006bea:	e1b4      	b.n	8006f56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bec:	4b2b      	ldr	r3, [pc, #172]	; (8006c9c <HAL_RCC_OscConfig+0x274>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f003 0302 	and.w	r3, r3, #2
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d0f0      	beq.n	8006bda <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bf8:	4b28      	ldr	r3, [pc, #160]	; (8006c9c <HAL_RCC_OscConfig+0x274>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	691b      	ldr	r3, [r3, #16]
 8006c04:	00db      	lsls	r3, r3, #3
 8006c06:	4925      	ldr	r1, [pc, #148]	; (8006c9c <HAL_RCC_OscConfig+0x274>)
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	600b      	str	r3, [r1, #0]
 8006c0c:	e015      	b.n	8006c3a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c0e:	4b24      	ldr	r3, [pc, #144]	; (8006ca0 <HAL_RCC_OscConfig+0x278>)
 8006c10:	2200      	movs	r2, #0
 8006c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c14:	f7fd f8b0 	bl	8003d78 <HAL_GetTick>
 8006c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c1a:	e008      	b.n	8006c2e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c1c:	f7fd f8ac 	bl	8003d78 <HAL_GetTick>
 8006c20:	4602      	mov	r2, r0
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	1ad3      	subs	r3, r2, r3
 8006c26:	2b02      	cmp	r3, #2
 8006c28:	d901      	bls.n	8006c2e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006c2a:	2303      	movs	r3, #3
 8006c2c:	e193      	b.n	8006f56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c2e:	4b1b      	ldr	r3, [pc, #108]	; (8006c9c <HAL_RCC_OscConfig+0x274>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 0302 	and.w	r3, r3, #2
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d1f0      	bne.n	8006c1c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f003 0308 	and.w	r3, r3, #8
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d036      	beq.n	8006cb4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	695b      	ldr	r3, [r3, #20]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d016      	beq.n	8006c7c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c4e:	4b15      	ldr	r3, [pc, #84]	; (8006ca4 <HAL_RCC_OscConfig+0x27c>)
 8006c50:	2201      	movs	r2, #1
 8006c52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c54:	f7fd f890 	bl	8003d78 <HAL_GetTick>
 8006c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c5a:	e008      	b.n	8006c6e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c5c:	f7fd f88c 	bl	8003d78 <HAL_GetTick>
 8006c60:	4602      	mov	r2, r0
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	1ad3      	subs	r3, r2, r3
 8006c66:	2b02      	cmp	r3, #2
 8006c68:	d901      	bls.n	8006c6e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	e173      	b.n	8006f56 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c6e:	4b0b      	ldr	r3, [pc, #44]	; (8006c9c <HAL_RCC_OscConfig+0x274>)
 8006c70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c72:	f003 0302 	and.w	r3, r3, #2
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d0f0      	beq.n	8006c5c <HAL_RCC_OscConfig+0x234>
 8006c7a:	e01b      	b.n	8006cb4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c7c:	4b09      	ldr	r3, [pc, #36]	; (8006ca4 <HAL_RCC_OscConfig+0x27c>)
 8006c7e:	2200      	movs	r2, #0
 8006c80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c82:	f7fd f879 	bl	8003d78 <HAL_GetTick>
 8006c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c88:	e00e      	b.n	8006ca8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c8a:	f7fd f875 	bl	8003d78 <HAL_GetTick>
 8006c8e:	4602      	mov	r2, r0
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	1ad3      	subs	r3, r2, r3
 8006c94:	2b02      	cmp	r3, #2
 8006c96:	d907      	bls.n	8006ca8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006c98:	2303      	movs	r3, #3
 8006c9a:	e15c      	b.n	8006f56 <HAL_RCC_OscConfig+0x52e>
 8006c9c:	40023800 	.word	0x40023800
 8006ca0:	42470000 	.word	0x42470000
 8006ca4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ca8:	4b8a      	ldr	r3, [pc, #552]	; (8006ed4 <HAL_RCC_OscConfig+0x4ac>)
 8006caa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cac:	f003 0302 	and.w	r3, r3, #2
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d1ea      	bne.n	8006c8a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f003 0304 	and.w	r3, r3, #4
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	f000 8097 	beq.w	8006df0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006cc6:	4b83      	ldr	r3, [pc, #524]	; (8006ed4 <HAL_RCC_OscConfig+0x4ac>)
 8006cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d10f      	bne.n	8006cf2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	60bb      	str	r3, [r7, #8]
 8006cd6:	4b7f      	ldr	r3, [pc, #508]	; (8006ed4 <HAL_RCC_OscConfig+0x4ac>)
 8006cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cda:	4a7e      	ldr	r2, [pc, #504]	; (8006ed4 <HAL_RCC_OscConfig+0x4ac>)
 8006cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8006ce2:	4b7c      	ldr	r3, [pc, #496]	; (8006ed4 <HAL_RCC_OscConfig+0x4ac>)
 8006ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cea:	60bb      	str	r3, [r7, #8]
 8006cec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cf2:	4b79      	ldr	r3, [pc, #484]	; (8006ed8 <HAL_RCC_OscConfig+0x4b0>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d118      	bne.n	8006d30 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006cfe:	4b76      	ldr	r3, [pc, #472]	; (8006ed8 <HAL_RCC_OscConfig+0x4b0>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a75      	ldr	r2, [pc, #468]	; (8006ed8 <HAL_RCC_OscConfig+0x4b0>)
 8006d04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d0a:	f7fd f835 	bl	8003d78 <HAL_GetTick>
 8006d0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d10:	e008      	b.n	8006d24 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d12:	f7fd f831 	bl	8003d78 <HAL_GetTick>
 8006d16:	4602      	mov	r2, r0
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	1ad3      	subs	r3, r2, r3
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	d901      	bls.n	8006d24 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006d20:	2303      	movs	r3, #3
 8006d22:	e118      	b.n	8006f56 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d24:	4b6c      	ldr	r3, [pc, #432]	; (8006ed8 <HAL_RCC_OscConfig+0x4b0>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d0f0      	beq.n	8006d12 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d106      	bne.n	8006d46 <HAL_RCC_OscConfig+0x31e>
 8006d38:	4b66      	ldr	r3, [pc, #408]	; (8006ed4 <HAL_RCC_OscConfig+0x4ac>)
 8006d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d3c:	4a65      	ldr	r2, [pc, #404]	; (8006ed4 <HAL_RCC_OscConfig+0x4ac>)
 8006d3e:	f043 0301 	orr.w	r3, r3, #1
 8006d42:	6713      	str	r3, [r2, #112]	; 0x70
 8006d44:	e01c      	b.n	8006d80 <HAL_RCC_OscConfig+0x358>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	2b05      	cmp	r3, #5
 8006d4c:	d10c      	bne.n	8006d68 <HAL_RCC_OscConfig+0x340>
 8006d4e:	4b61      	ldr	r3, [pc, #388]	; (8006ed4 <HAL_RCC_OscConfig+0x4ac>)
 8006d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d52:	4a60      	ldr	r2, [pc, #384]	; (8006ed4 <HAL_RCC_OscConfig+0x4ac>)
 8006d54:	f043 0304 	orr.w	r3, r3, #4
 8006d58:	6713      	str	r3, [r2, #112]	; 0x70
 8006d5a:	4b5e      	ldr	r3, [pc, #376]	; (8006ed4 <HAL_RCC_OscConfig+0x4ac>)
 8006d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d5e:	4a5d      	ldr	r2, [pc, #372]	; (8006ed4 <HAL_RCC_OscConfig+0x4ac>)
 8006d60:	f043 0301 	orr.w	r3, r3, #1
 8006d64:	6713      	str	r3, [r2, #112]	; 0x70
 8006d66:	e00b      	b.n	8006d80 <HAL_RCC_OscConfig+0x358>
 8006d68:	4b5a      	ldr	r3, [pc, #360]	; (8006ed4 <HAL_RCC_OscConfig+0x4ac>)
 8006d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d6c:	4a59      	ldr	r2, [pc, #356]	; (8006ed4 <HAL_RCC_OscConfig+0x4ac>)
 8006d6e:	f023 0301 	bic.w	r3, r3, #1
 8006d72:	6713      	str	r3, [r2, #112]	; 0x70
 8006d74:	4b57      	ldr	r3, [pc, #348]	; (8006ed4 <HAL_RCC_OscConfig+0x4ac>)
 8006d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d78:	4a56      	ldr	r2, [pc, #344]	; (8006ed4 <HAL_RCC_OscConfig+0x4ac>)
 8006d7a:	f023 0304 	bic.w	r3, r3, #4
 8006d7e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d015      	beq.n	8006db4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d88:	f7fc fff6 	bl	8003d78 <HAL_GetTick>
 8006d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d8e:	e00a      	b.n	8006da6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d90:	f7fc fff2 	bl	8003d78 <HAL_GetTick>
 8006d94:	4602      	mov	r2, r0
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	1ad3      	subs	r3, r2, r3
 8006d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d901      	bls.n	8006da6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006da2:	2303      	movs	r3, #3
 8006da4:	e0d7      	b.n	8006f56 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006da6:	4b4b      	ldr	r3, [pc, #300]	; (8006ed4 <HAL_RCC_OscConfig+0x4ac>)
 8006da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006daa:	f003 0302 	and.w	r3, r3, #2
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d0ee      	beq.n	8006d90 <HAL_RCC_OscConfig+0x368>
 8006db2:	e014      	b.n	8006dde <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006db4:	f7fc ffe0 	bl	8003d78 <HAL_GetTick>
 8006db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006dba:	e00a      	b.n	8006dd2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006dbc:	f7fc ffdc 	bl	8003d78 <HAL_GetTick>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	1ad3      	subs	r3, r2, r3
 8006dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d901      	bls.n	8006dd2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006dce:	2303      	movs	r3, #3
 8006dd0:	e0c1      	b.n	8006f56 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006dd2:	4b40      	ldr	r3, [pc, #256]	; (8006ed4 <HAL_RCC_OscConfig+0x4ac>)
 8006dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dd6:	f003 0302 	and.w	r3, r3, #2
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d1ee      	bne.n	8006dbc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006dde:	7dfb      	ldrb	r3, [r7, #23]
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d105      	bne.n	8006df0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006de4:	4b3b      	ldr	r3, [pc, #236]	; (8006ed4 <HAL_RCC_OscConfig+0x4ac>)
 8006de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de8:	4a3a      	ldr	r2, [pc, #232]	; (8006ed4 <HAL_RCC_OscConfig+0x4ac>)
 8006dea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006dee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	699b      	ldr	r3, [r3, #24]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	f000 80ad 	beq.w	8006f54 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006dfa:	4b36      	ldr	r3, [pc, #216]	; (8006ed4 <HAL_RCC_OscConfig+0x4ac>)
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	f003 030c 	and.w	r3, r3, #12
 8006e02:	2b08      	cmp	r3, #8
 8006e04:	d060      	beq.n	8006ec8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	699b      	ldr	r3, [r3, #24]
 8006e0a:	2b02      	cmp	r3, #2
 8006e0c:	d145      	bne.n	8006e9a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e0e:	4b33      	ldr	r3, [pc, #204]	; (8006edc <HAL_RCC_OscConfig+0x4b4>)
 8006e10:	2200      	movs	r2, #0
 8006e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e14:	f7fc ffb0 	bl	8003d78 <HAL_GetTick>
 8006e18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e1a:	e008      	b.n	8006e2e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e1c:	f7fc ffac 	bl	8003d78 <HAL_GetTick>
 8006e20:	4602      	mov	r2, r0
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	1ad3      	subs	r3, r2, r3
 8006e26:	2b02      	cmp	r3, #2
 8006e28:	d901      	bls.n	8006e2e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006e2a:	2303      	movs	r3, #3
 8006e2c:	e093      	b.n	8006f56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e2e:	4b29      	ldr	r3, [pc, #164]	; (8006ed4 <HAL_RCC_OscConfig+0x4ac>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d1f0      	bne.n	8006e1c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	69da      	ldr	r2, [r3, #28]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6a1b      	ldr	r3, [r3, #32]
 8006e42:	431a      	orrs	r2, r3
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e48:	019b      	lsls	r3, r3, #6
 8006e4a:	431a      	orrs	r2, r3
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e50:	085b      	lsrs	r3, r3, #1
 8006e52:	3b01      	subs	r3, #1
 8006e54:	041b      	lsls	r3, r3, #16
 8006e56:	431a      	orrs	r2, r3
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e5c:	061b      	lsls	r3, r3, #24
 8006e5e:	431a      	orrs	r2, r3
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e64:	071b      	lsls	r3, r3, #28
 8006e66:	491b      	ldr	r1, [pc, #108]	; (8006ed4 <HAL_RCC_OscConfig+0x4ac>)
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e6c:	4b1b      	ldr	r3, [pc, #108]	; (8006edc <HAL_RCC_OscConfig+0x4b4>)
 8006e6e:	2201      	movs	r2, #1
 8006e70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e72:	f7fc ff81 	bl	8003d78 <HAL_GetTick>
 8006e76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e78:	e008      	b.n	8006e8c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e7a:	f7fc ff7d 	bl	8003d78 <HAL_GetTick>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	1ad3      	subs	r3, r2, r3
 8006e84:	2b02      	cmp	r3, #2
 8006e86:	d901      	bls.n	8006e8c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006e88:	2303      	movs	r3, #3
 8006e8a:	e064      	b.n	8006f56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e8c:	4b11      	ldr	r3, [pc, #68]	; (8006ed4 <HAL_RCC_OscConfig+0x4ac>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d0f0      	beq.n	8006e7a <HAL_RCC_OscConfig+0x452>
 8006e98:	e05c      	b.n	8006f54 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e9a:	4b10      	ldr	r3, [pc, #64]	; (8006edc <HAL_RCC_OscConfig+0x4b4>)
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ea0:	f7fc ff6a 	bl	8003d78 <HAL_GetTick>
 8006ea4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ea6:	e008      	b.n	8006eba <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ea8:	f7fc ff66 	bl	8003d78 <HAL_GetTick>
 8006eac:	4602      	mov	r2, r0
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	1ad3      	subs	r3, r2, r3
 8006eb2:	2b02      	cmp	r3, #2
 8006eb4:	d901      	bls.n	8006eba <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006eb6:	2303      	movs	r3, #3
 8006eb8:	e04d      	b.n	8006f56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006eba:	4b06      	ldr	r3, [pc, #24]	; (8006ed4 <HAL_RCC_OscConfig+0x4ac>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d1f0      	bne.n	8006ea8 <HAL_RCC_OscConfig+0x480>
 8006ec6:	e045      	b.n	8006f54 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	699b      	ldr	r3, [r3, #24]
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d107      	bne.n	8006ee0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	e040      	b.n	8006f56 <HAL_RCC_OscConfig+0x52e>
 8006ed4:	40023800 	.word	0x40023800
 8006ed8:	40007000 	.word	0x40007000
 8006edc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006ee0:	4b1f      	ldr	r3, [pc, #124]	; (8006f60 <HAL_RCC_OscConfig+0x538>)
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	699b      	ldr	r3, [r3, #24]
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d030      	beq.n	8006f50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d129      	bne.n	8006f50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d122      	bne.n	8006f50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f0a:	68fa      	ldr	r2, [r7, #12]
 8006f0c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006f10:	4013      	ands	r3, r2
 8006f12:	687a      	ldr	r2, [r7, #4]
 8006f14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006f16:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d119      	bne.n	8006f50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f26:	085b      	lsrs	r3, r3, #1
 8006f28:	3b01      	subs	r3, #1
 8006f2a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d10f      	bne.n	8006f50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f3a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d107      	bne.n	8006f50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f4a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d001      	beq.n	8006f54 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	e000      	b.n	8006f56 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006f54:	2300      	movs	r3, #0
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3718      	adds	r7, #24
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
 8006f5e:	bf00      	nop
 8006f60:	40023800 	.word	0x40023800

08006f64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b082      	sub	sp, #8
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d101      	bne.n	8006f76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	e041      	b.n	8006ffa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d106      	bne.n	8006f90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f7fc fb0e 	bl	80035ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2202      	movs	r2, #2
 8006f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	3304      	adds	r3, #4
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	4610      	mov	r0, r2
 8006fa4:	f000 fbaa 	bl	80076fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2201      	movs	r2, #1
 8006fac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2201      	movs	r2, #1
 8006fec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ff8:	2300      	movs	r3, #0
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3708      	adds	r7, #8
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
	...

08007004 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007004:	b480      	push	{r7}
 8007006:	b085      	sub	sp, #20
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007012:	b2db      	uxtb	r3, r3
 8007014:	2b01      	cmp	r3, #1
 8007016:	d001      	beq.n	800701c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	e04e      	b.n	80070ba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2202      	movs	r2, #2
 8007020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	68da      	ldr	r2, [r3, #12]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f042 0201 	orr.w	r2, r2, #1
 8007032:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a23      	ldr	r2, [pc, #140]	; (80070c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d022      	beq.n	8007084 <HAL_TIM_Base_Start_IT+0x80>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007046:	d01d      	beq.n	8007084 <HAL_TIM_Base_Start_IT+0x80>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a1f      	ldr	r2, [pc, #124]	; (80070cc <HAL_TIM_Base_Start_IT+0xc8>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d018      	beq.n	8007084 <HAL_TIM_Base_Start_IT+0x80>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a1e      	ldr	r2, [pc, #120]	; (80070d0 <HAL_TIM_Base_Start_IT+0xcc>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d013      	beq.n	8007084 <HAL_TIM_Base_Start_IT+0x80>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a1c      	ldr	r2, [pc, #112]	; (80070d4 <HAL_TIM_Base_Start_IT+0xd0>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d00e      	beq.n	8007084 <HAL_TIM_Base_Start_IT+0x80>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a1b      	ldr	r2, [pc, #108]	; (80070d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d009      	beq.n	8007084 <HAL_TIM_Base_Start_IT+0x80>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a19      	ldr	r2, [pc, #100]	; (80070dc <HAL_TIM_Base_Start_IT+0xd8>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d004      	beq.n	8007084 <HAL_TIM_Base_Start_IT+0x80>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a18      	ldr	r2, [pc, #96]	; (80070e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d111      	bne.n	80070a8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	f003 0307 	and.w	r3, r3, #7
 800708e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2b06      	cmp	r3, #6
 8007094:	d010      	beq.n	80070b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f042 0201 	orr.w	r2, r2, #1
 80070a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070a6:	e007      	b.n	80070b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f042 0201 	orr.w	r2, r2, #1
 80070b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3714      	adds	r7, #20
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr
 80070c6:	bf00      	nop
 80070c8:	40010000 	.word	0x40010000
 80070cc:	40000400 	.word	0x40000400
 80070d0:	40000800 	.word	0x40000800
 80070d4:	40000c00 	.word	0x40000c00
 80070d8:	40010400 	.word	0x40010400
 80070dc:	40014000 	.word	0x40014000
 80070e0:	40001800 	.word	0x40001800

080070e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b082      	sub	sp, #8
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d101      	bne.n	80070f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80070f2:	2301      	movs	r3, #1
 80070f4:	e041      	b.n	800717a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d106      	bne.n	8007110 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2200      	movs	r2, #0
 8007106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 f839 	bl	8007182 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2202      	movs	r2, #2
 8007114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	3304      	adds	r3, #4
 8007120:	4619      	mov	r1, r3
 8007122:	4610      	mov	r0, r2
 8007124:	f000 faea 	bl	80076fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2201      	movs	r2, #1
 800712c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2201      	movs	r2, #1
 800713c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2201      	movs	r2, #1
 8007144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2201      	movs	r2, #1
 800714c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2201      	movs	r2, #1
 8007154:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2201      	movs	r2, #1
 800715c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2201      	movs	r2, #1
 8007164:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2201      	movs	r2, #1
 800716c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2201      	movs	r2, #1
 8007174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007178:	2300      	movs	r3, #0
}
 800717a:	4618      	mov	r0, r3
 800717c:	3708      	adds	r7, #8
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}

08007182 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007182:	b480      	push	{r7}
 8007184:	b083      	sub	sp, #12
 8007186:	af00      	add	r7, sp, #0
 8007188:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800718a:	bf00      	nop
 800718c:	370c      	adds	r7, #12
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr

08007196 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007196:	b580      	push	{r7, lr}
 8007198:	b082      	sub	sp, #8
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	691b      	ldr	r3, [r3, #16]
 80071a4:	f003 0302 	and.w	r3, r3, #2
 80071a8:	2b02      	cmp	r3, #2
 80071aa:	d122      	bne.n	80071f2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	68db      	ldr	r3, [r3, #12]
 80071b2:	f003 0302 	and.w	r3, r3, #2
 80071b6:	2b02      	cmp	r3, #2
 80071b8:	d11b      	bne.n	80071f2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f06f 0202 	mvn.w	r2, #2
 80071c2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	699b      	ldr	r3, [r3, #24]
 80071d0:	f003 0303 	and.w	r3, r3, #3
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d003      	beq.n	80071e0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 fa71 	bl	80076c0 <HAL_TIM_IC_CaptureCallback>
 80071de:	e005      	b.n	80071ec <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 fa63 	bl	80076ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 fa74 	bl	80076d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	691b      	ldr	r3, [r3, #16]
 80071f8:	f003 0304 	and.w	r3, r3, #4
 80071fc:	2b04      	cmp	r3, #4
 80071fe:	d122      	bne.n	8007246 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	68db      	ldr	r3, [r3, #12]
 8007206:	f003 0304 	and.w	r3, r3, #4
 800720a:	2b04      	cmp	r3, #4
 800720c:	d11b      	bne.n	8007246 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f06f 0204 	mvn.w	r2, #4
 8007216:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2202      	movs	r2, #2
 800721c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	699b      	ldr	r3, [r3, #24]
 8007224:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007228:	2b00      	cmp	r3, #0
 800722a:	d003      	beq.n	8007234 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f000 fa47 	bl	80076c0 <HAL_TIM_IC_CaptureCallback>
 8007232:	e005      	b.n	8007240 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 fa39 	bl	80076ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 fa4a 	bl	80076d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	691b      	ldr	r3, [r3, #16]
 800724c:	f003 0308 	and.w	r3, r3, #8
 8007250:	2b08      	cmp	r3, #8
 8007252:	d122      	bne.n	800729a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	68db      	ldr	r3, [r3, #12]
 800725a:	f003 0308 	and.w	r3, r3, #8
 800725e:	2b08      	cmp	r3, #8
 8007260:	d11b      	bne.n	800729a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f06f 0208 	mvn.w	r2, #8
 800726a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2204      	movs	r2, #4
 8007270:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	69db      	ldr	r3, [r3, #28]
 8007278:	f003 0303 	and.w	r3, r3, #3
 800727c:	2b00      	cmp	r3, #0
 800727e:	d003      	beq.n	8007288 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 fa1d 	bl	80076c0 <HAL_TIM_IC_CaptureCallback>
 8007286:	e005      	b.n	8007294 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 fa0f 	bl	80076ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 fa20 	bl	80076d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	691b      	ldr	r3, [r3, #16]
 80072a0:	f003 0310 	and.w	r3, r3, #16
 80072a4:	2b10      	cmp	r3, #16
 80072a6:	d122      	bne.n	80072ee <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	68db      	ldr	r3, [r3, #12]
 80072ae:	f003 0310 	and.w	r3, r3, #16
 80072b2:	2b10      	cmp	r3, #16
 80072b4:	d11b      	bne.n	80072ee <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f06f 0210 	mvn.w	r2, #16
 80072be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2208      	movs	r2, #8
 80072c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	69db      	ldr	r3, [r3, #28]
 80072cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d003      	beq.n	80072dc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f000 f9f3 	bl	80076c0 <HAL_TIM_IC_CaptureCallback>
 80072da:	e005      	b.n	80072e8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 f9e5 	bl	80076ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 f9f6 	bl	80076d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	691b      	ldr	r3, [r3, #16]
 80072f4:	f003 0301 	and.w	r3, r3, #1
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d10e      	bne.n	800731a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	68db      	ldr	r3, [r3, #12]
 8007302:	f003 0301 	and.w	r3, r3, #1
 8007306:	2b01      	cmp	r3, #1
 8007308:	d107      	bne.n	800731a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f06f 0201 	mvn.w	r2, #1
 8007312:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f7fb fdaf 	bl	8002e78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	691b      	ldr	r3, [r3, #16]
 8007320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007324:	2b80      	cmp	r3, #128	; 0x80
 8007326:	d10e      	bne.n	8007346 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007332:	2b80      	cmp	r3, #128	; 0x80
 8007334:	d107      	bne.n	8007346 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800733e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 fe57 	bl	8007ff4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	691b      	ldr	r3, [r3, #16]
 800734c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007350:	2b40      	cmp	r3, #64	; 0x40
 8007352:	d10e      	bne.n	8007372 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	68db      	ldr	r3, [r3, #12]
 800735a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800735e:	2b40      	cmp	r3, #64	; 0x40
 8007360:	d107      	bne.n	8007372 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800736a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 f9bb 	bl	80076e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	691b      	ldr	r3, [r3, #16]
 8007378:	f003 0320 	and.w	r3, r3, #32
 800737c:	2b20      	cmp	r3, #32
 800737e:	d10e      	bne.n	800739e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	68db      	ldr	r3, [r3, #12]
 8007386:	f003 0320 	and.w	r3, r3, #32
 800738a:	2b20      	cmp	r3, #32
 800738c:	d107      	bne.n	800739e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f06f 0220 	mvn.w	r2, #32
 8007396:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 fe21 	bl	8007fe0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800739e:	bf00      	nop
 80073a0:	3708      	adds	r7, #8
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
	...

080073a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b084      	sub	sp, #16
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	60f8      	str	r0, [r7, #12]
 80073b0:	60b9      	str	r1, [r7, #8]
 80073b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073ba:	2b01      	cmp	r3, #1
 80073bc:	d101      	bne.n	80073c2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80073be:	2302      	movs	r3, #2
 80073c0:	e0ac      	b.n	800751c <HAL_TIM_PWM_ConfigChannel+0x174>
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2201      	movs	r2, #1
 80073c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2b0c      	cmp	r3, #12
 80073ce:	f200 809f 	bhi.w	8007510 <HAL_TIM_PWM_ConfigChannel+0x168>
 80073d2:	a201      	add	r2, pc, #4	; (adr r2, 80073d8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80073d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073d8:	0800740d 	.word	0x0800740d
 80073dc:	08007511 	.word	0x08007511
 80073e0:	08007511 	.word	0x08007511
 80073e4:	08007511 	.word	0x08007511
 80073e8:	0800744d 	.word	0x0800744d
 80073ec:	08007511 	.word	0x08007511
 80073f0:	08007511 	.word	0x08007511
 80073f4:	08007511 	.word	0x08007511
 80073f8:	0800748f 	.word	0x0800748f
 80073fc:	08007511 	.word	0x08007511
 8007400:	08007511 	.word	0x08007511
 8007404:	08007511 	.word	0x08007511
 8007408:	080074cf 	.word	0x080074cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	68b9      	ldr	r1, [r7, #8]
 8007412:	4618      	mov	r0, r3
 8007414:	f000 fa12 	bl	800783c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	699a      	ldr	r2, [r3, #24]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f042 0208 	orr.w	r2, r2, #8
 8007426:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	699a      	ldr	r2, [r3, #24]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f022 0204 	bic.w	r2, r2, #4
 8007436:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	6999      	ldr	r1, [r3, #24]
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	691a      	ldr	r2, [r3, #16]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	430a      	orrs	r2, r1
 8007448:	619a      	str	r2, [r3, #24]
      break;
 800744a:	e062      	b.n	8007512 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	68b9      	ldr	r1, [r7, #8]
 8007452:	4618      	mov	r0, r3
 8007454:	f000 fa62 	bl	800791c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	699a      	ldr	r2, [r3, #24]
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007466:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	699a      	ldr	r2, [r3, #24]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007476:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	6999      	ldr	r1, [r3, #24]
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	691b      	ldr	r3, [r3, #16]
 8007482:	021a      	lsls	r2, r3, #8
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	430a      	orrs	r2, r1
 800748a:	619a      	str	r2, [r3, #24]
      break;
 800748c:	e041      	b.n	8007512 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	68b9      	ldr	r1, [r7, #8]
 8007494:	4618      	mov	r0, r3
 8007496:	f000 fab7 	bl	8007a08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	69da      	ldr	r2, [r3, #28]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f042 0208 	orr.w	r2, r2, #8
 80074a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	69da      	ldr	r2, [r3, #28]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f022 0204 	bic.w	r2, r2, #4
 80074b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	69d9      	ldr	r1, [r3, #28]
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	691a      	ldr	r2, [r3, #16]
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	430a      	orrs	r2, r1
 80074ca:	61da      	str	r2, [r3, #28]
      break;
 80074cc:	e021      	b.n	8007512 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	68b9      	ldr	r1, [r7, #8]
 80074d4:	4618      	mov	r0, r3
 80074d6:	f000 fb0b 	bl	8007af0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	69da      	ldr	r2, [r3, #28]
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80074e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	69da      	ldr	r2, [r3, #28]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	69d9      	ldr	r1, [r3, #28]
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	691b      	ldr	r3, [r3, #16]
 8007504:	021a      	lsls	r2, r3, #8
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	430a      	orrs	r2, r1
 800750c:	61da      	str	r2, [r3, #28]
      break;
 800750e:	e000      	b.n	8007512 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8007510:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2200      	movs	r2, #0
 8007516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800751a:	2300      	movs	r3, #0
}
 800751c:	4618      	mov	r0, r3
 800751e:	3710      	adds	r7, #16
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b084      	sub	sp, #16
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007534:	2b01      	cmp	r3, #1
 8007536:	d101      	bne.n	800753c <HAL_TIM_ConfigClockSource+0x18>
 8007538:	2302      	movs	r3, #2
 800753a:	e0b3      	b.n	80076a4 <HAL_TIM_ConfigClockSource+0x180>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2201      	movs	r2, #1
 8007540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2202      	movs	r2, #2
 8007548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	689b      	ldr	r3, [r3, #8]
 8007552:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800755a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007562:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	68fa      	ldr	r2, [r7, #12]
 800756a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007574:	d03e      	beq.n	80075f4 <HAL_TIM_ConfigClockSource+0xd0>
 8007576:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800757a:	f200 8087 	bhi.w	800768c <HAL_TIM_ConfigClockSource+0x168>
 800757e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007582:	f000 8085 	beq.w	8007690 <HAL_TIM_ConfigClockSource+0x16c>
 8007586:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800758a:	d87f      	bhi.n	800768c <HAL_TIM_ConfigClockSource+0x168>
 800758c:	2b70      	cmp	r3, #112	; 0x70
 800758e:	d01a      	beq.n	80075c6 <HAL_TIM_ConfigClockSource+0xa2>
 8007590:	2b70      	cmp	r3, #112	; 0x70
 8007592:	d87b      	bhi.n	800768c <HAL_TIM_ConfigClockSource+0x168>
 8007594:	2b60      	cmp	r3, #96	; 0x60
 8007596:	d050      	beq.n	800763a <HAL_TIM_ConfigClockSource+0x116>
 8007598:	2b60      	cmp	r3, #96	; 0x60
 800759a:	d877      	bhi.n	800768c <HAL_TIM_ConfigClockSource+0x168>
 800759c:	2b50      	cmp	r3, #80	; 0x50
 800759e:	d03c      	beq.n	800761a <HAL_TIM_ConfigClockSource+0xf6>
 80075a0:	2b50      	cmp	r3, #80	; 0x50
 80075a2:	d873      	bhi.n	800768c <HAL_TIM_ConfigClockSource+0x168>
 80075a4:	2b40      	cmp	r3, #64	; 0x40
 80075a6:	d058      	beq.n	800765a <HAL_TIM_ConfigClockSource+0x136>
 80075a8:	2b40      	cmp	r3, #64	; 0x40
 80075aa:	d86f      	bhi.n	800768c <HAL_TIM_ConfigClockSource+0x168>
 80075ac:	2b30      	cmp	r3, #48	; 0x30
 80075ae:	d064      	beq.n	800767a <HAL_TIM_ConfigClockSource+0x156>
 80075b0:	2b30      	cmp	r3, #48	; 0x30
 80075b2:	d86b      	bhi.n	800768c <HAL_TIM_ConfigClockSource+0x168>
 80075b4:	2b20      	cmp	r3, #32
 80075b6:	d060      	beq.n	800767a <HAL_TIM_ConfigClockSource+0x156>
 80075b8:	2b20      	cmp	r3, #32
 80075ba:	d867      	bhi.n	800768c <HAL_TIM_ConfigClockSource+0x168>
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d05c      	beq.n	800767a <HAL_TIM_ConfigClockSource+0x156>
 80075c0:	2b10      	cmp	r3, #16
 80075c2:	d05a      	beq.n	800767a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80075c4:	e062      	b.n	800768c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6818      	ldr	r0, [r3, #0]
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	6899      	ldr	r1, [r3, #8]
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	685a      	ldr	r2, [r3, #4]
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	68db      	ldr	r3, [r3, #12]
 80075d6:	f000 fb5b 	bl	8007c90 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80075e8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	68fa      	ldr	r2, [r7, #12]
 80075f0:	609a      	str	r2, [r3, #8]
      break;
 80075f2:	e04e      	b.n	8007692 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6818      	ldr	r0, [r3, #0]
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	6899      	ldr	r1, [r3, #8]
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	685a      	ldr	r2, [r3, #4]
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	68db      	ldr	r3, [r3, #12]
 8007604:	f000 fb44 	bl	8007c90 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	689a      	ldr	r2, [r3, #8]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007616:	609a      	str	r2, [r3, #8]
      break;
 8007618:	e03b      	b.n	8007692 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6818      	ldr	r0, [r3, #0]
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	6859      	ldr	r1, [r3, #4]
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	68db      	ldr	r3, [r3, #12]
 8007626:	461a      	mov	r2, r3
 8007628:	f000 fab8 	bl	8007b9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	2150      	movs	r1, #80	; 0x50
 8007632:	4618      	mov	r0, r3
 8007634:	f000 fb11 	bl	8007c5a <TIM_ITRx_SetConfig>
      break;
 8007638:	e02b      	b.n	8007692 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6818      	ldr	r0, [r3, #0]
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	6859      	ldr	r1, [r3, #4]
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	68db      	ldr	r3, [r3, #12]
 8007646:	461a      	mov	r2, r3
 8007648:	f000 fad7 	bl	8007bfa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	2160      	movs	r1, #96	; 0x60
 8007652:	4618      	mov	r0, r3
 8007654:	f000 fb01 	bl	8007c5a <TIM_ITRx_SetConfig>
      break;
 8007658:	e01b      	b.n	8007692 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6818      	ldr	r0, [r3, #0]
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	6859      	ldr	r1, [r3, #4]
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	461a      	mov	r2, r3
 8007668:	f000 fa98 	bl	8007b9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	2140      	movs	r1, #64	; 0x40
 8007672:	4618      	mov	r0, r3
 8007674:	f000 faf1 	bl	8007c5a <TIM_ITRx_SetConfig>
      break;
 8007678:	e00b      	b.n	8007692 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681a      	ldr	r2, [r3, #0]
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4619      	mov	r1, r3
 8007684:	4610      	mov	r0, r2
 8007686:	f000 fae8 	bl	8007c5a <TIM_ITRx_SetConfig>
        break;
 800768a:	e002      	b.n	8007692 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800768c:	bf00      	nop
 800768e:	e000      	b.n	8007692 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007690:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2201      	movs	r2, #1
 8007696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2200      	movs	r2, #0
 800769e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076a2:	2300      	movs	r3, #0
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3710      	adds	r7, #16
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b083      	sub	sp, #12
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80076b4:	bf00      	nop
 80076b6:	370c      	adds	r7, #12
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr

080076c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b083      	sub	sp, #12
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80076c8:	bf00      	nop
 80076ca:	370c      	adds	r7, #12
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr

080076d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80076dc:	bf00      	nop
 80076de:	370c      	adds	r7, #12
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80076f0:	bf00      	nop
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b085      	sub	sp, #20
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	4a40      	ldr	r2, [pc, #256]	; (8007810 <TIM_Base_SetConfig+0x114>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d013      	beq.n	800773c <TIM_Base_SetConfig+0x40>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800771a:	d00f      	beq.n	800773c <TIM_Base_SetConfig+0x40>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	4a3d      	ldr	r2, [pc, #244]	; (8007814 <TIM_Base_SetConfig+0x118>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d00b      	beq.n	800773c <TIM_Base_SetConfig+0x40>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	4a3c      	ldr	r2, [pc, #240]	; (8007818 <TIM_Base_SetConfig+0x11c>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d007      	beq.n	800773c <TIM_Base_SetConfig+0x40>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	4a3b      	ldr	r2, [pc, #236]	; (800781c <TIM_Base_SetConfig+0x120>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d003      	beq.n	800773c <TIM_Base_SetConfig+0x40>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	4a3a      	ldr	r2, [pc, #232]	; (8007820 <TIM_Base_SetConfig+0x124>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d108      	bne.n	800774e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007742:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	68fa      	ldr	r2, [r7, #12]
 800774a:	4313      	orrs	r3, r2
 800774c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	4a2f      	ldr	r2, [pc, #188]	; (8007810 <TIM_Base_SetConfig+0x114>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d02b      	beq.n	80077ae <TIM_Base_SetConfig+0xb2>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800775c:	d027      	beq.n	80077ae <TIM_Base_SetConfig+0xb2>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	4a2c      	ldr	r2, [pc, #176]	; (8007814 <TIM_Base_SetConfig+0x118>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d023      	beq.n	80077ae <TIM_Base_SetConfig+0xb2>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	4a2b      	ldr	r2, [pc, #172]	; (8007818 <TIM_Base_SetConfig+0x11c>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d01f      	beq.n	80077ae <TIM_Base_SetConfig+0xb2>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	4a2a      	ldr	r2, [pc, #168]	; (800781c <TIM_Base_SetConfig+0x120>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d01b      	beq.n	80077ae <TIM_Base_SetConfig+0xb2>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	4a29      	ldr	r2, [pc, #164]	; (8007820 <TIM_Base_SetConfig+0x124>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d017      	beq.n	80077ae <TIM_Base_SetConfig+0xb2>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	4a28      	ldr	r2, [pc, #160]	; (8007824 <TIM_Base_SetConfig+0x128>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d013      	beq.n	80077ae <TIM_Base_SetConfig+0xb2>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	4a27      	ldr	r2, [pc, #156]	; (8007828 <TIM_Base_SetConfig+0x12c>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d00f      	beq.n	80077ae <TIM_Base_SetConfig+0xb2>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	4a26      	ldr	r2, [pc, #152]	; (800782c <TIM_Base_SetConfig+0x130>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d00b      	beq.n	80077ae <TIM_Base_SetConfig+0xb2>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	4a25      	ldr	r2, [pc, #148]	; (8007830 <TIM_Base_SetConfig+0x134>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d007      	beq.n	80077ae <TIM_Base_SetConfig+0xb2>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	4a24      	ldr	r2, [pc, #144]	; (8007834 <TIM_Base_SetConfig+0x138>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d003      	beq.n	80077ae <TIM_Base_SetConfig+0xb2>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	4a23      	ldr	r2, [pc, #140]	; (8007838 <TIM_Base_SetConfig+0x13c>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d108      	bne.n	80077c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	68fa      	ldr	r2, [r7, #12]
 80077bc:	4313      	orrs	r3, r2
 80077be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	695b      	ldr	r3, [r3, #20]
 80077ca:	4313      	orrs	r3, r2
 80077cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	68fa      	ldr	r2, [r7, #12]
 80077d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	689a      	ldr	r2, [r3, #8]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	4a0a      	ldr	r2, [pc, #40]	; (8007810 <TIM_Base_SetConfig+0x114>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d003      	beq.n	80077f4 <TIM_Base_SetConfig+0xf8>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	4a0c      	ldr	r2, [pc, #48]	; (8007820 <TIM_Base_SetConfig+0x124>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d103      	bne.n	80077fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	691a      	ldr	r2, [r3, #16]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2201      	movs	r2, #1
 8007800:	615a      	str	r2, [r3, #20]
}
 8007802:	bf00      	nop
 8007804:	3714      	adds	r7, #20
 8007806:	46bd      	mov	sp, r7
 8007808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780c:	4770      	bx	lr
 800780e:	bf00      	nop
 8007810:	40010000 	.word	0x40010000
 8007814:	40000400 	.word	0x40000400
 8007818:	40000800 	.word	0x40000800
 800781c:	40000c00 	.word	0x40000c00
 8007820:	40010400 	.word	0x40010400
 8007824:	40014000 	.word	0x40014000
 8007828:	40014400 	.word	0x40014400
 800782c:	40014800 	.word	0x40014800
 8007830:	40001800 	.word	0x40001800
 8007834:	40001c00 	.word	0x40001c00
 8007838:	40002000 	.word	0x40002000

0800783c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800783c:	b480      	push	{r7}
 800783e:	b087      	sub	sp, #28
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6a1b      	ldr	r3, [r3, #32]
 800784a:	f023 0201 	bic.w	r2, r3, #1
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6a1b      	ldr	r3, [r3, #32]
 8007856:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	699b      	ldr	r3, [r3, #24]
 8007862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800786a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f023 0303 	bic.w	r3, r3, #3
 8007872:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	68fa      	ldr	r2, [r7, #12]
 800787a:	4313      	orrs	r3, r2
 800787c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	f023 0302 	bic.w	r3, r3, #2
 8007884:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	697a      	ldr	r2, [r7, #20]
 800788c:	4313      	orrs	r3, r2
 800788e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	4a20      	ldr	r2, [pc, #128]	; (8007914 <TIM_OC1_SetConfig+0xd8>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d003      	beq.n	80078a0 <TIM_OC1_SetConfig+0x64>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	4a1f      	ldr	r2, [pc, #124]	; (8007918 <TIM_OC1_SetConfig+0xdc>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d10c      	bne.n	80078ba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	f023 0308 	bic.w	r3, r3, #8
 80078a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	68db      	ldr	r3, [r3, #12]
 80078ac:	697a      	ldr	r2, [r7, #20]
 80078ae:	4313      	orrs	r3, r2
 80078b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	f023 0304 	bic.w	r3, r3, #4
 80078b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	4a15      	ldr	r2, [pc, #84]	; (8007914 <TIM_OC1_SetConfig+0xd8>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d003      	beq.n	80078ca <TIM_OC1_SetConfig+0x8e>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	4a14      	ldr	r2, [pc, #80]	; (8007918 <TIM_OC1_SetConfig+0xdc>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d111      	bne.n	80078ee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80078d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	695b      	ldr	r3, [r3, #20]
 80078de:	693a      	ldr	r2, [r7, #16]
 80078e0:	4313      	orrs	r3, r2
 80078e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	699b      	ldr	r3, [r3, #24]
 80078e8:	693a      	ldr	r2, [r7, #16]
 80078ea:	4313      	orrs	r3, r2
 80078ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	693a      	ldr	r2, [r7, #16]
 80078f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	68fa      	ldr	r2, [r7, #12]
 80078f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	685a      	ldr	r2, [r3, #4]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	697a      	ldr	r2, [r7, #20]
 8007906:	621a      	str	r2, [r3, #32]
}
 8007908:	bf00      	nop
 800790a:	371c      	adds	r7, #28
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr
 8007914:	40010000 	.word	0x40010000
 8007918:	40010400 	.word	0x40010400

0800791c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800791c:	b480      	push	{r7}
 800791e:	b087      	sub	sp, #28
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6a1b      	ldr	r3, [r3, #32]
 800792a:	f023 0210 	bic.w	r2, r3, #16
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6a1b      	ldr	r3, [r3, #32]
 8007936:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	699b      	ldr	r3, [r3, #24]
 8007942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800794a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007952:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	021b      	lsls	r3, r3, #8
 800795a:	68fa      	ldr	r2, [r7, #12]
 800795c:	4313      	orrs	r3, r2
 800795e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	f023 0320 	bic.w	r3, r3, #32
 8007966:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	689b      	ldr	r3, [r3, #8]
 800796c:	011b      	lsls	r3, r3, #4
 800796e:	697a      	ldr	r2, [r7, #20]
 8007970:	4313      	orrs	r3, r2
 8007972:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	4a22      	ldr	r2, [pc, #136]	; (8007a00 <TIM_OC2_SetConfig+0xe4>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d003      	beq.n	8007984 <TIM_OC2_SetConfig+0x68>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	4a21      	ldr	r2, [pc, #132]	; (8007a04 <TIM_OC2_SetConfig+0xe8>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d10d      	bne.n	80079a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800798a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	68db      	ldr	r3, [r3, #12]
 8007990:	011b      	lsls	r3, r3, #4
 8007992:	697a      	ldr	r2, [r7, #20]
 8007994:	4313      	orrs	r3, r2
 8007996:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800799e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	4a17      	ldr	r2, [pc, #92]	; (8007a00 <TIM_OC2_SetConfig+0xe4>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d003      	beq.n	80079b0 <TIM_OC2_SetConfig+0x94>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	4a16      	ldr	r2, [pc, #88]	; (8007a04 <TIM_OC2_SetConfig+0xe8>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d113      	bne.n	80079d8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80079b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80079be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	695b      	ldr	r3, [r3, #20]
 80079c4:	009b      	lsls	r3, r3, #2
 80079c6:	693a      	ldr	r2, [r7, #16]
 80079c8:	4313      	orrs	r3, r2
 80079ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	699b      	ldr	r3, [r3, #24]
 80079d0:	009b      	lsls	r3, r3, #2
 80079d2:	693a      	ldr	r2, [r7, #16]
 80079d4:	4313      	orrs	r3, r2
 80079d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	693a      	ldr	r2, [r7, #16]
 80079dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	68fa      	ldr	r2, [r7, #12]
 80079e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	685a      	ldr	r2, [r3, #4]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	697a      	ldr	r2, [r7, #20]
 80079f0:	621a      	str	r2, [r3, #32]
}
 80079f2:	bf00      	nop
 80079f4:	371c      	adds	r7, #28
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr
 80079fe:	bf00      	nop
 8007a00:	40010000 	.word	0x40010000
 8007a04:	40010400 	.word	0x40010400

08007a08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b087      	sub	sp, #28
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6a1b      	ldr	r3, [r3, #32]
 8007a16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6a1b      	ldr	r3, [r3, #32]
 8007a22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	69db      	ldr	r3, [r3, #28]
 8007a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f023 0303 	bic.w	r3, r3, #3
 8007a3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	68fa      	ldr	r2, [r7, #12]
 8007a46:	4313      	orrs	r3, r2
 8007a48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	689b      	ldr	r3, [r3, #8]
 8007a56:	021b      	lsls	r3, r3, #8
 8007a58:	697a      	ldr	r2, [r7, #20]
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	4a21      	ldr	r2, [pc, #132]	; (8007ae8 <TIM_OC3_SetConfig+0xe0>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d003      	beq.n	8007a6e <TIM_OC3_SetConfig+0x66>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4a20      	ldr	r2, [pc, #128]	; (8007aec <TIM_OC3_SetConfig+0xe4>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d10d      	bne.n	8007a8a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	68db      	ldr	r3, [r3, #12]
 8007a7a:	021b      	lsls	r3, r3, #8
 8007a7c:	697a      	ldr	r2, [r7, #20]
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	4a16      	ldr	r2, [pc, #88]	; (8007ae8 <TIM_OC3_SetConfig+0xe0>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d003      	beq.n	8007a9a <TIM_OC3_SetConfig+0x92>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	4a15      	ldr	r2, [pc, #84]	; (8007aec <TIM_OC3_SetConfig+0xe4>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d113      	bne.n	8007ac2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007aa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007aa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	695b      	ldr	r3, [r3, #20]
 8007aae:	011b      	lsls	r3, r3, #4
 8007ab0:	693a      	ldr	r2, [r7, #16]
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	699b      	ldr	r3, [r3, #24]
 8007aba:	011b      	lsls	r3, r3, #4
 8007abc:	693a      	ldr	r2, [r7, #16]
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	693a      	ldr	r2, [r7, #16]
 8007ac6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	68fa      	ldr	r2, [r7, #12]
 8007acc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	685a      	ldr	r2, [r3, #4]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	697a      	ldr	r2, [r7, #20]
 8007ada:	621a      	str	r2, [r3, #32]
}
 8007adc:	bf00      	nop
 8007ade:	371c      	adds	r7, #28
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr
 8007ae8:	40010000 	.word	0x40010000
 8007aec:	40010400 	.word	0x40010400

08007af0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b087      	sub	sp, #28
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6a1b      	ldr	r3, [r3, #32]
 8007afe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6a1b      	ldr	r3, [r3, #32]
 8007b0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	69db      	ldr	r3, [r3, #28]
 8007b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	021b      	lsls	r3, r3, #8
 8007b2e:	68fa      	ldr	r2, [r7, #12]
 8007b30:	4313      	orrs	r3, r2
 8007b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	031b      	lsls	r3, r3, #12
 8007b42:	693a      	ldr	r2, [r7, #16]
 8007b44:	4313      	orrs	r3, r2
 8007b46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	4a12      	ldr	r2, [pc, #72]	; (8007b94 <TIM_OC4_SetConfig+0xa4>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d003      	beq.n	8007b58 <TIM_OC4_SetConfig+0x68>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	4a11      	ldr	r2, [pc, #68]	; (8007b98 <TIM_OC4_SetConfig+0xa8>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d109      	bne.n	8007b6c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	695b      	ldr	r3, [r3, #20]
 8007b64:	019b      	lsls	r3, r3, #6
 8007b66:	697a      	ldr	r2, [r7, #20]
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	697a      	ldr	r2, [r7, #20]
 8007b70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	68fa      	ldr	r2, [r7, #12]
 8007b76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	685a      	ldr	r2, [r3, #4]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	693a      	ldr	r2, [r7, #16]
 8007b84:	621a      	str	r2, [r3, #32]
}
 8007b86:	bf00      	nop
 8007b88:	371c      	adds	r7, #28
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b90:	4770      	bx	lr
 8007b92:	bf00      	nop
 8007b94:	40010000 	.word	0x40010000
 8007b98:	40010400 	.word	0x40010400

08007b9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b087      	sub	sp, #28
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	60b9      	str	r1, [r7, #8]
 8007ba6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	6a1b      	ldr	r3, [r3, #32]
 8007bac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	6a1b      	ldr	r3, [r3, #32]
 8007bb2:	f023 0201 	bic.w	r2, r3, #1
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	699b      	ldr	r3, [r3, #24]
 8007bbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007bc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	011b      	lsls	r3, r3, #4
 8007bcc:	693a      	ldr	r2, [r7, #16]
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	f023 030a 	bic.w	r3, r3, #10
 8007bd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007bda:	697a      	ldr	r2, [r7, #20]
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	4313      	orrs	r3, r2
 8007be0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	693a      	ldr	r2, [r7, #16]
 8007be6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	697a      	ldr	r2, [r7, #20]
 8007bec:	621a      	str	r2, [r3, #32]
}
 8007bee:	bf00      	nop
 8007bf0:	371c      	adds	r7, #28
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf8:	4770      	bx	lr

08007bfa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007bfa:	b480      	push	{r7}
 8007bfc:	b087      	sub	sp, #28
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	60f8      	str	r0, [r7, #12]
 8007c02:	60b9      	str	r1, [r7, #8]
 8007c04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	6a1b      	ldr	r3, [r3, #32]
 8007c0a:	f023 0210 	bic.w	r2, r3, #16
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	699b      	ldr	r3, [r3, #24]
 8007c16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	6a1b      	ldr	r3, [r3, #32]
 8007c1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	031b      	lsls	r3, r3, #12
 8007c2a:	697a      	ldr	r2, [r7, #20]
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007c36:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	011b      	lsls	r3, r3, #4
 8007c3c:	693a      	ldr	r2, [r7, #16]
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	697a      	ldr	r2, [r7, #20]
 8007c46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	693a      	ldr	r2, [r7, #16]
 8007c4c:	621a      	str	r2, [r3, #32]
}
 8007c4e:	bf00      	nop
 8007c50:	371c      	adds	r7, #28
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr

08007c5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007c5a:	b480      	push	{r7}
 8007c5c:	b085      	sub	sp, #20
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
 8007c62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c72:	683a      	ldr	r2, [r7, #0]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	4313      	orrs	r3, r2
 8007c78:	f043 0307 	orr.w	r3, r3, #7
 8007c7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	68fa      	ldr	r2, [r7, #12]
 8007c82:	609a      	str	r2, [r3, #8]
}
 8007c84:	bf00      	nop
 8007c86:	3714      	adds	r7, #20
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr

08007c90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b087      	sub	sp, #28
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	60f8      	str	r0, [r7, #12]
 8007c98:	60b9      	str	r1, [r7, #8]
 8007c9a:	607a      	str	r2, [r7, #4]
 8007c9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	689b      	ldr	r3, [r3, #8]
 8007ca2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007caa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	021a      	lsls	r2, r3, #8
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	431a      	orrs	r2, r3
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	697a      	ldr	r2, [r7, #20]
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	697a      	ldr	r2, [r7, #20]
 8007cc2:	609a      	str	r2, [r3, #8]
}
 8007cc4:	bf00      	nop
 8007cc6:	371c      	adds	r7, #28
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d109      	bne.n	8007cf4 <HAL_TIMEx_PWMN_Start+0x24>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007ce6:	b2db      	uxtb	r3, r3
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	bf14      	ite	ne
 8007cec:	2301      	movne	r3, #1
 8007cee:	2300      	moveq	r3, #0
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	e022      	b.n	8007d3a <HAL_TIMEx_PWMN_Start+0x6a>
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	2b04      	cmp	r3, #4
 8007cf8:	d109      	bne.n	8007d0e <HAL_TIMEx_PWMN_Start+0x3e>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007d00:	b2db      	uxtb	r3, r3
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	bf14      	ite	ne
 8007d06:	2301      	movne	r3, #1
 8007d08:	2300      	moveq	r3, #0
 8007d0a:	b2db      	uxtb	r3, r3
 8007d0c:	e015      	b.n	8007d3a <HAL_TIMEx_PWMN_Start+0x6a>
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	2b08      	cmp	r3, #8
 8007d12:	d109      	bne.n	8007d28 <HAL_TIMEx_PWMN_Start+0x58>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d1a:	b2db      	uxtb	r3, r3
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	bf14      	ite	ne
 8007d20:	2301      	movne	r3, #1
 8007d22:	2300      	moveq	r3, #0
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	e008      	b.n	8007d3a <HAL_TIMEx_PWMN_Start+0x6a>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d2e:	b2db      	uxtb	r3, r3
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	bf14      	ite	ne
 8007d34:	2301      	movne	r3, #1
 8007d36:	2300      	moveq	r3, #0
 8007d38:	b2db      	uxtb	r3, r3
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d001      	beq.n	8007d42 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8007d3e:	2301      	movs	r3, #1
 8007d40:	e06d      	b.n	8007e1e <HAL_TIMEx_PWMN_Start+0x14e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d104      	bne.n	8007d52 <HAL_TIMEx_PWMN_Start+0x82>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2202      	movs	r2, #2
 8007d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d50:	e013      	b.n	8007d7a <HAL_TIMEx_PWMN_Start+0xaa>
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	2b04      	cmp	r3, #4
 8007d56:	d104      	bne.n	8007d62 <HAL_TIMEx_PWMN_Start+0x92>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2202      	movs	r2, #2
 8007d5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007d60:	e00b      	b.n	8007d7a <HAL_TIMEx_PWMN_Start+0xaa>
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	2b08      	cmp	r3, #8
 8007d66:	d104      	bne.n	8007d72 <HAL_TIMEx_PWMN_Start+0xa2>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2202      	movs	r2, #2
 8007d6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d70:	e003      	b.n	8007d7a <HAL_TIMEx_PWMN_Start+0xaa>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2202      	movs	r2, #2
 8007d76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	2204      	movs	r2, #4
 8007d80:	6839      	ldr	r1, [r7, #0]
 8007d82:	4618      	mov	r0, r3
 8007d84:	f000 f940 	bl	8008008 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d96:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a22      	ldr	r2, [pc, #136]	; (8007e28 <HAL_TIMEx_PWMN_Start+0x158>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d022      	beq.n	8007de8 <HAL_TIMEx_PWMN_Start+0x118>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007daa:	d01d      	beq.n	8007de8 <HAL_TIMEx_PWMN_Start+0x118>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a1e      	ldr	r2, [pc, #120]	; (8007e2c <HAL_TIMEx_PWMN_Start+0x15c>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d018      	beq.n	8007de8 <HAL_TIMEx_PWMN_Start+0x118>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a1d      	ldr	r2, [pc, #116]	; (8007e30 <HAL_TIMEx_PWMN_Start+0x160>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d013      	beq.n	8007de8 <HAL_TIMEx_PWMN_Start+0x118>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a1b      	ldr	r2, [pc, #108]	; (8007e34 <HAL_TIMEx_PWMN_Start+0x164>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d00e      	beq.n	8007de8 <HAL_TIMEx_PWMN_Start+0x118>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4a1a      	ldr	r2, [pc, #104]	; (8007e38 <HAL_TIMEx_PWMN_Start+0x168>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d009      	beq.n	8007de8 <HAL_TIMEx_PWMN_Start+0x118>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a18      	ldr	r2, [pc, #96]	; (8007e3c <HAL_TIMEx_PWMN_Start+0x16c>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d004      	beq.n	8007de8 <HAL_TIMEx_PWMN_Start+0x118>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a17      	ldr	r2, [pc, #92]	; (8007e40 <HAL_TIMEx_PWMN_Start+0x170>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d111      	bne.n	8007e0c <HAL_TIMEx_PWMN_Start+0x13c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	689b      	ldr	r3, [r3, #8]
 8007dee:	f003 0307 	and.w	r3, r3, #7
 8007df2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2b06      	cmp	r3, #6
 8007df8:	d010      	beq.n	8007e1c <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	681a      	ldr	r2, [r3, #0]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f042 0201 	orr.w	r2, r2, #1
 8007e08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e0a:	e007      	b.n	8007e1c <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	681a      	ldr	r2, [r3, #0]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f042 0201 	orr.w	r2, r2, #1
 8007e1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007e1c:	2300      	movs	r3, #0
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3710      	adds	r7, #16
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}
 8007e26:	bf00      	nop
 8007e28:	40010000 	.word	0x40010000
 8007e2c:	40000400 	.word	0x40000400
 8007e30:	40000800 	.word	0x40000800
 8007e34:	40000c00 	.word	0x40000c00
 8007e38:	40010400 	.word	0x40010400
 8007e3c:	40014000 	.word	0x40014000
 8007e40:	40001800 	.word	0x40001800

08007e44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b085      	sub	sp, #20
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d101      	bne.n	8007e5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e58:	2302      	movs	r3, #2
 8007e5a:	e05a      	b.n	8007f12 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2202      	movs	r2, #2
 8007e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	68fa      	ldr	r2, [r7, #12]
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	68fa      	ldr	r2, [r7, #12]
 8007e94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a21      	ldr	r2, [pc, #132]	; (8007f20 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d022      	beq.n	8007ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ea8:	d01d      	beq.n	8007ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a1d      	ldr	r2, [pc, #116]	; (8007f24 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d018      	beq.n	8007ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a1b      	ldr	r2, [pc, #108]	; (8007f28 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d013      	beq.n	8007ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a1a      	ldr	r2, [pc, #104]	; (8007f2c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d00e      	beq.n	8007ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a18      	ldr	r2, [pc, #96]	; (8007f30 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d009      	beq.n	8007ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a17      	ldr	r2, [pc, #92]	; (8007f34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d004      	beq.n	8007ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a15      	ldr	r2, [pc, #84]	; (8007f38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d10c      	bne.n	8007f00 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007eec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	68ba      	ldr	r2, [r7, #8]
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	68ba      	ldr	r2, [r7, #8]
 8007efe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2201      	movs	r2, #1
 8007f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f10:	2300      	movs	r3, #0
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3714      	adds	r7, #20
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr
 8007f1e:	bf00      	nop
 8007f20:	40010000 	.word	0x40010000
 8007f24:	40000400 	.word	0x40000400
 8007f28:	40000800 	.word	0x40000800
 8007f2c:	40000c00 	.word	0x40000c00
 8007f30:	40010400 	.word	0x40010400
 8007f34:	40014000 	.word	0x40014000
 8007f38:	40001800 	.word	0x40001800

08007f3c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b085      	sub	sp, #20
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007f46:	2300      	movs	r3, #0
 8007f48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	d101      	bne.n	8007f58 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007f54:	2302      	movs	r3, #2
 8007f56:	e03d      	b.n	8007fd4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	68db      	ldr	r3, [r3, #12]
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	4313      	orrs	r3, r2
 8007f88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4313      	orrs	r3, r2
 8007f96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	691b      	ldr	r3, [r3, #16]
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	695b      	ldr	r3, [r3, #20]
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	69db      	ldr	r3, [r3, #28]
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	68fa      	ldr	r2, [r7, #12]
 8007fc8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007fd2:	2300      	movs	r3, #0
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3714      	adds	r7, #20
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr

08007fe0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b083      	sub	sp, #12
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007fe8:	bf00      	nop
 8007fea:	370c      	adds	r7, #12
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr

08007ff4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b083      	sub	sp, #12
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ffc:	bf00      	nop
 8007ffe:	370c      	adds	r7, #12
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr

08008008 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8008008:	b480      	push	{r7}
 800800a:	b087      	sub	sp, #28
 800800c:	af00      	add	r7, sp, #0
 800800e:	60f8      	str	r0, [r7, #12]
 8008010:	60b9      	str	r1, [r7, #8]
 8008012:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	f003 031f 	and.w	r3, r3, #31
 800801a:	2204      	movs	r2, #4
 800801c:	fa02 f303 	lsl.w	r3, r2, r3
 8008020:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	6a1a      	ldr	r2, [r3, #32]
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	43db      	mvns	r3, r3
 800802a:	401a      	ands	r2, r3
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	6a1a      	ldr	r2, [r3, #32]
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	f003 031f 	and.w	r3, r3, #31
 800803a:	6879      	ldr	r1, [r7, #4]
 800803c:	fa01 f303 	lsl.w	r3, r1, r3
 8008040:	431a      	orrs	r2, r3
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	621a      	str	r2, [r3, #32]
}
 8008046:	bf00      	nop
 8008048:	371c      	adds	r7, #28
 800804a:	46bd      	mov	sp, r7
 800804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008050:	4770      	bx	lr

08008052 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008052:	b580      	push	{r7, lr}
 8008054:	b082      	sub	sp, #8
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d101      	bne.n	8008064 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008060:	2301      	movs	r3, #1
 8008062:	e03f      	b.n	80080e4 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800806a:	b2db      	uxtb	r3, r3
 800806c:	2b00      	cmp	r3, #0
 800806e:	d106      	bne.n	800807e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2200      	movs	r2, #0
 8008074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f7fb fbf7 	bl	800386c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2224      	movs	r2, #36	; 0x24
 8008082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	68da      	ldr	r2, [r3, #12]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008094:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 fd92 	bl	8008bc0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	691a      	ldr	r2, [r3, #16]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80080aa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	695a      	ldr	r2, [r3, #20]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80080ba:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	68da      	ldr	r2, [r3, #12]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80080ca:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2220      	movs	r2, #32
 80080d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2220      	movs	r2, #32
 80080de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80080e2:	2300      	movs	r3, #0
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3708      	adds	r7, #8
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b082      	sub	sp, #8
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d101      	bne.n	80080fe <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80080fa:	2301      	movs	r3, #1
 80080fc:	e047      	b.n	800818e <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008104:	b2db      	uxtb	r3, r3
 8008106:	2b00      	cmp	r3, #0
 8008108:	d106      	bne.n	8008118 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2200      	movs	r2, #0
 800810e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f7fb fbaa 	bl	800386c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2224      	movs	r2, #36	; 0x24
 800811c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	68da      	ldr	r2, [r3, #12]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800812e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 fd45 	bl	8008bc0 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	691a      	ldr	r2, [r3, #16]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008144:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	695a      	ldr	r2, [r3, #20]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8008154:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	695a      	ldr	r2, [r3, #20]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f042 0208 	orr.w	r2, r2, #8
 8008164:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	68da      	ldr	r2, [r3, #12]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008174:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2200      	movs	r2, #0
 800817a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2220      	movs	r2, #32
 8008180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2220      	movs	r2, #32
 8008188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800818c:	2300      	movs	r3, #0
}
 800818e:	4618      	mov	r0, r3
 8008190:	3708      	adds	r7, #8
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
	...

08008198 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b086      	sub	sp, #24
 800819c:	af00      	add	r7, sp, #0
 800819e:	60f8      	str	r0, [r7, #12]
 80081a0:	60b9      	str	r1, [r7, #8]
 80081a2:	4613      	mov	r3, r2
 80081a4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081ac:	b2db      	uxtb	r3, r3
 80081ae:	2b20      	cmp	r3, #32
 80081b0:	d153      	bne.n	800825a <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d002      	beq.n	80081be <HAL_UART_Transmit_DMA+0x26>
 80081b8:	88fb      	ldrh	r3, [r7, #6]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d101      	bne.n	80081c2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80081be:	2301      	movs	r3, #1
 80081c0:	e04c      	b.n	800825c <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d101      	bne.n	80081d0 <HAL_UART_Transmit_DMA+0x38>
 80081cc:	2302      	movs	r3, #2
 80081ce:	e045      	b.n	800825c <HAL_UART_Transmit_DMA+0xc4>
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2201      	movs	r2, #1
 80081d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80081d8:	68ba      	ldr	r2, [r7, #8]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	88fa      	ldrh	r2, [r7, #6]
 80081e2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	88fa      	ldrh	r2, [r7, #6]
 80081e8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2200      	movs	r2, #0
 80081ee:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2221      	movs	r2, #33	; 0x21
 80081f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081fc:	4a19      	ldr	r2, [pc, #100]	; (8008264 <HAL_UART_Transmit_DMA+0xcc>)
 80081fe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008204:	4a18      	ldr	r2, [pc, #96]	; (8008268 <HAL_UART_Transmit_DMA+0xd0>)
 8008206:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800820c:	4a17      	ldr	r2, [pc, #92]	; (800826c <HAL_UART_Transmit_DMA+0xd4>)
 800820e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008214:	2200      	movs	r2, #0
 8008216:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8008218:	f107 0308 	add.w	r3, r7, #8
 800821c:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	6819      	ldr	r1, [r3, #0]
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	3304      	adds	r3, #4
 800822c:	461a      	mov	r2, r3
 800822e:	88fb      	ldrh	r3, [r7, #6]
 8008230:	f7fc fcee 	bl	8004c10 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800823c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2200      	movs	r2, #0
 8008242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	695a      	ldr	r2, [r3, #20]
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008254:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8008256:	2300      	movs	r3, #0
 8008258:	e000      	b.n	800825c <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800825a:	2302      	movs	r3, #2
  }
}
 800825c:	4618      	mov	r0, r3
 800825e:	3718      	adds	r7, #24
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}
 8008264:	0800867d 	.word	0x0800867d
 8008268:	080086cf 	.word	0x080086cf
 800826c:	080087b7 	.word	0x080087b7

08008270 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b084      	sub	sp, #16
 8008274:	af00      	add	r7, sp, #0
 8008276:	60f8      	str	r0, [r7, #12]
 8008278:	60b9      	str	r1, [r7, #8]
 800827a:	4613      	mov	r3, r2
 800827c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008284:	b2db      	uxtb	r3, r3
 8008286:	2b20      	cmp	r3, #32
 8008288:	d11d      	bne.n	80082c6 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d002      	beq.n	8008296 <HAL_UART_Receive_DMA+0x26>
 8008290:	88fb      	ldrh	r3, [r7, #6]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d101      	bne.n	800829a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008296:	2301      	movs	r3, #1
 8008298:	e016      	b.n	80082c8 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d101      	bne.n	80082a8 <HAL_UART_Receive_DMA+0x38>
 80082a4:	2302      	movs	r3, #2
 80082a6:	e00f      	b.n	80082c8 <HAL_UART_Receive_DMA+0x58>
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	2201      	movs	r2, #1
 80082ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2200      	movs	r2, #0
 80082b4:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 80082b6:	88fb      	ldrh	r3, [r7, #6]
 80082b8:	461a      	mov	r2, r3
 80082ba:	68b9      	ldr	r1, [r7, #8]
 80082bc:	68f8      	ldr	r0, [r7, #12]
 80082be:	f000 fac5 	bl	800884c <UART_Start_Receive_DMA>
 80082c2:	4603      	mov	r3, r0
 80082c4:	e000      	b.n	80082c8 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80082c6:	2302      	movs	r3, #2
  }
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3710      	adds	r7, #16
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b08a      	sub	sp, #40	; 0x28
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	68db      	ldr	r3, [r3, #12]
 80082e6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	695b      	ldr	r3, [r3, #20]
 80082ee:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80082f0:	2300      	movs	r3, #0
 80082f2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80082f4:	2300      	movs	r3, #0
 80082f6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80082f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082fa:	f003 030f 	and.w	r3, r3, #15
 80082fe:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8008300:	69bb      	ldr	r3, [r7, #24]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d10d      	bne.n	8008322 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008308:	f003 0320 	and.w	r3, r3, #32
 800830c:	2b00      	cmp	r3, #0
 800830e:	d008      	beq.n	8008322 <HAL_UART_IRQHandler+0x52>
 8008310:	6a3b      	ldr	r3, [r7, #32]
 8008312:	f003 0320 	and.w	r3, r3, #32
 8008316:	2b00      	cmp	r3, #0
 8008318:	d003      	beq.n	8008322 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 fbb9 	bl	8008a92 <UART_Receive_IT>
      return;
 8008320:	e17c      	b.n	800861c <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008322:	69bb      	ldr	r3, [r7, #24]
 8008324:	2b00      	cmp	r3, #0
 8008326:	f000 80b1 	beq.w	800848c <HAL_UART_IRQHandler+0x1bc>
 800832a:	69fb      	ldr	r3, [r7, #28]
 800832c:	f003 0301 	and.w	r3, r3, #1
 8008330:	2b00      	cmp	r3, #0
 8008332:	d105      	bne.n	8008340 <HAL_UART_IRQHandler+0x70>
 8008334:	6a3b      	ldr	r3, [r7, #32]
 8008336:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800833a:	2b00      	cmp	r3, #0
 800833c:	f000 80a6 	beq.w	800848c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008342:	f003 0301 	and.w	r3, r3, #1
 8008346:	2b00      	cmp	r3, #0
 8008348:	d00a      	beq.n	8008360 <HAL_UART_IRQHandler+0x90>
 800834a:	6a3b      	ldr	r3, [r7, #32]
 800834c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008350:	2b00      	cmp	r3, #0
 8008352:	d005      	beq.n	8008360 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008358:	f043 0201 	orr.w	r2, r3, #1
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008362:	f003 0304 	and.w	r3, r3, #4
 8008366:	2b00      	cmp	r3, #0
 8008368:	d00a      	beq.n	8008380 <HAL_UART_IRQHandler+0xb0>
 800836a:	69fb      	ldr	r3, [r7, #28]
 800836c:	f003 0301 	and.w	r3, r3, #1
 8008370:	2b00      	cmp	r3, #0
 8008372:	d005      	beq.n	8008380 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008378:	f043 0202 	orr.w	r2, r3, #2
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008382:	f003 0302 	and.w	r3, r3, #2
 8008386:	2b00      	cmp	r3, #0
 8008388:	d00a      	beq.n	80083a0 <HAL_UART_IRQHandler+0xd0>
 800838a:	69fb      	ldr	r3, [r7, #28]
 800838c:	f003 0301 	and.w	r3, r3, #1
 8008390:	2b00      	cmp	r3, #0
 8008392:	d005      	beq.n	80083a0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008398:	f043 0204 	orr.w	r2, r3, #4
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80083a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a2:	f003 0308 	and.w	r3, r3, #8
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d00f      	beq.n	80083ca <HAL_UART_IRQHandler+0xfa>
 80083aa:	6a3b      	ldr	r3, [r7, #32]
 80083ac:	f003 0320 	and.w	r3, r3, #32
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d104      	bne.n	80083be <HAL_UART_IRQHandler+0xee>
 80083b4:	69fb      	ldr	r3, [r7, #28]
 80083b6:	f003 0301 	and.w	r3, r3, #1
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d005      	beq.n	80083ca <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083c2:	f043 0208 	orr.w	r2, r3, #8
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	f000 811f 	beq.w	8008612 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80083d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d6:	f003 0320 	and.w	r3, r3, #32
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d007      	beq.n	80083ee <HAL_UART_IRQHandler+0x11e>
 80083de:	6a3b      	ldr	r3, [r7, #32]
 80083e0:	f003 0320 	and.w	r3, r3, #32
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d002      	beq.n	80083ee <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 fb52 	bl	8008a92 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	695b      	ldr	r3, [r3, #20]
 80083f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083f8:	2b40      	cmp	r3, #64	; 0x40
 80083fa:	bf0c      	ite	eq
 80083fc:	2301      	moveq	r3, #1
 80083fe:	2300      	movne	r3, #0
 8008400:	b2db      	uxtb	r3, r3
 8008402:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008408:	f003 0308 	and.w	r3, r3, #8
 800840c:	2b00      	cmp	r3, #0
 800840e:	d102      	bne.n	8008416 <HAL_UART_IRQHandler+0x146>
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d031      	beq.n	800847a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f000 fa92 	bl	8008940 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	695b      	ldr	r3, [r3, #20]
 8008422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008426:	2b40      	cmp	r3, #64	; 0x40
 8008428:	d123      	bne.n	8008472 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	695a      	ldr	r2, [r3, #20]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008438:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800843e:	2b00      	cmp	r3, #0
 8008440:	d013      	beq.n	800846a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008446:	4a77      	ldr	r2, [pc, #476]	; (8008624 <HAL_UART_IRQHandler+0x354>)
 8008448:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800844e:	4618      	mov	r0, r3
 8008450:	f7fc fca6 	bl	8004da0 <HAL_DMA_Abort_IT>
 8008454:	4603      	mov	r3, r0
 8008456:	2b00      	cmp	r3, #0
 8008458:	d016      	beq.n	8008488 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800845e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008460:	687a      	ldr	r2, [r7, #4]
 8008462:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008464:	4610      	mov	r0, r2
 8008466:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008468:	e00e      	b.n	8008488 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f7fa f84e 	bl	800250c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008470:	e00a      	b.n	8008488 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f7fa f84a 	bl	800250c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008478:	e006      	b.n	8008488 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f7fa f846 	bl	800250c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2200      	movs	r2, #0
 8008484:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008486:	e0c4      	b.n	8008612 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008488:	bf00      	nop
    return;
 800848a:	e0c2      	b.n	8008612 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008490:	2b01      	cmp	r3, #1
 8008492:	f040 80a2 	bne.w	80085da <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8008496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008498:	f003 0310 	and.w	r3, r3, #16
 800849c:	2b00      	cmp	r3, #0
 800849e:	f000 809c 	beq.w	80085da <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80084a2:	6a3b      	ldr	r3, [r7, #32]
 80084a4:	f003 0310 	and.w	r3, r3, #16
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	f000 8096 	beq.w	80085da <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80084ae:	2300      	movs	r3, #0
 80084b0:	60fb      	str	r3, [r7, #12]
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	60fb      	str	r3, [r7, #12]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	60fb      	str	r3, [r7, #12]
 80084c2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	695b      	ldr	r3, [r3, #20]
 80084ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084ce:	2b40      	cmp	r3, #64	; 0x40
 80084d0:	d14f      	bne.n	8008572 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80084dc:	8a3b      	ldrh	r3, [r7, #16]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	f000 8099 	beq.w	8008616 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80084e8:	8a3a      	ldrh	r2, [r7, #16]
 80084ea:	429a      	cmp	r2, r3
 80084ec:	f080 8093 	bcs.w	8008616 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	8a3a      	ldrh	r2, [r7, #16]
 80084f4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084fa:	69db      	ldr	r3, [r3, #28]
 80084fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008500:	d02b      	beq.n	800855a <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	68da      	ldr	r2, [r3, #12]
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008510:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	695a      	ldr	r2, [r3, #20]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f022 0201 	bic.w	r2, r2, #1
 8008520:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	695a      	ldr	r2, [r3, #20]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008530:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2220      	movs	r2, #32
 8008536:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2200      	movs	r2, #0
 800853e:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	68da      	ldr	r2, [r3, #12]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f022 0210 	bic.w	r2, r2, #16
 800854e:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008554:	4618      	mov	r0, r3
 8008556:	f7fc fbb3 	bl	8004cc0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008562:	b29b      	uxth	r3, r3
 8008564:	1ad3      	subs	r3, r2, r3
 8008566:	b29b      	uxth	r3, r3
 8008568:	4619      	mov	r1, r3
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f000 f87a 	bl	8008664 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008570:	e051      	b.n	8008616 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800857a:	b29b      	uxth	r3, r3
 800857c:	1ad3      	subs	r3, r2, r3
 800857e:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008584:	b29b      	uxth	r3, r3
 8008586:	2b00      	cmp	r3, #0
 8008588:	d047      	beq.n	800861a <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800858a:	8a7b      	ldrh	r3, [r7, #18]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d044      	beq.n	800861a <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	68da      	ldr	r2, [r3, #12]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800859e:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	695a      	ldr	r2, [r3, #20]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f022 0201 	bic.w	r2, r2, #1
 80085ae:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2220      	movs	r2, #32
 80085b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2200      	movs	r2, #0
 80085bc:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	68da      	ldr	r2, [r3, #12]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f022 0210 	bic.w	r2, r2, #16
 80085cc:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80085ce:	8a7b      	ldrh	r3, [r7, #18]
 80085d0:	4619      	mov	r1, r3
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 f846 	bl	8008664 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80085d8:	e01f      	b.n	800861a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80085da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d008      	beq.n	80085f6 <HAL_UART_IRQHandler+0x326>
 80085e4:	6a3b      	ldr	r3, [r7, #32]
 80085e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d003      	beq.n	80085f6 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f000 f9e7 	bl	80089c2 <UART_Transmit_IT>
    return;
 80085f4:	e012      	b.n	800861c <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80085f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d00d      	beq.n	800861c <HAL_UART_IRQHandler+0x34c>
 8008600:	6a3b      	ldr	r3, [r7, #32]
 8008602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008606:	2b00      	cmp	r3, #0
 8008608:	d008      	beq.n	800861c <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f000 fa29 	bl	8008a62 <UART_EndTransmit_IT>
    return;
 8008610:	e004      	b.n	800861c <HAL_UART_IRQHandler+0x34c>
    return;
 8008612:	bf00      	nop
 8008614:	e002      	b.n	800861c <HAL_UART_IRQHandler+0x34c>
      return;
 8008616:	bf00      	nop
 8008618:	e000      	b.n	800861c <HAL_UART_IRQHandler+0x34c>
      return;
 800861a:	bf00      	nop
  }
}
 800861c:	3728      	adds	r7, #40	; 0x28
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
 8008622:	bf00      	nop
 8008624:	0800899b 	.word	0x0800899b

08008628 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008628:	b480      	push	{r7}
 800862a:	b083      	sub	sp, #12
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008630:	bf00      	nop
 8008632:	370c      	adds	r7, #12
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr

0800863c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800863c:	b480      	push	{r7}
 800863e:	b083      	sub	sp, #12
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008644:	bf00      	nop
 8008646:	370c      	adds	r7, #12
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr

08008650 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008650:	b480      	push	{r7}
 8008652:	b083      	sub	sp, #12
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008658:	bf00      	nop
 800865a:	370c      	adds	r7, #12
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr

08008664 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008664:	b480      	push	{r7}
 8008666:	b083      	sub	sp, #12
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	460b      	mov	r3, r1
 800866e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008670:	bf00      	nop
 8008672:	370c      	adds	r7, #12
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr

0800867c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b084      	sub	sp, #16
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008688:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008694:	2b00      	cmp	r3, #0
 8008696:	d113      	bne.n	80086c0 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2200      	movs	r2, #0
 800869c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	695a      	ldr	r2, [r3, #20]
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80086ac:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	68da      	ldr	r2, [r3, #12]
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80086bc:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80086be:	e002      	b.n	80086c6 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80086c0:	68f8      	ldr	r0, [r7, #12]
 80086c2:	f7ff ffb1 	bl	8008628 <HAL_UART_TxCpltCallback>
}
 80086c6:	bf00      	nop
 80086c8:	3710      	adds	r7, #16
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}

080086ce <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80086ce:	b580      	push	{r7, lr}
 80086d0:	b084      	sub	sp, #16
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086da:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80086dc:	68f8      	ldr	r0, [r7, #12]
 80086de:	f7ff ffad 	bl	800863c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80086e2:	bf00      	nop
 80086e4:	3710      	adds	r7, #16
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}

080086ea <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80086ea:	b580      	push	{r7, lr}
 80086ec:	b084      	sub	sp, #16
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086f6:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008702:	2b00      	cmp	r3, #0
 8008704:	d12a      	bne.n	800875c <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2200      	movs	r2, #0
 800870a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	68da      	ldr	r2, [r3, #12]
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800871a:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	695a      	ldr	r2, [r3, #20]
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f022 0201 	bic.w	r2, r2, #1
 800872a:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	695a      	ldr	r2, [r3, #20]
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800873a:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2220      	movs	r2, #32
 8008740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008748:	2b01      	cmp	r3, #1
 800874a:	d107      	bne.n	800875c <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	68da      	ldr	r2, [r3, #12]
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f022 0210 	bic.w	r2, r2, #16
 800875a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008760:	2b01      	cmp	r3, #1
 8008762:	d106      	bne.n	8008772 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008768:	4619      	mov	r1, r3
 800876a:	68f8      	ldr	r0, [r7, #12]
 800876c:	f7ff ff7a 	bl	8008664 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008770:	e002      	b.n	8008778 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8008772:	68f8      	ldr	r0, [r7, #12]
 8008774:	f7f9 fe7e 	bl	8002474 <HAL_UART_RxCpltCallback>
}
 8008778:	bf00      	nop
 800877a:	3710      	adds	r7, #16
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b084      	sub	sp, #16
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800878c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008792:	2b01      	cmp	r3, #1
 8008794:	d108      	bne.n	80087a8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800879a:	085b      	lsrs	r3, r3, #1
 800879c:	b29b      	uxth	r3, r3
 800879e:	4619      	mov	r1, r3
 80087a0:	68f8      	ldr	r0, [r7, #12]
 80087a2:	f7ff ff5f 	bl	8008664 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80087a6:	e002      	b.n	80087ae <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80087a8:	68f8      	ldr	r0, [r7, #12]
 80087aa:	f7ff ff51 	bl	8008650 <HAL_UART_RxHalfCpltCallback>
}
 80087ae:	bf00      	nop
 80087b0:	3710      	adds	r7, #16
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}

080087b6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80087b6:	b580      	push	{r7, lr}
 80087b8:	b084      	sub	sp, #16
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80087be:	2300      	movs	r3, #0
 80087c0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	695b      	ldr	r3, [r3, #20]
 80087ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087d2:	2b80      	cmp	r3, #128	; 0x80
 80087d4:	bf0c      	ite	eq
 80087d6:	2301      	moveq	r3, #1
 80087d8:	2300      	movne	r3, #0
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087e4:	b2db      	uxtb	r3, r3
 80087e6:	2b21      	cmp	r3, #33	; 0x21
 80087e8:	d108      	bne.n	80087fc <UART_DMAError+0x46>
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d005      	beq.n	80087fc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	2200      	movs	r2, #0
 80087f4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80087f6:	68b8      	ldr	r0, [r7, #8]
 80087f8:	f000 f88c 	bl	8008914 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	695b      	ldr	r3, [r3, #20]
 8008802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008806:	2b40      	cmp	r3, #64	; 0x40
 8008808:	bf0c      	ite	eq
 800880a:	2301      	moveq	r3, #1
 800880c:	2300      	movne	r3, #0
 800880e:	b2db      	uxtb	r3, r3
 8008810:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008818:	b2db      	uxtb	r3, r3
 800881a:	2b22      	cmp	r3, #34	; 0x22
 800881c:	d108      	bne.n	8008830 <UART_DMAError+0x7a>
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d005      	beq.n	8008830 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	2200      	movs	r2, #0
 8008828:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800882a:	68b8      	ldr	r0, [r7, #8]
 800882c:	f000 f888 	bl	8008940 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008834:	f043 0210 	orr.w	r2, r3, #16
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800883c:	68b8      	ldr	r0, [r7, #8]
 800883e:	f7f9 fe65 	bl	800250c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008842:	bf00      	nop
 8008844:	3710      	adds	r7, #16
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}
	...

0800884c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b086      	sub	sp, #24
 8008850:	af00      	add	r7, sp, #0
 8008852:	60f8      	str	r0, [r7, #12]
 8008854:	60b9      	str	r1, [r7, #8]
 8008856:	4613      	mov	r3, r2
 8008858:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800885a:	68ba      	ldr	r2, [r7, #8]
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	88fa      	ldrh	r2, [r7, #6]
 8008864:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2200      	movs	r2, #0
 800886a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	2222      	movs	r2, #34	; 0x22
 8008870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008878:	4a23      	ldr	r2, [pc, #140]	; (8008908 <UART_Start_Receive_DMA+0xbc>)
 800887a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008880:	4a22      	ldr	r2, [pc, #136]	; (800890c <UART_Start_Receive_DMA+0xc0>)
 8008882:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008888:	4a21      	ldr	r2, [pc, #132]	; (8008910 <UART_Start_Receive_DMA+0xc4>)
 800888a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008890:	2200      	movs	r2, #0
 8008892:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008894:	f107 0308 	add.w	r3, r7, #8
 8008898:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	3304      	adds	r3, #4
 80088a4:	4619      	mov	r1, r3
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	681a      	ldr	r2, [r3, #0]
 80088aa:	88fb      	ldrh	r3, [r7, #6]
 80088ac:	f7fc f9b0 	bl	8004c10 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80088b0:	2300      	movs	r3, #0
 80088b2:	613b      	str	r3, [r7, #16]
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	613b      	str	r3, [r7, #16]
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	685b      	ldr	r3, [r3, #4]
 80088c2:	613b      	str	r3, [r7, #16]
 80088c4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	2200      	movs	r2, #0
 80088ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	68da      	ldr	r2, [r3, #12]
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80088dc:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	695a      	ldr	r2, [r3, #20]
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f042 0201 	orr.w	r2, r2, #1
 80088ec:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	695a      	ldr	r2, [r3, #20]
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80088fc:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80088fe:	2300      	movs	r3, #0
}
 8008900:	4618      	mov	r0, r3
 8008902:	3718      	adds	r7, #24
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}
 8008908:	080086eb 	.word	0x080086eb
 800890c:	08008781 	.word	0x08008781
 8008910:	080087b7 	.word	0x080087b7

08008914 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008914:	b480      	push	{r7}
 8008916:	b083      	sub	sp, #12
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	68da      	ldr	r2, [r3, #12]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800892a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2220      	movs	r2, #32
 8008930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008934:	bf00      	nop
 8008936:	370c      	adds	r7, #12
 8008938:	46bd      	mov	sp, r7
 800893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893e:	4770      	bx	lr

08008940 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008940:	b480      	push	{r7}
 8008942:	b083      	sub	sp, #12
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	68da      	ldr	r2, [r3, #12]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008956:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	695a      	ldr	r2, [r3, #20]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f022 0201 	bic.w	r2, r2, #1
 8008966:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800896c:	2b01      	cmp	r3, #1
 800896e:	d107      	bne.n	8008980 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	68da      	ldr	r2, [r3, #12]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f022 0210 	bic.w	r2, r2, #16
 800897e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2220      	movs	r2, #32
 8008984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2200      	movs	r2, #0
 800898c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800898e:	bf00      	nop
 8008990:	370c      	adds	r7, #12
 8008992:	46bd      	mov	sp, r7
 8008994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008998:	4770      	bx	lr

0800899a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800899a:	b580      	push	{r7, lr}
 800899c:	b084      	sub	sp, #16
 800899e:	af00      	add	r7, sp, #0
 80089a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2200      	movs	r2, #0
 80089ac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2200      	movs	r2, #0
 80089b2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80089b4:	68f8      	ldr	r0, [r7, #12]
 80089b6:	f7f9 fda9 	bl	800250c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089ba:	bf00      	nop
 80089bc:	3710      	adds	r7, #16
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}

080089c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80089c2:	b480      	push	{r7}
 80089c4:	b085      	sub	sp, #20
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089d0:	b2db      	uxtb	r3, r3
 80089d2:	2b21      	cmp	r3, #33	; 0x21
 80089d4:	d13e      	bne.n	8008a54 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	689b      	ldr	r3, [r3, #8]
 80089da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089de:	d114      	bne.n	8008a0a <UART_Transmit_IT+0x48>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	691b      	ldr	r3, [r3, #16]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d110      	bne.n	8008a0a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6a1b      	ldr	r3, [r3, #32]
 80089ec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	881b      	ldrh	r3, [r3, #0]
 80089f2:	461a      	mov	r2, r3
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80089fc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6a1b      	ldr	r3, [r3, #32]
 8008a02:	1c9a      	adds	r2, r3, #2
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	621a      	str	r2, [r3, #32]
 8008a08:	e008      	b.n	8008a1c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6a1b      	ldr	r3, [r3, #32]
 8008a0e:	1c59      	adds	r1, r3, #1
 8008a10:	687a      	ldr	r2, [r7, #4]
 8008a12:	6211      	str	r1, [r2, #32]
 8008a14:	781a      	ldrb	r2, [r3, #0]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	3b01      	subs	r3, #1
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	687a      	ldr	r2, [r7, #4]
 8008a28:	4619      	mov	r1, r3
 8008a2a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d10f      	bne.n	8008a50 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	68da      	ldr	r2, [r3, #12]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008a3e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	68da      	ldr	r2, [r3, #12]
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a4e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008a50:	2300      	movs	r3, #0
 8008a52:	e000      	b.n	8008a56 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008a54:	2302      	movs	r3, #2
  }
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3714      	adds	r7, #20
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a60:	4770      	bx	lr

08008a62 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008a62:	b580      	push	{r7, lr}
 8008a64:	b082      	sub	sp, #8
 8008a66:	af00      	add	r7, sp, #0
 8008a68:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	68da      	ldr	r2, [r3, #12]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a78:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2220      	movs	r2, #32
 8008a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f7ff fdd0 	bl	8008628 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008a88:	2300      	movs	r3, #0
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3708      	adds	r7, #8
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}

08008a92 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008a92:	b580      	push	{r7, lr}
 8008a94:	b084      	sub	sp, #16
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008aa0:	b2db      	uxtb	r3, r3
 8008aa2:	2b22      	cmp	r3, #34	; 0x22
 8008aa4:	f040 8087 	bne.w	8008bb6 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	689b      	ldr	r3, [r3, #8]
 8008aac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ab0:	d117      	bne.n	8008ae2 <UART_Receive_IT+0x50>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	691b      	ldr	r3, [r3, #16]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d113      	bne.n	8008ae2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008aba:	2300      	movs	r3, #0
 8008abc:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ac2:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	b29b      	uxth	r3, r3
 8008acc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ad0:	b29a      	uxth	r2, r3
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ada:	1c9a      	adds	r2, r3, #2
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	629a      	str	r2, [r3, #40]	; 0x28
 8008ae0:	e026      	b.n	8008b30 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ae6:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	689b      	ldr	r3, [r3, #8]
 8008af0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008af4:	d007      	beq.n	8008b06 <UART_Receive_IT+0x74>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	689b      	ldr	r3, [r3, #8]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d10a      	bne.n	8008b14 <UART_Receive_IT+0x82>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	691b      	ldr	r3, [r3, #16]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d106      	bne.n	8008b14 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	b2da      	uxtb	r2, r3
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	701a      	strb	r2, [r3, #0]
 8008b12:	e008      	b.n	8008b26 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	b2db      	uxtb	r3, r3
 8008b1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b20:	b2da      	uxtb	r2, r3
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b2a:	1c5a      	adds	r2, r3, #1
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b34:	b29b      	uxth	r3, r3
 8008b36:	3b01      	subs	r3, #1
 8008b38:	b29b      	uxth	r3, r3
 8008b3a:	687a      	ldr	r2, [r7, #4]
 8008b3c:	4619      	mov	r1, r3
 8008b3e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d136      	bne.n	8008bb2 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	68da      	ldr	r2, [r3, #12]
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f022 0220 	bic.w	r2, r2, #32
 8008b52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	68da      	ldr	r2, [r3, #12]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008b62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	695a      	ldr	r2, [r3, #20]
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f022 0201 	bic.w	r2, r2, #1
 8008b72:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2220      	movs	r2, #32
 8008b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	d10e      	bne.n	8008ba2 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	68da      	ldr	r2, [r3, #12]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f022 0210 	bic.w	r2, r2, #16
 8008b92:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008b98:	4619      	mov	r1, r3
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f7ff fd62 	bl	8008664 <HAL_UARTEx_RxEventCallback>
 8008ba0:	e002      	b.n	8008ba8 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f7f9 fc66 	bl	8002474 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2200      	movs	r2, #0
 8008bac:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	e002      	b.n	8008bb8 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	e000      	b.n	8008bb8 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8008bb6:	2302      	movs	r3, #2
  }
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3710      	adds	r7, #16
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bc4:	b09f      	sub	sp, #124	; 0x7c
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008bca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	691b      	ldr	r3, [r3, #16]
 8008bd0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008bd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bd6:	68d9      	ldr	r1, [r3, #12]
 8008bd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bda:	681a      	ldr	r2, [r3, #0]
 8008bdc:	ea40 0301 	orr.w	r3, r0, r1
 8008be0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008be2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008be4:	689a      	ldr	r2, [r3, #8]
 8008be6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008be8:	691b      	ldr	r3, [r3, #16]
 8008bea:	431a      	orrs	r2, r3
 8008bec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bee:	695b      	ldr	r3, [r3, #20]
 8008bf0:	431a      	orrs	r2, r3
 8008bf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bf4:	69db      	ldr	r3, [r3, #28]
 8008bf6:	4313      	orrs	r3, r2
 8008bf8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008bfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	68db      	ldr	r3, [r3, #12]
 8008c00:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008c04:	f021 010c 	bic.w	r1, r1, #12
 8008c08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c0a:	681a      	ldr	r2, [r3, #0]
 8008c0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c0e:	430b      	orrs	r3, r1
 8008c10:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008c12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	695b      	ldr	r3, [r3, #20]
 8008c18:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008c1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c1e:	6999      	ldr	r1, [r3, #24]
 8008c20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c22:	681a      	ldr	r2, [r3, #0]
 8008c24:	ea40 0301 	orr.w	r3, r0, r1
 8008c28:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008c2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c2c:	681a      	ldr	r2, [r3, #0]
 8008c2e:	4bc5      	ldr	r3, [pc, #788]	; (8008f44 <UART_SetConfig+0x384>)
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d004      	beq.n	8008c3e <UART_SetConfig+0x7e>
 8008c34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c36:	681a      	ldr	r2, [r3, #0]
 8008c38:	4bc3      	ldr	r3, [pc, #780]	; (8008f48 <UART_SetConfig+0x388>)
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	d103      	bne.n	8008c46 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008c3e:	f7fd fd51 	bl	80066e4 <HAL_RCC_GetPCLK2Freq>
 8008c42:	6778      	str	r0, [r7, #116]	; 0x74
 8008c44:	e002      	b.n	8008c4c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008c46:	f7fd fd39 	bl	80066bc <HAL_RCC_GetPCLK1Freq>
 8008c4a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c4e:	69db      	ldr	r3, [r3, #28]
 8008c50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c54:	f040 80b6 	bne.w	8008dc4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008c58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c5a:	461c      	mov	r4, r3
 8008c5c:	f04f 0500 	mov.w	r5, #0
 8008c60:	4622      	mov	r2, r4
 8008c62:	462b      	mov	r3, r5
 8008c64:	1891      	adds	r1, r2, r2
 8008c66:	6439      	str	r1, [r7, #64]	; 0x40
 8008c68:	415b      	adcs	r3, r3
 8008c6a:	647b      	str	r3, [r7, #68]	; 0x44
 8008c6c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008c70:	1912      	adds	r2, r2, r4
 8008c72:	eb45 0303 	adc.w	r3, r5, r3
 8008c76:	f04f 0000 	mov.w	r0, #0
 8008c7a:	f04f 0100 	mov.w	r1, #0
 8008c7e:	00d9      	lsls	r1, r3, #3
 8008c80:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008c84:	00d0      	lsls	r0, r2, #3
 8008c86:	4602      	mov	r2, r0
 8008c88:	460b      	mov	r3, r1
 8008c8a:	1911      	adds	r1, r2, r4
 8008c8c:	6639      	str	r1, [r7, #96]	; 0x60
 8008c8e:	416b      	adcs	r3, r5
 8008c90:	667b      	str	r3, [r7, #100]	; 0x64
 8008c92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	461a      	mov	r2, r3
 8008c98:	f04f 0300 	mov.w	r3, #0
 8008c9c:	1891      	adds	r1, r2, r2
 8008c9e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008ca0:	415b      	adcs	r3, r3
 8008ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ca4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008ca8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008cac:	f7f7 fab0 	bl	8000210 <__aeabi_uldivmod>
 8008cb0:	4602      	mov	r2, r0
 8008cb2:	460b      	mov	r3, r1
 8008cb4:	4ba5      	ldr	r3, [pc, #660]	; (8008f4c <UART_SetConfig+0x38c>)
 8008cb6:	fba3 2302 	umull	r2, r3, r3, r2
 8008cba:	095b      	lsrs	r3, r3, #5
 8008cbc:	011e      	lsls	r6, r3, #4
 8008cbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008cc0:	461c      	mov	r4, r3
 8008cc2:	f04f 0500 	mov.w	r5, #0
 8008cc6:	4622      	mov	r2, r4
 8008cc8:	462b      	mov	r3, r5
 8008cca:	1891      	adds	r1, r2, r2
 8008ccc:	6339      	str	r1, [r7, #48]	; 0x30
 8008cce:	415b      	adcs	r3, r3
 8008cd0:	637b      	str	r3, [r7, #52]	; 0x34
 8008cd2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008cd6:	1912      	adds	r2, r2, r4
 8008cd8:	eb45 0303 	adc.w	r3, r5, r3
 8008cdc:	f04f 0000 	mov.w	r0, #0
 8008ce0:	f04f 0100 	mov.w	r1, #0
 8008ce4:	00d9      	lsls	r1, r3, #3
 8008ce6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008cea:	00d0      	lsls	r0, r2, #3
 8008cec:	4602      	mov	r2, r0
 8008cee:	460b      	mov	r3, r1
 8008cf0:	1911      	adds	r1, r2, r4
 8008cf2:	65b9      	str	r1, [r7, #88]	; 0x58
 8008cf4:	416b      	adcs	r3, r5
 8008cf6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008cf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	461a      	mov	r2, r3
 8008cfe:	f04f 0300 	mov.w	r3, #0
 8008d02:	1891      	adds	r1, r2, r2
 8008d04:	62b9      	str	r1, [r7, #40]	; 0x28
 8008d06:	415b      	adcs	r3, r3
 8008d08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008d0e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008d12:	f7f7 fa7d 	bl	8000210 <__aeabi_uldivmod>
 8008d16:	4602      	mov	r2, r0
 8008d18:	460b      	mov	r3, r1
 8008d1a:	4b8c      	ldr	r3, [pc, #560]	; (8008f4c <UART_SetConfig+0x38c>)
 8008d1c:	fba3 1302 	umull	r1, r3, r3, r2
 8008d20:	095b      	lsrs	r3, r3, #5
 8008d22:	2164      	movs	r1, #100	; 0x64
 8008d24:	fb01 f303 	mul.w	r3, r1, r3
 8008d28:	1ad3      	subs	r3, r2, r3
 8008d2a:	00db      	lsls	r3, r3, #3
 8008d2c:	3332      	adds	r3, #50	; 0x32
 8008d2e:	4a87      	ldr	r2, [pc, #540]	; (8008f4c <UART_SetConfig+0x38c>)
 8008d30:	fba2 2303 	umull	r2, r3, r2, r3
 8008d34:	095b      	lsrs	r3, r3, #5
 8008d36:	005b      	lsls	r3, r3, #1
 8008d38:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008d3c:	441e      	add	r6, r3
 8008d3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d40:	4618      	mov	r0, r3
 8008d42:	f04f 0100 	mov.w	r1, #0
 8008d46:	4602      	mov	r2, r0
 8008d48:	460b      	mov	r3, r1
 8008d4a:	1894      	adds	r4, r2, r2
 8008d4c:	623c      	str	r4, [r7, #32]
 8008d4e:	415b      	adcs	r3, r3
 8008d50:	627b      	str	r3, [r7, #36]	; 0x24
 8008d52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008d56:	1812      	adds	r2, r2, r0
 8008d58:	eb41 0303 	adc.w	r3, r1, r3
 8008d5c:	f04f 0400 	mov.w	r4, #0
 8008d60:	f04f 0500 	mov.w	r5, #0
 8008d64:	00dd      	lsls	r5, r3, #3
 8008d66:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008d6a:	00d4      	lsls	r4, r2, #3
 8008d6c:	4622      	mov	r2, r4
 8008d6e:	462b      	mov	r3, r5
 8008d70:	1814      	adds	r4, r2, r0
 8008d72:	653c      	str	r4, [r7, #80]	; 0x50
 8008d74:	414b      	adcs	r3, r1
 8008d76:	657b      	str	r3, [r7, #84]	; 0x54
 8008d78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d7a:	685b      	ldr	r3, [r3, #4]
 8008d7c:	461a      	mov	r2, r3
 8008d7e:	f04f 0300 	mov.w	r3, #0
 8008d82:	1891      	adds	r1, r2, r2
 8008d84:	61b9      	str	r1, [r7, #24]
 8008d86:	415b      	adcs	r3, r3
 8008d88:	61fb      	str	r3, [r7, #28]
 8008d8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008d8e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008d92:	f7f7 fa3d 	bl	8000210 <__aeabi_uldivmod>
 8008d96:	4602      	mov	r2, r0
 8008d98:	460b      	mov	r3, r1
 8008d9a:	4b6c      	ldr	r3, [pc, #432]	; (8008f4c <UART_SetConfig+0x38c>)
 8008d9c:	fba3 1302 	umull	r1, r3, r3, r2
 8008da0:	095b      	lsrs	r3, r3, #5
 8008da2:	2164      	movs	r1, #100	; 0x64
 8008da4:	fb01 f303 	mul.w	r3, r1, r3
 8008da8:	1ad3      	subs	r3, r2, r3
 8008daa:	00db      	lsls	r3, r3, #3
 8008dac:	3332      	adds	r3, #50	; 0x32
 8008dae:	4a67      	ldr	r2, [pc, #412]	; (8008f4c <UART_SetConfig+0x38c>)
 8008db0:	fba2 2303 	umull	r2, r3, r2, r3
 8008db4:	095b      	lsrs	r3, r3, #5
 8008db6:	f003 0207 	and.w	r2, r3, #7
 8008dba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4432      	add	r2, r6
 8008dc0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008dc2:	e0b9      	b.n	8008f38 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008dc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008dc6:	461c      	mov	r4, r3
 8008dc8:	f04f 0500 	mov.w	r5, #0
 8008dcc:	4622      	mov	r2, r4
 8008dce:	462b      	mov	r3, r5
 8008dd0:	1891      	adds	r1, r2, r2
 8008dd2:	6139      	str	r1, [r7, #16]
 8008dd4:	415b      	adcs	r3, r3
 8008dd6:	617b      	str	r3, [r7, #20]
 8008dd8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008ddc:	1912      	adds	r2, r2, r4
 8008dde:	eb45 0303 	adc.w	r3, r5, r3
 8008de2:	f04f 0000 	mov.w	r0, #0
 8008de6:	f04f 0100 	mov.w	r1, #0
 8008dea:	00d9      	lsls	r1, r3, #3
 8008dec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008df0:	00d0      	lsls	r0, r2, #3
 8008df2:	4602      	mov	r2, r0
 8008df4:	460b      	mov	r3, r1
 8008df6:	eb12 0804 	adds.w	r8, r2, r4
 8008dfa:	eb43 0905 	adc.w	r9, r3, r5
 8008dfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	4618      	mov	r0, r3
 8008e04:	f04f 0100 	mov.w	r1, #0
 8008e08:	f04f 0200 	mov.w	r2, #0
 8008e0c:	f04f 0300 	mov.w	r3, #0
 8008e10:	008b      	lsls	r3, r1, #2
 8008e12:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008e16:	0082      	lsls	r2, r0, #2
 8008e18:	4640      	mov	r0, r8
 8008e1a:	4649      	mov	r1, r9
 8008e1c:	f7f7 f9f8 	bl	8000210 <__aeabi_uldivmod>
 8008e20:	4602      	mov	r2, r0
 8008e22:	460b      	mov	r3, r1
 8008e24:	4b49      	ldr	r3, [pc, #292]	; (8008f4c <UART_SetConfig+0x38c>)
 8008e26:	fba3 2302 	umull	r2, r3, r3, r2
 8008e2a:	095b      	lsrs	r3, r3, #5
 8008e2c:	011e      	lsls	r6, r3, #4
 8008e2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e30:	4618      	mov	r0, r3
 8008e32:	f04f 0100 	mov.w	r1, #0
 8008e36:	4602      	mov	r2, r0
 8008e38:	460b      	mov	r3, r1
 8008e3a:	1894      	adds	r4, r2, r2
 8008e3c:	60bc      	str	r4, [r7, #8]
 8008e3e:	415b      	adcs	r3, r3
 8008e40:	60fb      	str	r3, [r7, #12]
 8008e42:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008e46:	1812      	adds	r2, r2, r0
 8008e48:	eb41 0303 	adc.w	r3, r1, r3
 8008e4c:	f04f 0400 	mov.w	r4, #0
 8008e50:	f04f 0500 	mov.w	r5, #0
 8008e54:	00dd      	lsls	r5, r3, #3
 8008e56:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008e5a:	00d4      	lsls	r4, r2, #3
 8008e5c:	4622      	mov	r2, r4
 8008e5e:	462b      	mov	r3, r5
 8008e60:	1814      	adds	r4, r2, r0
 8008e62:	64bc      	str	r4, [r7, #72]	; 0x48
 8008e64:	414b      	adcs	r3, r1
 8008e66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e6a:	685b      	ldr	r3, [r3, #4]
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f04f 0100 	mov.w	r1, #0
 8008e72:	f04f 0200 	mov.w	r2, #0
 8008e76:	f04f 0300 	mov.w	r3, #0
 8008e7a:	008b      	lsls	r3, r1, #2
 8008e7c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008e80:	0082      	lsls	r2, r0, #2
 8008e82:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008e86:	f7f7 f9c3 	bl	8000210 <__aeabi_uldivmod>
 8008e8a:	4602      	mov	r2, r0
 8008e8c:	460b      	mov	r3, r1
 8008e8e:	4b2f      	ldr	r3, [pc, #188]	; (8008f4c <UART_SetConfig+0x38c>)
 8008e90:	fba3 1302 	umull	r1, r3, r3, r2
 8008e94:	095b      	lsrs	r3, r3, #5
 8008e96:	2164      	movs	r1, #100	; 0x64
 8008e98:	fb01 f303 	mul.w	r3, r1, r3
 8008e9c:	1ad3      	subs	r3, r2, r3
 8008e9e:	011b      	lsls	r3, r3, #4
 8008ea0:	3332      	adds	r3, #50	; 0x32
 8008ea2:	4a2a      	ldr	r2, [pc, #168]	; (8008f4c <UART_SetConfig+0x38c>)
 8008ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8008ea8:	095b      	lsrs	r3, r3, #5
 8008eaa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008eae:	441e      	add	r6, r3
 8008eb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f04f 0100 	mov.w	r1, #0
 8008eb8:	4602      	mov	r2, r0
 8008eba:	460b      	mov	r3, r1
 8008ebc:	1894      	adds	r4, r2, r2
 8008ebe:	603c      	str	r4, [r7, #0]
 8008ec0:	415b      	adcs	r3, r3
 8008ec2:	607b      	str	r3, [r7, #4]
 8008ec4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ec8:	1812      	adds	r2, r2, r0
 8008eca:	eb41 0303 	adc.w	r3, r1, r3
 8008ece:	f04f 0400 	mov.w	r4, #0
 8008ed2:	f04f 0500 	mov.w	r5, #0
 8008ed6:	00dd      	lsls	r5, r3, #3
 8008ed8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008edc:	00d4      	lsls	r4, r2, #3
 8008ede:	4622      	mov	r2, r4
 8008ee0:	462b      	mov	r3, r5
 8008ee2:	eb12 0a00 	adds.w	sl, r2, r0
 8008ee6:	eb43 0b01 	adc.w	fp, r3, r1
 8008eea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f04f 0100 	mov.w	r1, #0
 8008ef4:	f04f 0200 	mov.w	r2, #0
 8008ef8:	f04f 0300 	mov.w	r3, #0
 8008efc:	008b      	lsls	r3, r1, #2
 8008efe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008f02:	0082      	lsls	r2, r0, #2
 8008f04:	4650      	mov	r0, sl
 8008f06:	4659      	mov	r1, fp
 8008f08:	f7f7 f982 	bl	8000210 <__aeabi_uldivmod>
 8008f0c:	4602      	mov	r2, r0
 8008f0e:	460b      	mov	r3, r1
 8008f10:	4b0e      	ldr	r3, [pc, #56]	; (8008f4c <UART_SetConfig+0x38c>)
 8008f12:	fba3 1302 	umull	r1, r3, r3, r2
 8008f16:	095b      	lsrs	r3, r3, #5
 8008f18:	2164      	movs	r1, #100	; 0x64
 8008f1a:	fb01 f303 	mul.w	r3, r1, r3
 8008f1e:	1ad3      	subs	r3, r2, r3
 8008f20:	011b      	lsls	r3, r3, #4
 8008f22:	3332      	adds	r3, #50	; 0x32
 8008f24:	4a09      	ldr	r2, [pc, #36]	; (8008f4c <UART_SetConfig+0x38c>)
 8008f26:	fba2 2303 	umull	r2, r3, r2, r3
 8008f2a:	095b      	lsrs	r3, r3, #5
 8008f2c:	f003 020f 	and.w	r2, r3, #15
 8008f30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4432      	add	r2, r6
 8008f36:	609a      	str	r2, [r3, #8]
}
 8008f38:	bf00      	nop
 8008f3a:	377c      	adds	r7, #124	; 0x7c
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f42:	bf00      	nop
 8008f44:	40011000 	.word	0x40011000
 8008f48:	40011400 	.word	0x40011400
 8008f4c:	51eb851f 	.word	0x51eb851f

08008f50 <__read_flags>:


/*
 * Reads the flag status register and returns the value of the 8-bits register
 */
uint8_t __read_flags() {
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b090      	sub	sp, #64	; 0x40
 8008f54:	af00      	add	r7, sp, #0
	Command cmd = get_default_command();
 8008f56:	f107 0308 	add.w	r3, r7, #8
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f000 f988 	bl	8009270 <get_default_command>
	with_data(&cmd, 1);
 8008f60:	f107 0308 	add.w	r3, r7, #8
 8008f64:	2101      	movs	r1, #1
 8008f66:	4618      	mov	r0, r3
 8008f68:	f000 f9b8 	bl	80092dc <with_data>

	if(!qspi_run(&cmd, READ_FLAG_STATUS_REGISTER)) {
 8008f6c:	f107 0308 	add.w	r3, r7, #8
 8008f70:	2170      	movs	r1, #112	; 0x70
 8008f72:	4618      	mov	r0, r3
 8008f74:	f000 f9c4 	bl	8009300 <qspi_run>

	}

	uint8_t flags;

	if(!qspi_receive(&flags)) {
 8008f78:	1dfb      	adds	r3, r7, #7
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f000 fa28 	bl	80093d0 <qspi_receive>

	}

	return flags;
 8008f80:	79fb      	ldrb	r3, [r7, #7]
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3740      	adds	r7, #64	; 0x40
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}

08008f8a <__write_enable_latch>:

/*
 * Enables the write latch.
 * This function must be called before each PROGRAM or ERASE operation.
 */
bool __write_enable_latch() {
 8008f8a:	b5b0      	push	{r4, r5, r7, lr}
 8008f8c:	b09c      	sub	sp, #112	; 0x70
 8008f8e:	af00      	add	r7, sp, #0
	Command cmd = get_default_command();
 8008f90:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008f94:	4618      	mov	r0, r3
 8008f96:	f000 f96b 	bl	8009270 <get_default_command>

	if(qspi_run(&cmd, WRITE_ENABLE_LATCH)) {
 8008f9a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008f9e:	2106      	movs	r1, #6
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f000 f9ad 	bl	8009300 <qspi_run>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d022      	beq.n	8008ff2 <__write_enable_latch+0x68>
		cmd = get_default_command();
 8008fac:	463b      	mov	r3, r7
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f000 f95e 	bl	8009270 <get_default_command>
 8008fb4:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8008fb8:	463d      	mov	r5, r7
 8008fba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008fbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008fbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008fc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008fc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008fc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008fc6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008fca:	e884 0003 	stmia.w	r4, {r0, r1}

		with_data(&cmd, 1);
 8008fce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008fd2:	2101      	movs	r1, #1
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f000 f981 	bl	80092dc <with_data>

		if(qspi_poll(&cmd, READ_STATUS_REGISTER, 1, true)) {
 8008fda:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8008fde:	2301      	movs	r3, #1
 8008fe0:	2201      	movs	r2, #1
 8008fe2:	2105      	movs	r1, #5
 8008fe4:	f000 f9a8 	bl	8009338 <qspi_poll>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d001      	beq.n	8008ff2 <__write_enable_latch+0x68>
			return true;
 8008fee:	2301      	movs	r3, #1
 8008ff0:	e000      	b.n	8008ff4 <__write_enable_latch+0x6a>
		}
	}

	return false;
 8008ff2:	2300      	movs	r3, #0
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3770      	adds	r7, #112	; 0x70
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bdb0      	pop	{r4, r5, r7, pc}

08008ffc <__write_disable_latch>:

/*
 * Call this function to prevent data corruption when a hardware fault (e.g. protection fault) occurs.
 * Please refer to the documentation for details.
 */
bool __write_disable_latch() {
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b08e      	sub	sp, #56	; 0x38
 8009000:	af00      	add	r7, sp, #0
	Command cmd = get_default_command();
 8009002:	463b      	mov	r3, r7
 8009004:	4618      	mov	r0, r3
 8009006:	f000 f933 	bl	8009270 <get_default_command>
	return qspi_run(&cmd, WRITE_ENABLE_LATCH);
 800900a:	463b      	mov	r3, r7
 800900c:	2106      	movs	r1, #6
 800900e:	4618      	mov	r0, r3
 8009010:	f000 f976 	bl	8009300 <qspi_run>
 8009014:	4603      	mov	r3, r0
}
 8009016:	4618      	mov	r0, r3
 8009018:	3738      	adds	r7, #56	; 0x38
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}

0800901e <flash_init>:

/*
 * Initialises the flash driver
 */
void flash_init() {
 800901e:	b580      	push	{r7, lr}
 8009020:	b090      	sub	sp, #64	; 0x40
 8009022:	af00      	add	r7, sp, #0
	uint8_t configuration = 0b00011011; // 1 Dummy cycle
 8009024:	231b      	movs	r3, #27
 8009026:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	Command cmd = get_default_command();
 800902a:	1d3b      	adds	r3, r7, #4
 800902c:	4618      	mov	r0, r3
 800902e:	f000 f91f 	bl	8009270 <get_default_command>
	with_data(&cmd, 1);
 8009032:	1d3b      	adds	r3, r7, #4
 8009034:	2101      	movs	r1, #1
 8009036:	4618      	mov	r0, r3
 8009038:	f000 f950 	bl	80092dc <with_data>

	__write_enable_latch();
 800903c:	f7ff ffa5 	bl	8008f8a <__write_enable_latch>

	if(!qspi_run(&cmd, 0x81)) { // Write volatile configuration register
 8009040:	1d3b      	adds	r3, r7, #4
 8009042:	2181      	movs	r1, #129	; 0x81
 8009044:	4618      	mov	r0, r3
 8009046:	f000 f95b 	bl	8009300 <qspi_run>

	}

	if(!qspi_transmit(&configuration)) {
 800904a:	f107 033f 	add.w	r3, r7, #63	; 0x3f
 800904e:	4618      	mov	r0, r3
 8009050:	f000 f9a8 	bl	80093a4 <qspi_transmit>

	}

	if(!qspi_poll(&cmd, READ_FLAG_STATUS_REGISTER, 7, true)) {
 8009054:	1d38      	adds	r0, r7, #4
 8009056:	2301      	movs	r3, #1
 8009058:	2207      	movs	r2, #7
 800905a:	2170      	movs	r1, #112	; 0x70
 800905c:	f000 f96c 	bl	8009338 <qspi_poll>

	}
}
 8009060:	bf00      	nop
 8009062:	3740      	adds	r7, #64	; 0x40
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}

08009068 <flash_read>:
 * Test providers:
 * 	 - read_ut.c
 *
 */

void flash_read(uint32_t address, uint8_t* buffer, uint32_t length) {
 8009068:	b580      	push	{r7, lr}
 800906a:	b084      	sub	sp, #16
 800906c:	af00      	add	r7, sp, #0
 800906e:	60f8      	str	r0, [r7, #12]
 8009070:	60b9      	str	r1, [r7, #8]
 8009072:	607a      	str	r2, [r7, #4]
	while(QUADSPI->SR & QUADSPI_SR_BUSY);
 8009074:	bf00      	nop
 8009076:	4b12      	ldr	r3, [pc, #72]	; (80090c0 <flash_read+0x58>)
 8009078:	689b      	ldr	r3, [r3, #8]
 800907a:	f003 0320 	and.w	r3, r3, #32
 800907e:	2b00      	cmp	r3, #0
 8009080:	d1f9      	bne.n	8009076 <flash_read+0xe>
	QUADSPI->CCR = (uint32_t) (FREAD_SINGLE) | (0b00000001 << 24) | (0b00000100 << 16) | (0b00100101 << 8);
 8009082:	4b0f      	ldr	r3, [pc, #60]	; (80090c0 <flash_read+0x58>)
 8009084:	4a0f      	ldr	r2, [pc, #60]	; (80090c4 <flash_read+0x5c>)
 8009086:	615a      	str	r2, [r3, #20]
	while(QUADSPI->SR & QUADSPI_SR_BUSY);
 8009088:	bf00      	nop
 800908a:	4b0d      	ldr	r3, [pc, #52]	; (80090c0 <flash_read+0x58>)
 800908c:	689b      	ldr	r3, [r3, #8]
 800908e:	f003 0320 	and.w	r3, r3, #32
 8009092:	2b00      	cmp	r3, #0
 8009094:	d1f9      	bne.n	800908a <flash_read+0x22>
	QUADSPI->AR = address;
 8009096:	4a0a      	ldr	r2, [pc, #40]	; (80090c0 <flash_read+0x58>)
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	6193      	str	r3, [r2, #24]
	while(QUADSPI->SR & QUADSPI_SR_BUSY);
 800909c:	bf00      	nop
 800909e:	4b08      	ldr	r3, [pc, #32]	; (80090c0 <flash_read+0x58>)
 80090a0:	689b      	ldr	r3, [r3, #8]
 80090a2:	f003 0320 	and.w	r3, r3, #32
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d1f9      	bne.n	800909e <flash_read+0x36>
	QUADSPI->DLR = length;
 80090aa:	4a05      	ldr	r2, [pc, #20]	; (80090c0 <flash_read+0x58>)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6113      	str	r3, [r2, #16]

	if(!qspi_receive(buffer)) {
 80090b0:	68b8      	ldr	r0, [r7, #8]
 80090b2:	f000 f98d 	bl	80093d0 <qspi_receive>

	}
}
 80090b6:	bf00      	nop
 80090b8:	3710      	adds	r7, #16
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}
 80090be:	bf00      	nop
 80090c0:	a0001000 	.word	0xa0001000
 80090c4:	0104250b 	.word	0x0104250b

080090c8 <__flash_write_page>:
 * Test providers:
 * 	 - write_ut.c
 *
 */

void __flash_write_page(uint32_t address, uint8_t* buffer, uint32_t length) {
 80090c8:	b5b0      	push	{r4, r5, r7, lr}
 80090ca:	b0a2      	sub	sp, #136	; 0x88
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6478      	str	r0, [r7, #68]	; 0x44
 80090d0:	6439      	str	r1, [r7, #64]	; 0x40
 80090d2:	63fa      	str	r2, [r7, #60]	; 0x3c
	__write_enable_latch();
 80090d4:	f7ff ff59 	bl	8008f8a <__write_enable_latch>

	Command cmd = get_default_command();
 80090d8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80090dc:	4618      	mov	r0, r3
 80090de:	f000 f8c7 	bl	8009270 <get_default_command>

	with_address(&cmd, address);
 80090e2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80090e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80090e8:	4618      	mov	r0, r3
 80090ea:	f000 f8e1 	bl	80092b0 <with_address>
	with_data(&cmd, length);
 80090ee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80090f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80090f4:	4618      	mov	r0, r3
 80090f6:	f000 f8f1 	bl	80092dc <with_data>

	if(!qspi_run(&cmd, WRITE_SINGLE)) {
 80090fa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80090fe:	2102      	movs	r1, #2
 8009100:	4618      	mov	r0, r3
 8009102:	f000 f8fd 	bl	8009300 <qspi_run>

	}

	if(!qspi_transmit(buffer)) {
 8009106:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009108:	f000 f94c 	bl	80093a4 <qspi_transmit>

	/*
	 * Checks if the controller is ready to proceed to the next command
	 */

	cmd = get_default_command();
 800910c:	463b      	mov	r3, r7
 800910e:	4618      	mov	r0, r3
 8009110:	f000 f8ae 	bl	8009270 <get_default_command>
 8009114:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8009118:	463d      	mov	r5, r7
 800911a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800911c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800911e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009120:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009122:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009124:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009126:	e895 0003 	ldmia.w	r5, {r0, r1}
 800912a:	e884 0003 	stmia.w	r4, {r0, r1}
	with_data(&cmd, 1);
 800912e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009132:	2101      	movs	r1, #1
 8009134:	4618      	mov	r0, r3
 8009136:	f000 f8d1 	bl	80092dc <with_data>

	if(!qspi_poll(&cmd, READ_FLAG_STATUS_REGISTER, 7, true)) {
 800913a:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 800913e:	2301      	movs	r3, #1
 8009140:	2207      	movs	r2, #7
 8009142:	2170      	movs	r1, #112	; 0x70
 8009144:	f000 f8f8 	bl	8009338 <qspi_poll>

	}

	uint8_t flags = __read_flags();
 8009148:	f7ff ff02 	bl	8008f50 <__read_flags>
 800914c:	4603      	mov	r3, r0
 800914e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	// Checks if the protection fault flag is set
	if(flags & (1 << 4)) {
 8009152:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8009156:	f003 0310 	and.w	r3, r3, #16
 800915a:	2b00      	cmp	r3, #0
 800915c:	d001      	beq.n	8009162 <__flash_write_page+0x9a>
		__write_disable_latch(); // Manually reset the latch
 800915e:	f7ff ff4d 	bl	8008ffc <__write_disable_latch>


	}
}
 8009162:	bf00      	nop
 8009164:	3788      	adds	r7, #136	; 0x88
 8009166:	46bd      	mov	sp, r7
 8009168:	bdb0      	pop	{r4, r5, r7, pc}

0800916a <flash_write>:

void flash_write(uint32_t address, uint8_t* buffer, uint32_t length) {
 800916a:	b580      	push	{r7, lr}
 800916c:	b086      	sub	sp, #24
 800916e:	af00      	add	r7, sp, #0
 8009170:	60f8      	str	r0, [r7, #12]
 8009172:	60b9      	str	r1, [r7, #8]
 8009174:	607a      	str	r2, [r7, #4]
	uint32_t internal_address = address % PAGE_SIZE;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	b2db      	uxtb	r3, r3
 800917a:	617b      	str	r3, [r7, #20]

	while(internal_address + length > PAGE_SIZE) {
 800917c:	e016      	b.n	80091ac <flash_write+0x42>
		uint32_t write_length = PAGE_SIZE - internal_address;
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8009184:	613b      	str	r3, [r7, #16]

		__flash_write_page(address, buffer, write_length);
 8009186:	693a      	ldr	r2, [r7, #16]
 8009188:	68b9      	ldr	r1, [r7, #8]
 800918a:	68f8      	ldr	r0, [r7, #12]
 800918c:	f7ff ff9c 	bl	80090c8 <__flash_write_page>
		buffer += write_length;
 8009190:	68ba      	ldr	r2, [r7, #8]
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	4413      	add	r3, r2
 8009196:	60bb      	str	r3, [r7, #8]
		address += write_length;
 8009198:	68fa      	ldr	r2, [r7, #12]
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	4413      	add	r3, r2
 800919e:	60fb      	str	r3, [r7, #12]
		length -= write_length;
 80091a0:	687a      	ldr	r2, [r7, #4]
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	1ad3      	subs	r3, r2, r3
 80091a6:	607b      	str	r3, [r7, #4]

		internal_address = 0;
 80091a8:	2300      	movs	r3, #0
 80091aa:	617b      	str	r3, [r7, #20]
	while(internal_address + length > PAGE_SIZE) {
 80091ac:	697a      	ldr	r2, [r7, #20]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	4413      	add	r3, r2
 80091b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091b6:	d8e2      	bhi.n	800917e <flash_write+0x14>
	}

	__flash_write_page(address, buffer, length);
 80091b8:	687a      	ldr	r2, [r7, #4]
 80091ba:	68b9      	ldr	r1, [r7, #8]
 80091bc:	68f8      	ldr	r0, [r7, #12]
 80091be:	f7ff ff83 	bl	80090c8 <__flash_write_page>
}
 80091c2:	bf00      	nop
 80091c4:	3718      	adds	r7, #24
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}

080091ca <__flash_erase>:


   }
}

void __flash_erase(uint32_t instruction, uint32_t address) {
 80091ca:	b5b0      	push	{r4, r5, r7, lr}
 80091cc:	b0a0      	sub	sp, #128	; 0x80
 80091ce:	af00      	add	r7, sp, #0
 80091d0:	63f8      	str	r0, [r7, #60]	; 0x3c
 80091d2:	63b9      	str	r1, [r7, #56]	; 0x38

	__write_enable_latch();
 80091d4:	f7ff fed9 	bl	8008f8a <__write_enable_latch>


	Command cmd = get_default_command();
 80091d8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80091dc:	4618      	mov	r0, r3
 80091de:	f000 f847 	bl	8009270 <get_default_command>
	with_address(&cmd, address);
 80091e2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80091e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80091e8:	4618      	mov	r0, r3
 80091ea:	f000 f861 	bl	80092b0 <with_address>


	if(!qspi_run(&cmd, instruction)) {
 80091ee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80091f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80091f4:	4618      	mov	r0, r3
 80091f6:	f000 f883 	bl	8009300 <qspi_run>
	}

	/*
	 * Checks if the controller is ready to proceed to the next command
	 */
	cmd = get_default_command();
 80091fa:	463b      	mov	r3, r7
 80091fc:	4618      	mov	r0, r3
 80091fe:	f000 f837 	bl	8009270 <get_default_command>
 8009202:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8009206:	463d      	mov	r5, r7
 8009208:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800920a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800920c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800920e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009210:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009212:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009214:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009218:	e884 0003 	stmia.w	r4, {r0, r1}
	with_data(&cmd, 1);
 800921c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009220:	2101      	movs	r1, #1
 8009222:	4618      	mov	r0, r3
 8009224:	f000 f85a 	bl	80092dc <with_data>

	if(!qspi_poll(&cmd, READ_FLAG_STATUS_REGISTER, 7, true)) {
 8009228:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800922c:	2301      	movs	r3, #1
 800922e:	2207      	movs	r2, #7
 8009230:	2170      	movs	r1, #112	; 0x70
 8009232:	f000 f881 	bl	8009338 <qspi_poll>
	}

	/*
	 * Checks if the protection fault flag is set
	 */
	uint8_t flags = __read_flags();
 8009236:	f7ff fe8b 	bl	8008f50 <__read_flags>
 800923a:	4603      	mov	r3, r0
 800923c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	if(flags & (1 << 5)) {
 8009240:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009244:	f003 0320 	and.w	r3, r3, #32
 8009248:	2b00      	cmp	r3, #0
 800924a:	d001      	beq.n	8009250 <__flash_erase+0x86>
		__write_disable_latch(); // Manually reset the latch
 800924c:	f7ff fed6 	bl	8008ffc <__write_disable_latch>


	}
}
 8009250:	bf00      	nop
 8009252:	3780      	adds	r7, #128	; 0x80
 8009254:	46bd      	mov	sp, r7
 8009256:	bdb0      	pop	{r4, r5, r7, pc}

08009258 <flash_erase_subsector>:

/*
 * Erases the whole sub-sector represented by the provided address.
 * The address may be any of those within the sub-sector.
 */
void flash_erase_subsector(uint32_t address) {
 8009258:	b580      	push	{r7, lr}
 800925a:	b082      	sub	sp, #8
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
	__flash_erase(ERASE_SUBSECTOR, address);
 8009260:	6879      	ldr	r1, [r7, #4]
 8009262:	2020      	movs	r0, #32
 8009264:	f7ff ffb1 	bl	80091ca <__flash_erase>
}
 8009268:	bf00      	nop
 800926a:	3708      	adds	r7, #8
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}

08009270 <get_default_command>:
#include "io_driver.h"




Command get_default_command() {
 8009270:	b5b0      	push	{r4, r5, r7, lr}
 8009272:	b090      	sub	sp, #64	; 0x40
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
	Command command = {
 8009278:	f107 0308 	add.w	r3, r7, #8
 800927c:	2238      	movs	r2, #56	; 0x38
 800927e:	2100      	movs	r1, #0
 8009280:	4618      	mov	r0, r3
 8009282:	f002 f93b 	bl	800b4fc <memset>
 8009286:	f44f 7380 	mov.w	r3, #256	; 0x100
 800928a:	623b      	str	r3, [r7, #32]
			.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY,
			.SIOOMode = QSPI_SIOO_INST_EVERY_CMD
		}
	};

	return command;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	461d      	mov	r5, r3
 8009290:	f107 0408 	add.w	r4, r7, #8
 8009294:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009296:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009298:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800929a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800929c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800929e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80092a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80092a4:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	3740      	adds	r7, #64	; 0x40
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bdb0      	pop	{r4, r5, r7, pc}

080092b0 <with_address>:

/*
 * The two following functions enable the programmer to build a QSPI command very easily.
 */
void with_address(Command* cmd, uint32_t address) {
 80092b0:	b480      	push	{r7}
 80092b2:	b083      	sub	sp, #12
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
 80092b8:	6039      	str	r1, [r7, #0]
	cmd->qspi_command.AddressMode = QSPI_ADDRESS_1_LINE;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80092c0:	61da      	str	r2, [r3, #28]
	cmd->qspi_command.AddressSize = QSPI_ADDRESS_24_BITS;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80092c8:	60da      	str	r2, [r3, #12]
	cmd->qspi_command.Address = address;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	683a      	ldr	r2, [r7, #0]
 80092ce:	605a      	str	r2, [r3, #4]
}
 80092d0:	bf00      	nop
 80092d2:	370c      	adds	r7, #12
 80092d4:	46bd      	mov	sp, r7
 80092d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092da:	4770      	bx	lr

080092dc <with_data>:

void with_data(Command* cmd, uint32_t length) {
 80092dc:	b480      	push	{r7}
 80092de:	b083      	sub	sp, #12
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
 80092e4:	6039      	str	r1, [r7, #0]
	cmd->qspi_command.DataMode = QSPI_DATA_1_LINE;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80092ec:	625a      	str	r2, [r3, #36]	; 0x24
	cmd->qspi_command.NbData = length;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	683a      	ldr	r2, [r7, #0]
 80092f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80092f4:	bf00      	nop
 80092f6:	370c      	adds	r7, #12
 80092f8:	46bd      	mov	sp, r7
 80092fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fe:	4770      	bx	lr

08009300 <qspi_run>:


/*
 * Higher-level abstraction layer for the QSPI interface.
 */
bool qspi_run(Command* cmd, uint32_t instruction) {
 8009300:	b580      	push	{r7, lr}
 8009302:	b082      	sub	sp, #8
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
 8009308:	6039      	str	r1, [r7, #0]
	cmd->qspi_command.Instruction = instruction;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	683a      	ldr	r2, [r7, #0]
 800930e:	601a      	str	r2, [r3, #0]
	return HAL_QSPI_Command(&hqspi, &(cmd->qspi_command), IO_TIMEOUT) == HAL_OK;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8009316:	4619      	mov	r1, r3
 8009318:	4806      	ldr	r0, [pc, #24]	; (8009334 <qspi_run+0x34>)
 800931a:	f7fc fbb7 	bl	8005a8c <HAL_QSPI_Command>
 800931e:	4603      	mov	r3, r0
 8009320:	2b00      	cmp	r3, #0
 8009322:	bf0c      	ite	eq
 8009324:	2301      	moveq	r3, #1
 8009326:	2300      	movne	r3, #0
 8009328:	b2db      	uxtb	r3, r3
}
 800932a:	4618      	mov	r0, r3
 800932c:	3708      	adds	r7, #8
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
 8009332:	bf00      	nop
 8009334:	20006b24 	.word	0x20006b24

08009338 <qspi_poll>:

bool qspi_poll(Command* cmd, uint32_t instruction, uint8_t bit, bool value) {
 8009338:	b580      	push	{r7, lr}
 800933a:	b08a      	sub	sp, #40	; 0x28
 800933c:	af00      	add	r7, sp, #0
 800933e:	60f8      	str	r0, [r7, #12]
 8009340:	60b9      	str	r1, [r7, #8]
 8009342:	4611      	mov	r1, r2
 8009344:	461a      	mov	r2, r3
 8009346:	460b      	mov	r3, r1
 8009348:	71fb      	strb	r3, [r7, #7]
 800934a:	4613      	mov	r3, r2
 800934c:	71bb      	strb	r3, [r7, #6]
	QSPI_AutoPollingTypeDef poller;

	poller.MatchMode = QSPI_MATCH_MODE_AND;
 800934e:	2300      	movs	r3, #0
 8009350:	623b      	str	r3, [r7, #32]
	poller.StatusBytesSize = 1;
 8009352:	2301      	movs	r3, #1
 8009354:	61fb      	str	r3, [r7, #28]
	poller.Interval = 0x10;
 8009356:	2310      	movs	r3, #16
 8009358:	61bb      	str	r3, [r7, #24]
	poller.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 800935a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800935e:	627b      	str	r3, [r7, #36]	; 0x24
	poller.Match = value << bit;
 8009360:	79ba      	ldrb	r2, [r7, #6]
 8009362:	79fb      	ldrb	r3, [r7, #7]
 8009364:	fa02 f303 	lsl.w	r3, r2, r3
 8009368:	613b      	str	r3, [r7, #16]
	poller.Mask = 1 << bit;
 800936a:	79fb      	ldrb	r3, [r7, #7]
 800936c:	2201      	movs	r2, #1
 800936e:	fa02 f303 	lsl.w	r3, r2, r3
 8009372:	617b      	str	r3, [r7, #20]

	cmd->qspi_command.Instruction = instruction;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	68ba      	ldr	r2, [r7, #8]
 8009378:	601a      	str	r2, [r3, #0]

	return HAL_QSPI_AutoPolling(&hqspi, &(cmd->qspi_command), &poller, IO_TIMEOUT) == HAL_OK;
 800937a:	68f9      	ldr	r1, [r7, #12]
 800937c:	f107 0210 	add.w	r2, r7, #16
 8009380:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8009384:	4806      	ldr	r0, [pc, #24]	; (80093a0 <qspi_poll+0x68>)
 8009386:	f7fc fd18 	bl	8005dba <HAL_QSPI_AutoPolling>
 800938a:	4603      	mov	r3, r0
 800938c:	2b00      	cmp	r3, #0
 800938e:	bf0c      	ite	eq
 8009390:	2301      	moveq	r3, #1
 8009392:	2300      	movne	r3, #0
 8009394:	b2db      	uxtb	r3, r3
}
 8009396:	4618      	mov	r0, r3
 8009398:	3728      	adds	r7, #40	; 0x28
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}
 800939e:	bf00      	nop
 80093a0:	20006b24 	.word	0x20006b24

080093a4 <qspi_transmit>:

bool qspi_transmit(uint8_t* buffer) {
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b082      	sub	sp, #8
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
	return HAL_QSPI_Transmit(&hqspi, buffer, IO_TIMEOUT) == HAL_OK;
 80093ac:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80093b0:	6879      	ldr	r1, [r7, #4]
 80093b2:	4806      	ldr	r0, [pc, #24]	; (80093cc <qspi_transmit+0x28>)
 80093b4:	f7fc fbc8 	bl	8005b48 <HAL_QSPI_Transmit>
 80093b8:	4603      	mov	r3, r0
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	bf0c      	ite	eq
 80093be:	2301      	moveq	r3, #1
 80093c0:	2300      	movne	r3, #0
 80093c2:	b2db      	uxtb	r3, r3
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3708      	adds	r7, #8
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}
 80093cc:	20006b24 	.word	0x20006b24

080093d0 <qspi_receive>:

bool qspi_receive(uint8_t* buffer) {
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b082      	sub	sp, #8
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
	return HAL_QSPI_Receive(&hqspi, buffer, IO_TIMEOUT) == HAL_OK;
 80093d8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80093dc:	6879      	ldr	r1, [r7, #4]
 80093de:	4806      	ldr	r0, [pc, #24]	; (80093f8 <qspi_receive+0x28>)
 80093e0:	f7fc fc49 	bl	8005c76 <HAL_QSPI_Receive>
 80093e4:	4603      	mov	r3, r0
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	bf0c      	ite	eq
 80093ea:	2301      	moveq	r3, #1
 80093ec:	2300      	movne	r3, #0
 80093ee:	b2db      	uxtb	r3, r3
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	3708      	adds	r7, #8
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}
 80093f8:	20006b24 	.word	0x20006b24

080093fc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b085      	sub	sp, #20
 8009400:	af00      	add	r7, sp, #0
 8009402:	4603      	mov	r3, r0
 8009404:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009406:	2300      	movs	r3, #0
 8009408:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800940a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800940e:	2b84      	cmp	r3, #132	; 0x84
 8009410:	d005      	beq.n	800941e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009412:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	4413      	add	r3, r2
 800941a:	3303      	adds	r3, #3
 800941c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800941e:	68fb      	ldr	r3, [r7, #12]
}
 8009420:	4618      	mov	r0, r3
 8009422:	3714      	adds	r7, #20
 8009424:	46bd      	mov	sp, r7
 8009426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942a:	4770      	bx	lr

0800942c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009430:	f000 ffba 	bl	800a3a8 <vTaskStartScheduler>
  
  return osOK;
 8009434:	2300      	movs	r3, #0
}
 8009436:	4618      	mov	r0, r3
 8009438:	bd80      	pop	{r7, pc}

0800943a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800943a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800943c:	b089      	sub	sp, #36	; 0x24
 800943e:	af04      	add	r7, sp, #16
 8009440:	6078      	str	r0, [r7, #4]
 8009442:	6039      	str	r1, [r7, #0]
      return NULL;
    } 
  }
#elif( configSUPPORT_STATIC_ALLOCATION == 1 )

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	685c      	ldr	r4, [r3, #4]
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681d      	ldr	r5, [r3, #0]
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	691e      	ldr	r6, [r3, #16]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009456:	4618      	mov	r0, r3
 8009458:	f7ff ffd0 	bl	80093fc <makeFreeRtosPriority>
 800945c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	695b      	ldr	r3, [r3, #20]
 8009462:	687a      	ldr	r2, [r7, #4]
 8009464:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009466:	9202      	str	r2, [sp, #8]
 8009468:	9301      	str	r3, [sp, #4]
 800946a:	9100      	str	r1, [sp, #0]
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	4632      	mov	r2, r6
 8009470:	4629      	mov	r1, r5
 8009472:	4620      	mov	r0, r4
 8009474:	f000 fd98 	bl	8009fa8 <xTaskCreateStatic>
 8009478:	60f8      	str	r0, [r7, #12]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800947a:	68fb      	ldr	r3, [r7, #12]
}
 800947c:	4618      	mov	r0, r3
 800947e:	3714      	adds	r7, #20
 8009480:	46bd      	mov	sp, r7
 8009482:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009484 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b084      	sub	sp, #16
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d001      	beq.n	800949a <osDelay+0x16>
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	e000      	b.n	800949c <osDelay+0x18>
 800949a:	2301      	movs	r3, #1
 800949c:	4618      	mov	r0, r3
 800949e:	f000 ff4f 	bl	800a340 <vTaskDelay>
  
  return osOK;
 80094a2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3710      	adds	r7, #16
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}

080094ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80094ac:	b480      	push	{r7}
 80094ae:	b083      	sub	sp, #12
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f103 0208 	add.w	r2, r3, #8
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80094c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f103 0208 	add.w	r2, r3, #8
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f103 0208 	add.w	r2, r3, #8
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2200      	movs	r2, #0
 80094de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80094e0:	bf00      	nop
 80094e2:	370c      	adds	r7, #12
 80094e4:	46bd      	mov	sp, r7
 80094e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ea:	4770      	bx	lr

080094ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80094ec:	b480      	push	{r7}
 80094ee:	b083      	sub	sp, #12
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2200      	movs	r2, #0
 80094f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80094fa:	bf00      	nop
 80094fc:	370c      	adds	r7, #12
 80094fe:	46bd      	mov	sp, r7
 8009500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009504:	4770      	bx	lr

08009506 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009506:	b480      	push	{r7}
 8009508:	b085      	sub	sp, #20
 800950a:	af00      	add	r7, sp, #0
 800950c:	6078      	str	r0, [r7, #4]
 800950e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	685b      	ldr	r3, [r3, #4]
 8009514:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	68fa      	ldr	r2, [r7, #12]
 800951a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	689a      	ldr	r2, [r3, #8]
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	689b      	ldr	r3, [r3, #8]
 8009528:	683a      	ldr	r2, [r7, #0]
 800952a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	683a      	ldr	r2, [r7, #0]
 8009530:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	687a      	ldr	r2, [r7, #4]
 8009536:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	1c5a      	adds	r2, r3, #1
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	601a      	str	r2, [r3, #0]
}
 8009542:	bf00      	nop
 8009544:	3714      	adds	r7, #20
 8009546:	46bd      	mov	sp, r7
 8009548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954c:	4770      	bx	lr

0800954e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800954e:	b480      	push	{r7}
 8009550:	b085      	sub	sp, #20
 8009552:	af00      	add	r7, sp, #0
 8009554:	6078      	str	r0, [r7, #4]
 8009556:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009564:	d103      	bne.n	800956e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	691b      	ldr	r3, [r3, #16]
 800956a:	60fb      	str	r3, [r7, #12]
 800956c:	e00c      	b.n	8009588 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	3308      	adds	r3, #8
 8009572:	60fb      	str	r3, [r7, #12]
 8009574:	e002      	b.n	800957c <vListInsert+0x2e>
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	685b      	ldr	r3, [r3, #4]
 800957a:	60fb      	str	r3, [r7, #12]
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	685b      	ldr	r3, [r3, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	68ba      	ldr	r2, [r7, #8]
 8009584:	429a      	cmp	r2, r3
 8009586:	d2f6      	bcs.n	8009576 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	685a      	ldr	r2, [r3, #4]
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	685b      	ldr	r3, [r3, #4]
 8009594:	683a      	ldr	r2, [r7, #0]
 8009596:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	68fa      	ldr	r2, [r7, #12]
 800959c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	683a      	ldr	r2, [r7, #0]
 80095a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	687a      	ldr	r2, [r7, #4]
 80095a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	1c5a      	adds	r2, r3, #1
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	601a      	str	r2, [r3, #0]
}
 80095b4:	bf00      	nop
 80095b6:	3714      	adds	r7, #20
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	4770      	bx	lr

080095c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80095c0:	b480      	push	{r7}
 80095c2:	b085      	sub	sp, #20
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	691b      	ldr	r3, [r3, #16]
 80095cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	685b      	ldr	r3, [r3, #4]
 80095d2:	687a      	ldr	r2, [r7, #4]
 80095d4:	6892      	ldr	r2, [r2, #8]
 80095d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	689b      	ldr	r3, [r3, #8]
 80095dc:	687a      	ldr	r2, [r7, #4]
 80095de:	6852      	ldr	r2, [r2, #4]
 80095e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	685b      	ldr	r3, [r3, #4]
 80095e6:	687a      	ldr	r2, [r7, #4]
 80095e8:	429a      	cmp	r2, r3
 80095ea:	d103      	bne.n	80095f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	689a      	ldr	r2, [r3, #8]
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2200      	movs	r2, #0
 80095f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	1e5a      	subs	r2, r3, #1
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
}
 8009608:	4618      	mov	r0, r3
 800960a:	3714      	adds	r7, #20
 800960c:	46bd      	mov	sp, r7
 800960e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009612:	4770      	bx	lr

08009614 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b084      	sub	sp, #16
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
 800961c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d10a      	bne.n	800963e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800962c:	f383 8811 	msr	BASEPRI, r3
 8009630:	f3bf 8f6f 	isb	sy
 8009634:	f3bf 8f4f 	dsb	sy
 8009638:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800963a:	bf00      	nop
 800963c:	e7fe      	b.n	800963c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800963e:	f001 fe09 	bl	800b254 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681a      	ldr	r2, [r3, #0]
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800964a:	68f9      	ldr	r1, [r7, #12]
 800964c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800964e:	fb01 f303 	mul.w	r3, r1, r3
 8009652:	441a      	add	r2, r3
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	2200      	movs	r2, #0
 800965c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681a      	ldr	r2, [r3, #0]
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681a      	ldr	r2, [r3, #0]
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800966e:	3b01      	subs	r3, #1
 8009670:	68f9      	ldr	r1, [r7, #12]
 8009672:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009674:	fb01 f303 	mul.w	r3, r1, r3
 8009678:	441a      	add	r2, r3
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	22ff      	movs	r2, #255	; 0xff
 8009682:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	22ff      	movs	r2, #255	; 0xff
 800968a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d114      	bne.n	80096be <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	691b      	ldr	r3, [r3, #16]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d01a      	beq.n	80096d2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	3310      	adds	r3, #16
 80096a0:	4618      	mov	r0, r3
 80096a2:	f001 f8ef 	bl	800a884 <xTaskRemoveFromEventList>
 80096a6:	4603      	mov	r3, r0
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d012      	beq.n	80096d2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80096ac:	4b0c      	ldr	r3, [pc, #48]	; (80096e0 <xQueueGenericReset+0xcc>)
 80096ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096b2:	601a      	str	r2, [r3, #0]
 80096b4:	f3bf 8f4f 	dsb	sy
 80096b8:	f3bf 8f6f 	isb	sy
 80096bc:	e009      	b.n	80096d2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	3310      	adds	r3, #16
 80096c2:	4618      	mov	r0, r3
 80096c4:	f7ff fef2 	bl	80094ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	3324      	adds	r3, #36	; 0x24
 80096cc:	4618      	mov	r0, r3
 80096ce:	f7ff feed 	bl	80094ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80096d2:	f001 fdef 	bl	800b2b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80096d6:	2301      	movs	r3, #1
}
 80096d8:	4618      	mov	r0, r3
 80096da:	3710      	adds	r7, #16
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}
 80096e0:	e000ed04 	.word	0xe000ed04

080096e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b08e      	sub	sp, #56	; 0x38
 80096e8:	af02      	add	r7, sp, #8
 80096ea:	60f8      	str	r0, [r7, #12]
 80096ec:	60b9      	str	r1, [r7, #8]
 80096ee:	607a      	str	r2, [r7, #4]
 80096f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d10a      	bne.n	800970e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80096f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096fc:	f383 8811 	msr	BASEPRI, r3
 8009700:	f3bf 8f6f 	isb	sy
 8009704:	f3bf 8f4f 	dsb	sy
 8009708:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800970a:	bf00      	nop
 800970c:	e7fe      	b.n	800970c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d10a      	bne.n	800972a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009718:	f383 8811 	msr	BASEPRI, r3
 800971c:	f3bf 8f6f 	isb	sy
 8009720:	f3bf 8f4f 	dsb	sy
 8009724:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009726:	bf00      	nop
 8009728:	e7fe      	b.n	8009728 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d002      	beq.n	8009736 <xQueueGenericCreateStatic+0x52>
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d001      	beq.n	800973a <xQueueGenericCreateStatic+0x56>
 8009736:	2301      	movs	r3, #1
 8009738:	e000      	b.n	800973c <xQueueGenericCreateStatic+0x58>
 800973a:	2300      	movs	r3, #0
 800973c:	2b00      	cmp	r3, #0
 800973e:	d10a      	bne.n	8009756 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009744:	f383 8811 	msr	BASEPRI, r3
 8009748:	f3bf 8f6f 	isb	sy
 800974c:	f3bf 8f4f 	dsb	sy
 8009750:	623b      	str	r3, [r7, #32]
}
 8009752:	bf00      	nop
 8009754:	e7fe      	b.n	8009754 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d102      	bne.n	8009762 <xQueueGenericCreateStatic+0x7e>
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d101      	bne.n	8009766 <xQueueGenericCreateStatic+0x82>
 8009762:	2301      	movs	r3, #1
 8009764:	e000      	b.n	8009768 <xQueueGenericCreateStatic+0x84>
 8009766:	2300      	movs	r3, #0
 8009768:	2b00      	cmp	r3, #0
 800976a:	d10a      	bne.n	8009782 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800976c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009770:	f383 8811 	msr	BASEPRI, r3
 8009774:	f3bf 8f6f 	isb	sy
 8009778:	f3bf 8f4f 	dsb	sy
 800977c:	61fb      	str	r3, [r7, #28]
}
 800977e:	bf00      	nop
 8009780:	e7fe      	b.n	8009780 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009782:	2348      	movs	r3, #72	; 0x48
 8009784:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	2b48      	cmp	r3, #72	; 0x48
 800978a:	d00a      	beq.n	80097a2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800978c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009790:	f383 8811 	msr	BASEPRI, r3
 8009794:	f3bf 8f6f 	isb	sy
 8009798:	f3bf 8f4f 	dsb	sy
 800979c:	61bb      	str	r3, [r7, #24]
}
 800979e:	bf00      	nop
 80097a0:	e7fe      	b.n	80097a0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80097a2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80097a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d009      	beq.n	80097c2 <xQueueGenericCreateStatic+0xde>
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80097ae:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80097b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097b4:	9300      	str	r3, [sp, #0]
 80097b6:	4613      	mov	r3, r2
 80097b8:	687a      	ldr	r2, [r7, #4]
 80097ba:	68b9      	ldr	r1, [r7, #8]
 80097bc:	68f8      	ldr	r0, [r7, #12]
 80097be:	f000 f805 	bl	80097cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80097c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3730      	adds	r7, #48	; 0x30
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}

080097cc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b084      	sub	sp, #16
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	60f8      	str	r0, [r7, #12]
 80097d4:	60b9      	str	r1, [r7, #8]
 80097d6:	607a      	str	r2, [r7, #4]
 80097d8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d103      	bne.n	80097e8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80097e0:	69bb      	ldr	r3, [r7, #24]
 80097e2:	69ba      	ldr	r2, [r7, #24]
 80097e4:	601a      	str	r2, [r3, #0]
 80097e6:	e002      	b.n	80097ee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80097e8:	69bb      	ldr	r3, [r7, #24]
 80097ea:	687a      	ldr	r2, [r7, #4]
 80097ec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80097ee:	69bb      	ldr	r3, [r7, #24]
 80097f0:	68fa      	ldr	r2, [r7, #12]
 80097f2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80097f4:	69bb      	ldr	r3, [r7, #24]
 80097f6:	68ba      	ldr	r2, [r7, #8]
 80097f8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80097fa:	2101      	movs	r1, #1
 80097fc:	69b8      	ldr	r0, [r7, #24]
 80097fe:	f7ff ff09 	bl	8009614 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009802:	bf00      	nop
 8009804:	3710      	adds	r7, #16
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}

0800980a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800980a:	b580      	push	{r7, lr}
 800980c:	b082      	sub	sp, #8
 800980e:	af00      	add	r7, sp, #0
 8009810:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d00e      	beq.n	8009836 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2200      	movs	r2, #0
 800981c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2200      	movs	r2, #0
 8009822:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2200      	movs	r2, #0
 8009828:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800982a:	2300      	movs	r3, #0
 800982c:	2200      	movs	r2, #0
 800982e:	2100      	movs	r1, #0
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f000 f81f 	bl	8009874 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009836:	bf00      	nop
 8009838:	3708      	adds	r7, #8
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}

0800983e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800983e:	b580      	push	{r7, lr}
 8009840:	b088      	sub	sp, #32
 8009842:	af02      	add	r7, sp, #8
 8009844:	4603      	mov	r3, r0
 8009846:	6039      	str	r1, [r7, #0]
 8009848:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800984a:	2301      	movs	r3, #1
 800984c:	617b      	str	r3, [r7, #20]
 800984e:	2300      	movs	r3, #0
 8009850:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009852:	79fb      	ldrb	r3, [r7, #7]
 8009854:	9300      	str	r3, [sp, #0]
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	2200      	movs	r2, #0
 800985a:	6939      	ldr	r1, [r7, #16]
 800985c:	6978      	ldr	r0, [r7, #20]
 800985e:	f7ff ff41 	bl	80096e4 <xQueueGenericCreateStatic>
 8009862:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009864:	68f8      	ldr	r0, [r7, #12]
 8009866:	f7ff ffd0 	bl	800980a <prvInitialiseMutex>

		return xNewQueue;
 800986a:	68fb      	ldr	r3, [r7, #12]
	}
 800986c:	4618      	mov	r0, r3
 800986e:	3718      	adds	r7, #24
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}

08009874 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b08e      	sub	sp, #56	; 0x38
 8009878:	af00      	add	r7, sp, #0
 800987a:	60f8      	str	r0, [r7, #12]
 800987c:	60b9      	str	r1, [r7, #8]
 800987e:	607a      	str	r2, [r7, #4]
 8009880:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009882:	2300      	movs	r3, #0
 8009884:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800988a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800988c:	2b00      	cmp	r3, #0
 800988e:	d10a      	bne.n	80098a6 <xQueueGenericSend+0x32>
	__asm volatile
 8009890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009894:	f383 8811 	msr	BASEPRI, r3
 8009898:	f3bf 8f6f 	isb	sy
 800989c:	f3bf 8f4f 	dsb	sy
 80098a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80098a2:	bf00      	nop
 80098a4:	e7fe      	b.n	80098a4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d103      	bne.n	80098b4 <xQueueGenericSend+0x40>
 80098ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d101      	bne.n	80098b8 <xQueueGenericSend+0x44>
 80098b4:	2301      	movs	r3, #1
 80098b6:	e000      	b.n	80098ba <xQueueGenericSend+0x46>
 80098b8:	2300      	movs	r3, #0
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d10a      	bne.n	80098d4 <xQueueGenericSend+0x60>
	__asm volatile
 80098be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098c2:	f383 8811 	msr	BASEPRI, r3
 80098c6:	f3bf 8f6f 	isb	sy
 80098ca:	f3bf 8f4f 	dsb	sy
 80098ce:	627b      	str	r3, [r7, #36]	; 0x24
}
 80098d0:	bf00      	nop
 80098d2:	e7fe      	b.n	80098d2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	2b02      	cmp	r3, #2
 80098d8:	d103      	bne.n	80098e2 <xQueueGenericSend+0x6e>
 80098da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098de:	2b01      	cmp	r3, #1
 80098e0:	d101      	bne.n	80098e6 <xQueueGenericSend+0x72>
 80098e2:	2301      	movs	r3, #1
 80098e4:	e000      	b.n	80098e8 <xQueueGenericSend+0x74>
 80098e6:	2300      	movs	r3, #0
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d10a      	bne.n	8009902 <xQueueGenericSend+0x8e>
	__asm volatile
 80098ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f0:	f383 8811 	msr	BASEPRI, r3
 80098f4:	f3bf 8f6f 	isb	sy
 80098f8:	f3bf 8f4f 	dsb	sy
 80098fc:	623b      	str	r3, [r7, #32]
}
 80098fe:	bf00      	nop
 8009900:	e7fe      	b.n	8009900 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009902:	f001 f955 	bl	800abb0 <xTaskGetSchedulerState>
 8009906:	4603      	mov	r3, r0
 8009908:	2b00      	cmp	r3, #0
 800990a:	d102      	bne.n	8009912 <xQueueGenericSend+0x9e>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d101      	bne.n	8009916 <xQueueGenericSend+0xa2>
 8009912:	2301      	movs	r3, #1
 8009914:	e000      	b.n	8009918 <xQueueGenericSend+0xa4>
 8009916:	2300      	movs	r3, #0
 8009918:	2b00      	cmp	r3, #0
 800991a:	d10a      	bne.n	8009932 <xQueueGenericSend+0xbe>
	__asm volatile
 800991c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009920:	f383 8811 	msr	BASEPRI, r3
 8009924:	f3bf 8f6f 	isb	sy
 8009928:	f3bf 8f4f 	dsb	sy
 800992c:	61fb      	str	r3, [r7, #28]
}
 800992e:	bf00      	nop
 8009930:	e7fe      	b.n	8009930 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009932:	f001 fc8f 	bl	800b254 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009938:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800993a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800993c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800993e:	429a      	cmp	r2, r3
 8009940:	d302      	bcc.n	8009948 <xQueueGenericSend+0xd4>
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	2b02      	cmp	r3, #2
 8009946:	d129      	bne.n	800999c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009948:	683a      	ldr	r2, [r7, #0]
 800994a:	68b9      	ldr	r1, [r7, #8]
 800994c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800994e:	f000 fa41 	bl	8009dd4 <prvCopyDataToQueue>
 8009952:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009958:	2b00      	cmp	r3, #0
 800995a:	d010      	beq.n	800997e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800995c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800995e:	3324      	adds	r3, #36	; 0x24
 8009960:	4618      	mov	r0, r3
 8009962:	f000 ff8f 	bl	800a884 <xTaskRemoveFromEventList>
 8009966:	4603      	mov	r3, r0
 8009968:	2b00      	cmp	r3, #0
 800996a:	d013      	beq.n	8009994 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800996c:	4b3f      	ldr	r3, [pc, #252]	; (8009a6c <xQueueGenericSend+0x1f8>)
 800996e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009972:	601a      	str	r2, [r3, #0]
 8009974:	f3bf 8f4f 	dsb	sy
 8009978:	f3bf 8f6f 	isb	sy
 800997c:	e00a      	b.n	8009994 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800997e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009980:	2b00      	cmp	r3, #0
 8009982:	d007      	beq.n	8009994 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009984:	4b39      	ldr	r3, [pc, #228]	; (8009a6c <xQueueGenericSend+0x1f8>)
 8009986:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800998a:	601a      	str	r2, [r3, #0]
 800998c:	f3bf 8f4f 	dsb	sy
 8009990:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009994:	f001 fc8e 	bl	800b2b4 <vPortExitCritical>
				return pdPASS;
 8009998:	2301      	movs	r3, #1
 800999a:	e063      	b.n	8009a64 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d103      	bne.n	80099aa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80099a2:	f001 fc87 	bl	800b2b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80099a6:	2300      	movs	r3, #0
 80099a8:	e05c      	b.n	8009a64 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80099aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d106      	bne.n	80099be <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80099b0:	f107 0314 	add.w	r3, r7, #20
 80099b4:	4618      	mov	r0, r3
 80099b6:	f000 ffc7 	bl	800a948 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80099ba:	2301      	movs	r3, #1
 80099bc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80099be:	f001 fc79 	bl	800b2b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80099c2:	f000 fd53 	bl	800a46c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80099c6:	f001 fc45 	bl	800b254 <vPortEnterCritical>
 80099ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80099d0:	b25b      	sxtb	r3, r3
 80099d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80099d6:	d103      	bne.n	80099e0 <xQueueGenericSend+0x16c>
 80099d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099da:	2200      	movs	r2, #0
 80099dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80099e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80099e6:	b25b      	sxtb	r3, r3
 80099e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80099ec:	d103      	bne.n	80099f6 <xQueueGenericSend+0x182>
 80099ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f0:	2200      	movs	r2, #0
 80099f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80099f6:	f001 fc5d 	bl	800b2b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80099fa:	1d3a      	adds	r2, r7, #4
 80099fc:	f107 0314 	add.w	r3, r7, #20
 8009a00:	4611      	mov	r1, r2
 8009a02:	4618      	mov	r0, r3
 8009a04:	f000 ffb6 	bl	800a974 <xTaskCheckForTimeOut>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d124      	bne.n	8009a58 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009a0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009a10:	f000 fab2 	bl	8009f78 <prvIsQueueFull>
 8009a14:	4603      	mov	r3, r0
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d018      	beq.n	8009a4c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a1c:	3310      	adds	r3, #16
 8009a1e:	687a      	ldr	r2, [r7, #4]
 8009a20:	4611      	mov	r1, r2
 8009a22:	4618      	mov	r0, r3
 8009a24:	f000 ff0a 	bl	800a83c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009a28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009a2a:	f000 fa3d 	bl	8009ea8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009a2e:	f000 fd2b 	bl	800a488 <xTaskResumeAll>
 8009a32:	4603      	mov	r3, r0
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	f47f af7c 	bne.w	8009932 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009a3a:	4b0c      	ldr	r3, [pc, #48]	; (8009a6c <xQueueGenericSend+0x1f8>)
 8009a3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a40:	601a      	str	r2, [r3, #0]
 8009a42:	f3bf 8f4f 	dsb	sy
 8009a46:	f3bf 8f6f 	isb	sy
 8009a4a:	e772      	b.n	8009932 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009a4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009a4e:	f000 fa2b 	bl	8009ea8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009a52:	f000 fd19 	bl	800a488 <xTaskResumeAll>
 8009a56:	e76c      	b.n	8009932 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009a58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009a5a:	f000 fa25 	bl	8009ea8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009a5e:	f000 fd13 	bl	800a488 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009a62:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	3738      	adds	r7, #56	; 0x38
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}
 8009a6c:	e000ed04 	.word	0xe000ed04

08009a70 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b08e      	sub	sp, #56	; 0x38
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
 8009a78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d10a      	bne.n	8009a9a <xQueueGiveFromISR+0x2a>
	__asm volatile
 8009a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a88:	f383 8811 	msr	BASEPRI, r3
 8009a8c:	f3bf 8f6f 	isb	sy
 8009a90:	f3bf 8f4f 	dsb	sy
 8009a94:	623b      	str	r3, [r7, #32]
}
 8009a96:	bf00      	nop
 8009a98:	e7fe      	b.n	8009a98 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d00a      	beq.n	8009ab8 <xQueueGiveFromISR+0x48>
	__asm volatile
 8009aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa6:	f383 8811 	msr	BASEPRI, r3
 8009aaa:	f3bf 8f6f 	isb	sy
 8009aae:	f3bf 8f4f 	dsb	sy
 8009ab2:	61fb      	str	r3, [r7, #28]
}
 8009ab4:	bf00      	nop
 8009ab6:	e7fe      	b.n	8009ab6 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d103      	bne.n	8009ac8 <xQueueGiveFromISR+0x58>
 8009ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ac2:	689b      	ldr	r3, [r3, #8]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d101      	bne.n	8009acc <xQueueGiveFromISR+0x5c>
 8009ac8:	2301      	movs	r3, #1
 8009aca:	e000      	b.n	8009ace <xQueueGiveFromISR+0x5e>
 8009acc:	2300      	movs	r3, #0
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d10a      	bne.n	8009ae8 <xQueueGiveFromISR+0x78>
	__asm volatile
 8009ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad6:	f383 8811 	msr	BASEPRI, r3
 8009ada:	f3bf 8f6f 	isb	sy
 8009ade:	f3bf 8f4f 	dsb	sy
 8009ae2:	61bb      	str	r3, [r7, #24]
}
 8009ae4:	bf00      	nop
 8009ae6:	e7fe      	b.n	8009ae6 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009ae8:	f001 fc96 	bl	800b418 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009aec:	f3ef 8211 	mrs	r2, BASEPRI
 8009af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af4:	f383 8811 	msr	BASEPRI, r3
 8009af8:	f3bf 8f6f 	isb	sy
 8009afc:	f3bf 8f4f 	dsb	sy
 8009b00:	617a      	str	r2, [r7, #20]
 8009b02:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009b04:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009b06:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b0c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b14:	429a      	cmp	r2, r3
 8009b16:	d22b      	bcs.n	8009b70 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b24:	1c5a      	adds	r2, r3, #1
 8009b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b28:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009b2a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009b2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b32:	d112      	bne.n	8009b5a <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d016      	beq.n	8009b6a <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b3e:	3324      	adds	r3, #36	; 0x24
 8009b40:	4618      	mov	r0, r3
 8009b42:	f000 fe9f 	bl	800a884 <xTaskRemoveFromEventList>
 8009b46:	4603      	mov	r3, r0
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d00e      	beq.n	8009b6a <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d00b      	beq.n	8009b6a <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	2201      	movs	r2, #1
 8009b56:	601a      	str	r2, [r3, #0]
 8009b58:	e007      	b.n	8009b6a <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009b5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b5e:	3301      	adds	r3, #1
 8009b60:	b2db      	uxtb	r3, r3
 8009b62:	b25a      	sxtb	r2, r3
 8009b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	637b      	str	r3, [r7, #52]	; 0x34
 8009b6e:	e001      	b.n	8009b74 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009b70:	2300      	movs	r3, #0
 8009b72:	637b      	str	r3, [r7, #52]	; 0x34
 8009b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b76:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009b7e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	3738      	adds	r7, #56	; 0x38
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}
	...

08009b8c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b08e      	sub	sp, #56	; 0x38
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
 8009b94:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009b96:	2300      	movs	r3, #0
 8009b98:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d10a      	bne.n	8009bbe <xQueueSemaphoreTake+0x32>
	__asm volatile
 8009ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bac:	f383 8811 	msr	BASEPRI, r3
 8009bb0:	f3bf 8f6f 	isb	sy
 8009bb4:	f3bf 8f4f 	dsb	sy
 8009bb8:	623b      	str	r3, [r7, #32]
}
 8009bba:	bf00      	nop
 8009bbc:	e7fe      	b.n	8009bbc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d00a      	beq.n	8009bdc <xQueueSemaphoreTake+0x50>
	__asm volatile
 8009bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bca:	f383 8811 	msr	BASEPRI, r3
 8009bce:	f3bf 8f6f 	isb	sy
 8009bd2:	f3bf 8f4f 	dsb	sy
 8009bd6:	61fb      	str	r3, [r7, #28]
}
 8009bd8:	bf00      	nop
 8009bda:	e7fe      	b.n	8009bda <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009bdc:	f000 ffe8 	bl	800abb0 <xTaskGetSchedulerState>
 8009be0:	4603      	mov	r3, r0
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d102      	bne.n	8009bec <xQueueSemaphoreTake+0x60>
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d101      	bne.n	8009bf0 <xQueueSemaphoreTake+0x64>
 8009bec:	2301      	movs	r3, #1
 8009bee:	e000      	b.n	8009bf2 <xQueueSemaphoreTake+0x66>
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d10a      	bne.n	8009c0c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8009bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bfa:	f383 8811 	msr	BASEPRI, r3
 8009bfe:	f3bf 8f6f 	isb	sy
 8009c02:	f3bf 8f4f 	dsb	sy
 8009c06:	61bb      	str	r3, [r7, #24]
}
 8009c08:	bf00      	nop
 8009c0a:	e7fe      	b.n	8009c0a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009c0c:	f001 fb22 	bl	800b254 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c14:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d024      	beq.n	8009c66 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c1e:	1e5a      	subs	r2, r3, #1
 8009c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c22:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d104      	bne.n	8009c36 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009c2c:	f001 f968 	bl	800af00 <pvTaskIncrementMutexHeldCount>
 8009c30:	4602      	mov	r2, r0
 8009c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c34:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c38:	691b      	ldr	r3, [r3, #16]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d00f      	beq.n	8009c5e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c40:	3310      	adds	r3, #16
 8009c42:	4618      	mov	r0, r3
 8009c44:	f000 fe1e 	bl	800a884 <xTaskRemoveFromEventList>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d007      	beq.n	8009c5e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009c4e:	4b54      	ldr	r3, [pc, #336]	; (8009da0 <xQueueSemaphoreTake+0x214>)
 8009c50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c54:	601a      	str	r2, [r3, #0]
 8009c56:	f3bf 8f4f 	dsb	sy
 8009c5a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009c5e:	f001 fb29 	bl	800b2b4 <vPortExitCritical>
				return pdPASS;
 8009c62:	2301      	movs	r3, #1
 8009c64:	e097      	b.n	8009d96 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d111      	bne.n	8009c90 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d00a      	beq.n	8009c88 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8009c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c76:	f383 8811 	msr	BASEPRI, r3
 8009c7a:	f3bf 8f6f 	isb	sy
 8009c7e:	f3bf 8f4f 	dsb	sy
 8009c82:	617b      	str	r3, [r7, #20]
}
 8009c84:	bf00      	nop
 8009c86:	e7fe      	b.n	8009c86 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009c88:	f001 fb14 	bl	800b2b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	e082      	b.n	8009d96 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d106      	bne.n	8009ca4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009c96:	f107 030c 	add.w	r3, r7, #12
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f000 fe54 	bl	800a948 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009ca4:	f001 fb06 	bl	800b2b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009ca8:	f000 fbe0 	bl	800a46c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009cac:	f001 fad2 	bl	800b254 <vPortEnterCritical>
 8009cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009cb6:	b25b      	sxtb	r3, r3
 8009cb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009cbc:	d103      	bne.n	8009cc6 <xQueueSemaphoreTake+0x13a>
 8009cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009ccc:	b25b      	sxtb	r3, r3
 8009cce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009cd2:	d103      	bne.n	8009cdc <xQueueSemaphoreTake+0x150>
 8009cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009cdc:	f001 faea 	bl	800b2b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009ce0:	463a      	mov	r2, r7
 8009ce2:	f107 030c 	add.w	r3, r7, #12
 8009ce6:	4611      	mov	r1, r2
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f000 fe43 	bl	800a974 <xTaskCheckForTimeOut>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d132      	bne.n	8009d5a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009cf4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009cf6:	f000 f929 	bl	8009f4c <prvIsQueueEmpty>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d026      	beq.n	8009d4e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d109      	bne.n	8009d1c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8009d08:	f001 faa4 	bl	800b254 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d0e:	689b      	ldr	r3, [r3, #8]
 8009d10:	4618      	mov	r0, r3
 8009d12:	f000 ff6b 	bl	800abec <xTaskPriorityInherit>
 8009d16:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009d18:	f001 facc 	bl	800b2b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d1e:	3324      	adds	r3, #36	; 0x24
 8009d20:	683a      	ldr	r2, [r7, #0]
 8009d22:	4611      	mov	r1, r2
 8009d24:	4618      	mov	r0, r3
 8009d26:	f000 fd89 	bl	800a83c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009d2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d2c:	f000 f8bc 	bl	8009ea8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009d30:	f000 fbaa 	bl	800a488 <xTaskResumeAll>
 8009d34:	4603      	mov	r3, r0
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	f47f af68 	bne.w	8009c0c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8009d3c:	4b18      	ldr	r3, [pc, #96]	; (8009da0 <xQueueSemaphoreTake+0x214>)
 8009d3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d42:	601a      	str	r2, [r3, #0]
 8009d44:	f3bf 8f4f 	dsb	sy
 8009d48:	f3bf 8f6f 	isb	sy
 8009d4c:	e75e      	b.n	8009c0c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009d4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d50:	f000 f8aa 	bl	8009ea8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009d54:	f000 fb98 	bl	800a488 <xTaskResumeAll>
 8009d58:	e758      	b.n	8009c0c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009d5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d5c:	f000 f8a4 	bl	8009ea8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009d60:	f000 fb92 	bl	800a488 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009d64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d66:	f000 f8f1 	bl	8009f4c <prvIsQueueEmpty>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	f43f af4d 	beq.w	8009c0c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d00d      	beq.n	8009d94 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8009d78:	f001 fa6c 	bl	800b254 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009d7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d7e:	f000 f811 	bl	8009da4 <prvGetDisinheritPriorityAfterTimeout>
 8009d82:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d86:	689b      	ldr	r3, [r3, #8]
 8009d88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f001 f82a 	bl	800ade4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009d90:	f001 fa90 	bl	800b2b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009d94:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3738      	adds	r7, #56	; 0x38
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}
 8009d9e:	bf00      	nop
 8009da0:	e000ed04 	.word	0xe000ed04

08009da4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009da4:	b480      	push	{r7}
 8009da6:	b085      	sub	sp, #20
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d006      	beq.n	8009dc2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f1c3 0307 	rsb	r3, r3, #7
 8009dbe:	60fb      	str	r3, [r7, #12]
 8009dc0:	e001      	b.n	8009dc6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
	}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	3714      	adds	r7, #20
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd2:	4770      	bx	lr

08009dd4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b086      	sub	sp, #24
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	60f8      	str	r0, [r7, #12]
 8009ddc:	60b9      	str	r1, [r7, #8]
 8009dde:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009de0:	2300      	movs	r3, #0
 8009de2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009de8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d10d      	bne.n	8009e0e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d14d      	bne.n	8009e96 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	689b      	ldr	r3, [r3, #8]
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f000 ff6a 	bl	800acd8 <xTaskPriorityDisinherit>
 8009e04:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	609a      	str	r2, [r3, #8]
 8009e0c:	e043      	b.n	8009e96 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d119      	bne.n	8009e48 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	6858      	ldr	r0, [r3, #4]
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e1c:	461a      	mov	r2, r3
 8009e1e:	68b9      	ldr	r1, [r7, #8]
 8009e20:	f001 fb5e 	bl	800b4e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	685a      	ldr	r2, [r3, #4]
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e2c:	441a      	add	r2, r3
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	685a      	ldr	r2, [r3, #4]
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	689b      	ldr	r3, [r3, #8]
 8009e3a:	429a      	cmp	r2, r3
 8009e3c:	d32b      	bcc.n	8009e96 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681a      	ldr	r2, [r3, #0]
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	605a      	str	r2, [r3, #4]
 8009e46:	e026      	b.n	8009e96 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	68d8      	ldr	r0, [r3, #12]
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e50:	461a      	mov	r2, r3
 8009e52:	68b9      	ldr	r1, [r7, #8]
 8009e54:	f001 fb44 	bl	800b4e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	68da      	ldr	r2, [r3, #12]
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e60:	425b      	negs	r3, r3
 8009e62:	441a      	add	r2, r3
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	68da      	ldr	r2, [r3, #12]
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	429a      	cmp	r2, r3
 8009e72:	d207      	bcs.n	8009e84 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	689a      	ldr	r2, [r3, #8]
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e7c:	425b      	negs	r3, r3
 8009e7e:	441a      	add	r2, r3
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2b02      	cmp	r3, #2
 8009e88:	d105      	bne.n	8009e96 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009e8a:	693b      	ldr	r3, [r7, #16]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d002      	beq.n	8009e96 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	3b01      	subs	r3, #1
 8009e94:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009e96:	693b      	ldr	r3, [r7, #16]
 8009e98:	1c5a      	adds	r2, r3, #1
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009e9e:	697b      	ldr	r3, [r7, #20]
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3718      	adds	r7, #24
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b084      	sub	sp, #16
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009eb0:	f001 f9d0 	bl	800b254 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009eba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009ebc:	e011      	b.n	8009ee2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d012      	beq.n	8009eec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	3324      	adds	r3, #36	; 0x24
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f000 fcda 	bl	800a884 <xTaskRemoveFromEventList>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d001      	beq.n	8009eda <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009ed6:	f000 fdaf 	bl	800aa38 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009eda:	7bfb      	ldrb	r3, [r7, #15]
 8009edc:	3b01      	subs	r3, #1
 8009ede:	b2db      	uxtb	r3, r3
 8009ee0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	dce9      	bgt.n	8009ebe <prvUnlockQueue+0x16>
 8009eea:	e000      	b.n	8009eee <prvUnlockQueue+0x46>
					break;
 8009eec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	22ff      	movs	r2, #255	; 0xff
 8009ef2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009ef6:	f001 f9dd 	bl	800b2b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009efa:	f001 f9ab 	bl	800b254 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f04:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009f06:	e011      	b.n	8009f2c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	691b      	ldr	r3, [r3, #16]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d012      	beq.n	8009f36 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	3310      	adds	r3, #16
 8009f14:	4618      	mov	r0, r3
 8009f16:	f000 fcb5 	bl	800a884 <xTaskRemoveFromEventList>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d001      	beq.n	8009f24 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009f20:	f000 fd8a 	bl	800aa38 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009f24:	7bbb      	ldrb	r3, [r7, #14]
 8009f26:	3b01      	subs	r3, #1
 8009f28:	b2db      	uxtb	r3, r3
 8009f2a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009f2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	dce9      	bgt.n	8009f08 <prvUnlockQueue+0x60>
 8009f34:	e000      	b.n	8009f38 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009f36:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	22ff      	movs	r2, #255	; 0xff
 8009f3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009f40:	f001 f9b8 	bl	800b2b4 <vPortExitCritical>
}
 8009f44:	bf00      	nop
 8009f46:	3710      	adds	r7, #16
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bd80      	pop	{r7, pc}

08009f4c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b084      	sub	sp, #16
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009f54:	f001 f97e 	bl	800b254 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d102      	bne.n	8009f66 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009f60:	2301      	movs	r3, #1
 8009f62:	60fb      	str	r3, [r7, #12]
 8009f64:	e001      	b.n	8009f6a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009f66:	2300      	movs	r3, #0
 8009f68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009f6a:	f001 f9a3 	bl	800b2b4 <vPortExitCritical>

	return xReturn;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	3710      	adds	r7, #16
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}

08009f78 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b084      	sub	sp, #16
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009f80:	f001 f968 	bl	800b254 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f8c:	429a      	cmp	r2, r3
 8009f8e:	d102      	bne.n	8009f96 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009f90:	2301      	movs	r3, #1
 8009f92:	60fb      	str	r3, [r7, #12]
 8009f94:	e001      	b.n	8009f9a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009f96:	2300      	movs	r3, #0
 8009f98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009f9a:	f001 f98b 	bl	800b2b4 <vPortExitCritical>

	return xReturn;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3710      	adds	r7, #16
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}

08009fa8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b08e      	sub	sp, #56	; 0x38
 8009fac:	af04      	add	r7, sp, #16
 8009fae:	60f8      	str	r0, [r7, #12]
 8009fb0:	60b9      	str	r1, [r7, #8]
 8009fb2:	607a      	str	r2, [r7, #4]
 8009fb4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d10a      	bne.n	8009fd2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fc0:	f383 8811 	msr	BASEPRI, r3
 8009fc4:	f3bf 8f6f 	isb	sy
 8009fc8:	f3bf 8f4f 	dsb	sy
 8009fcc:	623b      	str	r3, [r7, #32]
}
 8009fce:	bf00      	nop
 8009fd0:	e7fe      	b.n	8009fd0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d10a      	bne.n	8009fee <xTaskCreateStatic+0x46>
	__asm volatile
 8009fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fdc:	f383 8811 	msr	BASEPRI, r3
 8009fe0:	f3bf 8f6f 	isb	sy
 8009fe4:	f3bf 8f4f 	dsb	sy
 8009fe8:	61fb      	str	r3, [r7, #28]
}
 8009fea:	bf00      	nop
 8009fec:	e7fe      	b.n	8009fec <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009fee:	2358      	movs	r3, #88	; 0x58
 8009ff0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	2b58      	cmp	r3, #88	; 0x58
 8009ff6:	d00a      	beq.n	800a00e <xTaskCreateStatic+0x66>
	__asm volatile
 8009ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ffc:	f383 8811 	msr	BASEPRI, r3
 800a000:	f3bf 8f6f 	isb	sy
 800a004:	f3bf 8f4f 	dsb	sy
 800a008:	61bb      	str	r3, [r7, #24]
}
 800a00a:	bf00      	nop
 800a00c:	e7fe      	b.n	800a00c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a00e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a012:	2b00      	cmp	r3, #0
 800a014:	d01a      	beq.n	800a04c <xTaskCreateStatic+0xa4>
 800a016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d017      	beq.n	800a04c <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a01c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a01e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a022:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a024:	631a      	str	r2, [r3, #48]	; 0x30
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a026:	2300      	movs	r3, #0
 800a028:	9303      	str	r3, [sp, #12]
 800a02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a02c:	9302      	str	r3, [sp, #8]
 800a02e:	f107 0314 	add.w	r3, r7, #20
 800a032:	9301      	str	r3, [sp, #4]
 800a034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a036:	9300      	str	r3, [sp, #0]
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	687a      	ldr	r2, [r7, #4]
 800a03c:	68b9      	ldr	r1, [r7, #8]
 800a03e:	68f8      	ldr	r0, [r7, #12]
 800a040:	f000 f80b 	bl	800a05a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a044:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a046:	f000 f893 	bl	800a170 <prvAddNewTaskToReadyList>
 800a04a:	e001      	b.n	800a050 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800a04c:	2300      	movs	r3, #0
 800a04e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a050:	697b      	ldr	r3, [r7, #20]
	}
 800a052:	4618      	mov	r0, r3
 800a054:	3728      	adds	r7, #40	; 0x28
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}

0800a05a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a05a:	b580      	push	{r7, lr}
 800a05c:	b088      	sub	sp, #32
 800a05e:	af00      	add	r7, sp, #0
 800a060:	60f8      	str	r0, [r7, #12]
 800a062:	60b9      	str	r1, [r7, #8]
 800a064:	607a      	str	r2, [r7, #4]
 800a066:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a06a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a072:	3b01      	subs	r3, #1
 800a074:	009b      	lsls	r3, r3, #2
 800a076:	4413      	add	r3, r2
 800a078:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a07a:	69bb      	ldr	r3, [r7, #24]
 800a07c:	f023 0307 	bic.w	r3, r3, #7
 800a080:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a082:	69bb      	ldr	r3, [r7, #24]
 800a084:	f003 0307 	and.w	r3, r3, #7
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d00a      	beq.n	800a0a2 <prvInitialiseNewTask+0x48>
	__asm volatile
 800a08c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a090:	f383 8811 	msr	BASEPRI, r3
 800a094:	f3bf 8f6f 	isb	sy
 800a098:	f3bf 8f4f 	dsb	sy
 800a09c:	617b      	str	r3, [r7, #20]
}
 800a09e:	bf00      	nop
 800a0a0:	e7fe      	b.n	800a0a0 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d01f      	beq.n	800a0e8 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	61fb      	str	r3, [r7, #28]
 800a0ac:	e012      	b.n	800a0d4 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a0ae:	68ba      	ldr	r2, [r7, #8]
 800a0b0:	69fb      	ldr	r3, [r7, #28]
 800a0b2:	4413      	add	r3, r2
 800a0b4:	7819      	ldrb	r1, [r3, #0]
 800a0b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0b8:	69fb      	ldr	r3, [r7, #28]
 800a0ba:	4413      	add	r3, r2
 800a0bc:	3334      	adds	r3, #52	; 0x34
 800a0be:	460a      	mov	r2, r1
 800a0c0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a0c2:	68ba      	ldr	r2, [r7, #8]
 800a0c4:	69fb      	ldr	r3, [r7, #28]
 800a0c6:	4413      	add	r3, r2
 800a0c8:	781b      	ldrb	r3, [r3, #0]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d006      	beq.n	800a0dc <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a0ce:	69fb      	ldr	r3, [r7, #28]
 800a0d0:	3301      	adds	r3, #1
 800a0d2:	61fb      	str	r3, [r7, #28]
 800a0d4:	69fb      	ldr	r3, [r7, #28]
 800a0d6:	2b0f      	cmp	r3, #15
 800a0d8:	d9e9      	bls.n	800a0ae <prvInitialiseNewTask+0x54>
 800a0da:	e000      	b.n	800a0de <prvInitialiseNewTask+0x84>
			{
				break;
 800a0dc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a0de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a0e6:	e003      	b.n	800a0f0 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0f2:	2b06      	cmp	r3, #6
 800a0f4:	d901      	bls.n	800a0fa <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a0f6:	2306      	movs	r3, #6
 800a0f8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a0fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0fe:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a102:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a104:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a108:	2200      	movs	r2, #0
 800a10a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a10c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a10e:	3304      	adds	r3, #4
 800a110:	4618      	mov	r0, r3
 800a112:	f7ff f9eb 	bl	80094ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a118:	3318      	adds	r3, #24
 800a11a:	4618      	mov	r0, r3
 800a11c:	f7ff f9e6 	bl	80094ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a122:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a124:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a128:	f1c3 0207 	rsb	r2, r3, #7
 800a12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a12e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a132:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a134:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800a136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a138:	2200      	movs	r2, #0
 800a13a:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a13c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a13e:	2200      	movs	r2, #0
 800a140:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a144:	2200      	movs	r2, #0
 800a146:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a14a:	683a      	ldr	r2, [r7, #0]
 800a14c:	68f9      	ldr	r1, [r7, #12]
 800a14e:	69b8      	ldr	r0, [r7, #24]
 800a150:	f000 ff50 	bl	800aff4 <pxPortInitialiseStack>
 800a154:	4602      	mov	r2, r0
 800a156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a158:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a15a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d002      	beq.n	800a166 <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a162:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a164:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a166:	bf00      	nop
 800a168:	3720      	adds	r7, #32
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}
	...

0800a170 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b082      	sub	sp, #8
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a178:	f001 f86c 	bl	800b254 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a17c:	4b2a      	ldr	r3, [pc, #168]	; (800a228 <prvAddNewTaskToReadyList+0xb8>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	3301      	adds	r3, #1
 800a182:	4a29      	ldr	r2, [pc, #164]	; (800a228 <prvAddNewTaskToReadyList+0xb8>)
 800a184:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a186:	4b29      	ldr	r3, [pc, #164]	; (800a22c <prvAddNewTaskToReadyList+0xbc>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d109      	bne.n	800a1a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a18e:	4a27      	ldr	r2, [pc, #156]	; (800a22c <prvAddNewTaskToReadyList+0xbc>)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a194:	4b24      	ldr	r3, [pc, #144]	; (800a228 <prvAddNewTaskToReadyList+0xb8>)
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	2b01      	cmp	r3, #1
 800a19a:	d110      	bne.n	800a1be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a19c:	f000 fc70 	bl	800aa80 <prvInitialiseTaskLists>
 800a1a0:	e00d      	b.n	800a1be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a1a2:	4b23      	ldr	r3, [pc, #140]	; (800a230 <prvAddNewTaskToReadyList+0xc0>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d109      	bne.n	800a1be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a1aa:	4b20      	ldr	r3, [pc, #128]	; (800a22c <prvAddNewTaskToReadyList+0xbc>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	d802      	bhi.n	800a1be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a1b8:	4a1c      	ldr	r2, [pc, #112]	; (800a22c <prvAddNewTaskToReadyList+0xbc>)
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a1be:	4b1d      	ldr	r3, [pc, #116]	; (800a234 <prvAddNewTaskToReadyList+0xc4>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	3301      	adds	r3, #1
 800a1c4:	4a1b      	ldr	r2, [pc, #108]	; (800a234 <prvAddNewTaskToReadyList+0xc4>)
 800a1c6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1cc:	2201      	movs	r2, #1
 800a1ce:	409a      	lsls	r2, r3
 800a1d0:	4b19      	ldr	r3, [pc, #100]	; (800a238 <prvAddNewTaskToReadyList+0xc8>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	4313      	orrs	r3, r2
 800a1d6:	4a18      	ldr	r2, [pc, #96]	; (800a238 <prvAddNewTaskToReadyList+0xc8>)
 800a1d8:	6013      	str	r3, [r2, #0]
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1de:	4613      	mov	r3, r2
 800a1e0:	009b      	lsls	r3, r3, #2
 800a1e2:	4413      	add	r3, r2
 800a1e4:	009b      	lsls	r3, r3, #2
 800a1e6:	4a15      	ldr	r2, [pc, #84]	; (800a23c <prvAddNewTaskToReadyList+0xcc>)
 800a1e8:	441a      	add	r2, r3
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	3304      	adds	r3, #4
 800a1ee:	4619      	mov	r1, r3
 800a1f0:	4610      	mov	r0, r2
 800a1f2:	f7ff f988 	bl	8009506 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a1f6:	f001 f85d 	bl	800b2b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a1fa:	4b0d      	ldr	r3, [pc, #52]	; (800a230 <prvAddNewTaskToReadyList+0xc0>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d00e      	beq.n	800a220 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a202:	4b0a      	ldr	r3, [pc, #40]	; (800a22c <prvAddNewTaskToReadyList+0xbc>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a20c:	429a      	cmp	r2, r3
 800a20e:	d207      	bcs.n	800a220 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a210:	4b0b      	ldr	r3, [pc, #44]	; (800a240 <prvAddNewTaskToReadyList+0xd0>)
 800a212:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a216:	601a      	str	r2, [r3, #0]
 800a218:	f3bf 8f4f 	dsb	sy
 800a21c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a220:	bf00      	nop
 800a222:	3708      	adds	r7, #8
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}
 800a228:	20006414 	.word	0x20006414
 800a22c:	20006314 	.word	0x20006314
 800a230:	20006420 	.word	0x20006420
 800a234:	20006430 	.word	0x20006430
 800a238:	2000641c 	.word	0x2000641c
 800a23c:	20006318 	.word	0x20006318
 800a240:	e000ed04 	.word	0xe000ed04

0800a244 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800a244:	b580      	push	{r7, lr}
 800a246:	b08a      	sub	sp, #40	; 0x28
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800a24e:	2300      	movs	r3, #0
 800a250:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d10a      	bne.n	800a26e <vTaskDelayUntil+0x2a>
	__asm volatile
 800a258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a25c:	f383 8811 	msr	BASEPRI, r3
 800a260:	f3bf 8f6f 	isb	sy
 800a264:	f3bf 8f4f 	dsb	sy
 800a268:	617b      	str	r3, [r7, #20]
}
 800a26a:	bf00      	nop
 800a26c:	e7fe      	b.n	800a26c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d10a      	bne.n	800a28a <vTaskDelayUntil+0x46>
	__asm volatile
 800a274:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a278:	f383 8811 	msr	BASEPRI, r3
 800a27c:	f3bf 8f6f 	isb	sy
 800a280:	f3bf 8f4f 	dsb	sy
 800a284:	613b      	str	r3, [r7, #16]
}
 800a286:	bf00      	nop
 800a288:	e7fe      	b.n	800a288 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800a28a:	4b2a      	ldr	r3, [pc, #168]	; (800a334 <vTaskDelayUntil+0xf0>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d00a      	beq.n	800a2a8 <vTaskDelayUntil+0x64>
	__asm volatile
 800a292:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a296:	f383 8811 	msr	BASEPRI, r3
 800a29a:	f3bf 8f6f 	isb	sy
 800a29e:	f3bf 8f4f 	dsb	sy
 800a2a2:	60fb      	str	r3, [r7, #12]
}
 800a2a4:	bf00      	nop
 800a2a6:	e7fe      	b.n	800a2a6 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800a2a8:	f000 f8e0 	bl	800a46c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800a2ac:	4b22      	ldr	r3, [pc, #136]	; (800a338 <vTaskDelayUntil+0xf4>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	683a      	ldr	r2, [r7, #0]
 800a2b8:	4413      	add	r3, r2
 800a2ba:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	6a3a      	ldr	r2, [r7, #32]
 800a2c2:	429a      	cmp	r2, r3
 800a2c4:	d20b      	bcs.n	800a2de <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	69fa      	ldr	r2, [r7, #28]
 800a2cc:	429a      	cmp	r2, r3
 800a2ce:	d211      	bcs.n	800a2f4 <vTaskDelayUntil+0xb0>
 800a2d0:	69fa      	ldr	r2, [r7, #28]
 800a2d2:	6a3b      	ldr	r3, [r7, #32]
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	d90d      	bls.n	800a2f4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800a2d8:	2301      	movs	r3, #1
 800a2da:	627b      	str	r3, [r7, #36]	; 0x24
 800a2dc:	e00a      	b.n	800a2f4 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	69fa      	ldr	r2, [r7, #28]
 800a2e4:	429a      	cmp	r2, r3
 800a2e6:	d303      	bcc.n	800a2f0 <vTaskDelayUntil+0xac>
 800a2e8:	69fa      	ldr	r2, [r7, #28]
 800a2ea:	6a3b      	ldr	r3, [r7, #32]
 800a2ec:	429a      	cmp	r2, r3
 800a2ee:	d901      	bls.n	800a2f4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	69fa      	ldr	r2, [r7, #28]
 800a2f8:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800a2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d006      	beq.n	800a30e <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800a300:	69fa      	ldr	r2, [r7, #28]
 800a302:	6a3b      	ldr	r3, [r7, #32]
 800a304:	1ad3      	subs	r3, r2, r3
 800a306:	2100      	movs	r1, #0
 800a308:	4618      	mov	r0, r3
 800a30a:	f000 fe0d 	bl	800af28 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800a30e:	f000 f8bb 	bl	800a488 <xTaskResumeAll>
 800a312:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a314:	69bb      	ldr	r3, [r7, #24]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d107      	bne.n	800a32a <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800a31a:	4b08      	ldr	r3, [pc, #32]	; (800a33c <vTaskDelayUntil+0xf8>)
 800a31c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a320:	601a      	str	r2, [r3, #0]
 800a322:	f3bf 8f4f 	dsb	sy
 800a326:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a32a:	bf00      	nop
 800a32c:	3728      	adds	r7, #40	; 0x28
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}
 800a332:	bf00      	nop
 800a334:	2000643c 	.word	0x2000643c
 800a338:	20006418 	.word	0x20006418
 800a33c:	e000ed04 	.word	0xe000ed04

0800a340 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a340:	b580      	push	{r7, lr}
 800a342:	b084      	sub	sp, #16
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a348:	2300      	movs	r3, #0
 800a34a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d017      	beq.n	800a382 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a352:	4b13      	ldr	r3, [pc, #76]	; (800a3a0 <vTaskDelay+0x60>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d00a      	beq.n	800a370 <vTaskDelay+0x30>
	__asm volatile
 800a35a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a35e:	f383 8811 	msr	BASEPRI, r3
 800a362:	f3bf 8f6f 	isb	sy
 800a366:	f3bf 8f4f 	dsb	sy
 800a36a:	60bb      	str	r3, [r7, #8]
}
 800a36c:	bf00      	nop
 800a36e:	e7fe      	b.n	800a36e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a370:	f000 f87c 	bl	800a46c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a374:	2100      	movs	r1, #0
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f000 fdd6 	bl	800af28 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a37c:	f000 f884 	bl	800a488 <xTaskResumeAll>
 800a380:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d107      	bne.n	800a398 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a388:	4b06      	ldr	r3, [pc, #24]	; (800a3a4 <vTaskDelay+0x64>)
 800a38a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a38e:	601a      	str	r2, [r3, #0]
 800a390:	f3bf 8f4f 	dsb	sy
 800a394:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a398:	bf00      	nop
 800a39a:	3710      	adds	r7, #16
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}
 800a3a0:	2000643c 	.word	0x2000643c
 800a3a4:	e000ed04 	.word	0xe000ed04

0800a3a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b08a      	sub	sp, #40	; 0x28
 800a3ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a3b6:	463a      	mov	r2, r7
 800a3b8:	1d39      	adds	r1, r7, #4
 800a3ba:	f107 0308 	add.w	r3, r7, #8
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f7f8 fc26 	bl	8002c10 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a3c4:	6839      	ldr	r1, [r7, #0]
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	68ba      	ldr	r2, [r7, #8]
 800a3ca:	9202      	str	r2, [sp, #8]
 800a3cc:	9301      	str	r3, [sp, #4]
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	9300      	str	r3, [sp, #0]
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	460a      	mov	r2, r1
 800a3d6:	491f      	ldr	r1, [pc, #124]	; (800a454 <vTaskStartScheduler+0xac>)
 800a3d8:	481f      	ldr	r0, [pc, #124]	; (800a458 <vTaskStartScheduler+0xb0>)
 800a3da:	f7ff fde5 	bl	8009fa8 <xTaskCreateStatic>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	4a1e      	ldr	r2, [pc, #120]	; (800a45c <vTaskStartScheduler+0xb4>)
 800a3e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a3e4:	4b1d      	ldr	r3, [pc, #116]	; (800a45c <vTaskStartScheduler+0xb4>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d002      	beq.n	800a3f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	617b      	str	r3, [r7, #20]
 800a3f0:	e001      	b.n	800a3f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	2b01      	cmp	r3, #1
 800a3fa:	d118      	bne.n	800a42e <vTaskStartScheduler+0x86>
	__asm volatile
 800a3fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a400:	f383 8811 	msr	BASEPRI, r3
 800a404:	f3bf 8f6f 	isb	sy
 800a408:	f3bf 8f4f 	dsb	sy
 800a40c:	613b      	str	r3, [r7, #16]
}
 800a40e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a410:	4b13      	ldr	r3, [pc, #76]	; (800a460 <vTaskStartScheduler+0xb8>)
 800a412:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a416:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a418:	4b12      	ldr	r3, [pc, #72]	; (800a464 <vTaskStartScheduler+0xbc>)
 800a41a:	2201      	movs	r2, #1
 800a41c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a41e:	4b12      	ldr	r3, [pc, #72]	; (800a468 <vTaskStartScheduler+0xc0>)
 800a420:	2200      	movs	r2, #0
 800a422:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800a424:	f7f8 fbdc 	bl	8002be0 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a428:	f000 fe72 	bl	800b110 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a42c:	e00e      	b.n	800a44c <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a42e:	697b      	ldr	r3, [r7, #20]
 800a430:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a434:	d10a      	bne.n	800a44c <vTaskStartScheduler+0xa4>
	__asm volatile
 800a436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a43a:	f383 8811 	msr	BASEPRI, r3
 800a43e:	f3bf 8f6f 	isb	sy
 800a442:	f3bf 8f4f 	dsb	sy
 800a446:	60fb      	str	r3, [r7, #12]
}
 800a448:	bf00      	nop
 800a44a:	e7fe      	b.n	800a44a <vTaskStartScheduler+0xa2>
}
 800a44c:	bf00      	nop
 800a44e:	3718      	adds	r7, #24
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}
 800a454:	0800b564 	.word	0x0800b564
 800a458:	0800aa51 	.word	0x0800aa51
 800a45c:	20006438 	.word	0x20006438
 800a460:	20006434 	.word	0x20006434
 800a464:	20006420 	.word	0x20006420
 800a468:	20006418 	.word	0x20006418

0800a46c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a46c:	b480      	push	{r7}
 800a46e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a470:	4b04      	ldr	r3, [pc, #16]	; (800a484 <vTaskSuspendAll+0x18>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	3301      	adds	r3, #1
 800a476:	4a03      	ldr	r2, [pc, #12]	; (800a484 <vTaskSuspendAll+0x18>)
 800a478:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a47a:	bf00      	nop
 800a47c:	46bd      	mov	sp, r7
 800a47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a482:	4770      	bx	lr
 800a484:	2000643c 	.word	0x2000643c

0800a488 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b084      	sub	sp, #16
 800a48c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a48e:	2300      	movs	r3, #0
 800a490:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a492:	2300      	movs	r3, #0
 800a494:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a496:	4b41      	ldr	r3, [pc, #260]	; (800a59c <xTaskResumeAll+0x114>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d10a      	bne.n	800a4b4 <xTaskResumeAll+0x2c>
	__asm volatile
 800a49e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4a2:	f383 8811 	msr	BASEPRI, r3
 800a4a6:	f3bf 8f6f 	isb	sy
 800a4aa:	f3bf 8f4f 	dsb	sy
 800a4ae:	603b      	str	r3, [r7, #0]
}
 800a4b0:	bf00      	nop
 800a4b2:	e7fe      	b.n	800a4b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a4b4:	f000 fece 	bl	800b254 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a4b8:	4b38      	ldr	r3, [pc, #224]	; (800a59c <xTaskResumeAll+0x114>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	3b01      	subs	r3, #1
 800a4be:	4a37      	ldr	r2, [pc, #220]	; (800a59c <xTaskResumeAll+0x114>)
 800a4c0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a4c2:	4b36      	ldr	r3, [pc, #216]	; (800a59c <xTaskResumeAll+0x114>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d161      	bne.n	800a58e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a4ca:	4b35      	ldr	r3, [pc, #212]	; (800a5a0 <xTaskResumeAll+0x118>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d05d      	beq.n	800a58e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a4d2:	e02e      	b.n	800a532 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4d4:	4b33      	ldr	r3, [pc, #204]	; (800a5a4 <xTaskResumeAll+0x11c>)
 800a4d6:	68db      	ldr	r3, [r3, #12]
 800a4d8:	68db      	ldr	r3, [r3, #12]
 800a4da:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	3318      	adds	r3, #24
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f7ff f86d 	bl	80095c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	3304      	adds	r3, #4
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f7ff f868 	bl	80095c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4f4:	2201      	movs	r2, #1
 800a4f6:	409a      	lsls	r2, r3
 800a4f8:	4b2b      	ldr	r3, [pc, #172]	; (800a5a8 <xTaskResumeAll+0x120>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	4313      	orrs	r3, r2
 800a4fe:	4a2a      	ldr	r2, [pc, #168]	; (800a5a8 <xTaskResumeAll+0x120>)
 800a500:	6013      	str	r3, [r2, #0]
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a506:	4613      	mov	r3, r2
 800a508:	009b      	lsls	r3, r3, #2
 800a50a:	4413      	add	r3, r2
 800a50c:	009b      	lsls	r3, r3, #2
 800a50e:	4a27      	ldr	r2, [pc, #156]	; (800a5ac <xTaskResumeAll+0x124>)
 800a510:	441a      	add	r2, r3
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	3304      	adds	r3, #4
 800a516:	4619      	mov	r1, r3
 800a518:	4610      	mov	r0, r2
 800a51a:	f7fe fff4 	bl	8009506 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a522:	4b23      	ldr	r3, [pc, #140]	; (800a5b0 <xTaskResumeAll+0x128>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a528:	429a      	cmp	r2, r3
 800a52a:	d302      	bcc.n	800a532 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800a52c:	4b21      	ldr	r3, [pc, #132]	; (800a5b4 <xTaskResumeAll+0x12c>)
 800a52e:	2201      	movs	r2, #1
 800a530:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a532:	4b1c      	ldr	r3, [pc, #112]	; (800a5a4 <xTaskResumeAll+0x11c>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d1cc      	bne.n	800a4d4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d001      	beq.n	800a544 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a540:	f000 fb16 	bl	800ab70 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a544:	4b1c      	ldr	r3, [pc, #112]	; (800a5b8 <xTaskResumeAll+0x130>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d010      	beq.n	800a572 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a550:	f000 f846 	bl	800a5e0 <xTaskIncrementTick>
 800a554:	4603      	mov	r3, r0
 800a556:	2b00      	cmp	r3, #0
 800a558:	d002      	beq.n	800a560 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800a55a:	4b16      	ldr	r3, [pc, #88]	; (800a5b4 <xTaskResumeAll+0x12c>)
 800a55c:	2201      	movs	r2, #1
 800a55e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	3b01      	subs	r3, #1
 800a564:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d1f1      	bne.n	800a550 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800a56c:	4b12      	ldr	r3, [pc, #72]	; (800a5b8 <xTaskResumeAll+0x130>)
 800a56e:	2200      	movs	r2, #0
 800a570:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a572:	4b10      	ldr	r3, [pc, #64]	; (800a5b4 <xTaskResumeAll+0x12c>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d009      	beq.n	800a58e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a57a:	2301      	movs	r3, #1
 800a57c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a57e:	4b0f      	ldr	r3, [pc, #60]	; (800a5bc <xTaskResumeAll+0x134>)
 800a580:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a584:	601a      	str	r2, [r3, #0]
 800a586:	f3bf 8f4f 	dsb	sy
 800a58a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a58e:	f000 fe91 	bl	800b2b4 <vPortExitCritical>

	return xAlreadyYielded;
 800a592:	68bb      	ldr	r3, [r7, #8]
}
 800a594:	4618      	mov	r0, r3
 800a596:	3710      	adds	r7, #16
 800a598:	46bd      	mov	sp, r7
 800a59a:	bd80      	pop	{r7, pc}
 800a59c:	2000643c 	.word	0x2000643c
 800a5a0:	20006414 	.word	0x20006414
 800a5a4:	200063d4 	.word	0x200063d4
 800a5a8:	2000641c 	.word	0x2000641c
 800a5ac:	20006318 	.word	0x20006318
 800a5b0:	20006314 	.word	0x20006314
 800a5b4:	20006428 	.word	0x20006428
 800a5b8:	20006424 	.word	0x20006424
 800a5bc:	e000ed04 	.word	0xe000ed04

0800a5c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a5c0:	b480      	push	{r7}
 800a5c2:	b083      	sub	sp, #12
 800a5c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a5c6:	4b05      	ldr	r3, [pc, #20]	; (800a5dc <xTaskGetTickCount+0x1c>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a5cc:	687b      	ldr	r3, [r7, #4]
}
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	370c      	adds	r7, #12
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d8:	4770      	bx	lr
 800a5da:	bf00      	nop
 800a5dc:	20006418 	.word	0x20006418

0800a5e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b086      	sub	sp, #24
 800a5e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a5ea:	4b4e      	ldr	r3, [pc, #312]	; (800a724 <xTaskIncrementTick+0x144>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	f040 808e 	bne.w	800a710 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a5f4:	4b4c      	ldr	r3, [pc, #304]	; (800a728 <xTaskIncrementTick+0x148>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	3301      	adds	r3, #1
 800a5fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a5fc:	4a4a      	ldr	r2, [pc, #296]	; (800a728 <xTaskIncrementTick+0x148>)
 800a5fe:	693b      	ldr	r3, [r7, #16]
 800a600:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a602:	693b      	ldr	r3, [r7, #16]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d120      	bne.n	800a64a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a608:	4b48      	ldr	r3, [pc, #288]	; (800a72c <xTaskIncrementTick+0x14c>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d00a      	beq.n	800a628 <xTaskIncrementTick+0x48>
	__asm volatile
 800a612:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a616:	f383 8811 	msr	BASEPRI, r3
 800a61a:	f3bf 8f6f 	isb	sy
 800a61e:	f3bf 8f4f 	dsb	sy
 800a622:	603b      	str	r3, [r7, #0]
}
 800a624:	bf00      	nop
 800a626:	e7fe      	b.n	800a626 <xTaskIncrementTick+0x46>
 800a628:	4b40      	ldr	r3, [pc, #256]	; (800a72c <xTaskIncrementTick+0x14c>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	60fb      	str	r3, [r7, #12]
 800a62e:	4b40      	ldr	r3, [pc, #256]	; (800a730 <xTaskIncrementTick+0x150>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	4a3e      	ldr	r2, [pc, #248]	; (800a72c <xTaskIncrementTick+0x14c>)
 800a634:	6013      	str	r3, [r2, #0]
 800a636:	4a3e      	ldr	r2, [pc, #248]	; (800a730 <xTaskIncrementTick+0x150>)
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	6013      	str	r3, [r2, #0]
 800a63c:	4b3d      	ldr	r3, [pc, #244]	; (800a734 <xTaskIncrementTick+0x154>)
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	3301      	adds	r3, #1
 800a642:	4a3c      	ldr	r2, [pc, #240]	; (800a734 <xTaskIncrementTick+0x154>)
 800a644:	6013      	str	r3, [r2, #0]
 800a646:	f000 fa93 	bl	800ab70 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a64a:	4b3b      	ldr	r3, [pc, #236]	; (800a738 <xTaskIncrementTick+0x158>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	693a      	ldr	r2, [r7, #16]
 800a650:	429a      	cmp	r2, r3
 800a652:	d348      	bcc.n	800a6e6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a654:	4b35      	ldr	r3, [pc, #212]	; (800a72c <xTaskIncrementTick+0x14c>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d104      	bne.n	800a668 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a65e:	4b36      	ldr	r3, [pc, #216]	; (800a738 <xTaskIncrementTick+0x158>)
 800a660:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a664:	601a      	str	r2, [r3, #0]
					break;
 800a666:	e03e      	b.n	800a6e6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a668:	4b30      	ldr	r3, [pc, #192]	; (800a72c <xTaskIncrementTick+0x14c>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	68db      	ldr	r3, [r3, #12]
 800a66e:	68db      	ldr	r3, [r3, #12]
 800a670:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	685b      	ldr	r3, [r3, #4]
 800a676:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a678:	693a      	ldr	r2, [r7, #16]
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	429a      	cmp	r2, r3
 800a67e:	d203      	bcs.n	800a688 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a680:	4a2d      	ldr	r2, [pc, #180]	; (800a738 <xTaskIncrementTick+0x158>)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a686:	e02e      	b.n	800a6e6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	3304      	adds	r3, #4
 800a68c:	4618      	mov	r0, r3
 800a68e:	f7fe ff97 	bl	80095c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a692:	68bb      	ldr	r3, [r7, #8]
 800a694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a696:	2b00      	cmp	r3, #0
 800a698:	d004      	beq.n	800a6a4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	3318      	adds	r3, #24
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f7fe ff8e 	bl	80095c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6a8:	2201      	movs	r2, #1
 800a6aa:	409a      	lsls	r2, r3
 800a6ac:	4b23      	ldr	r3, [pc, #140]	; (800a73c <xTaskIncrementTick+0x15c>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	4313      	orrs	r3, r2
 800a6b2:	4a22      	ldr	r2, [pc, #136]	; (800a73c <xTaskIncrementTick+0x15c>)
 800a6b4:	6013      	str	r3, [r2, #0]
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6ba:	4613      	mov	r3, r2
 800a6bc:	009b      	lsls	r3, r3, #2
 800a6be:	4413      	add	r3, r2
 800a6c0:	009b      	lsls	r3, r3, #2
 800a6c2:	4a1f      	ldr	r2, [pc, #124]	; (800a740 <xTaskIncrementTick+0x160>)
 800a6c4:	441a      	add	r2, r3
 800a6c6:	68bb      	ldr	r3, [r7, #8]
 800a6c8:	3304      	adds	r3, #4
 800a6ca:	4619      	mov	r1, r3
 800a6cc:	4610      	mov	r0, r2
 800a6ce:	f7fe ff1a 	bl	8009506 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6d6:	4b1b      	ldr	r3, [pc, #108]	; (800a744 <xTaskIncrementTick+0x164>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6dc:	429a      	cmp	r2, r3
 800a6de:	d3b9      	bcc.n	800a654 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a6e4:	e7b6      	b.n	800a654 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a6e6:	4b17      	ldr	r3, [pc, #92]	; (800a744 <xTaskIncrementTick+0x164>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6ec:	4914      	ldr	r1, [pc, #80]	; (800a740 <xTaskIncrementTick+0x160>)
 800a6ee:	4613      	mov	r3, r2
 800a6f0:	009b      	lsls	r3, r3, #2
 800a6f2:	4413      	add	r3, r2
 800a6f4:	009b      	lsls	r3, r3, #2
 800a6f6:	440b      	add	r3, r1
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	2b01      	cmp	r3, #1
 800a6fc:	d901      	bls.n	800a702 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800a6fe:	2301      	movs	r3, #1
 800a700:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a702:	4b11      	ldr	r3, [pc, #68]	; (800a748 <xTaskIncrementTick+0x168>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d007      	beq.n	800a71a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800a70a:	2301      	movs	r3, #1
 800a70c:	617b      	str	r3, [r7, #20]
 800a70e:	e004      	b.n	800a71a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a710:	4b0e      	ldr	r3, [pc, #56]	; (800a74c <xTaskIncrementTick+0x16c>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	3301      	adds	r3, #1
 800a716:	4a0d      	ldr	r2, [pc, #52]	; (800a74c <xTaskIncrementTick+0x16c>)
 800a718:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a71a:	697b      	ldr	r3, [r7, #20]
}
 800a71c:	4618      	mov	r0, r3
 800a71e:	3718      	adds	r7, #24
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}
 800a724:	2000643c 	.word	0x2000643c
 800a728:	20006418 	.word	0x20006418
 800a72c:	200063cc 	.word	0x200063cc
 800a730:	200063d0 	.word	0x200063d0
 800a734:	2000642c 	.word	0x2000642c
 800a738:	20006434 	.word	0x20006434
 800a73c:	2000641c 	.word	0x2000641c
 800a740:	20006318 	.word	0x20006318
 800a744:	20006314 	.word	0x20006314
 800a748:	20006428 	.word	0x20006428
 800a74c:	20006424 	.word	0x20006424

0800a750 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b086      	sub	sp, #24
 800a754:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a756:	4b32      	ldr	r3, [pc, #200]	; (800a820 <vTaskSwitchContext+0xd0>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d003      	beq.n	800a766 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a75e:	4b31      	ldr	r3, [pc, #196]	; (800a824 <vTaskSwitchContext+0xd4>)
 800a760:	2201      	movs	r2, #1
 800a762:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a764:	e058      	b.n	800a818 <vTaskSwitchContext+0xc8>
		xYieldPending = pdFALSE;
 800a766:	4b2f      	ldr	r3, [pc, #188]	; (800a824 <vTaskSwitchContext+0xd4>)
 800a768:	2200      	movs	r2, #0
 800a76a:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800a76c:	f7f8 fa44 	bl	8002bf8 <getRunTimeCounterValue>
 800a770:	4603      	mov	r3, r0
 800a772:	4a2d      	ldr	r2, [pc, #180]	; (800a828 <vTaskSwitchContext+0xd8>)
 800a774:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800a776:	4b2c      	ldr	r3, [pc, #176]	; (800a828 <vTaskSwitchContext+0xd8>)
 800a778:	681a      	ldr	r2, [r3, #0]
 800a77a:	4b2c      	ldr	r3, [pc, #176]	; (800a82c <vTaskSwitchContext+0xdc>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	429a      	cmp	r2, r3
 800a780:	d909      	bls.n	800a796 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800a782:	4b2b      	ldr	r3, [pc, #172]	; (800a830 <vTaskSwitchContext+0xe0>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a788:	4a27      	ldr	r2, [pc, #156]	; (800a828 <vTaskSwitchContext+0xd8>)
 800a78a:	6810      	ldr	r0, [r2, #0]
 800a78c:	4a27      	ldr	r2, [pc, #156]	; (800a82c <vTaskSwitchContext+0xdc>)
 800a78e:	6812      	ldr	r2, [r2, #0]
 800a790:	1a82      	subs	r2, r0, r2
 800a792:	440a      	add	r2, r1
 800a794:	64da      	str	r2, [r3, #76]	; 0x4c
			ulTaskSwitchedInTime = ulTotalRunTime;
 800a796:	4b24      	ldr	r3, [pc, #144]	; (800a828 <vTaskSwitchContext+0xd8>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	4a24      	ldr	r2, [pc, #144]	; (800a82c <vTaskSwitchContext+0xdc>)
 800a79c:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a79e:	4b25      	ldr	r3, [pc, #148]	; (800a834 <vTaskSwitchContext+0xe4>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	fab3 f383 	clz	r3, r3
 800a7aa:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a7ac:	7afb      	ldrb	r3, [r7, #11]
 800a7ae:	f1c3 031f 	rsb	r3, r3, #31
 800a7b2:	617b      	str	r3, [r7, #20]
 800a7b4:	4920      	ldr	r1, [pc, #128]	; (800a838 <vTaskSwitchContext+0xe8>)
 800a7b6:	697a      	ldr	r2, [r7, #20]
 800a7b8:	4613      	mov	r3, r2
 800a7ba:	009b      	lsls	r3, r3, #2
 800a7bc:	4413      	add	r3, r2
 800a7be:	009b      	lsls	r3, r3, #2
 800a7c0:	440b      	add	r3, r1
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d10a      	bne.n	800a7de <vTaskSwitchContext+0x8e>
	__asm volatile
 800a7c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7cc:	f383 8811 	msr	BASEPRI, r3
 800a7d0:	f3bf 8f6f 	isb	sy
 800a7d4:	f3bf 8f4f 	dsb	sy
 800a7d8:	607b      	str	r3, [r7, #4]
}
 800a7da:	bf00      	nop
 800a7dc:	e7fe      	b.n	800a7dc <vTaskSwitchContext+0x8c>
 800a7de:	697a      	ldr	r2, [r7, #20]
 800a7e0:	4613      	mov	r3, r2
 800a7e2:	009b      	lsls	r3, r3, #2
 800a7e4:	4413      	add	r3, r2
 800a7e6:	009b      	lsls	r3, r3, #2
 800a7e8:	4a13      	ldr	r2, [pc, #76]	; (800a838 <vTaskSwitchContext+0xe8>)
 800a7ea:	4413      	add	r3, r2
 800a7ec:	613b      	str	r3, [r7, #16]
 800a7ee:	693b      	ldr	r3, [r7, #16]
 800a7f0:	685b      	ldr	r3, [r3, #4]
 800a7f2:	685a      	ldr	r2, [r3, #4]
 800a7f4:	693b      	ldr	r3, [r7, #16]
 800a7f6:	605a      	str	r2, [r3, #4]
 800a7f8:	693b      	ldr	r3, [r7, #16]
 800a7fa:	685a      	ldr	r2, [r3, #4]
 800a7fc:	693b      	ldr	r3, [r7, #16]
 800a7fe:	3308      	adds	r3, #8
 800a800:	429a      	cmp	r2, r3
 800a802:	d104      	bne.n	800a80e <vTaskSwitchContext+0xbe>
 800a804:	693b      	ldr	r3, [r7, #16]
 800a806:	685b      	ldr	r3, [r3, #4]
 800a808:	685a      	ldr	r2, [r3, #4]
 800a80a:	693b      	ldr	r3, [r7, #16]
 800a80c:	605a      	str	r2, [r3, #4]
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	685b      	ldr	r3, [r3, #4]
 800a812:	68db      	ldr	r3, [r3, #12]
 800a814:	4a06      	ldr	r2, [pc, #24]	; (800a830 <vTaskSwitchContext+0xe0>)
 800a816:	6013      	str	r3, [r2, #0]
}
 800a818:	bf00      	nop
 800a81a:	3718      	adds	r7, #24
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bd80      	pop	{r7, pc}
 800a820:	2000643c 	.word	0x2000643c
 800a824:	20006428 	.word	0x20006428
 800a828:	20006444 	.word	0x20006444
 800a82c:	20006440 	.word	0x20006440
 800a830:	20006314 	.word	0x20006314
 800a834:	2000641c 	.word	0x2000641c
 800a838:	20006318 	.word	0x20006318

0800a83c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b084      	sub	sp, #16
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
 800a844:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d10a      	bne.n	800a862 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a84c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a850:	f383 8811 	msr	BASEPRI, r3
 800a854:	f3bf 8f6f 	isb	sy
 800a858:	f3bf 8f4f 	dsb	sy
 800a85c:	60fb      	str	r3, [r7, #12]
}
 800a85e:	bf00      	nop
 800a860:	e7fe      	b.n	800a860 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a862:	4b07      	ldr	r3, [pc, #28]	; (800a880 <vTaskPlaceOnEventList+0x44>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	3318      	adds	r3, #24
 800a868:	4619      	mov	r1, r3
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f7fe fe6f 	bl	800954e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a870:	2101      	movs	r1, #1
 800a872:	6838      	ldr	r0, [r7, #0]
 800a874:	f000 fb58 	bl	800af28 <prvAddCurrentTaskToDelayedList>
}
 800a878:	bf00      	nop
 800a87a:	3710      	adds	r7, #16
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}
 800a880:	20006314 	.word	0x20006314

0800a884 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b086      	sub	sp, #24
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	68db      	ldr	r3, [r3, #12]
 800a890:	68db      	ldr	r3, [r3, #12]
 800a892:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a894:	693b      	ldr	r3, [r7, #16]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d10a      	bne.n	800a8b0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a89a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a89e:	f383 8811 	msr	BASEPRI, r3
 800a8a2:	f3bf 8f6f 	isb	sy
 800a8a6:	f3bf 8f4f 	dsb	sy
 800a8aa:	60fb      	str	r3, [r7, #12]
}
 800a8ac:	bf00      	nop
 800a8ae:	e7fe      	b.n	800a8ae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	3318      	adds	r3, #24
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f7fe fe83 	bl	80095c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a8ba:	4b1d      	ldr	r3, [pc, #116]	; (800a930 <xTaskRemoveFromEventList+0xac>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d11c      	bne.n	800a8fc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a8c2:	693b      	ldr	r3, [r7, #16]
 800a8c4:	3304      	adds	r3, #4
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f7fe fe7a 	bl	80095c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8d0:	2201      	movs	r2, #1
 800a8d2:	409a      	lsls	r2, r3
 800a8d4:	4b17      	ldr	r3, [pc, #92]	; (800a934 <xTaskRemoveFromEventList+0xb0>)
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	4313      	orrs	r3, r2
 800a8da:	4a16      	ldr	r2, [pc, #88]	; (800a934 <xTaskRemoveFromEventList+0xb0>)
 800a8dc:	6013      	str	r3, [r2, #0]
 800a8de:	693b      	ldr	r3, [r7, #16]
 800a8e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8e2:	4613      	mov	r3, r2
 800a8e4:	009b      	lsls	r3, r3, #2
 800a8e6:	4413      	add	r3, r2
 800a8e8:	009b      	lsls	r3, r3, #2
 800a8ea:	4a13      	ldr	r2, [pc, #76]	; (800a938 <xTaskRemoveFromEventList+0xb4>)
 800a8ec:	441a      	add	r2, r3
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	3304      	adds	r3, #4
 800a8f2:	4619      	mov	r1, r3
 800a8f4:	4610      	mov	r0, r2
 800a8f6:	f7fe fe06 	bl	8009506 <vListInsertEnd>
 800a8fa:	e005      	b.n	800a908 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a8fc:	693b      	ldr	r3, [r7, #16]
 800a8fe:	3318      	adds	r3, #24
 800a900:	4619      	mov	r1, r3
 800a902:	480e      	ldr	r0, [pc, #56]	; (800a93c <xTaskRemoveFromEventList+0xb8>)
 800a904:	f7fe fdff 	bl	8009506 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a908:	693b      	ldr	r3, [r7, #16]
 800a90a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a90c:	4b0c      	ldr	r3, [pc, #48]	; (800a940 <xTaskRemoveFromEventList+0xbc>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a912:	429a      	cmp	r2, r3
 800a914:	d905      	bls.n	800a922 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a916:	2301      	movs	r3, #1
 800a918:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a91a:	4b0a      	ldr	r3, [pc, #40]	; (800a944 <xTaskRemoveFromEventList+0xc0>)
 800a91c:	2201      	movs	r2, #1
 800a91e:	601a      	str	r2, [r3, #0]
 800a920:	e001      	b.n	800a926 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800a922:	2300      	movs	r3, #0
 800a924:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a926:	697b      	ldr	r3, [r7, #20]
}
 800a928:	4618      	mov	r0, r3
 800a92a:	3718      	adds	r7, #24
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}
 800a930:	2000643c 	.word	0x2000643c
 800a934:	2000641c 	.word	0x2000641c
 800a938:	20006318 	.word	0x20006318
 800a93c:	200063d4 	.word	0x200063d4
 800a940:	20006314 	.word	0x20006314
 800a944:	20006428 	.word	0x20006428

0800a948 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a948:	b480      	push	{r7}
 800a94a:	b083      	sub	sp, #12
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a950:	4b06      	ldr	r3, [pc, #24]	; (800a96c <vTaskInternalSetTimeOutState+0x24>)
 800a952:	681a      	ldr	r2, [r3, #0]
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a958:	4b05      	ldr	r3, [pc, #20]	; (800a970 <vTaskInternalSetTimeOutState+0x28>)
 800a95a:	681a      	ldr	r2, [r3, #0]
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	605a      	str	r2, [r3, #4]
}
 800a960:	bf00      	nop
 800a962:	370c      	adds	r7, #12
 800a964:	46bd      	mov	sp, r7
 800a966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96a:	4770      	bx	lr
 800a96c:	2000642c 	.word	0x2000642c
 800a970:	20006418 	.word	0x20006418

0800a974 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b088      	sub	sp, #32
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
 800a97c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d10a      	bne.n	800a99a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a984:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a988:	f383 8811 	msr	BASEPRI, r3
 800a98c:	f3bf 8f6f 	isb	sy
 800a990:	f3bf 8f4f 	dsb	sy
 800a994:	613b      	str	r3, [r7, #16]
}
 800a996:	bf00      	nop
 800a998:	e7fe      	b.n	800a998 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d10a      	bne.n	800a9b6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a9a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a4:	f383 8811 	msr	BASEPRI, r3
 800a9a8:	f3bf 8f6f 	isb	sy
 800a9ac:	f3bf 8f4f 	dsb	sy
 800a9b0:	60fb      	str	r3, [r7, #12]
}
 800a9b2:	bf00      	nop
 800a9b4:	e7fe      	b.n	800a9b4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a9b6:	f000 fc4d 	bl	800b254 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a9ba:	4b1d      	ldr	r3, [pc, #116]	; (800aa30 <xTaskCheckForTimeOut+0xbc>)
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	685b      	ldr	r3, [r3, #4]
 800a9c4:	69ba      	ldr	r2, [r7, #24]
 800a9c6:	1ad3      	subs	r3, r2, r3
 800a9c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a9d2:	d102      	bne.n	800a9da <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	61fb      	str	r3, [r7, #28]
 800a9d8:	e023      	b.n	800aa22 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681a      	ldr	r2, [r3, #0]
 800a9de:	4b15      	ldr	r3, [pc, #84]	; (800aa34 <xTaskCheckForTimeOut+0xc0>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	429a      	cmp	r2, r3
 800a9e4:	d007      	beq.n	800a9f6 <xTaskCheckForTimeOut+0x82>
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	685b      	ldr	r3, [r3, #4]
 800a9ea:	69ba      	ldr	r2, [r7, #24]
 800a9ec:	429a      	cmp	r2, r3
 800a9ee:	d302      	bcc.n	800a9f6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	61fb      	str	r3, [r7, #28]
 800a9f4:	e015      	b.n	800aa22 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	697a      	ldr	r2, [r7, #20]
 800a9fc:	429a      	cmp	r2, r3
 800a9fe:	d20b      	bcs.n	800aa18 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	681a      	ldr	r2, [r3, #0]
 800aa04:	697b      	ldr	r3, [r7, #20]
 800aa06:	1ad2      	subs	r2, r2, r3
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f7ff ff9b 	bl	800a948 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800aa12:	2300      	movs	r3, #0
 800aa14:	61fb      	str	r3, [r7, #28]
 800aa16:	e004      	b.n	800aa22 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800aa1e:	2301      	movs	r3, #1
 800aa20:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800aa22:	f000 fc47 	bl	800b2b4 <vPortExitCritical>

	return xReturn;
 800aa26:	69fb      	ldr	r3, [r7, #28]
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	3720      	adds	r7, #32
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}
 800aa30:	20006418 	.word	0x20006418
 800aa34:	2000642c 	.word	0x2000642c

0800aa38 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800aa38:	b480      	push	{r7}
 800aa3a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800aa3c:	4b03      	ldr	r3, [pc, #12]	; (800aa4c <vTaskMissedYield+0x14>)
 800aa3e:	2201      	movs	r2, #1
 800aa40:	601a      	str	r2, [r3, #0]
}
 800aa42:	bf00      	nop
 800aa44:	46bd      	mov	sp, r7
 800aa46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4a:	4770      	bx	lr
 800aa4c:	20006428 	.word	0x20006428

0800aa50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b082      	sub	sp, #8
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800aa58:	f000 f852 	bl	800ab00 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800aa5c:	4b06      	ldr	r3, [pc, #24]	; (800aa78 <prvIdleTask+0x28>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	2b01      	cmp	r3, #1
 800aa62:	d9f9      	bls.n	800aa58 <prvIdleTask+0x8>
			{
				taskYIELD();
 800aa64:	4b05      	ldr	r3, [pc, #20]	; (800aa7c <prvIdleTask+0x2c>)
 800aa66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa6a:	601a      	str	r2, [r3, #0]
 800aa6c:	f3bf 8f4f 	dsb	sy
 800aa70:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800aa74:	e7f0      	b.n	800aa58 <prvIdleTask+0x8>
 800aa76:	bf00      	nop
 800aa78:	20006318 	.word	0x20006318
 800aa7c:	e000ed04 	.word	0xe000ed04

0800aa80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b082      	sub	sp, #8
 800aa84:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aa86:	2300      	movs	r3, #0
 800aa88:	607b      	str	r3, [r7, #4]
 800aa8a:	e00c      	b.n	800aaa6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800aa8c:	687a      	ldr	r2, [r7, #4]
 800aa8e:	4613      	mov	r3, r2
 800aa90:	009b      	lsls	r3, r3, #2
 800aa92:	4413      	add	r3, r2
 800aa94:	009b      	lsls	r3, r3, #2
 800aa96:	4a12      	ldr	r2, [pc, #72]	; (800aae0 <prvInitialiseTaskLists+0x60>)
 800aa98:	4413      	add	r3, r2
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	f7fe fd06 	bl	80094ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	3301      	adds	r3, #1
 800aaa4:	607b      	str	r3, [r7, #4]
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2b06      	cmp	r3, #6
 800aaaa:	d9ef      	bls.n	800aa8c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800aaac:	480d      	ldr	r0, [pc, #52]	; (800aae4 <prvInitialiseTaskLists+0x64>)
 800aaae:	f7fe fcfd 	bl	80094ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800aab2:	480d      	ldr	r0, [pc, #52]	; (800aae8 <prvInitialiseTaskLists+0x68>)
 800aab4:	f7fe fcfa 	bl	80094ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800aab8:	480c      	ldr	r0, [pc, #48]	; (800aaec <prvInitialiseTaskLists+0x6c>)
 800aaba:	f7fe fcf7 	bl	80094ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800aabe:	480c      	ldr	r0, [pc, #48]	; (800aaf0 <prvInitialiseTaskLists+0x70>)
 800aac0:	f7fe fcf4 	bl	80094ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800aac4:	480b      	ldr	r0, [pc, #44]	; (800aaf4 <prvInitialiseTaskLists+0x74>)
 800aac6:	f7fe fcf1 	bl	80094ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800aaca:	4b0b      	ldr	r3, [pc, #44]	; (800aaf8 <prvInitialiseTaskLists+0x78>)
 800aacc:	4a05      	ldr	r2, [pc, #20]	; (800aae4 <prvInitialiseTaskLists+0x64>)
 800aace:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800aad0:	4b0a      	ldr	r3, [pc, #40]	; (800aafc <prvInitialiseTaskLists+0x7c>)
 800aad2:	4a05      	ldr	r2, [pc, #20]	; (800aae8 <prvInitialiseTaskLists+0x68>)
 800aad4:	601a      	str	r2, [r3, #0]
}
 800aad6:	bf00      	nop
 800aad8:	3708      	adds	r7, #8
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}
 800aade:	bf00      	nop
 800aae0:	20006318 	.word	0x20006318
 800aae4:	200063a4 	.word	0x200063a4
 800aae8:	200063b8 	.word	0x200063b8
 800aaec:	200063d4 	.word	0x200063d4
 800aaf0:	200063e8 	.word	0x200063e8
 800aaf4:	20006400 	.word	0x20006400
 800aaf8:	200063cc 	.word	0x200063cc
 800aafc:	200063d0 	.word	0x200063d0

0800ab00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b082      	sub	sp, #8
 800ab04:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ab06:	e019      	b.n	800ab3c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ab08:	f000 fba4 	bl	800b254 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab0c:	4b10      	ldr	r3, [pc, #64]	; (800ab50 <prvCheckTasksWaitingTermination+0x50>)
 800ab0e:	68db      	ldr	r3, [r3, #12]
 800ab10:	68db      	ldr	r3, [r3, #12]
 800ab12:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	3304      	adds	r3, #4
 800ab18:	4618      	mov	r0, r3
 800ab1a:	f7fe fd51 	bl	80095c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ab1e:	4b0d      	ldr	r3, [pc, #52]	; (800ab54 <prvCheckTasksWaitingTermination+0x54>)
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	3b01      	subs	r3, #1
 800ab24:	4a0b      	ldr	r2, [pc, #44]	; (800ab54 <prvCheckTasksWaitingTermination+0x54>)
 800ab26:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ab28:	4b0b      	ldr	r3, [pc, #44]	; (800ab58 <prvCheckTasksWaitingTermination+0x58>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	3b01      	subs	r3, #1
 800ab2e:	4a0a      	ldr	r2, [pc, #40]	; (800ab58 <prvCheckTasksWaitingTermination+0x58>)
 800ab30:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ab32:	f000 fbbf 	bl	800b2b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f000 f810 	bl	800ab5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ab3c:	4b06      	ldr	r3, [pc, #24]	; (800ab58 <prvCheckTasksWaitingTermination+0x58>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d1e1      	bne.n	800ab08 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ab44:	bf00      	nop
 800ab46:	bf00      	nop
 800ab48:	3708      	adds	r7, #8
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}
 800ab4e:	bf00      	nop
 800ab50:	200063e8 	.word	0x200063e8
 800ab54:	20006414 	.word	0x20006414
 800ab58:	200063fc 	.word	0x200063fc

0800ab5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ab5c:	b480      	push	{r7}
 800ab5e:	b083      	sub	sp, #12
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ab64:	bf00      	nop
 800ab66:	370c      	adds	r7, #12
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6e:	4770      	bx	lr

0800ab70 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ab70:	b480      	push	{r7}
 800ab72:	b083      	sub	sp, #12
 800ab74:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab76:	4b0c      	ldr	r3, [pc, #48]	; (800aba8 <prvResetNextTaskUnblockTime+0x38>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d104      	bne.n	800ab8a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ab80:	4b0a      	ldr	r3, [pc, #40]	; (800abac <prvResetNextTaskUnblockTime+0x3c>)
 800ab82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ab86:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ab88:	e008      	b.n	800ab9c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab8a:	4b07      	ldr	r3, [pc, #28]	; (800aba8 <prvResetNextTaskUnblockTime+0x38>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	68db      	ldr	r3, [r3, #12]
 800ab90:	68db      	ldr	r3, [r3, #12]
 800ab92:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	685b      	ldr	r3, [r3, #4]
 800ab98:	4a04      	ldr	r2, [pc, #16]	; (800abac <prvResetNextTaskUnblockTime+0x3c>)
 800ab9a:	6013      	str	r3, [r2, #0]
}
 800ab9c:	bf00      	nop
 800ab9e:	370c      	adds	r7, #12
 800aba0:	46bd      	mov	sp, r7
 800aba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba6:	4770      	bx	lr
 800aba8:	200063cc 	.word	0x200063cc
 800abac:	20006434 	.word	0x20006434

0800abb0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800abb0:	b480      	push	{r7}
 800abb2:	b083      	sub	sp, #12
 800abb4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800abb6:	4b0b      	ldr	r3, [pc, #44]	; (800abe4 <xTaskGetSchedulerState+0x34>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d102      	bne.n	800abc4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800abbe:	2301      	movs	r3, #1
 800abc0:	607b      	str	r3, [r7, #4]
 800abc2:	e008      	b.n	800abd6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800abc4:	4b08      	ldr	r3, [pc, #32]	; (800abe8 <xTaskGetSchedulerState+0x38>)
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d102      	bne.n	800abd2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800abcc:	2302      	movs	r3, #2
 800abce:	607b      	str	r3, [r7, #4]
 800abd0:	e001      	b.n	800abd6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800abd2:	2300      	movs	r3, #0
 800abd4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800abd6:	687b      	ldr	r3, [r7, #4]
	}
 800abd8:	4618      	mov	r0, r3
 800abda:	370c      	adds	r7, #12
 800abdc:	46bd      	mov	sp, r7
 800abde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe2:	4770      	bx	lr
 800abe4:	20006420 	.word	0x20006420
 800abe8:	2000643c 	.word	0x2000643c

0800abec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800abec:	b580      	push	{r7, lr}
 800abee:	b084      	sub	sp, #16
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800abf8:	2300      	movs	r3, #0
 800abfa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d05e      	beq.n	800acc0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac06:	4b31      	ldr	r3, [pc, #196]	; (800accc <xTaskPriorityInherit+0xe0>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac0c:	429a      	cmp	r2, r3
 800ac0e:	d24e      	bcs.n	800acae <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	699b      	ldr	r3, [r3, #24]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	db06      	blt.n	800ac26 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac18:	4b2c      	ldr	r3, [pc, #176]	; (800accc <xTaskPriorityInherit+0xe0>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac1e:	f1c3 0207 	rsb	r2, r3, #7
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	6959      	ldr	r1, [r3, #20]
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac2e:	4613      	mov	r3, r2
 800ac30:	009b      	lsls	r3, r3, #2
 800ac32:	4413      	add	r3, r2
 800ac34:	009b      	lsls	r3, r3, #2
 800ac36:	4a26      	ldr	r2, [pc, #152]	; (800acd0 <xTaskPriorityInherit+0xe4>)
 800ac38:	4413      	add	r3, r2
 800ac3a:	4299      	cmp	r1, r3
 800ac3c:	d12f      	bne.n	800ac9e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ac3e:	68bb      	ldr	r3, [r7, #8]
 800ac40:	3304      	adds	r3, #4
 800ac42:	4618      	mov	r0, r3
 800ac44:	f7fe fcbc 	bl	80095c0 <uxListRemove>
 800ac48:	4603      	mov	r3, r0
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d10a      	bne.n	800ac64 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac52:	2201      	movs	r2, #1
 800ac54:	fa02 f303 	lsl.w	r3, r2, r3
 800ac58:	43da      	mvns	r2, r3
 800ac5a:	4b1e      	ldr	r3, [pc, #120]	; (800acd4 <xTaskPriorityInherit+0xe8>)
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	4013      	ands	r3, r2
 800ac60:	4a1c      	ldr	r2, [pc, #112]	; (800acd4 <xTaskPriorityInherit+0xe8>)
 800ac62:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ac64:	4b19      	ldr	r3, [pc, #100]	; (800accc <xTaskPriorityInherit+0xe0>)
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac72:	2201      	movs	r2, #1
 800ac74:	409a      	lsls	r2, r3
 800ac76:	4b17      	ldr	r3, [pc, #92]	; (800acd4 <xTaskPriorityInherit+0xe8>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	4313      	orrs	r3, r2
 800ac7c:	4a15      	ldr	r2, [pc, #84]	; (800acd4 <xTaskPriorityInherit+0xe8>)
 800ac7e:	6013      	str	r3, [r2, #0]
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac84:	4613      	mov	r3, r2
 800ac86:	009b      	lsls	r3, r3, #2
 800ac88:	4413      	add	r3, r2
 800ac8a:	009b      	lsls	r3, r3, #2
 800ac8c:	4a10      	ldr	r2, [pc, #64]	; (800acd0 <xTaskPriorityInherit+0xe4>)
 800ac8e:	441a      	add	r2, r3
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	3304      	adds	r3, #4
 800ac94:	4619      	mov	r1, r3
 800ac96:	4610      	mov	r0, r2
 800ac98:	f7fe fc35 	bl	8009506 <vListInsertEnd>
 800ac9c:	e004      	b.n	800aca8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ac9e:	4b0b      	ldr	r3, [pc, #44]	; (800accc <xTaskPriorityInherit+0xe0>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800aca8:	2301      	movs	r3, #1
 800acaa:	60fb      	str	r3, [r7, #12]
 800acac:	e008      	b.n	800acc0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800acae:	68bb      	ldr	r3, [r7, #8]
 800acb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800acb2:	4b06      	ldr	r3, [pc, #24]	; (800accc <xTaskPriorityInherit+0xe0>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acb8:	429a      	cmp	r2, r3
 800acba:	d201      	bcs.n	800acc0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800acbc:	2301      	movs	r3, #1
 800acbe:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800acc0:	68fb      	ldr	r3, [r7, #12]
	}
 800acc2:	4618      	mov	r0, r3
 800acc4:	3710      	adds	r7, #16
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}
 800acca:	bf00      	nop
 800accc:	20006314 	.word	0x20006314
 800acd0:	20006318 	.word	0x20006318
 800acd4:	2000641c 	.word	0x2000641c

0800acd8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b086      	sub	sp, #24
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ace4:	2300      	movs	r3, #0
 800ace6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d06e      	beq.n	800adcc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800acee:	4b3a      	ldr	r3, [pc, #232]	; (800add8 <xTaskPriorityDisinherit+0x100>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	693a      	ldr	r2, [r7, #16]
 800acf4:	429a      	cmp	r2, r3
 800acf6:	d00a      	beq.n	800ad0e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800acf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acfc:	f383 8811 	msr	BASEPRI, r3
 800ad00:	f3bf 8f6f 	isb	sy
 800ad04:	f3bf 8f4f 	dsb	sy
 800ad08:	60fb      	str	r3, [r7, #12]
}
 800ad0a:	bf00      	nop
 800ad0c:	e7fe      	b.n	800ad0c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ad0e:	693b      	ldr	r3, [r7, #16]
 800ad10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d10a      	bne.n	800ad2c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ad16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad1a:	f383 8811 	msr	BASEPRI, r3
 800ad1e:	f3bf 8f6f 	isb	sy
 800ad22:	f3bf 8f4f 	dsb	sy
 800ad26:	60bb      	str	r3, [r7, #8]
}
 800ad28:	bf00      	nop
 800ad2a:	e7fe      	b.n	800ad2a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ad2c:	693b      	ldr	r3, [r7, #16]
 800ad2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad30:	1e5a      	subs	r2, r3, #1
 800ad32:	693b      	ldr	r3, [r7, #16]
 800ad34:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ad36:	693b      	ldr	r3, [r7, #16]
 800ad38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad3a:	693b      	ldr	r3, [r7, #16]
 800ad3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad3e:	429a      	cmp	r2, r3
 800ad40:	d044      	beq.n	800adcc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ad42:	693b      	ldr	r3, [r7, #16]
 800ad44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d140      	bne.n	800adcc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad4a:	693b      	ldr	r3, [r7, #16]
 800ad4c:	3304      	adds	r3, #4
 800ad4e:	4618      	mov	r0, r3
 800ad50:	f7fe fc36 	bl	80095c0 <uxListRemove>
 800ad54:	4603      	mov	r3, r0
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d115      	bne.n	800ad86 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ad5a:	693b      	ldr	r3, [r7, #16]
 800ad5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad5e:	491f      	ldr	r1, [pc, #124]	; (800addc <xTaskPriorityDisinherit+0x104>)
 800ad60:	4613      	mov	r3, r2
 800ad62:	009b      	lsls	r3, r3, #2
 800ad64:	4413      	add	r3, r2
 800ad66:	009b      	lsls	r3, r3, #2
 800ad68:	440b      	add	r3, r1
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d10a      	bne.n	800ad86 <xTaskPriorityDisinherit+0xae>
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad74:	2201      	movs	r2, #1
 800ad76:	fa02 f303 	lsl.w	r3, r2, r3
 800ad7a:	43da      	mvns	r2, r3
 800ad7c:	4b18      	ldr	r3, [pc, #96]	; (800ade0 <xTaskPriorityDisinherit+0x108>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	4013      	ands	r3, r2
 800ad82:	4a17      	ldr	r2, [pc, #92]	; (800ade0 <xTaskPriorityDisinherit+0x108>)
 800ad84:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ad86:	693b      	ldr	r3, [r7, #16]
 800ad88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ad8a:	693b      	ldr	r3, [r7, #16]
 800ad8c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad8e:	693b      	ldr	r3, [r7, #16]
 800ad90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad92:	f1c3 0207 	rsb	r2, r3, #7
 800ad96:	693b      	ldr	r3, [r7, #16]
 800ad98:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ad9a:	693b      	ldr	r3, [r7, #16]
 800ad9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad9e:	2201      	movs	r2, #1
 800ada0:	409a      	lsls	r2, r3
 800ada2:	4b0f      	ldr	r3, [pc, #60]	; (800ade0 <xTaskPriorityDisinherit+0x108>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	4313      	orrs	r3, r2
 800ada8:	4a0d      	ldr	r2, [pc, #52]	; (800ade0 <xTaskPriorityDisinherit+0x108>)
 800adaa:	6013      	str	r3, [r2, #0]
 800adac:	693b      	ldr	r3, [r7, #16]
 800adae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adb0:	4613      	mov	r3, r2
 800adb2:	009b      	lsls	r3, r3, #2
 800adb4:	4413      	add	r3, r2
 800adb6:	009b      	lsls	r3, r3, #2
 800adb8:	4a08      	ldr	r2, [pc, #32]	; (800addc <xTaskPriorityDisinherit+0x104>)
 800adba:	441a      	add	r2, r3
 800adbc:	693b      	ldr	r3, [r7, #16]
 800adbe:	3304      	adds	r3, #4
 800adc0:	4619      	mov	r1, r3
 800adc2:	4610      	mov	r0, r2
 800adc4:	f7fe fb9f 	bl	8009506 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800adc8:	2301      	movs	r3, #1
 800adca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800adcc:	697b      	ldr	r3, [r7, #20]
	}
 800adce:	4618      	mov	r0, r3
 800add0:	3718      	adds	r7, #24
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}
 800add6:	bf00      	nop
 800add8:	20006314 	.word	0x20006314
 800addc:	20006318 	.word	0x20006318
 800ade0:	2000641c 	.word	0x2000641c

0800ade4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b088      	sub	sp, #32
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
 800adec:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800adf2:	2301      	movs	r3, #1
 800adf4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d077      	beq.n	800aeec <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800adfc:	69bb      	ldr	r3, [r7, #24]
 800adfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d10a      	bne.n	800ae1a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800ae04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae08:	f383 8811 	msr	BASEPRI, r3
 800ae0c:	f3bf 8f6f 	isb	sy
 800ae10:	f3bf 8f4f 	dsb	sy
 800ae14:	60fb      	str	r3, [r7, #12]
}
 800ae16:	bf00      	nop
 800ae18:	e7fe      	b.n	800ae18 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ae1a:	69bb      	ldr	r3, [r7, #24]
 800ae1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae1e:	683a      	ldr	r2, [r7, #0]
 800ae20:	429a      	cmp	r2, r3
 800ae22:	d902      	bls.n	800ae2a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	61fb      	str	r3, [r7, #28]
 800ae28:	e002      	b.n	800ae30 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ae2a:	69bb      	ldr	r3, [r7, #24]
 800ae2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae2e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ae30:	69bb      	ldr	r3, [r7, #24]
 800ae32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae34:	69fa      	ldr	r2, [r7, #28]
 800ae36:	429a      	cmp	r2, r3
 800ae38:	d058      	beq.n	800aeec <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ae3a:	69bb      	ldr	r3, [r7, #24]
 800ae3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae3e:	697a      	ldr	r2, [r7, #20]
 800ae40:	429a      	cmp	r2, r3
 800ae42:	d153      	bne.n	800aeec <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ae44:	4b2b      	ldr	r3, [pc, #172]	; (800aef4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	69ba      	ldr	r2, [r7, #24]
 800ae4a:	429a      	cmp	r2, r3
 800ae4c:	d10a      	bne.n	800ae64 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800ae4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae52:	f383 8811 	msr	BASEPRI, r3
 800ae56:	f3bf 8f6f 	isb	sy
 800ae5a:	f3bf 8f4f 	dsb	sy
 800ae5e:	60bb      	str	r3, [r7, #8]
}
 800ae60:	bf00      	nop
 800ae62:	e7fe      	b.n	800ae62 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ae64:	69bb      	ldr	r3, [r7, #24]
 800ae66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae68:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ae6a:	69bb      	ldr	r3, [r7, #24]
 800ae6c:	69fa      	ldr	r2, [r7, #28]
 800ae6e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ae70:	69bb      	ldr	r3, [r7, #24]
 800ae72:	699b      	ldr	r3, [r3, #24]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	db04      	blt.n	800ae82 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae78:	69fb      	ldr	r3, [r7, #28]
 800ae7a:	f1c3 0207 	rsb	r2, r3, #7
 800ae7e:	69bb      	ldr	r3, [r7, #24]
 800ae80:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ae82:	69bb      	ldr	r3, [r7, #24]
 800ae84:	6959      	ldr	r1, [r3, #20]
 800ae86:	693a      	ldr	r2, [r7, #16]
 800ae88:	4613      	mov	r3, r2
 800ae8a:	009b      	lsls	r3, r3, #2
 800ae8c:	4413      	add	r3, r2
 800ae8e:	009b      	lsls	r3, r3, #2
 800ae90:	4a19      	ldr	r2, [pc, #100]	; (800aef8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800ae92:	4413      	add	r3, r2
 800ae94:	4299      	cmp	r1, r3
 800ae96:	d129      	bne.n	800aeec <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae98:	69bb      	ldr	r3, [r7, #24]
 800ae9a:	3304      	adds	r3, #4
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	f7fe fb8f 	bl	80095c0 <uxListRemove>
 800aea2:	4603      	mov	r3, r0
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d10a      	bne.n	800aebe <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800aea8:	69bb      	ldr	r3, [r7, #24]
 800aeaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeac:	2201      	movs	r2, #1
 800aeae:	fa02 f303 	lsl.w	r3, r2, r3
 800aeb2:	43da      	mvns	r2, r3
 800aeb4:	4b11      	ldr	r3, [pc, #68]	; (800aefc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	4013      	ands	r3, r2
 800aeba:	4a10      	ldr	r2, [pc, #64]	; (800aefc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800aebc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800aebe:	69bb      	ldr	r3, [r7, #24]
 800aec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aec2:	2201      	movs	r2, #1
 800aec4:	409a      	lsls	r2, r3
 800aec6:	4b0d      	ldr	r3, [pc, #52]	; (800aefc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	4313      	orrs	r3, r2
 800aecc:	4a0b      	ldr	r2, [pc, #44]	; (800aefc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800aece:	6013      	str	r3, [r2, #0]
 800aed0:	69bb      	ldr	r3, [r7, #24]
 800aed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aed4:	4613      	mov	r3, r2
 800aed6:	009b      	lsls	r3, r3, #2
 800aed8:	4413      	add	r3, r2
 800aeda:	009b      	lsls	r3, r3, #2
 800aedc:	4a06      	ldr	r2, [pc, #24]	; (800aef8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800aede:	441a      	add	r2, r3
 800aee0:	69bb      	ldr	r3, [r7, #24]
 800aee2:	3304      	adds	r3, #4
 800aee4:	4619      	mov	r1, r3
 800aee6:	4610      	mov	r0, r2
 800aee8:	f7fe fb0d 	bl	8009506 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800aeec:	bf00      	nop
 800aeee:	3720      	adds	r7, #32
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}
 800aef4:	20006314 	.word	0x20006314
 800aef8:	20006318 	.word	0x20006318
 800aefc:	2000641c 	.word	0x2000641c

0800af00 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800af00:	b480      	push	{r7}
 800af02:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800af04:	4b07      	ldr	r3, [pc, #28]	; (800af24 <pvTaskIncrementMutexHeldCount+0x24>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d004      	beq.n	800af16 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800af0c:	4b05      	ldr	r3, [pc, #20]	; (800af24 <pvTaskIncrementMutexHeldCount+0x24>)
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800af12:	3201      	adds	r2, #1
 800af14:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800af16:	4b03      	ldr	r3, [pc, #12]	; (800af24 <pvTaskIncrementMutexHeldCount+0x24>)
 800af18:	681b      	ldr	r3, [r3, #0]
	}
 800af1a:	4618      	mov	r0, r3
 800af1c:	46bd      	mov	sp, r7
 800af1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af22:	4770      	bx	lr
 800af24:	20006314 	.word	0x20006314

0800af28 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b084      	sub	sp, #16
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
 800af30:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800af32:	4b29      	ldr	r3, [pc, #164]	; (800afd8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800af38:	4b28      	ldr	r3, [pc, #160]	; (800afdc <prvAddCurrentTaskToDelayedList+0xb4>)
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	3304      	adds	r3, #4
 800af3e:	4618      	mov	r0, r3
 800af40:	f7fe fb3e 	bl	80095c0 <uxListRemove>
 800af44:	4603      	mov	r3, r0
 800af46:	2b00      	cmp	r3, #0
 800af48:	d10b      	bne.n	800af62 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800af4a:	4b24      	ldr	r3, [pc, #144]	; (800afdc <prvAddCurrentTaskToDelayedList+0xb4>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af50:	2201      	movs	r2, #1
 800af52:	fa02 f303 	lsl.w	r3, r2, r3
 800af56:	43da      	mvns	r2, r3
 800af58:	4b21      	ldr	r3, [pc, #132]	; (800afe0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	4013      	ands	r3, r2
 800af5e:	4a20      	ldr	r2, [pc, #128]	; (800afe0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800af60:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af68:	d10a      	bne.n	800af80 <prvAddCurrentTaskToDelayedList+0x58>
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d007      	beq.n	800af80 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800af70:	4b1a      	ldr	r3, [pc, #104]	; (800afdc <prvAddCurrentTaskToDelayedList+0xb4>)
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	3304      	adds	r3, #4
 800af76:	4619      	mov	r1, r3
 800af78:	481a      	ldr	r0, [pc, #104]	; (800afe4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800af7a:	f7fe fac4 	bl	8009506 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800af7e:	e026      	b.n	800afce <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800af80:	68fa      	ldr	r2, [r7, #12]
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	4413      	add	r3, r2
 800af86:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800af88:	4b14      	ldr	r3, [pc, #80]	; (800afdc <prvAddCurrentTaskToDelayedList+0xb4>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	68ba      	ldr	r2, [r7, #8]
 800af8e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800af90:	68ba      	ldr	r2, [r7, #8]
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	429a      	cmp	r2, r3
 800af96:	d209      	bcs.n	800afac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800af98:	4b13      	ldr	r3, [pc, #76]	; (800afe8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800af9a:	681a      	ldr	r2, [r3, #0]
 800af9c:	4b0f      	ldr	r3, [pc, #60]	; (800afdc <prvAddCurrentTaskToDelayedList+0xb4>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	3304      	adds	r3, #4
 800afa2:	4619      	mov	r1, r3
 800afa4:	4610      	mov	r0, r2
 800afa6:	f7fe fad2 	bl	800954e <vListInsert>
}
 800afaa:	e010      	b.n	800afce <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800afac:	4b0f      	ldr	r3, [pc, #60]	; (800afec <prvAddCurrentTaskToDelayedList+0xc4>)
 800afae:	681a      	ldr	r2, [r3, #0]
 800afb0:	4b0a      	ldr	r3, [pc, #40]	; (800afdc <prvAddCurrentTaskToDelayedList+0xb4>)
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	3304      	adds	r3, #4
 800afb6:	4619      	mov	r1, r3
 800afb8:	4610      	mov	r0, r2
 800afba:	f7fe fac8 	bl	800954e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800afbe:	4b0c      	ldr	r3, [pc, #48]	; (800aff0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	68ba      	ldr	r2, [r7, #8]
 800afc4:	429a      	cmp	r2, r3
 800afc6:	d202      	bcs.n	800afce <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800afc8:	4a09      	ldr	r2, [pc, #36]	; (800aff0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	6013      	str	r3, [r2, #0]
}
 800afce:	bf00      	nop
 800afd0:	3710      	adds	r7, #16
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd80      	pop	{r7, pc}
 800afd6:	bf00      	nop
 800afd8:	20006418 	.word	0x20006418
 800afdc:	20006314 	.word	0x20006314
 800afe0:	2000641c 	.word	0x2000641c
 800afe4:	20006400 	.word	0x20006400
 800afe8:	200063d0 	.word	0x200063d0
 800afec:	200063cc 	.word	0x200063cc
 800aff0:	20006434 	.word	0x20006434

0800aff4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800aff4:	b480      	push	{r7}
 800aff6:	b085      	sub	sp, #20
 800aff8:	af00      	add	r7, sp, #0
 800affa:	60f8      	str	r0, [r7, #12]
 800affc:	60b9      	str	r1, [r7, #8]
 800affe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	3b04      	subs	r3, #4
 800b004:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b00c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	3b04      	subs	r3, #4
 800b012:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	f023 0201 	bic.w	r2, r3, #1
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	3b04      	subs	r3, #4
 800b022:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b024:	4a0c      	ldr	r2, [pc, #48]	; (800b058 <pxPortInitialiseStack+0x64>)
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	3b14      	subs	r3, #20
 800b02e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b030:	687a      	ldr	r2, [r7, #4]
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	3b04      	subs	r3, #4
 800b03a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	f06f 0202 	mvn.w	r2, #2
 800b042:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	3b20      	subs	r3, #32
 800b048:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b04a:	68fb      	ldr	r3, [r7, #12]
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3714      	adds	r7, #20
 800b050:	46bd      	mov	sp, r7
 800b052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b056:	4770      	bx	lr
 800b058:	0800b05d 	.word	0x0800b05d

0800b05c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b05c:	b480      	push	{r7}
 800b05e:	b085      	sub	sp, #20
 800b060:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b062:	2300      	movs	r3, #0
 800b064:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b066:	4b12      	ldr	r3, [pc, #72]	; (800b0b0 <prvTaskExitError+0x54>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b06e:	d00a      	beq.n	800b086 <prvTaskExitError+0x2a>
	__asm volatile
 800b070:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b074:	f383 8811 	msr	BASEPRI, r3
 800b078:	f3bf 8f6f 	isb	sy
 800b07c:	f3bf 8f4f 	dsb	sy
 800b080:	60fb      	str	r3, [r7, #12]
}
 800b082:	bf00      	nop
 800b084:	e7fe      	b.n	800b084 <prvTaskExitError+0x28>
	__asm volatile
 800b086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b08a:	f383 8811 	msr	BASEPRI, r3
 800b08e:	f3bf 8f6f 	isb	sy
 800b092:	f3bf 8f4f 	dsb	sy
 800b096:	60bb      	str	r3, [r7, #8]
}
 800b098:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b09a:	bf00      	nop
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d0fc      	beq.n	800b09c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b0a2:	bf00      	nop
 800b0a4:	bf00      	nop
 800b0a6:	3714      	adds	r7, #20
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ae:	4770      	bx	lr
 800b0b0:	20000084 	.word	0x20000084
	...

0800b0c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b0c0:	4b07      	ldr	r3, [pc, #28]	; (800b0e0 <pxCurrentTCBConst2>)
 800b0c2:	6819      	ldr	r1, [r3, #0]
 800b0c4:	6808      	ldr	r0, [r1, #0]
 800b0c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0ca:	f380 8809 	msr	PSP, r0
 800b0ce:	f3bf 8f6f 	isb	sy
 800b0d2:	f04f 0000 	mov.w	r0, #0
 800b0d6:	f380 8811 	msr	BASEPRI, r0
 800b0da:	4770      	bx	lr
 800b0dc:	f3af 8000 	nop.w

0800b0e0 <pxCurrentTCBConst2>:
 800b0e0:	20006314 	.word	0x20006314
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b0e4:	bf00      	nop
 800b0e6:	bf00      	nop

0800b0e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b0e8:	4808      	ldr	r0, [pc, #32]	; (800b10c <prvPortStartFirstTask+0x24>)
 800b0ea:	6800      	ldr	r0, [r0, #0]
 800b0ec:	6800      	ldr	r0, [r0, #0]
 800b0ee:	f380 8808 	msr	MSP, r0
 800b0f2:	f04f 0000 	mov.w	r0, #0
 800b0f6:	f380 8814 	msr	CONTROL, r0
 800b0fa:	b662      	cpsie	i
 800b0fc:	b661      	cpsie	f
 800b0fe:	f3bf 8f4f 	dsb	sy
 800b102:	f3bf 8f6f 	isb	sy
 800b106:	df00      	svc	0
 800b108:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b10a:	bf00      	nop
 800b10c:	e000ed08 	.word	0xe000ed08

0800b110 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b086      	sub	sp, #24
 800b114:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b116:	4b46      	ldr	r3, [pc, #280]	; (800b230 <xPortStartScheduler+0x120>)
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	4a46      	ldr	r2, [pc, #280]	; (800b234 <xPortStartScheduler+0x124>)
 800b11c:	4293      	cmp	r3, r2
 800b11e:	d10a      	bne.n	800b136 <xPortStartScheduler+0x26>
	__asm volatile
 800b120:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b124:	f383 8811 	msr	BASEPRI, r3
 800b128:	f3bf 8f6f 	isb	sy
 800b12c:	f3bf 8f4f 	dsb	sy
 800b130:	613b      	str	r3, [r7, #16]
}
 800b132:	bf00      	nop
 800b134:	e7fe      	b.n	800b134 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b136:	4b3e      	ldr	r3, [pc, #248]	; (800b230 <xPortStartScheduler+0x120>)
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	4a3f      	ldr	r2, [pc, #252]	; (800b238 <xPortStartScheduler+0x128>)
 800b13c:	4293      	cmp	r3, r2
 800b13e:	d10a      	bne.n	800b156 <xPortStartScheduler+0x46>
	__asm volatile
 800b140:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b144:	f383 8811 	msr	BASEPRI, r3
 800b148:	f3bf 8f6f 	isb	sy
 800b14c:	f3bf 8f4f 	dsb	sy
 800b150:	60fb      	str	r3, [r7, #12]
}
 800b152:	bf00      	nop
 800b154:	e7fe      	b.n	800b154 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b156:	4b39      	ldr	r3, [pc, #228]	; (800b23c <xPortStartScheduler+0x12c>)
 800b158:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b15a:	697b      	ldr	r3, [r7, #20]
 800b15c:	781b      	ldrb	r3, [r3, #0]
 800b15e:	b2db      	uxtb	r3, r3
 800b160:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b162:	697b      	ldr	r3, [r7, #20]
 800b164:	22ff      	movs	r2, #255	; 0xff
 800b166:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b168:	697b      	ldr	r3, [r7, #20]
 800b16a:	781b      	ldrb	r3, [r3, #0]
 800b16c:	b2db      	uxtb	r3, r3
 800b16e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b170:	78fb      	ldrb	r3, [r7, #3]
 800b172:	b2db      	uxtb	r3, r3
 800b174:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b178:	b2da      	uxtb	r2, r3
 800b17a:	4b31      	ldr	r3, [pc, #196]	; (800b240 <xPortStartScheduler+0x130>)
 800b17c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b17e:	4b31      	ldr	r3, [pc, #196]	; (800b244 <xPortStartScheduler+0x134>)
 800b180:	2207      	movs	r2, #7
 800b182:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b184:	e009      	b.n	800b19a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b186:	4b2f      	ldr	r3, [pc, #188]	; (800b244 <xPortStartScheduler+0x134>)
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	3b01      	subs	r3, #1
 800b18c:	4a2d      	ldr	r2, [pc, #180]	; (800b244 <xPortStartScheduler+0x134>)
 800b18e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b190:	78fb      	ldrb	r3, [r7, #3]
 800b192:	b2db      	uxtb	r3, r3
 800b194:	005b      	lsls	r3, r3, #1
 800b196:	b2db      	uxtb	r3, r3
 800b198:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b19a:	78fb      	ldrb	r3, [r7, #3]
 800b19c:	b2db      	uxtb	r3, r3
 800b19e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1a2:	2b80      	cmp	r3, #128	; 0x80
 800b1a4:	d0ef      	beq.n	800b186 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b1a6:	4b27      	ldr	r3, [pc, #156]	; (800b244 <xPortStartScheduler+0x134>)
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	f1c3 0307 	rsb	r3, r3, #7
 800b1ae:	2b04      	cmp	r3, #4
 800b1b0:	d00a      	beq.n	800b1c8 <xPortStartScheduler+0xb8>
	__asm volatile
 800b1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1b6:	f383 8811 	msr	BASEPRI, r3
 800b1ba:	f3bf 8f6f 	isb	sy
 800b1be:	f3bf 8f4f 	dsb	sy
 800b1c2:	60bb      	str	r3, [r7, #8]
}
 800b1c4:	bf00      	nop
 800b1c6:	e7fe      	b.n	800b1c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b1c8:	4b1e      	ldr	r3, [pc, #120]	; (800b244 <xPortStartScheduler+0x134>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	021b      	lsls	r3, r3, #8
 800b1ce:	4a1d      	ldr	r2, [pc, #116]	; (800b244 <xPortStartScheduler+0x134>)
 800b1d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b1d2:	4b1c      	ldr	r3, [pc, #112]	; (800b244 <xPortStartScheduler+0x134>)
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b1da:	4a1a      	ldr	r2, [pc, #104]	; (800b244 <xPortStartScheduler+0x134>)
 800b1dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	b2da      	uxtb	r2, r3
 800b1e2:	697b      	ldr	r3, [r7, #20]
 800b1e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b1e6:	4b18      	ldr	r3, [pc, #96]	; (800b248 <xPortStartScheduler+0x138>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	4a17      	ldr	r2, [pc, #92]	; (800b248 <xPortStartScheduler+0x138>)
 800b1ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b1f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b1f2:	4b15      	ldr	r3, [pc, #84]	; (800b248 <xPortStartScheduler+0x138>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	4a14      	ldr	r2, [pc, #80]	; (800b248 <xPortStartScheduler+0x138>)
 800b1f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b1fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b1fe:	f000 f8dd 	bl	800b3bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b202:	4b12      	ldr	r3, [pc, #72]	; (800b24c <xPortStartScheduler+0x13c>)
 800b204:	2200      	movs	r2, #0
 800b206:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b208:	f000 f8fc 	bl	800b404 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b20c:	4b10      	ldr	r3, [pc, #64]	; (800b250 <xPortStartScheduler+0x140>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	4a0f      	ldr	r2, [pc, #60]	; (800b250 <xPortStartScheduler+0x140>)
 800b212:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b216:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b218:	f7ff ff66 	bl	800b0e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b21c:	f7ff fa98 	bl	800a750 <vTaskSwitchContext>
	prvTaskExitError();
 800b220:	f7ff ff1c 	bl	800b05c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b224:	2300      	movs	r3, #0
}
 800b226:	4618      	mov	r0, r3
 800b228:	3718      	adds	r7, #24
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}
 800b22e:	bf00      	nop
 800b230:	e000ed00 	.word	0xe000ed00
 800b234:	410fc271 	.word	0x410fc271
 800b238:	410fc270 	.word	0x410fc270
 800b23c:	e000e400 	.word	0xe000e400
 800b240:	20006448 	.word	0x20006448
 800b244:	2000644c 	.word	0x2000644c
 800b248:	e000ed20 	.word	0xe000ed20
 800b24c:	20000084 	.word	0x20000084
 800b250:	e000ef34 	.word	0xe000ef34

0800b254 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b254:	b480      	push	{r7}
 800b256:	b083      	sub	sp, #12
 800b258:	af00      	add	r7, sp, #0
	__asm volatile
 800b25a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b25e:	f383 8811 	msr	BASEPRI, r3
 800b262:	f3bf 8f6f 	isb	sy
 800b266:	f3bf 8f4f 	dsb	sy
 800b26a:	607b      	str	r3, [r7, #4]
}
 800b26c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b26e:	4b0f      	ldr	r3, [pc, #60]	; (800b2ac <vPortEnterCritical+0x58>)
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	3301      	adds	r3, #1
 800b274:	4a0d      	ldr	r2, [pc, #52]	; (800b2ac <vPortEnterCritical+0x58>)
 800b276:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b278:	4b0c      	ldr	r3, [pc, #48]	; (800b2ac <vPortEnterCritical+0x58>)
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	2b01      	cmp	r3, #1
 800b27e:	d10f      	bne.n	800b2a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b280:	4b0b      	ldr	r3, [pc, #44]	; (800b2b0 <vPortEnterCritical+0x5c>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	b2db      	uxtb	r3, r3
 800b286:	2b00      	cmp	r3, #0
 800b288:	d00a      	beq.n	800b2a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800b28a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b28e:	f383 8811 	msr	BASEPRI, r3
 800b292:	f3bf 8f6f 	isb	sy
 800b296:	f3bf 8f4f 	dsb	sy
 800b29a:	603b      	str	r3, [r7, #0]
}
 800b29c:	bf00      	nop
 800b29e:	e7fe      	b.n	800b29e <vPortEnterCritical+0x4a>
	}
}
 800b2a0:	bf00      	nop
 800b2a2:	370c      	adds	r7, #12
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2aa:	4770      	bx	lr
 800b2ac:	20000084 	.word	0x20000084
 800b2b0:	e000ed04 	.word	0xe000ed04

0800b2b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	b083      	sub	sp, #12
 800b2b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b2ba:	4b12      	ldr	r3, [pc, #72]	; (800b304 <vPortExitCritical+0x50>)
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d10a      	bne.n	800b2d8 <vPortExitCritical+0x24>
	__asm volatile
 800b2c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2c6:	f383 8811 	msr	BASEPRI, r3
 800b2ca:	f3bf 8f6f 	isb	sy
 800b2ce:	f3bf 8f4f 	dsb	sy
 800b2d2:	607b      	str	r3, [r7, #4]
}
 800b2d4:	bf00      	nop
 800b2d6:	e7fe      	b.n	800b2d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b2d8:	4b0a      	ldr	r3, [pc, #40]	; (800b304 <vPortExitCritical+0x50>)
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	3b01      	subs	r3, #1
 800b2de:	4a09      	ldr	r2, [pc, #36]	; (800b304 <vPortExitCritical+0x50>)
 800b2e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b2e2:	4b08      	ldr	r3, [pc, #32]	; (800b304 <vPortExitCritical+0x50>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d105      	bne.n	800b2f6 <vPortExitCritical+0x42>
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	f383 8811 	msr	BASEPRI, r3
}
 800b2f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b2f6:	bf00      	nop
 800b2f8:	370c      	adds	r7, #12
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b300:	4770      	bx	lr
 800b302:	bf00      	nop
 800b304:	20000084 	.word	0x20000084
	...

0800b310 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b310:	f3ef 8009 	mrs	r0, PSP
 800b314:	f3bf 8f6f 	isb	sy
 800b318:	4b15      	ldr	r3, [pc, #84]	; (800b370 <pxCurrentTCBConst>)
 800b31a:	681a      	ldr	r2, [r3, #0]
 800b31c:	f01e 0f10 	tst.w	lr, #16
 800b320:	bf08      	it	eq
 800b322:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b326:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b32a:	6010      	str	r0, [r2, #0]
 800b32c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b330:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b334:	f380 8811 	msr	BASEPRI, r0
 800b338:	f3bf 8f4f 	dsb	sy
 800b33c:	f3bf 8f6f 	isb	sy
 800b340:	f7ff fa06 	bl	800a750 <vTaskSwitchContext>
 800b344:	f04f 0000 	mov.w	r0, #0
 800b348:	f380 8811 	msr	BASEPRI, r0
 800b34c:	bc09      	pop	{r0, r3}
 800b34e:	6819      	ldr	r1, [r3, #0]
 800b350:	6808      	ldr	r0, [r1, #0]
 800b352:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b356:	f01e 0f10 	tst.w	lr, #16
 800b35a:	bf08      	it	eq
 800b35c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b360:	f380 8809 	msr	PSP, r0
 800b364:	f3bf 8f6f 	isb	sy
 800b368:	4770      	bx	lr
 800b36a:	bf00      	nop
 800b36c:	f3af 8000 	nop.w

0800b370 <pxCurrentTCBConst>:
 800b370:	20006314 	.word	0x20006314
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b374:	bf00      	nop
 800b376:	bf00      	nop

0800b378 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b082      	sub	sp, #8
 800b37c:	af00      	add	r7, sp, #0
	__asm volatile
 800b37e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b382:	f383 8811 	msr	BASEPRI, r3
 800b386:	f3bf 8f6f 	isb	sy
 800b38a:	f3bf 8f4f 	dsb	sy
 800b38e:	607b      	str	r3, [r7, #4]
}
 800b390:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b392:	f7ff f925 	bl	800a5e0 <xTaskIncrementTick>
 800b396:	4603      	mov	r3, r0
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d003      	beq.n	800b3a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b39c:	4b06      	ldr	r3, [pc, #24]	; (800b3b8 <SysTick_Handler+0x40>)
 800b39e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3a2:	601a      	str	r2, [r3, #0]
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	f383 8811 	msr	BASEPRI, r3
}
 800b3ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b3b0:	bf00      	nop
 800b3b2:	3708      	adds	r7, #8
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}
 800b3b8:	e000ed04 	.word	0xe000ed04

0800b3bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b3bc:	b480      	push	{r7}
 800b3be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b3c0:	4b0b      	ldr	r3, [pc, #44]	; (800b3f0 <vPortSetupTimerInterrupt+0x34>)
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b3c6:	4b0b      	ldr	r3, [pc, #44]	; (800b3f4 <vPortSetupTimerInterrupt+0x38>)
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b3cc:	4b0a      	ldr	r3, [pc, #40]	; (800b3f8 <vPortSetupTimerInterrupt+0x3c>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	4a0a      	ldr	r2, [pc, #40]	; (800b3fc <vPortSetupTimerInterrupt+0x40>)
 800b3d2:	fba2 2303 	umull	r2, r3, r2, r3
 800b3d6:	099b      	lsrs	r3, r3, #6
 800b3d8:	4a09      	ldr	r2, [pc, #36]	; (800b400 <vPortSetupTimerInterrupt+0x44>)
 800b3da:	3b01      	subs	r3, #1
 800b3dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b3de:	4b04      	ldr	r3, [pc, #16]	; (800b3f0 <vPortSetupTimerInterrupt+0x34>)
 800b3e0:	2207      	movs	r2, #7
 800b3e2:	601a      	str	r2, [r3, #0]
}
 800b3e4:	bf00      	nop
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ec:	4770      	bx	lr
 800b3ee:	bf00      	nop
 800b3f0:	e000e010 	.word	0xe000e010
 800b3f4:	e000e018 	.word	0xe000e018
 800b3f8:	20000078 	.word	0x20000078
 800b3fc:	10624dd3 	.word	0x10624dd3
 800b400:	e000e014 	.word	0xe000e014

0800b404 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b404:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b414 <vPortEnableVFP+0x10>
 800b408:	6801      	ldr	r1, [r0, #0]
 800b40a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b40e:	6001      	str	r1, [r0, #0]
 800b410:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b412:	bf00      	nop
 800b414:	e000ed88 	.word	0xe000ed88

0800b418 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b418:	b480      	push	{r7}
 800b41a:	b085      	sub	sp, #20
 800b41c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b41e:	f3ef 8305 	mrs	r3, IPSR
 800b422:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	2b0f      	cmp	r3, #15
 800b428:	d914      	bls.n	800b454 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b42a:	4a17      	ldr	r2, [pc, #92]	; (800b488 <vPortValidateInterruptPriority+0x70>)
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	4413      	add	r3, r2
 800b430:	781b      	ldrb	r3, [r3, #0]
 800b432:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b434:	4b15      	ldr	r3, [pc, #84]	; (800b48c <vPortValidateInterruptPriority+0x74>)
 800b436:	781b      	ldrb	r3, [r3, #0]
 800b438:	7afa      	ldrb	r2, [r7, #11]
 800b43a:	429a      	cmp	r2, r3
 800b43c:	d20a      	bcs.n	800b454 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b43e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b442:	f383 8811 	msr	BASEPRI, r3
 800b446:	f3bf 8f6f 	isb	sy
 800b44a:	f3bf 8f4f 	dsb	sy
 800b44e:	607b      	str	r3, [r7, #4]
}
 800b450:	bf00      	nop
 800b452:	e7fe      	b.n	800b452 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b454:	4b0e      	ldr	r3, [pc, #56]	; (800b490 <vPortValidateInterruptPriority+0x78>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b45c:	4b0d      	ldr	r3, [pc, #52]	; (800b494 <vPortValidateInterruptPriority+0x7c>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	429a      	cmp	r2, r3
 800b462:	d90a      	bls.n	800b47a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b464:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b468:	f383 8811 	msr	BASEPRI, r3
 800b46c:	f3bf 8f6f 	isb	sy
 800b470:	f3bf 8f4f 	dsb	sy
 800b474:	603b      	str	r3, [r7, #0]
}
 800b476:	bf00      	nop
 800b478:	e7fe      	b.n	800b478 <vPortValidateInterruptPriority+0x60>
	}
 800b47a:	bf00      	nop
 800b47c:	3714      	adds	r7, #20
 800b47e:	46bd      	mov	sp, r7
 800b480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b484:	4770      	bx	lr
 800b486:	bf00      	nop
 800b488:	e000e3f0 	.word	0xe000e3f0
 800b48c:	20006448 	.word	0x20006448
 800b490:	e000ed0c 	.word	0xe000ed0c
 800b494:	2000644c 	.word	0x2000644c

0800b498 <__libc_init_array>:
 800b498:	b570      	push	{r4, r5, r6, lr}
 800b49a:	4d0d      	ldr	r5, [pc, #52]	; (800b4d0 <__libc_init_array+0x38>)
 800b49c:	4c0d      	ldr	r4, [pc, #52]	; (800b4d4 <__libc_init_array+0x3c>)
 800b49e:	1b64      	subs	r4, r4, r5
 800b4a0:	10a4      	asrs	r4, r4, #2
 800b4a2:	2600      	movs	r6, #0
 800b4a4:	42a6      	cmp	r6, r4
 800b4a6:	d109      	bne.n	800b4bc <__libc_init_array+0x24>
 800b4a8:	4d0b      	ldr	r5, [pc, #44]	; (800b4d8 <__libc_init_array+0x40>)
 800b4aa:	4c0c      	ldr	r4, [pc, #48]	; (800b4dc <__libc_init_array+0x44>)
 800b4ac:	f000 f82e 	bl	800b50c <_init>
 800b4b0:	1b64      	subs	r4, r4, r5
 800b4b2:	10a4      	asrs	r4, r4, #2
 800b4b4:	2600      	movs	r6, #0
 800b4b6:	42a6      	cmp	r6, r4
 800b4b8:	d105      	bne.n	800b4c6 <__libc_init_array+0x2e>
 800b4ba:	bd70      	pop	{r4, r5, r6, pc}
 800b4bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b4c0:	4798      	blx	r3
 800b4c2:	3601      	adds	r6, #1
 800b4c4:	e7ee      	b.n	800b4a4 <__libc_init_array+0xc>
 800b4c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b4ca:	4798      	blx	r3
 800b4cc:	3601      	adds	r6, #1
 800b4ce:	e7f2      	b.n	800b4b6 <__libc_init_array+0x1e>
 800b4d0:	0800b598 	.word	0x0800b598
 800b4d4:	0800b598 	.word	0x0800b598
 800b4d8:	0800b598 	.word	0x0800b598
 800b4dc:	0800b59c 	.word	0x0800b59c

0800b4e0 <memcpy>:
 800b4e0:	440a      	add	r2, r1
 800b4e2:	4291      	cmp	r1, r2
 800b4e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b4e8:	d100      	bne.n	800b4ec <memcpy+0xc>
 800b4ea:	4770      	bx	lr
 800b4ec:	b510      	push	{r4, lr}
 800b4ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b4f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b4f6:	4291      	cmp	r1, r2
 800b4f8:	d1f9      	bne.n	800b4ee <memcpy+0xe>
 800b4fa:	bd10      	pop	{r4, pc}

0800b4fc <memset>:
 800b4fc:	4402      	add	r2, r0
 800b4fe:	4603      	mov	r3, r0
 800b500:	4293      	cmp	r3, r2
 800b502:	d100      	bne.n	800b506 <memset+0xa>
 800b504:	4770      	bx	lr
 800b506:	f803 1b01 	strb.w	r1, [r3], #1
 800b50a:	e7f9      	b.n	800b500 <memset+0x4>

0800b50c <_init>:
 800b50c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b50e:	bf00      	nop
 800b510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b512:	bc08      	pop	{r3}
 800b514:	469e      	mov	lr, r3
 800b516:	4770      	bx	lr

0800b518 <_fini>:
 800b518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b51a:	bf00      	nop
 800b51c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b51e:	bc08      	pop	{r3}
 800b520:	469e      	mov	lr, r3
 800b522:	4770      	bx	lr
