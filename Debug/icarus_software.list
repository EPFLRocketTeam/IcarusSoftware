
icarus_software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aee4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  0800b0b4  0800b0b4  0001b0b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b120  0800b120  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  0800b120  0800b120  0001b120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b128  0800b128  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b128  0800b128  0001b128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b12c  0800b12c  0001b12c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800b130  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006f4c  20000084  0800b1b4  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006fd0  0800b1b4  00026fd0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027cde  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000058f8  00000000  00000000  00047d92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b20  00000000  00000000  0004d690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018d8  00000000  00000000  0004f1b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000276b3  00000000  00000000  00050a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000204fa  00000000  00000000  0007813b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0321  00000000  00000000  00098635  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00178956  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ecc  00000000  00000000  001789ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000084 	.word	0x20000084
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b09c 	.word	0x0800b09c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000088 	.word	0x20000088
 800020c:	0800b09c 	.word	0x0800b09c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000224:	f000 b96e 	b.w	8000504 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468c      	mov	ip, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	f040 8083 	bne.w	8000356 <__udivmoddi4+0x116>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d947      	bls.n	80002e6 <__udivmoddi4+0xa6>
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	b142      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025c:	f1c2 0020 	rsb	r0, r2, #32
 8000260:	fa24 f000 	lsr.w	r0, r4, r0
 8000264:	4091      	lsls	r1, r2
 8000266:	4097      	lsls	r7, r2
 8000268:	ea40 0c01 	orr.w	ip, r0, r1
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbbc f6f8 	udiv	r6, ip, r8
 8000278:	fa1f fe87 	uxth.w	lr, r7
 800027c:	fb08 c116 	mls	r1, r8, r6, ip
 8000280:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000284:	fb06 f10e 	mul.w	r1, r6, lr
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000292:	f080 8119 	bcs.w	80004c8 <__udivmoddi4+0x288>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8116 	bls.w	80004c8 <__udivmoddi4+0x288>
 800029c:	3e02      	subs	r6, #2
 800029e:	443b      	add	r3, r7
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b4:	45a6      	cmp	lr, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002be:	f080 8105 	bcs.w	80004cc <__udivmoddi4+0x28c>
 80002c2:	45a6      	cmp	lr, r4
 80002c4:	f240 8102 	bls.w	80004cc <__udivmoddi4+0x28c>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	2600      	movs	r6, #0
 80002d6:	b11d      	cbz	r5, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c5 4300 	strd	r4, r3, [r5]
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xaa>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	d150      	bne.n	8000394 <__udivmoddi4+0x154>
 80002f2:	1bcb      	subs	r3, r1, r7
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	fa1f f887 	uxth.w	r8, r7
 80002fc:	2601      	movs	r6, #1
 80002fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000302:	0c21      	lsrs	r1, r4, #16
 8000304:	fb0e 331c 	mls	r3, lr, ip, r3
 8000308:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800030c:	fb08 f30c 	mul.w	r3, r8, ip
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000314:	1879      	adds	r1, r7, r1
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0xe2>
 800031c:	428b      	cmp	r3, r1
 800031e:	f200 80e9 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 8000322:	4684      	mov	ip, r0
 8000324:	1ac9      	subs	r1, r1, r3
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000330:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x10c>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x10a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80d9 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e7bf      	b.n	80002d6 <__udivmoddi4+0x96>
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x12e>
 800035a:	2d00      	cmp	r5, #0
 800035c:	f000 80b1 	beq.w	80004c2 <__udivmoddi4+0x282>
 8000360:	2600      	movs	r6, #0
 8000362:	e9c5 0100 	strd	r0, r1, [r5]
 8000366:	4630      	mov	r0, r6
 8000368:	4631      	mov	r1, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f683 	clz	r6, r3
 8000372:	2e00      	cmp	r6, #0
 8000374:	d14a      	bne.n	800040c <__udivmoddi4+0x1cc>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0x140>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80b8 	bhi.w	80004f0 <__udivmoddi4+0x2b0>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0103 	sbc.w	r1, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	468c      	mov	ip, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0a8      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800038e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000394:	f1c2 0320 	rsb	r3, r2, #32
 8000398:	fa20 f603 	lsr.w	r6, r0, r3
 800039c:	4097      	lsls	r7, r2
 800039e:	fa01 f002 	lsl.w	r0, r1, r2
 80003a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a6:	40d9      	lsrs	r1, r3
 80003a8:	4330      	orrs	r0, r6
 80003aa:	0c03      	lsrs	r3, r0, #16
 80003ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b0:	fa1f f887 	uxth.w	r8, r7
 80003b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb06 f108 	mul.w	r1, r6, r8
 80003c0:	4299      	cmp	r1, r3
 80003c2:	fa04 f402 	lsl.w	r4, r4, r2
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x19c>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003ce:	f080 808d 	bcs.w	80004ec <__udivmoddi4+0x2ac>
 80003d2:	4299      	cmp	r1, r3
 80003d4:	f240 808a 	bls.w	80004ec <__udivmoddi4+0x2ac>
 80003d8:	3e02      	subs	r6, #2
 80003da:	443b      	add	r3, r7
 80003dc:	1a5b      	subs	r3, r3, r1
 80003de:	b281      	uxth	r1, r0
 80003e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb00 f308 	mul.w	r3, r0, r8
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x1c4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003fa:	d273      	bcs.n	80004e4 <__udivmoddi4+0x2a4>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d971      	bls.n	80004e4 <__udivmoddi4+0x2a4>
 8000400:	3802      	subs	r0, #2
 8000402:	4439      	add	r1, r7
 8000404:	1acb      	subs	r3, r1, r3
 8000406:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040a:	e778      	b.n	80002fe <__udivmoddi4+0xbe>
 800040c:	f1c6 0c20 	rsb	ip, r6, #32
 8000410:	fa03 f406 	lsl.w	r4, r3, r6
 8000414:	fa22 f30c 	lsr.w	r3, r2, ip
 8000418:	431c      	orrs	r4, r3
 800041a:	fa20 f70c 	lsr.w	r7, r0, ip
 800041e:	fa01 f306 	lsl.w	r3, r1, r6
 8000422:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000426:	fa21 f10c 	lsr.w	r1, r1, ip
 800042a:	431f      	orrs	r7, r3
 800042c:	0c3b      	lsrs	r3, r7, #16
 800042e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000432:	fa1f f884 	uxth.w	r8, r4
 8000436:	fb0e 1119 	mls	r1, lr, r9, r1
 800043a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043e:	fb09 fa08 	mul.w	sl, r9, r8
 8000442:	458a      	cmp	sl, r1
 8000444:	fa02 f206 	lsl.w	r2, r2, r6
 8000448:	fa00 f306 	lsl.w	r3, r0, r6
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x220>
 800044e:	1861      	adds	r1, r4, r1
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000454:	d248      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 8000456:	458a      	cmp	sl, r1
 8000458:	d946      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4421      	add	r1, r4
 8000460:	eba1 010a 	sub.w	r1, r1, sl
 8000464:	b2bf      	uxth	r7, r7
 8000466:	fbb1 f0fe 	udiv	r0, r1, lr
 800046a:	fb0e 1110 	mls	r1, lr, r0, r1
 800046e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45b8      	cmp	r8, r7
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x24a>
 800047a:	19e7      	adds	r7, r4, r7
 800047c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000480:	d22e      	bcs.n	80004e0 <__udivmoddi4+0x2a0>
 8000482:	45b8      	cmp	r8, r7
 8000484:	d92c      	bls.n	80004e0 <__udivmoddi4+0x2a0>
 8000486:	3802      	subs	r0, #2
 8000488:	4427      	add	r7, r4
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba7 0708 	sub.w	r7, r7, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454f      	cmp	r7, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	4649      	mov	r1, r9
 800049c:	d31a      	bcc.n	80004d4 <__udivmoddi4+0x294>
 800049e:	d017      	beq.n	80004d0 <__udivmoddi4+0x290>
 80004a0:	b15d      	cbz	r5, 80004ba <__udivmoddi4+0x27a>
 80004a2:	ebb3 020e 	subs.w	r2, r3, lr
 80004a6:	eb67 0701 	sbc.w	r7, r7, r1
 80004aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ae:	40f2      	lsrs	r2, r6
 80004b0:	ea4c 0202 	orr.w	r2, ip, r2
 80004b4:	40f7      	lsrs	r7, r6
 80004b6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ba:	2600      	movs	r6, #0
 80004bc:	4631      	mov	r1, r6
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e70b      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fd      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d0:	4543      	cmp	r3, r8
 80004d2:	d2e5      	bcs.n	80004a0 <__udivmoddi4+0x260>
 80004d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d8:	eb69 0104 	sbc.w	r1, r9, r4
 80004dc:	3801      	subs	r0, #1
 80004de:	e7df      	b.n	80004a0 <__udivmoddi4+0x260>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e7d2      	b.n	800048a <__udivmoddi4+0x24a>
 80004e4:	4660      	mov	r0, ip
 80004e6:	e78d      	b.n	8000404 <__udivmoddi4+0x1c4>
 80004e8:	4681      	mov	r9, r0
 80004ea:	e7b9      	b.n	8000460 <__udivmoddi4+0x220>
 80004ec:	4666      	mov	r6, ip
 80004ee:	e775      	b.n	80003dc <__udivmoddi4+0x19c>
 80004f0:	4630      	mov	r0, r6
 80004f2:	e74a      	b.n	800038a <__udivmoddi4+0x14a>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	4439      	add	r1, r7
 80004fa:	e713      	b.n	8000324 <__udivmoddi4+0xe4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	443c      	add	r4, r7
 8000500:	e724      	b.n	800034c <__udivmoddi4+0x10c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <pointer_inc>:
volatile int32_t can_buffer_pointer_tx = 0;


uint32_t can_readFrame(void);

uint32_t pointer_inc(uint32_t val, uint32_t size) {
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	6039      	str	r1, [r7, #0]
	return (val + 1) % size;
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	3301      	adds	r3, #1
 8000516:	683a      	ldr	r2, [r7, #0]
 8000518:	fbb3 f2f2 	udiv	r2, r3, r2
 800051c:	6839      	ldr	r1, [r7, #0]
 800051e:	fb01 f202 	mul.w	r2, r1, r2
 8000522:	1a9b      	subs	r3, r3, r2
}
 8000524:	4618      	mov	r0, r3
 8000526:	370c      	adds	r7, #12
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr

08000530 <can_addMsg>:

void can_addMsg(CAN_msg msg) {
 8000530:	b590      	push	{r4, r7, lr}
 8000532:	b085      	sub	sp, #20
 8000534:	af00      	add	r7, sp, #0
 8000536:	463c      	mov	r4, r7
 8000538:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	can_buffer[can_buffer_pointer_tx] = msg;
 800053c:	4b13      	ldr	r3, [pc, #76]	; (800058c <can_addMsg+0x5c>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a13      	ldr	r2, [pc, #76]	; (8000590 <can_addMsg+0x60>)
 8000542:	011b      	lsls	r3, r3, #4
 8000544:	4413      	add	r3, r2
 8000546:	461c      	mov	r4, r3
 8000548:	463b      	mov	r3, r7
 800054a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800054c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	can_buffer_pointer_tx = pointer_inc(can_buffer_pointer_tx, CAN_BUFFER_DEPTH);
 8000550:	4b0e      	ldr	r3, [pc, #56]	; (800058c <can_addMsg+0x5c>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2140      	movs	r1, #64	; 0x40
 8000556:	4618      	mov	r0, r3
 8000558:	f7ff ffd6 	bl	8000508 <pointer_inc>
 800055c:	4603      	mov	r3, r0
 800055e:	461a      	mov	r2, r3
 8000560:	4b0a      	ldr	r3, [pc, #40]	; (800058c <can_addMsg+0x5c>)
 8000562:	601a      	str	r2, [r3, #0]

	if (can_buffer_pointer_tx == can_buffer_pointer_rx) { // indicates overflow
 8000564:	4b09      	ldr	r3, [pc, #36]	; (800058c <can_addMsg+0x5c>)
 8000566:	681a      	ldr	r2, [r3, #0]
 8000568:	4b0a      	ldr	r3, [pc, #40]	; (8000594 <can_addMsg+0x64>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	429a      	cmp	r2, r3
 800056e:	d109      	bne.n	8000584 <can_addMsg+0x54>
		can_buffer_pointer_rx = pointer_inc(can_buffer_pointer_rx, CAN_BUFFER_DEPTH); // skip one msg in the rx buffer
 8000570:	4b08      	ldr	r3, [pc, #32]	; (8000594 <can_addMsg+0x64>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	2140      	movs	r1, #64	; 0x40
 8000576:	4618      	mov	r0, r3
 8000578:	f7ff ffc6 	bl	8000508 <pointer_inc>
 800057c:	4603      	mov	r3, r0
 800057e:	461a      	mov	r2, r3
 8000580:	4b04      	ldr	r3, [pc, #16]	; (8000594 <can_addMsg+0x64>)
 8000582:	601a      	str	r2, [r3, #0]
	}
}
 8000584:	bf00      	nop
 8000586:	3714      	adds	r7, #20
 8000588:	46bd      	mov	sp, r7
 800058a:	bd90      	pop	{r4, r7, pc}
 800058c:	200000a4 	.word	0x200000a4
 8000590:	20006488 	.word	0x20006488
 8000594:	200000a0 	.word	0x200000a0

08000598 <CAN_Config>:

/*
 * Configures CAN protocol for 250kbit/s without interrupt for reading (only polling).
 */
void CAN_Config(uint32_t id)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b08c      	sub	sp, #48	; 0x30
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]

    /*##-1- Configure the CAN peripheral #######################################*/
    // Done in MX_CAN1_Init()

    /*##-2- Configure the CAN Filter ###########################################*/
    sFilterConfig.FilterBank = 0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	61fb      	str	r3, [r7, #28]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80005a4:	2300      	movs	r3, #0
 80005a6:	623b      	str	r3, [r7, #32]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80005a8:	2301      	movs	r3, #1
 80005aa:	627b      	str	r3, [r7, #36]	; 0x24
    sFilterConfig.FilterIdHigh = 0x0000;
 80005ac:	2300      	movs	r3, #0
 80005ae:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterIdLow = 0x0000;
 80005b0:	2300      	movs	r3, #0
 80005b2:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterMaskIdHigh = 0x0000;
 80005b4:	2300      	movs	r3, #0
 80005b6:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterMaskIdLow = 0x0000;
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80005bc:	2300      	movs	r3, #0
 80005be:	61bb      	str	r3, [r7, #24]
    sFilterConfig.FilterActivation = ENABLE;
 80005c0:	2301      	movs	r3, #1
 80005c2:	62bb      	str	r3, [r7, #40]	; 0x28
    sFilterConfig.SlaveStartFilterBank = 14;
 80005c4:	230e      	movs	r3, #14
 80005c6:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 80005c8:	f107 0308 	add.w	r3, r7, #8
 80005cc:	4619      	mov	r1, r3
 80005ce:	4810      	ldr	r0, [pc, #64]	; (8000610 <CAN_Config+0x78>)
 80005d0:	f003 faa6 	bl	8003b20 <HAL_CAN_ConfigFilter>
        /* Filter configuration Error */
        //      _Error_Handler(__FILE__, __LINE__);
    }

    /*##-3- Start the CAN peripheral ###########################################*/
    if (HAL_CAN_Start(&hcan1) != HAL_OK)
 80005d4:	480e      	ldr	r0, [pc, #56]	; (8000610 <CAN_Config+0x78>)
 80005d6:	f003 fb83 	bl	8003ce0 <HAL_CAN_Start>
        /* Start Error */
        //      _Error_Handler(__FILE__, __LINE__);
    }

    /*##-4- Activate CAN RX notification #######################################*/
    if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80005da:	2102      	movs	r1, #2
 80005dc:	480c      	ldr	r0, [pc, #48]	; (8000610 <CAN_Config+0x78>)
 80005de:	f003 fcfd 	bl	8003fdc <HAL_CAN_ActivateNotification>
        /* Notification Error */
    	//_Error_Handler(__FILE__, __LINE__);
    }

    /*##-5- Configure Transmission process #####################################*/
    TxHeader.StdId = id;
 80005e2:	4a0c      	ldr	r2, [pc, #48]	; (8000614 <CAN_Config+0x7c>)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	6013      	str	r3, [r2, #0]
    TxHeader.ExtId = id; // not needed
 80005e8:	4a0a      	ldr	r2, [pc, #40]	; (8000614 <CAN_Config+0x7c>)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	6053      	str	r3, [r2, #4]
    TxHeader.RTR = CAN_RTR_DATA;
 80005ee:	4b09      	ldr	r3, [pc, #36]	; (8000614 <CAN_Config+0x7c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	60da      	str	r2, [r3, #12]
    TxHeader.IDE = CAN_ID_STD;
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <CAN_Config+0x7c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	609a      	str	r2, [r3, #8]
    TxHeader.DLC = 8;
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <CAN_Config+0x7c>)
 80005fc:	2208      	movs	r2, #8
 80005fe:	611a      	str	r2, [r3, #16]
    TxHeader.TransmitGlobalTime = DISABLE;
 8000600:	4b04      	ldr	r3, [pc, #16]	; (8000614 <CAN_Config+0x7c>)
 8000602:	2200      	movs	r2, #0
 8000604:	751a      	strb	r2, [r3, #20]
}
 8000606:	bf00      	nop
 8000608:	3730      	adds	r7, #48	; 0x30
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	20006888 	.word	0x20006888
 8000614:	20006454 	.word	0x20006454

08000618 <HAL_CAN_RxFifo0MsgPendingCallback>:
    } else { // something bad happen
    	// not sure what to do
    }
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	can_readFrame();
 8000620:	f000 f80a 	bl	8000638 <can_readFrame>
	can_addMsg(can_current_msg);
 8000624:	4b03      	ldr	r3, [pc, #12]	; (8000634 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 8000626:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000628:	f7ff ff82 	bl	8000530 <can_addMsg>
}
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20006438 	.word	0x20006438

08000638 <can_readFrame>:
 *
 * byte 0..3 --> some uint32_t
 * byte 4    --> data_id, see CAN_communication.h
 * byte 5..7 --> timestamp
 */
uint32_t can_readFrame(void) {
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
    uint32_t fill_level = HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0);
 800063e:	2100      	movs	r1, #0
 8000640:	482a      	ldr	r0, [pc, #168]	; (80006ec <can_readFrame+0xb4>)
 8000642:	f003 fca3 	bl	8003f8c <HAL_CAN_GetRxFifoFillLevel>
 8000646:	6078      	str	r0, [r7, #4]
    if (fill_level > 0) {
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d049      	beq.n	80006e2 <can_readFrame+0xaa>
        HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData);
 800064e:	4b28      	ldr	r3, [pc, #160]	; (80006f0 <can_readFrame+0xb8>)
 8000650:	4a28      	ldr	r2, [pc, #160]	; (80006f4 <can_readFrame+0xbc>)
 8000652:	2100      	movs	r1, #0
 8000654:	4825      	ldr	r0, [pc, #148]	; (80006ec <can_readFrame+0xb4>)
 8000656:	f003 fb87 	bl	8003d68 <HAL_CAN_GetRxMessage>

        can_current_msg.data = 0;
 800065a:	4b27      	ldr	r3, [pc, #156]	; (80006f8 <can_readFrame+0xc0>)
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
        can_current_msg.data += (uint32_t) RxData[0] << 24;
 8000660:	4b25      	ldr	r3, [pc, #148]	; (80006f8 <can_readFrame+0xc0>)
 8000662:	681a      	ldr	r2, [r3, #0]
 8000664:	4b22      	ldr	r3, [pc, #136]	; (80006f0 <can_readFrame+0xb8>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	061b      	lsls	r3, r3, #24
 800066a:	4413      	add	r3, r2
 800066c:	4a22      	ldr	r2, [pc, #136]	; (80006f8 <can_readFrame+0xc0>)
 800066e:	6013      	str	r3, [r2, #0]
        can_current_msg.data += (uint32_t) RxData[1] << 16;
 8000670:	4b21      	ldr	r3, [pc, #132]	; (80006f8 <can_readFrame+0xc0>)
 8000672:	681a      	ldr	r2, [r3, #0]
 8000674:	4b1e      	ldr	r3, [pc, #120]	; (80006f0 <can_readFrame+0xb8>)
 8000676:	785b      	ldrb	r3, [r3, #1]
 8000678:	041b      	lsls	r3, r3, #16
 800067a:	4413      	add	r3, r2
 800067c:	4a1e      	ldr	r2, [pc, #120]	; (80006f8 <can_readFrame+0xc0>)
 800067e:	6013      	str	r3, [r2, #0]
        can_current_msg.data += (uint32_t) RxData[2] << 8;
 8000680:	4b1d      	ldr	r3, [pc, #116]	; (80006f8 <can_readFrame+0xc0>)
 8000682:	681a      	ldr	r2, [r3, #0]
 8000684:	4b1a      	ldr	r3, [pc, #104]	; (80006f0 <can_readFrame+0xb8>)
 8000686:	789b      	ldrb	r3, [r3, #2]
 8000688:	021b      	lsls	r3, r3, #8
 800068a:	4413      	add	r3, r2
 800068c:	4a1a      	ldr	r2, [pc, #104]	; (80006f8 <can_readFrame+0xc0>)
 800068e:	6013      	str	r3, [r2, #0]
		can_current_msg.data += (uint32_t) RxData[3] << 0;
 8000690:	4b19      	ldr	r3, [pc, #100]	; (80006f8 <can_readFrame+0xc0>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a16      	ldr	r2, [pc, #88]	; (80006f0 <can_readFrame+0xb8>)
 8000696:	78d2      	ldrb	r2, [r2, #3]
 8000698:	4413      	add	r3, r2
 800069a:	4a17      	ldr	r2, [pc, #92]	; (80006f8 <can_readFrame+0xc0>)
 800069c:	6013      	str	r3, [r2, #0]

        can_current_msg.id = RxData[4];
 800069e:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <can_readFrame+0xb8>)
 80006a0:	791a      	ldrb	r2, [r3, #4]
 80006a2:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <can_readFrame+0xc0>)
 80006a4:	711a      	strb	r2, [r3, #4]

        can_current_msg.timestamp = 0;
 80006a6:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <can_readFrame+0xc0>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
        can_current_msg.timestamp += (uint32_t) RxData[5] << 16;
 80006ac:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <can_readFrame+0xc0>)
 80006ae:	689a      	ldr	r2, [r3, #8]
 80006b0:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <can_readFrame+0xb8>)
 80006b2:	795b      	ldrb	r3, [r3, #5]
 80006b4:	041b      	lsls	r3, r3, #16
 80006b6:	4413      	add	r3, r2
 80006b8:	4a0f      	ldr	r2, [pc, #60]	; (80006f8 <can_readFrame+0xc0>)
 80006ba:	6093      	str	r3, [r2, #8]
        can_current_msg.timestamp += (uint32_t) RxData[6] << 8;
 80006bc:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <can_readFrame+0xc0>)
 80006be:	689a      	ldr	r2, [r3, #8]
 80006c0:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <can_readFrame+0xb8>)
 80006c2:	799b      	ldrb	r3, [r3, #6]
 80006c4:	021b      	lsls	r3, r3, #8
 80006c6:	4413      	add	r3, r2
 80006c8:	4a0b      	ldr	r2, [pc, #44]	; (80006f8 <can_readFrame+0xc0>)
 80006ca:	6093      	str	r3, [r2, #8]
		can_current_msg.timestamp += (uint32_t) RxData[7] << 0;
 80006cc:	4b0a      	ldr	r3, [pc, #40]	; (80006f8 <can_readFrame+0xc0>)
 80006ce:	689b      	ldr	r3, [r3, #8]
 80006d0:	4a07      	ldr	r2, [pc, #28]	; (80006f0 <can_readFrame+0xb8>)
 80006d2:	79d2      	ldrb	r2, [r2, #7]
 80006d4:	4413      	add	r3, r2
 80006d6:	4a08      	ldr	r2, [pc, #32]	; (80006f8 <can_readFrame+0xc0>)
 80006d8:	6093      	str	r3, [r2, #8]

        can_current_msg.id_CAN = RxHeader.StdId;
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <can_readFrame+0xbc>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a06      	ldr	r2, [pc, #24]	; (80006f8 <can_readFrame+0xc0>)
 80006e0:	60d3      	str	r3, [r2, #12]
    }
    return fill_level;
 80006e2:	687b      	ldr	r3, [r7, #4]
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20006888 	.word	0x20006888
 80006f0:	2000644c 	.word	0x2000644c
 80006f4:	2000646c 	.word	0x2000646c
 80006f8:	20006438 	.word	0x20006438

080006fc <can_init>:


void can_init(void) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
	CAN_Config(CAN_ID_PROPULSION_BOARD);
 8000700:	2005      	movs	r0, #5
 8000702:	f7ff ff49 	bl	8000598 <CAN_Config>
}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}

0800070a <util_decode_u16>:

static inline uint8_t util_decode_u8(uint8_t * data) {
	return data[0];
}

static inline uint16_t util_decode_u16(uint8_t * data) {
 800070a:	b480      	push	{r7}
 800070c:	b083      	sub	sp, #12
 800070e:	af00      	add	r7, sp, #0
 8000710:	6078      	str	r0, [r7, #4]
	return (uint16_t) data[0] | data[1] << 8;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	b21a      	sxth	r2, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	3301      	adds	r3, #1
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	021b      	lsls	r3, r3, #8
 8000720:	b21b      	sxth	r3, r3
 8000722:	4313      	orrs	r3, r2
 8000724:	b21b      	sxth	r3, r3
 8000726:	b29b      	uxth	r3, r3
}
 8000728:	4618      	mov	r0, r3
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr

08000734 <util_decode_u32>:

static inline uint32_t util_decode_u32(uint8_t * data) {
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
	return (uint32_t) data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	461a      	mov	r2, r3
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	3301      	adds	r3, #1
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	021b      	lsls	r3, r3, #8
 800074a:	4313      	orrs	r3, r2
 800074c:	687a      	ldr	r2, [r7, #4]
 800074e:	3202      	adds	r2, #2
 8000750:	7812      	ldrb	r2, [r2, #0]
 8000752:	0412      	lsls	r2, r2, #16
 8000754:	4313      	orrs	r3, r2
 8000756:	687a      	ldr	r2, [r7, #4]
 8000758:	3203      	adds	r2, #3
 800075a:	7812      	ldrb	r2, [r2, #0]
 800075c:	0612      	lsls	r2, r2, #24
 800075e:	4313      	orrs	r3, r2
}
 8000760:	4618      	mov	r0, r3
 8000762:	370c      	adds	r7, #12
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr

0800076c <util_decode_i32>:

static inline int16_t util_decode_i16(uint8_t * data) {
	return (int16_t) data[0] | data[1] << 8;
}

static inline int32_t util_decode_i32(uint8_t * data) {
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
	return (int32_t) data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	461a      	mov	r2, r3
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	3301      	adds	r3, #1
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	021b      	lsls	r3, r3, #8
 8000782:	431a      	orrs	r2, r3
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	3302      	adds	r3, #2
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	041b      	lsls	r3, r3, #16
 800078c:	431a      	orrs	r2, r3
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	3303      	adds	r3, #3
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	061b      	lsls	r3, r3, #24
 8000796:	4313      	orrs	r3, r2
}
 8000798:	4618      	mov	r0, r3
 800079a:	370c      	adds	r7, #12
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr

080007a4 <cm4_global_init>:

/**********************
 *	DECLARATIONS
 **********************/

void cm4_global_init(void) {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
	cm4_busy_sem = xSemaphoreCreateMutexStatic(&cm4_busy_sem_buffer);
 80007a8:	4904      	ldr	r1, [pc, #16]	; (80007bc <cm4_global_init+0x18>)
 80007aa:	2001      	movs	r0, #1
 80007ac:	f008 fe13 	bl	80093d6 <xQueueCreateMutexStatic>
 80007b0:	4603      	mov	r3, r0
 80007b2:	4a03      	ldr	r2, [pc, #12]	; (80007c0 <cm4_global_init+0x1c>)
 80007b4:	6013      	str	r3, [r2, #0]
}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	200000ac 	.word	0x200000ac
 80007c0:	200000a8 	.word	0x200000a8

080007c4 <cm4_init>:

void cm4_init(CM4_INST_t * cm4) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af02      	add	r7, sp, #8
 80007ca:	6078      	str	r0, [r7, #4]
	static uint32_t id_counter = 0;
	cm4->id = id_counter++;
 80007cc:	4b17      	ldr	r3, [pc, #92]	; (800082c <cm4_init+0x68>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	1c5a      	adds	r2, r3, #1
 80007d2:	4916      	ldr	r1, [pc, #88]	; (800082c <cm4_init+0x68>)
 80007d4:	600a      	str	r2, [r1, #0]
 80007d6:	687a      	ldr	r2, [r7, #4]
 80007d8:	6013      	str	r3, [r2, #0]
	cm4->garbage_counter = 0;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	f503 53a4 	add.w	r3, r3, #5248	; 0x1480
 80007e0:	3304      	adds	r3, #4
 80007e2:	2200      	movs	r2, #0
 80007e4:	801a      	strh	r2, [r3, #0]
	cm4->rx_sem = xSemaphoreCreateBinaryStatic(&cm4->rx_sem_buffer);
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 80007ec:	331c      	adds	r3, #28
 80007ee:	2203      	movs	r2, #3
 80007f0:	9200      	str	r2, [sp, #0]
 80007f2:	2200      	movs	r2, #0
 80007f4:	2100      	movs	r1, #0
 80007f6:	2001      	movs	r0, #1
 80007f8:	f008 fd40 	bl	800927c <xQueueGenericCreateStatic>
 80007fc:	4602      	mov	r2, r0
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8000804:	3318      	adds	r3, #24
 8000806:	601a      	str	r2, [r3, #0]
	msv2_init(&cm4->msv2);
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	3304      	adds	r3, #4
 800080c:	4618      	mov	r0, r3
 800080e:	f001 f997 	bl	8001b40 <msv2_init>
	serial_init(&cm4->ser, &CM4_UART, cm4, cm4_decode_fcn);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	f503 5080 	add.w	r0, r3, #4096	; 0x1000
 8000818:	3018      	adds	r0, #24
 800081a:	4b05      	ldr	r3, [pc, #20]	; (8000830 <cm4_init+0x6c>)
 800081c:	687a      	ldr	r2, [r7, #4]
 800081e:	4905      	ldr	r1, [pc, #20]	; (8000834 <cm4_init+0x70>)
 8000820:	f001 fc62 	bl	80020e8 <serial_init>


}
 8000824:	bf00      	nop
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	200000f4 	.word	0x200000f4
 8000830:	08000839 	.word	0x08000839
 8000834:	20006f88 	.word	0x20006f88

08000838 <cm4_decode_fcn>:


SERIAL_RET_t cm4_decode_fcn(void * inst, uint8_t data) {
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	460b      	mov	r3, r1
 8000842:	70fb      	strb	r3, [r7, #3]
	CM4_INST_t * cm4 = (CM4_INST_t *) inst;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	60fb      	str	r3, [r7, #12]
	MSV2_ERROR_t tmp = msv2_decode_fragment(&cm4->msv2, data);
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	3304      	adds	r3, #4
 800084c:	78fa      	ldrb	r2, [r7, #3]
 800084e:	4611      	mov	r1, r2
 8000850:	4618      	mov	r0, r3
 8000852:	f001 fa6f 	bl	8001d34 <msv2_decode_fragment>
 8000856:	4603      	mov	r3, r0
 8000858:	72fb      	strb	r3, [r7, #11]
	if(tmp == MSV2_SUCCESS || tmp == MSV2_WRONG_CRC) {
 800085a:	7afb      	ldrb	r3, [r7, #11]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d002      	beq.n	8000866 <cm4_decode_fcn+0x2e>
 8000860:	7afb      	ldrb	r3, [r7, #11]
 8000862:	2b02      	cmp	r3, #2
 8000864:	d112      	bne.n	800088c <cm4_decode_fcn+0x54>
		if(cm4->msv2.rx.opcode & 0x80) { //CM4 is master
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	7a1b      	ldrb	r3, [r3, #8]
 800086a:	b25b      	sxtb	r3, r3
 800086c:	2b00      	cmp	r3, #0
 800086e:	da03      	bge.n	8000878 <cm4_decode_fcn+0x40>
			cm4_generate_response(cm4);
 8000870:	68f8      	ldr	r0, [r7, #12]
 8000872:	f000 f811 	bl	8000898 <cm4_generate_response>
 8000876:	e009      	b.n	800088c <cm4_decode_fcn+0x54>
		} else { //HB is master
			xSemaphoreGive(cm4->rx_sem);
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 800087e:	3318      	adds	r3, #24
 8000880:	6818      	ldr	r0, [r3, #0]
 8000882:	2300      	movs	r3, #0
 8000884:	2200      	movs	r2, #0
 8000886:	2100      	movs	r1, #0
 8000888:	f008 fdc0 	bl	800940c <xQueueGenericSend>
		}

	}
	return tmp;
 800088c:	7afb      	ldrb	r3, [r7, #11]
}
 800088e:	4618      	mov	r0, r3
 8000890:	3710      	adds	r7, #16
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <cm4_generate_response>:

void cm4_generate_response(CM4_INST_t * cm4) {
 8000898:	b590      	push	{r4, r7, lr}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
	static uint8_t send_data[MSV2_MAX_DATA_LEN];
	static uint16_t length = 0;
	static uint16_t bin_length = 0;
	uint8_t opcode = cm4->msv2.rx.opcode;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	7a1b      	ldrb	r3, [r3, #8]
 80008a4:	73fb      	strb	r3, [r7, #15]
	opcode &= ~CM4_C2H_PREFIX;
 80008a6:	7bfb      	ldrb	r3, [r7, #15]
 80008a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008ac:	73fb      	strb	r3, [r7, #15]
	if(opcode < response_fcn_max) {
 80008ae:	7bfb      	ldrb	r3, [r7, #15]
 80008b0:	b29a      	uxth	r2, r3
 80008b2:	4b2f      	ldr	r3, [pc, #188]	; (8000970 <cm4_generate_response+0xd8>)
 80008b4:	881b      	ldrh	r3, [r3, #0]
 80008b6:	429a      	cmp	r2, r3
 80008b8:	d22c      	bcs.n	8000914 <cm4_generate_response+0x7c>
		response_fcn[opcode](cm4->msv2.rx.data, cm4->msv2.rx.length, send_data, &length);
 80008ba:	7bfb      	ldrb	r3, [r7, #15]
 80008bc:	4a2d      	ldr	r2, [pc, #180]	; (8000974 <cm4_generate_response+0xdc>)
 80008be:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	f103 0012 	add.w	r0, r3, #18
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	89d9      	ldrh	r1, [r3, #14]
 80008cc:	4b2a      	ldr	r3, [pc, #168]	; (8000978 <cm4_generate_response+0xe0>)
 80008ce:	4a2b      	ldr	r2, [pc, #172]	; (800097c <cm4_generate_response+0xe4>)
 80008d0:	47a0      	blx	r4
		//length is in words
		bin_length = msv2_create_frame(&cm4->msv2, cm4->msv2.rx.opcode, length/2, send_data);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	1d18      	adds	r0, r3, #4
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	7a19      	ldrb	r1, [r3, #8]
 80008da:	4b27      	ldr	r3, [pc, #156]	; (8000978 <cm4_generate_response+0xe0>)
 80008dc:	881b      	ldrh	r3, [r3, #0]
 80008de:	085b      	lsrs	r3, r3, #1
 80008e0:	b29b      	uxth	r3, r3
 80008e2:	b2da      	uxtb	r2, r3
 80008e4:	4b25      	ldr	r3, [pc, #148]	; (800097c <cm4_generate_response+0xe4>)
 80008e6:	f001 f93f 	bl	8001b68 <msv2_create_frame>
 80008ea:	4603      	mov	r3, r0
 80008ec:	461a      	mov	r2, r3
 80008ee:	4b24      	ldr	r3, [pc, #144]	; (8000980 <cm4_generate_response+0xe8>)
 80008f0:	801a      	strh	r2, [r3, #0]
		serial_send(&cm4->ser, msv2_tx_data(&cm4->msv2), bin_length);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	f503 5480 	add.w	r4, r3, #4096	; 0x1000
 80008f8:	3418      	adds	r4, #24
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	3304      	adds	r3, #4
 80008fe:	4618      	mov	r0, r3
 8000900:	f001 fb0c 	bl	8001f1c <msv2_tx_data>
 8000904:	4601      	mov	r1, r0
 8000906:	4b1e      	ldr	r3, [pc, #120]	; (8000980 <cm4_generate_response+0xe8>)
 8000908:	881b      	ldrh	r3, [r3, #0]
 800090a:	461a      	mov	r2, r3
 800090c:	4620      	mov	r0, r4
 800090e:	f001 fc2b 	bl	8002168 <serial_send>
		send_data[1] = MSV2_CRC_ERROR_HI;
		length = 2;
		bin_length = msv2_create_frame(&cm4->msv2, cm4->msv2.rx.opcode, length/2, send_data);
		serial_send(&cm4->ser, msv2_tx_data(&cm4->msv2), bin_length);
	}
}
 8000912:	e028      	b.n	8000966 <cm4_generate_response+0xce>
		send_data[0] = MSV2_CRC_ERROR_LO;
 8000914:	4b19      	ldr	r3, [pc, #100]	; (800097c <cm4_generate_response+0xe4>)
 8000916:	22be      	movs	r2, #190	; 0xbe
 8000918:	701a      	strb	r2, [r3, #0]
		send_data[1] = MSV2_CRC_ERROR_HI;
 800091a:	4b18      	ldr	r3, [pc, #96]	; (800097c <cm4_generate_response+0xe4>)
 800091c:	22eb      	movs	r2, #235	; 0xeb
 800091e:	705a      	strb	r2, [r3, #1]
		length = 2;
 8000920:	4b15      	ldr	r3, [pc, #84]	; (8000978 <cm4_generate_response+0xe0>)
 8000922:	2202      	movs	r2, #2
 8000924:	801a      	strh	r2, [r3, #0]
		bin_length = msv2_create_frame(&cm4->msv2, cm4->msv2.rx.opcode, length/2, send_data);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	1d18      	adds	r0, r3, #4
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	7a19      	ldrb	r1, [r3, #8]
 800092e:	4b12      	ldr	r3, [pc, #72]	; (8000978 <cm4_generate_response+0xe0>)
 8000930:	881b      	ldrh	r3, [r3, #0]
 8000932:	085b      	lsrs	r3, r3, #1
 8000934:	b29b      	uxth	r3, r3
 8000936:	b2da      	uxtb	r2, r3
 8000938:	4b10      	ldr	r3, [pc, #64]	; (800097c <cm4_generate_response+0xe4>)
 800093a:	f001 f915 	bl	8001b68 <msv2_create_frame>
 800093e:	4603      	mov	r3, r0
 8000940:	461a      	mov	r2, r3
 8000942:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <cm4_generate_response+0xe8>)
 8000944:	801a      	strh	r2, [r3, #0]
		serial_send(&cm4->ser, msv2_tx_data(&cm4->msv2), bin_length);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	f503 5480 	add.w	r4, r3, #4096	; 0x1000
 800094c:	3418      	adds	r4, #24
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	3304      	adds	r3, #4
 8000952:	4618      	mov	r0, r3
 8000954:	f001 fae2 	bl	8001f1c <msv2_tx_data>
 8000958:	4601      	mov	r1, r0
 800095a:	4b09      	ldr	r3, [pc, #36]	; (8000980 <cm4_generate_response+0xe8>)
 800095c:	881b      	ldrh	r3, [r3, #0]
 800095e:	461a      	mov	r2, r3
 8000960:	4620      	mov	r0, r4
 8000962:	f001 fc01 	bl	8002168 <serial_send>
}
 8000966:	bf00      	nop
 8000968:	3714      	adds	r7, #20
 800096a:	46bd      	mov	sp, r7
 800096c:	bd90      	pop	{r4, r7, pc}
 800096e:	bf00      	nop
 8000970:	20000008 	.word	0x20000008
 8000974:	20000000 	.word	0x20000000
 8000978:	200002f8 	.word	0x200002f8
 800097c:	200000f8 	.word	0x200000f8
 8000980:	200002fa 	.word	0x200002fa

08000984 <cm4_response_ping>:

static void cm4_response_ping(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	607a      	str	r2, [r7, #4]
 800098e:	603b      	str	r3, [r7, #0]
 8000990:	460b      	mov	r3, r1
 8000992:	817b      	strh	r3, [r7, #10]
	resp[0] = MSV2_OK_LO;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	22c5      	movs	r2, #197	; 0xc5
 8000998:	701a      	strb	r2, [r3, #0]
	resp[1] = MSV2_OK_HI;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	3301      	adds	r3, #1
 800099e:	225c      	movs	r2, #92	; 0x5c
 80009a0:	701a      	strb	r2, [r3, #0]
	*resp_len = 2;
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	2202      	movs	r2, #2
 80009a6:	801a      	strh	r2, [r3, #0]
}
 80009a8:	bf00      	nop
 80009aa:	3714      	adds	r7, #20
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr

080009b4 <cm4_response_command>:

static void cm4_response_command(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 80009b4:	b5b0      	push	{r4, r5, r7, lr}
 80009b6:	b09c      	sub	sp, #112	; 0x70
 80009b8:	af0a      	add	r7, sp, #40	; 0x28
 80009ba:	60f8      	str	r0, [r7, #12]
 80009bc:	607a      	str	r2, [r7, #4]
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	460b      	mov	r3, r1
 80009c2:	817b      	strh	r3, [r7, #10]
	CM4_PAYLOAD_COMMAND_t cmd = {0};
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	2234      	movs	r2, #52	; 0x34
 80009ca:	2100      	movs	r1, #0
 80009cc:	4618      	mov	r0, r3
 80009ce:	f00a fb5d 	bl	800b08c <memset>
	if(data_len == 50) {
 80009d2:	897b      	ldrh	r3, [r7, #10]
 80009d4:	2b32      	cmp	r3, #50	; 0x32
 80009d6:	d172      	bne.n	8000abe <cm4_response_command+0x10a>
		cmd.timestamp = util_decode_u32(data);
 80009d8:	68f8      	ldr	r0, [r7, #12]
 80009da:	f7ff feab 	bl	8000734 <util_decode_u32>
 80009de:	4603      	mov	r3, r0
 80009e0:	617b      	str	r3, [r7, #20]
		cmd.thrust = util_decode_i32(data+4);
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	3304      	adds	r3, #4
 80009e6:	4618      	mov	r0, r3
 80009e8:	f7ff fec0 	bl	800076c <util_decode_i32>
 80009ec:	4603      	mov	r3, r0
 80009ee:	61bb      	str	r3, [r7, #24]

		cmd.dynamixel[0] = util_decode_i32(data+8);
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	3308      	adds	r3, #8
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff feb9 	bl	800076c <util_decode_i32>
 80009fa:	4603      	mov	r3, r0
 80009fc:	61fb      	str	r3, [r7, #28]
		cmd.dynamixel[1] = util_decode_i32(data+12);
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	330c      	adds	r3, #12
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff feb2 	bl	800076c <util_decode_i32>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	623b      	str	r3, [r7, #32]
		cmd.dynamixel[2] = util_decode_i32(data+16);
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	3310      	adds	r3, #16
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff feab 	bl	800076c <util_decode_i32>
 8000a16:	4603      	mov	r3, r0
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
		cmd.dynamixel[3] = util_decode_i32(data+20);
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	3314      	adds	r3, #20
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff fea4 	bl	800076c <util_decode_i32>
 8000a24:	4603      	mov	r3, r0
 8000a26:	62bb      	str	r3, [r7, #40]	; 0x28

		cmd.position[0] = util_decode_i32(data+24);
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	3318      	adds	r3, #24
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff fe9d 	bl	800076c <util_decode_i32>
 8000a32:	4603      	mov	r3, r0
 8000a34:	62fb      	str	r3, [r7, #44]	; 0x2c
		cmd.position[1] = util_decode_i32(data+28);
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	331c      	adds	r3, #28
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff fe96 	bl	800076c <util_decode_i32>
 8000a40:	4603      	mov	r3, r0
 8000a42:	633b      	str	r3, [r7, #48]	; 0x30
		cmd.position[2] = util_decode_i32(data+32);
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	3320      	adds	r3, #32
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff fe8f 	bl	800076c <util_decode_i32>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	637b      	str	r3, [r7, #52]	; 0x34

		cmd.speed[0] = util_decode_i32(data+36);
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	3324      	adds	r3, #36	; 0x24
 8000a56:	4618      	mov	r0, r3
 8000a58:	f7ff fe88 	bl	800076c <util_decode_i32>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	63bb      	str	r3, [r7, #56]	; 0x38
		cmd.speed[1] = util_decode_i32(data+40);
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	3328      	adds	r3, #40	; 0x28
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff fe81 	bl	800076c <util_decode_i32>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
		cmd.speed[2] = util_decode_i32(data+44);
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	332c      	adds	r3, #44	; 0x2c
 8000a72:	4618      	mov	r0, r3
 8000a74:	f7ff fe7a 	bl	800076c <util_decode_i32>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	643b      	str	r3, [r7, #64]	; 0x40

		cmd.state = util_decode_u16(data+48);
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	3330      	adds	r3, #48	; 0x30
 8000a80:	4618      	mov	r0, r3
 8000a82:	f7ff fe42 	bl	800070a <util_decode_u16>
 8000a86:	4603      	mov	r3, r0
 8000a88:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

		control_set_cmd(cmd);
 8000a8c:	466d      	mov	r5, sp
 8000a8e:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000a92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a9a:	6823      	ldr	r3, [r4, #0]
 8000a9c:	602b      	str	r3, [r5, #0]
 8000a9e:	f107 0314 	add.w	r3, r7, #20
 8000aa2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000aa4:	f000 fbb2 	bl	800120c <control_set_cmd>

		resp[0] = MSV2_OK_LO;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	22c5      	movs	r2, #197	; 0xc5
 8000aac:	701a      	strb	r2, [r3, #0]
		resp[1] = MSV2_OK_HI;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	225c      	movs	r2, #92	; 0x5c
 8000ab4:	701a      	strb	r2, [r3, #0]
		*resp_len = 2;
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	2202      	movs	r2, #2
 8000aba:	801a      	strh	r2, [r3, #0]
	} else {
		resp[0] = MSV2_ERROR_LO;
		resp[1] = MSV2_ERROR_HI;
		*resp_len = 2;
	}
}
 8000abc:	e009      	b.n	8000ad2 <cm4_response_command+0x11e>
		resp[0] = MSV2_ERROR_LO;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	22ce      	movs	r2, #206	; 0xce
 8000ac2:	701a      	strb	r2, [r3, #0]
		resp[1] = MSV2_ERROR_HI;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	22ec      	movs	r2, #236	; 0xec
 8000aca:	701a      	strb	r2, [r3, #0]
		*resp_len = 2;
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	2202      	movs	r2, #2
 8000ad0:	801a      	strh	r2, [r3, #0]
}
 8000ad2:	bf00      	nop
 8000ad4:	3748      	adds	r7, #72	; 0x48
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000adc <cm4_send>:



CM4_ERROR_t cm4_send(CM4_INST_t * cm4, uint8_t cmd, uint8_t * data, uint16_t length, uint8_t ** resp_data, uint16_t * resp_len) {
 8000adc:	b590      	push	{r4, r7, lr}
 8000ade:	b087      	sub	sp, #28
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	60f8      	str	r0, [r7, #12]
 8000ae4:	607a      	str	r2, [r7, #4]
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	460b      	mov	r3, r1
 8000aea:	72fb      	strb	r3, [r7, #11]
 8000aec:	4613      	mov	r3, r2
 8000aee:	813b      	strh	r3, [r7, #8]
	if (xSemaphoreTake(cm4_busy_sem, DRIV_TIMEOUT) == pdTRUE) {
 8000af0:	4b50      	ldr	r3, [pc, #320]	; (8000c34 <cm4_send+0x158>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	21c8      	movs	r1, #200	; 0xc8
 8000af6:	4618      	mov	r0, r3
 8000af8:	f008 fe14 	bl	8009724 <xQueueSemaphoreTake>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	f040 8092 	bne.w	8000c28 <cm4_send+0x14c>
		uint16_t frame_length = msv2_create_frame(&cm4->msv2, cmd, length/2, data);
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	1d18      	adds	r0, r3, #4
 8000b08:	893b      	ldrh	r3, [r7, #8]
 8000b0a:	085b      	lsrs	r3, r3, #1
 8000b0c:	b29b      	uxth	r3, r3
 8000b0e:	b2da      	uxtb	r2, r3
 8000b10:	7af9      	ldrb	r1, [r7, #11]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	f001 f828 	bl	8001b68 <msv2_create_frame>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	82fb      	strh	r3, [r7, #22]
		serial_send(&cm4->ser, msv2_tx_data(&cm4->msv2), frame_length);
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	f503 5480 	add.w	r4, r3, #4096	; 0x1000
 8000b22:	3418      	adds	r4, #24
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	3304      	adds	r3, #4
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f001 f9f7 	bl	8001f1c <msv2_tx_data>
 8000b2e:	4601      	mov	r1, r0
 8000b30:	8afb      	ldrh	r3, [r7, #22]
 8000b32:	461a      	mov	r2, r3
 8000b34:	4620      	mov	r0, r4
 8000b36:	f001 fb17 	bl	8002168 <serial_send>
		if(cm4->rx_sem == NULL) {
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8000b40:	3318      	adds	r3, #24
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d108      	bne.n	8000b5a <cm4_send+0x7e>
			xSemaphoreGive(cm4_busy_sem);
 8000b48:	4b3a      	ldr	r3, [pc, #232]	; (8000c34 <cm4_send+0x158>)
 8000b4a:	6818      	ldr	r0, [r3, #0]
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2100      	movs	r1, #0
 8000b52:	f008 fc5b 	bl	800940c <xQueueGenericSend>
			return CM4_LOCAL_ERROR;
 8000b56:	2308      	movs	r3, #8
 8000b58:	e067      	b.n	8000c2a <cm4_send+0x14e>
		}
		if(xSemaphoreTake(cm4->rx_sem, COMM_TIMEOUT) == pdTRUE) {
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8000b60:	3318      	adds	r3, #24
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	210a      	movs	r1, #10
 8000b66:	4618      	mov	r0, r3
 8000b68:	f008 fddc 	bl	8009724 <xQueueSemaphoreTake>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d131      	bne.n	8000bd6 <cm4_send+0xfa>
			cm4->garbage_counter = 0;
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	f503 53a4 	add.w	r3, r3, #5248	; 0x1480
 8000b78:	3304      	adds	r3, #4
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	801a      	strh	r2, [r3, #0]
			if(cm4->msv2.rx.opcode == cmd) {
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	7a1b      	ldrb	r3, [r3, #8]
 8000b82:	7afa      	ldrb	r2, [r7, #11]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d117      	bne.n	8000bb8 <cm4_send+0xdc>
				if(resp_len != NULL && resp_data != NULL) {
 8000b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d00b      	beq.n	8000ba6 <cm4_send+0xca>
 8000b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d008      	beq.n	8000ba6 <cm4_send+0xca>
					*resp_len = cm4->msv2.rx.length;
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	89da      	ldrh	r2, [r3, #14]
 8000b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b9a:	801a      	strh	r2, [r3, #0]
					*resp_data = cm4->msv2.rx.data;
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	f103 0212 	add.w	r2, r3, #18
 8000ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ba4:	601a      	str	r2, [r3, #0]
				}
				xSemaphoreGive(cm4_busy_sem);
 8000ba6:	4b23      	ldr	r3, [pc, #140]	; (8000c34 <cm4_send+0x158>)
 8000ba8:	6818      	ldr	r0, [r3, #0]
 8000baa:	2300      	movs	r3, #0
 8000bac:	2200      	movs	r2, #0
 8000bae:	2100      	movs	r1, #0
 8000bb0:	f008 fc2c 	bl	800940c <xQueueGenericSend>
				return CM4_SUCCESS;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	e038      	b.n	8000c2a <cm4_send+0x14e>
			} else {
				if(resp_len != NULL) {
 8000bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d002      	beq.n	8000bc4 <cm4_send+0xe8>
					*resp_len = 0;
 8000bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	801a      	strh	r2, [r3, #0]
				}
				xSemaphoreGive(cm4_busy_sem);
 8000bc4:	4b1b      	ldr	r3, [pc, #108]	; (8000c34 <cm4_send+0x158>)
 8000bc6:	6818      	ldr	r0, [r3, #0]
 8000bc8:	2300      	movs	r3, #0
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2100      	movs	r1, #0
 8000bce:	f008 fc1d 	bl	800940c <xQueueGenericSend>
				return CM4_REMOTE_ERROR;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	e029      	b.n	8000c2a <cm4_send+0x14e>
			}
		} else {
			cm4->garbage_counter++;
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	f503 53a4 	add.w	r3, r3, #5248	; 0x1480
 8000bdc:	3304      	adds	r3, #4
 8000bde:	881b      	ldrh	r3, [r3, #0]
 8000be0:	3301      	adds	r3, #1
 8000be2:	b29a      	uxth	r2, r3
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	f503 53a4 	add.w	r3, r3, #5248	; 0x1480
 8000bea:	3304      	adds	r3, #4
 8000bec:	801a      	strh	r2, [r3, #0]
			if(cm4->garbage_counter > GARBAGE_THRESHOLD) {
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	f503 53a4 	add.w	r3, r3, #5248	; 0x1480
 8000bf4:	3304      	adds	r3, #4
 8000bf6:	881b      	ldrh	r3, [r3, #0]
 8000bf8:	2b0a      	cmp	r3, #10
 8000bfa:	d90c      	bls.n	8000c16 <cm4_send+0x13a>
				serial_garbage_clean(&cm4->ser);
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000c02:	3318      	adds	r3, #24
 8000c04:	4618      	mov	r0, r3
 8000c06:	f001 fac1 	bl	800218c <serial_garbage_clean>
				cm4->garbage_counter = 0;
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	f503 53a4 	add.w	r3, r3, #5248	; 0x1480
 8000c10:	3304      	adds	r3, #4
 8000c12:	2200      	movs	r2, #0
 8000c14:	801a      	strh	r2, [r3, #0]
			}
			xSemaphoreGive(cm4_busy_sem);
 8000c16:	4b07      	ldr	r3, [pc, #28]	; (8000c34 <cm4_send+0x158>)
 8000c18:	6818      	ldr	r0, [r3, #0]
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	2100      	movs	r1, #0
 8000c20:	f008 fbf4 	bl	800940c <xQueueGenericSend>
			return CM4_TIMEOUT;
 8000c24:	2301      	movs	r3, #1
 8000c26:	e000      	b.n	8000c2a <cm4_send+0x14e>
		}

	} else {
		return CM4_BUSY;
 8000c28:	2304      	movs	r3, #4
	}

}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	371c      	adds	r7, #28
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd90      	pop	{r4, r7, pc}
 8000c32:	bf00      	nop
 8000c34:	200000a8 	.word	0x200000a8

08000c38 <cm4_ping>:

CM4_ERROR_t cm4_ping(CM4_INST_t * cm4) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af02      	add	r7, sp, #8
 8000c3e:	6078      	str	r0, [r7, #4]
	CM4_ERROR_t error = 0;
 8000c40:	2300      	movs	r3, #0
 8000c42:	73fb      	strb	r3, [r7, #15]
	uint8_t data[] = {0xc5, 0x5c};
 8000c44:	f645 43c5 	movw	r3, #23749	; 0x5cc5
 8000c48:	81bb      	strh	r3, [r7, #12]
	error |= cm4_send(cm4, CM4_H2C_PING, data, 2, NULL, NULL);
 8000c4a:	f107 020c 	add.w	r2, r7, #12
 8000c4e:	2300      	movs	r3, #0
 8000c50:	9301      	str	r3, [sp, #4]
 8000c52:	2300      	movs	r3, #0
 8000c54:	9300      	str	r3, [sp, #0]
 8000c56:	2302      	movs	r3, #2
 8000c58:	2100      	movs	r1, #0
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	f7ff ff3e 	bl	8000adc <cm4_send>
 8000c60:	4603      	mov	r3, r0
 8000c62:	461a      	mov	r2, r3
 8000c64:	7bfb      	ldrb	r3, [r7, #15]
 8000c66:	4313      	orrs	r3, r2
 8000c68:	73fb      	strb	r3, [r7, #15]

	return error;
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3710      	adds	r7, #16
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <cm4_boot>:
	//EVENTUAL ACKNOWLEGE

	return error;
}

CM4_ERROR_t cm4_boot(CM4_INST_t * cm4) {
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
	allow_boot();
 8000c7c:	f000 f876 	bl	8000d6c <allow_boot>
	return CM4_SUCCESS;
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <cm4_is_ready>:

CM4_ERROR_t cm4_is_ready(CM4_INST_t * cm4, uint8_t * ready) {
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b082      	sub	sp, #8
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
 8000c92:	6039      	str	r1, [r7, #0]
	if(ready == NULL){
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d101      	bne.n	8000c9e <cm4_is_ready+0x14>
		return CM4_LOCAL_ERROR;
 8000c9a:	2308      	movs	r3, #8
 8000c9c:	e011      	b.n	8000cc2 <cm4_is_ready+0x38>
	}
	*ready = 0;
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	701a      	strb	r2, [r3, #0]
	if(is_booted()) {
 8000ca4:	f000 f850 	bl	8000d48 <is_booted>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d008      	beq.n	8000cc0 <cm4_is_ready+0x36>
		if(cm4_ping(cm4) == CM4_SUCCESS) {
 8000cae:	6878      	ldr	r0, [r7, #4]
 8000cb0:	f7ff ffc2 	bl	8000c38 <cm4_ping>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d102      	bne.n	8000cc0 <cm4_is_ready+0x36>
			*ready = 1;
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	701a      	strb	r2, [r3, #0]
		}
	}
	return CM4_SUCCESS;
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <cm4_shutdown>:

CM4_ERROR_t cm4_shutdown(CM4_INST_t * cm4) {
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b086      	sub	sp, #24
 8000cce:	af02      	add	r7, sp, #8
 8000cd0:	6078      	str	r0, [r7, #4]
	//send shutdown command through uart
	uint8_t data[] = {0x00, 0x00};
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	81bb      	strh	r3, [r7, #12]
	cm4_send(cm4, CM4_H2C_SHUTDOWN, data, 2, NULL, NULL);
 8000cd6:	f107 020c 	add.w	r2, r7, #12
 8000cda:	2300      	movs	r3, #0
 8000cdc:	9301      	str	r3, [sp, #4]
 8000cde:	2300      	movs	r3, #0
 8000ce0:	9300      	str	r3, [sp, #0]
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f7ff fef8 	bl	8000adc <cm4_send>

	return CM4_SUCCESS;
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3710      	adds	r7, #16
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <cm4_is_shutdown>:

CM4_ERROR_t cm4_is_shutdown(CM4_INST_t * cm4, uint8_t * shutdown) {
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b082      	sub	sp, #8
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
 8000cfe:	6039      	str	r1, [r7, #0]
	if(shutdown == NULL){
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d101      	bne.n	8000d0a <cm4_is_shutdown+0x14>
		return CM4_LOCAL_ERROR;
 8000d06:	2308      	movs	r3, #8
 8000d08:	e00f      	b.n	8000d2a <cm4_is_shutdown+0x34>
	}
	if(!is_booted()) {
 8000d0a:	f000 f81d 	bl	8000d48 <is_booted>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d106      	bne.n	8000d22 <cm4_is_shutdown+0x2c>
		//check wheter the CM4 answers
		//if answers
		hold_boot();
 8000d14:	f000 f838 	bl	8000d88 <hold_boot>
		*shutdown = 1;
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	701a      	strb	r2, [r3, #0]
		return CM4_SUCCESS;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	e003      	b.n	8000d2a <cm4_is_shutdown+0x34>
	} else {
		*shutdown = 0;
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	2200      	movs	r2, #0
 8000d26:	701a      	strb	r2, [r3, #0]
		return CM4_SUCCESS;
 8000d28:	2300      	movs	r3, #0
	}
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <cm4_force_shutdown>:


CM4_ERROR_t cm4_force_shutdown(CM4_INST_t * cm4) {
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b082      	sub	sp, #8
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
	hold_boot();
 8000d3a:	f000 f825 	bl	8000d88 <hold_boot>
	return CM4_SUCCESS;
 8000d3e:	2300      	movs	r3, #0
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <is_booted>:



static uint8_t is_booted(void) {
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
	return CM4_RUN_PG_PORT->IDR & CM4_RUN_PG_PIN ?1:0;
 8000d4c:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <is_booted+0x20>)
 8000d4e:	691b      	ldr	r3, [r3, #16]
 8000d50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	bf14      	ite	ne
 8000d58:	2301      	movne	r3, #1
 8000d5a:	2300      	moveq	r3, #0
 8000d5c:	b2db      	uxtb	r3, r3
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	40020400 	.word	0x40020400

08000d6c <allow_boot>:

static void allow_boot(void) {
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
	CM4_GLOBAL_EN_PORT->BSRR = CM4_GLOBAL_EN_PIN;
 8000d70:	4b04      	ldr	r3, [pc, #16]	; (8000d84 <allow_boot+0x18>)
 8000d72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d76:	619a      	str	r2, [r3, #24]
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	40020000 	.word	0x40020000

08000d88 <hold_boot>:

static void hold_boot(void) {
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
	CM4_GLOBAL_EN_PORT->BSRR = CM4_GLOBAL_EN_PIN << 16;
 8000d8c:	4b04      	ldr	r3, [pc, #16]	; (8000da0 <hold_boot+0x18>)
 8000d8e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d92:	619a      	str	r2, [r3, #24]
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	40020000 	.word	0x40020000

08000da4 <control_thread>:

/**********************
 *	DECLARATIONS
 **********************/

void control_thread(void * arg) {
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
	static TickType_t last_wake_time;
	static const TickType_t period = pdMS_TO_TICKS(CONTROL_HEART_BEAT);



	led_init();
 8000dac:	f000 fe48 	bl	8001a40 <led_init>

	init_control(&control);
 8000db0:	4814      	ldr	r0, [pc, #80]	; (8000e04 <control_thread+0x60>)
 8000db2:	f000 f865 	bl	8000e80 <init_control>
	servo_config(&tvc_servo);

	control.tvc_servo = &tvc_servo;
#endif

	cm4_global_init();
 8000db6:	f7ff fcf5 	bl	80007a4 <cm4_global_init>

	static CM4_INST_t cm4;

	cm4_init(&cm4);
 8000dba:	4813      	ldr	r0, [pc, #76]	; (8000e08 <control_thread+0x64>)
 8000dbc:	f7ff fd02 	bl	80007c4 <cm4_init>

	control.cm4 = &cm4;
 8000dc0:	4b10      	ldr	r3, [pc, #64]	; (8000e04 <control_thread+0x60>)
 8000dc2:	4a11      	ldr	r2, [pc, #68]	; (8000e08 <control_thread+0x64>)
 8000dc4:	619a      	str	r2, [r3, #24]


	init_idle(&control);
 8000dc6:	480f      	ldr	r0, [pc, #60]	; (8000e04 <control_thread+0x60>)
 8000dc8:	f000 f86b 	bl	8000ea2 <init_idle>



	last_wake_time = xTaskGetTickCount();
 8000dcc:	f009 f9c4 	bl	800a158 <xTaskGetTickCount>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	4a0e      	ldr	r2, [pc, #56]	; (8000e0c <control_thread+0x68>)
 8000dd4:	6013      	str	r3, [r2, #0]
		} else {
			servo_disable_led(control.tvc_servo, NULL);
		}
#endif

		control_update(&control);
 8000dd6:	480b      	ldr	r0, [pc, #44]	; (8000e04 <control_thread+0x60>)
 8000dd8:	f000 f81e 	bl	8000e18 <control_update>


		if(control.state < CS_NUM && control.state >= 0) {
 8000ddc:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <control_thread+0x60>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	2b05      	cmp	r3, #5
 8000de2:	d807      	bhi.n	8000df4 <control_thread+0x50>
			control_fcn[control.state](&control);
 8000de4:	4b07      	ldr	r3, [pc, #28]	; (8000e04 <control_thread+0x60>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	461a      	mov	r2, r3
 8000dea:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <control_thread+0x6c>)
 8000dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000df0:	4804      	ldr	r0, [pc, #16]	; (8000e04 <control_thread+0x60>)
 8000df2:	4798      	blx	r3
		}
		vTaskDelayUntil( &last_wake_time, period );
 8000df4:	4b07      	ldr	r3, [pc, #28]	; (8000e14 <control_thread+0x70>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4804      	ldr	r0, [pc, #16]	; (8000e0c <control_thread+0x68>)
 8000dfc:	f008 ffee 	bl	8009ddc <vTaskDelayUntil>
		control_update(&control);
 8000e00:	e7e9      	b.n	8000dd6 <control_thread+0x32>
 8000e02:	bf00      	nop
 8000e04:	200002fc 	.word	0x200002fc
 8000e08:	2000038c 	.word	0x2000038c
 8000e0c:	20001814 	.word	0x20001814
 8000e10:	20000030 	.word	0x20000030
 8000e14:	0800b0fc 	.word	0x0800b0fc

08000e18 <control_update>:
	}
}


static void control_update(CONTROL_INST_t * control) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]

	control->last_time = control->time;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	685a      	ldr	r2, [r3, #4]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	609a      	str	r2, [r3, #8]
	control->time = HAL_GetTick();
 8000e28:	f002 fd72 	bl	8003910 <HAL_GetTick>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	605a      	str	r2, [r3, #4]
	control->iter++;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	695b      	ldr	r3, [r3, #20]
 8000e36:	1c5a      	adds	r2, r3, #1
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	615a      	str	r2, [r3, #20]

	if(control->counter_active) {
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	7c1b      	ldrb	r3, [r3, #16]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d00b      	beq.n	8000e5c <control_update+0x44>
		control->counter -= (control->time - control->last_time);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	4619      	mov	r1, r3
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	689a      	ldr	r2, [r3, #8]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	1ad3      	subs	r3, r2, r3
 8000e54:	440b      	add	r3, r1
 8000e56:	461a      	mov	r2, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	60da      	str	r2, [r3, #12]
	servo_sync(control->tvc_servo);
#endif

	//init error if there is an issue with a motor

	if(control_sched_should_run(control, CONTROL_SCHED_ABORT)) {
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f000 fa08 	bl	8001274 <control_sched_should_run>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d006      	beq.n	8000e78 <control_update+0x60>
		init_abort(control);
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f000 f8c6 	bl	8000ffc <init_abort>
		control_sched_done(control, CONTROL_SCHED_ABORT);
 8000e70:	2101      	movs	r1, #1
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f000 fa13 	bl	800129e <control_sched_done>
	}
}
 8000e78:	bf00      	nop
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <init_control>:

static void init_control(CONTROL_INST_t * control) {
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
	control->sched = CONTROL_SCHED_NOTHING;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	control->counter_active = 0;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2200      	movs	r2, #0
 8000e94:	741a      	strb	r2, [r3, #16]
}
 8000e96:	bf00      	nop
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr

08000ea2 <init_idle>:

static void init_idle(CONTROL_INST_t * control) {
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
	control->state = CS_IDLE;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2200      	movs	r2, #0
 8000eae:	701a      	strb	r2, [r3, #0]
	led_set_color(LED_GREEN);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	21ff      	movs	r1, #255	; 0xff
 8000eb4:	2000      	movs	r0, #0
 8000eb6:	f000 fde7 	bl	8001a88 <led_set_color>
	storage_disable();
 8000eba:	f001 faa7 	bl	800240c <storage_disable>
	cm4_force_shutdown(control->cm4);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	699b      	ldr	r3, [r3, #24]
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff ff35 	bl	8000d32 <cm4_force_shutdown>
}
 8000ec8:	bf00      	nop
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <idle>:

static void idle(CONTROL_INST_t * control) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
	if(control_sched_should_run(control, CONTROL_SCHED_MOVE_TVC)) {
		servo_move(control->tvc_servo, control->tvc_mov_target);
		control_sched_done(control, CONTROL_SCHED_MOVE_TVC);
	}
#endif
	if(control_sched_should_run(control, CONTROL_SCHED_BOOT)) {
 8000ed8:	2102      	movs	r1, #2
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f000 f9ca 	bl	8001274 <control_sched_should_run>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d006      	beq.n	8000ef4 <idle+0x24>
		init_boot(control);
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f000 f808 	bl	8000efc <init_boot>
		control_sched_done(control, CONTROL_SCHED_BOOT);
 8000eec:	2102      	movs	r1, #2
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f000 f9d5 	bl	800129e <control_sched_done>
	}

}
 8000ef4:	bf00      	nop
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}

08000efc <init_boot>:

static void init_boot(CONTROL_INST_t * control) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
	//global enable
	//to boot the rpi
	led_set_color(LED_LILA);
 8000f04:	224f      	movs	r2, #79	; 0x4f
 8000f06:	2103      	movs	r1, #3
 8000f08:	20ff      	movs	r0, #255	; 0xff
 8000f0a:	f000 fdbd 	bl	8001a88 <led_set_color>
	control->state = CS_BOOT;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2201      	movs	r2, #1
 8000f12:	701a      	strb	r2, [r3, #0]
	cm4_boot(control->cm4);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff feab 	bl	8000c74 <cm4_boot>
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <boot>:

static void boot(CONTROL_INST_t * control) {
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b084      	sub	sp, #16
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
	//wait for the cm4 to start answering with concluent status packets
	uint8_t ready = 0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	73fb      	strb	r3, [r7, #15]
	cm4_is_ready(control->cm4, &ready);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	699b      	ldr	r3, [r3, #24]
 8000f36:	f107 020f 	add.w	r2, r7, #15
 8000f3a:	4611      	mov	r1, r2
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff fea4 	bl	8000c8a <cm4_is_ready>
	if(ready) {
 8000f42:	7bfb      	ldrb	r3, [r7, #15]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d002      	beq.n	8000f4e <boot+0x28>
		init_compute(control);
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f000 f804 	bl	8000f56 <init_compute>
	}
}
 8000f4e:	bf00      	nop
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <init_compute>:

static void init_compute(CONTROL_INST_t * control) {
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b082      	sub	sp, #8
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
	//start sending data to raspberry pi
	led_set_color(LED_BLUE);
 8000f5e:	22ff      	movs	r2, #255	; 0xff
 8000f60:	2100      	movs	r1, #0
 8000f62:	2000      	movs	r0, #0
 8000f64:	f000 fd90 	bl	8001a88 <led_set_color>
	control->state = CS_COMPUTE;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2202      	movs	r2, #2
 8000f6c:	701a      	strb	r2, [r3, #0]
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <compute>:

static void compute(CONTROL_INST_t * control) {
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]

	if(control_sched_should_run(control, CONTROL_SCHED_SHUTDOWN)) {
 8000f7e:	2103      	movs	r1, #3
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f000 f977 	bl	8001274 <control_sched_should_run>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d006      	beq.n	8000f9a <compute+0x24>
		init_shutdown(control);
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f000 f808 	bl	8000fa2 <init_shutdown>
		control_sched_done(control, CONTROL_SCHED_SHUTDOWN);
 8000f92:	2103      	movs	r1, #3
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f000 f982 	bl	800129e <control_sched_done>
	}
}
 8000f9a:	bf00      	nop
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <init_shutdown>:


static void init_shutdown(CONTROL_INST_t * control) {
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b082      	sub	sp, #8
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
	led_set_color(LED_ORANGE);
 8000faa:	2207      	movs	r2, #7
 8000fac:	210f      	movs	r1, #15
 8000fae:	207f      	movs	r0, #127	; 0x7f
 8000fb0:	f000 fd6a 	bl	8001a88 <led_set_color>
	control->state = CS_SHUTDOWN;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2203      	movs	r2, #3
 8000fb8:	701a      	strb	r2, [r3, #0]
	cm4_shutdown(control->cm4);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	699b      	ldr	r3, [r3, #24]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff fe83 	bl	8000cca <cm4_shutdown>
}
 8000fc4:	bf00      	nop
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <shutdown>:

static void shutdown(CONTROL_INST_t * control) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
	uint8_t shutdown = 0;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	73fb      	strb	r3, [r7, #15]
	cm4_is_shutdown(control->cm4, &shutdown);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	f107 020f 	add.w	r2, r7, #15
 8000fe0:	4611      	mov	r1, r2
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff fe87 	bl	8000cf6 <cm4_is_shutdown>
	if(shutdown) {
 8000fe8:	7bfb      	ldrb	r3, [r7, #15]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d002      	beq.n	8000ff4 <shutdown+0x28>
		init_idle(control);
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f7ff ff57 	bl	8000ea2 <init_idle>
	}
}
 8000ff4:	bf00      	nop
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <init_abort>:

static void init_abort(CONTROL_INST_t * control) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
	led_set_color(LED_PINK);
 8001004:	227f      	movs	r2, #127	; 0x7f
 8001006:	2100      	movs	r1, #0
 8001008:	207f      	movs	r0, #127	; 0x7f
 800100a:	f000 fd3d 	bl	8001a88 <led_set_color>
	control->shadow_state = control->state;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	781a      	ldrb	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	705a      	strb	r2, [r3, #1]
	control->state = CS_ABORT;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2204      	movs	r2, #4
 800101a:	701a      	strb	r2, [r3, #0]
#if USE_DYNAMIXEL == 1
	servo_move(control->tvc_servo, 2048); //2048 is the straight position
#endif
	control->counter_active=0;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2200      	movs	r2, #0
 8001020:	741a      	strb	r2, [r3, #16]
	storage_disable();
 8001022:	f001 f9f3 	bl	800240c <storage_disable>
	cm4_force_shutdown(control->cm4);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	699b      	ldr	r3, [r3, #24]
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff fe81 	bl	8000d32 <cm4_force_shutdown>
}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <_abort>:

static void _abort(CONTROL_INST_t * control) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
	if(control_sched_should_run(control, CONTROL_SCHED_RECOVER)) {
 8001040:	2105      	movs	r1, #5
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f000 f916 	bl	8001274 <control_sched_should_run>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d006      	beq.n	800105c <_abort+0x24>
		init_idle(control);
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f7ff ff27 	bl	8000ea2 <init_idle>
		control_sched_done(control, CONTROL_SCHED_RECOVER);
 8001054:	2105      	movs	r1, #5
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f000 f921 	bl	800129e <control_sched_done>
	}
}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <init_error>:

static void init_error(CONTROL_INST_t * control) {
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
	led_set_color(LED_RED);
 800106c:	2200      	movs	r2, #0
 800106e:	2100      	movs	r1, #0
 8001070:	20ff      	movs	r0, #255	; 0xff
 8001072:	f000 fd09 	bl	8001a88 <led_set_color>
	control->state = CS_ERROR;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2205      	movs	r2, #5
 800107a:	701a      	strb	r2, [r3, #0]
	control->counter_active = 0;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	741a      	strb	r2, [r3, #16]
	storage_disable();
 8001082:	f001 f9c3 	bl	800240c <storage_disable>
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <error>:

static void error(CONTROL_INST_t * control) {
 800108e:	b580      	push	{r7, lr}
 8001090:	b082      	sub	sp, #8
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
	//wait for user release
	if(control_sched_should_run(control, CONTROL_SCHED_RECOVER)) {
 8001096:	2105      	movs	r1, #5
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f000 f8eb 	bl	8001274 <control_sched_should_run>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d006      	beq.n	80010b2 <error+0x24>
		init_idle(control);
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff fefc 	bl	8000ea2 <init_idle>
		control_sched_done(control, CONTROL_SCHED_RECOVER);
 80010aa:	2105      	movs	r1, #5
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f000 f8f6 	bl	800129e <control_sched_done>
	}
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
	...

080010bc <control_move_tvc>:
CONTROL_STATE_t control_get_state() {
	return control.state;
}


void control_move_tvc(int32_t target) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
	control_sched_set(&control, CONTROL_SCHED_MOVE_TVC);
 80010c4:	2104      	movs	r1, #4
 80010c6:	4805      	ldr	r0, [pc, #20]	; (80010dc <control_move_tvc+0x20>)
 80010c8:	f000 f902 	bl	80012d0 <control_sched_set>
	control.tvc_mov_target = target;
 80010cc:	4a03      	ldr	r2, [pc, #12]	; (80010dc <control_move_tvc+0x20>)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6213      	str	r3, [r2, #32]
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	200002fc 	.word	0x200002fc

080010e0 <control_boot>:

void control_boot(void) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
	control_sched_set(&control, CONTROL_SCHED_BOOT);
 80010e4:	2102      	movs	r1, #2
 80010e6:	4802      	ldr	r0, [pc, #8]	; (80010f0 <control_boot+0x10>)
 80010e8:	f000 f8f2 	bl	80012d0 <control_sched_set>
}
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	200002fc 	.word	0x200002fc

080010f4 <control_shutdown>:

void control_shutdown(void) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
	control_sched_set(&control, CONTROL_SCHED_SHUTDOWN);
 80010f8:	2103      	movs	r1, #3
 80010fa:	4802      	ldr	r0, [pc, #8]	; (8001104 <control_shutdown+0x10>)
 80010fc:	f000 f8e8 	bl	80012d0 <control_sched_set>
}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}
 8001104:	200002fc 	.word	0x200002fc

08001108 <control_abort>:

void control_abort() {
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
	control_sched_set(&control, CONTROL_SCHED_ABORT);
 800110c:	2101      	movs	r1, #1
 800110e:	4802      	ldr	r0, [pc, #8]	; (8001118 <control_abort+0x10>)
 8001110:	f000 f8de 	bl	80012d0 <control_sched_set>
}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}
 8001118:	200002fc 	.word	0x200002fc

0800111c <control_recover>:

void control_recover() {
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
	control_sched_set(&control, CONTROL_SCHED_RECOVER);
 8001120:	2105      	movs	r1, #5
 8001122:	4802      	ldr	r0, [pc, #8]	; (800112c <control_recover+0x10>)
 8001124:	f000 f8d4 	bl	80012d0 <control_sched_set>
}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}
 800112c:	200002fc 	.word	0x200002fc

08001130 <control_get_status>:

CONTROL_STATUS_t control_get_status() {
 8001130:	b4b0      	push	{r4, r5, r7}
 8001132:	b089      	sub	sp, #36	; 0x24
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
	CONTROL_STATUS_t status = {0};
 8001138:	f107 0308 	add.w	r3, r7, #8
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
 8001148:	615a      	str	r2, [r3, #20]
	status.state = control.state;
 800114a:	4b17      	ldr	r3, [pc, #92]	; (80011a8 <control_get_status+0x78>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	723b      	strb	r3, [r7, #8]
	status.tvc_error = control.tvc_servo->error;
 8001150:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <control_get_status+0x78>)
 8001152:	69db      	ldr	r3, [r3, #28]
 8001154:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 8001158:	3318      	adds	r3, #24
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	737b      	strb	r3, [r7, #13]
	status.tvc_psu_voltage = control.tvc_servo->psu_voltage;
 800115e:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <control_get_status+0x78>)
 8001160:	69db      	ldr	r3, [r3, #28]
 8001162:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 8001166:	3310      	adds	r3, #16
 8001168:	881b      	ldrh	r3, [r3, #0]
 800116a:	817b      	strh	r3, [r7, #10]
	status.tvc_temperature = control.tvc_servo->temperature;
 800116c:	4b0e      	ldr	r3, [pc, #56]	; (80011a8 <control_get_status+0x78>)
 800116e:	69db      	ldr	r3, [r3, #28]
 8001170:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 8001174:	3312      	adds	r3, #18
 8001176:	f993 3000 	ldrsb.w	r3, [r3]
 800117a:	733b      	strb	r3, [r7, #12]
	status.tvc_position = control.tvc_servo->position;
 800117c:	4b0a      	ldr	r3, [pc, #40]	; (80011a8 <control_get_status+0x78>)
 800117e:	69db      	ldr	r3, [r3, #28]
 8001180:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 8001184:	3314      	adds	r3, #20
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	613b      	str	r3, [r7, #16]

	return status;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	461d      	mov	r5, r3
 800118e:	f107 0408 	add.w	r4, r7, #8
 8001192:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001194:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001196:	e894 0003 	ldmia.w	r4, {r0, r1}
 800119a:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	3724      	adds	r7, #36	; 0x24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bcb0      	pop	{r4, r5, r7}
 80011a6:	4770      	bx	lr
 80011a8:	200002fc 	.word	0x200002fc

080011ac <control_set_sens>:

void control_set_sens(CM4_PAYLOAD_SENSOR_t sens) {
 80011ac:	b084      	sub	sp, #16
 80011ae:	b4b0      	push	{r4, r5, r7}
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	f107 040c 	add.w	r4, r7, #12
 80011b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	control.sensor_payload = sens;
 80011ba:	4b08      	ldr	r3, [pc, #32]	; (80011dc <control_set_sens+0x30>)
 80011bc:	f103 0438 	add.w	r4, r3, #56	; 0x38
 80011c0:	f107 050c 	add.w	r5, r7, #12
 80011c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011cc:	682b      	ldr	r3, [r5, #0]
 80011ce:	6023      	str	r3, [r4, #0]
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bcb0      	pop	{r4, r5, r7}
 80011d6:	b004      	add	sp, #16
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	200002fc 	.word	0x200002fc

080011e0 <control_get_sens>:

CM4_PAYLOAD_SENSOR_t control_get_sens(void) {
 80011e0:	b4b0      	push	{r4, r5, r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
	return control.sensor_payload;
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	4b07      	ldr	r3, [pc, #28]	; (8001208 <control_get_sens+0x28>)
 80011ec:	4615      	mov	r5, r2
 80011ee:	f103 0438 	add.w	r4, r3, #56	; 0x38
 80011f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011fa:	6823      	ldr	r3, [r4, #0]
 80011fc:	602b      	str	r3, [r5, #0]
}
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	bcb0      	pop	{r4, r5, r7}
 8001206:	4770      	bx	lr
 8001208:	200002fc 	.word	0x200002fc

0800120c <control_set_cmd>:

void control_set_cmd(CM4_PAYLOAD_COMMAND_t cmd) {
 800120c:	b084      	sub	sp, #16
 800120e:	b4b0      	push	{r4, r5, r7}
 8001210:	af00      	add	r7, sp, #0
 8001212:	f107 040c 	add.w	r4, r7, #12
 8001216:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	control.command_payload = cmd;
 800121a:	4b09      	ldr	r3, [pc, #36]	; (8001240 <control_set_cmd+0x34>)
 800121c:	f103 045c 	add.w	r4, r3, #92	; 0x5c
 8001220:	f107 050c 	add.w	r5, r7, #12
 8001224:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001226:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001228:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800122a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800122c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800122e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001230:	682b      	ldr	r3, [r5, #0]
 8001232:	6023      	str	r3, [r4, #0]
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	bcb0      	pop	{r4, r5, r7}
 800123a:	b004      	add	sp, #16
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	200002fc 	.word	0x200002fc

08001244 <control_get_cmd>:

CM4_PAYLOAD_COMMAND_t control_get_cmd(void) {
 8001244:	b4b0      	push	{r4, r5, r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
	return control.command_payload;
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	4b08      	ldr	r3, [pc, #32]	; (8001270 <control_get_cmd+0x2c>)
 8001250:	4615      	mov	r5, r2
 8001252:	f103 045c 	add.w	r4, r3, #92	; 0x5c
 8001256:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001258:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800125a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800125c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800125e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001260:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001262:	6823      	ldr	r3, [r4, #0]
 8001264:	602b      	str	r3, [r5, #0]
}
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	bcb0      	pop	{r4, r5, r7}
 800126e:	4770      	bx	lr
 8001270:	200002fc 	.word	0x200002fc

08001274 <control_sched_should_run>:


static uint8_t control_sched_should_run(CONTROL_INST_t * control, CONTROL_SCHED_t num) {
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	460b      	mov	r3, r1
 800127e:	70fb      	strb	r3, [r7, #3]
	return control->sched == num;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001286:	78fa      	ldrb	r2, [r7, #3]
 8001288:	429a      	cmp	r2, r3
 800128a:	bf0c      	ite	eq
 800128c:	2301      	moveq	r3, #1
 800128e:	2300      	movne	r3, #0
 8001290:	b2db      	uxtb	r3, r3
}
 8001292:	4618      	mov	r0, r3
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <control_sched_done>:

static void control_sched_done(CONTROL_INST_t * control, CONTROL_SCHED_t num) {
 800129e:	b580      	push	{r7, lr}
 80012a0:	b082      	sub	sp, #8
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
 80012a6:	460b      	mov	r3, r1
 80012a8:	70fb      	strb	r3, [r7, #3]
	if(control->sched == num) {
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80012b0:	78fa      	ldrb	r2, [r7, #3]
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d104      	bne.n	80012c0 <control_sched_done+0x22>
		control->sched = CONTROL_SCHED_NOTHING;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2200      	movs	r2, #0
 80012ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	} else {
		init_error(control);
	}
}
 80012be:	e002      	b.n	80012c6 <control_sched_done+0x28>
		init_error(control);
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f7ff fecf 	bl	8001064 <init_error>
}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
	...

080012d0 <control_sched_set>:

static void control_sched_set(CONTROL_INST_t * control, CONTROL_SCHED_t num) {
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	460b      	mov	r3, r1
 80012da:	70fb      	strb	r3, [r7, #3]
	if(num == CONTROL_SCHED_ABORT) { //ABORT ALWAYS TAKES OVER
 80012dc:	78fb      	ldrb	r3, [r7, #3]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d103      	bne.n	80012ea <control_sched_set+0x1a>
		control->sched = num;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	78fa      	ldrb	r2, [r7, #3]
 80012e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	}
	if(control->sched == CONTROL_SCHED_NOTHING) {
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d11c      	bne.n	800132e <control_sched_set+0x5e>
		for(uint8_t i = 0; i < SCHED_ALLOWED_WIDTH; i++) {
 80012f4:	2300      	movs	r3, #0
 80012f6:	73fb      	strb	r3, [r7, #15]
 80012f8:	e016      	b.n	8001328 <control_sched_set+0x58>
			if(sched_allowed[control->state][i] == num) {
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	4618      	mov	r0, r3
 8001300:	7bfa      	ldrb	r2, [r7, #15]
 8001302:	490d      	ldr	r1, [pc, #52]	; (8001338 <control_sched_set+0x68>)
 8001304:	4603      	mov	r3, r0
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	4403      	add	r3, r0
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	440b      	add	r3, r1
 800130e:	4413      	add	r3, r2
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	78fa      	ldrb	r2, [r7, #3]
 8001314:	429a      	cmp	r2, r3
 8001316:	d104      	bne.n	8001322 <control_sched_set+0x52>
				control->sched = num;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	78fa      	ldrb	r2, [r7, #3]
 800131c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				return;
 8001320:	e005      	b.n	800132e <control_sched_set+0x5e>
		for(uint8_t i = 0; i < SCHED_ALLOWED_WIDTH; i++) {
 8001322:	7bfb      	ldrb	r3, [r7, #15]
 8001324:	3301      	adds	r3, #1
 8001326:	73fb      	strb	r3, [r7, #15]
 8001328:	7bfb      	ldrb	r3, [r7, #15]
 800132a:	2b05      	cmp	r3, #5
 800132c:	d9e5      	bls.n	80012fa <control_sched_set+0x2a>
			}
		}
	}
}
 800132e:	3714      	adds	r7, #20
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	2000000c 	.word	0x2000000c

0800133c <util_encode_u8>:
static inline void util_encode_u8(uint8_t * data, uint8_t value) {
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	460b      	mov	r3, r1
 8001346:	70fb      	strb	r3, [r7, #3]
	data[0] = value;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	78fa      	ldrb	r2, [r7, #3]
 800134c:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	3301      	adds	r3, #1
 8001352:	2200      	movs	r2, #0
 8001354:	701a      	strb	r2, [r3, #0]
	data[2] = 0x00;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	3302      	adds	r3, #2
 800135a:	2200      	movs	r2, #0
 800135c:	701a      	strb	r2, [r3, #0]
	data[3] = 0x00;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	3303      	adds	r3, #3
 8001362:	2200      	movs	r2, #0
 8001364:	701a      	strb	r2, [r3, #0]
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <util_encode_u16>:
static inline void util_encode_u16(uint8_t * data, uint16_t value) {
 8001372:	b480      	push	{r7}
 8001374:	b083      	sub	sp, #12
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
 800137a:	460b      	mov	r3, r1
 800137c:	807b      	strh	r3, [r7, #2]
	data[0] = value;
 800137e:	887b      	ldrh	r3, [r7, #2]
 8001380:	b2da      	uxtb	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	701a      	strb	r2, [r3, #0]
	data[1] = value>>8;
 8001386:	887b      	ldrh	r3, [r7, #2]
 8001388:	0a1b      	lsrs	r3, r3, #8
 800138a:	b29a      	uxth	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	3301      	adds	r3, #1
 8001390:	b2d2      	uxtb	r2, r2
 8001392:	701a      	strb	r2, [r3, #0]
	data[2] = 0x00;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	3302      	adds	r3, #2
 8001398:	2200      	movs	r2, #0
 800139a:	701a      	strb	r2, [r3, #0]
	data[3] = 0x00;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3303      	adds	r3, #3
 80013a0:	2200      	movs	r2, #0
 80013a2:	701a      	strb	r2, [r3, #0]
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <util_encode_u32>:
static inline void util_encode_u32(uint8_t * data, uint32_t value) {
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
	data[0] = value;
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	b2da      	uxtb	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	701a      	strb	r2, [r3, #0]
	data[1] = value>>8;
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	0a1a      	lsrs	r2, r3, #8
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	3301      	adds	r3, #1
 80013ca:	b2d2      	uxtb	r2, r2
 80013cc:	701a      	strb	r2, [r3, #0]
	data[2] = value>>16;
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	0c1a      	lsrs	r2, r3, #16
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	3302      	adds	r3, #2
 80013d6:	b2d2      	uxtb	r2, r2
 80013d8:	701a      	strb	r2, [r3, #0]
	data[3] = value>>24;
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	0e1a      	lsrs	r2, r3, #24
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	3303      	adds	r3, #3
 80013e2:	b2d2      	uxtb	r2, r2
 80013e4:	701a      	strb	r2, [r3, #0]
}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <util_encode_i8>:
static inline void util_encode_i8(uint8_t * data, int8_t value) {
 80013f2:	b480      	push	{r7}
 80013f4:	b083      	sub	sp, #12
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
 80013fa:	460b      	mov	r3, r1
 80013fc:	70fb      	strb	r3, [r7, #3]
	data[0] = value;
 80013fe:	78fa      	ldrb	r2, [r7, #3]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	3301      	adds	r3, #1
 8001408:	2200      	movs	r2, #0
 800140a:	701a      	strb	r2, [r3, #0]
	data[2] = 0x00;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3302      	adds	r3, #2
 8001410:	2200      	movs	r2, #0
 8001412:	701a      	strb	r2, [r3, #0]
	data[3] = 0x00;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3303      	adds	r3, #3
 8001418:	2200      	movs	r2, #0
 800141a:	701a      	strb	r2, [r3, #0]
}
 800141c:	bf00      	nop
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <util_encode_i32>:
static inline void util_encode_i32(uint8_t * data, int32_t value) {
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
	data[0] = value;
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	b2da      	uxtb	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	701a      	strb	r2, [r3, #0]
	data[1] = value>>8;
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	121a      	asrs	r2, r3, #8
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	3301      	adds	r3, #1
 8001442:	b2d2      	uxtb	r2, r2
 8001444:	701a      	strb	r2, [r3, #0]
	data[2] = value>>16;
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	141a      	asrs	r2, r3, #16
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	3302      	adds	r3, #2
 800144e:	b2d2      	uxtb	r2, r2
 8001450:	701a      	strb	r2, [r3, #0]
	data[3] = value>>24;
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	161a      	asrs	r2, r3, #24
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	3303      	adds	r3, #3
 800145a:	b2d2      	uxtb	r2, r2
 800145c:	701a      	strb	r2, [r3, #0]
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr

0800146a <util_decode_u32>:
static inline uint32_t util_decode_u32(uint8_t * data) {
 800146a:	b480      	push	{r7}
 800146c:	b083      	sub	sp, #12
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
	return (uint32_t) data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	461a      	mov	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	3301      	adds	r3, #1
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	021b      	lsls	r3, r3, #8
 8001480:	4313      	orrs	r3, r2
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	3202      	adds	r2, #2
 8001486:	7812      	ldrb	r2, [r2, #0]
 8001488:	0412      	lsls	r2, r2, #16
 800148a:	4313      	orrs	r3, r2
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	3203      	adds	r2, #3
 8001490:	7812      	ldrb	r2, [r2, #0]
 8001492:	0612      	lsls	r2, r2, #24
 8001494:	4313      	orrs	r3, r2
}
 8001496:	4618      	mov	r0, r3
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr

080014a2 <util_decode_i32>:
static inline int32_t util_decode_i32(uint8_t * data) {
 80014a2:	b480      	push	{r7}
 80014a4:	b083      	sub	sp, #12
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
	return (int32_t) data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	461a      	mov	r2, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	3301      	adds	r3, #1
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	021b      	lsls	r3, r3, #8
 80014b8:	431a      	orrs	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	3302      	adds	r3, #2
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	041b      	lsls	r3, r3, #16
 80014c2:	431a      	orrs	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3303      	adds	r3, #3
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	061b      	lsls	r3, r3, #24
 80014cc:	4313      	orrs	r3, r2
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
	...

080014dc <debug_decode_fcn>:
 *	DECLARATIONS
 **********************/


//Requires an instance of type debug
SERIAL_RET_t debug_decode_fcn(void * inst, uint8_t data) {
 80014dc:	b590      	push	{r4, r7, lr}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	460b      	mov	r3, r1
 80014e6:	70fb      	strb	r3, [r7, #3]
	static uint8_t send_data[MSV2_MAX_DATA_LEN];
	static uint16_t length = 0;
	static uint16_t bin_length = 0;
	DEBUG_INST_t * debug = (DEBUG_INST_t *) inst;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	60fb      	str	r3, [r7, #12]
	MSV2_ERROR_t tmp = msv2_decode_fragment(&debug->msv2, data);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	3304      	adds	r3, #4
 80014f0:	78fa      	ldrb	r2, [r7, #3]
 80014f2:	4611      	mov	r1, r2
 80014f4:	4618      	mov	r0, r3
 80014f6:	f000 fc1d 	bl	8001d34 <msv2_decode_fragment>
 80014fa:	4603      	mov	r3, r0
 80014fc:	72fb      	strb	r3, [r7, #11]

	if(tmp == MSV2_SUCCESS) {
 80014fe:	7afb      	ldrb	r3, [r7, #11]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d15e      	bne.n	80015c2 <debug_decode_fcn+0xe6>
		if(debug->msv2.rx.opcode < debug_fcn_max) {
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	7a1b      	ldrb	r3, [r3, #8]
 8001508:	b29a      	uxth	r2, r3
 800150a:	4b30      	ldr	r3, [pc, #192]	; (80015cc <debug_decode_fcn+0xf0>)
 800150c:	881b      	ldrh	r3, [r3, #0]
 800150e:	429a      	cmp	r2, r3
 8001510:	d22e      	bcs.n	8001570 <debug_decode_fcn+0x94>

			debug_fcn[debug->msv2.rx.opcode](debug->msv2.rx.data, debug->msv2.rx.length, send_data, &length);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	7a1b      	ldrb	r3, [r3, #8]
 8001516:	461a      	mov	r2, r3
 8001518:	4b2d      	ldr	r3, [pc, #180]	; (80015d0 <debug_decode_fcn+0xf4>)
 800151a:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	f103 0012 	add.w	r0, r3, #18
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	89d9      	ldrh	r1, [r3, #14]
 8001528:	4b2a      	ldr	r3, [pc, #168]	; (80015d4 <debug_decode_fcn+0xf8>)
 800152a:	4a2b      	ldr	r2, [pc, #172]	; (80015d8 <debug_decode_fcn+0xfc>)
 800152c:	47a0      	blx	r4
			//length is in words
			bin_length = msv2_create_frame(&debug->msv2, debug->msv2.rx.opcode, length/2, send_data);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	1d18      	adds	r0, r3, #4
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	7a19      	ldrb	r1, [r3, #8]
 8001536:	4b27      	ldr	r3, [pc, #156]	; (80015d4 <debug_decode_fcn+0xf8>)
 8001538:	881b      	ldrh	r3, [r3, #0]
 800153a:	085b      	lsrs	r3, r3, #1
 800153c:	b29b      	uxth	r3, r3
 800153e:	b2da      	uxtb	r2, r3
 8001540:	4b25      	ldr	r3, [pc, #148]	; (80015d8 <debug_decode_fcn+0xfc>)
 8001542:	f000 fb11 	bl	8001b68 <msv2_create_frame>
 8001546:	4603      	mov	r3, r0
 8001548:	461a      	mov	r2, r3
 800154a:	4b24      	ldr	r3, [pc, #144]	; (80015dc <debug_decode_fcn+0x100>)
 800154c:	801a      	strh	r2, [r3, #0]
			serial_send(&debug->ser, msv2_tx_data(&debug->msv2), bin_length);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f503 5480 	add.w	r4, r3, #4096	; 0x1000
 8001554:	3418      	adds	r4, #24
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	3304      	adds	r3, #4
 800155a:	4618      	mov	r0, r3
 800155c:	f000 fcde 	bl	8001f1c <msv2_tx_data>
 8001560:	4601      	mov	r1, r0
 8001562:	4b1e      	ldr	r3, [pc, #120]	; (80015dc <debug_decode_fcn+0x100>)
 8001564:	881b      	ldrh	r3, [r3, #0]
 8001566:	461a      	mov	r2, r3
 8001568:	4620      	mov	r0, r4
 800156a:	f000 fdfd 	bl	8002168 <serial_send>
 800156e:	e028      	b.n	80015c2 <debug_decode_fcn+0xe6>
		} else {
			send_data[0] = CRC_ERROR_LO;
 8001570:	4b19      	ldr	r3, [pc, #100]	; (80015d8 <debug_decode_fcn+0xfc>)
 8001572:	22be      	movs	r2, #190	; 0xbe
 8001574:	701a      	strb	r2, [r3, #0]
			send_data[1] = CRC_ERROR_HI;
 8001576:	4b18      	ldr	r3, [pc, #96]	; (80015d8 <debug_decode_fcn+0xfc>)
 8001578:	22eb      	movs	r2, #235	; 0xeb
 800157a:	705a      	strb	r2, [r3, #1]
			length = 2;
 800157c:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <debug_decode_fcn+0xf8>)
 800157e:	2202      	movs	r2, #2
 8001580:	801a      	strh	r2, [r3, #0]
			bin_length = msv2_create_frame(&debug->msv2, debug->msv2.rx.opcode, length/2, send_data);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	1d18      	adds	r0, r3, #4
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	7a19      	ldrb	r1, [r3, #8]
 800158a:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <debug_decode_fcn+0xf8>)
 800158c:	881b      	ldrh	r3, [r3, #0]
 800158e:	085b      	lsrs	r3, r3, #1
 8001590:	b29b      	uxth	r3, r3
 8001592:	b2da      	uxtb	r2, r3
 8001594:	4b10      	ldr	r3, [pc, #64]	; (80015d8 <debug_decode_fcn+0xfc>)
 8001596:	f000 fae7 	bl	8001b68 <msv2_create_frame>
 800159a:	4603      	mov	r3, r0
 800159c:	461a      	mov	r2, r3
 800159e:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <debug_decode_fcn+0x100>)
 80015a0:	801a      	strh	r2, [r3, #0]
			serial_send(&debug->ser, msv2_tx_data(&debug->msv2), bin_length);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	f503 5480 	add.w	r4, r3, #4096	; 0x1000
 80015a8:	3418      	adds	r4, #24
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	3304      	adds	r3, #4
 80015ae:	4618      	mov	r0, r3
 80015b0:	f000 fcb4 	bl	8001f1c <msv2_tx_data>
 80015b4:	4601      	mov	r1, r0
 80015b6:	4b09      	ldr	r3, [pc, #36]	; (80015dc <debug_decode_fcn+0x100>)
 80015b8:	881b      	ldrh	r3, [r3, #0]
 80015ba:	461a      	mov	r2, r3
 80015bc:	4620      	mov	r0, r4
 80015be:	f000 fdd3 	bl	8002168 <serial_send>
		}
	}

	return tmp;
 80015c2:	7afb      	ldrb	r3, [r7, #11]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3714      	adds	r7, #20
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd90      	pop	{r4, r7, pc}
 80015cc:	20000070 	.word	0x20000070
 80015d0:	20000048 	.word	0x20000048
 80015d4:	20001a18 	.word	0x20001a18
 80015d8:	20001818 	.word	0x20001818
 80015dc:	20001a1a 	.word	0x20001a1a

080015e0 <debug_init>:

void debug_init(DEBUG_INST_t * debug) {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
	static uint32_t id_counter = 0;
	msv2_init(&debug->msv2);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	3304      	adds	r3, #4
 80015ec:	4618      	mov	r0, r3
 80015ee:	f000 faa7 	bl	8001b40 <msv2_init>
	serial_init(&debug->ser, &DEBUG_UART, debug, debug_decode_fcn);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f503 5080 	add.w	r0, r3, #4096	; 0x1000
 80015f8:	3018      	adds	r0, #24
 80015fa:	4b08      	ldr	r3, [pc, #32]	; (800161c <debug_init+0x3c>)
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	4908      	ldr	r1, [pc, #32]	; (8001620 <debug_init+0x40>)
 8001600:	f000 fd72 	bl	80020e8 <serial_init>
	debug->id = id_counter++;
 8001604:	4b07      	ldr	r3, [pc, #28]	; (8001624 <debug_init+0x44>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	1c5a      	adds	r2, r3, #1
 800160a:	4906      	ldr	r1, [pc, #24]	; (8001624 <debug_init+0x44>)
 800160c:	600a      	str	r2, [r1, #0]
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	6013      	str	r3, [r2, #0]
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	080014dd 	.word	0x080014dd
 8001620:	20006d80 	.word	0x20006d80
 8001624:	20001a1c 	.word	0x20001a1c

08001628 <debug_get_status>:

static void debug_get_status(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 8001628:	b580      	push	{r7, lr}
 800162a:	b08c      	sub	sp, #48	; 0x30
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	607a      	str	r2, [r7, #4]
 8001632:	603b      	str	r3, [r7, #0]
 8001634:	460b      	mov	r3, r1
 8001636:	817b      	strh	r3, [r7, #10]
	CONTROL_STATUS_t status = control_get_status();
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff fd77 	bl	8001130 <control_get_status>
	util_encode_u16(resp, status.state);
 8001642:	7d3b      	ldrb	r3, [r7, #20]
 8001644:	b29b      	uxth	r3, r3
 8001646:	4619      	mov	r1, r3
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f7ff fe92 	bl	8001372 <util_encode_u16>
	util_encode_u16(resp+2, 0); //padding
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	3302      	adds	r3, #2
 8001652:	2100      	movs	r1, #0
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff fe8c 	bl	8001372 <util_encode_u16>
	util_encode_i32(resp+4, status.counter);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	3304      	adds	r3, #4
 800165e:	6a3a      	ldr	r2, [r7, #32]
 8001660:	4611      	mov	r1, r2
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff fee0 	bl	8001428 <util_encode_i32>
	uint32_t memory = storage_get_used();
 8001668:	f000 feac 	bl	80023c4 <storage_get_used>
 800166c:	62f8      	str	r0, [r7, #44]	; 0x2c
	util_encode_u32(resp+8, memory);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	3308      	adds	r3, #8
 8001672:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff fe9b 	bl	80013b0 <util_encode_u32>
	util_encode_i32(resp+12, status.tvc_position);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	330c      	adds	r3, #12
 800167e:	69fa      	ldr	r2, [r7, #28]
 8001680:	4611      	mov	r1, r2
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff fed0 	bl	8001428 <util_encode_i32>
	util_encode_u16(resp+16, status.tvc_psu_voltage);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3310      	adds	r3, #16
 800168c:	8afa      	ldrh	r2, [r7, #22]
 800168e:	4611      	mov	r1, r2
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fe6e 	bl	8001372 <util_encode_u16>
	util_encode_u8(resp+18, status.tvc_error);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	3312      	adds	r3, #18
 800169a:	7e7a      	ldrb	r2, [r7, #25]
 800169c:	4611      	mov	r1, r2
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff fe4c 	bl	800133c <util_encode_u8>
	util_encode_i8(resp+19, status.tvc_temperature);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	3313      	adds	r3, #19
 80016a8:	f997 2018 	ldrsb.w	r2, [r7, #24]
 80016ac:	4611      	mov	r1, r2
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff fe9f 	bl	80013f2 <util_encode_i8>
	*resp_len = 20;
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	2214      	movs	r2, #20
 80016b8:	801a      	strh	r2, [r3, #0]
}
 80016ba:	bf00      	nop
 80016bc:	3730      	adds	r7, #48	; 0x30
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <debug_boot>:

static void debug_boot(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b084      	sub	sp, #16
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	60f8      	str	r0, [r7, #12]
 80016ca:	607a      	str	r2, [r7, #4]
 80016cc:	603b      	str	r3, [r7, #0]
 80016ce:	460b      	mov	r3, r1
 80016d0:	817b      	strh	r3, [r7, #10]
	control_boot();
 80016d2:	f7ff fd05 	bl	80010e0 <control_boot>
	resp[0] = OK_LO;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	22c5      	movs	r2, #197	; 0xc5
 80016da:	701a      	strb	r2, [r3, #0]
	resp[1] = OK_HI;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	3301      	adds	r3, #1
 80016e0:	225c      	movs	r2, #92	; 0x5c
 80016e2:	701a      	strb	r2, [r3, #0]
	*resp_len = 2;
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	2202      	movs	r2, #2
 80016e8:	801a      	strh	r2, [r3, #0]
}
 80016ea:	bf00      	nop
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <debug_shutdown>:


static void debug_shutdown(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b084      	sub	sp, #16
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	60f8      	str	r0, [r7, #12]
 80016fa:	607a      	str	r2, [r7, #4]
 80016fc:	603b      	str	r3, [r7, #0]
 80016fe:	460b      	mov	r3, r1
 8001700:	817b      	strh	r3, [r7, #10]
	control_shutdown();
 8001702:	f7ff fcf7 	bl	80010f4 <control_shutdown>
	resp[0] = OK_LO;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	22c5      	movs	r2, #197	; 0xc5
 800170a:	701a      	strb	r2, [r3, #0]
	resp[1] = OK_HI;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	3301      	adds	r3, #1
 8001710:	225c      	movs	r2, #92	; 0x5c
 8001712:	701a      	strb	r2, [r3, #0]
	*resp_len = 2;
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	2202      	movs	r2, #2
 8001718:	801a      	strh	r2, [r3, #0]
}
 800171a:	bf00      	nop
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <debug_download>:

static void debug_download(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 8001722:	b580      	push	{r7, lr}
 8001724:	b086      	sub	sp, #24
 8001726:	af00      	add	r7, sp, #0
 8001728:	60f8      	str	r0, [r7, #12]
 800172a:	607a      	str	r2, [r7, #4]
 800172c:	603b      	str	r3, [r7, #0]
 800172e:	460b      	mov	r3, r1
 8001730:	817b      	strh	r3, [r7, #10]
	//downloads 5 samples at a certain location
	if(data_len == DOWNLOAD_LEN) {
 8001732:	897b      	ldrh	r3, [r7, #10]
 8001734:	2b04      	cmp	r3, #4
 8001736:	d11b      	bne.n	8001770 <debug_download+0x4e>
		uint32_t location = util_decode_u32(data);
 8001738:	68f8      	ldr	r0, [r7, #12]
 800173a:	f7ff fe96 	bl	800146a <util_decode_u32>
 800173e:	6138      	str	r0, [r7, #16]
		for(uint8_t i = 0; i < 5; i++) {
 8001740:	2300      	movs	r3, #0
 8001742:	75fb      	strb	r3, [r7, #23]
 8001744:	e00e      	b.n	8001764 <debug_download+0x42>
			storage_get_sample(location+i, resp+i*32);
 8001746:	7dfa      	ldrb	r2, [r7, #23]
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	441a      	add	r2, r3
 800174c:	7dfb      	ldrb	r3, [r7, #23]
 800174e:	015b      	lsls	r3, r3, #5
 8001750:	4619      	mov	r1, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	440b      	add	r3, r1
 8001756:	4619      	mov	r1, r3
 8001758:	4610      	mov	r0, r2
 800175a:	f000 fe3f 	bl	80023dc <storage_get_sample>
		for(uint8_t i = 0; i < 5; i++) {
 800175e:	7dfb      	ldrb	r3, [r7, #23]
 8001760:	3301      	adds	r3, #1
 8001762:	75fb      	strb	r3, [r7, #23]
 8001764:	7dfb      	ldrb	r3, [r7, #23]
 8001766:	2b04      	cmp	r3, #4
 8001768:	d9ed      	bls.n	8001746 <debug_download+0x24>
		}
		*resp_len = 32*5;
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	22a0      	movs	r2, #160	; 0xa0
 800176e:	801a      	strh	r2, [r3, #0]
	}
}
 8001770:	bf00      	nop
 8001772:	3718      	adds	r7, #24
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <debug_tvc_move>:

static void debug_tvc_move(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	607a      	str	r2, [r7, #4]
 8001782:	603b      	str	r3, [r7, #0]
 8001784:	460b      	mov	r3, r1
 8001786:	817b      	strh	r3, [r7, #10]
	if(data_len == TVC_MOVE_LEN) {
 8001788:	897b      	ldrh	r3, [r7, #10]
 800178a:	2b04      	cmp	r3, #4
 800178c:	d111      	bne.n	80017b2 <debug_tvc_move+0x3a>
		int32_t target = util_decode_i32(data);
 800178e:	68f8      	ldr	r0, [r7, #12]
 8001790:	f7ff fe87 	bl	80014a2 <util_decode_i32>
 8001794:	6178      	str	r0, [r7, #20]
		control_move_tvc(target);
 8001796:	6978      	ldr	r0, [r7, #20]
 8001798:	f7ff fc90 	bl	80010bc <control_move_tvc>
		resp[0] = OK_LO;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	22c5      	movs	r2, #197	; 0xc5
 80017a0:	701a      	strb	r2, [r3, #0]
		resp[1] = OK_HI;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	3301      	adds	r3, #1
 80017a6:	225c      	movs	r2, #92	; 0x5c
 80017a8:	701a      	strb	r2, [r3, #0]
		*resp_len = 2;
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	2202      	movs	r2, #2
 80017ae:	801a      	strh	r2, [r3, #0]
	} else {
		resp[0] = ERROR_LO;
		resp[1] = ERROR_HI;
		*resp_len = 2;
	}
}
 80017b0:	e009      	b.n	80017c6 <debug_tvc_move+0x4e>
		resp[0] = ERROR_LO;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	22ce      	movs	r2, #206	; 0xce
 80017b6:	701a      	strb	r2, [r3, #0]
		resp[1] = ERROR_HI;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3301      	adds	r3, #1
 80017bc:	22ec      	movs	r2, #236	; 0xec
 80017be:	701a      	strb	r2, [r3, #0]
		*resp_len = 2;
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	2202      	movs	r2, #2
 80017c4:	801a      	strh	r2, [r3, #0]
}
 80017c6:	bf00      	nop
 80017c8:	3718      	adds	r7, #24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <debug_abort>:

static void debug_abort(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b084      	sub	sp, #16
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	60f8      	str	r0, [r7, #12]
 80017d6:	607a      	str	r2, [r7, #4]
 80017d8:	603b      	str	r3, [r7, #0]
 80017da:	460b      	mov	r3, r1
 80017dc:	817b      	strh	r3, [r7, #10]
	control_abort();
 80017de:	f7ff fc93 	bl	8001108 <control_abort>
	resp[0] = OK_LO;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	22c5      	movs	r2, #197	; 0xc5
 80017e6:	701a      	strb	r2, [r3, #0]
	resp[1] = OK_HI;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3301      	adds	r3, #1
 80017ec:	225c      	movs	r2, #92	; 0x5c
 80017ee:	701a      	strb	r2, [r3, #0]
	*resp_len = 2;
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	2202      	movs	r2, #2
 80017f4:	801a      	strh	r2, [r3, #0]
}
 80017f6:	bf00      	nop
 80017f8:	3710      	adds	r7, #16
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <debug_recover>:

static void debug_recover(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 80017fe:	b580      	push	{r7, lr}
 8001800:	b084      	sub	sp, #16
 8001802:	af00      	add	r7, sp, #0
 8001804:	60f8      	str	r0, [r7, #12]
 8001806:	607a      	str	r2, [r7, #4]
 8001808:	603b      	str	r3, [r7, #0]
 800180a:	460b      	mov	r3, r1
 800180c:	817b      	strh	r3, [r7, #10]
	control_recover();
 800180e:	f7ff fc85 	bl	800111c <control_recover>
	resp[0] = OK_LO;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	22c5      	movs	r2, #197	; 0xc5
 8001816:	701a      	strb	r2, [r3, #0]
	resp[1] = OK_HI;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3301      	adds	r3, #1
 800181c:	225c      	movs	r2, #92	; 0x5c
 800181e:	701a      	strb	r2, [r3, #0]
	*resp_len = 2;
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	2202      	movs	r2, #2
 8001824:	801a      	strh	r2, [r3, #0]
}
 8001826:	bf00      	nop
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <debug_sensor_write>:

static void debug_sensor_write(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 800182e:	b5b0      	push	{r4, r5, r7, lr}
 8001830:	b094      	sub	sp, #80	; 0x50
 8001832:	af06      	add	r7, sp, #24
 8001834:	60f8      	str	r0, [r7, #12]
 8001836:	607a      	str	r2, [r7, #4]
 8001838:	603b      	str	r3, [r7, #0]
 800183a:	460b      	mov	r3, r1
 800183c:	817b      	strh	r3, [r7, #10]
	if(data_len == TRANSACTION_SENS_LEN) {
 800183e:	897b      	ldrh	r3, [r7, #10]
 8001840:	2b20      	cmp	r3, #32
 8001842:	d145      	bne.n	80018d0 <debug_sensor_write+0xa2>
		CM4_PAYLOAD_SENSOR_t sens_data = {0};
 8001844:	f107 0314 	add.w	r3, r7, #20
 8001848:	2224      	movs	r2, #36	; 0x24
 800184a:	2100      	movs	r1, #0
 800184c:	4618      	mov	r0, r3
 800184e:	f009 fc1d 	bl	800b08c <memset>
		sens_data.acc_x = util_decode_i32(data);
 8001852:	68f8      	ldr	r0, [r7, #12]
 8001854:	f7ff fe25 	bl	80014a2 <util_decode_i32>
 8001858:	4603      	mov	r3, r0
 800185a:	61bb      	str	r3, [r7, #24]
		sens_data.acc_y = util_decode_i32(data+4);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	3304      	adds	r3, #4
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff fe1e 	bl	80014a2 <util_decode_i32>
 8001866:	4603      	mov	r3, r0
 8001868:	61fb      	str	r3, [r7, #28]
		sens_data.acc_z = util_decode_i32(data+8);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	3308      	adds	r3, #8
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff fe17 	bl	80014a2 <util_decode_i32>
 8001874:	4603      	mov	r3, r0
 8001876:	623b      	str	r3, [r7, #32]

		sens_data.gyro_x = util_decode_i32(data+12);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	330c      	adds	r3, #12
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff fe10 	bl	80014a2 <util_decode_i32>
 8001882:	4603      	mov	r3, r0
 8001884:	627b      	str	r3, [r7, #36]	; 0x24
		sens_data.gyro_y = util_decode_i32(data+16);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	3310      	adds	r3, #16
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff fe09 	bl	80014a2 <util_decode_i32>
 8001890:	4603      	mov	r3, r0
 8001892:	62bb      	str	r3, [r7, #40]	; 0x28
		sens_data.gyro_z = util_decode_i32(data+20);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	3314      	adds	r3, #20
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff fe02 	bl	80014a2 <util_decode_i32>
 800189e:	4603      	mov	r3, r0
 80018a0:	62fb      	str	r3, [r7, #44]	; 0x2c

		sens_data.baro = util_decode_i32(data+24);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	3318      	adds	r3, #24
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff fdfb 	bl	80014a2 <util_decode_i32>
 80018ac:	4603      	mov	r3, r0
 80018ae:	633b      	str	r3, [r7, #48]	; 0x30

		control_set_sens(sens_data);
 80018b0:	466d      	mov	r5, sp
 80018b2:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80018b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018ba:	6823      	ldr	r3, [r4, #0]
 80018bc:	602b      	str	r3, [r5, #0]
 80018be:	f107 0314 	add.w	r3, r7, #20
 80018c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018c4:	f7ff fc72 	bl	80011ac <control_set_sens>


		*resp_len = 2;
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	2202      	movs	r2, #2
 80018cc:	801a      	strh	r2, [r3, #0]
	} else {
		resp[0] = ERROR_LO;
		resp[1] = ERROR_HI;
		*resp_len = 2;
	}
}
 80018ce:	e009      	b.n	80018e4 <debug_sensor_write+0xb6>
		resp[0] = ERROR_LO;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	22ce      	movs	r2, #206	; 0xce
 80018d4:	701a      	strb	r2, [r3, #0]
		resp[1] = ERROR_HI;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	3301      	adds	r3, #1
 80018da:	22ec      	movs	r2, #236	; 0xec
 80018dc:	701a      	strb	r2, [r3, #0]
		*resp_len = 2;
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	2202      	movs	r2, #2
 80018e2:	801a      	strh	r2, [r3, #0]
}
 80018e4:	bf00      	nop
 80018e6:	3738      	adds	r7, #56	; 0x38
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bdb0      	pop	{r4, r5, r7, pc}

080018ec <debug_command_read>:

static void debug_command_read(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b092      	sub	sp, #72	; 0x48
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	607a      	str	r2, [r7, #4]
 80018f6:	603b      	str	r3, [r7, #0]
 80018f8:	460b      	mov	r3, r1
 80018fa:	817b      	strh	r3, [r7, #10]

	CM4_PAYLOAD_COMMAND_t cmd_data = control_get_cmd();
 80018fc:	f107 0314 	add.w	r3, r7, #20
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff fc9f 	bl	8001244 <control_get_cmd>

	util_encode_i32(resp, cmd_data.thrust);
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	4619      	mov	r1, r3
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f7ff fd8c 	bl	8001428 <util_encode_i32>
	util_encode_i32(resp+4, cmd_data.dynamixel[0]);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3304      	adds	r3, #4
 8001914:	69fa      	ldr	r2, [r7, #28]
 8001916:	4611      	mov	r1, r2
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff fd85 	bl	8001428 <util_encode_i32>
	util_encode_i32(resp+8, cmd_data.dynamixel[1]);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	3308      	adds	r3, #8
 8001922:	6a3a      	ldr	r2, [r7, #32]
 8001924:	4611      	mov	r1, r2
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff fd7e 	bl	8001428 <util_encode_i32>
	util_encode_i32(resp+12, cmd_data.dynamixel[2]);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	330c      	adds	r3, #12
 8001930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001932:	4611      	mov	r1, r2
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff fd77 	bl	8001428 <util_encode_i32>
	util_encode_i32(resp+16, cmd_data.dynamixel[3]);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	3310      	adds	r3, #16
 800193e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001940:	4611      	mov	r1, r2
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff fd70 	bl	8001428 <util_encode_i32>

	util_encode_i32(resp+20, cmd_data.position[0]);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3314      	adds	r3, #20
 800194c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800194e:	4611      	mov	r1, r2
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff fd69 	bl	8001428 <util_encode_i32>
	util_encode_i32(resp+24, cmd_data.position[1]);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	3318      	adds	r3, #24
 800195a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800195c:	4611      	mov	r1, r2
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff fd62 	bl	8001428 <util_encode_i32>
	util_encode_i32(resp+28, cmd_data.position[2]);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	331c      	adds	r3, #28
 8001968:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800196a:	4611      	mov	r1, r2
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff fd5b 	bl	8001428 <util_encode_i32>

	util_encode_i32(resp+32, cmd_data.speed[0]);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	3320      	adds	r3, #32
 8001976:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001978:	4611      	mov	r1, r2
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff fd54 	bl	8001428 <util_encode_i32>
	util_encode_i32(resp+36, cmd_data.speed[1]);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3324      	adds	r3, #36	; 0x24
 8001984:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001986:	4611      	mov	r1, r2
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff fd4d 	bl	8001428 <util_encode_i32>
	util_encode_i32(resp+40, cmd_data.speed[2]);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	3328      	adds	r3, #40	; 0x28
 8001992:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001994:	4611      	mov	r1, r2
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff fd46 	bl	8001428 <util_encode_i32>

	util_encode_i32(resp+44, cmd_data.state);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	332c      	adds	r3, #44	; 0x2c
 80019a0:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80019a4:	4611      	mov	r1, r2
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff fd3e 	bl	8001428 <util_encode_i32>

	*resp_len = TRANSACTION_CMD_LEN;
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	222e      	movs	r2, #46	; 0x2e
 80019b0:	801a      	strh	r2, [r3, #0]

}
 80019b2:	bf00      	nop
 80019b4:	3748      	adds	r7, #72	; 0x48
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <debug_sensor_read>:

static void debug_sensor_read(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b08e      	sub	sp, #56	; 0x38
 80019be:	af00      	add	r7, sp, #0
 80019c0:	60f8      	str	r0, [r7, #12]
 80019c2:	607a      	str	r2, [r7, #4]
 80019c4:	603b      	str	r3, [r7, #0]
 80019c6:	460b      	mov	r3, r1
 80019c8:	817b      	strh	r3, [r7, #10]

	CM4_PAYLOAD_SENSOR_t sens_data = control_get_sens();
 80019ca:	f107 0314 	add.w	r3, r7, #20
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff fc06 	bl	80011e0 <control_get_sens>

	util_encode_i32(resp, sens_data.acc_x);
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	4619      	mov	r1, r3
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f7ff fd25 	bl	8001428 <util_encode_i32>
	util_encode_i32(resp+4, sens_data.acc_y);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	3304      	adds	r3, #4
 80019e2:	69fa      	ldr	r2, [r7, #28]
 80019e4:	4611      	mov	r1, r2
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff fd1e 	bl	8001428 <util_encode_i32>
	util_encode_i32(resp+8, sens_data.acc_z);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	3308      	adds	r3, #8
 80019f0:	6a3a      	ldr	r2, [r7, #32]
 80019f2:	4611      	mov	r1, r2
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff fd17 	bl	8001428 <util_encode_i32>

	util_encode_i32(resp+12, sens_data.gyro_x);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	330c      	adds	r3, #12
 80019fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a00:	4611      	mov	r1, r2
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff fd10 	bl	8001428 <util_encode_i32>
	util_encode_i32(resp+16, sens_data.gyro_y);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	3310      	adds	r3, #16
 8001a0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a0e:	4611      	mov	r1, r2
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff fd09 	bl	8001428 <util_encode_i32>
	util_encode_i32(resp+20, sens_data.gyro_z);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	3314      	adds	r3, #20
 8001a1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a1c:	4611      	mov	r1, r2
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff fd02 	bl	8001428 <util_encode_i32>

	util_encode_i32(resp+24, sens_data.baro);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3318      	adds	r3, #24
 8001a28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a2a:	4611      	mov	r1, r2
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff fcfb 	bl	8001428 <util_encode_i32>

	*resp_len = TRANSACTION_SENS_LEN;
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	2220      	movs	r2, #32
 8001a36:	801a      	strh	r2, [r3, #0]

}
 8001a38:	bf00      	nop
 8001a3a:	3738      	adds	r7, #56	; 0x38
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <led_init>:

/**********************
 *	DECLARATIONS
 **********************/

void led_init(void) {
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
	LED_TIM.Instance->ARR = LED_MAX;
 8001a44:	4b0f      	ldr	r3, [pc, #60]	; (8001a84 <led_init+0x44>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001a4c:	62da      	str	r2, [r3, #44]	; 0x2c
	LED_TIM.Instance->CCR1 = 0;
 8001a4e:	4b0d      	ldr	r3, [pc, #52]	; (8001a84 <led_init+0x44>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2200      	movs	r2, #0
 8001a54:	635a      	str	r2, [r3, #52]	; 0x34
	LED_TIM.Instance->CCR2 = 0;
 8001a56:	4b0b      	ldr	r3, [pc, #44]	; (8001a84 <led_init+0x44>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	639a      	str	r2, [r3, #56]	; 0x38
	LED_TIM.Instance->CCR3 = 0;
 8001a5e:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <led_init+0x44>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2200      	movs	r2, #0
 8001a64:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIMEx_PWMN_Start(&LED_TIM, TIM_CHANNEL_1);
 8001a66:	2100      	movs	r1, #0
 8001a68:	4806      	ldr	r0, [pc, #24]	; (8001a84 <led_init+0x44>)
 8001a6a:	f005 fefd 	bl	8007868 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&LED_TIM, TIM_CHANNEL_2);
 8001a6e:	2104      	movs	r1, #4
 8001a70:	4804      	ldr	r0, [pc, #16]	; (8001a84 <led_init+0x44>)
 8001a72:	f005 fef9 	bl	8007868 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&LED_TIM, TIM_CHANNEL_3);
 8001a76:	2108      	movs	r1, #8
 8001a78:	4802      	ldr	r0, [pc, #8]	; (8001a84 <led_init+0x44>)
 8001a7a:	f005 fef5 	bl	8007868 <HAL_TIMEx_PWMN_Start>
}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20006ba0 	.word	0x20006ba0

08001a88 <led_set_color>:

void led_set_color(uint8_t r, uint8_t g, uint8_t b) {
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	71fb      	strb	r3, [r7, #7]
 8001a92:	460b      	mov	r3, r1
 8001a94:	71bb      	strb	r3, [r7, #6]
 8001a96:	4613      	mov	r3, r2
 8001a98:	717b      	strb	r3, [r7, #5]
	LED_TIM.Instance->CCR1 = r;
 8001a9a:	4b09      	ldr	r3, [pc, #36]	; (8001ac0 <led_set_color+0x38>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	79fa      	ldrb	r2, [r7, #7]
 8001aa0:	635a      	str	r2, [r3, #52]	; 0x34
	LED_TIM.Instance->CCR2 = g;
 8001aa2:	4b07      	ldr	r3, [pc, #28]	; (8001ac0 <led_set_color+0x38>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	79ba      	ldrb	r2, [r7, #6]
 8001aa8:	639a      	str	r2, [r3, #56]	; 0x38
	LED_TIM.Instance->CCR3 = b;
 8001aaa:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <led_set_color+0x38>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	797a      	ldrb	r2, [r7, #5]
 8001ab0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	20006ba0 	.word	0x20006ba0

08001ac4 <calc_field_CRC>:

/**********************
 *	DECLARATIONS
 **********************/

uint16_t calc_field_CRC(uint16_t *p_data_array, uint16_t length) {
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	460b      	mov	r3, r1
 8001ace:	807b      	strh	r3, [r7, #2]
	uint16_t shifter, c;
	uint16_t carry;
	uint16_t crc = 0;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	81bb      	strh	r3, [r7, #12]
	while (length--) {
 8001ad4:	e028      	b.n	8001b28 <calc_field_CRC+0x64>
		shifter = 0x8000;
 8001ad6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ada:	81fb      	strh	r3, [r7, #14]
		c = *p_data_array++;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	1c9a      	adds	r2, r3, #2
 8001ae0:	607a      	str	r2, [r7, #4]
 8001ae2:	881b      	ldrh	r3, [r3, #0]
 8001ae4:	817b      	strh	r3, [r7, #10]
		do {
			carry = crc & 0x8000;
 8001ae6:	89bb      	ldrh	r3, [r7, #12]
 8001ae8:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001aec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001af0:	813b      	strh	r3, [r7, #8]
			crc <<= 1;
 8001af2:	89bb      	ldrh	r3, [r7, #12]
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	81bb      	strh	r3, [r7, #12]
			if (c & shifter) crc++;
 8001af8:	897a      	ldrh	r2, [r7, #10]
 8001afa:	89fb      	ldrh	r3, [r7, #14]
 8001afc:	4013      	ands	r3, r2
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d002      	beq.n	8001b0a <calc_field_CRC+0x46>
 8001b04:	89bb      	ldrh	r3, [r7, #12]
 8001b06:	3301      	adds	r3, #1
 8001b08:	81bb      	strh	r3, [r7, #12]
			if (carry) crc ^= 0x1021;
 8001b0a:	893b      	ldrh	r3, [r7, #8]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d005      	beq.n	8001b1c <calc_field_CRC+0x58>
 8001b10:	89bb      	ldrh	r3, [r7, #12]
 8001b12:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8001b16:	f083 0301 	eor.w	r3, r3, #1
 8001b1a:	81bb      	strh	r3, [r7, #12]
			shifter >>= 1;
 8001b1c:	89fb      	ldrh	r3, [r7, #14]
 8001b1e:	085b      	lsrs	r3, r3, #1
 8001b20:	81fb      	strh	r3, [r7, #14]

		} while (shifter);
 8001b22:	89fb      	ldrh	r3, [r7, #14]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d1de      	bne.n	8001ae6 <calc_field_CRC+0x22>
	while (length--) {
 8001b28:	887b      	ldrh	r3, [r7, #2]
 8001b2a:	1e5a      	subs	r2, r3, #1
 8001b2c:	807a      	strh	r2, [r7, #2]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1d1      	bne.n	8001ad6 <calc_field_CRC+0x12>

	}
	return crc;
 8001b32:	89bb      	ldrh	r3, [r7, #12]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3714      	adds	r7, #20
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <msv2_init>:

void msv2_init(MSV2_INST_t * msv2) {
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
	static uint32_t id_counter = 0;
	msv2->id = id_counter++;
 8001b48:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <msv2_init+0x24>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	1c5a      	adds	r2, r3, #1
 8001b4e:	4905      	ldr	r1, [pc, #20]	; (8001b64 <msv2_init+0x24>)
 8001b50:	600a      	str	r2, [r1, #0]
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	6013      	str	r3, [r2, #0]
}
 8001b56:	bf00      	nop
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	20001a20 	.word	0x20001a20

08001b68 <msv2_create_frame>:

uint16_t msv2_create_frame(MSV2_INST_t * msv2, uint8_t opcode, uint8_t data_len, uint8_t * data) {
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	607b      	str	r3, [r7, #4]
 8001b72:	460b      	mov	r3, r1
 8001b74:	72fb      	strb	r3, [r7, #11]
 8001b76:	4613      	mov	r3, r2
 8001b78:	72bb      	strb	r3, [r7, #10]
	uint16_t array_len = data_len+2; //we add 1 for the opcode and len fields and 1 for the crc
 8001b7a:	7abb      	ldrb	r3, [r7, #10]
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	3302      	adds	r3, #2
 8001b80:	827b      	strh	r3, [r7, #18]
	msv2->tx.data_len = data_len;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	7aba      	ldrb	r2, [r7, #10]
 8001b86:	f883 280f 	strb.w	r2, [r3, #2063]	; 0x80f
	msv2->tx.opcode = opcode;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	7afa      	ldrb	r2, [r7, #11]
 8001b8e:	f883 280e 	strb.w	r2, [r3, #2062]	; 0x80e
	msv2->tx.data[0] = DLE;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2290      	movs	r2, #144	; 0x90
 8001b96:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
	msv2->tx.data[1] = STX;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2202      	movs	r2, #2
 8001b9e:	f883 2813 	strb.w	r2, [r3, #2067]	; 0x813
	msv2->tx.data[2] = opcode;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	7afa      	ldrb	r2, [r7, #11]
 8001ba6:	f883 2814 	strb.w	r2, [r3, #2068]	; 0x814
	msv2->tx.data[3] = data_len;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	7aba      	ldrb	r2, [r7, #10]
 8001bae:	f883 2815 	strb.w	r2, [r3, #2069]	; 0x815
	msv2->tx.crc_data[0] = (data_len<<8) | opcode;  //header bytes inverted
 8001bb2:	7abb      	ldrb	r3, [r7, #10]
 8001bb4:	021b      	lsls	r3, r3, #8
 8001bb6:	b21a      	sxth	r2, r3
 8001bb8:	7afb      	ldrb	r3, [r7, #11]
 8001bba:	b21b      	sxth	r3, r3
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	b21b      	sxth	r3, r3
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f8a3 2c12 	strh.w	r2, [r3, #3090]	; 0xc12
	uint16_t counter=4;
 8001bc8:	2304      	movs	r3, #4
 8001bca:	82fb      	strh	r3, [r7, #22]
	for(uint16_t i = 0; i < data_len; i++) {
 8001bcc:	2300      	movs	r3, #0
 8001bce:	82bb      	strh	r3, [r7, #20]
 8001bd0:	e05b      	b.n	8001c8a <msv2_create_frame+0x122>
		msv2->tx.data[counter++] = data[2*i]; //bytes in data need to be inverted before
 8001bd2:	8abb      	ldrh	r3, [r7, #20]
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	441a      	add	r2, r3
 8001bdc:	8afb      	ldrh	r3, [r7, #22]
 8001bde:	1c59      	adds	r1, r3, #1
 8001be0:	82f9      	strh	r1, [r7, #22]
 8001be2:	4619      	mov	r1, r3
 8001be4:	7812      	ldrb	r2, [r2, #0]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	440b      	add	r3, r1
 8001bea:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
		if(msv2->tx.data[counter-1] == DLE) {
 8001bee:	8afb      	ldrh	r3, [r7, #22]
 8001bf0:	3b01      	subs	r3, #1
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	f893 3812 	ldrb.w	r3, [r3, #2066]	; 0x812
 8001bfa:	2b90      	cmp	r3, #144	; 0x90
 8001bfc:	d108      	bne.n	8001c10 <msv2_create_frame+0xa8>
			msv2->tx.data[counter++] = DLE;
 8001bfe:	8afb      	ldrh	r3, [r7, #22]
 8001c00:	1c5a      	adds	r2, r3, #1
 8001c02:	82fa      	strh	r2, [r7, #22]
 8001c04:	461a      	mov	r2, r3
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	4413      	add	r3, r2
 8001c0a:	2290      	movs	r2, #144	; 0x90
 8001c0c:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
		}
		msv2->tx.data[counter++] = data[2*i+1];
 8001c10:	8abb      	ldrh	r3, [r7, #20]
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	3301      	adds	r3, #1
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	441a      	add	r2, r3
 8001c1a:	8afb      	ldrh	r3, [r7, #22]
 8001c1c:	1c59      	adds	r1, r3, #1
 8001c1e:	82f9      	strh	r1, [r7, #22]
 8001c20:	4619      	mov	r1, r3
 8001c22:	7812      	ldrb	r2, [r2, #0]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	440b      	add	r3, r1
 8001c28:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
		if(msv2->tx.data[counter-1] == DLE) {
 8001c2c:	8afb      	ldrh	r3, [r7, #22]
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	68fa      	ldr	r2, [r7, #12]
 8001c32:	4413      	add	r3, r2
 8001c34:	f893 3812 	ldrb.w	r3, [r3, #2066]	; 0x812
 8001c38:	2b90      	cmp	r3, #144	; 0x90
 8001c3a:	d108      	bne.n	8001c4e <msv2_create_frame+0xe6>
			msv2->tx.data[counter++] = DLE;
 8001c3c:	8afb      	ldrh	r3, [r7, #22]
 8001c3e:	1c5a      	adds	r2, r3, #1
 8001c40:	82fa      	strh	r2, [r7, #22]
 8001c42:	461a      	mov	r2, r3
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	4413      	add	r3, r2
 8001c48:	2290      	movs	r2, #144	; 0x90
 8001c4a:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
		}
		msv2->tx.crc_data[i+1] = (data[2*i+1]<<8) |  data[2*i];
 8001c4e:	8abb      	ldrh	r3, [r7, #20]
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	3301      	adds	r3, #1
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	4413      	add	r3, r2
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	021b      	lsls	r3, r3, #8
 8001c5c:	b21a      	sxth	r2, r3
 8001c5e:	8abb      	ldrh	r3, [r7, #20]
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	4619      	mov	r1, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	440b      	add	r3, r1
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	b21b      	sxth	r3, r3
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	b21a      	sxth	r2, r3
 8001c70:	8abb      	ldrh	r3, [r7, #20]
 8001c72:	3301      	adds	r3, #1
 8001c74:	b291      	uxth	r1, r2
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	f203 6304 	addw	r3, r3, #1540	; 0x604
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	4413      	add	r3, r2
 8001c80:	460a      	mov	r2, r1
 8001c82:	815a      	strh	r2, [r3, #10]
	for(uint16_t i = 0; i < data_len; i++) {
 8001c84:	8abb      	ldrh	r3, [r7, #20]
 8001c86:	3301      	adds	r3, #1
 8001c88:	82bb      	strh	r3, [r7, #20]
 8001c8a:	7abb      	ldrb	r3, [r7, #10]
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	8aba      	ldrh	r2, [r7, #20]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d39e      	bcc.n	8001bd2 <msv2_create_frame+0x6a>
	}
	msv2->tx.crc_data[array_len-1] = 0x0000;
 8001c94:	8a7b      	ldrh	r3, [r7, #18]
 8001c96:	3b01      	subs	r3, #1
 8001c98:	68fa      	ldr	r2, [r7, #12]
 8001c9a:	f203 6304 	addw	r3, r3, #1540	; 0x604
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	4413      	add	r3, r2
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	815a      	strh	r2, [r3, #10]
	uint16_t crc = calc_field_CRC(msv2->tx.crc_data, array_len);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f603 4312 	addw	r3, r3, #3090	; 0xc12
 8001cac:	8a7a      	ldrh	r2, [r7, #18]
 8001cae:	4611      	mov	r1, r2
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff ff07 	bl	8001ac4 <calc_field_CRC>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	823b      	strh	r3, [r7, #16]
	msv2->tx.data[counter++] = crc&0xff; //crc bytes are inverted (LSB first) !!
 8001cba:	8afb      	ldrh	r3, [r7, #22]
 8001cbc:	1c5a      	adds	r2, r3, #1
 8001cbe:	82fa      	strh	r2, [r7, #22]
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	8a3b      	ldrh	r3, [r7, #16]
 8001cc4:	b2da      	uxtb	r2, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	440b      	add	r3, r1
 8001cca:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
	if(msv2->tx.data[counter-1] == DLE) {
 8001cce:	8afb      	ldrh	r3, [r7, #22]
 8001cd0:	3b01      	subs	r3, #1
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	f893 3812 	ldrb.w	r3, [r3, #2066]	; 0x812
 8001cda:	2b90      	cmp	r3, #144	; 0x90
 8001cdc:	d108      	bne.n	8001cf0 <msv2_create_frame+0x188>
		msv2->tx.data[counter++] = DLE;
 8001cde:	8afb      	ldrh	r3, [r7, #22]
 8001ce0:	1c5a      	adds	r2, r3, #1
 8001ce2:	82fa      	strh	r2, [r7, #22]
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	4413      	add	r3, r2
 8001cea:	2290      	movs	r2, #144	; 0x90
 8001cec:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
	}
	msv2->tx.data[counter++] = crc>>8;
 8001cf0:	8a3b      	ldrh	r3, [r7, #16]
 8001cf2:	0a1b      	lsrs	r3, r3, #8
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	8afb      	ldrh	r3, [r7, #22]
 8001cf8:	1c59      	adds	r1, r3, #1
 8001cfa:	82f9      	strh	r1, [r7, #22]
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	b2d2      	uxtb	r2, r2
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	440b      	add	r3, r1
 8001d04:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
	if(msv2->tx.data[counter-1] == DLE) {
 8001d08:	8afb      	ldrh	r3, [r7, #22]
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	68fa      	ldr	r2, [r7, #12]
 8001d0e:	4413      	add	r3, r2
 8001d10:	f893 3812 	ldrb.w	r3, [r3, #2066]	; 0x812
 8001d14:	2b90      	cmp	r3, #144	; 0x90
 8001d16:	d108      	bne.n	8001d2a <msv2_create_frame+0x1c2>
		msv2->tx.data[counter++] = DLE;
 8001d18:	8afb      	ldrh	r3, [r7, #22]
 8001d1a:	1c5a      	adds	r2, r3, #1
 8001d1c:	82fa      	strh	r2, [r7, #22]
 8001d1e:	461a      	mov	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	4413      	add	r3, r2
 8001d24:	2290      	movs	r2, #144	; 0x90
 8001d26:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
	}
	return counter;
 8001d2a:	8afb      	ldrh	r3, [r7, #22]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3718      	adds	r7, #24
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <msv2_decode_fragment>:

/*
 * 	d: received byte
 *
 */
MSV2_ERROR_t msv2_decode_fragment(MSV2_INST_t * msv2, uint8_t d) {
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	70fb      	strb	r3, [r7, #3]
    //if a DLE in data is followed by STX, we start again
    if (msv2->rx.escape == 1 && d == STX) {
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	7a5b      	ldrb	r3, [r3, #9]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d10a      	bne.n	8001d5e <msv2_decode_fragment+0x2a>
 8001d48:	78fb      	ldrb	r3, [r7, #3]
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d107      	bne.n	8001d5e <msv2_decode_fragment+0x2a>
    	msv2->rx.state = WAITING_OPCODE;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2202      	movs	r2, #2
 8001d52:	721a      	strb	r2, [r3, #8]
    	msv2->rx.escape = 0;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	725a      	strb	r2, [r3, #9]
        return MSV2_PROGRESS;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e0da      	b.n	8001f14 <msv2_decode_fragment+0x1e0>
    }

    if (msv2->rx.state == WAITING_DLE && d == DLE) {
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	7a1b      	ldrb	r3, [r3, #8]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d107      	bne.n	8001d76 <msv2_decode_fragment+0x42>
 8001d66:	78fb      	ldrb	r3, [r7, #3]
 8001d68:	2b90      	cmp	r3, #144	; 0x90
 8001d6a:	d104      	bne.n	8001d76 <msv2_decode_fragment+0x42>
    	msv2->rx.state = WAITING_STX;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	721a      	strb	r2, [r3, #8]
        return MSV2_PROGRESS;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e0ce      	b.n	8001f14 <msv2_decode_fragment+0x1e0>
    }
    //escape in case a DLE is in the data
    if (d == DLE && msv2->rx.escape == 0) {
 8001d76:	78fb      	ldrb	r3, [r7, #3]
 8001d78:	2b90      	cmp	r3, #144	; 0x90
 8001d7a:	d108      	bne.n	8001d8e <msv2_decode_fragment+0x5a>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	7a5b      	ldrb	r3, [r3, #9]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d104      	bne.n	8001d8e <msv2_decode_fragment+0x5a>
    	msv2->rx.escape = 1;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	725a      	strb	r2, [r3, #9]
        return MSV2_PROGRESS;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e0c2      	b.n	8001f14 <msv2_decode_fragment+0x1e0>
    }
    //if it is doubled, it counts as data
    if (d == DLE && msv2->rx.escape == 1) {
 8001d8e:	78fb      	ldrb	r3, [r7, #3]
 8001d90:	2b90      	cmp	r3, #144	; 0x90
 8001d92:	d106      	bne.n	8001da2 <msv2_decode_fragment+0x6e>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	7a5b      	ldrb	r3, [r3, #9]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d102      	bne.n	8001da2 <msv2_decode_fragment+0x6e>
    	msv2->rx.escape = 0;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	725a      	strb	r2, [r3, #9]

    }

    if (msv2->rx.state == WAITING_STX && d == STX) {
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	7a1b      	ldrb	r3, [r3, #8]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d107      	bne.n	8001dba <msv2_decode_fragment+0x86>
 8001daa:	78fb      	ldrb	r3, [r7, #3]
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d104      	bne.n	8001dba <msv2_decode_fragment+0x86>
    	msv2->rx.state = WAITING_OPCODE;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2202      	movs	r2, #2
 8001db4:	721a      	strb	r2, [r3, #8]
        return MSV2_PROGRESS;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e0ac      	b.n	8001f14 <msv2_decode_fragment+0x1e0>
    }

    if (msv2->rx.state == WAITING_OPCODE) {
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	7a1b      	ldrb	r3, [r3, #8]
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d107      	bne.n	8001dd2 <msv2_decode_fragment+0x9e>
    	msv2->rx.opcode = d;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	78fa      	ldrb	r2, [r7, #3]
 8001dc6:	711a      	strb	r2, [r3, #4]
    	msv2->rx.state = WAITING_LEN;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2203      	movs	r2, #3
 8001dcc:	721a      	strb	r2, [r3, #8]
        return MSV2_PROGRESS;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e0a0      	b.n	8001f14 <msv2_decode_fragment+0x1e0>
    }

    if (msv2->rx.state == WAITING_LEN) {
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	7a1b      	ldrb	r3, [r3, #8]
 8001dd6:	2b03      	cmp	r3, #3
 8001dd8:	d11d      	bne.n	8001e16 <msv2_decode_fragment+0xe2>
    	msv2->rx.data_len = d; //legth in words
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	78fa      	ldrb	r2, [r7, #3]
 8001dde:	715a      	strb	r2, [r3, #5]
    	msv2->rx.length = 2*d; //length in bytes
 8001de0:	78fb      	ldrb	r3, [r7, #3]
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	b29a      	uxth	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	815a      	strh	r2, [r3, #10]
    	msv2->rx.crc_data[0] = (msv2->rx.data_len<<8) | msv2->rx.opcode;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	795b      	ldrb	r3, [r3, #5]
 8001df0:	021b      	lsls	r3, r3, #8
 8001df2:	b21a      	sxth	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	791b      	ldrb	r3, [r3, #4]
 8001df8:	b21b      	sxth	r3, r3
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	b21b      	sxth	r3, r3
 8001dfe:	b29a      	uxth	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
    	msv2->rx.counter = 0;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	819a      	strh	r2, [r3, #12]
    	msv2->rx.state = WAITING_DATA;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2204      	movs	r2, #4
 8001e10:	721a      	strb	r2, [r3, #8]
        return MSV2_PROGRESS;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e07e      	b.n	8001f14 <msv2_decode_fragment+0x1e0>
    }

    if (msv2->rx.state == WAITING_DATA) {
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	7a1b      	ldrb	r3, [r3, #8]
 8001e1a:	2b04      	cmp	r3, #4
 8001e1c:	d136      	bne.n	8001e8c <msv2_decode_fragment+0x158>
    	msv2->rx.data[msv2->rx.counter] = d;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	899b      	ldrh	r3, [r3, #12]
 8001e22:	461a      	mov	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4413      	add	r3, r2
 8001e28:	78fa      	ldrb	r2, [r7, #3]
 8001e2a:	739a      	strb	r2, [r3, #14]
    	if(msv2->rx.counter & 0x01) { //LSB == '1'
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	899b      	ldrh	r3, [r3, #12]
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d018      	beq.n	8001e6a <msv2_decode_fragment+0x136>
    		msv2->rx.crc_data[msv2->rx.counter/2 + 1] = (msv2->rx.data[msv2->rx.counter - 1]) |  d<<8;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	899b      	ldrh	r3, [r3, #12]
 8001e3c:	3b01      	subs	r3, #1
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	4413      	add	r3, r2
 8001e42:	7b9b      	ldrb	r3, [r3, #14]
 8001e44:	b21a      	sxth	r2, r3
 8001e46:	78fb      	ldrb	r3, [r7, #3]
 8001e48:	021b      	lsls	r3, r3, #8
 8001e4a:	b21b      	sxth	r3, r3
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	b21a      	sxth	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	899b      	ldrh	r3, [r3, #12]
 8001e54:	085b      	lsrs	r3, r3, #1
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	3301      	adds	r3, #1
 8001e5a:	b291      	uxth	r1, r2
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	4413      	add	r3, r2
 8001e66:	460a      	mov	r2, r1
 8001e68:	80da      	strh	r2, [r3, #6]
    	}
    	msv2->rx.counter += 1;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	899b      	ldrh	r3, [r3, #12]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	819a      	strh	r2, [r3, #12]
        //the length  is in WORDS, but we read BYTES
        if (msv2->rx.counter==msv2->rx.length) {
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	899a      	ldrh	r2, [r3, #12]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	895b      	ldrh	r3, [r3, #10]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d102      	bne.n	8001e88 <msv2_decode_fragment+0x154>
        	msv2->rx.state = WAITING_CRC1;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2205      	movs	r2, #5
 8001e86:	721a      	strb	r2, [r3, #8]
        }
        return MSV2_PROGRESS;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e043      	b.n	8001f14 <msv2_decode_fragment+0x1e0>
    }

    if (msv2->rx.state == WAITING_CRC1) {
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	7a1b      	ldrb	r3, [r3, #8]
 8001e90:	2b05      	cmp	r3, #5
 8001e92:	d108      	bne.n	8001ea6 <msv2_decode_fragment+0x172>
    	msv2->rx.crc = d;
 8001e94:	78fb      	ldrb	r3, [r7, #3]
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	80da      	strh	r2, [r3, #6]
    	msv2->rx.state = WAITING_CRC2;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2206      	movs	r2, #6
 8001ea0:	721a      	strb	r2, [r3, #8]
        return MSV2_PROGRESS;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e036      	b.n	8001f14 <msv2_decode_fragment+0x1e0>

    }

    if (msv2->rx.state == WAITING_CRC2) {
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	7a1b      	ldrb	r3, [r3, #8]
 8001eaa:	2b06      	cmp	r3, #6
 8001eac:	d12e      	bne.n	8001f0c <msv2_decode_fragment+0x1d8>
    	msv2->rx.crc |= d<<8;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	88db      	ldrh	r3, [r3, #6]
 8001eb2:	b21a      	sxth	r2, r3
 8001eb4:	78fb      	ldrb	r3, [r7, #3]
 8001eb6:	021b      	lsls	r3, r3, #8
 8001eb8:	b21b      	sxth	r3, r3
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	b21b      	sxth	r3, r3
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	80da      	strh	r2, [r3, #6]
    	msv2->rx.state = WAITING_DLE;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	721a      	strb	r2, [r3, #8]
    	msv2->rx.crc_data[msv2->rx.data_len+1] = 0;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	795b      	ldrb	r3, [r3, #5]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	4413      	add	r3, r2
 8001eda:	2200      	movs	r2, #0
 8001edc:	80da      	strh	r2, [r3, #6]
    	uint16_t crc = calc_field_CRC(msv2->rx.crc_data, msv2->rx.data_len+2);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f203 420e 	addw	r2, r3, #1038	; 0x40e
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	795b      	ldrb	r3, [r3, #5]
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	3302      	adds	r3, #2
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4610      	mov	r0, r2
 8001ef2:	f7ff fde7 	bl	8001ac4 <calc_field_CRC>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	81fb      	strh	r3, [r7, #14]
    	if(msv2->rx.crc == crc) {
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	88db      	ldrh	r3, [r3, #6]
 8001efe:	89fa      	ldrh	r2, [r7, #14]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d101      	bne.n	8001f08 <msv2_decode_fragment+0x1d4>
    		return MSV2_SUCCESS;
 8001f04:	2300      	movs	r3, #0
 8001f06:	e005      	b.n	8001f14 <msv2_decode_fragment+0x1e0>
    	} else {
    		return MSV2_WRONG_CRC;
 8001f08:	2302      	movs	r3, #2
 8001f0a:	e003      	b.n	8001f14 <msv2_decode_fragment+0x1e0>
    	}
    }
    msv2->rx.state=WAITING_DLE;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	721a      	strb	r2, [r3, #8]
    return MSV2_PROGRESS;
 8001f12:	2301      	movs	r3, #1
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3710      	adds	r7, #16
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <msv2_tx_data>:

uint8_t * msv2_rx_data(MSV2_INST_t * msv2) {
	return msv2->rx.data;
}

uint8_t * msv2_tx_data(MSV2_INST_t * msv2) {
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
	return msv2->tx.data;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f603 0312 	addw	r3, r3, #2066	; 0x812
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <util_buffer_u8_init>:
static inline void util_buffer_u8_init(UTIL_BUFFER_U8_t * bfr, uint8_t * buffer, uint16_t bfr_len) {
 8001f36:	b480      	push	{r7}
 8001f38:	b085      	sub	sp, #20
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	60f8      	str	r0, [r7, #12]
 8001f3e:	60b9      	str	r1, [r7, #8]
 8001f40:	4613      	mov	r3, r2
 8001f42:	80fb      	strh	r3, [r7, #6]
	bfr->c_ix = 0;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2200      	movs	r2, #0
 8001f48:	801a      	strh	r2, [r3, #0]
	bfr->l_ix = 0;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	805a      	strh	r2, [r3, #2]
	bfr->bfr_len = bfr_len;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	88fa      	ldrh	r2, [r7, #6]
 8001f54:	809a      	strh	r2, [r3, #4]
	bfr->buffer = buffer;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	68ba      	ldr	r2, [r7, #8]
 8001f5a:	609a      	str	r2, [r3, #8]
}
 8001f5c:	bf00      	nop
 8001f5e:	3714      	adds	r7, #20
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <util_buffer_u8_add>:
static inline void util_buffer_u8_add(UTIL_BUFFER_U8_t * bfr, uint8_t d) {
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	460b      	mov	r3, r1
 8001f72:	70fb      	strb	r3, [r7, #3]
	bfr->buffer[bfr->c_ix++] = d;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	881b      	ldrh	r3, [r3, #0]
 8001f7c:	1c59      	adds	r1, r3, #1
 8001f7e:	b288      	uxth	r0, r1
 8001f80:	6879      	ldr	r1, [r7, #4]
 8001f82:	8008      	strh	r0, [r1, #0]
 8001f84:	4413      	add	r3, r2
 8001f86:	78fa      	ldrb	r2, [r7, #3]
 8001f88:	701a      	strb	r2, [r3, #0]
	if(bfr->c_ix == bfr->bfr_len) bfr->c_ix = 0;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	881a      	ldrh	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	889b      	ldrh	r3, [r3, #4]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d102      	bne.n	8001f9c <util_buffer_u8_add+0x34>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	801a      	strh	r2, [r3, #0]
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <util_buffer_u8_get>:
static inline uint8_t util_buffer_u8_get(UTIL_BUFFER_U8_t * bfr) {
 8001fa8:	b480      	push	{r7}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
	uint8_t tmp = bfr->buffer[bfr->l_ix++];
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	885b      	ldrh	r3, [r3, #2]
 8001fb8:	1c59      	adds	r1, r3, #1
 8001fba:	b288      	uxth	r0, r1
 8001fbc:	6879      	ldr	r1, [r7, #4]
 8001fbe:	8048      	strh	r0, [r1, #2]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	73fb      	strb	r3, [r7, #15]
	if(bfr->l_ix == bfr->bfr_len) bfr->l_ix=0;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	885a      	ldrh	r2, [r3, #2]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	889b      	ldrh	r3, [r3, #4]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d102      	bne.n	8001fd8 <util_buffer_u8_get+0x30>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	805a      	strh	r2, [r3, #2]
	return tmp;
 8001fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3714      	adds	r7, #20
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <util_buffer_u8_isempty>:
static inline uint8_t util_buffer_u8_isempty(UTIL_BUFFER_U8_t * bfr) {
 8001fe6:	b480      	push	{r7}
 8001fe8:	b083      	sub	sp, #12
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
	return bfr->l_ix == bfr->c_ix;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	885a      	ldrh	r2, [r3, #2]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	881b      	ldrh	r3, [r3, #0]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	bf0c      	ite	eq
 8001ffa:	2301      	moveq	r3, #1
 8001ffc:	2300      	movne	r3, #0
 8001ffe:	b2db      	uxtb	r3, r3
}
 8002000:	4618      	mov	r0, r3
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <HAL_UART_RxCpltCallback>:

/*
 * UART RX ISR
 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8002014:	2300      	movs	r3, #0
 8002016:	60bb      	str	r3, [r7, #8]
	for(uint16_t i = 0; i < serial_devices_count; i++) {
 8002018:	2300      	movs	r3, #0
 800201a:	81fb      	strh	r3, [r7, #14]
 800201c:	e025      	b.n	800206a <HAL_UART_RxCpltCallback+0x5e>
		if(serial_devices[i]->uart == huart) {
 800201e:	89fb      	ldrh	r3, [r7, #14]
 8002020:	4a1c      	ldr	r2, [pc, #112]	; (8002094 <HAL_UART_RxCpltCallback+0x88>)
 8002022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	429a      	cmp	r2, r3
 800202c:	d11a      	bne.n	8002064 <HAL_UART_RxCpltCallback+0x58>
			util_buffer_u8_add(&serial_devices[i]->bfr, serial_devices[i]->dma_buffer);
 800202e:	89fb      	ldrh	r3, [r7, #14]
 8002030:	4a18      	ldr	r2, [pc, #96]	; (8002094 <HAL_UART_RxCpltCallback+0x88>)
 8002032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002036:	f103 0210 	add.w	r2, r3, #16
 800203a:	89fb      	ldrh	r3, [r7, #14]
 800203c:	4915      	ldr	r1, [pc, #84]	; (8002094 <HAL_UART_RxCpltCallback+0x88>)
 800203e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002042:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 8002046:	4619      	mov	r1, r3
 8002048:	4610      	mov	r0, r2
 800204a:	f7ff ff8d 	bl	8001f68 <util_buffer_u8_add>
			xSemaphoreGiveFromISR( serial_rx_sem, &xHigherPriorityTaskWoken );
 800204e:	4b12      	ldr	r3, [pc, #72]	; (8002098 <HAL_UART_RxCpltCallback+0x8c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f107 0208 	add.w	r2, r7, #8
 8002056:	4611      	mov	r1, r2
 8002058:	4618      	mov	r0, r3
 800205a:	f007 fad5 	bl	8009608 <xQueueGiveFromISR>
			if(i==2) {
 800205e:	89fb      	ldrh	r3, [r7, #14]
 8002060:	2b02      	cmp	r3, #2
				break;
			}
			break;
 8002062:	e007      	b.n	8002074 <HAL_UART_RxCpltCallback+0x68>
	for(uint16_t i = 0; i < serial_devices_count; i++) {
 8002064:	89fb      	ldrh	r3, [r7, #14]
 8002066:	3301      	adds	r3, #1
 8002068:	81fb      	strh	r3, [r7, #14]
 800206a:	4b0c      	ldr	r3, [pc, #48]	; (800209c <HAL_UART_RxCpltCallback+0x90>)
 800206c:	881b      	ldrh	r3, [r3, #0]
 800206e:	89fa      	ldrh	r2, [r7, #14]
 8002070:	429a      	cmp	r2, r3
 8002072:	d3d4      	bcc.n	800201e <HAL_UART_RxCpltCallback+0x12>
		}
	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d007      	beq.n	800208a <HAL_UART_RxCpltCallback+0x7e>
 800207a:	4b09      	ldr	r3, [pc, #36]	; (80020a0 <HAL_UART_RxCpltCallback+0x94>)
 800207c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002080:	601a      	str	r2, [r3, #0]
 8002082:	f3bf 8f4f 	dsb	sy
 8002086:	f3bf 8f6f 	isb	sy
}
 800208a:	bf00      	nop
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20001a24 	.word	0x20001a24
 8002098:	20001a68 	.word	0x20001a68
 800209c:	20001a64 	.word	0x20001a64
 80020a0:	e000ed04 	.word	0xe000ed04

080020a4 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef * lol = huart;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	60fb      	str	r3, [r7, #12]
}
 80020b0:	bf00      	nop
 80020b2:	3714      	adds	r7, #20
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <serial_global_init>:



void serial_global_init(void) {
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af02      	add	r7, sp, #8
	serial_rx_sem = xSemaphoreCreateBinaryStatic( &serial_rx_sem_buffer );
 80020c2:	2303      	movs	r3, #3
 80020c4:	9300      	str	r3, [sp, #0]
 80020c6:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <serial_global_init+0x24>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	2100      	movs	r1, #0
 80020cc:	2001      	movs	r0, #1
 80020ce:	f007 f8d5 	bl	800927c <xQueueGenericCreateStatic>
 80020d2:	4603      	mov	r3, r0
 80020d4:	4a03      	ldr	r2, [pc, #12]	; (80020e4 <serial_global_init+0x28>)
 80020d6:	6013      	str	r3, [r2, #0]
}
 80020d8:	bf00      	nop
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	20001a6c 	.word	0x20001a6c
 80020e4:	20001a68 	.word	0x20001a68

080020e8 <serial_init>:


void serial_init(SERIAL_INST_t * ser, UART_HandleTypeDef * uart, void * inst, SERIAL_RET_t (*decode_fcn)(void *, uint8_t)) {
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	607a      	str	r2, [r7, #4]
 80020f4:	603b      	str	r3, [r7, #0]
	ser->id = serial_devices_count;
 80020f6:	4b1a      	ldr	r3, [pc, #104]	; (8002160 <serial_init+0x78>)
 80020f8:	881b      	ldrh	r3, [r3, #0]
 80020fa:	461a      	mov	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	601a      	str	r2, [r3, #0]
	ser->uart = uart;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	68ba      	ldr	r2, [r7, #8]
 8002104:	605a      	str	r2, [r3, #4]
	ser->inst = inst;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	609a      	str	r2, [r3, #8]
	ser->decode_fcn = decode_fcn;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	60da      	str	r2, [r3, #12]
	util_buffer_u8_init(&ser->bfr, ser->buffer, SERIAL_FIFO_LEN);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f103 0010 	add.w	r0, r3, #16
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	331c      	adds	r3, #28
 800211c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002120:	4619      	mov	r1, r3
 8002122:	f7ff ff08 	bl	8001f36 <util_buffer_u8_init>
	if(serial_devices_count < SERIAL_MAX_INST) {
 8002126:	4b0e      	ldr	r3, [pc, #56]	; (8002160 <serial_init+0x78>)
 8002128:	881b      	ldrh	r3, [r3, #0]
 800212a:	2b0f      	cmp	r3, #15
 800212c:	d80e      	bhi.n	800214c <serial_init+0x64>
		HAL_UART_Receive_DMA(uart, &ser->dma_buffer, 1);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8002134:	2201      	movs	r2, #1
 8002136:	4619      	mov	r1, r3
 8002138:	68b8      	ldr	r0, [r7, #8]
 800213a:	f005 fe65 	bl	8007e08 <HAL_UART_Receive_DMA>
		serial_devices[serial_devices_count] = ser;
 800213e:	4b08      	ldr	r3, [pc, #32]	; (8002160 <serial_init+0x78>)
 8002140:	881b      	ldrh	r3, [r3, #0]
 8002142:	4619      	mov	r1, r3
 8002144:	4a07      	ldr	r2, [pc, #28]	; (8002164 <serial_init+0x7c>)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	}
	serial_devices_count++;
 800214c:	4b04      	ldr	r3, [pc, #16]	; (8002160 <serial_init+0x78>)
 800214e:	881b      	ldrh	r3, [r3, #0]
 8002150:	3301      	adds	r3, #1
 8002152:	b29a      	uxth	r2, r3
 8002154:	4b02      	ldr	r3, [pc, #8]	; (8002160 <serial_init+0x78>)
 8002156:	801a      	strh	r2, [r3, #0]
}
 8002158:	bf00      	nop
 800215a:	3710      	adds	r7, #16
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	20001a64 	.word	0x20001a64
 8002164:	20001a24 	.word	0x20001a24

08002168 <serial_send>:

void serial_send(SERIAL_INST_t * ser, uint8_t * data, uint16_t length) {
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	4613      	mov	r3, r2
 8002174:	80fb      	strh	r3, [r7, #6]
	HAL_UART_Transmit_DMA(ser->uart, data, length);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	88fa      	ldrh	r2, [r7, #6]
 800217c:	68b9      	ldr	r1, [r7, #8]
 800217e:	4618      	mov	r0, r3
 8002180:	f005 fdd6 	bl	8007d30 <HAL_UART_Transmit_DMA>
	//HAL_UART_Transmit(ser->uart, data, length, 500);
}
 8002184:	bf00      	nop
 8002186:	3710      	adds	r7, #16
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <serial_garbage_clean>:

void serial_garbage_clean(SERIAL_INST_t * ser) {
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(ser->uart, &ser->dma_buffer, 1);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6858      	ldr	r0, [r3, #4]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 800219e:	2201      	movs	r2, #1
 80021a0:	4619      	mov	r1, r3
 80021a2:	f005 fe31 	bl	8007e08 <HAL_UART_Receive_DMA>
}
 80021a6:	bf00      	nop
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
	...

080021b0 <serial_thread>:

void serial_thread(void * arg) {
 80021b0:	b5b0      	push	{r4, r5, r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]

	serial_global_init();
 80021b8:	f7ff ff80 	bl	80020bc <serial_global_init>

	for(;;) {
		if( xSemaphoreTake(serial_rx_sem, 0xffff) == pdTRUE ) {
 80021bc:	4b1b      	ldr	r3, [pc, #108]	; (800222c <serial_thread+0x7c>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80021c4:	4618      	mov	r0, r3
 80021c6:	f007 faad 	bl	8009724 <xQueueSemaphoreTake>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d1f5      	bne.n	80021bc <serial_thread+0xc>
			for(uint16_t i = 0; i < serial_devices_count; i++) {
 80021d0:	2300      	movs	r3, #0
 80021d2:	81fb      	strh	r3, [r7, #14]
 80021d4:	e023      	b.n	800221e <serial_thread+0x6e>
				while(!util_buffer_u8_isempty(&serial_devices[i]->bfr)) {
					serial_devices[i]->decode_fcn(serial_devices[i]->inst, util_buffer_u8_get(&serial_devices[i]->bfr));
 80021d6:	89fb      	ldrh	r3, [r7, #14]
 80021d8:	4a15      	ldr	r2, [pc, #84]	; (8002230 <serial_thread+0x80>)
 80021da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021de:	68dc      	ldr	r4, [r3, #12]
 80021e0:	89fb      	ldrh	r3, [r7, #14]
 80021e2:	4a13      	ldr	r2, [pc, #76]	; (8002230 <serial_thread+0x80>)
 80021e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021e8:	689d      	ldr	r5, [r3, #8]
 80021ea:	89fb      	ldrh	r3, [r7, #14]
 80021ec:	4a10      	ldr	r2, [pc, #64]	; (8002230 <serial_thread+0x80>)
 80021ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021f2:	3310      	adds	r3, #16
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff fed7 	bl	8001fa8 <util_buffer_u8_get>
 80021fa:	4603      	mov	r3, r0
 80021fc:	4619      	mov	r1, r3
 80021fe:	4628      	mov	r0, r5
 8002200:	47a0      	blx	r4
				while(!util_buffer_u8_isempty(&serial_devices[i]->bfr)) {
 8002202:	89fb      	ldrh	r3, [r7, #14]
 8002204:	4a0a      	ldr	r2, [pc, #40]	; (8002230 <serial_thread+0x80>)
 8002206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800220a:	3310      	adds	r3, #16
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff feea 	bl	8001fe6 <util_buffer_u8_isempty>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d0de      	beq.n	80021d6 <serial_thread+0x26>
			for(uint16_t i = 0; i < serial_devices_count; i++) {
 8002218:	89fb      	ldrh	r3, [r7, #14]
 800221a:	3301      	adds	r3, #1
 800221c:	81fb      	strh	r3, [r7, #14]
 800221e:	4b05      	ldr	r3, [pc, #20]	; (8002234 <serial_thread+0x84>)
 8002220:	881b      	ldrh	r3, [r3, #0]
 8002222:	89fa      	ldrh	r2, [r7, #14]
 8002224:	429a      	cmp	r2, r3
 8002226:	d3ec      	bcc.n	8002202 <serial_thread+0x52>
		if( xSemaphoreTake(serial_rx_sem, 0xffff) == pdTRUE ) {
 8002228:	e7c8      	b.n	80021bc <serial_thread+0xc>
 800222a:	bf00      	nop
 800222c:	20001a68 	.word	0x20001a68
 8002230:	20001a24 	.word	0x20001a24
 8002234:	20001a64 	.word	0x20001a64

08002238 <storage_init>:

/**********************
 *	DECLARATIONS
 **********************/

void storage_init() {
 8002238:	b5b0      	push	{r4, r5, r7, lr}
 800223a:	b09c      	sub	sp, #112	; 0x70
 800223c:	af02      	add	r7, sp, #8
	static STORAGE_HEADER_t header;
	flash_init();
 800223e:	f006 fcba 	bl	8008bb6 <flash_init>
	flash_read(HEADER_ADDR, (uint8_t *) &header, sizeof(STORAGE_HEADER_t));
 8002242:	2210      	movs	r2, #16
 8002244:	4936      	ldr	r1, [pc, #216]	; (8002320 <storage_init+0xe8>)
 8002246:	2000      	movs	r0, #0
 8002248:	f006 fcda 	bl	8008c00 <flash_read>
	if(header.magic == MAGIC_NUMBER) {
 800224c:	4b34      	ldr	r3, [pc, #208]	; (8002320 <storage_init+0xe8>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a34      	ldr	r2, [pc, #208]	; (8002324 <storage_init+0xec>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d149      	bne.n	80022ea <storage_init+0xb2>
		used_subsectors = header.used;
 8002256:	4b32      	ldr	r3, [pc, #200]	; (8002320 <storage_init+0xe8>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	4a33      	ldr	r2, [pc, #204]	; (8002328 <storage_init+0xf0>)
 800225c:	6013      	str	r3, [r2, #0]
		if(used_subsectors > 1) {
 800225e:	4b32      	ldr	r3, [pc, #200]	; (8002328 <storage_init+0xf0>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d93d      	bls.n	80022e2 <storage_init+0xaa>
			STORAGE_DATA_t data = {0};
 8002266:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800226a:	2220      	movs	r2, #32
 800226c:	2100      	movs	r1, #0
 800226e:	4618      	mov	r0, r3
 8002270:	f008 ff0c 	bl	800b08c <memset>
			STORAGE_DATA_t last_valid_data = {0};
 8002274:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002278:	2220      	movs	r2, #32
 800227a:	2100      	movs	r1, #0
 800227c:	4618      	mov	r0, r3
 800227e:	f008 ff05 	bl	800b08c <memset>
			uint32_t count = (used_subsectors-2)*SAMPLES_PER_SS;
 8002282:	4b29      	ldr	r3, [pc, #164]	; (8002328 <storage_init+0xf0>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	3b02      	subs	r3, #2
 8002288:	01db      	lsls	r3, r3, #7
 800228a:	667b      	str	r3, [r7, #100]	; 0x64
			data = read_data(count);
 800228c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002290:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002292:	4618      	mov	r0, r3
 8002294:	f000 f878 	bl	8002388 <read_data>
			while(data.sample_id == count){
 8002298:	e01a      	b.n	80022d0 <storage_init+0x98>
				last_valid_data = data;
 800229a:	f107 0444 	add.w	r4, r7, #68	; 0x44
 800229e:	f107 0524 	add.w	r5, r7, #36	; 0x24
 80022a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022a6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80022aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				data = read_data(++count);
 80022ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80022b0:	3301      	adds	r3, #1
 80022b2:	667b      	str	r3, [r7, #100]	; 0x64
 80022b4:	463b      	mov	r3, r7
 80022b6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80022b8:	4618      	mov	r0, r3
 80022ba:	f000 f865 	bl	8002388 <read_data>
 80022be:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80022c2:	463d      	mov	r5, r7
 80022c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022c8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80022cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			while(data.sample_id == count){
 80022d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80022d2:	461a      	mov	r2, r3
 80022d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d0df      	beq.n	800229a <storage_init+0x62>
			}

			data_counter = count;
 80022da:	4a14      	ldr	r2, [pc, #80]	; (800232c <storage_init+0xf4>)
 80022dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80022de:	6013      	str	r3, [r2, #0]
 80022e0:	e009      	b.n	80022f6 <storage_init+0xbe>
		} else {
			data_counter = 0;
 80022e2:	4b12      	ldr	r3, [pc, #72]	; (800232c <storage_init+0xf4>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	e005      	b.n	80022f6 <storage_init+0xbe>
		}
	} else {
		write_header_used(1);
 80022ea:	2001      	movs	r0, #1
 80022ec:	f000 f828 	bl	8002340 <write_header_used>
		data_counter = 0;
 80022f0:	4b0e      	ldr	r3, [pc, #56]	; (800232c <storage_init+0xf4>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	601a      	str	r2, [r3, #0]
	}
	record_active = 0;
 80022f6:	4b0e      	ldr	r3, [pc, #56]	; (8002330 <storage_init+0xf8>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	701a      	strb	r2, [r3, #0]
	restart_required = 0;
 80022fc:	4b0d      	ldr	r3, [pc, #52]	; (8002334 <storage_init+0xfc>)
 80022fe:	2200      	movs	r2, #0
 8002300:	701a      	strb	r2, [r3, #0]
	storage_sem = xSemaphoreCreateBinaryStatic(&storage_sem_buffer);
 8002302:	2303      	movs	r3, #3
 8002304:	9300      	str	r3, [sp, #0]
 8002306:	4b0c      	ldr	r3, [pc, #48]	; (8002338 <storage_init+0x100>)
 8002308:	2200      	movs	r2, #0
 800230a:	2100      	movs	r1, #0
 800230c:	2001      	movs	r0, #1
 800230e:	f006 ffb5 	bl	800927c <xQueueGenericCreateStatic>
 8002312:	4603      	mov	r3, r0
 8002314:	4a09      	ldr	r2, [pc, #36]	; (800233c <storage_init+0x104>)
 8002316:	6013      	str	r3, [r2, #0]
}
 8002318:	bf00      	nop
 800231a:	3768      	adds	r7, #104	; 0x68
 800231c:	46bd      	mov	sp, r7
 800231e:	bdb0      	pop	{r4, r5, r7, pc}
 8002320:	20001b10 	.word	0x20001b10
 8002324:	cbe0c5e6 	.word	0xcbe0c5e6
 8002328:	20001ab4 	.word	0x20001ab4
 800232c:	20001ab8 	.word	0x20001ab8
 8002330:	20001abc 	.word	0x20001abc
 8002334:	20001abd 	.word	0x20001abd
 8002338:	20001ac8 	.word	0x20001ac8
 800233c:	20001ac4 	.word	0x20001ac4

08002340 <write_header_used>:

}



static void write_header_used(uint32_t used) {
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
	static STORAGE_HEADER_t header;
	flash_read(HEADER_ADDR, (uint8_t *) &header, sizeof(STORAGE_HEADER_t));
 8002348:	2210      	movs	r2, #16
 800234a:	490c      	ldr	r1, [pc, #48]	; (800237c <write_header_used+0x3c>)
 800234c:	2000      	movs	r0, #0
 800234e:	f006 fc57 	bl	8008c00 <flash_read>
	flash_erase_subsector(HEADER_ADDR);
 8002352:	2000      	movs	r0, #0
 8002354:	f006 fd4c 	bl	8008df0 <flash_erase_subsector>
	header.magic = MAGIC_NUMBER;
 8002358:	4b08      	ldr	r3, [pc, #32]	; (800237c <write_header_used+0x3c>)
 800235a:	4a09      	ldr	r2, [pc, #36]	; (8002380 <write_header_used+0x40>)
 800235c:	601a      	str	r2, [r3, #0]
	header.used = used;
 800235e:	4a07      	ldr	r2, [pc, #28]	; (800237c <write_header_used+0x3c>)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6053      	str	r3, [r2, #4]
	flash_write(HEADER_ADDR, (uint8_t *) &header, sizeof(STORAGE_HEADER_t));
 8002364:	2210      	movs	r2, #16
 8002366:	4905      	ldr	r1, [pc, #20]	; (800237c <write_header_used+0x3c>)
 8002368:	2000      	movs	r0, #0
 800236a:	f006 fcca 	bl	8008d02 <flash_write>
	used_subsectors = used;
 800236e:	4a05      	ldr	r2, [pc, #20]	; (8002384 <write_header_used+0x44>)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6013      	str	r3, [r2, #0]
}
 8002374:	bf00      	nop
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	20001b20 	.word	0x20001b20
 8002380:	cbe0c5e6 	.word	0xcbe0c5e6
 8002384:	20001ab4 	.word	0x20001ab4

08002388 <read_data>:



static STORAGE_DATA_t read_data(uint32_t id) {
 8002388:	b5b0      	push	{r4, r5, r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
	static STORAGE_DATA_t data;
	flash_read(ADDRESS(id), (uint8_t *) &data, sizeof(STORAGE_DATA_t));
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	3380      	adds	r3, #128	; 0x80
 8002396:	015b      	lsls	r3, r3, #5
 8002398:	2220      	movs	r2, #32
 800239a:	4909      	ldr	r1, [pc, #36]	; (80023c0 <read_data+0x38>)
 800239c:	4618      	mov	r0, r3
 800239e:	f006 fc2f 	bl	8008c00 <flash_read>
	return data;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a06      	ldr	r2, [pc, #24]	; (80023c0 <read_data+0x38>)
 80023a6:	461c      	mov	r4, r3
 80023a8:	4615      	mov	r5, r2
 80023aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023ae:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80023b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bdb0      	pop	{r4, r5, r7, pc}
 80023be:	bf00      	nop
 80023c0:	20001b30 	.word	0x20001b30

080023c4 <storage_get_used>:
		flash_erase_subsector(addr);
	}
	flash_write(addr, (uint8_t *) &data, sizeof(STORAGE_DATA_t));
}

uint32_t storage_get_used() {
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
	return data_counter;
 80023c8:	4b03      	ldr	r3, [pc, #12]	; (80023d8 <storage_get_used+0x14>)
 80023ca:	681b      	ldr	r3, [r3, #0]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	20001ab8 	.word	0x20001ab8

080023dc <storage_get_sample>:

void storage_get_sample(uint32_t id, void * dest) {
 80023dc:	b5b0      	push	{r4, r5, r7, lr}
 80023de:	b08a      	sub	sp, #40	; 0x28
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6278      	str	r0, [r7, #36]	; 0x24
 80023e4:	6239      	str	r1, [r7, #32]
	*((STORAGE_DATA_t *)dest) = read_data(id);
 80023e6:	6a3c      	ldr	r4, [r7, #32]
 80023e8:	463b      	mov	r3, r7
 80023ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff ffcb 	bl	8002388 <read_data>
 80023f2:	4625      	mov	r5, r4
 80023f4:	463c      	mov	r4, r7
 80023f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023fa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80023fe:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8002402:	bf00      	nop
 8002404:	3728      	adds	r7, #40	; 0x28
 8002406:	46bd      	mov	sp, r7
 8002408:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800240c <storage_disable>:

void storage_enable() {
	record_active = 1;
}

void storage_disable() {
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
	record_should_stop = STORAGE_AFTER_SAVE;
 8002410:	4b04      	ldr	r3, [pc, #16]	; (8002424 <storage_disable+0x18>)
 8002412:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002416:	601a      	str	r2, [r3, #0]
}
 8002418:	bf00      	nop
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	20001ac0 	.word	0x20001ac0

08002428 <storage_thread>:
		xSemaphoreGive(storage_sem);
	}
}


void storage_thread(void * arg) {
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]



	storage_init();
 8002430:	f7ff ff02 	bl	8002238 <storage_init>




	for(;;) {
		last_time = time;
 8002434:	4b1b      	ldr	r3, [pc, #108]	; (80024a4 <storage_thread+0x7c>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a1b      	ldr	r2, [pc, #108]	; (80024a8 <storage_thread+0x80>)
 800243a:	6013      	str	r3, [r2, #0]
		time = HAL_GetTick();
 800243c:	f001 fa68 	bl	8003910 <HAL_GetTick>
 8002440:	4603      	mov	r3, r0
 8002442:	4a18      	ldr	r2, [pc, #96]	; (80024a4 <storage_thread+0x7c>)
 8002444:	6013      	str	r3, [r2, #0]
		if(restart_required) {
 8002446:	4b19      	ldr	r3, [pc, #100]	; (80024ac <storage_thread+0x84>)
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d008      	beq.n	8002460 <storage_thread+0x38>
			write_header_used(1);
 800244e:	2001      	movs	r0, #1
 8002450:	f7ff ff76 	bl	8002340 <write_header_used>
			data_counter = 0;
 8002454:	4b16      	ldr	r3, [pc, #88]	; (80024b0 <storage_thread+0x88>)
 8002456:	2200      	movs	r2, #0
 8002458:	601a      	str	r2, [r3, #0]
			restart_required = 0;
 800245a:	4b14      	ldr	r3, [pc, #80]	; (80024ac <storage_thread+0x84>)
 800245c:	2200      	movs	r2, #0
 800245e:	701a      	strb	r2, [r3, #0]
		}
		if(record_should_stop) {
 8002460:	4b14      	ldr	r3, [pc, #80]	; (80024b4 <storage_thread+0x8c>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d014      	beq.n	8002492 <storage_thread+0x6a>
			record_should_stop -= time-last_time;;
 8002468:	4b0f      	ldr	r3, [pc, #60]	; (80024a8 <storage_thread+0x80>)
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	4b0d      	ldr	r3, [pc, #52]	; (80024a4 <storage_thread+0x7c>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	4a10      	ldr	r2, [pc, #64]	; (80024b4 <storage_thread+0x8c>)
 8002474:	6812      	ldr	r2, [r2, #0]
 8002476:	4413      	add	r3, r2
 8002478:	461a      	mov	r2, r3
 800247a:	4b0e      	ldr	r3, [pc, #56]	; (80024b4 <storage_thread+0x8c>)
 800247c:	601a      	str	r2, [r3, #0]
			if(record_should_stop<=0){
 800247e:	4b0d      	ldr	r3, [pc, #52]	; (80024b4 <storage_thread+0x8c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	dc05      	bgt.n	8002492 <storage_thread+0x6a>
				record_active=0;
 8002486:	4b0c      	ldr	r3, [pc, #48]	; (80024b8 <storage_thread+0x90>)
 8002488:	2200      	movs	r2, #0
 800248a:	701a      	strb	r2, [r3, #0]
				record_should_stop=0;
 800248c:	4b09      	ldr	r3, [pc, #36]	; (80024b4 <storage_thread+0x8c>)
 800248e:	2200      	movs	r2, #0
 8002490:	601a      	str	r2, [r3, #0]
			}
		}
		if(xSemaphoreTake(storage_sem, 0xffff) == pdTRUE) {
 8002492:	4b0a      	ldr	r3, [pc, #40]	; (80024bc <storage_thread+0x94>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800249a:	4618      	mov	r0, r3
 800249c:	f007 f942 	bl	8009724 <xQueueSemaphoreTake>
		last_time = time;
 80024a0:	e7c8      	b.n	8002434 <storage_thread+0xc>
 80024a2:	bf00      	nop
 80024a4:	20001b50 	.word	0x20001b50
 80024a8:	20001b54 	.word	0x20001b54
 80024ac:	20001abd 	.word	0x20001abd
 80024b0:	20001ab8 	.word	0x20001ab8
 80024b4:	20001ac0 	.word	0x20001ac0
 80024b8:	20001abc 	.word	0x20001abc
 80024bc:	20001ac4 	.word	0x20001ac4

080024c0 <threads_init>:
 **********************/

/*
 * Create all the threads needed by the software
 */
void threads_init(void) {
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af04      	add	r7, sp, #16


	serial_global_init();
 80024c6:	f7ff fdf9 	bl	80020bc <serial_global_init>
	static DEBUG_INST_t debug;
	debug_init(&debug);
 80024ca:	481c      	ldr	r0, [pc, #112]	; (800253c <threads_init+0x7c>)
 80024cc:	f7ff f888 	bl	80015e0 <debug_init>

	can_init();
 80024d0:	f7fe f914 	bl	80006fc <can_init>
	/*
	 * Storage thread
	 * lowest priority
	 */

	CREATE_THREAD(storage_handle, storage, storage_thread, STORAGE_SZ, STORAGE_PRIO);
 80024d4:	4b1a      	ldr	r3, [pc, #104]	; (8002540 <threads_init+0x80>)
 80024d6:	9302      	str	r3, [sp, #8]
 80024d8:	4b1a      	ldr	r3, [pc, #104]	; (8002544 <threads_init+0x84>)
 80024da:	9301      	str	r3, [sp, #4]
 80024dc:	2303      	movs	r3, #3
 80024de:	9300      	str	r3, [sp, #0]
 80024e0:	2300      	movs	r3, #0
 80024e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024e6:	4918      	ldr	r1, [pc, #96]	; (8002548 <threads_init+0x88>)
 80024e8:	4818      	ldr	r0, [pc, #96]	; (800254c <threads_init+0x8c>)
 80024ea:	f007 fb29 	bl	8009b40 <xTaskCreateStatic>
 80024ee:	4603      	mov	r3, r0
 80024f0:	4a17      	ldr	r2, [pc, #92]	; (8002550 <threads_init+0x90>)
 80024f2:	6013      	str	r3, [r2, #0]

	/*
	 *  Serial RX processing thread (Bottom half)
	 *  low priority
	 */
	CREATE_THREAD(serial_handle, serial, serial_thread, SERIAL_SZ, SERIAL_PRIO);
 80024f4:	4b17      	ldr	r3, [pc, #92]	; (8002554 <threads_init+0x94>)
 80024f6:	9302      	str	r3, [sp, #8]
 80024f8:	4b17      	ldr	r3, [pc, #92]	; (8002558 <threads_init+0x98>)
 80024fa:	9301      	str	r3, [sp, #4]
 80024fc:	2305      	movs	r3, #5
 80024fe:	9300      	str	r3, [sp, #0]
 8002500:	2300      	movs	r3, #0
 8002502:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002506:	4915      	ldr	r1, [pc, #84]	; (800255c <threads_init+0x9c>)
 8002508:	4815      	ldr	r0, [pc, #84]	; (8002560 <threads_init+0xa0>)
 800250a:	f007 fb19 	bl	8009b40 <xTaskCreateStatic>
 800250e:	4603      	mov	r3, r0
 8002510:	4a14      	ldr	r2, [pc, #80]	; (8002564 <threads_init+0xa4>)
 8002512:	6013      	str	r3, [r2, #0]

	/*
	 *  Main control thread
	 *  Highest priority
	 */
	CREATE_THREAD(control_handle, control, control_thread, CONTROL_SZ, CONTROL_PRIO);
 8002514:	4b14      	ldr	r3, [pc, #80]	; (8002568 <threads_init+0xa8>)
 8002516:	9302      	str	r3, [sp, #8]
 8002518:	4b14      	ldr	r3, [pc, #80]	; (800256c <threads_init+0xac>)
 800251a:	9301      	str	r3, [sp, #4]
 800251c:	2306      	movs	r3, #6
 800251e:	9300      	str	r3, [sp, #0]
 8002520:	2300      	movs	r3, #0
 8002522:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002526:	4912      	ldr	r1, [pc, #72]	; (8002570 <threads_init+0xb0>)
 8002528:	4812      	ldr	r0, [pc, #72]	; (8002574 <threads_init+0xb4>)
 800252a:	f007 fb09 	bl	8009b40 <xTaskCreateStatic>
 800252e:	4603      	mov	r3, r0
 8002530:	4a11      	ldr	r2, [pc, #68]	; (8002578 <threads_init+0xb8>)
 8002532:	6013      	str	r3, [r2, #0]



}
 8002534:	bf00      	nop
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	20001b64 	.word	0x20001b64
 8002540:	20003f9c 	.word	0x20003f9c
 8002544:	20002f9c 	.word	0x20002f9c
 8002548:	0800b0b4 	.word	0x0800b0b4
 800254c:	08002429 	.word	0x08002429
 8002550:	20001b60 	.word	0x20001b60
 8002554:	20004ff4 	.word	0x20004ff4
 8002558:	20003ff4 	.word	0x20003ff4
 800255c:	0800b0bc 	.word	0x0800b0bc
 8002560:	080021b1 	.word	0x080021b1
 8002564:	20001b5c 	.word	0x20001b5c
 8002568:	2000604c 	.word	0x2000604c
 800256c:	2000504c 	.word	0x2000504c
 8002570:	0800b0c4 	.word	0x0800b0c4
 8002574:	08000da5 	.word	0x08000da5
 8002578:	20001b58 	.word	0x20001b58

0800257c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002580:	4b17      	ldr	r3, [pc, #92]	; (80025e0 <MX_CAN1_Init+0x64>)
 8002582:	4a18      	ldr	r2, [pc, #96]	; (80025e4 <MX_CAN1_Init+0x68>)
 8002584:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 8002586:	4b16      	ldr	r3, [pc, #88]	; (80025e0 <MX_CAN1_Init+0x64>)
 8002588:	2209      	movs	r2, #9
 800258a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800258c:	4b14      	ldr	r3, [pc, #80]	; (80025e0 <MX_CAN1_Init+0x64>)
 800258e:	2200      	movs	r2, #0
 8002590:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002592:	4b13      	ldr	r3, [pc, #76]	; (80025e0 <MX_CAN1_Init+0x64>)
 8002594:	2200      	movs	r2, #0
 8002596:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8002598:	4b11      	ldr	r3, [pc, #68]	; (80025e0 <MX_CAN1_Init+0x64>)
 800259a:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800259e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80025a0:	4b0f      	ldr	r3, [pc, #60]	; (80025e0 <MX_CAN1_Init+0x64>)
 80025a2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80025a6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80025a8:	4b0d      	ldr	r3, [pc, #52]	; (80025e0 <MX_CAN1_Init+0x64>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80025ae:	4b0c      	ldr	r3, [pc, #48]	; (80025e0 <MX_CAN1_Init+0x64>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80025b4:	4b0a      	ldr	r3, [pc, #40]	; (80025e0 <MX_CAN1_Init+0x64>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80025ba:	4b09      	ldr	r3, [pc, #36]	; (80025e0 <MX_CAN1_Init+0x64>)
 80025bc:	2200      	movs	r2, #0
 80025be:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80025c0:	4b07      	ldr	r3, [pc, #28]	; (80025e0 <MX_CAN1_Init+0x64>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80025c6:	4b06      	ldr	r3, [pc, #24]	; (80025e0 <MX_CAN1_Init+0x64>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80025cc:	4804      	ldr	r0, [pc, #16]	; (80025e0 <MX_CAN1_Init+0x64>)
 80025ce:	f001 f9ab 	bl	8003928 <HAL_CAN_Init>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80025d8:	f000 fa2c 	bl	8002a34 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80025dc:	bf00      	nop
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	20006888 	.word	0x20006888
 80025e4:	40006400 	.word	0x40006400

080025e8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b08a      	sub	sp, #40	; 0x28
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f0:	f107 0314 	add.w	r3, r7, #20
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	605a      	str	r2, [r3, #4]
 80025fa:	609a      	str	r2, [r3, #8]
 80025fc:	60da      	str	r2, [r3, #12]
 80025fe:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a2d      	ldr	r2, [pc, #180]	; (80026bc <HAL_CAN_MspInit+0xd4>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d153      	bne.n	80026b2 <HAL_CAN_MspInit+0xca>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800260a:	2300      	movs	r3, #0
 800260c:	613b      	str	r3, [r7, #16]
 800260e:	4b2c      	ldr	r3, [pc, #176]	; (80026c0 <HAL_CAN_MspInit+0xd8>)
 8002610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002612:	4a2b      	ldr	r2, [pc, #172]	; (80026c0 <HAL_CAN_MspInit+0xd8>)
 8002614:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002618:	6413      	str	r3, [r2, #64]	; 0x40
 800261a:	4b29      	ldr	r3, [pc, #164]	; (80026c0 <HAL_CAN_MspInit+0xd8>)
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002622:	613b      	str	r3, [r7, #16]
 8002624:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002626:	2300      	movs	r3, #0
 8002628:	60fb      	str	r3, [r7, #12]
 800262a:	4b25      	ldr	r3, [pc, #148]	; (80026c0 <HAL_CAN_MspInit+0xd8>)
 800262c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262e:	4a24      	ldr	r2, [pc, #144]	; (80026c0 <HAL_CAN_MspInit+0xd8>)
 8002630:	f043 0301 	orr.w	r3, r3, #1
 8002634:	6313      	str	r3, [r2, #48]	; 0x30
 8002636:	4b22      	ldr	r3, [pc, #136]	; (80026c0 <HAL_CAN_MspInit+0xd8>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002642:	2300      	movs	r3, #0
 8002644:	60bb      	str	r3, [r7, #8]
 8002646:	4b1e      	ldr	r3, [pc, #120]	; (80026c0 <HAL_CAN_MspInit+0xd8>)
 8002648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264a:	4a1d      	ldr	r2, [pc, #116]	; (80026c0 <HAL_CAN_MspInit+0xd8>)
 800264c:	f043 0302 	orr.w	r3, r3, #2
 8002650:	6313      	str	r3, [r2, #48]	; 0x30
 8002652:	4b1b      	ldr	r3, [pc, #108]	; (80026c0 <HAL_CAN_MspInit+0xd8>)
 8002654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	60bb      	str	r3, [r7, #8]
 800265c:	68bb      	ldr	r3, [r7, #8]
    /**CAN1 GPIO Configuration
    PA12     ------> CAN1_TX
    PB8     ------> CAN1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800265e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002662:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002664:	2302      	movs	r3, #2
 8002666:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002668:	2300      	movs	r3, #0
 800266a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800266c:	2303      	movs	r3, #3
 800266e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002670:	2309      	movs	r3, #9
 8002672:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002674:	f107 0314 	add.w	r3, r7, #20
 8002678:	4619      	mov	r1, r3
 800267a:	4812      	ldr	r0, [pc, #72]	; (80026c4 <HAL_CAN_MspInit+0xdc>)
 800267c:	f002 fbe8 	bl	8004e50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002680:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002684:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002686:	2302      	movs	r3, #2
 8002688:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268a:	2300      	movs	r3, #0
 800268c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800268e:	2303      	movs	r3, #3
 8002690:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002692:	2309      	movs	r3, #9
 8002694:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002696:	f107 0314 	add.w	r3, r7, #20
 800269a:	4619      	mov	r1, r3
 800269c:	480a      	ldr	r0, [pc, #40]	; (80026c8 <HAL_CAN_MspInit+0xe0>)
 800269e:	f002 fbd7 	bl	8004e50 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80026a2:	2200      	movs	r2, #0
 80026a4:	2105      	movs	r1, #5
 80026a6:	2014      	movs	r0, #20
 80026a8:	f001 ffa6 	bl	80045f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80026ac:	2014      	movs	r0, #20
 80026ae:	f001 ffbf 	bl	8004630 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80026b2:	bf00      	nop
 80026b4:	3728      	adds	r7, #40	; 0x28
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	40006400 	.word	0x40006400
 80026c0:	40023800 	.word	0x40023800
 80026c4:	40020000 	.word	0x40020000
 80026c8:	40020400 	.word	0x40020400

080026cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80026d2:	2300      	movs	r3, #0
 80026d4:	607b      	str	r3, [r7, #4]
 80026d6:	4b27      	ldr	r3, [pc, #156]	; (8002774 <MX_DMA_Init+0xa8>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026da:	4a26      	ldr	r2, [pc, #152]	; (8002774 <MX_DMA_Init+0xa8>)
 80026dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80026e0:	6313      	str	r3, [r2, #48]	; 0x30
 80026e2:	4b24      	ldr	r3, [pc, #144]	; (8002774 <MX_DMA_Init+0xa8>)
 80026e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ea:	607b      	str	r3, [r7, #4]
 80026ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80026ee:	2300      	movs	r3, #0
 80026f0:	603b      	str	r3, [r7, #0]
 80026f2:	4b20      	ldr	r3, [pc, #128]	; (8002774 <MX_DMA_Init+0xa8>)
 80026f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f6:	4a1f      	ldr	r2, [pc, #124]	; (8002774 <MX_DMA_Init+0xa8>)
 80026f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80026fc:	6313      	str	r3, [r2, #48]	; 0x30
 80026fe:	4b1d      	ldr	r3, [pc, #116]	; (8002774 <MX_DMA_Init+0xa8>)
 8002700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002702:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002706:	603b      	str	r3, [r7, #0]
 8002708:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800270a:	2200      	movs	r2, #0
 800270c:	2105      	movs	r1, #5
 800270e:	200c      	movs	r0, #12
 8002710:	f001 ff72 	bl	80045f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002714:	200c      	movs	r0, #12
 8002716:	f001 ff8b 	bl	8004630 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800271a:	2200      	movs	r2, #0
 800271c:	2105      	movs	r1, #5
 800271e:	200e      	movs	r0, #14
 8002720:	f001 ff6a 	bl	80045f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002724:	200e      	movs	r0, #14
 8002726:	f001 ff83 	bl	8004630 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800272a:	2200      	movs	r2, #0
 800272c:	2105      	movs	r1, #5
 800272e:	203a      	movs	r0, #58	; 0x3a
 8002730:	f001 ff62 	bl	80045f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002734:	203a      	movs	r0, #58	; 0x3a
 8002736:	f001 ff7b 	bl	8004630 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 800273a:	2200      	movs	r2, #0
 800273c:	2105      	movs	r1, #5
 800273e:	2044      	movs	r0, #68	; 0x44
 8002740:	f001 ff5a 	bl	80045f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8002744:	2044      	movs	r0, #68	; 0x44
 8002746:	f001 ff73 	bl	8004630 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 800274a:	2200      	movs	r2, #0
 800274c:	2105      	movs	r1, #5
 800274e:	2045      	movs	r0, #69	; 0x45
 8002750:	f001 ff52 	bl	80045f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002754:	2045      	movs	r0, #69	; 0x45
 8002756:	f001 ff6b 	bl	8004630 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 800275a:	2200      	movs	r2, #0
 800275c:	2105      	movs	r1, #5
 800275e:	2046      	movs	r0, #70	; 0x46
 8002760:	f001 ff4a 	bl	80045f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002764:	2046      	movs	r0, #70	; 0x46
 8002766:	f001 ff63 	bl	8004630 <HAL_NVIC_EnableIRQ>

}
 800276a:	bf00      	nop
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	40023800 	.word	0x40023800

08002778 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
	TIM5->CR1 = 0b1;
 800277c:	4b03      	ldr	r3, [pc, #12]	; (800278c <configureTimerForRunTimeStats+0x14>)
 800277e:	2201      	movs	r2, #1
 8002780:	601a      	str	r2, [r3, #0]
}
 8002782:	bf00      	nop
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr
 800278c:	40000c00 	.word	0x40000c00

08002790 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
return TIM5->CNT;
 8002794:	4b03      	ldr	r3, [pc, #12]	; (80027a4 <getRunTimeCounterValue+0x14>)
 8002796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002798:	4618      	mov	r0, r3
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	40000c00 	.word	0x40000c00

080027a8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	4a07      	ldr	r2, [pc, #28]	; (80027d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80027b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	4a06      	ldr	r2, [pc, #24]	; (80027d8 <vApplicationGetIdleTaskMemory+0x30>)
 80027be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2280      	movs	r2, #128	; 0x80
 80027c4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80027c6:	bf00      	nop
 80027c8:	3714      	adds	r7, #20
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	200060a4 	.word	0x200060a4
 80027d8:	200060fc 	.word	0x200060fc

080027dc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80027dc:	b5b0      	push	{r4, r5, r7, lr}
 80027de:	b088      	sub	sp, #32
 80027e0:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128, defaultTaskBuffer, &defaultTaskControlBlock);
 80027e2:	4b0a      	ldr	r3, [pc, #40]	; (800280c <MX_FREERTOS_Init+0x30>)
 80027e4:	1d3c      	adds	r4, r7, #4
 80027e6:	461d      	mov	r5, r3
 80027e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80027f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80027f4:	1d3b      	adds	r3, r7, #4
 80027f6:	2100      	movs	r1, #0
 80027f8:	4618      	mov	r0, r3
 80027fa:	f006 fbea 	bl	8008fd2 <osThreadCreate>
 80027fe:	4603      	mov	r3, r0
 8002800:	4a03      	ldr	r2, [pc, #12]	; (8002810 <MX_FREERTOS_Init+0x34>)
 8002802:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002804:	bf00      	nop
 8002806:	3720      	adds	r7, #32
 8002808:	46bd      	mov	sp, r7
 800280a:	bdb0      	pop	{r4, r5, r7, pc}
 800280c:	0800b0d8 	.word	0x0800b0d8
 8002810:	200068b0 	.word	0x200068b0

08002814 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800281c:	2001      	movs	r0, #1
 800281e:	f006 fbfd 	bl	800901c <osDelay>
 8002822:	e7fb      	b.n	800281c <StartDefaultTask+0x8>

08002824 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b088      	sub	sp, #32
 8002828:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800282a:	f107 030c 	add.w	r3, r7, #12
 800282e:	2200      	movs	r2, #0
 8002830:	601a      	str	r2, [r3, #0]
 8002832:	605a      	str	r2, [r3, #4]
 8002834:	609a      	str	r2, [r3, #8]
 8002836:	60da      	str	r2, [r3, #12]
 8002838:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800283a:	2300      	movs	r3, #0
 800283c:	60bb      	str	r3, [r7, #8]
 800283e:	4b27      	ldr	r3, [pc, #156]	; (80028dc <MX_GPIO_Init+0xb8>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002842:	4a26      	ldr	r2, [pc, #152]	; (80028dc <MX_GPIO_Init+0xb8>)
 8002844:	f043 0301 	orr.w	r3, r3, #1
 8002848:	6313      	str	r3, [r2, #48]	; 0x30
 800284a:	4b24      	ldr	r3, [pc, #144]	; (80028dc <MX_GPIO_Init+0xb8>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	60bb      	str	r3, [r7, #8]
 8002854:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002856:	2300      	movs	r3, #0
 8002858:	607b      	str	r3, [r7, #4]
 800285a:	4b20      	ldr	r3, [pc, #128]	; (80028dc <MX_GPIO_Init+0xb8>)
 800285c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285e:	4a1f      	ldr	r2, [pc, #124]	; (80028dc <MX_GPIO_Init+0xb8>)
 8002860:	f043 0304 	orr.w	r3, r3, #4
 8002864:	6313      	str	r3, [r2, #48]	; 0x30
 8002866:	4b1d      	ldr	r3, [pc, #116]	; (80028dc <MX_GPIO_Init+0xb8>)
 8002868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286a:	f003 0304 	and.w	r3, r3, #4
 800286e:	607b      	str	r3, [r7, #4]
 8002870:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002872:	2300      	movs	r3, #0
 8002874:	603b      	str	r3, [r7, #0]
 8002876:	4b19      	ldr	r3, [pc, #100]	; (80028dc <MX_GPIO_Init+0xb8>)
 8002878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287a:	4a18      	ldr	r2, [pc, #96]	; (80028dc <MX_GPIO_Init+0xb8>)
 800287c:	f043 0302 	orr.w	r3, r3, #2
 8002880:	6313      	str	r3, [r2, #48]	; 0x30
 8002882:	4b16      	ldr	r3, [pc, #88]	; (80028dc <MX_GPIO_Init+0xb8>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	603b      	str	r3, [r7, #0]
 800288c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GLOBAL_EN_GPIO_Port, GLOBAL_EN_Pin, GPIO_PIN_RESET);
 800288e:	2200      	movs	r2, #0
 8002890:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002894:	4812      	ldr	r0, [pc, #72]	; (80028e0 <MX_GPIO_Init+0xbc>)
 8002896:	f002 fc6f 	bl	8005178 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RUN_PG_Pin;
 800289a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800289e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028a0:	2300      	movs	r3, #0
 80028a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a4:	2300      	movs	r3, #0
 80028a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(RUN_PG_GPIO_Port, &GPIO_InitStruct);
 80028a8:	f107 030c 	add.w	r3, r7, #12
 80028ac:	4619      	mov	r1, r3
 80028ae:	480d      	ldr	r0, [pc, #52]	; (80028e4 <MX_GPIO_Init+0xc0>)
 80028b0:	f002 face 	bl	8004e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GLOBAL_EN_Pin;
 80028b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80028b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80028ba:	2311      	movs	r3, #17
 80028bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028be:	2300      	movs	r3, #0
 80028c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c2:	2300      	movs	r3, #0
 80028c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GLOBAL_EN_GPIO_Port, &GPIO_InitStruct);
 80028c6:	f107 030c 	add.w	r3, r7, #12
 80028ca:	4619      	mov	r1, r3
 80028cc:	4804      	ldr	r0, [pc, #16]	; (80028e0 <MX_GPIO_Init+0xbc>)
 80028ce:	f002 fabf 	bl	8004e50 <HAL_GPIO_Init>

}
 80028d2:	bf00      	nop
 80028d4:	3720      	adds	r7, #32
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	40023800 	.word	0x40023800
 80028e0:	40020000 	.word	0x40020000
 80028e4:	40020400 	.word	0x40020400

080028e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028ec:	f000 ffda 	bl	80038a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028f0:	f000 f822 	bl	8002938 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028f4:	f7ff ff96 	bl	8002824 <MX_GPIO_Init>
  MX_DMA_Init();
 80028f8:	f7ff fee8 	bl	80026cc <MX_DMA_Init>
  MX_TIM8_Init();
 80028fc:	f000 fb68 	bl	8002fd0 <MX_TIM8_Init>
  MX_TIM2_Init();
 8002900:	f000 fa7e 	bl	8002e00 <MX_TIM2_Init>
  MX_USART6_UART_Init();
 8002904:	f000 fd54 	bl	80033b0 <MX_USART6_UART_Init>
  MX_USART3_UART_Init();
 8002908:	f000 fd28 	bl	800335c <MX_USART3_UART_Init>
  MX_QUADSPI_Init();
 800290c:	f000 f89a 	bl	8002a44 <MX_QUADSPI_Init>
  MX_TIM3_Init();
 8002910:	f000 fac2 	bl	8002e98 <MX_TIM3_Init>
  MX_CAN1_Init();
 8002914:	f7ff fe32 	bl	800257c <MX_CAN1_Init>
  MX_USART1_UART_Init();
 8002918:	f000 fcf6 	bl	8003308 <MX_USART1_UART_Init>
  MX_TIM5_Init();
 800291c:	f000 fb0a 	bl	8002f34 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */



  threads_init();
 8002920:	f7ff fdce 	bl	80024c0 <threads_init>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8002924:	f7ff ff5a 	bl	80027dc <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8002928:	f006 fb4c 	bl	8008fc4 <osKernelStart>



  while (1)
  {
	osDelay(1000);
 800292c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002930:	f006 fb74 	bl	800901c <osDelay>
 8002934:	e7fa      	b.n	800292c <main+0x44>
	...

08002938 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b094      	sub	sp, #80	; 0x50
 800293c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800293e:	f107 031c 	add.w	r3, r7, #28
 8002942:	2234      	movs	r2, #52	; 0x34
 8002944:	2100      	movs	r1, #0
 8002946:	4618      	mov	r0, r3
 8002948:	f008 fba0 	bl	800b08c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800294c:	f107 0308 	add.w	r3, r7, #8
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	605a      	str	r2, [r3, #4]
 8002956:	609a      	str	r2, [r3, #8]
 8002958:	60da      	str	r2, [r3, #12]
 800295a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800295c:	2300      	movs	r3, #0
 800295e:	607b      	str	r3, [r7, #4]
 8002960:	4b29      	ldr	r3, [pc, #164]	; (8002a08 <SystemClock_Config+0xd0>)
 8002962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002964:	4a28      	ldr	r2, [pc, #160]	; (8002a08 <SystemClock_Config+0xd0>)
 8002966:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800296a:	6413      	str	r3, [r2, #64]	; 0x40
 800296c:	4b26      	ldr	r3, [pc, #152]	; (8002a08 <SystemClock_Config+0xd0>)
 800296e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002974:	607b      	str	r3, [r7, #4]
 8002976:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002978:	2300      	movs	r3, #0
 800297a:	603b      	str	r3, [r7, #0]
 800297c:	4b23      	ldr	r3, [pc, #140]	; (8002a0c <SystemClock_Config+0xd4>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002984:	4a21      	ldr	r2, [pc, #132]	; (8002a0c <SystemClock_Config+0xd4>)
 8002986:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800298a:	6013      	str	r3, [r2, #0]
 800298c:	4b1f      	ldr	r3, [pc, #124]	; (8002a0c <SystemClock_Config+0xd4>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002994:	603b      	str	r3, [r7, #0]
 8002996:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002998:	2302      	movs	r3, #2
 800299a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800299c:	2301      	movs	r3, #1
 800299e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80029a0:	2310      	movs	r3, #16
 80029a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029a4:	2302      	movs	r3, #2
 80029a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80029a8:	2300      	movs	r3, #0
 80029aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80029ac:	2308      	movs	r3, #8
 80029ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 80029b0:	2348      	movs	r3, #72	; 0x48
 80029b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80029b4:	2302      	movs	r3, #2
 80029b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80029b8:	2303      	movs	r3, #3
 80029ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80029bc:	2302      	movs	r3, #2
 80029be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029c0:	f107 031c 	add.w	r3, r7, #28
 80029c4:	4618      	mov	r0, r3
 80029c6:	f003 fdfb 	bl	80065c0 <HAL_RCC_OscConfig>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80029d0:	f000 f830 	bl	8002a34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029d4:	230f      	movs	r3, #15
 80029d6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029d8:	2302      	movs	r3, #2
 80029da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029dc:	2300      	movs	r3, #0
 80029de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80029e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029e6:	2300      	movs	r3, #0
 80029e8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80029ea:	f107 0308 	add.w	r3, r7, #8
 80029ee:	2102      	movs	r1, #2
 80029f0:	4618      	mov	r0, r3
 80029f2:	f003 fb3d 	bl	8006070 <HAL_RCC_ClockConfig>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80029fc:	f000 f81a 	bl	8002a34 <Error_Handler>
  }
}
 8002a00:	bf00      	nop
 8002a02:	3750      	adds	r7, #80	; 0x50
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	40007000 	.word	0x40007000

08002a10 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a04      	ldr	r2, [pc, #16]	; (8002a30 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d101      	bne.n	8002a26 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002a22:	f000 ff61 	bl	80038e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002a26:	bf00      	nop
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	40010000 	.word	0x40010000

08002a34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002a38:	bf00      	nop
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
	...

08002a44 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8002a48:	4b12      	ldr	r3, [pc, #72]	; (8002a94 <MX_QUADSPI_Init+0x50>)
 8002a4a:	4a13      	ldr	r2, [pc, #76]	; (8002a98 <MX_QUADSPI_Init+0x54>)
 8002a4c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 100;
 8002a4e:	4b11      	ldr	r3, [pc, #68]	; (8002a94 <MX_QUADSPI_Init+0x50>)
 8002a50:	2264      	movs	r2, #100	; 0x64
 8002a52:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8002a54:	4b0f      	ldr	r3, [pc, #60]	; (8002a94 <MX_QUADSPI_Init+0x50>)
 8002a56:	2201      	movs	r2, #1
 8002a58:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8002a5a:	4b0e      	ldr	r3, [pc, #56]	; (8002a94 <MX_QUADSPI_Init+0x50>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 26;
 8002a60:	4b0c      	ldr	r3, [pc, #48]	; (8002a94 <MX_QUADSPI_Init+0x50>)
 8002a62:	221a      	movs	r2, #26
 8002a64:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8002a66:	4b0b      	ldr	r3, [pc, #44]	; (8002a94 <MX_QUADSPI_Init+0x50>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8002a6c:	4b09      	ldr	r3, [pc, #36]	; (8002a94 <MX_QUADSPI_Init+0x50>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8002a72:	4b08      	ldr	r3, [pc, #32]	; (8002a94 <MX_QUADSPI_Init+0x50>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8002a78:	4b06      	ldr	r3, [pc, #24]	; (8002a94 <MX_QUADSPI_Init+0x50>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8002a7e:	4805      	ldr	r0, [pc, #20]	; (8002a94 <MX_QUADSPI_Init+0x50>)
 8002a80:	f002 fb94 	bl	80051ac <HAL_QSPI_Init>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8002a8a:	f7ff ffd3 	bl	8002a34 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8002a8e:	bf00      	nop
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	20006b0c 	.word	0x20006b0c
 8002a98:	a0001000 	.word	0xa0001000

08002a9c <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b08a      	sub	sp, #40	; 0x28
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa4:	f107 0314 	add.w	r3, r7, #20
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	605a      	str	r2, [r3, #4]
 8002aae:	609a      	str	r2, [r3, #8]
 8002ab0:	60da      	str	r2, [r3, #12]
 8002ab2:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a34      	ldr	r2, [pc, #208]	; (8002b8c <HAL_QSPI_MspInit+0xf0>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d162      	bne.n	8002b84 <HAL_QSPI_MspInit+0xe8>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002abe:	2300      	movs	r3, #0
 8002ac0:	613b      	str	r3, [r7, #16]
 8002ac2:	4b33      	ldr	r3, [pc, #204]	; (8002b90 <HAL_QSPI_MspInit+0xf4>)
 8002ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac6:	4a32      	ldr	r2, [pc, #200]	; (8002b90 <HAL_QSPI_MspInit+0xf4>)
 8002ac8:	f043 0302 	orr.w	r3, r3, #2
 8002acc:	6393      	str	r3, [r2, #56]	; 0x38
 8002ace:	4b30      	ldr	r3, [pc, #192]	; (8002b90 <HAL_QSPI_MspInit+0xf4>)
 8002ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	613b      	str	r3, [r7, #16]
 8002ad8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ada:	2300      	movs	r3, #0
 8002adc:	60fb      	str	r3, [r7, #12]
 8002ade:	4b2c      	ldr	r3, [pc, #176]	; (8002b90 <HAL_QSPI_MspInit+0xf4>)
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae2:	4a2b      	ldr	r2, [pc, #172]	; (8002b90 <HAL_QSPI_MspInit+0xf4>)
 8002ae4:	f043 0302 	orr.w	r3, r3, #2
 8002ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aea:	4b29      	ldr	r3, [pc, #164]	; (8002b90 <HAL_QSPI_MspInit+0xf4>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	60fb      	str	r3, [r7, #12]
 8002af4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002af6:	2300      	movs	r3, #0
 8002af8:	60bb      	str	r3, [r7, #8]
 8002afa:	4b25      	ldr	r3, [pc, #148]	; (8002b90 <HAL_QSPI_MspInit+0xf4>)
 8002afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afe:	4a24      	ldr	r2, [pc, #144]	; (8002b90 <HAL_QSPI_MspInit+0xf4>)
 8002b00:	f043 0304 	orr.w	r3, r3, #4
 8002b04:	6313      	str	r3, [r2, #48]	; 0x30
 8002b06:	4b22      	ldr	r3, [pc, #136]	; (8002b90 <HAL_QSPI_MspInit+0xf4>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	f003 0304 	and.w	r3, r3, #4
 8002b0e:	60bb      	str	r3, [r7, #8]
 8002b10:	68bb      	ldr	r3, [r7, #8]
    PB2     ------> QUADSPI_CLK
    PC9     ------> QUADSPI_BK1_IO0
    PC10     ------> QUADSPI_BK1_IO1
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002b12:	2304      	movs	r3, #4
 8002b14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b16:	2302      	movs	r3, #2
 8002b18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8002b22:	2309      	movs	r3, #9
 8002b24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b26:	f107 0314 	add.w	r3, r7, #20
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	4819      	ldr	r0, [pc, #100]	; (8002b94 <HAL_QSPI_MspInit+0xf8>)
 8002b2e:	f002 f98f 	bl	8004e50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002b32:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002b36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b38:	2302      	movs	r3, #2
 8002b3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b40:	2303      	movs	r3, #3
 8002b42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8002b44:	2309      	movs	r3, #9
 8002b46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b48:	f107 0314 	add.w	r3, r7, #20
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	4812      	ldr	r0, [pc, #72]	; (8002b98 <HAL_QSPI_MspInit+0xfc>)
 8002b50:	f002 f97e 	bl	8004e50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b54:	2340      	movs	r3, #64	; 0x40
 8002b56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b58:	2302      	movs	r3, #2
 8002b5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b60:	2303      	movs	r3, #3
 8002b62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8002b64:	230a      	movs	r3, #10
 8002b66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b68:	f107 0314 	add.w	r3, r7, #20
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	4809      	ldr	r0, [pc, #36]	; (8002b94 <HAL_QSPI_MspInit+0xf8>)
 8002b70:	f002 f96e 	bl	8004e50 <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 5, 0);
 8002b74:	2200      	movs	r2, #0
 8002b76:	2105      	movs	r1, #5
 8002b78:	205c      	movs	r0, #92	; 0x5c
 8002b7a:	f001 fd3d 	bl	80045f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8002b7e:	205c      	movs	r0, #92	; 0x5c
 8002b80:	f001 fd56 	bl	8004630 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8002b84:	bf00      	nop
 8002b86:	3728      	adds	r7, #40	; 0x28
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	a0001000 	.word	0xa0001000
 8002b90:	40023800 	.word	0x40023800
 8002b94:	40020400 	.word	0x40020400
 8002b98:	40020800 	.word	0x40020800

08002b9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	607b      	str	r3, [r7, #4]
 8002ba6:	4b12      	ldr	r3, [pc, #72]	; (8002bf0 <HAL_MspInit+0x54>)
 8002ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002baa:	4a11      	ldr	r2, [pc, #68]	; (8002bf0 <HAL_MspInit+0x54>)
 8002bac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8002bb2:	4b0f      	ldr	r3, [pc, #60]	; (8002bf0 <HAL_MspInit+0x54>)
 8002bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bba:	607b      	str	r3, [r7, #4]
 8002bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	603b      	str	r3, [r7, #0]
 8002bc2:	4b0b      	ldr	r3, [pc, #44]	; (8002bf0 <HAL_MspInit+0x54>)
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	4a0a      	ldr	r2, [pc, #40]	; (8002bf0 <HAL_MspInit+0x54>)
 8002bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bcc:	6413      	str	r3, [r2, #64]	; 0x40
 8002bce:	4b08      	ldr	r3, [pc, #32]	; (8002bf0 <HAL_MspInit+0x54>)
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd6:	603b      	str	r3, [r7, #0]
 8002bd8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002bda:	2200      	movs	r2, #0
 8002bdc:	210f      	movs	r1, #15
 8002bde:	f06f 0001 	mvn.w	r0, #1
 8002be2:	f001 fd09 	bl	80045f8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002be6:	bf00      	nop
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	40023800 	.word	0x40023800

08002bf4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b08c      	sub	sp, #48	; 0x30
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002c00:	2300      	movs	r3, #0
 8002c02:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8002c04:	2200      	movs	r2, #0
 8002c06:	6879      	ldr	r1, [r7, #4]
 8002c08:	2019      	movs	r0, #25
 8002c0a:	f001 fcf5 	bl	80045f8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002c0e:	2019      	movs	r0, #25
 8002c10:	f001 fd0e 	bl	8004630 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002c14:	2300      	movs	r3, #0
 8002c16:	60fb      	str	r3, [r7, #12]
 8002c18:	4b1e      	ldr	r3, [pc, #120]	; (8002c94 <HAL_InitTick+0xa0>)
 8002c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1c:	4a1d      	ldr	r2, [pc, #116]	; (8002c94 <HAL_InitTick+0xa0>)
 8002c1e:	f043 0301 	orr.w	r3, r3, #1
 8002c22:	6453      	str	r3, [r2, #68]	; 0x44
 8002c24:	4b1b      	ldr	r3, [pc, #108]	; (8002c94 <HAL_InitTick+0xa0>)
 8002c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	60fb      	str	r3, [r7, #12]
 8002c2e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002c30:	f107 0210 	add.w	r2, r7, #16
 8002c34:	f107 0314 	add.w	r3, r7, #20
 8002c38:	4611      	mov	r1, r2
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f003 fb32 	bl	80062a4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002c40:	f003 fb1c 	bl	800627c <HAL_RCC_GetPCLK2Freq>
 8002c44:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c48:	4a13      	ldr	r2, [pc, #76]	; (8002c98 <HAL_InitTick+0xa4>)
 8002c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4e:	0c9b      	lsrs	r3, r3, #18
 8002c50:	3b01      	subs	r3, #1
 8002c52:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002c54:	4b11      	ldr	r3, [pc, #68]	; (8002c9c <HAL_InitTick+0xa8>)
 8002c56:	4a12      	ldr	r2, [pc, #72]	; (8002ca0 <HAL_InitTick+0xac>)
 8002c58:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002c5a:	4b10      	ldr	r3, [pc, #64]	; (8002c9c <HAL_InitTick+0xa8>)
 8002c5c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c60:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002c62:	4a0e      	ldr	r2, [pc, #56]	; (8002c9c <HAL_InitTick+0xa8>)
 8002c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c66:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002c68:	4b0c      	ldr	r3, [pc, #48]	; (8002c9c <HAL_InitTick+0xa8>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c6e:	4b0b      	ldr	r3, [pc, #44]	; (8002c9c <HAL_InitTick+0xa8>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002c74:	4809      	ldr	r0, [pc, #36]	; (8002c9c <HAL_InitTick+0xa8>)
 8002c76:	f003 ff41 	bl	8006afc <HAL_TIM_Base_Init>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d104      	bne.n	8002c8a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002c80:	4806      	ldr	r0, [pc, #24]	; (8002c9c <HAL_InitTick+0xa8>)
 8002c82:	f003 ff8b 	bl	8006b9c <HAL_TIM_Base_Start_IT>
 8002c86:	4603      	mov	r3, r0
 8002c88:	e000      	b.n	8002c8c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3730      	adds	r7, #48	; 0x30
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	40023800 	.word	0x40023800
 8002c98:	431bde83 	.word	0x431bde83
 8002c9c:	20006b58 	.word	0x20006b58
 8002ca0:	40010000 	.word	0x40010000

08002ca4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002ca8:	bf00      	nop
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr

08002cb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	af00      	add	r7, sp, #0
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */

	  led_set_color(LED_WHITE);
 8002cb6:	222f      	movs	r2, #47	; 0x2f
 8002cb8:	212f      	movs	r1, #47	; 0x2f
 8002cba:	202f      	movs	r0, #47	; 0x2f
 8002cbc:	f7fe fee4 	bl	8001a88 <led_set_color>
 8002cc0:	e7f9      	b.n	8002cb6 <HardFault_Handler+0x4>

08002cc2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cc6:	e7fe      	b.n	8002cc6 <MemManage_Handler+0x4>

08002cc8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ccc:	e7fe      	b.n	8002ccc <BusFault_Handler+0x4>

08002cce <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cd2:	e7fe      	b.n	8002cd2 <UsageFault_Handler+0x4>

08002cd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cd8:	bf00      	nop
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
	...

08002ce4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002ce8:	4802      	ldr	r0, [pc, #8]	; (8002cf4 <DMA1_Stream1_IRQHandler+0x10>)
 8002cea:	f001 fe47 	bl	800497c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002cee:	bf00      	nop
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	20006d20 	.word	0x20006d20

08002cf8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002cfc:	4802      	ldr	r0, [pc, #8]	; (8002d08 <DMA1_Stream3_IRQHandler+0x10>)
 8002cfe:	f001 fe3d 	bl	800497c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002d02:	bf00      	nop
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	20006dc4 	.word	0x20006dc4

08002d0c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002d10:	4802      	ldr	r0, [pc, #8]	; (8002d1c <CAN1_RX0_IRQHandler+0x10>)
 8002d12:	f001 f989 	bl	8004028 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002d16:	bf00      	nop
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	20006888 	.word	0x20006888

08002d20 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002d24:	4802      	ldr	r0, [pc, #8]	; (8002d30 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002d26:	f004 f802 	bl	8006d2e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002d2a:	bf00      	nop
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	20006b58 	.word	0x20006b58

08002d34 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002d38:	4802      	ldr	r0, [pc, #8]	; (8002d44 <USART1_IRQHandler+0x10>)
 8002d3a:	f005 f895 	bl	8007e68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002d3e:	bf00      	nop
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	20006f44 	.word	0x20006f44

08002d48 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002d4c:	4802      	ldr	r0, [pc, #8]	; (8002d58 <USART3_IRQHandler+0x10>)
 8002d4e:	f005 f88b 	bl	8007e68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002d52:	bf00      	nop
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	20006d80 	.word	0x20006d80

08002d5c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002d60:	4802      	ldr	r0, [pc, #8]	; (8002d6c <DMA2_Stream2_IRQHandler+0x10>)
 8002d62:	f001 fe0b 	bl	800497c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002d66:	bf00      	nop
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	20006cc0 	.word	0x20006cc0

08002d70 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002d74:	4802      	ldr	r0, [pc, #8]	; (8002d80 <DMA2_Stream5_IRQHandler+0x10>)
 8002d76:	f001 fe01 	bl	800497c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8002d7a:	bf00      	nop
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	20006ee4 	.word	0x20006ee4

08002d84 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8002d88:	4802      	ldr	r0, [pc, #8]	; (8002d94 <DMA2_Stream6_IRQHandler+0x10>)
 8002d8a:	f001 fdf7 	bl	800497c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002d8e:	bf00      	nop
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	20006e84 	.word	0x20006e84

08002d98 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002d9c:	4802      	ldr	r0, [pc, #8]	; (8002da8 <DMA2_Stream7_IRQHandler+0x10>)
 8002d9e:	f001 fded 	bl	800497c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002da2:	bf00      	nop
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	20006e24 	.word	0x20006e24

08002dac <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002db0:	4802      	ldr	r0, [pc, #8]	; (8002dbc <USART6_IRQHandler+0x10>)
 8002db2:	f005 f859 	bl	8007e68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002db6:	bf00      	nop
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	20006f88 	.word	0x20006f88

08002dc0 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 8002dc4:	4802      	ldr	r0, [pc, #8]	; (8002dd0 <QUADSPI_IRQHandler+0x10>)
 8002dc6:	f002 fa6d 	bl	80052a4 <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 8002dca:	bf00      	nop
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	20006b0c 	.word	0x20006b0c

08002dd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002dd8:	4b08      	ldr	r3, [pc, #32]	; (8002dfc <SystemInit+0x28>)
 8002dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dde:	4a07      	ldr	r2, [pc, #28]	; (8002dfc <SystemInit+0x28>)
 8002de0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002de4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002de8:	4b04      	ldr	r3, [pc, #16]	; (8002dfc <SystemInit+0x28>)
 8002dea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002dee:	609a      	str	r2, [r3, #8]
#endif
}
 8002df0:	bf00      	nop
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	e000ed00 	.word	0xe000ed00

08002e00 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e06:	f107 0308 	add.w	r3, r7, #8
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	601a      	str	r2, [r3, #0]
 8002e0e:	605a      	str	r2, [r3, #4]
 8002e10:	609a      	str	r2, [r3, #8]
 8002e12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e14:	463b      	mov	r3, r7
 8002e16:	2200      	movs	r2, #0
 8002e18:	601a      	str	r2, [r3, #0]
 8002e1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002e1c:	4b1d      	ldr	r3, [pc, #116]	; (8002e94 <MX_TIM2_Init+0x94>)
 8002e1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e22:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 49;
 8002e24:	4b1b      	ldr	r3, [pc, #108]	; (8002e94 <MX_TIM2_Init+0x94>)
 8002e26:	2231      	movs	r2, #49	; 0x31
 8002e28:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8002e2a:	4b1a      	ldr	r3, [pc, #104]	; (8002e94 <MX_TIM2_Init+0x94>)
 8002e2c:	2210      	movs	r2, #16
 8002e2e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8002e30:	4b18      	ldr	r3, [pc, #96]	; (8002e94 <MX_TIM2_Init+0x94>)
 8002e32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e36:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e38:	4b16      	ldr	r3, [pc, #88]	; (8002e94 <MX_TIM2_Init+0x94>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e3e:	4b15      	ldr	r3, [pc, #84]	; (8002e94 <MX_TIM2_Init+0x94>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e44:	4813      	ldr	r0, [pc, #76]	; (8002e94 <MX_TIM2_Init+0x94>)
 8002e46:	f003 fe59 	bl	8006afc <HAL_TIM_Base_Init>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d001      	beq.n	8002e54 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002e50:	f7ff fdf0 	bl	8002a34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e58:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002e5a:	f107 0308 	add.w	r3, r7, #8
 8002e5e:	4619      	mov	r1, r3
 8002e60:	480c      	ldr	r0, [pc, #48]	; (8002e94 <MX_TIM2_Init+0x94>)
 8002e62:	f004 f92b 	bl	80070bc <HAL_TIM_ConfigClockSource>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d001      	beq.n	8002e70 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002e6c:	f7ff fde2 	bl	8002a34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e70:	2300      	movs	r3, #0
 8002e72:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e74:	2300      	movs	r3, #0
 8002e76:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e78:	463b      	mov	r3, r7
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	4805      	ldr	r0, [pc, #20]	; (8002e94 <MX_TIM2_Init+0x94>)
 8002e7e:	f004 fdad 	bl	80079dc <HAL_TIMEx_MasterConfigSynchronization>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d001      	beq.n	8002e8c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002e88:	f7ff fdd4 	bl	8002a34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002e8c:	bf00      	nop
 8002e8e:	3718      	adds	r7, #24
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	20006c78 	.word	0x20006c78

08002e98 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e9e:	f107 0308 	add.w	r3, r7, #8
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	601a      	str	r2, [r3, #0]
 8002ea6:	605a      	str	r2, [r3, #4]
 8002ea8:	609a      	str	r2, [r3, #8]
 8002eaa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002eac:	463b      	mov	r3, r7
 8002eae:	2200      	movs	r2, #0
 8002eb0:	601a      	str	r2, [r3, #0]
 8002eb2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002eb4:	4b1d      	ldr	r3, [pc, #116]	; (8002f2c <MX_TIM3_Init+0x94>)
 8002eb6:	4a1e      	ldr	r2, [pc, #120]	; (8002f30 <MX_TIM3_Init+0x98>)
 8002eb8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002eba:	4b1c      	ldr	r3, [pc, #112]	; (8002f2c <MX_TIM3_Init+0x94>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ec0:	4b1a      	ldr	r3, [pc, #104]	; (8002f2c <MX_TIM3_Init+0x94>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1125;
 8002ec6:	4b19      	ldr	r3, [pc, #100]	; (8002f2c <MX_TIM3_Init+0x94>)
 8002ec8:	f240 4265 	movw	r2, #1125	; 0x465
 8002ecc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ece:	4b17      	ldr	r3, [pc, #92]	; (8002f2c <MX_TIM3_Init+0x94>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ed4:	4b15      	ldr	r3, [pc, #84]	; (8002f2c <MX_TIM3_Init+0x94>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002eda:	4814      	ldr	r0, [pc, #80]	; (8002f2c <MX_TIM3_Init+0x94>)
 8002edc:	f003 fe0e 	bl	8006afc <HAL_TIM_Base_Init>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002ee6:	f7ff fda5 	bl	8002a34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002eea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002eee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002ef0:	f107 0308 	add.w	r3, r7, #8
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	480d      	ldr	r0, [pc, #52]	; (8002f2c <MX_TIM3_Init+0x94>)
 8002ef8:	f004 f8e0 	bl	80070bc <HAL_TIM_ConfigClockSource>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002f02:	f7ff fd97 	bl	8002a34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002f06:	2320      	movs	r3, #32
 8002f08:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f0e:	463b      	mov	r3, r7
 8002f10:	4619      	mov	r1, r3
 8002f12:	4806      	ldr	r0, [pc, #24]	; (8002f2c <MX_TIM3_Init+0x94>)
 8002f14:	f004 fd62 	bl	80079dc <HAL_TIMEx_MasterConfigSynchronization>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002f1e:	f7ff fd89 	bl	8002a34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002f22:	bf00      	nop
 8002f24:	3718      	adds	r7, #24
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	20006c30 	.word	0x20006c30
 8002f30:	40000400 	.word	0x40000400

08002f34 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b086      	sub	sp, #24
 8002f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f3a:	f107 0308 	add.w	r3, r7, #8
 8002f3e:	2200      	movs	r2, #0
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	605a      	str	r2, [r3, #4]
 8002f44:	609a      	str	r2, [r3, #8]
 8002f46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f48:	463b      	mov	r3, r7
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	601a      	str	r2, [r3, #0]
 8002f4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002f50:	4b1d      	ldr	r3, [pc, #116]	; (8002fc8 <MX_TIM5_Init+0x94>)
 8002f52:	4a1e      	ldr	r2, [pc, #120]	; (8002fcc <MX_TIM5_Init+0x98>)
 8002f54:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 7199;
 8002f56:	4b1c      	ldr	r3, [pc, #112]	; (8002fc8 <MX_TIM5_Init+0x94>)
 8002f58:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002f5c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f5e:	4b1a      	ldr	r3, [pc, #104]	; (8002fc8 <MX_TIM5_Init+0x94>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002f64:	4b18      	ldr	r3, [pc, #96]	; (8002fc8 <MX_TIM5_Init+0x94>)
 8002f66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f6a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f6c:	4b16      	ldr	r3, [pc, #88]	; (8002fc8 <MX_TIM5_Init+0x94>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f72:	4b15      	ldr	r3, [pc, #84]	; (8002fc8 <MX_TIM5_Init+0x94>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002f78:	4813      	ldr	r0, [pc, #76]	; (8002fc8 <MX_TIM5_Init+0x94>)
 8002f7a:	f003 fdbf 	bl	8006afc <HAL_TIM_Base_Init>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002f84:	f7ff fd56 	bl	8002a34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f8c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002f8e:	f107 0308 	add.w	r3, r7, #8
 8002f92:	4619      	mov	r1, r3
 8002f94:	480c      	ldr	r0, [pc, #48]	; (8002fc8 <MX_TIM5_Init+0x94>)
 8002f96:	f004 f891 	bl	80070bc <HAL_TIM_ConfigClockSource>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002fa0:	f7ff fd48 	bl	8002a34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002fac:	463b      	mov	r3, r7
 8002fae:	4619      	mov	r1, r3
 8002fb0:	4805      	ldr	r0, [pc, #20]	; (8002fc8 <MX_TIM5_Init+0x94>)
 8002fb2:	f004 fd13 	bl	80079dc <HAL_TIMEx_MasterConfigSynchronization>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d001      	beq.n	8002fc0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002fbc:	f7ff fd3a 	bl	8002a34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002fc0:	bf00      	nop
 8002fc2:	3718      	adds	r7, #24
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	20006be8 	.word	0x20006be8
 8002fcc:	40000c00 	.word	0x40000c00

08002fd0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b096      	sub	sp, #88	; 0x58
 8002fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fd6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002fda:	2200      	movs	r2, #0
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	605a      	str	r2, [r3, #4]
 8002fe0:	609a      	str	r2, [r3, #8]
 8002fe2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fe4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002fe8:	2200      	movs	r2, #0
 8002fea:	601a      	str	r2, [r3, #0]
 8002fec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002fee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	601a      	str	r2, [r3, #0]
 8002ff6:	605a      	str	r2, [r3, #4]
 8002ff8:	609a      	str	r2, [r3, #8]
 8002ffa:	60da      	str	r2, [r3, #12]
 8002ffc:	611a      	str	r2, [r3, #16]
 8002ffe:	615a      	str	r2, [r3, #20]
 8003000:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003002:	1d3b      	adds	r3, r7, #4
 8003004:	2220      	movs	r2, #32
 8003006:	2100      	movs	r1, #0
 8003008:	4618      	mov	r0, r3
 800300a:	f008 f83f 	bl	800b08c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800300e:	4b4b      	ldr	r3, [pc, #300]	; (800313c <MX_TIM8_Init+0x16c>)
 8003010:	4a4b      	ldr	r2, [pc, #300]	; (8003140 <MX_TIM8_Init+0x170>)
 8003012:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003014:	4b49      	ldr	r3, [pc, #292]	; (800313c <MX_TIM8_Init+0x16c>)
 8003016:	2200      	movs	r2, #0
 8003018:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800301a:	4b48      	ldr	r3, [pc, #288]	; (800313c <MX_TIM8_Init+0x16c>)
 800301c:	2200      	movs	r2, #0
 800301e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 255;
 8003020:	4b46      	ldr	r3, [pc, #280]	; (800313c <MX_TIM8_Init+0x16c>)
 8003022:	22ff      	movs	r2, #255	; 0xff
 8003024:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003026:	4b45      	ldr	r3, [pc, #276]	; (800313c <MX_TIM8_Init+0x16c>)
 8003028:	2200      	movs	r2, #0
 800302a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800302c:	4b43      	ldr	r3, [pc, #268]	; (800313c <MX_TIM8_Init+0x16c>)
 800302e:	2200      	movs	r2, #0
 8003030:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003032:	4b42      	ldr	r3, [pc, #264]	; (800313c <MX_TIM8_Init+0x16c>)
 8003034:	2200      	movs	r2, #0
 8003036:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003038:	4840      	ldr	r0, [pc, #256]	; (800313c <MX_TIM8_Init+0x16c>)
 800303a:	f003 fd5f 	bl	8006afc <HAL_TIM_Base_Init>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d001      	beq.n	8003048 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8003044:	f7ff fcf6 	bl	8002a34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003048:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800304c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800304e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003052:	4619      	mov	r1, r3
 8003054:	4839      	ldr	r0, [pc, #228]	; (800313c <MX_TIM8_Init+0x16c>)
 8003056:	f004 f831 	bl	80070bc <HAL_TIM_ConfigClockSource>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8003060:	f7ff fce8 	bl	8002a34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003064:	4835      	ldr	r0, [pc, #212]	; (800313c <MX_TIM8_Init+0x16c>)
 8003066:	f003 fe09 	bl	8006c7c <HAL_TIM_PWM_Init>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d001      	beq.n	8003074 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8003070:	f7ff fce0 	bl	8002a34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003074:	2300      	movs	r3, #0
 8003076:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003078:	2300      	movs	r3, #0
 800307a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800307c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003080:	4619      	mov	r1, r3
 8003082:	482e      	ldr	r0, [pc, #184]	; (800313c <MX_TIM8_Init+0x16c>)
 8003084:	f004 fcaa 	bl	80079dc <HAL_TIMEx_MasterConfigSynchronization>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 800308e:	f7ff fcd1 	bl	8002a34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003092:	2360      	movs	r3, #96	; 0x60
 8003094:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 128;
 8003096:	2380      	movs	r3, #128	; 0x80
 8003098:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800309a:	2300      	movs	r3, #0
 800309c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 800309e:	2308      	movs	r3, #8
 80030a0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80030a2:	2300      	movs	r3, #0
 80030a4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80030a6:	2300      	movs	r3, #0
 80030a8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80030aa:	2300      	movs	r3, #0
 80030ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80030ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030b2:	2200      	movs	r2, #0
 80030b4:	4619      	mov	r1, r3
 80030b6:	4821      	ldr	r0, [pc, #132]	; (800313c <MX_TIM8_Init+0x16c>)
 80030b8:	f003 ff42 	bl	8006f40 <HAL_TIM_PWM_ConfigChannel>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 80030c2:	f7ff fcb7 	bl	8002a34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80030c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030ca:	2204      	movs	r2, #4
 80030cc:	4619      	mov	r1, r3
 80030ce:	481b      	ldr	r0, [pc, #108]	; (800313c <MX_TIM8_Init+0x16c>)
 80030d0:	f003 ff36 	bl	8006f40 <HAL_TIM_PWM_ConfigChannel>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 80030da:	f7ff fcab 	bl	8002a34 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80030de:	2300      	movs	r3, #0
 80030e0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80030e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030e6:	2208      	movs	r2, #8
 80030e8:	4619      	mov	r1, r3
 80030ea:	4814      	ldr	r0, [pc, #80]	; (800313c <MX_TIM8_Init+0x16c>)
 80030ec:	f003 ff28 	bl	8006f40 <HAL_TIM_PWM_ConfigChannel>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 80030f6:	f7ff fc9d 	bl	8002a34 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80030fa:	2300      	movs	r3, #0
 80030fc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80030fe:	2300      	movs	r3, #0
 8003100:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003102:	2300      	movs	r3, #0
 8003104:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003106:	2300      	movs	r3, #0
 8003108:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800310a:	2300      	movs	r3, #0
 800310c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800310e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003112:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003114:	2300      	movs	r3, #0
 8003116:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003118:	1d3b      	adds	r3, r7, #4
 800311a:	4619      	mov	r1, r3
 800311c:	4807      	ldr	r0, [pc, #28]	; (800313c <MX_TIM8_Init+0x16c>)
 800311e:	f004 fcd9 	bl	8007ad4 <HAL_TIMEx_ConfigBreakDeadTime>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d001      	beq.n	800312c <MX_TIM8_Init+0x15c>
  {
    Error_Handler();
 8003128:	f7ff fc84 	bl	8002a34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800312c:	4803      	ldr	r0, [pc, #12]	; (800313c <MX_TIM8_Init+0x16c>)
 800312e:	f000 f891 	bl	8003254 <HAL_TIM_MspPostInit>

}
 8003132:	bf00      	nop
 8003134:	3758      	adds	r7, #88	; 0x58
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	20006ba0 	.word	0x20006ba0
 8003140:	40010400 	.word	0x40010400

08003144 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b08c      	sub	sp, #48	; 0x30
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800314c:	f107 031c 	add.w	r3, r7, #28
 8003150:	2200      	movs	r2, #0
 8003152:	601a      	str	r2, [r3, #0]
 8003154:	605a      	str	r2, [r3, #4]
 8003156:	609a      	str	r2, [r3, #8]
 8003158:	60da      	str	r2, [r3, #12]
 800315a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003164:	d10e      	bne.n	8003184 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003166:	2300      	movs	r3, #0
 8003168:	61bb      	str	r3, [r7, #24]
 800316a:	4b35      	ldr	r3, [pc, #212]	; (8003240 <HAL_TIM_Base_MspInit+0xfc>)
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	4a34      	ldr	r2, [pc, #208]	; (8003240 <HAL_TIM_Base_MspInit+0xfc>)
 8003170:	f043 0301 	orr.w	r3, r3, #1
 8003174:	6413      	str	r3, [r2, #64]	; 0x40
 8003176:	4b32      	ldr	r3, [pc, #200]	; (8003240 <HAL_TIM_Base_MspInit+0xfc>)
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	61bb      	str	r3, [r7, #24]
 8003180:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8003182:	e058      	b.n	8003236 <HAL_TIM_Base_MspInit+0xf2>
  else if(tim_baseHandle->Instance==TIM3)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a2e      	ldr	r2, [pc, #184]	; (8003244 <HAL_TIM_Base_MspInit+0x100>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d10e      	bne.n	80031ac <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800318e:	2300      	movs	r3, #0
 8003190:	617b      	str	r3, [r7, #20]
 8003192:	4b2b      	ldr	r3, [pc, #172]	; (8003240 <HAL_TIM_Base_MspInit+0xfc>)
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	4a2a      	ldr	r2, [pc, #168]	; (8003240 <HAL_TIM_Base_MspInit+0xfc>)
 8003198:	f043 0302 	orr.w	r3, r3, #2
 800319c:	6413      	str	r3, [r2, #64]	; 0x40
 800319e:	4b28      	ldr	r3, [pc, #160]	; (8003240 <HAL_TIM_Base_MspInit+0xfc>)
 80031a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	617b      	str	r3, [r7, #20]
 80031a8:	697b      	ldr	r3, [r7, #20]
}
 80031aa:	e044      	b.n	8003236 <HAL_TIM_Base_MspInit+0xf2>
  else if(tim_baseHandle->Instance==TIM5)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a25      	ldr	r2, [pc, #148]	; (8003248 <HAL_TIM_Base_MspInit+0x104>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d12c      	bne.n	8003210 <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80031b6:	2300      	movs	r3, #0
 80031b8:	613b      	str	r3, [r7, #16]
 80031ba:	4b21      	ldr	r3, [pc, #132]	; (8003240 <HAL_TIM_Base_MspInit+0xfc>)
 80031bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031be:	4a20      	ldr	r2, [pc, #128]	; (8003240 <HAL_TIM_Base_MspInit+0xfc>)
 80031c0:	f043 0308 	orr.w	r3, r3, #8
 80031c4:	6413      	str	r3, [r2, #64]	; 0x40
 80031c6:	4b1e      	ldr	r3, [pc, #120]	; (8003240 <HAL_TIM_Base_MspInit+0xfc>)
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	f003 0308 	and.w	r3, r3, #8
 80031ce:	613b      	str	r3, [r7, #16]
 80031d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031d2:	2300      	movs	r3, #0
 80031d4:	60fb      	str	r3, [r7, #12]
 80031d6:	4b1a      	ldr	r3, [pc, #104]	; (8003240 <HAL_TIM_Base_MspInit+0xfc>)
 80031d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031da:	4a19      	ldr	r2, [pc, #100]	; (8003240 <HAL_TIM_Base_MspInit+0xfc>)
 80031dc:	f043 0301 	orr.w	r3, r3, #1
 80031e0:	6313      	str	r3, [r2, #48]	; 0x30
 80031e2:	4b17      	ldr	r3, [pc, #92]	; (8003240 <HAL_TIM_Base_MspInit+0xfc>)
 80031e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	60fb      	str	r3, [r7, #12]
 80031ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80031ee:	230f      	movs	r3, #15
 80031f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031f2:	2302      	movs	r3, #2
 80031f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f6:	2300      	movs	r3, #0
 80031f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031fa:	2300      	movs	r3, #0
 80031fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80031fe:	2302      	movs	r3, #2
 8003200:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003202:	f107 031c 	add.w	r3, r7, #28
 8003206:	4619      	mov	r1, r3
 8003208:	4810      	ldr	r0, [pc, #64]	; (800324c <HAL_TIM_Base_MspInit+0x108>)
 800320a:	f001 fe21 	bl	8004e50 <HAL_GPIO_Init>
}
 800320e:	e012      	b.n	8003236 <HAL_TIM_Base_MspInit+0xf2>
  else if(tim_baseHandle->Instance==TIM8)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a0e      	ldr	r2, [pc, #56]	; (8003250 <HAL_TIM_Base_MspInit+0x10c>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d10d      	bne.n	8003236 <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800321a:	2300      	movs	r3, #0
 800321c:	60bb      	str	r3, [r7, #8]
 800321e:	4b08      	ldr	r3, [pc, #32]	; (8003240 <HAL_TIM_Base_MspInit+0xfc>)
 8003220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003222:	4a07      	ldr	r2, [pc, #28]	; (8003240 <HAL_TIM_Base_MspInit+0xfc>)
 8003224:	f043 0302 	orr.w	r3, r3, #2
 8003228:	6453      	str	r3, [r2, #68]	; 0x44
 800322a:	4b05      	ldr	r3, [pc, #20]	; (8003240 <HAL_TIM_Base_MspInit+0xfc>)
 800322c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	60bb      	str	r3, [r7, #8]
 8003234:	68bb      	ldr	r3, [r7, #8]
}
 8003236:	bf00      	nop
 8003238:	3730      	adds	r7, #48	; 0x30
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	40023800 	.word	0x40023800
 8003244:	40000400 	.word	0x40000400
 8003248:	40000c00 	.word	0x40000c00
 800324c:	40020000 	.word	0x40020000
 8003250:	40010400 	.word	0x40010400

08003254 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b08a      	sub	sp, #40	; 0x28
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800325c:	f107 0314 	add.w	r3, r7, #20
 8003260:	2200      	movs	r2, #0
 8003262:	601a      	str	r2, [r3, #0]
 8003264:	605a      	str	r2, [r3, #4]
 8003266:	609a      	str	r2, [r3, #8]
 8003268:	60da      	str	r2, [r3, #12]
 800326a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a21      	ldr	r2, [pc, #132]	; (80032f8 <HAL_TIM_MspPostInit+0xa4>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d13c      	bne.n	80032f0 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003276:	2300      	movs	r3, #0
 8003278:	613b      	str	r3, [r7, #16]
 800327a:	4b20      	ldr	r3, [pc, #128]	; (80032fc <HAL_TIM_MspPostInit+0xa8>)
 800327c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327e:	4a1f      	ldr	r2, [pc, #124]	; (80032fc <HAL_TIM_MspPostInit+0xa8>)
 8003280:	f043 0301 	orr.w	r3, r3, #1
 8003284:	6313      	str	r3, [r2, #48]	; 0x30
 8003286:	4b1d      	ldr	r3, [pc, #116]	; (80032fc <HAL_TIM_MspPostInit+0xa8>)
 8003288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	613b      	str	r3, [r7, #16]
 8003290:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003292:	2300      	movs	r3, #0
 8003294:	60fb      	str	r3, [r7, #12]
 8003296:	4b19      	ldr	r3, [pc, #100]	; (80032fc <HAL_TIM_MspPostInit+0xa8>)
 8003298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329a:	4a18      	ldr	r2, [pc, #96]	; (80032fc <HAL_TIM_MspPostInit+0xa8>)
 800329c:	f043 0302 	orr.w	r3, r3, #2
 80032a0:	6313      	str	r3, [r2, #48]	; 0x30
 80032a2:	4b16      	ldr	r3, [pc, #88]	; (80032fc <HAL_TIM_MspPostInit+0xa8>)
 80032a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	60fb      	str	r3, [r7, #12]
 80032ac:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PA7     ------> TIM8_CH1N
    PB14     ------> TIM8_CH2N
    PB15     ------> TIM8_CH3N
    */
    GPIO_InitStruct.Pin = LED_RED_Pin;
 80032ae:	2380      	movs	r3, #128	; 0x80
 80032b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b2:	2302      	movs	r3, #2
 80032b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b6:	2300      	movs	r3, #0
 80032b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ba:	2300      	movs	r3, #0
 80032bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80032be:	2303      	movs	r3, #3
 80032c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80032c2:	f107 0314 	add.w	r3, r7, #20
 80032c6:	4619      	mov	r1, r3
 80032c8:	480d      	ldr	r0, [pc, #52]	; (8003300 <HAL_TIM_MspPostInit+0xac>)
 80032ca:	f001 fdc1 	bl	8004e50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_BLUE_Pin;
 80032ce:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80032d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d4:	2302      	movs	r3, #2
 80032d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d8:	2300      	movs	r3, #0
 80032da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032dc:	2300      	movs	r3, #0
 80032de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80032e0:	2303      	movs	r3, #3
 80032e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032e4:	f107 0314 	add.w	r3, r7, #20
 80032e8:	4619      	mov	r1, r3
 80032ea:	4806      	ldr	r0, [pc, #24]	; (8003304 <HAL_TIM_MspPostInit+0xb0>)
 80032ec:	f001 fdb0 	bl	8004e50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80032f0:	bf00      	nop
 80032f2:	3728      	adds	r7, #40	; 0x28
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	40010400 	.word	0x40010400
 80032fc:	40023800 	.word	0x40023800
 8003300:	40020000 	.word	0x40020000
 8003304:	40020400 	.word	0x40020400

08003308 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800330c:	4b11      	ldr	r3, [pc, #68]	; (8003354 <MX_USART1_UART_Init+0x4c>)
 800330e:	4a12      	ldr	r2, [pc, #72]	; (8003358 <MX_USART1_UART_Init+0x50>)
 8003310:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003312:	4b10      	ldr	r3, [pc, #64]	; (8003354 <MX_USART1_UART_Init+0x4c>)
 8003314:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003318:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800331a:	4b0e      	ldr	r3, [pc, #56]	; (8003354 <MX_USART1_UART_Init+0x4c>)
 800331c:	2200      	movs	r2, #0
 800331e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003320:	4b0c      	ldr	r3, [pc, #48]	; (8003354 <MX_USART1_UART_Init+0x4c>)
 8003322:	2200      	movs	r2, #0
 8003324:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003326:	4b0b      	ldr	r3, [pc, #44]	; (8003354 <MX_USART1_UART_Init+0x4c>)
 8003328:	2200      	movs	r2, #0
 800332a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800332c:	4b09      	ldr	r3, [pc, #36]	; (8003354 <MX_USART1_UART_Init+0x4c>)
 800332e:	220c      	movs	r2, #12
 8003330:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003332:	4b08      	ldr	r3, [pc, #32]	; (8003354 <MX_USART1_UART_Init+0x4c>)
 8003334:	2200      	movs	r2, #0
 8003336:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003338:	4b06      	ldr	r3, [pc, #24]	; (8003354 <MX_USART1_UART_Init+0x4c>)
 800333a:	2200      	movs	r2, #0
 800333c:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 800333e:	4805      	ldr	r0, [pc, #20]	; (8003354 <MX_USART1_UART_Init+0x4c>)
 8003340:	f004 fca0 	bl	8007c84 <HAL_HalfDuplex_Init>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800334a:	f7ff fb73 	bl	8002a34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800334e:	bf00      	nop
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	20006f44 	.word	0x20006f44
 8003358:	40011000 	.word	0x40011000

0800335c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003360:	4b11      	ldr	r3, [pc, #68]	; (80033a8 <MX_USART3_UART_Init+0x4c>)
 8003362:	4a12      	ldr	r2, [pc, #72]	; (80033ac <MX_USART3_UART_Init+0x50>)
 8003364:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003366:	4b10      	ldr	r3, [pc, #64]	; (80033a8 <MX_USART3_UART_Init+0x4c>)
 8003368:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800336c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800336e:	4b0e      	ldr	r3, [pc, #56]	; (80033a8 <MX_USART3_UART_Init+0x4c>)
 8003370:	2200      	movs	r2, #0
 8003372:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003374:	4b0c      	ldr	r3, [pc, #48]	; (80033a8 <MX_USART3_UART_Init+0x4c>)
 8003376:	2200      	movs	r2, #0
 8003378:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800337a:	4b0b      	ldr	r3, [pc, #44]	; (80033a8 <MX_USART3_UART_Init+0x4c>)
 800337c:	2200      	movs	r2, #0
 800337e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003380:	4b09      	ldr	r3, [pc, #36]	; (80033a8 <MX_USART3_UART_Init+0x4c>)
 8003382:	220c      	movs	r2, #12
 8003384:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003386:	4b08      	ldr	r3, [pc, #32]	; (80033a8 <MX_USART3_UART_Init+0x4c>)
 8003388:	2200      	movs	r2, #0
 800338a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800338c:	4b06      	ldr	r3, [pc, #24]	; (80033a8 <MX_USART3_UART_Init+0x4c>)
 800338e:	2200      	movs	r2, #0
 8003390:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003392:	4805      	ldr	r0, [pc, #20]	; (80033a8 <MX_USART3_UART_Init+0x4c>)
 8003394:	f004 fc29 	bl	8007bea <HAL_UART_Init>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800339e:	f7ff fb49 	bl	8002a34 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80033a2:	bf00      	nop
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	20006d80 	.word	0x20006d80
 80033ac:	40004800 	.word	0x40004800

080033b0 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80033b4:	4b11      	ldr	r3, [pc, #68]	; (80033fc <MX_USART6_UART_Init+0x4c>)
 80033b6:	4a12      	ldr	r2, [pc, #72]	; (8003400 <MX_USART6_UART_Init+0x50>)
 80033b8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80033ba:	4b10      	ldr	r3, [pc, #64]	; (80033fc <MX_USART6_UART_Init+0x4c>)
 80033bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80033c0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80033c2:	4b0e      	ldr	r3, [pc, #56]	; (80033fc <MX_USART6_UART_Init+0x4c>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80033c8:	4b0c      	ldr	r3, [pc, #48]	; (80033fc <MX_USART6_UART_Init+0x4c>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80033ce:	4b0b      	ldr	r3, [pc, #44]	; (80033fc <MX_USART6_UART_Init+0x4c>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80033d4:	4b09      	ldr	r3, [pc, #36]	; (80033fc <MX_USART6_UART_Init+0x4c>)
 80033d6:	220c      	movs	r2, #12
 80033d8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033da:	4b08      	ldr	r3, [pc, #32]	; (80033fc <MX_USART6_UART_Init+0x4c>)
 80033dc:	2200      	movs	r2, #0
 80033de:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80033e0:	4b06      	ldr	r3, [pc, #24]	; (80033fc <MX_USART6_UART_Init+0x4c>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80033e6:	4805      	ldr	r0, [pc, #20]	; (80033fc <MX_USART6_UART_Init+0x4c>)
 80033e8:	f004 fbff 	bl	8007bea <HAL_UART_Init>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80033f2:	f7ff fb1f 	bl	8002a34 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80033f6:	bf00      	nop
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	20006f88 	.word	0x20006f88
 8003400:	40011400 	.word	0x40011400

08003404 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b08e      	sub	sp, #56	; 0x38
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800340c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003410:	2200      	movs	r2, #0
 8003412:	601a      	str	r2, [r3, #0]
 8003414:	605a      	str	r2, [r3, #4]
 8003416:	609a      	str	r2, [r3, #8]
 8003418:	60da      	str	r2, [r3, #12]
 800341a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a4b      	ldr	r2, [pc, #300]	; (8003550 <HAL_UART_MspInit+0x14c>)
 8003422:	4293      	cmp	r3, r2
 8003424:	f040 80a2 	bne.w	800356c <HAL_UART_MspInit+0x168>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003428:	2300      	movs	r3, #0
 800342a:	623b      	str	r3, [r7, #32]
 800342c:	4b49      	ldr	r3, [pc, #292]	; (8003554 <HAL_UART_MspInit+0x150>)
 800342e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003430:	4a48      	ldr	r2, [pc, #288]	; (8003554 <HAL_UART_MspInit+0x150>)
 8003432:	f043 0310 	orr.w	r3, r3, #16
 8003436:	6453      	str	r3, [r2, #68]	; 0x44
 8003438:	4b46      	ldr	r3, [pc, #280]	; (8003554 <HAL_UART_MspInit+0x150>)
 800343a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800343c:	f003 0310 	and.w	r3, r3, #16
 8003440:	623b      	str	r3, [r7, #32]
 8003442:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003444:	2300      	movs	r3, #0
 8003446:	61fb      	str	r3, [r7, #28]
 8003448:	4b42      	ldr	r3, [pc, #264]	; (8003554 <HAL_UART_MspInit+0x150>)
 800344a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344c:	4a41      	ldr	r2, [pc, #260]	; (8003554 <HAL_UART_MspInit+0x150>)
 800344e:	f043 0301 	orr.w	r3, r3, #1
 8003452:	6313      	str	r3, [r2, #48]	; 0x30
 8003454:	4b3f      	ldr	r3, [pc, #252]	; (8003554 <HAL_UART_MspInit+0x150>)
 8003456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003458:	f003 0301 	and.w	r3, r3, #1
 800345c:	61fb      	str	r3, [r7, #28]
 800345e:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = SERVO_TX_Pin;
 8003460:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003464:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003466:	2312      	movs	r3, #18
 8003468:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800346a:	2301      	movs	r3, #1
 800346c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800346e:	2303      	movs	r3, #3
 8003470:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003472:	2307      	movs	r3, #7
 8003474:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SERVO_TX_GPIO_Port, &GPIO_InitStruct);
 8003476:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800347a:	4619      	mov	r1, r3
 800347c:	4836      	ldr	r0, [pc, #216]	; (8003558 <HAL_UART_MspInit+0x154>)
 800347e:	f001 fce7 	bl	8004e50 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 8003482:	4b36      	ldr	r3, [pc, #216]	; (800355c <HAL_UART_MspInit+0x158>)
 8003484:	4a36      	ldr	r2, [pc, #216]	; (8003560 <HAL_UART_MspInit+0x15c>)
 8003486:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003488:	4b34      	ldr	r3, [pc, #208]	; (800355c <HAL_UART_MspInit+0x158>)
 800348a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800348e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003490:	4b32      	ldr	r3, [pc, #200]	; (800355c <HAL_UART_MspInit+0x158>)
 8003492:	2200      	movs	r2, #0
 8003494:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003496:	4b31      	ldr	r3, [pc, #196]	; (800355c <HAL_UART_MspInit+0x158>)
 8003498:	2200      	movs	r2, #0
 800349a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800349c:	4b2f      	ldr	r3, [pc, #188]	; (800355c <HAL_UART_MspInit+0x158>)
 800349e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034a2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034a4:	4b2d      	ldr	r3, [pc, #180]	; (800355c <HAL_UART_MspInit+0x158>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034aa:	4b2c      	ldr	r3, [pc, #176]	; (800355c <HAL_UART_MspInit+0x158>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80034b0:	4b2a      	ldr	r3, [pc, #168]	; (800355c <HAL_UART_MspInit+0x158>)
 80034b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034b6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80034b8:	4b28      	ldr	r3, [pc, #160]	; (800355c <HAL_UART_MspInit+0x158>)
 80034ba:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80034be:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80034c0:	4b26      	ldr	r3, [pc, #152]	; (800355c <HAL_UART_MspInit+0x158>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80034c6:	4825      	ldr	r0, [pc, #148]	; (800355c <HAL_UART_MspInit+0x158>)
 80034c8:	f001 f8c0 	bl	800464c <HAL_DMA_Init>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 80034d2:	f7ff faaf 	bl	8002a34 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a20      	ldr	r2, [pc, #128]	; (800355c <HAL_UART_MspInit+0x158>)
 80034da:	639a      	str	r2, [r3, #56]	; 0x38
 80034dc:	4a1f      	ldr	r2, [pc, #124]	; (800355c <HAL_UART_MspInit+0x158>)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80034e2:	4b20      	ldr	r3, [pc, #128]	; (8003564 <HAL_UART_MspInit+0x160>)
 80034e4:	4a20      	ldr	r2, [pc, #128]	; (8003568 <HAL_UART_MspInit+0x164>)
 80034e6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80034e8:	4b1e      	ldr	r3, [pc, #120]	; (8003564 <HAL_UART_MspInit+0x160>)
 80034ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80034ee:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80034f0:	4b1c      	ldr	r3, [pc, #112]	; (8003564 <HAL_UART_MspInit+0x160>)
 80034f2:	2240      	movs	r2, #64	; 0x40
 80034f4:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034f6:	4b1b      	ldr	r3, [pc, #108]	; (8003564 <HAL_UART_MspInit+0x160>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80034fc:	4b19      	ldr	r3, [pc, #100]	; (8003564 <HAL_UART_MspInit+0x160>)
 80034fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003502:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003504:	4b17      	ldr	r3, [pc, #92]	; (8003564 <HAL_UART_MspInit+0x160>)
 8003506:	2200      	movs	r2, #0
 8003508:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800350a:	4b16      	ldr	r3, [pc, #88]	; (8003564 <HAL_UART_MspInit+0x160>)
 800350c:	2200      	movs	r2, #0
 800350e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003510:	4b14      	ldr	r3, [pc, #80]	; (8003564 <HAL_UART_MspInit+0x160>)
 8003512:	2200      	movs	r2, #0
 8003514:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003516:	4b13      	ldr	r3, [pc, #76]	; (8003564 <HAL_UART_MspInit+0x160>)
 8003518:	2200      	movs	r2, #0
 800351a:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800351c:	4b11      	ldr	r3, [pc, #68]	; (8003564 <HAL_UART_MspInit+0x160>)
 800351e:	2200      	movs	r2, #0
 8003520:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003522:	4810      	ldr	r0, [pc, #64]	; (8003564 <HAL_UART_MspInit+0x160>)
 8003524:	f001 f892 	bl	800464c <HAL_DMA_Init>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 800352e:	f7ff fa81 	bl	8002a34 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a0b      	ldr	r2, [pc, #44]	; (8003564 <HAL_UART_MspInit+0x160>)
 8003536:	635a      	str	r2, [r3, #52]	; 0x34
 8003538:	4a0a      	ldr	r2, [pc, #40]	; (8003564 <HAL_UART_MspInit+0x160>)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800353e:	2200      	movs	r2, #0
 8003540:	2105      	movs	r1, #5
 8003542:	2025      	movs	r0, #37	; 0x25
 8003544:	f001 f858 	bl	80045f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003548:	2025      	movs	r0, #37	; 0x25
 800354a:	f001 f871 	bl	8004630 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800354e:	e16d      	b.n	800382c <HAL_UART_MspInit+0x428>
 8003550:	40011000 	.word	0x40011000
 8003554:	40023800 	.word	0x40023800
 8003558:	40020000 	.word	0x40020000
 800355c:	20006ee4 	.word	0x20006ee4
 8003560:	40026488 	.word	0x40026488
 8003564:	20006e24 	.word	0x20006e24
 8003568:	400264b8 	.word	0x400264b8
  else if(uartHandle->Instance==USART3)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a5a      	ldr	r2, [pc, #360]	; (80036dc <HAL_UART_MspInit+0x2d8>)
 8003572:	4293      	cmp	r3, r2
 8003574:	f040 80c2 	bne.w	80036fc <HAL_UART_MspInit+0x2f8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003578:	2300      	movs	r3, #0
 800357a:	61bb      	str	r3, [r7, #24]
 800357c:	4b58      	ldr	r3, [pc, #352]	; (80036e0 <HAL_UART_MspInit+0x2dc>)
 800357e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003580:	4a57      	ldr	r2, [pc, #348]	; (80036e0 <HAL_UART_MspInit+0x2dc>)
 8003582:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003586:	6413      	str	r3, [r2, #64]	; 0x40
 8003588:	4b55      	ldr	r3, [pc, #340]	; (80036e0 <HAL_UART_MspInit+0x2dc>)
 800358a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003590:	61bb      	str	r3, [r7, #24]
 8003592:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003594:	2300      	movs	r3, #0
 8003596:	617b      	str	r3, [r7, #20]
 8003598:	4b51      	ldr	r3, [pc, #324]	; (80036e0 <HAL_UART_MspInit+0x2dc>)
 800359a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359c:	4a50      	ldr	r2, [pc, #320]	; (80036e0 <HAL_UART_MspInit+0x2dc>)
 800359e:	f043 0304 	orr.w	r3, r3, #4
 80035a2:	6313      	str	r3, [r2, #48]	; 0x30
 80035a4:	4b4e      	ldr	r3, [pc, #312]	; (80036e0 <HAL_UART_MspInit+0x2dc>)
 80035a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a8:	f003 0304 	and.w	r3, r3, #4
 80035ac:	617b      	str	r3, [r7, #20]
 80035ae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035b0:	2300      	movs	r3, #0
 80035b2:	613b      	str	r3, [r7, #16]
 80035b4:	4b4a      	ldr	r3, [pc, #296]	; (80036e0 <HAL_UART_MspInit+0x2dc>)
 80035b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b8:	4a49      	ldr	r2, [pc, #292]	; (80036e0 <HAL_UART_MspInit+0x2dc>)
 80035ba:	f043 0302 	orr.w	r3, r3, #2
 80035be:	6313      	str	r3, [r2, #48]	; 0x30
 80035c0:	4b47      	ldr	r3, [pc, #284]	; (80036e0 <HAL_UART_MspInit+0x2dc>)
 80035c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	613b      	str	r3, [r7, #16]
 80035ca:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = DEBUG_RX_Pin;
 80035cc:	2320      	movs	r3, #32
 80035ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d0:	2302      	movs	r3, #2
 80035d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d4:	2300      	movs	r3, #0
 80035d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035d8:	2303      	movs	r3, #3
 80035da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80035dc:	2307      	movs	r3, #7
 80035de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DEBUG_RX_GPIO_Port, &GPIO_InitStruct);
 80035e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035e4:	4619      	mov	r1, r3
 80035e6:	483f      	ldr	r0, [pc, #252]	; (80036e4 <HAL_UART_MspInit+0x2e0>)
 80035e8:	f001 fc32 	bl	8004e50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DEBUG_TX_Pin;
 80035ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f2:	2302      	movs	r3, #2
 80035f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f6:	2300      	movs	r3, #0
 80035f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035fa:	2303      	movs	r3, #3
 80035fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80035fe:	2307      	movs	r3, #7
 8003600:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DEBUG_TX_GPIO_Port, &GPIO_InitStruct);
 8003602:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003606:	4619      	mov	r1, r3
 8003608:	4837      	ldr	r0, [pc, #220]	; (80036e8 <HAL_UART_MspInit+0x2e4>)
 800360a:	f001 fc21 	bl	8004e50 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800360e:	4b37      	ldr	r3, [pc, #220]	; (80036ec <HAL_UART_MspInit+0x2e8>)
 8003610:	4a37      	ldr	r2, [pc, #220]	; (80036f0 <HAL_UART_MspInit+0x2ec>)
 8003612:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003614:	4b35      	ldr	r3, [pc, #212]	; (80036ec <HAL_UART_MspInit+0x2e8>)
 8003616:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800361a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800361c:	4b33      	ldr	r3, [pc, #204]	; (80036ec <HAL_UART_MspInit+0x2e8>)
 800361e:	2200      	movs	r2, #0
 8003620:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003622:	4b32      	ldr	r3, [pc, #200]	; (80036ec <HAL_UART_MspInit+0x2e8>)
 8003624:	2200      	movs	r2, #0
 8003626:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003628:	4b30      	ldr	r3, [pc, #192]	; (80036ec <HAL_UART_MspInit+0x2e8>)
 800362a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800362e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003630:	4b2e      	ldr	r3, [pc, #184]	; (80036ec <HAL_UART_MspInit+0x2e8>)
 8003632:	2200      	movs	r2, #0
 8003634:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003636:	4b2d      	ldr	r3, [pc, #180]	; (80036ec <HAL_UART_MspInit+0x2e8>)
 8003638:	2200      	movs	r2, #0
 800363a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800363c:	4b2b      	ldr	r3, [pc, #172]	; (80036ec <HAL_UART_MspInit+0x2e8>)
 800363e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003642:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003644:	4b29      	ldr	r3, [pc, #164]	; (80036ec <HAL_UART_MspInit+0x2e8>)
 8003646:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800364a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800364c:	4b27      	ldr	r3, [pc, #156]	; (80036ec <HAL_UART_MspInit+0x2e8>)
 800364e:	2200      	movs	r2, #0
 8003650:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003652:	4826      	ldr	r0, [pc, #152]	; (80036ec <HAL_UART_MspInit+0x2e8>)
 8003654:	f000 fffa 	bl	800464c <HAL_DMA_Init>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <HAL_UART_MspInit+0x25e>
      Error_Handler();
 800365e:	f7ff f9e9 	bl	8002a34 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a21      	ldr	r2, [pc, #132]	; (80036ec <HAL_UART_MspInit+0x2e8>)
 8003666:	639a      	str	r2, [r3, #56]	; 0x38
 8003668:	4a20      	ldr	r2, [pc, #128]	; (80036ec <HAL_UART_MspInit+0x2e8>)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800366e:	4b21      	ldr	r3, [pc, #132]	; (80036f4 <HAL_UART_MspInit+0x2f0>)
 8003670:	4a21      	ldr	r2, [pc, #132]	; (80036f8 <HAL_UART_MspInit+0x2f4>)
 8003672:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8003674:	4b1f      	ldr	r3, [pc, #124]	; (80036f4 <HAL_UART_MspInit+0x2f0>)
 8003676:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800367a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800367c:	4b1d      	ldr	r3, [pc, #116]	; (80036f4 <HAL_UART_MspInit+0x2f0>)
 800367e:	2240      	movs	r2, #64	; 0x40
 8003680:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003682:	4b1c      	ldr	r3, [pc, #112]	; (80036f4 <HAL_UART_MspInit+0x2f0>)
 8003684:	2200      	movs	r2, #0
 8003686:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003688:	4b1a      	ldr	r3, [pc, #104]	; (80036f4 <HAL_UART_MspInit+0x2f0>)
 800368a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800368e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003690:	4b18      	ldr	r3, [pc, #96]	; (80036f4 <HAL_UART_MspInit+0x2f0>)
 8003692:	2200      	movs	r2, #0
 8003694:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003696:	4b17      	ldr	r3, [pc, #92]	; (80036f4 <HAL_UART_MspInit+0x2f0>)
 8003698:	2200      	movs	r2, #0
 800369a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800369c:	4b15      	ldr	r3, [pc, #84]	; (80036f4 <HAL_UART_MspInit+0x2f0>)
 800369e:	2200      	movs	r2, #0
 80036a0:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80036a2:	4b14      	ldr	r3, [pc, #80]	; (80036f4 <HAL_UART_MspInit+0x2f0>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036a8:	4b12      	ldr	r3, [pc, #72]	; (80036f4 <HAL_UART_MspInit+0x2f0>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80036ae:	4811      	ldr	r0, [pc, #68]	; (80036f4 <HAL_UART_MspInit+0x2f0>)
 80036b0:	f000 ffcc 	bl	800464c <HAL_DMA_Init>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d001      	beq.n	80036be <HAL_UART_MspInit+0x2ba>
      Error_Handler();
 80036ba:	f7ff f9bb 	bl	8002a34 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a0c      	ldr	r2, [pc, #48]	; (80036f4 <HAL_UART_MspInit+0x2f0>)
 80036c2:	635a      	str	r2, [r3, #52]	; 0x34
 80036c4:	4a0b      	ldr	r2, [pc, #44]	; (80036f4 <HAL_UART_MspInit+0x2f0>)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80036ca:	2200      	movs	r2, #0
 80036cc:	2105      	movs	r1, #5
 80036ce:	2027      	movs	r0, #39	; 0x27
 80036d0:	f000 ff92 	bl	80045f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80036d4:	2027      	movs	r0, #39	; 0x27
 80036d6:	f000 ffab 	bl	8004630 <HAL_NVIC_EnableIRQ>
}
 80036da:	e0a7      	b.n	800382c <HAL_UART_MspInit+0x428>
 80036dc:	40004800 	.word	0x40004800
 80036e0:	40023800 	.word	0x40023800
 80036e4:	40020800 	.word	0x40020800
 80036e8:	40020400 	.word	0x40020400
 80036ec:	20006d20 	.word	0x20006d20
 80036f0:	40026028 	.word	0x40026028
 80036f4:	20006dc4 	.word	0x20006dc4
 80036f8:	40026058 	.word	0x40026058
  else if(uartHandle->Instance==USART6)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a4c      	ldr	r2, [pc, #304]	; (8003834 <HAL_UART_MspInit+0x430>)
 8003702:	4293      	cmp	r3, r2
 8003704:	f040 8092 	bne.w	800382c <HAL_UART_MspInit+0x428>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003708:	2300      	movs	r3, #0
 800370a:	60fb      	str	r3, [r7, #12]
 800370c:	4b4a      	ldr	r3, [pc, #296]	; (8003838 <HAL_UART_MspInit+0x434>)
 800370e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003710:	4a49      	ldr	r2, [pc, #292]	; (8003838 <HAL_UART_MspInit+0x434>)
 8003712:	f043 0320 	orr.w	r3, r3, #32
 8003716:	6453      	str	r3, [r2, #68]	; 0x44
 8003718:	4b47      	ldr	r3, [pc, #284]	; (8003838 <HAL_UART_MspInit+0x434>)
 800371a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371c:	f003 0320 	and.w	r3, r3, #32
 8003720:	60fb      	str	r3, [r7, #12]
 8003722:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003724:	2300      	movs	r3, #0
 8003726:	60bb      	str	r3, [r7, #8]
 8003728:	4b43      	ldr	r3, [pc, #268]	; (8003838 <HAL_UART_MspInit+0x434>)
 800372a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372c:	4a42      	ldr	r2, [pc, #264]	; (8003838 <HAL_UART_MspInit+0x434>)
 800372e:	f043 0304 	orr.w	r3, r3, #4
 8003732:	6313      	str	r3, [r2, #48]	; 0x30
 8003734:	4b40      	ldr	r3, [pc, #256]	; (8003838 <HAL_UART_MspInit+0x434>)
 8003736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003738:	f003 0304 	and.w	r3, r3, #4
 800373c:	60bb      	str	r3, [r7, #8]
 800373e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CM4_TX_Pin|CM4_RX_Pin;
 8003740:	23c0      	movs	r3, #192	; 0xc0
 8003742:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003744:	2302      	movs	r3, #2
 8003746:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003748:	2300      	movs	r3, #0
 800374a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800374c:	2303      	movs	r3, #3
 800374e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003750:	2308      	movs	r3, #8
 8003752:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003754:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003758:	4619      	mov	r1, r3
 800375a:	4838      	ldr	r0, [pc, #224]	; (800383c <HAL_UART_MspInit+0x438>)
 800375c:	f001 fb78 	bl	8004e50 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream2;
 8003760:	4b37      	ldr	r3, [pc, #220]	; (8003840 <HAL_UART_MspInit+0x43c>)
 8003762:	4a38      	ldr	r2, [pc, #224]	; (8003844 <HAL_UART_MspInit+0x440>)
 8003764:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8003766:	4b36      	ldr	r3, [pc, #216]	; (8003840 <HAL_UART_MspInit+0x43c>)
 8003768:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800376c:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800376e:	4b34      	ldr	r3, [pc, #208]	; (8003840 <HAL_UART_MspInit+0x43c>)
 8003770:	2200      	movs	r2, #0
 8003772:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003774:	4b32      	ldr	r3, [pc, #200]	; (8003840 <HAL_UART_MspInit+0x43c>)
 8003776:	2200      	movs	r2, #0
 8003778:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800377a:	4b31      	ldr	r3, [pc, #196]	; (8003840 <HAL_UART_MspInit+0x43c>)
 800377c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003780:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003782:	4b2f      	ldr	r3, [pc, #188]	; (8003840 <HAL_UART_MspInit+0x43c>)
 8003784:	2200      	movs	r2, #0
 8003786:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003788:	4b2d      	ldr	r3, [pc, #180]	; (8003840 <HAL_UART_MspInit+0x43c>)
 800378a:	2200      	movs	r2, #0
 800378c:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 800378e:	4b2c      	ldr	r3, [pc, #176]	; (8003840 <HAL_UART_MspInit+0x43c>)
 8003790:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003794:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003796:	4b2a      	ldr	r3, [pc, #168]	; (8003840 <HAL_UART_MspInit+0x43c>)
 8003798:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800379c:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800379e:	4b28      	ldr	r3, [pc, #160]	; (8003840 <HAL_UART_MspInit+0x43c>)
 80037a0:	2200      	movs	r2, #0
 80037a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80037a4:	4826      	ldr	r0, [pc, #152]	; (8003840 <HAL_UART_MspInit+0x43c>)
 80037a6:	f000 ff51 	bl	800464c <HAL_DMA_Init>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d001      	beq.n	80037b4 <HAL_UART_MspInit+0x3b0>
      Error_Handler();
 80037b0:	f7ff f940 	bl	8002a34 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a22      	ldr	r2, [pc, #136]	; (8003840 <HAL_UART_MspInit+0x43c>)
 80037b8:	639a      	str	r2, [r3, #56]	; 0x38
 80037ba:	4a21      	ldr	r2, [pc, #132]	; (8003840 <HAL_UART_MspInit+0x43c>)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 80037c0:	4b21      	ldr	r3, [pc, #132]	; (8003848 <HAL_UART_MspInit+0x444>)
 80037c2:	4a22      	ldr	r2, [pc, #136]	; (800384c <HAL_UART_MspInit+0x448>)
 80037c4:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 80037c6:	4b20      	ldr	r3, [pc, #128]	; (8003848 <HAL_UART_MspInit+0x444>)
 80037c8:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80037cc:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80037ce:	4b1e      	ldr	r3, [pc, #120]	; (8003848 <HAL_UART_MspInit+0x444>)
 80037d0:	2240      	movs	r2, #64	; 0x40
 80037d2:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037d4:	4b1c      	ldr	r3, [pc, #112]	; (8003848 <HAL_UART_MspInit+0x444>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 80037da:	4b1b      	ldr	r3, [pc, #108]	; (8003848 <HAL_UART_MspInit+0x444>)
 80037dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037e0:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80037e2:	4b19      	ldr	r3, [pc, #100]	; (8003848 <HAL_UART_MspInit+0x444>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80037e8:	4b17      	ldr	r3, [pc, #92]	; (8003848 <HAL_UART_MspInit+0x444>)
 80037ea:	2200      	movs	r2, #0
 80037ec:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 80037ee:	4b16      	ldr	r3, [pc, #88]	; (8003848 <HAL_UART_MspInit+0x444>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 80037f4:	4b14      	ldr	r3, [pc, #80]	; (8003848 <HAL_UART_MspInit+0x444>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80037fa:	4b13      	ldr	r3, [pc, #76]	; (8003848 <HAL_UART_MspInit+0x444>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8003800:	4811      	ldr	r0, [pc, #68]	; (8003848 <HAL_UART_MspInit+0x444>)
 8003802:	f000 ff23 	bl	800464c <HAL_DMA_Init>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d001      	beq.n	8003810 <HAL_UART_MspInit+0x40c>
      Error_Handler();
 800380c:	f7ff f912 	bl	8002a34 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a0d      	ldr	r2, [pc, #52]	; (8003848 <HAL_UART_MspInit+0x444>)
 8003814:	635a      	str	r2, [r3, #52]	; 0x34
 8003816:	4a0c      	ldr	r2, [pc, #48]	; (8003848 <HAL_UART_MspInit+0x444>)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 800381c:	2200      	movs	r2, #0
 800381e:	2105      	movs	r1, #5
 8003820:	2047      	movs	r0, #71	; 0x47
 8003822:	f000 fee9 	bl	80045f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003826:	2047      	movs	r0, #71	; 0x47
 8003828:	f000 ff02 	bl	8004630 <HAL_NVIC_EnableIRQ>
}
 800382c:	bf00      	nop
 800382e:	3738      	adds	r7, #56	; 0x38
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	40011400 	.word	0x40011400
 8003838:	40023800 	.word	0x40023800
 800383c:	40020800 	.word	0x40020800
 8003840:	20006cc0 	.word	0x20006cc0
 8003844:	40026440 	.word	0x40026440
 8003848:	20006e84 	.word	0x20006e84
 800384c:	400264a0 	.word	0x400264a0

08003850 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003850:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003888 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003854:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003856:	e003      	b.n	8003860 <LoopCopyDataInit>

08003858 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003858:	4b0c      	ldr	r3, [pc, #48]	; (800388c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800385a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800385c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800385e:	3104      	adds	r1, #4

08003860 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003860:	480b      	ldr	r0, [pc, #44]	; (8003890 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003862:	4b0c      	ldr	r3, [pc, #48]	; (8003894 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003864:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003866:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003868:	d3f6      	bcc.n	8003858 <CopyDataInit>
  ldr  r2, =_sbss
 800386a:	4a0b      	ldr	r2, [pc, #44]	; (8003898 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800386c:	e002      	b.n	8003874 <LoopFillZerobss>

0800386e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800386e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003870:	f842 3b04 	str.w	r3, [r2], #4

08003874 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003874:	4b09      	ldr	r3, [pc, #36]	; (800389c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003876:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003878:	d3f9      	bcc.n	800386e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800387a:	f7ff faab 	bl	8002dd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800387e:	f007 fbd3 	bl	800b028 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003882:	f7ff f831 	bl	80028e8 <main>
  bx  lr    
 8003886:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003888:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800388c:	0800b130 	.word	0x0800b130
  ldr  r0, =_sdata
 8003890:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003894:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 8003898:	20000084 	.word	0x20000084
  ldr  r3, = _ebss
 800389c:	20006fd0 	.word	0x20006fd0

080038a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80038a0:	e7fe      	b.n	80038a0 <ADC_IRQHandler>
	...

080038a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80038a8:	4b0e      	ldr	r3, [pc, #56]	; (80038e4 <HAL_Init+0x40>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a0d      	ldr	r2, [pc, #52]	; (80038e4 <HAL_Init+0x40>)
 80038ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80038b4:	4b0b      	ldr	r3, [pc, #44]	; (80038e4 <HAL_Init+0x40>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a0a      	ldr	r2, [pc, #40]	; (80038e4 <HAL_Init+0x40>)
 80038ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038c0:	4b08      	ldr	r3, [pc, #32]	; (80038e4 <HAL_Init+0x40>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a07      	ldr	r2, [pc, #28]	; (80038e4 <HAL_Init+0x40>)
 80038c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038cc:	2003      	movs	r0, #3
 80038ce:	f000 fe88 	bl	80045e2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80038d2:	2000      	movs	r0, #0
 80038d4:	f7ff f98e 	bl	8002bf4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038d8:	f7ff f960 	bl	8002b9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	40023c00 	.word	0x40023c00

080038e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80038ec:	4b06      	ldr	r3, [pc, #24]	; (8003908 <HAL_IncTick+0x20>)
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	461a      	mov	r2, r3
 80038f2:	4b06      	ldr	r3, [pc, #24]	; (800390c <HAL_IncTick+0x24>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4413      	add	r3, r2
 80038f8:	4a04      	ldr	r2, [pc, #16]	; (800390c <HAL_IncTick+0x24>)
 80038fa:	6013      	str	r3, [r2, #0]
}
 80038fc:	bf00      	nop
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	2000007c 	.word	0x2000007c
 800390c:	20006fcc 	.word	0x20006fcc

08003910 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
  return uwTick;
 8003914:	4b03      	ldr	r3, [pc, #12]	; (8003924 <HAL_GetTick+0x14>)
 8003916:	681b      	ldr	r3, [r3, #0]
}
 8003918:	4618      	mov	r0, r3
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
 8003922:	bf00      	nop
 8003924:	20006fcc 	.word	0x20006fcc

08003928 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d101      	bne.n	800393a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e0ed      	b.n	8003b16 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003940:	b2db      	uxtb	r3, r3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d102      	bne.n	800394c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f7fe fe4e 	bl	80025e8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f022 0202 	bic.w	r2, r2, #2
 800395a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800395c:	f7ff ffd8 	bl	8003910 <HAL_GetTick>
 8003960:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003962:	e012      	b.n	800398a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003964:	f7ff ffd4 	bl	8003910 <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	2b0a      	cmp	r3, #10
 8003970:	d90b      	bls.n	800398a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003976:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2205      	movs	r2, #5
 8003982:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e0c5      	b.n	8003b16 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f003 0302 	and.w	r3, r3, #2
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1e5      	bne.n	8003964 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f042 0201 	orr.w	r2, r2, #1
 80039a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039a8:	f7ff ffb2 	bl	8003910 <HAL_GetTick>
 80039ac:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80039ae:	e012      	b.n	80039d6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80039b0:	f7ff ffae 	bl	8003910 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b0a      	cmp	r3, #10
 80039bc:	d90b      	bls.n	80039d6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2205      	movs	r2, #5
 80039ce:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e09f      	b.n	8003b16 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f003 0301 	and.w	r3, r3, #1
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d0e5      	beq.n	80039b0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	7e1b      	ldrb	r3, [r3, #24]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d108      	bne.n	80039fe <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80039fa:	601a      	str	r2, [r3, #0]
 80039fc:	e007      	b.n	8003a0e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a0c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	7e5b      	ldrb	r3, [r3, #25]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d108      	bne.n	8003a28 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a24:	601a      	str	r2, [r3, #0]
 8003a26:	e007      	b.n	8003a38 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a36:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	7e9b      	ldrb	r3, [r3, #26]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d108      	bne.n	8003a52 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f042 0220 	orr.w	r2, r2, #32
 8003a4e:	601a      	str	r2, [r3, #0]
 8003a50:	e007      	b.n	8003a62 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f022 0220 	bic.w	r2, r2, #32
 8003a60:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	7edb      	ldrb	r3, [r3, #27]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d108      	bne.n	8003a7c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f022 0210 	bic.w	r2, r2, #16
 8003a78:	601a      	str	r2, [r3, #0]
 8003a7a:	e007      	b.n	8003a8c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f042 0210 	orr.w	r2, r2, #16
 8003a8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	7f1b      	ldrb	r3, [r3, #28]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d108      	bne.n	8003aa6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f042 0208 	orr.w	r2, r2, #8
 8003aa2:	601a      	str	r2, [r3, #0]
 8003aa4:	e007      	b.n	8003ab6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f022 0208 	bic.w	r2, r2, #8
 8003ab4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	7f5b      	ldrb	r3, [r3, #29]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d108      	bne.n	8003ad0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f042 0204 	orr.w	r2, r2, #4
 8003acc:	601a      	str	r2, [r3, #0]
 8003ace:	e007      	b.n	8003ae0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 0204 	bic.w	r2, r2, #4
 8003ade:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689a      	ldr	r2, [r3, #8]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	431a      	orrs	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	431a      	orrs	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	ea42 0103 	orr.w	r1, r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	1e5a      	subs	r2, r3, #1
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	430a      	orrs	r2, r1
 8003b04:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
	...

08003b20 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b087      	sub	sp, #28
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b36:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003b38:	7cfb      	ldrb	r3, [r7, #19]
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d003      	beq.n	8003b46 <HAL_CAN_ConfigFilter+0x26>
 8003b3e:	7cfb      	ldrb	r3, [r7, #19]
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	f040 80be 	bne.w	8003cc2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003b46:	4b65      	ldr	r3, [pc, #404]	; (8003cdc <HAL_CAN_ConfigFilter+0x1bc>)
 8003b48:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003b50:	f043 0201 	orr.w	r2, r3, #1
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003b60:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b74:	021b      	lsls	r3, r3, #8
 8003b76:	431a      	orrs	r2, r3
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	f003 031f 	and.w	r3, r3, #31
 8003b86:	2201      	movs	r2, #1
 8003b88:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	43db      	mvns	r3, r3
 8003b98:	401a      	ands	r2, r3
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	69db      	ldr	r3, [r3, #28]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d123      	bne.n	8003bf0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	43db      	mvns	r3, r3
 8003bb2:	401a      	ands	r2, r3
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003bc6:	683a      	ldr	r2, [r7, #0]
 8003bc8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003bca:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	3248      	adds	r2, #72	; 0x48
 8003bd0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003be4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003be6:	6979      	ldr	r1, [r7, #20]
 8003be8:	3348      	adds	r3, #72	; 0x48
 8003bea:	00db      	lsls	r3, r3, #3
 8003bec:	440b      	add	r3, r1
 8003bee:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	69db      	ldr	r3, [r3, #28]
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d122      	bne.n	8003c3e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	431a      	orrs	r2, r3
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003c14:	683a      	ldr	r2, [r7, #0]
 8003c16:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003c18:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	3248      	adds	r2, #72	; 0x48
 8003c1e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003c32:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003c34:	6979      	ldr	r1, [r7, #20]
 8003c36:	3348      	adds	r3, #72	; 0x48
 8003c38:	00db      	lsls	r3, r3, #3
 8003c3a:	440b      	add	r3, r1
 8003c3c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d109      	bne.n	8003c5a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	43db      	mvns	r3, r3
 8003c50:	401a      	ands	r2, r3
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003c58:	e007      	b.n	8003c6a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	431a      	orrs	r2, r3
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d109      	bne.n	8003c86 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	43db      	mvns	r3, r3
 8003c7c:	401a      	ands	r2, r3
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003c84:	e007      	b.n	8003c96 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	431a      	orrs	r2, r3
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d107      	bne.n	8003cae <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003cb4:	f023 0201 	bic.w	r2, r3, #1
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	e006      	b.n	8003cd0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
  }
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	371c      	adds	r7, #28
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr
 8003cdc:	40006400 	.word	0x40006400

08003ce0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d12e      	bne.n	8003d52 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f022 0201 	bic.w	r2, r2, #1
 8003d0a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003d0c:	f7ff fe00 	bl	8003910 <HAL_GetTick>
 8003d10:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003d12:	e012      	b.n	8003d3a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003d14:	f7ff fdfc 	bl	8003910 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b0a      	cmp	r3, #10
 8003d20:	d90b      	bls.n	8003d3a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d26:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2205      	movs	r2, #5
 8003d32:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e012      	b.n	8003d60 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f003 0301 	and.w	r3, r3, #1
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d1e5      	bne.n	8003d14 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	e006      	b.n	8003d60 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d56:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
  }
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3710      	adds	r7, #16
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b087      	sub	sp, #28
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	607a      	str	r2, [r7, #4]
 8003d74:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d7c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003d7e:	7dfb      	ldrb	r3, [r7, #23]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d003      	beq.n	8003d8c <HAL_CAN_GetRxMessage+0x24>
 8003d84:	7dfb      	ldrb	r3, [r7, #23]
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	f040 80f3 	bne.w	8003f72 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d10e      	bne.n	8003db0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	f003 0303 	and.w	r3, r3, #3
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d116      	bne.n	8003dce <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e0e7      	b.n	8003f80 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	f003 0303 	and.w	r3, r3, #3
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d107      	bne.n	8003dce <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e0d8      	b.n	8003f80 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	331b      	adds	r3, #27
 8003dd6:	011b      	lsls	r3, r3, #4
 8003dd8:	4413      	add	r3, r2
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0204 	and.w	r2, r3, #4
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d10c      	bne.n	8003e06 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	331b      	adds	r3, #27
 8003df4:	011b      	lsls	r3, r3, #4
 8003df6:	4413      	add	r3, r2
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	0d5b      	lsrs	r3, r3, #21
 8003dfc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	601a      	str	r2, [r3, #0]
 8003e04:	e00b      	b.n	8003e1e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	331b      	adds	r3, #27
 8003e0e:	011b      	lsls	r3, r3, #4
 8003e10:	4413      	add	r3, r2
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	08db      	lsrs	r3, r3, #3
 8003e16:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	331b      	adds	r3, #27
 8003e26:	011b      	lsls	r3, r3, #4
 8003e28:	4413      	add	r3, r2
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0202 	and.w	r2, r3, #2
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	331b      	adds	r3, #27
 8003e3c:	011b      	lsls	r3, r3, #4
 8003e3e:	4413      	add	r3, r2
 8003e40:	3304      	adds	r3, #4
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 020f 	and.w	r2, r3, #15
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	331b      	adds	r3, #27
 8003e54:	011b      	lsls	r3, r3, #4
 8003e56:	4413      	add	r3, r2
 8003e58:	3304      	adds	r3, #4
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	0a1b      	lsrs	r3, r3, #8
 8003e5e:	b2da      	uxtb	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	331b      	adds	r3, #27
 8003e6c:	011b      	lsls	r3, r3, #4
 8003e6e:	4413      	add	r3, r2
 8003e70:	3304      	adds	r3, #4
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	0c1b      	lsrs	r3, r3, #16
 8003e76:	b29a      	uxth	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	011b      	lsls	r3, r3, #4
 8003e84:	4413      	add	r3, r2
 8003e86:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	b2da      	uxtb	r2, r3
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	011b      	lsls	r3, r3, #4
 8003e9a:	4413      	add	r3, r2
 8003e9c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	0a1a      	lsrs	r2, r3, #8
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	b2d2      	uxtb	r2, r2
 8003eaa:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	011b      	lsls	r3, r3, #4
 8003eb4:	4413      	add	r3, r2
 8003eb6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	0c1a      	lsrs	r2, r3, #16
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	3302      	adds	r3, #2
 8003ec2:	b2d2      	uxtb	r2, r2
 8003ec4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	011b      	lsls	r3, r3, #4
 8003ece:	4413      	add	r3, r2
 8003ed0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	0e1a      	lsrs	r2, r3, #24
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	3303      	adds	r3, #3
 8003edc:	b2d2      	uxtb	r2, r2
 8003ede:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	011b      	lsls	r3, r3, #4
 8003ee8:	4413      	add	r3, r2
 8003eea:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	3304      	adds	r3, #4
 8003ef4:	b2d2      	uxtb	r2, r2
 8003ef6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	011b      	lsls	r3, r3, #4
 8003f00:	4413      	add	r3, r2
 8003f02:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	0a1a      	lsrs	r2, r3, #8
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	3305      	adds	r3, #5
 8003f0e:	b2d2      	uxtb	r2, r2
 8003f10:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	011b      	lsls	r3, r3, #4
 8003f1a:	4413      	add	r3, r2
 8003f1c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	0c1a      	lsrs	r2, r3, #16
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	3306      	adds	r3, #6
 8003f28:	b2d2      	uxtb	r2, r2
 8003f2a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	011b      	lsls	r3, r3, #4
 8003f34:	4413      	add	r3, r2
 8003f36:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	0e1a      	lsrs	r2, r3, #24
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	3307      	adds	r3, #7
 8003f42:	b2d2      	uxtb	r2, r2
 8003f44:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d108      	bne.n	8003f5e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68da      	ldr	r2, [r3, #12]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f042 0220 	orr.w	r2, r2, #32
 8003f5a:	60da      	str	r2, [r3, #12]
 8003f5c:	e007      	b.n	8003f6e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	691a      	ldr	r2, [r3, #16]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f042 0220 	orr.w	r2, r2, #32
 8003f6c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	e006      	b.n	8003f80 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f76:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
  }
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	371c      	adds	r7, #28
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b085      	sub	sp, #20
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8003f96:	2300      	movs	r3, #0
 8003f98:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fa0:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003fa2:	7afb      	ldrb	r3, [r7, #11]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d002      	beq.n	8003fae <HAL_CAN_GetRxFifoFillLevel+0x22>
 8003fa8:	7afb      	ldrb	r3, [r7, #11]
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d10f      	bne.n	8003fce <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d106      	bne.n	8003fc2 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	f003 0303 	and.w	r3, r3, #3
 8003fbe:	60fb      	str	r3, [r7, #12]
 8003fc0:	e005      	b.n	8003fce <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	f003 0303 	and.w	r3, r3, #3
 8003fcc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8003fce:	68fb      	ldr	r3, [r7, #12]
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3714      	adds	r7, #20
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fec:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003fee:	7bfb      	ldrb	r3, [r7, #15]
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d002      	beq.n	8003ffa <HAL_CAN_ActivateNotification+0x1e>
 8003ff4:	7bfb      	ldrb	r3, [r7, #15]
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d109      	bne.n	800400e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	6959      	ldr	r1, [r3, #20]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	430a      	orrs	r2, r1
 8004008:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800400a:	2300      	movs	r3, #0
 800400c:	e006      	b.n	800401c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004012:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
  }
}
 800401c:	4618      	mov	r0, r3
 800401e:	3714      	adds	r7, #20
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b08a      	sub	sp, #40	; 0x28
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004030:	2300      	movs	r3, #0
 8004032:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004064:	6a3b      	ldr	r3, [r7, #32]
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	2b00      	cmp	r3, #0
 800406c:	d07c      	beq.n	8004168 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	2b00      	cmp	r3, #0
 8004076:	d023      	beq.n	80040c0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2201      	movs	r2, #1
 800407e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	f003 0302 	and.w	r3, r3, #2
 8004086:	2b00      	cmp	r3, #0
 8004088:	d003      	beq.n	8004092 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 f983 	bl	8004396 <HAL_CAN_TxMailbox0CompleteCallback>
 8004090:	e016      	b.n	80040c0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	f003 0304 	and.w	r3, r3, #4
 8004098:	2b00      	cmp	r3, #0
 800409a:	d004      	beq.n	80040a6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800409c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80040a2:	627b      	str	r3, [r7, #36]	; 0x24
 80040a4:	e00c      	b.n	80040c0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	f003 0308 	and.w	r3, r3, #8
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d004      	beq.n	80040ba <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80040b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80040b6:	627b      	str	r3, [r7, #36]	; 0x24
 80040b8:	e002      	b.n	80040c0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 f989 	bl	80043d2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d024      	beq.n	8004114 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040d2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d003      	beq.n	80040e6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 f963 	bl	80043aa <HAL_CAN_TxMailbox1CompleteCallback>
 80040e4:	e016      	b.n	8004114 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d004      	beq.n	80040fa <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80040f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80040f6:	627b      	str	r3, [r7, #36]	; 0x24
 80040f8:	e00c      	b.n	8004114 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004100:	2b00      	cmp	r3, #0
 8004102:	d004      	beq.n	800410e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004106:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800410a:	627b      	str	r3, [r7, #36]	; 0x24
 800410c:	e002      	b.n	8004114 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 f969 	bl	80043e6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d024      	beq.n	8004168 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004126:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d003      	beq.n	800413a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 f943 	bl	80043be <HAL_CAN_TxMailbox2CompleteCallback>
 8004138:	e016      	b.n	8004168 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d004      	beq.n	800414e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004146:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800414a:	627b      	str	r3, [r7, #36]	; 0x24
 800414c:	e00c      	b.n	8004168 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d004      	beq.n	8004162 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800415e:	627b      	str	r3, [r7, #36]	; 0x24
 8004160:	e002      	b.n	8004168 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 f949 	bl	80043fa <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004168:	6a3b      	ldr	r3, [r7, #32]
 800416a:	f003 0308 	and.w	r3, r3, #8
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00c      	beq.n	800418c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	f003 0310 	and.w	r3, r3, #16
 8004178:	2b00      	cmp	r3, #0
 800417a:	d007      	beq.n	800418c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800417c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004182:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2210      	movs	r2, #16
 800418a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800418c:	6a3b      	ldr	r3, [r7, #32]
 800418e:	f003 0304 	and.w	r3, r3, #4
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00b      	beq.n	80041ae <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	f003 0308 	and.w	r3, r3, #8
 800419c:	2b00      	cmp	r3, #0
 800419e:	d006      	beq.n	80041ae <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2208      	movs	r2, #8
 80041a6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f000 f930 	bl	800440e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80041ae:	6a3b      	ldr	r3, [r7, #32]
 80041b0:	f003 0302 	and.w	r3, r3, #2
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d009      	beq.n	80041cc <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	f003 0303 	and.w	r3, r3, #3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d002      	beq.n	80041cc <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f7fc fa26 	bl	8000618 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80041cc:	6a3b      	ldr	r3, [r7, #32]
 80041ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00c      	beq.n	80041f0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	f003 0310 	and.w	r3, r3, #16
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d007      	beq.n	80041f0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80041e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041e6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2210      	movs	r2, #16
 80041ee:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80041f0:	6a3b      	ldr	r3, [r7, #32]
 80041f2:	f003 0320 	and.w	r3, r3, #32
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00b      	beq.n	8004212 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	f003 0308 	and.w	r3, r3, #8
 8004200:	2b00      	cmp	r3, #0
 8004202:	d006      	beq.n	8004212 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2208      	movs	r2, #8
 800420a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f000 f912 	bl	8004436 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004212:	6a3b      	ldr	r3, [r7, #32]
 8004214:	f003 0310 	and.w	r3, r3, #16
 8004218:	2b00      	cmp	r3, #0
 800421a:	d009      	beq.n	8004230 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	f003 0303 	and.w	r3, r3, #3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d002      	beq.n	8004230 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 f8f9 	bl	8004422 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004230:	6a3b      	ldr	r3, [r7, #32]
 8004232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00b      	beq.n	8004252 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	f003 0310 	and.w	r3, r3, #16
 8004240:	2b00      	cmp	r3, #0
 8004242:	d006      	beq.n	8004252 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2210      	movs	r2, #16
 800424a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f000 f8fc 	bl	800444a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004252:	6a3b      	ldr	r3, [r7, #32]
 8004254:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d00b      	beq.n	8004274 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	f003 0308 	and.w	r3, r3, #8
 8004262:	2b00      	cmp	r3, #0
 8004264:	d006      	beq.n	8004274 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	2208      	movs	r2, #8
 800426c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 f8f5 	bl	800445e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004274:	6a3b      	ldr	r3, [r7, #32]
 8004276:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d07b      	beq.n	8004376 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	f003 0304 	and.w	r3, r3, #4
 8004284:	2b00      	cmp	r3, #0
 8004286:	d072      	beq.n	800436e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004288:	6a3b      	ldr	r3, [r7, #32]
 800428a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800428e:	2b00      	cmp	r3, #0
 8004290:	d008      	beq.n	80042a4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004298:	2b00      	cmp	r3, #0
 800429a:	d003      	beq.n	80042a4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800429c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429e:	f043 0301 	orr.w	r3, r3, #1
 80042a2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80042a4:	6a3b      	ldr	r3, [r7, #32]
 80042a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d008      	beq.n	80042c0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d003      	beq.n	80042c0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80042b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ba:	f043 0302 	orr.w	r3, r3, #2
 80042be:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80042c0:	6a3b      	ldr	r3, [r7, #32]
 80042c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d008      	beq.n	80042dc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d003      	beq.n	80042dc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80042d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d6:	f043 0304 	orr.w	r3, r3, #4
 80042da:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80042dc:	6a3b      	ldr	r3, [r7, #32]
 80042de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d043      	beq.n	800436e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d03e      	beq.n	800436e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80042f6:	2b60      	cmp	r3, #96	; 0x60
 80042f8:	d02b      	beq.n	8004352 <HAL_CAN_IRQHandler+0x32a>
 80042fa:	2b60      	cmp	r3, #96	; 0x60
 80042fc:	d82e      	bhi.n	800435c <HAL_CAN_IRQHandler+0x334>
 80042fe:	2b50      	cmp	r3, #80	; 0x50
 8004300:	d022      	beq.n	8004348 <HAL_CAN_IRQHandler+0x320>
 8004302:	2b50      	cmp	r3, #80	; 0x50
 8004304:	d82a      	bhi.n	800435c <HAL_CAN_IRQHandler+0x334>
 8004306:	2b40      	cmp	r3, #64	; 0x40
 8004308:	d019      	beq.n	800433e <HAL_CAN_IRQHandler+0x316>
 800430a:	2b40      	cmp	r3, #64	; 0x40
 800430c:	d826      	bhi.n	800435c <HAL_CAN_IRQHandler+0x334>
 800430e:	2b30      	cmp	r3, #48	; 0x30
 8004310:	d010      	beq.n	8004334 <HAL_CAN_IRQHandler+0x30c>
 8004312:	2b30      	cmp	r3, #48	; 0x30
 8004314:	d822      	bhi.n	800435c <HAL_CAN_IRQHandler+0x334>
 8004316:	2b10      	cmp	r3, #16
 8004318:	d002      	beq.n	8004320 <HAL_CAN_IRQHandler+0x2f8>
 800431a:	2b20      	cmp	r3, #32
 800431c:	d005      	beq.n	800432a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800431e:	e01d      	b.n	800435c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004322:	f043 0308 	orr.w	r3, r3, #8
 8004326:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004328:	e019      	b.n	800435e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800432a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432c:	f043 0310 	orr.w	r3, r3, #16
 8004330:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004332:	e014      	b.n	800435e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004336:	f043 0320 	orr.w	r3, r3, #32
 800433a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800433c:	e00f      	b.n	800435e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800433e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004340:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004344:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004346:	e00a      	b.n	800435e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800434e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004350:	e005      	b.n	800435e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004358:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800435a:	e000      	b.n	800435e <HAL_CAN_IRQHandler+0x336>
            break;
 800435c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	699a      	ldr	r2, [r3, #24]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800436c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2204      	movs	r2, #4
 8004374:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004378:	2b00      	cmp	r3, #0
 800437a:	d008      	beq.n	800438e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004382:	431a      	orrs	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f000 f872 	bl	8004472 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800438e:	bf00      	nop
 8004390:	3728      	adds	r7, #40	; 0x28
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004396:	b480      	push	{r7}
 8004398:	b083      	sub	sp, #12
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800439e:	bf00      	nop
 80043a0:	370c      	adds	r7, #12
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr

080043aa <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80043aa:	b480      	push	{r7}
 80043ac:	b083      	sub	sp, #12
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80043b2:	bf00      	nop
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr

080043be <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80043be:	b480      	push	{r7}
 80043c0:	b083      	sub	sp, #12
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80043c6:	bf00      	nop
 80043c8:	370c      	adds	r7, #12
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr

080043d2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80043d2:	b480      	push	{r7}
 80043d4:	b083      	sub	sp, #12
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80043da:	bf00      	nop
 80043dc:	370c      	adds	r7, #12
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr

080043e6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80043e6:	b480      	push	{r7}
 80043e8:	b083      	sub	sp, #12
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80043ee:	bf00      	nop
 80043f0:	370c      	adds	r7, #12
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr

080043fa <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80043fa:	b480      	push	{r7}
 80043fc:	b083      	sub	sp, #12
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004402:	bf00      	nop
 8004404:	370c      	adds	r7, #12
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr

0800440e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800440e:	b480      	push	{r7}
 8004410:	b083      	sub	sp, #12
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004416:	bf00      	nop
 8004418:	370c      	adds	r7, #12
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr

08004422 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004422:	b480      	push	{r7}
 8004424:	b083      	sub	sp, #12
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800442a:	bf00      	nop
 800442c:	370c      	adds	r7, #12
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr

08004436 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004436:	b480      	push	{r7}
 8004438:	b083      	sub	sp, #12
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800443e:	bf00      	nop
 8004440:	370c      	adds	r7, #12
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr

0800444a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800444a:	b480      	push	{r7}
 800444c:	b083      	sub	sp, #12
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004452:	bf00      	nop
 8004454:	370c      	adds	r7, #12
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr

0800445e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800445e:	b480      	push	{r7}
 8004460:	b083      	sub	sp, #12
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004466:	bf00      	nop
 8004468:	370c      	adds	r7, #12
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr

08004472 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004472:	b480      	push	{r7}
 8004474:	b083      	sub	sp, #12
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800447a:	bf00      	nop
 800447c:	370c      	adds	r7, #12
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
	...

08004488 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004488:	b480      	push	{r7}
 800448a:	b085      	sub	sp, #20
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f003 0307 	and.w	r3, r3, #7
 8004496:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004498:	4b0c      	ldr	r3, [pc, #48]	; (80044cc <__NVIC_SetPriorityGrouping+0x44>)
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800449e:	68ba      	ldr	r2, [r7, #8]
 80044a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044a4:	4013      	ands	r3, r2
 80044a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044ba:	4a04      	ldr	r2, [pc, #16]	; (80044cc <__NVIC_SetPriorityGrouping+0x44>)
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	60d3      	str	r3, [r2, #12]
}
 80044c0:	bf00      	nop
 80044c2:	3714      	adds	r7, #20
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr
 80044cc:	e000ed00 	.word	0xe000ed00

080044d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044d0:	b480      	push	{r7}
 80044d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044d4:	4b04      	ldr	r3, [pc, #16]	; (80044e8 <__NVIC_GetPriorityGrouping+0x18>)
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	0a1b      	lsrs	r3, r3, #8
 80044da:	f003 0307 	and.w	r3, r3, #7
}
 80044de:	4618      	mov	r0, r3
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr
 80044e8:	e000ed00 	.word	0xe000ed00

080044ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	4603      	mov	r3, r0
 80044f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	db0b      	blt.n	8004516 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044fe:	79fb      	ldrb	r3, [r7, #7]
 8004500:	f003 021f 	and.w	r2, r3, #31
 8004504:	4907      	ldr	r1, [pc, #28]	; (8004524 <__NVIC_EnableIRQ+0x38>)
 8004506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800450a:	095b      	lsrs	r3, r3, #5
 800450c:	2001      	movs	r0, #1
 800450e:	fa00 f202 	lsl.w	r2, r0, r2
 8004512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004516:	bf00      	nop
 8004518:	370c      	adds	r7, #12
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	e000e100 	.word	0xe000e100

08004528 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	4603      	mov	r3, r0
 8004530:	6039      	str	r1, [r7, #0]
 8004532:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004538:	2b00      	cmp	r3, #0
 800453a:	db0a      	blt.n	8004552 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	b2da      	uxtb	r2, r3
 8004540:	490c      	ldr	r1, [pc, #48]	; (8004574 <__NVIC_SetPriority+0x4c>)
 8004542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004546:	0112      	lsls	r2, r2, #4
 8004548:	b2d2      	uxtb	r2, r2
 800454a:	440b      	add	r3, r1
 800454c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004550:	e00a      	b.n	8004568 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	b2da      	uxtb	r2, r3
 8004556:	4908      	ldr	r1, [pc, #32]	; (8004578 <__NVIC_SetPriority+0x50>)
 8004558:	79fb      	ldrb	r3, [r7, #7]
 800455a:	f003 030f 	and.w	r3, r3, #15
 800455e:	3b04      	subs	r3, #4
 8004560:	0112      	lsls	r2, r2, #4
 8004562:	b2d2      	uxtb	r2, r2
 8004564:	440b      	add	r3, r1
 8004566:	761a      	strb	r2, [r3, #24]
}
 8004568:	bf00      	nop
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr
 8004574:	e000e100 	.word	0xe000e100
 8004578:	e000ed00 	.word	0xe000ed00

0800457c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800457c:	b480      	push	{r7}
 800457e:	b089      	sub	sp, #36	; 0x24
 8004580:	af00      	add	r7, sp, #0
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f003 0307 	and.w	r3, r3, #7
 800458e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	f1c3 0307 	rsb	r3, r3, #7
 8004596:	2b04      	cmp	r3, #4
 8004598:	bf28      	it	cs
 800459a:	2304      	movcs	r3, #4
 800459c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	3304      	adds	r3, #4
 80045a2:	2b06      	cmp	r3, #6
 80045a4:	d902      	bls.n	80045ac <NVIC_EncodePriority+0x30>
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	3b03      	subs	r3, #3
 80045aa:	e000      	b.n	80045ae <NVIC_EncodePriority+0x32>
 80045ac:	2300      	movs	r3, #0
 80045ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ba:	43da      	mvns	r2, r3
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	401a      	ands	r2, r3
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	fa01 f303 	lsl.w	r3, r1, r3
 80045ce:	43d9      	mvns	r1, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045d4:	4313      	orrs	r3, r2
         );
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3724      	adds	r7, #36	; 0x24
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr

080045e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b082      	sub	sp, #8
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f7ff ff4c 	bl	8004488 <__NVIC_SetPriorityGrouping>
}
 80045f0:	bf00      	nop
 80045f2:	3708      	adds	r7, #8
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b086      	sub	sp, #24
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	4603      	mov	r3, r0
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	607a      	str	r2, [r7, #4]
 8004604:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004606:	2300      	movs	r3, #0
 8004608:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800460a:	f7ff ff61 	bl	80044d0 <__NVIC_GetPriorityGrouping>
 800460e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	68b9      	ldr	r1, [r7, #8]
 8004614:	6978      	ldr	r0, [r7, #20]
 8004616:	f7ff ffb1 	bl	800457c <NVIC_EncodePriority>
 800461a:	4602      	mov	r2, r0
 800461c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004620:	4611      	mov	r1, r2
 8004622:	4618      	mov	r0, r3
 8004624:	f7ff ff80 	bl	8004528 <__NVIC_SetPriority>
}
 8004628:	bf00      	nop
 800462a:	3718      	adds	r7, #24
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
 8004636:	4603      	mov	r3, r0
 8004638:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800463a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800463e:	4618      	mov	r0, r3
 8004640:	f7ff ff54 	bl	80044ec <__NVIC_EnableIRQ>
}
 8004644:	bf00      	nop
 8004646:	3708      	adds	r7, #8
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b086      	sub	sp, #24
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004654:	2300      	movs	r3, #0
 8004656:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004658:	f7ff f95a 	bl	8003910 <HAL_GetTick>
 800465c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d101      	bne.n	8004668 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e099      	b.n	800479c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2202      	movs	r2, #2
 8004674:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f022 0201 	bic.w	r2, r2, #1
 8004686:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004688:	e00f      	b.n	80046aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800468a:	f7ff f941 	bl	8003910 <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	2b05      	cmp	r3, #5
 8004696:	d908      	bls.n	80046aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2220      	movs	r2, #32
 800469c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2203      	movs	r2, #3
 80046a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e078      	b.n	800479c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0301 	and.w	r3, r3, #1
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d1e8      	bne.n	800468a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80046c0:	697a      	ldr	r2, [r7, #20]
 80046c2:	4b38      	ldr	r3, [pc, #224]	; (80047a4 <HAL_DMA_Init+0x158>)
 80046c4:	4013      	ands	r3, r2
 80046c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685a      	ldr	r2, [r3, #4]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80046d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a1b      	ldr	r3, [r3, #32]
 80046f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004700:	2b04      	cmp	r3, #4
 8004702:	d107      	bne.n	8004714 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470c:	4313      	orrs	r3, r2
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	4313      	orrs	r3, r2
 8004712:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	695b      	ldr	r3, [r3, #20]
 8004722:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	f023 0307 	bic.w	r3, r3, #7
 800472a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004730:	697a      	ldr	r2, [r7, #20]
 8004732:	4313      	orrs	r3, r2
 8004734:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473a:	2b04      	cmp	r3, #4
 800473c:	d117      	bne.n	800476e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004742:	697a      	ldr	r2, [r7, #20]
 8004744:	4313      	orrs	r3, r2
 8004746:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474c:	2b00      	cmp	r3, #0
 800474e:	d00e      	beq.n	800476e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f000 fb01 	bl	8004d58 <DMA_CheckFifoParam>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d008      	beq.n	800476e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2240      	movs	r2, #64	; 0x40
 8004760:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2201      	movs	r2, #1
 8004766:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800476a:	2301      	movs	r3, #1
 800476c:	e016      	b.n	800479c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 fab8 	bl	8004cec <DMA_CalcBaseAndBitshift>
 800477c:	4603      	mov	r3, r0
 800477e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004784:	223f      	movs	r2, #63	; 0x3f
 8004786:	409a      	lsls	r2, r3
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2201      	movs	r2, #1
 8004796:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	3718      	adds	r7, #24
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	f010803f 	.word	0xf010803f

080047a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b086      	sub	sp, #24
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	607a      	str	r2, [r7, #4]
 80047b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047b6:	2300      	movs	r3, #0
 80047b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d101      	bne.n	80047ce <HAL_DMA_Start_IT+0x26>
 80047ca:	2302      	movs	r3, #2
 80047cc:	e040      	b.n	8004850 <HAL_DMA_Start_IT+0xa8>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2201      	movs	r2, #1
 80047d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d12f      	bne.n	8004842 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2202      	movs	r2, #2
 80047e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2200      	movs	r2, #0
 80047ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	68b9      	ldr	r1, [r7, #8]
 80047f6:	68f8      	ldr	r0, [r7, #12]
 80047f8:	f000 fa4a 	bl	8004c90 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004800:	223f      	movs	r2, #63	; 0x3f
 8004802:	409a      	lsls	r2, r3
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f042 0216 	orr.w	r2, r2, #22
 8004816:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481c:	2b00      	cmp	r3, #0
 800481e:	d007      	beq.n	8004830 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f042 0208 	orr.w	r2, r2, #8
 800482e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f042 0201 	orr.w	r2, r2, #1
 800483e:	601a      	str	r2, [r3, #0]
 8004840:	e005      	b.n	800484e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800484a:	2302      	movs	r3, #2
 800484c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800484e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004850:	4618      	mov	r0, r3
 8004852:	3718      	adds	r7, #24
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004864:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004866:	f7ff f853 	bl	8003910 <HAL_GetTick>
 800486a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004872:	b2db      	uxtb	r3, r3
 8004874:	2b02      	cmp	r3, #2
 8004876:	d008      	beq.n	800488a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2280      	movs	r2, #128	; 0x80
 800487c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e052      	b.n	8004930 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f022 0216 	bic.w	r2, r2, #22
 8004898:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	695a      	ldr	r2, [r3, #20]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048a8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d103      	bne.n	80048ba <HAL_DMA_Abort+0x62>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d007      	beq.n	80048ca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f022 0208 	bic.w	r2, r2, #8
 80048c8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f022 0201 	bic.w	r2, r2, #1
 80048d8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048da:	e013      	b.n	8004904 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80048dc:	f7ff f818 	bl	8003910 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b05      	cmp	r3, #5
 80048e8:	d90c      	bls.n	8004904 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2220      	movs	r2, #32
 80048ee:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2203      	movs	r2, #3
 80048fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	e015      	b.n	8004930 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1e4      	bne.n	80048dc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004916:	223f      	movs	r2, #63	; 0x3f
 8004918:	409a      	lsls	r2, r3
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2201      	movs	r2, #1
 800492a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800492e:	2300      	movs	r3, #0
}
 8004930:	4618      	mov	r0, r3
 8004932:	3710      	adds	r7, #16
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004946:	b2db      	uxtb	r3, r3
 8004948:	2b02      	cmp	r3, #2
 800494a:	d004      	beq.n	8004956 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2280      	movs	r2, #128	; 0x80
 8004950:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e00c      	b.n	8004970 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2205      	movs	r2, #5
 800495a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f022 0201 	bic.w	r2, r2, #1
 800496c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b086      	sub	sp, #24
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004984:	2300      	movs	r3, #0
 8004986:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004988:	4b92      	ldr	r3, [pc, #584]	; (8004bd4 <HAL_DMA_IRQHandler+0x258>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a92      	ldr	r2, [pc, #584]	; (8004bd8 <HAL_DMA_IRQHandler+0x25c>)
 800498e:	fba2 2303 	umull	r2, r3, r2, r3
 8004992:	0a9b      	lsrs	r3, r3, #10
 8004994:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800499a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049a6:	2208      	movs	r2, #8
 80049a8:	409a      	lsls	r2, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	4013      	ands	r3, r2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d01a      	beq.n	80049e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0304 	and.w	r3, r3, #4
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d013      	beq.n	80049e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f022 0204 	bic.w	r2, r2, #4
 80049ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049d4:	2208      	movs	r2, #8
 80049d6:	409a      	lsls	r2, r3
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e0:	f043 0201 	orr.w	r2, r3, #1
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ec:	2201      	movs	r2, #1
 80049ee:	409a      	lsls	r2, r3
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	4013      	ands	r3, r2
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d012      	beq.n	8004a1e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00b      	beq.n	8004a1e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	409a      	lsls	r2, r3
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a16:	f043 0202 	orr.w	r2, r3, #2
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a22:	2204      	movs	r2, #4
 8004a24:	409a      	lsls	r2, r3
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	4013      	ands	r3, r2
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d012      	beq.n	8004a54 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0302 	and.w	r3, r3, #2
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00b      	beq.n	8004a54 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a40:	2204      	movs	r2, #4
 8004a42:	409a      	lsls	r2, r3
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a4c:	f043 0204 	orr.w	r2, r3, #4
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a58:	2210      	movs	r2, #16
 8004a5a:	409a      	lsls	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	4013      	ands	r3, r2
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d043      	beq.n	8004aec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0308 	and.w	r3, r3, #8
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d03c      	beq.n	8004aec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a76:	2210      	movs	r2, #16
 8004a78:	409a      	lsls	r2, r3
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d018      	beq.n	8004abe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d108      	bne.n	8004aac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d024      	beq.n	8004aec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	4798      	blx	r3
 8004aaa:	e01f      	b.n	8004aec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d01b      	beq.n	8004aec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	4798      	blx	r3
 8004abc:	e016      	b.n	8004aec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d107      	bne.n	8004adc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f022 0208 	bic.w	r2, r2, #8
 8004ada:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d003      	beq.n	8004aec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004af0:	2220      	movs	r2, #32
 8004af2:	409a      	lsls	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	4013      	ands	r3, r2
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f000 808e 	beq.w	8004c1a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0310 	and.w	r3, r3, #16
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	f000 8086 	beq.w	8004c1a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b12:	2220      	movs	r2, #32
 8004b14:	409a      	lsls	r2, r3
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b05      	cmp	r3, #5
 8004b24:	d136      	bne.n	8004b94 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f022 0216 	bic.w	r2, r2, #22
 8004b34:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	695a      	ldr	r2, [r3, #20]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b44:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d103      	bne.n	8004b56 <HAL_DMA_IRQHandler+0x1da>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d007      	beq.n	8004b66 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f022 0208 	bic.w	r2, r2, #8
 8004b64:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b6a:	223f      	movs	r2, #63	; 0x3f
 8004b6c:	409a      	lsls	r2, r3
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d07d      	beq.n	8004c86 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	4798      	blx	r3
        }
        return;
 8004b92:	e078      	b.n	8004c86 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d01c      	beq.n	8004bdc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d108      	bne.n	8004bc2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d030      	beq.n	8004c1a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	4798      	blx	r3
 8004bc0:	e02b      	b.n	8004c1a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d027      	beq.n	8004c1a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	4798      	blx	r3
 8004bd2:	e022      	b.n	8004c1a <HAL_DMA_IRQHandler+0x29e>
 8004bd4:	20000074 	.word	0x20000074
 8004bd8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d10f      	bne.n	8004c0a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f022 0210 	bic.w	r2, r2, #16
 8004bf8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2201      	movs	r2, #1
 8004c06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d003      	beq.n	8004c1a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d032      	beq.n	8004c88 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c26:	f003 0301 	and.w	r3, r3, #1
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d022      	beq.n	8004c74 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2205      	movs	r2, #5
 8004c32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f022 0201 	bic.w	r2, r2, #1
 8004c44:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	3301      	adds	r3, #1
 8004c4a:	60bb      	str	r3, [r7, #8]
 8004c4c:	697a      	ldr	r2, [r7, #20]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d307      	bcc.n	8004c62 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0301 	and.w	r3, r3, #1
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d1f2      	bne.n	8004c46 <HAL_DMA_IRQHandler+0x2ca>
 8004c60:	e000      	b.n	8004c64 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004c62:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d005      	beq.n	8004c88 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	4798      	blx	r3
 8004c84:	e000      	b.n	8004c88 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004c86:	bf00      	nop
    }
  }
}
 8004c88:	3718      	adds	r7, #24
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop

08004c90 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b085      	sub	sp, #20
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]
 8004c9c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004cac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	683a      	ldr	r2, [r7, #0]
 8004cb4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	2b40      	cmp	r3, #64	; 0x40
 8004cbc:	d108      	bne.n	8004cd0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68ba      	ldr	r2, [r7, #8]
 8004ccc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004cce:	e007      	b.n	8004ce0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68ba      	ldr	r2, [r7, #8]
 8004cd6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	60da      	str	r2, [r3, #12]
}
 8004ce0:	bf00      	nop
 8004ce2:	3714      	adds	r7, #20
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	3b10      	subs	r3, #16
 8004cfc:	4a14      	ldr	r2, [pc, #80]	; (8004d50 <DMA_CalcBaseAndBitshift+0x64>)
 8004cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8004d02:	091b      	lsrs	r3, r3, #4
 8004d04:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004d06:	4a13      	ldr	r2, [pc, #76]	; (8004d54 <DMA_CalcBaseAndBitshift+0x68>)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	4413      	add	r3, r2
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	461a      	mov	r2, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2b03      	cmp	r3, #3
 8004d18:	d909      	bls.n	8004d2e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004d22:	f023 0303 	bic.w	r3, r3, #3
 8004d26:	1d1a      	adds	r2, r3, #4
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	659a      	str	r2, [r3, #88]	; 0x58
 8004d2c:	e007      	b.n	8004d3e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004d36:	f023 0303 	bic.w	r3, r3, #3
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3714      	adds	r7, #20
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
 8004d4e:	bf00      	nop
 8004d50:	aaaaaaab 	.word	0xaaaaaaab
 8004d54:	0800b118 	.word	0x0800b118

08004d58 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d60:	2300      	movs	r3, #0
 8004d62:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d68:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d11f      	bne.n	8004db2 <DMA_CheckFifoParam+0x5a>
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	2b03      	cmp	r3, #3
 8004d76:	d856      	bhi.n	8004e26 <DMA_CheckFifoParam+0xce>
 8004d78:	a201      	add	r2, pc, #4	; (adr r2, 8004d80 <DMA_CheckFifoParam+0x28>)
 8004d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d7e:	bf00      	nop
 8004d80:	08004d91 	.word	0x08004d91
 8004d84:	08004da3 	.word	0x08004da3
 8004d88:	08004d91 	.word	0x08004d91
 8004d8c:	08004e27 	.word	0x08004e27
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d046      	beq.n	8004e2a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004da0:	e043      	b.n	8004e2a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004daa:	d140      	bne.n	8004e2e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004db0:	e03d      	b.n	8004e2e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	699b      	ldr	r3, [r3, #24]
 8004db6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dba:	d121      	bne.n	8004e00 <DMA_CheckFifoParam+0xa8>
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	2b03      	cmp	r3, #3
 8004dc0:	d837      	bhi.n	8004e32 <DMA_CheckFifoParam+0xda>
 8004dc2:	a201      	add	r2, pc, #4	; (adr r2, 8004dc8 <DMA_CheckFifoParam+0x70>)
 8004dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc8:	08004dd9 	.word	0x08004dd9
 8004dcc:	08004ddf 	.word	0x08004ddf
 8004dd0:	08004dd9 	.word	0x08004dd9
 8004dd4:	08004df1 	.word	0x08004df1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	73fb      	strb	r3, [r7, #15]
      break;
 8004ddc:	e030      	b.n	8004e40 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d025      	beq.n	8004e36 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dee:	e022      	b.n	8004e36 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004df8:	d11f      	bne.n	8004e3a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004dfe:	e01c      	b.n	8004e3a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d903      	bls.n	8004e0e <DMA_CheckFifoParam+0xb6>
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	2b03      	cmp	r3, #3
 8004e0a:	d003      	beq.n	8004e14 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004e0c:	e018      	b.n	8004e40 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	73fb      	strb	r3, [r7, #15]
      break;
 8004e12:	e015      	b.n	8004e40 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d00e      	beq.n	8004e3e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	73fb      	strb	r3, [r7, #15]
      break;
 8004e24:	e00b      	b.n	8004e3e <DMA_CheckFifoParam+0xe6>
      break;
 8004e26:	bf00      	nop
 8004e28:	e00a      	b.n	8004e40 <DMA_CheckFifoParam+0xe8>
      break;
 8004e2a:	bf00      	nop
 8004e2c:	e008      	b.n	8004e40 <DMA_CheckFifoParam+0xe8>
      break;
 8004e2e:	bf00      	nop
 8004e30:	e006      	b.n	8004e40 <DMA_CheckFifoParam+0xe8>
      break;
 8004e32:	bf00      	nop
 8004e34:	e004      	b.n	8004e40 <DMA_CheckFifoParam+0xe8>
      break;
 8004e36:	bf00      	nop
 8004e38:	e002      	b.n	8004e40 <DMA_CheckFifoParam+0xe8>
      break;   
 8004e3a:	bf00      	nop
 8004e3c:	e000      	b.n	8004e40 <DMA_CheckFifoParam+0xe8>
      break;
 8004e3e:	bf00      	nop
    }
  } 
  
  return status; 
 8004e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3714      	adds	r7, #20
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop

08004e50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b089      	sub	sp, #36	; 0x24
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004e62:	2300      	movs	r3, #0
 8004e64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e66:	2300      	movs	r3, #0
 8004e68:	61fb      	str	r3, [r7, #28]
 8004e6a:	e165      	b.n	8005138 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	fa02 f303 	lsl.w	r3, r2, r3
 8004e74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	697a      	ldr	r2, [r7, #20]
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004e80:	693a      	ldr	r2, [r7, #16]
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	f040 8154 	bne.w	8005132 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	f003 0303 	and.w	r3, r3, #3
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d005      	beq.n	8004ea2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d130      	bne.n	8004f04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	005b      	lsls	r3, r3, #1
 8004eac:	2203      	movs	r2, #3
 8004eae:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb2:	43db      	mvns	r3, r3
 8004eb4:	69ba      	ldr	r2, [r7, #24]
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	68da      	ldr	r2, [r3, #12]
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	005b      	lsls	r3, r3, #1
 8004ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec6:	69ba      	ldr	r2, [r7, #24]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	69ba      	ldr	r2, [r7, #24]
 8004ed0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ed8:	2201      	movs	r2, #1
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee0:	43db      	mvns	r3, r3
 8004ee2:	69ba      	ldr	r2, [r7, #24]
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	091b      	lsrs	r3, r3, #4
 8004eee:	f003 0201 	and.w	r2, r3, #1
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef8:	69ba      	ldr	r2, [r7, #24]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	69ba      	ldr	r2, [r7, #24]
 8004f02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f003 0303 	and.w	r3, r3, #3
 8004f0c:	2b03      	cmp	r3, #3
 8004f0e:	d017      	beq.n	8004f40 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	005b      	lsls	r3, r3, #1
 8004f1a:	2203      	movs	r2, #3
 8004f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f20:	43db      	mvns	r3, r3
 8004f22:	69ba      	ldr	r2, [r7, #24]
 8004f24:	4013      	ands	r3, r2
 8004f26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	689a      	ldr	r2, [r3, #8]
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	005b      	lsls	r3, r3, #1
 8004f30:	fa02 f303 	lsl.w	r3, r2, r3
 8004f34:	69ba      	ldr	r2, [r7, #24]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	69ba      	ldr	r2, [r7, #24]
 8004f3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	f003 0303 	and.w	r3, r3, #3
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d123      	bne.n	8004f94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	08da      	lsrs	r2, r3, #3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	3208      	adds	r2, #8
 8004f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	f003 0307 	and.w	r3, r3, #7
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	220f      	movs	r2, #15
 8004f64:	fa02 f303 	lsl.w	r3, r2, r3
 8004f68:	43db      	mvns	r3, r3
 8004f6a:	69ba      	ldr	r2, [r7, #24]
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	691a      	ldr	r2, [r3, #16]
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	f003 0307 	and.w	r3, r3, #7
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f80:	69ba      	ldr	r2, [r7, #24]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	08da      	lsrs	r2, r3, #3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	3208      	adds	r2, #8
 8004f8e:	69b9      	ldr	r1, [r7, #24]
 8004f90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	005b      	lsls	r3, r3, #1
 8004f9e:	2203      	movs	r2, #3
 8004fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa4:	43db      	mvns	r3, r3
 8004fa6:	69ba      	ldr	r2, [r7, #24]
 8004fa8:	4013      	ands	r3, r2
 8004faa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	f003 0203 	and.w	r2, r3, #3
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	005b      	lsls	r3, r3, #1
 8004fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fbc:	69ba      	ldr	r2, [r7, #24]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	69ba      	ldr	r2, [r7, #24]
 8004fc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	f000 80ae 	beq.w	8005132 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	60fb      	str	r3, [r7, #12]
 8004fda:	4b5d      	ldr	r3, [pc, #372]	; (8005150 <HAL_GPIO_Init+0x300>)
 8004fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fde:	4a5c      	ldr	r2, [pc, #368]	; (8005150 <HAL_GPIO_Init+0x300>)
 8004fe0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004fe4:	6453      	str	r3, [r2, #68]	; 0x44
 8004fe6:	4b5a      	ldr	r3, [pc, #360]	; (8005150 <HAL_GPIO_Init+0x300>)
 8004fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fee:	60fb      	str	r3, [r7, #12]
 8004ff0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ff2:	4a58      	ldr	r2, [pc, #352]	; (8005154 <HAL_GPIO_Init+0x304>)
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	089b      	lsrs	r3, r3, #2
 8004ff8:	3302      	adds	r3, #2
 8004ffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	f003 0303 	and.w	r3, r3, #3
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	220f      	movs	r2, #15
 800500a:	fa02 f303 	lsl.w	r3, r2, r3
 800500e:	43db      	mvns	r3, r3
 8005010:	69ba      	ldr	r2, [r7, #24]
 8005012:	4013      	ands	r3, r2
 8005014:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a4f      	ldr	r2, [pc, #316]	; (8005158 <HAL_GPIO_Init+0x308>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d025      	beq.n	800506a <HAL_GPIO_Init+0x21a>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a4e      	ldr	r2, [pc, #312]	; (800515c <HAL_GPIO_Init+0x30c>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d01f      	beq.n	8005066 <HAL_GPIO_Init+0x216>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a4d      	ldr	r2, [pc, #308]	; (8005160 <HAL_GPIO_Init+0x310>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d019      	beq.n	8005062 <HAL_GPIO_Init+0x212>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a4c      	ldr	r2, [pc, #304]	; (8005164 <HAL_GPIO_Init+0x314>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d013      	beq.n	800505e <HAL_GPIO_Init+0x20e>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a4b      	ldr	r2, [pc, #300]	; (8005168 <HAL_GPIO_Init+0x318>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d00d      	beq.n	800505a <HAL_GPIO_Init+0x20a>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a4a      	ldr	r2, [pc, #296]	; (800516c <HAL_GPIO_Init+0x31c>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d007      	beq.n	8005056 <HAL_GPIO_Init+0x206>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a49      	ldr	r2, [pc, #292]	; (8005170 <HAL_GPIO_Init+0x320>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d101      	bne.n	8005052 <HAL_GPIO_Init+0x202>
 800504e:	2306      	movs	r3, #6
 8005050:	e00c      	b.n	800506c <HAL_GPIO_Init+0x21c>
 8005052:	2307      	movs	r3, #7
 8005054:	e00a      	b.n	800506c <HAL_GPIO_Init+0x21c>
 8005056:	2305      	movs	r3, #5
 8005058:	e008      	b.n	800506c <HAL_GPIO_Init+0x21c>
 800505a:	2304      	movs	r3, #4
 800505c:	e006      	b.n	800506c <HAL_GPIO_Init+0x21c>
 800505e:	2303      	movs	r3, #3
 8005060:	e004      	b.n	800506c <HAL_GPIO_Init+0x21c>
 8005062:	2302      	movs	r3, #2
 8005064:	e002      	b.n	800506c <HAL_GPIO_Init+0x21c>
 8005066:	2301      	movs	r3, #1
 8005068:	e000      	b.n	800506c <HAL_GPIO_Init+0x21c>
 800506a:	2300      	movs	r3, #0
 800506c:	69fa      	ldr	r2, [r7, #28]
 800506e:	f002 0203 	and.w	r2, r2, #3
 8005072:	0092      	lsls	r2, r2, #2
 8005074:	4093      	lsls	r3, r2
 8005076:	69ba      	ldr	r2, [r7, #24]
 8005078:	4313      	orrs	r3, r2
 800507a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800507c:	4935      	ldr	r1, [pc, #212]	; (8005154 <HAL_GPIO_Init+0x304>)
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	089b      	lsrs	r3, r3, #2
 8005082:	3302      	adds	r3, #2
 8005084:	69ba      	ldr	r2, [r7, #24]
 8005086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800508a:	4b3a      	ldr	r3, [pc, #232]	; (8005174 <HAL_GPIO_Init+0x324>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	43db      	mvns	r3, r3
 8005094:	69ba      	ldr	r2, [r7, #24]
 8005096:	4013      	ands	r3, r2
 8005098:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d003      	beq.n	80050ae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80050a6:	69ba      	ldr	r2, [r7, #24]
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80050ae:	4a31      	ldr	r2, [pc, #196]	; (8005174 <HAL_GPIO_Init+0x324>)
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80050b4:	4b2f      	ldr	r3, [pc, #188]	; (8005174 <HAL_GPIO_Init+0x324>)
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	43db      	mvns	r3, r3
 80050be:	69ba      	ldr	r2, [r7, #24]
 80050c0:	4013      	ands	r3, r2
 80050c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d003      	beq.n	80050d8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80050d0:	69ba      	ldr	r2, [r7, #24]
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80050d8:	4a26      	ldr	r2, [pc, #152]	; (8005174 <HAL_GPIO_Init+0x324>)
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80050de:	4b25      	ldr	r3, [pc, #148]	; (8005174 <HAL_GPIO_Init+0x324>)
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	43db      	mvns	r3, r3
 80050e8:	69ba      	ldr	r2, [r7, #24]
 80050ea:	4013      	ands	r3, r2
 80050ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d003      	beq.n	8005102 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80050fa:	69ba      	ldr	r2, [r7, #24]
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	4313      	orrs	r3, r2
 8005100:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005102:	4a1c      	ldr	r2, [pc, #112]	; (8005174 <HAL_GPIO_Init+0x324>)
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005108:	4b1a      	ldr	r3, [pc, #104]	; (8005174 <HAL_GPIO_Init+0x324>)
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	43db      	mvns	r3, r3
 8005112:	69ba      	ldr	r2, [r7, #24]
 8005114:	4013      	ands	r3, r2
 8005116:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d003      	beq.n	800512c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005124:	69ba      	ldr	r2, [r7, #24]
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	4313      	orrs	r3, r2
 800512a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800512c:	4a11      	ldr	r2, [pc, #68]	; (8005174 <HAL_GPIO_Init+0x324>)
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	3301      	adds	r3, #1
 8005136:	61fb      	str	r3, [r7, #28]
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	2b0f      	cmp	r3, #15
 800513c:	f67f ae96 	bls.w	8004e6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005140:	bf00      	nop
 8005142:	bf00      	nop
 8005144:	3724      	adds	r7, #36	; 0x24
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop
 8005150:	40023800 	.word	0x40023800
 8005154:	40013800 	.word	0x40013800
 8005158:	40020000 	.word	0x40020000
 800515c:	40020400 	.word	0x40020400
 8005160:	40020800 	.word	0x40020800
 8005164:	40020c00 	.word	0x40020c00
 8005168:	40021000 	.word	0x40021000
 800516c:	40021400 	.word	0x40021400
 8005170:	40021800 	.word	0x40021800
 8005174:	40013c00 	.word	0x40013c00

08005178 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	460b      	mov	r3, r1
 8005182:	807b      	strh	r3, [r7, #2]
 8005184:	4613      	mov	r3, r2
 8005186:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005188:	787b      	ldrb	r3, [r7, #1]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d003      	beq.n	8005196 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800518e:	887a      	ldrh	r2, [r7, #2]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005194:	e003      	b.n	800519e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005196:	887b      	ldrh	r3, [r7, #2]
 8005198:	041a      	lsls	r2, r3, #16
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	619a      	str	r2, [r3, #24]
}
 800519e:	bf00      	nop
 80051a0:	370c      	adds	r7, #12
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
	...

080051ac <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b086      	sub	sp, #24
 80051b0:	af02      	add	r7, sp, #8
 80051b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80051b4:	f7fe fbac 	bl	8003910 <HAL_GetTick>
 80051b8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d101      	bne.n	80051c4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e069      	b.n	8005298 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d10b      	bne.n	80051e8 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f7fd fc5f 	bl	8002a9c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80051de:	f241 3188 	movw	r1, #5000	; 0x1388
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 fd46 	bl	8005c74 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	3b01      	subs	r3, #1
 80051f8:	021a      	lsls	r2, r3, #8
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	430a      	orrs	r2, r1
 8005200:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005206:	9300      	str	r3, [sp, #0]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2200      	movs	r2, #0
 800520c:	2120      	movs	r1, #32
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 fd71 	bl	8005cf6 <QSPI_WaitFlagStateUntilTimeout>
 8005214:	4603      	mov	r3, r0
 8005216:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005218:	7afb      	ldrb	r3, [r7, #11]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d137      	bne.n	800528e <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005228:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	6852      	ldr	r2, [r2, #4]
 8005230:	0611      	lsls	r1, r2, #24
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	68d2      	ldr	r2, [r2, #12]
 8005236:	4311      	orrs	r1, r2
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	69d2      	ldr	r2, [r2, #28]
 800523c:	4311      	orrs	r1, r2
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	6a12      	ldr	r2, [r2, #32]
 8005242:	4311      	orrs	r1, r2
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	6812      	ldr	r2, [r2, #0]
 8005248:	430b      	orrs	r3, r1
 800524a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	685a      	ldr	r2, [r3, #4]
 8005252:	4b13      	ldr	r3, [pc, #76]	; (80052a0 <HAL_QSPI_Init+0xf4>)
 8005254:	4013      	ands	r3, r2
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	6912      	ldr	r2, [r2, #16]
 800525a:	0411      	lsls	r1, r2, #16
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	6952      	ldr	r2, [r2, #20]
 8005260:	4311      	orrs	r1, r2
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	6992      	ldr	r2, [r2, #24]
 8005266:	4311      	orrs	r1, r2
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	6812      	ldr	r2, [r2, #0]
 800526c:	430b      	orrs	r3, r1
 800526e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f042 0201 	orr.w	r2, r2, #1
 800527e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2201      	movs	r2, #1
 800528a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005296:	7afb      	ldrb	r3, [r7, #11]
}
 8005298:	4618      	mov	r0, r3
 800529a:	3710      	adds	r7, #16
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	ffe0f8fe 	.word	0xffe0f8fe

080052a4 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi : QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b086      	sub	sp, #24
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	f003 0304 	and.w	r3, r3, #4
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d064      	beq.n	8005390 <HAL_QSPI_IRQHandler+0xec>
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d05f      	beq.n	8005390 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	3320      	adds	r3, #32
 80052d6:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	2b12      	cmp	r3, #18
 80052e2:	d125      	bne.n	8005330 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 80052e4:	e01c      	b.n	8005320 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00f      	beq.n	800530e <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f2:	781a      	ldrb	r2, [r3, #0]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fc:	1c5a      	adds	r2, r3, #1
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005306:	1e5a      	subs	r2, r3, #1
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	62da      	str	r2, [r3, #44]	; 0x2c
 800530c:	e008      	b.n	8005320 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800531c:	601a      	str	r2, [r3, #0]
          break;
 800531e:	e033      	b.n	8005388 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	f003 0304 	and.w	r3, r3, #4
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1db      	bne.n	80052e6 <HAL_QSPI_IRQHandler+0x42>
 800532e:	e02b      	b.n	8005388 <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005336:	b2db      	uxtb	r3, r3
 8005338:	2b22      	cmp	r3, #34	; 0x22
 800533a:	d125      	bne.n	8005388 <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800533c:	e01d      	b.n	800537a <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005342:	2b00      	cmp	r3, #0
 8005344:	d010      	beq.n	8005368 <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	7812      	ldrb	r2, [r2, #0]
 800534e:	b2d2      	uxtb	r2, r2
 8005350:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005356:	1c5a      	adds	r2, r3, #1
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005360:	1e5a      	subs	r2, r3, #1
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	639a      	str	r2, [r3, #56]	; 0x38
 8005366:	e008      	b.n	800537a <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005376:	601a      	str	r2, [r3, #0]
          break;
 8005378:	e006      	b.n	8005388 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	f003 0304 	and.w	r3, r3, #4
 8005384:	2b00      	cmp	r3, #0
 8005386:	d1da      	bne.n	800533e <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f000 fb8b 	bl	8005aa4 <HAL_QSPI_FifoThresholdCallback>
 800538e:	e142      	b.n	8005616 <HAL_QSPI_IRQHandler+0x372>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	f003 0302 	and.w	r3, r3, #2
 8005396:	2b00      	cmp	r3, #0
 8005398:	f000 80b6 	beq.w	8005508 <HAL_QSPI_IRQHandler+0x264>
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	f000 80b0 	beq.w	8005508 <HAL_QSPI_IRQHandler+0x264>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2202      	movs	r2, #2
 80053ae:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 80053be:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	2b12      	cmp	r3, #18
 80053ca:	d123      	bne.n	8005414 <HAL_QSPI_IRQHandler+0x170>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0304 	and.w	r3, r3, #4
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d011      	beq.n	80053fe <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f022 0204 	bic.w	r2, r2, #4
 80053e8:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f022 0201 	bic.w	r2, r2, #1
 80053fc:	601a      	str	r2, [r3, #0]
      }

      /* Clear Busy bit */
      HAL_QSPI_Abort_IT(hqspi);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 fbdc 	bl	8005bbc <HAL_QSPI_Abort_IT>

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f000 fb3f 	bl	8005a90 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8005412:	e0fd      	b.n	8005610 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800541a:	b2db      	uxtb	r3, r3
 800541c:	2b22      	cmp	r3, #34	; 0x22
 800541e:	d146      	bne.n	80054ae <HAL_QSPI_IRQHandler+0x20a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0304 	and.w	r3, r3, #4
 800542a:	2b00      	cmp	r3, #0
 800542c:	d012      	beq.n	8005454 <HAL_QSPI_IRQHandler+0x1b0>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f022 0204 	bic.w	r2, r2, #4
 800543c:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f022 0201 	bic.w	r2, r2, #1
 8005450:	601a      	str	r2, [r3, #0]
 8005452:	e021      	b.n	8005498 <HAL_QSPI_IRQHandler+0x1f4>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	3320      	adds	r3, #32
 800545a:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800545c:	e013      	b.n	8005486 <HAL_QSPI_IRQHandler+0x1e2>
        {
          if (hqspi->RxXferCount > 0U)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005462:	2b00      	cmp	r3, #0
 8005464:	d017      	beq.n	8005496 <HAL_QSPI_IRQHandler+0x1f2>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	7812      	ldrb	r2, [r2, #0]
 800546e:	b2d2      	uxtb	r2, r2
 8005470:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005476:	1c5a      	adds	r2, r3, #1
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005480:	1e5a      	subs	r2, r3, #1
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8005490:	2b00      	cmp	r3, #0
 8005492:	d1e4      	bne.n	800545e <HAL_QSPI_IRQHandler+0x1ba>
 8005494:	e000      	b.n	8005498 <HAL_QSPI_IRQHandler+0x1f4>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 8005496:	bf00      	nop
          }
        }
      }

      /* Workaround - Extra data written in the FIFO at the end of a read transfer */
      HAL_QSPI_Abort_IT(hqspi);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 fb8f 	bl	8005bbc <HAL_QSPI_Abort_IT>

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2201      	movs	r2, #1
 80054a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 fae8 	bl	8005a7c <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80054ac:	e0b0      	b.n	8005610 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	d107      	bne.n	80054ca <HAL_QSPI_IRQHandler+0x226>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2201      	movs	r2, #1
 80054be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 fad0 	bl	8005a68 <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80054c8:	e0a2      	b.n	8005610 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	2b08      	cmp	r3, #8
 80054d4:	f040 809c 	bne.w	8005610 <HAL_QSPI_IRQHandler+0x36c>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	695a      	ldr	r2, [r3, #20]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80054e6:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d103      	bne.n	8005500 <HAL_QSPI_IRQHandler+0x25c>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 faab 	bl	8005a54 <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80054fe:	e087      	b.n	8005610 <HAL_QSPI_IRQHandler+0x36c>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f000 fa9d 	bl	8005a40 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8005506:	e083      	b.n	8005610 <HAL_QSPI_IRQHandler+0x36c>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	f003 0308 	and.w	r3, r3, #8
 800550e:	2b00      	cmp	r3, #0
 8005510:	d01f      	beq.n	8005552 <HAL_QSPI_IRQHandler+0x2ae>
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005518:	2b00      	cmp	r3, #0
 800551a:	d01a      	beq.n	8005552 <HAL_QSPI_IRQHandler+0x2ae>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2208      	movs	r2, #8
 8005522:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d00b      	beq.n	800554a <HAL_QSPI_IRQHandler+0x2a6>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8005540:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2201      	movs	r2, #1
 8005546:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 fab4 	bl	8005ab8 <HAL_QSPI_StatusMatchCallback>
 8005550:	e061      	b.n	8005616 <HAL_QSPI_IRQHandler+0x372>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	f003 0301 	and.w	r3, r3, #1
 8005558:	2b00      	cmp	r3, #0
 800555a:	d047      	beq.n	80055ec <HAL_QSPI_IRQHandler+0x348>
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d042      	beq.n	80055ec <HAL_QSPI_IRQHandler+0x348>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2201      	movs	r2, #1
 800556c:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800557c:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005582:	f043 0202 	orr.w	r2, r3, #2
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0304 	and.w	r3, r3, #4
 8005594:	2b00      	cmp	r3, #0
 8005596:	d021      	beq.n	80055dc <HAL_QSPI_IRQHandler+0x338>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f022 0204 	bic.w	r2, r2, #4
 80055a6:	601a      	str	r2, [r3, #0]

      /* Disable the DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ac:	4a1c      	ldr	r2, [pc, #112]	; (8005620 <HAL_QSPI_IRQHandler+0x37c>)
 80055ae:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055b4:	4618      	mov	r0, r3
 80055b6:	f7ff f9bf 	bl	8004938 <HAL_DMA_Abort_IT>
 80055ba:	4603      	mov	r3, r0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d029      	beq.n	8005614 <HAL_QSPI_IRQHandler+0x370>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055c4:	f043 0204 	orr.w	r2, r3, #4
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 fa33 	bl	8005a40 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80055da:	e01b      	b.n	8005614 <HAL_QSPI_IRQHandler+0x370>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f000 fa2b 	bl	8005a40 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80055ea:	e013      	b.n	8005614 <HAL_QSPI_IRQHandler+0x370>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	f003 0310 	and.w	r3, r3, #16
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00f      	beq.n	8005616 <HAL_QSPI_IRQHandler+0x372>
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d00a      	beq.n	8005616 <HAL_QSPI_IRQHandler+0x372>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2210      	movs	r2, #16
 8005606:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f000 fa5f 	bl	8005acc <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 800560e:	e002      	b.n	8005616 <HAL_QSPI_IRQHandler+0x372>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8005610:	bf00      	nop
 8005612:	e000      	b.n	8005616 <HAL_QSPI_IRQHandler+0x372>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005614:	bf00      	nop
}
 8005616:	bf00      	nop
 8005618:	3718      	adds	r7, #24
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	08005c91 	.word	0x08005c91

08005624 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b088      	sub	sp, #32
 8005628:	af02      	add	r7, sp, #8
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005630:	f7fe f96e 	bl	8003910 <HAL_GetTick>
 8005634:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800563c:	b2db      	uxtb	r3, r3
 800563e:	2b01      	cmp	r3, #1
 8005640:	d101      	bne.n	8005646 <HAL_QSPI_Command+0x22>
 8005642:	2302      	movs	r3, #2
 8005644:	e048      	b.n	80056d8 <HAL_QSPI_Command+0xb4>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2201      	movs	r2, #1
 800564a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005654:	b2db      	uxtb	r3, r3
 8005656:	2b01      	cmp	r3, #1
 8005658:	d137      	bne.n	80056ca <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2200      	movs	r2, #0
 800565e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2202      	movs	r2, #2
 8005664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	9300      	str	r3, [sp, #0]
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	2200      	movs	r2, #0
 8005670:	2120      	movs	r1, #32
 8005672:	68f8      	ldr	r0, [r7, #12]
 8005674:	f000 fb3f 	bl	8005cf6 <QSPI_WaitFlagStateUntilTimeout>
 8005678:	4603      	mov	r3, r0
 800567a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800567c:	7dfb      	ldrb	r3, [r7, #23]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d125      	bne.n	80056ce <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8005682:	2200      	movs	r2, #0
 8005684:	68b9      	ldr	r1, [r7, #8]
 8005686:	68f8      	ldr	r0, [r7, #12]
 8005688:	f000 fb6c 	bl	8005d64 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005690:	2b00      	cmp	r3, #0
 8005692:	d115      	bne.n	80056c0 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	9300      	str	r3, [sp, #0]
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	2201      	movs	r2, #1
 800569c:	2102      	movs	r1, #2
 800569e:	68f8      	ldr	r0, [r7, #12]
 80056a0:	f000 fb29 	bl	8005cf6 <QSPI_WaitFlagStateUntilTimeout>
 80056a4:	4603      	mov	r3, r0
 80056a6:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 80056a8:	7dfb      	ldrb	r3, [r7, #23]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d10f      	bne.n	80056ce <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2202      	movs	r2, #2
 80056b4:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2201      	movs	r2, #1
 80056ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80056be:	e006      	b.n	80056ce <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80056c8:	e001      	b.n	80056ce <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80056ca:	2302      	movs	r3, #2
 80056cc:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80056d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3718      	adds	r7, #24
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b08a      	sub	sp, #40	; 0x28
 80056e4:	af02      	add	r7, sp, #8
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056ec:	2300      	movs	r3, #0
 80056ee:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80056f0:	f7fe f90e 	bl	8003910 <HAL_GetTick>
 80056f4:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	3320      	adds	r3, #32
 80056fc:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005704:	b2db      	uxtb	r3, r3
 8005706:	2b01      	cmp	r3, #1
 8005708:	d101      	bne.n	800570e <HAL_QSPI_Transmit+0x2e>
 800570a:	2302      	movs	r3, #2
 800570c:	e07b      	b.n	8005806 <HAL_QSPI_Transmit+0x126>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2201      	movs	r2, #1
 8005712:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800571c:	b2db      	uxtb	r3, r3
 800571e:	2b01      	cmp	r3, #1
 8005720:	d16a      	bne.n	80057f8 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d05b      	beq.n	80057e6 <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2212      	movs	r2, #18
 8005732:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	1c5a      	adds	r2, r3, #1
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	1c5a      	adds	r2, r3, #1
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	68ba      	ldr	r2, [r7, #8]
 8005752:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	695a      	ldr	r2, [r3, #20]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8005762:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8005764:	e01b      	b.n	800579e <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	9300      	str	r3, [sp, #0]
 800576a:	69bb      	ldr	r3, [r7, #24]
 800576c:	2201      	movs	r2, #1
 800576e:	2104      	movs	r1, #4
 8005770:	68f8      	ldr	r0, [r7, #12]
 8005772:	f000 fac0 	bl	8005cf6 <QSPI_WaitFlagStateUntilTimeout>
 8005776:	4603      	mov	r3, r0
 8005778:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800577a:	7ffb      	ldrb	r3, [r7, #31]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d113      	bne.n	80057a8 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005784:	781a      	ldrb	r2, [r3, #0]
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578e:	1c5a      	adds	r2, r3, #1
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005798:	1e5a      	subs	r2, r3, #1
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d1df      	bne.n	8005766 <HAL_QSPI_Transmit+0x86>
 80057a6:	e000      	b.n	80057aa <HAL_QSPI_Transmit+0xca>
          break;
 80057a8:	bf00      	nop
      }

      if (status == HAL_OK)
 80057aa:	7ffb      	ldrb	r3, [r7, #31]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d115      	bne.n	80057dc <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	9300      	str	r3, [sp, #0]
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	2201      	movs	r2, #1
 80057b8:	2102      	movs	r1, #2
 80057ba:	68f8      	ldr	r0, [r7, #12]
 80057bc:	f000 fa9b 	bl	8005cf6 <QSPI_WaitFlagStateUntilTimeout>
 80057c0:	4603      	mov	r3, r0
 80057c2:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 80057c4:	7ffb      	ldrb	r3, [r7, #31]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d108      	bne.n	80057dc <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2202      	movs	r2, #2
 80057d0:	60da      	str	r2, [r3, #12]

          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 80057d2:	68f8      	ldr	r0, [r7, #12]
 80057d4:	f000 f984 	bl	8005ae0 <HAL_QSPI_Abort>
 80057d8:	4603      	mov	r3, r0
 80057da:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057e4:	e00a      	b.n	80057fc <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ea:	f043 0208 	orr.w	r2, r3, #8
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	77fb      	strb	r3, [r7, #31]
 80057f6:	e001      	b.n	80057fc <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 80057f8:	2302      	movs	r3, #2
 80057fa:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8005804:	7ffb      	ldrb	r3, [r7, #31]
}
 8005806:	4618      	mov	r0, r3
 8005808:	3720      	adds	r7, #32
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}

0800580e <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800580e:	b580      	push	{r7, lr}
 8005810:	b08a      	sub	sp, #40	; 0x28
 8005812:	af02      	add	r7, sp, #8
 8005814:	60f8      	str	r0, [r7, #12]
 8005816:	60b9      	str	r1, [r7, #8]
 8005818:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800581a:	2300      	movs	r3, #0
 800581c:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800581e:	f7fe f877 	bl	8003910 <HAL_GetTick>
 8005822:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	3320      	adds	r3, #32
 8005832:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800583a:	b2db      	uxtb	r3, r3
 800583c:	2b01      	cmp	r3, #1
 800583e:	d101      	bne.n	8005844 <HAL_QSPI_Receive+0x36>
 8005840:	2302      	movs	r3, #2
 8005842:	e082      	b.n	800594a <HAL_QSPI_Receive+0x13c>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005852:	b2db      	uxtb	r3, r3
 8005854:	2b01      	cmp	r3, #1
 8005856:	d171      	bne.n	800593c <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2200      	movs	r2, #0
 800585c:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d062      	beq.n	800592a <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2222      	movs	r2, #34	; 0x22
 8005868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	1c5a      	adds	r2, r3, #1
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	1c5a      	adds	r2, r3, #1
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	68ba      	ldr	r2, [r7, #8]
 8005888:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	695b      	ldr	r3, [r3, #20]
 8005890:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800589c:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	697a      	ldr	r2, [r7, #20]
 80058a4:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 80058a6:	e01c      	b.n	80058e2 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	9300      	str	r3, [sp, #0]
 80058ac:	69bb      	ldr	r3, [r7, #24]
 80058ae:	2201      	movs	r2, #1
 80058b0:	2106      	movs	r1, #6
 80058b2:	68f8      	ldr	r0, [r7, #12]
 80058b4:	f000 fa1f 	bl	8005cf6 <QSPI_WaitFlagStateUntilTimeout>
 80058b8:	4603      	mov	r3, r0
 80058ba:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 80058bc:	7ffb      	ldrb	r3, [r7, #31]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d114      	bne.n	80058ec <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c6:	693a      	ldr	r2, [r7, #16]
 80058c8:	7812      	ldrb	r2, [r2, #0]
 80058ca:	b2d2      	uxtb	r2, r2
 80058cc:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d2:	1c5a      	adds	r2, r3, #1
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058dc:	1e5a      	subs	r2, r3, #1
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d1de      	bne.n	80058a8 <HAL_QSPI_Receive+0x9a>
 80058ea:	e000      	b.n	80058ee <HAL_QSPI_Receive+0xe0>
          break;
 80058ec:	bf00      	nop
      }

      if (status == HAL_OK)
 80058ee:	7ffb      	ldrb	r3, [r7, #31]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d115      	bne.n	8005920 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	9300      	str	r3, [sp, #0]
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	2201      	movs	r2, #1
 80058fc:	2102      	movs	r1, #2
 80058fe:	68f8      	ldr	r0, [r7, #12]
 8005900:	f000 f9f9 	bl	8005cf6 <QSPI_WaitFlagStateUntilTimeout>
 8005904:	4603      	mov	r3, r0
 8005906:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8005908:	7ffb      	ldrb	r3, [r7, #31]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d108      	bne.n	8005920 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2202      	movs	r2, #2
 8005914:	60da      	str	r2, [r3, #12]

          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 8005916:	68f8      	ldr	r0, [r7, #12]
 8005918:	f000 f8e2 	bl	8005ae0 <HAL_QSPI_Abort>
 800591c:	4603      	mov	r3, r0
 800591e:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005928:	e00a      	b.n	8005940 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800592e:	f043 0208 	orr.w	r2, r3, #8
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	77fb      	strb	r3, [r7, #31]
 800593a:	e001      	b.n	8005940 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 800593c:	2302      	movs	r3, #2
 800593e:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8005948:	7ffb      	ldrb	r3, [r7, #31]
}
 800594a:	4618      	mov	r0, r3
 800594c:	3720      	adds	r7, #32
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}

08005952 <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8005952:	b580      	push	{r7, lr}
 8005954:	b088      	sub	sp, #32
 8005956:	af02      	add	r7, sp, #8
 8005958:	60f8      	str	r0, [r7, #12]
 800595a:	60b9      	str	r1, [r7, #8]
 800595c:	607a      	str	r2, [r7, #4]
 800595e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005960:	f7fd ffd6 	bl	8003910 <HAL_GetTick>
 8005964:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800596c:	b2db      	uxtb	r3, r3
 800596e:	2b01      	cmp	r3, #1
 8005970:	d101      	bne.n	8005976 <HAL_QSPI_AutoPolling+0x24>
 8005972:	2302      	movs	r3, #2
 8005974:	e060      	b.n	8005a38 <HAL_QSPI_AutoPolling+0xe6>
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2201      	movs	r2, #1
 800597a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005984:	b2db      	uxtb	r3, r3
 8005986:	2b01      	cmp	r3, #1
 8005988:	d14f      	bne.n	8005a2a <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2200      	movs	r2, #0
 800598e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2242      	movs	r2, #66	; 0x42
 8005994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	9300      	str	r3, [sp, #0]
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	2200      	movs	r2, #0
 80059a0:	2120      	movs	r1, #32
 80059a2:	68f8      	ldr	r0, [r7, #12]
 80059a4:	f000 f9a7 	bl	8005cf6 <QSPI_WaitFlagStateUntilTimeout>
 80059a8:	4603      	mov	r3, r0
 80059aa:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80059ac:	7dfb      	ldrb	r3, [r7, #23]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d13d      	bne.n	8005a2e <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	6812      	ldr	r2, [r2, #0]
 80059ba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	6852      	ldr	r2, [r2, #4]
 80059c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	6892      	ldr	r2, [r2, #8]
 80059ce:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	431a      	orrs	r2, r3
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80059e8:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	68da      	ldr	r2, [r3, #12]
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80059f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80059f6:	68b9      	ldr	r1, [r7, #8]
 80059f8:	68f8      	ldr	r0, [r7, #12]
 80059fa:	f000 f9b3 	bl	8005d64 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	9300      	str	r3, [sp, #0]
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	2201      	movs	r2, #1
 8005a06:	2108      	movs	r1, #8
 8005a08:	68f8      	ldr	r0, [r7, #12]
 8005a0a:	f000 f974 	bl	8005cf6 <QSPI_WaitFlagStateUntilTimeout>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8005a12:	7dfb      	ldrb	r3, [r7, #23]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d10a      	bne.n	8005a2e <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2208      	movs	r2, #8
 8005a1e:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a28:	e001      	b.n	8005a2e <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8005a2a:	2302      	movs	r3, #2
 8005a2c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005a36:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3718      	adds	r7, #24
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 8005a48:	bf00      	nop
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 8005a5c:	bf00      	nop
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 8005a84:	bf00      	nop
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 8005a98:	bf00      	nop
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 8005aac:	bf00      	nop
 8005aae:	370c      	adds	r7, #12
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 8005ac0:	bf00      	nop
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 8005ad4:	bf00      	nop
 8005ad6:	370c      	adds	r7, #12
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b086      	sub	sp, #24
 8005ae4:	af02      	add	r7, sp, #8
 8005ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8005aec:	f7fd ff10 	bl	8003910 <HAL_GetTick>
 8005af0:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	f003 0302 	and.w	r3, r3, #2
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d056      	beq.n	8005bb0 <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 0304 	and.w	r3, r3, #4
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d017      	beq.n	8005b48 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f022 0204 	bic.w	r2, r2, #4
 8005b26:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f7fe fe93 	bl	8004858 <HAL_DMA_Abort>
 8005b32:	4603      	mov	r3, r0
 8005b34:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 8005b36:	7bfb      	ldrb	r3, [r7, #15]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d005      	beq.n	8005b48 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b40:	f043 0204 	orr.w	r2, r3, #4
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f042 0202 	orr.w	r2, r2, #2
 8005b56:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b5c:	9300      	str	r3, [sp, #0]
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	2201      	movs	r2, #1
 8005b62:	2102      	movs	r1, #2
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f000 f8c6 	bl	8005cf6 <QSPI_WaitFlagStateUntilTimeout>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005b6e:	7bfb      	ldrb	r3, [r7, #15]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d10e      	bne.n	8005b92 <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2202      	movs	r2, #2
 8005b7a:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b80:	9300      	str	r3, [sp, #0]
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	2200      	movs	r2, #0
 8005b86:	2120      	movs	r1, #32
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f000 f8b4 	bl	8005cf6 <QSPI_WaitFlagStateUntilTimeout>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005b92:	7bfb      	ldrb	r3, [r7, #15]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d10b      	bne.n	8005bb0 <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	695a      	ldr	r2, [r3, #20]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8005ba6:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
  }

  return status;
 8005bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3710      	adds	r7, #16
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
	...

08005bbc <HAL_QSPI_Abort_IT>:
* @brief  Abort the current transmission (non-blocking function)
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort_IT(QSPI_HandleTypeDef *hqspi)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	73fb      	strb	r3, [r7, #15]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	f003 0302 	and.w	r3, r3, #2
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d046      	beq.n	8005c66 <HAL_QSPI_Abort_IT+0xaa>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_ABORT;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2208      	movs	r2, #8
 8005be4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable all interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_TO | QSPI_IT_SM | QSPI_IT_FT | QSPI_IT_TC | QSPI_IT_TE));
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8005bf6:	601a      	str	r2, [r3, #0]

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 0304 	and.w	r3, r3, #4
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d01b      	beq.n	8005c3e <HAL_QSPI_Abort_IT+0x82>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f022 0204 	bic.w	r2, r2, #4
 8005c14:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c1a:	4a15      	ldr	r2, [pc, #84]	; (8005c70 <HAL_QSPI_Abort_IT+0xb4>)
 8005c1c:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c22:	4618      	mov	r0, r3
 8005c24:	f7fe fe88 	bl	8004938 <HAL_DMA_Abort_IT>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d01b      	beq.n	8005c66 <HAL_QSPI_Abort_IT+0xaa>
      {
        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2201      	movs	r2, #1
 8005c32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f7ff ff0c 	bl	8005a54 <HAL_QSPI_AbortCpltCallback>
 8005c3c:	e013      	b.n	8005c66 <HAL_QSPI_Abort_IT+0xaa>
      }
    }
    else
    {
      /* Clear interrupt */
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	2202      	movs	r2, #2
 8005c44:	60da      	str	r2, [r3, #12]

      /* Enable the QSPI Transfer Complete Interrupt */
      __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005c54:	601a      	str	r2, [r3, #0]

      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f042 0202 	orr.w	r2, r2, #2
 8005c64:	601a      	str	r2, [r3, #0]
    }
  }
  return status;
 8005c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3710      	adds	r7, #16
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	08005c91 	.word	0x08005c91

08005c74 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	683a      	ldr	r2, [r7, #0]
 8005c82:	649a      	str	r2, [r3, #72]	; 0x48
}
 8005c84:	bf00      	nop
 8005c86:	370c      	adds	r7, #12
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <QSPI_DMAAbortCplt>:
  * @brief  DMA QSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c9c:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	2b08      	cmp	r3, #8
 8005cb4:	d114      	bne.n	8005ce0 <QSPI_DMAAbortCplt+0x50>
  {
    /* DMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	2202      	movs	r2, #2
 8005cbc:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005ccc:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f042 0202 	orr.w	r2, r2, #2
 8005cdc:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 8005cde:	e006      	b.n	8005cee <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 8005ce8:	68f8      	ldr	r0, [r7, #12]
 8005cea:	f7ff fea9 	bl	8005a40 <HAL_QSPI_ErrorCallback>
}
 8005cee:	bf00      	nop
 8005cf0:	3710      	adds	r7, #16
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}

08005cf6 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005cf6:	b580      	push	{r7, lr}
 8005cf8:	b084      	sub	sp, #16
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	60f8      	str	r0, [r7, #12]
 8005cfe:	60b9      	str	r1, [r7, #8]
 8005d00:	603b      	str	r3, [r7, #0]
 8005d02:	4613      	mov	r3, r2
 8005d04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005d06:	e01a      	b.n	8005d3e <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d0e:	d016      	beq.n	8005d3e <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d10:	f7fd fdfe 	bl	8003910 <HAL_GetTick>
 8005d14:	4602      	mov	r2, r0
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	1ad3      	subs	r3, r2, r3
 8005d1a:	69ba      	ldr	r2, [r7, #24]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d302      	bcc.n	8005d26 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d10b      	bne.n	8005d3e <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2204      	movs	r2, #4
 8005d2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d32:	f043 0201 	orr.w	r2, r3, #1
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e00e      	b.n	8005d5c <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	689a      	ldr	r2, [r3, #8]
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	4013      	ands	r3, r2
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	bf14      	ite	ne
 8005d4c:	2301      	movne	r3, #1
 8005d4e:	2300      	moveq	r3, #0
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	461a      	mov	r2, r3
 8005d54:	79fb      	ldrb	r3, [r7, #7]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d1d6      	bne.n	8005d08 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d5a:	2300      	movs	r3, #0
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3710      	adds	r7, #16
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b085      	sub	sp, #20
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d009      	beq.n	8005d8c <QSPI_Config+0x28>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005d7e:	d005      	beq.n	8005d8c <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	3a01      	subs	r2, #1
 8005d8a:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	699b      	ldr	r3, [r3, #24]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	f000 80b9 	beq.w	8005f08 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	6a1b      	ldr	r3, [r3, #32]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d05f      	beq.n	8005e5e <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68ba      	ldr	r2, [r7, #8]
 8005da4:	6892      	ldr	r2, [r2, #8]
 8005da6:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	69db      	ldr	r3, [r3, #28]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d031      	beq.n	8005e14 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db8:	431a      	orrs	r2, r3
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dbe:	431a      	orrs	r2, r3
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc4:	431a      	orrs	r2, r3
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	695b      	ldr	r3, [r3, #20]
 8005dca:	049b      	lsls	r3, r3, #18
 8005dcc:	431a      	orrs	r2, r3
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	431a      	orrs	r2, r3
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	6a1b      	ldr	r3, [r3, #32]
 8005dd8:	431a      	orrs	r2, r3
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	431a      	orrs	r2, r3
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	69db      	ldr	r3, [r3, #28]
 8005de4:	431a      	orrs	r2, r3
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	699b      	ldr	r3, [r3, #24]
 8005dea:	431a      	orrs	r2, r3
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	ea42 0103 	orr.w	r1, r2, r3
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	430a      	orrs	r2, r1
 8005dfc:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005e04:	f000 812e 	beq.w	8006064 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68ba      	ldr	r2, [r7, #8]
 8005e0e:	6852      	ldr	r2, [r2, #4]
 8005e10:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8005e12:	e127      	b.n	8006064 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e1c:	431a      	orrs	r2, r3
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e22:	431a      	orrs	r2, r3
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e28:	431a      	orrs	r2, r3
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	695b      	ldr	r3, [r3, #20]
 8005e2e:	049b      	lsls	r3, r3, #18
 8005e30:	431a      	orrs	r2, r3
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	691b      	ldr	r3, [r3, #16]
 8005e36:	431a      	orrs	r2, r3
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	6a1b      	ldr	r3, [r3, #32]
 8005e3c:	431a      	orrs	r2, r3
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	69db      	ldr	r3, [r3, #28]
 8005e42:	431a      	orrs	r2, r3
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	699b      	ldr	r3, [r3, #24]
 8005e48:	431a      	orrs	r2, r3
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	ea42 0103 	orr.w	r1, r2, r3
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	430a      	orrs	r2, r1
 8005e5a:	615a      	str	r2, [r3, #20]
}
 8005e5c:	e102      	b.n	8006064 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	69db      	ldr	r3, [r3, #28]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d02e      	beq.n	8005ec4 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e6e:	431a      	orrs	r2, r3
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e74:	431a      	orrs	r2, r3
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7a:	431a      	orrs	r2, r3
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	695b      	ldr	r3, [r3, #20]
 8005e80:	049b      	lsls	r3, r3, #18
 8005e82:	431a      	orrs	r2, r3
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	6a1b      	ldr	r3, [r3, #32]
 8005e88:	431a      	orrs	r2, r3
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	431a      	orrs	r2, r3
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	69db      	ldr	r3, [r3, #28]
 8005e94:	431a      	orrs	r2, r3
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	699b      	ldr	r3, [r3, #24]
 8005e9a:	431a      	orrs	r2, r3
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	ea42 0103 	orr.w	r1, r2, r3
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	430a      	orrs	r2, r1
 8005eac:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005eb4:	f000 80d6 	beq.w	8006064 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68ba      	ldr	r2, [r7, #8]
 8005ebe:	6852      	ldr	r2, [r2, #4]
 8005ec0:	619a      	str	r2, [r3, #24]
}
 8005ec2:	e0cf      	b.n	8006064 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ecc:	431a      	orrs	r2, r3
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ed2:	431a      	orrs	r2, r3
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed8:	431a      	orrs	r2, r3
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	695b      	ldr	r3, [r3, #20]
 8005ede:	049b      	lsls	r3, r3, #18
 8005ee0:	431a      	orrs	r2, r3
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	6a1b      	ldr	r3, [r3, #32]
 8005ee6:	431a      	orrs	r2, r3
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	69db      	ldr	r3, [r3, #28]
 8005eec:	431a      	orrs	r2, r3
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	699b      	ldr	r3, [r3, #24]
 8005ef2:	431a      	orrs	r2, r3
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	ea42 0103 	orr.w	r1, r2, r3
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	430a      	orrs	r2, r1
 8005f04:	615a      	str	r2, [r3, #20]
}
 8005f06:	e0ad      	b.n	8006064 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	6a1b      	ldr	r3, [r3, #32]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d058      	beq.n	8005fc2 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	68ba      	ldr	r2, [r7, #8]
 8005f16:	6892      	ldr	r2, [r2, #8]
 8005f18:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	69db      	ldr	r3, [r3, #28]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d02d      	beq.n	8005f7e <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f2a:	431a      	orrs	r2, r3
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f30:	431a      	orrs	r2, r3
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f36:	431a      	orrs	r2, r3
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	695b      	ldr	r3, [r3, #20]
 8005f3c:	049b      	lsls	r3, r3, #18
 8005f3e:	431a      	orrs	r2, r3
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	691b      	ldr	r3, [r3, #16]
 8005f44:	431a      	orrs	r2, r3
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	6a1b      	ldr	r3, [r3, #32]
 8005f4a:	431a      	orrs	r2, r3
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	431a      	orrs	r2, r3
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	69db      	ldr	r3, [r3, #28]
 8005f56:	431a      	orrs	r2, r3
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	699b      	ldr	r3, [r3, #24]
 8005f5c:	ea42 0103 	orr.w	r1, r2, r3
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	430a      	orrs	r2, r1
 8005f68:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005f70:	d078      	beq.n	8006064 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	68ba      	ldr	r2, [r7, #8]
 8005f78:	6852      	ldr	r2, [r2, #4]
 8005f7a:	619a      	str	r2, [r3, #24]
}
 8005f7c:	e072      	b.n	8006064 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f86:	431a      	orrs	r2, r3
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f8c:	431a      	orrs	r2, r3
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f92:	431a      	orrs	r2, r3
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	695b      	ldr	r3, [r3, #20]
 8005f98:	049b      	lsls	r3, r3, #18
 8005f9a:	431a      	orrs	r2, r3
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	691b      	ldr	r3, [r3, #16]
 8005fa0:	431a      	orrs	r2, r3
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	6a1b      	ldr	r3, [r3, #32]
 8005fa6:	431a      	orrs	r2, r3
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	69db      	ldr	r3, [r3, #28]
 8005fac:	431a      	orrs	r2, r3
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	699b      	ldr	r3, [r3, #24]
 8005fb2:	ea42 0103 	orr.w	r1, r2, r3
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	430a      	orrs	r2, r1
 8005fbe:	615a      	str	r2, [r3, #20]
}
 8005fc0:	e050      	b.n	8006064 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	69db      	ldr	r3, [r3, #28]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d02a      	beq.n	8006020 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fd2:	431a      	orrs	r2, r3
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fd8:	431a      	orrs	r2, r3
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fde:	431a      	orrs	r2, r3
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	695b      	ldr	r3, [r3, #20]
 8005fe4:	049b      	lsls	r3, r3, #18
 8005fe6:	431a      	orrs	r2, r3
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	6a1b      	ldr	r3, [r3, #32]
 8005fec:	431a      	orrs	r2, r3
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	431a      	orrs	r2, r3
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	69db      	ldr	r3, [r3, #28]
 8005ff8:	431a      	orrs	r2, r3
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	699b      	ldr	r3, [r3, #24]
 8005ffe:	ea42 0103 	orr.w	r1, r2, r3
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	430a      	orrs	r2, r1
 800600a:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006012:	d027      	beq.n	8006064 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	68ba      	ldr	r2, [r7, #8]
 800601a:	6852      	ldr	r2, [r2, #4]
 800601c:	619a      	str	r2, [r3, #24]
}
 800601e:	e021      	b.n	8006064 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006024:	2b00      	cmp	r3, #0
 8006026:	d01d      	beq.n	8006064 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006030:	431a      	orrs	r2, r3
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006036:	431a      	orrs	r2, r3
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603c:	431a      	orrs	r2, r3
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	695b      	ldr	r3, [r3, #20]
 8006042:	049b      	lsls	r3, r3, #18
 8006044:	431a      	orrs	r2, r3
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	6a1b      	ldr	r3, [r3, #32]
 800604a:	431a      	orrs	r2, r3
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	69db      	ldr	r3, [r3, #28]
 8006050:	431a      	orrs	r2, r3
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	699b      	ldr	r3, [r3, #24]
 8006056:	ea42 0103 	orr.w	r1, r2, r3
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	430a      	orrs	r2, r1
 8006062:	615a      	str	r2, [r3, #20]
}
 8006064:	bf00      	nop
 8006066:	3714      	adds	r7, #20
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d101      	bne.n	8006084 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	e0cc      	b.n	800621e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006084:	4b68      	ldr	r3, [pc, #416]	; (8006228 <HAL_RCC_ClockConfig+0x1b8>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 030f 	and.w	r3, r3, #15
 800608c:	683a      	ldr	r2, [r7, #0]
 800608e:	429a      	cmp	r2, r3
 8006090:	d90c      	bls.n	80060ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006092:	4b65      	ldr	r3, [pc, #404]	; (8006228 <HAL_RCC_ClockConfig+0x1b8>)
 8006094:	683a      	ldr	r2, [r7, #0]
 8006096:	b2d2      	uxtb	r2, r2
 8006098:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800609a:	4b63      	ldr	r3, [pc, #396]	; (8006228 <HAL_RCC_ClockConfig+0x1b8>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f003 030f 	and.w	r3, r3, #15
 80060a2:	683a      	ldr	r2, [r7, #0]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d001      	beq.n	80060ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
 80060aa:	e0b8      	b.n	800621e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f003 0302 	and.w	r3, r3, #2
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d020      	beq.n	80060fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 0304 	and.w	r3, r3, #4
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d005      	beq.n	80060d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80060c4:	4b59      	ldr	r3, [pc, #356]	; (800622c <HAL_RCC_ClockConfig+0x1bc>)
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	4a58      	ldr	r2, [pc, #352]	; (800622c <HAL_RCC_ClockConfig+0x1bc>)
 80060ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80060ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 0308 	and.w	r3, r3, #8
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d005      	beq.n	80060e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80060dc:	4b53      	ldr	r3, [pc, #332]	; (800622c <HAL_RCC_ClockConfig+0x1bc>)
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	4a52      	ldr	r2, [pc, #328]	; (800622c <HAL_RCC_ClockConfig+0x1bc>)
 80060e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80060e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060e8:	4b50      	ldr	r3, [pc, #320]	; (800622c <HAL_RCC_ClockConfig+0x1bc>)
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	494d      	ldr	r1, [pc, #308]	; (800622c <HAL_RCC_ClockConfig+0x1bc>)
 80060f6:	4313      	orrs	r3, r2
 80060f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 0301 	and.w	r3, r3, #1
 8006102:	2b00      	cmp	r3, #0
 8006104:	d044      	beq.n	8006190 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	2b01      	cmp	r3, #1
 800610c:	d107      	bne.n	800611e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800610e:	4b47      	ldr	r3, [pc, #284]	; (800622c <HAL_RCC_ClockConfig+0x1bc>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006116:	2b00      	cmp	r3, #0
 8006118:	d119      	bne.n	800614e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	e07f      	b.n	800621e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	2b02      	cmp	r3, #2
 8006124:	d003      	beq.n	800612e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800612a:	2b03      	cmp	r3, #3
 800612c:	d107      	bne.n	800613e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800612e:	4b3f      	ldr	r3, [pc, #252]	; (800622c <HAL_RCC_ClockConfig+0x1bc>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006136:	2b00      	cmp	r3, #0
 8006138:	d109      	bne.n	800614e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e06f      	b.n	800621e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800613e:	4b3b      	ldr	r3, [pc, #236]	; (800622c <HAL_RCC_ClockConfig+0x1bc>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 0302 	and.w	r3, r3, #2
 8006146:	2b00      	cmp	r3, #0
 8006148:	d101      	bne.n	800614e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	e067      	b.n	800621e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800614e:	4b37      	ldr	r3, [pc, #220]	; (800622c <HAL_RCC_ClockConfig+0x1bc>)
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	f023 0203 	bic.w	r2, r3, #3
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	4934      	ldr	r1, [pc, #208]	; (800622c <HAL_RCC_ClockConfig+0x1bc>)
 800615c:	4313      	orrs	r3, r2
 800615e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006160:	f7fd fbd6 	bl	8003910 <HAL_GetTick>
 8006164:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006166:	e00a      	b.n	800617e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006168:	f7fd fbd2 	bl	8003910 <HAL_GetTick>
 800616c:	4602      	mov	r2, r0
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	1ad3      	subs	r3, r2, r3
 8006172:	f241 3288 	movw	r2, #5000	; 0x1388
 8006176:	4293      	cmp	r3, r2
 8006178:	d901      	bls.n	800617e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800617a:	2303      	movs	r3, #3
 800617c:	e04f      	b.n	800621e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800617e:	4b2b      	ldr	r3, [pc, #172]	; (800622c <HAL_RCC_ClockConfig+0x1bc>)
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	f003 020c 	and.w	r2, r3, #12
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	429a      	cmp	r2, r3
 800618e:	d1eb      	bne.n	8006168 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006190:	4b25      	ldr	r3, [pc, #148]	; (8006228 <HAL_RCC_ClockConfig+0x1b8>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 030f 	and.w	r3, r3, #15
 8006198:	683a      	ldr	r2, [r7, #0]
 800619a:	429a      	cmp	r2, r3
 800619c:	d20c      	bcs.n	80061b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800619e:	4b22      	ldr	r3, [pc, #136]	; (8006228 <HAL_RCC_ClockConfig+0x1b8>)
 80061a0:	683a      	ldr	r2, [r7, #0]
 80061a2:	b2d2      	uxtb	r2, r2
 80061a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061a6:	4b20      	ldr	r3, [pc, #128]	; (8006228 <HAL_RCC_ClockConfig+0x1b8>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 030f 	and.w	r3, r3, #15
 80061ae:	683a      	ldr	r2, [r7, #0]
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d001      	beq.n	80061b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80061b4:	2301      	movs	r3, #1
 80061b6:	e032      	b.n	800621e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f003 0304 	and.w	r3, r3, #4
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d008      	beq.n	80061d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80061c4:	4b19      	ldr	r3, [pc, #100]	; (800622c <HAL_RCC_ClockConfig+0x1bc>)
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	4916      	ldr	r1, [pc, #88]	; (800622c <HAL_RCC_ClockConfig+0x1bc>)
 80061d2:	4313      	orrs	r3, r2
 80061d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 0308 	and.w	r3, r3, #8
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d009      	beq.n	80061f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80061e2:	4b12      	ldr	r3, [pc, #72]	; (800622c <HAL_RCC_ClockConfig+0x1bc>)
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	00db      	lsls	r3, r3, #3
 80061f0:	490e      	ldr	r1, [pc, #56]	; (800622c <HAL_RCC_ClockConfig+0x1bc>)
 80061f2:	4313      	orrs	r3, r2
 80061f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80061f6:	f000 f887 	bl	8006308 <HAL_RCC_GetSysClockFreq>
 80061fa:	4602      	mov	r2, r0
 80061fc:	4b0b      	ldr	r3, [pc, #44]	; (800622c <HAL_RCC_ClockConfig+0x1bc>)
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	091b      	lsrs	r3, r3, #4
 8006202:	f003 030f 	and.w	r3, r3, #15
 8006206:	490a      	ldr	r1, [pc, #40]	; (8006230 <HAL_RCC_ClockConfig+0x1c0>)
 8006208:	5ccb      	ldrb	r3, [r1, r3]
 800620a:	fa22 f303 	lsr.w	r3, r2, r3
 800620e:	4a09      	ldr	r2, [pc, #36]	; (8006234 <HAL_RCC_ClockConfig+0x1c4>)
 8006210:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006212:	4b09      	ldr	r3, [pc, #36]	; (8006238 <HAL_RCC_ClockConfig+0x1c8>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4618      	mov	r0, r3
 8006218:	f7fc fcec 	bl	8002bf4 <HAL_InitTick>

  return HAL_OK;
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	3710      	adds	r7, #16
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	40023c00 	.word	0x40023c00
 800622c:	40023800 	.word	0x40023800
 8006230:	0800b100 	.word	0x0800b100
 8006234:	20000074 	.word	0x20000074
 8006238:	20000078 	.word	0x20000078

0800623c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800623c:	b480      	push	{r7}
 800623e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006240:	4b03      	ldr	r3, [pc, #12]	; (8006250 <HAL_RCC_GetHCLKFreq+0x14>)
 8006242:	681b      	ldr	r3, [r3, #0]
}
 8006244:	4618      	mov	r0, r3
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr
 800624e:	bf00      	nop
 8006250:	20000074 	.word	0x20000074

08006254 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006258:	f7ff fff0 	bl	800623c <HAL_RCC_GetHCLKFreq>
 800625c:	4602      	mov	r2, r0
 800625e:	4b05      	ldr	r3, [pc, #20]	; (8006274 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	0a9b      	lsrs	r3, r3, #10
 8006264:	f003 0307 	and.w	r3, r3, #7
 8006268:	4903      	ldr	r1, [pc, #12]	; (8006278 <HAL_RCC_GetPCLK1Freq+0x24>)
 800626a:	5ccb      	ldrb	r3, [r1, r3]
 800626c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006270:	4618      	mov	r0, r3
 8006272:	bd80      	pop	{r7, pc}
 8006274:	40023800 	.word	0x40023800
 8006278:	0800b110 	.word	0x0800b110

0800627c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006280:	f7ff ffdc 	bl	800623c <HAL_RCC_GetHCLKFreq>
 8006284:	4602      	mov	r2, r0
 8006286:	4b05      	ldr	r3, [pc, #20]	; (800629c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	0b5b      	lsrs	r3, r3, #13
 800628c:	f003 0307 	and.w	r3, r3, #7
 8006290:	4903      	ldr	r1, [pc, #12]	; (80062a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006292:	5ccb      	ldrb	r3, [r1, r3]
 8006294:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006298:	4618      	mov	r0, r3
 800629a:	bd80      	pop	{r7, pc}
 800629c:	40023800 	.word	0x40023800
 80062a0:	0800b110 	.word	0x0800b110

080062a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	220f      	movs	r2, #15
 80062b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80062b4:	4b12      	ldr	r3, [pc, #72]	; (8006300 <HAL_RCC_GetClockConfig+0x5c>)
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	f003 0203 	and.w	r2, r3, #3
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80062c0:	4b0f      	ldr	r3, [pc, #60]	; (8006300 <HAL_RCC_GetClockConfig+0x5c>)
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80062cc:	4b0c      	ldr	r3, [pc, #48]	; (8006300 <HAL_RCC_GetClockConfig+0x5c>)
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80062d8:	4b09      	ldr	r3, [pc, #36]	; (8006300 <HAL_RCC_GetClockConfig+0x5c>)
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	08db      	lsrs	r3, r3, #3
 80062de:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80062e6:	4b07      	ldr	r3, [pc, #28]	; (8006304 <HAL_RCC_GetClockConfig+0x60>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 020f 	and.w	r2, r3, #15
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	601a      	str	r2, [r3, #0]
}
 80062f2:	bf00      	nop
 80062f4:	370c      	adds	r7, #12
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr
 80062fe:	bf00      	nop
 8006300:	40023800 	.word	0x40023800
 8006304:	40023c00 	.word	0x40023c00

08006308 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006308:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800630c:	b087      	sub	sp, #28
 800630e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006310:	2600      	movs	r6, #0
 8006312:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 8006314:	2600      	movs	r6, #0
 8006316:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 8006318:	2600      	movs	r6, #0
 800631a:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 800631c:	2600      	movs	r6, #0
 800631e:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006320:	2600      	movs	r6, #0
 8006322:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006324:	4ea3      	ldr	r6, [pc, #652]	; (80065b4 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8006326:	68b6      	ldr	r6, [r6, #8]
 8006328:	f006 060c 	and.w	r6, r6, #12
 800632c:	2e0c      	cmp	r6, #12
 800632e:	f200 8137 	bhi.w	80065a0 <HAL_RCC_GetSysClockFreq+0x298>
 8006332:	f20f 0c08 	addw	ip, pc, #8
 8006336:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 800633a:	bf00      	nop
 800633c:	08006371 	.word	0x08006371
 8006340:	080065a1 	.word	0x080065a1
 8006344:	080065a1 	.word	0x080065a1
 8006348:	080065a1 	.word	0x080065a1
 800634c:	08006377 	.word	0x08006377
 8006350:	080065a1 	.word	0x080065a1
 8006354:	080065a1 	.word	0x080065a1
 8006358:	080065a1 	.word	0x080065a1
 800635c:	0800637d 	.word	0x0800637d
 8006360:	080065a1 	.word	0x080065a1
 8006364:	080065a1 	.word	0x080065a1
 8006368:	080065a1 	.word	0x080065a1
 800636c:	08006493 	.word	0x08006493
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006370:	4b91      	ldr	r3, [pc, #580]	; (80065b8 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8006372:	613b      	str	r3, [r7, #16]
       break;
 8006374:	e117      	b.n	80065a6 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006376:	4b91      	ldr	r3, [pc, #580]	; (80065bc <HAL_RCC_GetSysClockFreq+0x2b4>)
 8006378:	613b      	str	r3, [r7, #16]
      break;
 800637a:	e114      	b.n	80065a6 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800637c:	4b8d      	ldr	r3, [pc, #564]	; (80065b4 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006384:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006386:	4b8b      	ldr	r3, [pc, #556]	; (80065b4 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800638e:	2b00      	cmp	r3, #0
 8006390:	d024      	beq.n	80063dc <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006392:	4b88      	ldr	r3, [pc, #544]	; (80065b4 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	099b      	lsrs	r3, r3, #6
 8006398:	461a      	mov	r2, r3
 800639a:	f04f 0300 	mov.w	r3, #0
 800639e:	f240 14ff 	movw	r4, #511	; 0x1ff
 80063a2:	f04f 0500 	mov.w	r5, #0
 80063a6:	ea02 0004 	and.w	r0, r2, r4
 80063aa:	ea03 0105 	and.w	r1, r3, r5
 80063ae:	4b83      	ldr	r3, [pc, #524]	; (80065bc <HAL_RCC_GetSysClockFreq+0x2b4>)
 80063b0:	fb03 f201 	mul.w	r2, r3, r1
 80063b4:	2300      	movs	r3, #0
 80063b6:	fb03 f300 	mul.w	r3, r3, r0
 80063ba:	4413      	add	r3, r2
 80063bc:	4a7f      	ldr	r2, [pc, #508]	; (80065bc <HAL_RCC_GetSysClockFreq+0x2b4>)
 80063be:	fba0 0102 	umull	r0, r1, r0, r2
 80063c2:	440b      	add	r3, r1
 80063c4:	4619      	mov	r1, r3
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	461a      	mov	r2, r3
 80063ca:	f04f 0300 	mov.w	r3, #0
 80063ce:	f7f9 ff1f 	bl	8000210 <__aeabi_uldivmod>
 80063d2:	4602      	mov	r2, r0
 80063d4:	460b      	mov	r3, r1
 80063d6:	4613      	mov	r3, r2
 80063d8:	617b      	str	r3, [r7, #20]
 80063da:	e04c      	b.n	8006476 <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063dc:	4b75      	ldr	r3, [pc, #468]	; (80065b4 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	099b      	lsrs	r3, r3, #6
 80063e2:	461a      	mov	r2, r3
 80063e4:	f04f 0300 	mov.w	r3, #0
 80063e8:	f240 10ff 	movw	r0, #511	; 0x1ff
 80063ec:	f04f 0100 	mov.w	r1, #0
 80063f0:	ea02 0800 	and.w	r8, r2, r0
 80063f4:	ea03 0901 	and.w	r9, r3, r1
 80063f8:	4640      	mov	r0, r8
 80063fa:	4649      	mov	r1, r9
 80063fc:	f04f 0200 	mov.w	r2, #0
 8006400:	f04f 0300 	mov.w	r3, #0
 8006404:	014b      	lsls	r3, r1, #5
 8006406:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800640a:	0142      	lsls	r2, r0, #5
 800640c:	4610      	mov	r0, r2
 800640e:	4619      	mov	r1, r3
 8006410:	ebb0 0008 	subs.w	r0, r0, r8
 8006414:	eb61 0109 	sbc.w	r1, r1, r9
 8006418:	f04f 0200 	mov.w	r2, #0
 800641c:	f04f 0300 	mov.w	r3, #0
 8006420:	018b      	lsls	r3, r1, #6
 8006422:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006426:	0182      	lsls	r2, r0, #6
 8006428:	1a12      	subs	r2, r2, r0
 800642a:	eb63 0301 	sbc.w	r3, r3, r1
 800642e:	f04f 0000 	mov.w	r0, #0
 8006432:	f04f 0100 	mov.w	r1, #0
 8006436:	00d9      	lsls	r1, r3, #3
 8006438:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800643c:	00d0      	lsls	r0, r2, #3
 800643e:	4602      	mov	r2, r0
 8006440:	460b      	mov	r3, r1
 8006442:	eb12 0208 	adds.w	r2, r2, r8
 8006446:	eb43 0309 	adc.w	r3, r3, r9
 800644a:	f04f 0000 	mov.w	r0, #0
 800644e:	f04f 0100 	mov.w	r1, #0
 8006452:	0299      	lsls	r1, r3, #10
 8006454:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006458:	0290      	lsls	r0, r2, #10
 800645a:	4602      	mov	r2, r0
 800645c:	460b      	mov	r3, r1
 800645e:	4610      	mov	r0, r2
 8006460:	4619      	mov	r1, r3
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	461a      	mov	r2, r3
 8006466:	f04f 0300 	mov.w	r3, #0
 800646a:	f7f9 fed1 	bl	8000210 <__aeabi_uldivmod>
 800646e:	4602      	mov	r2, r0
 8006470:	460b      	mov	r3, r1
 8006472:	4613      	mov	r3, r2
 8006474:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006476:	4b4f      	ldr	r3, [pc, #316]	; (80065b4 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	0c1b      	lsrs	r3, r3, #16
 800647c:	f003 0303 	and.w	r3, r3, #3
 8006480:	3301      	adds	r3, #1
 8006482:	005b      	lsls	r3, r3, #1
 8006484:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8006486:	697a      	ldr	r2, [r7, #20]
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	fbb2 f3f3 	udiv	r3, r2, r3
 800648e:	613b      	str	r3, [r7, #16]
      break;
 8006490:	e089      	b.n	80065a6 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006492:	4948      	ldr	r1, [pc, #288]	; (80065b4 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8006494:	6849      	ldr	r1, [r1, #4]
 8006496:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800649a:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800649c:	4945      	ldr	r1, [pc, #276]	; (80065b4 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800649e:	6849      	ldr	r1, [r1, #4]
 80064a0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80064a4:	2900      	cmp	r1, #0
 80064a6:	d024      	beq.n	80064f2 <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064a8:	4942      	ldr	r1, [pc, #264]	; (80065b4 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80064aa:	6849      	ldr	r1, [r1, #4]
 80064ac:	0989      	lsrs	r1, r1, #6
 80064ae:	4608      	mov	r0, r1
 80064b0:	f04f 0100 	mov.w	r1, #0
 80064b4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80064b8:	f04f 0500 	mov.w	r5, #0
 80064bc:	ea00 0204 	and.w	r2, r0, r4
 80064c0:	ea01 0305 	and.w	r3, r1, r5
 80064c4:	493d      	ldr	r1, [pc, #244]	; (80065bc <HAL_RCC_GetSysClockFreq+0x2b4>)
 80064c6:	fb01 f003 	mul.w	r0, r1, r3
 80064ca:	2100      	movs	r1, #0
 80064cc:	fb01 f102 	mul.w	r1, r1, r2
 80064d0:	1844      	adds	r4, r0, r1
 80064d2:	493a      	ldr	r1, [pc, #232]	; (80065bc <HAL_RCC_GetSysClockFreq+0x2b4>)
 80064d4:	fba2 0101 	umull	r0, r1, r2, r1
 80064d8:	1863      	adds	r3, r4, r1
 80064da:	4619      	mov	r1, r3
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	461a      	mov	r2, r3
 80064e0:	f04f 0300 	mov.w	r3, #0
 80064e4:	f7f9 fe94 	bl	8000210 <__aeabi_uldivmod>
 80064e8:	4602      	mov	r2, r0
 80064ea:	460b      	mov	r3, r1
 80064ec:	4613      	mov	r3, r2
 80064ee:	617b      	str	r3, [r7, #20]
 80064f0:	e04a      	b.n	8006588 <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064f2:	4b30      	ldr	r3, [pc, #192]	; (80065b4 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	099b      	lsrs	r3, r3, #6
 80064f8:	461a      	mov	r2, r3
 80064fa:	f04f 0300 	mov.w	r3, #0
 80064fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006502:	f04f 0100 	mov.w	r1, #0
 8006506:	ea02 0400 	and.w	r4, r2, r0
 800650a:	ea03 0501 	and.w	r5, r3, r1
 800650e:	4620      	mov	r0, r4
 8006510:	4629      	mov	r1, r5
 8006512:	f04f 0200 	mov.w	r2, #0
 8006516:	f04f 0300 	mov.w	r3, #0
 800651a:	014b      	lsls	r3, r1, #5
 800651c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006520:	0142      	lsls	r2, r0, #5
 8006522:	4610      	mov	r0, r2
 8006524:	4619      	mov	r1, r3
 8006526:	1b00      	subs	r0, r0, r4
 8006528:	eb61 0105 	sbc.w	r1, r1, r5
 800652c:	f04f 0200 	mov.w	r2, #0
 8006530:	f04f 0300 	mov.w	r3, #0
 8006534:	018b      	lsls	r3, r1, #6
 8006536:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800653a:	0182      	lsls	r2, r0, #6
 800653c:	1a12      	subs	r2, r2, r0
 800653e:	eb63 0301 	sbc.w	r3, r3, r1
 8006542:	f04f 0000 	mov.w	r0, #0
 8006546:	f04f 0100 	mov.w	r1, #0
 800654a:	00d9      	lsls	r1, r3, #3
 800654c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006550:	00d0      	lsls	r0, r2, #3
 8006552:	4602      	mov	r2, r0
 8006554:	460b      	mov	r3, r1
 8006556:	1912      	adds	r2, r2, r4
 8006558:	eb45 0303 	adc.w	r3, r5, r3
 800655c:	f04f 0000 	mov.w	r0, #0
 8006560:	f04f 0100 	mov.w	r1, #0
 8006564:	0299      	lsls	r1, r3, #10
 8006566:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800656a:	0290      	lsls	r0, r2, #10
 800656c:	4602      	mov	r2, r0
 800656e:	460b      	mov	r3, r1
 8006570:	4610      	mov	r0, r2
 8006572:	4619      	mov	r1, r3
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	461a      	mov	r2, r3
 8006578:	f04f 0300 	mov.w	r3, #0
 800657c:	f7f9 fe48 	bl	8000210 <__aeabi_uldivmod>
 8006580:	4602      	mov	r2, r0
 8006582:	460b      	mov	r3, r1
 8006584:	4613      	mov	r3, r2
 8006586:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006588:	4b0a      	ldr	r3, [pc, #40]	; (80065b4 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	0f1b      	lsrs	r3, r3, #28
 800658e:	f003 0307 	and.w	r3, r3, #7
 8006592:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8006594:	697a      	ldr	r2, [r7, #20]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	fbb2 f3f3 	udiv	r3, r2, r3
 800659c:	613b      	str	r3, [r7, #16]
      break;
 800659e:	e002      	b.n	80065a6 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80065a0:	4b05      	ldr	r3, [pc, #20]	; (80065b8 <HAL_RCC_GetSysClockFreq+0x2b0>)
 80065a2:	613b      	str	r3, [r7, #16]
      break;
 80065a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80065a6:	693b      	ldr	r3, [r7, #16]
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	371c      	adds	r7, #28
 80065ac:	46bd      	mov	sp, r7
 80065ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80065b2:	bf00      	nop
 80065b4:	40023800 	.word	0x40023800
 80065b8:	00f42400 	.word	0x00f42400
 80065bc:	017d7840 	.word	0x017d7840

080065c0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b086      	sub	sp, #24
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d101      	bne.n	80065d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	e28d      	b.n	8006aee <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 0301 	and.w	r3, r3, #1
 80065da:	2b00      	cmp	r3, #0
 80065dc:	f000 8083 	beq.w	80066e6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80065e0:	4b94      	ldr	r3, [pc, #592]	; (8006834 <HAL_RCC_OscConfig+0x274>)
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	f003 030c 	and.w	r3, r3, #12
 80065e8:	2b04      	cmp	r3, #4
 80065ea:	d019      	beq.n	8006620 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80065ec:	4b91      	ldr	r3, [pc, #580]	; (8006834 <HAL_RCC_OscConfig+0x274>)
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80065f4:	2b08      	cmp	r3, #8
 80065f6:	d106      	bne.n	8006606 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80065f8:	4b8e      	ldr	r3, [pc, #568]	; (8006834 <HAL_RCC_OscConfig+0x274>)
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006600:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006604:	d00c      	beq.n	8006620 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006606:	4b8b      	ldr	r3, [pc, #556]	; (8006834 <HAL_RCC_OscConfig+0x274>)
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800660e:	2b0c      	cmp	r3, #12
 8006610:	d112      	bne.n	8006638 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006612:	4b88      	ldr	r3, [pc, #544]	; (8006834 <HAL_RCC_OscConfig+0x274>)
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800661a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800661e:	d10b      	bne.n	8006638 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006620:	4b84      	ldr	r3, [pc, #528]	; (8006834 <HAL_RCC_OscConfig+0x274>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006628:	2b00      	cmp	r3, #0
 800662a:	d05b      	beq.n	80066e4 <HAL_RCC_OscConfig+0x124>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d157      	bne.n	80066e4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	e25a      	b.n	8006aee <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006640:	d106      	bne.n	8006650 <HAL_RCC_OscConfig+0x90>
 8006642:	4b7c      	ldr	r3, [pc, #496]	; (8006834 <HAL_RCC_OscConfig+0x274>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a7b      	ldr	r2, [pc, #492]	; (8006834 <HAL_RCC_OscConfig+0x274>)
 8006648:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800664c:	6013      	str	r3, [r2, #0]
 800664e:	e01d      	b.n	800668c <HAL_RCC_OscConfig+0xcc>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006658:	d10c      	bne.n	8006674 <HAL_RCC_OscConfig+0xb4>
 800665a:	4b76      	ldr	r3, [pc, #472]	; (8006834 <HAL_RCC_OscConfig+0x274>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a75      	ldr	r2, [pc, #468]	; (8006834 <HAL_RCC_OscConfig+0x274>)
 8006660:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006664:	6013      	str	r3, [r2, #0]
 8006666:	4b73      	ldr	r3, [pc, #460]	; (8006834 <HAL_RCC_OscConfig+0x274>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a72      	ldr	r2, [pc, #456]	; (8006834 <HAL_RCC_OscConfig+0x274>)
 800666c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006670:	6013      	str	r3, [r2, #0]
 8006672:	e00b      	b.n	800668c <HAL_RCC_OscConfig+0xcc>
 8006674:	4b6f      	ldr	r3, [pc, #444]	; (8006834 <HAL_RCC_OscConfig+0x274>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a6e      	ldr	r2, [pc, #440]	; (8006834 <HAL_RCC_OscConfig+0x274>)
 800667a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800667e:	6013      	str	r3, [r2, #0]
 8006680:	4b6c      	ldr	r3, [pc, #432]	; (8006834 <HAL_RCC_OscConfig+0x274>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a6b      	ldr	r2, [pc, #428]	; (8006834 <HAL_RCC_OscConfig+0x274>)
 8006686:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800668a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d013      	beq.n	80066bc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006694:	f7fd f93c 	bl	8003910 <HAL_GetTick>
 8006698:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800669a:	e008      	b.n	80066ae <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800669c:	f7fd f938 	bl	8003910 <HAL_GetTick>
 80066a0:	4602      	mov	r2, r0
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	2b64      	cmp	r3, #100	; 0x64
 80066a8:	d901      	bls.n	80066ae <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80066aa:	2303      	movs	r3, #3
 80066ac:	e21f      	b.n	8006aee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066ae:	4b61      	ldr	r3, [pc, #388]	; (8006834 <HAL_RCC_OscConfig+0x274>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d0f0      	beq.n	800669c <HAL_RCC_OscConfig+0xdc>
 80066ba:	e014      	b.n	80066e6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066bc:	f7fd f928 	bl	8003910 <HAL_GetTick>
 80066c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066c2:	e008      	b.n	80066d6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80066c4:	f7fd f924 	bl	8003910 <HAL_GetTick>
 80066c8:	4602      	mov	r2, r0
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	1ad3      	subs	r3, r2, r3
 80066ce:	2b64      	cmp	r3, #100	; 0x64
 80066d0:	d901      	bls.n	80066d6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80066d2:	2303      	movs	r3, #3
 80066d4:	e20b      	b.n	8006aee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066d6:	4b57      	ldr	r3, [pc, #348]	; (8006834 <HAL_RCC_OscConfig+0x274>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d1f0      	bne.n	80066c4 <HAL_RCC_OscConfig+0x104>
 80066e2:	e000      	b.n	80066e6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f003 0302 	and.w	r3, r3, #2
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d06f      	beq.n	80067d2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80066f2:	4b50      	ldr	r3, [pc, #320]	; (8006834 <HAL_RCC_OscConfig+0x274>)
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	f003 030c 	and.w	r3, r3, #12
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d017      	beq.n	800672e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80066fe:	4b4d      	ldr	r3, [pc, #308]	; (8006834 <HAL_RCC_OscConfig+0x274>)
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006706:	2b08      	cmp	r3, #8
 8006708:	d105      	bne.n	8006716 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800670a:	4b4a      	ldr	r3, [pc, #296]	; (8006834 <HAL_RCC_OscConfig+0x274>)
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00b      	beq.n	800672e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006716:	4b47      	ldr	r3, [pc, #284]	; (8006834 <HAL_RCC_OscConfig+0x274>)
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800671e:	2b0c      	cmp	r3, #12
 8006720:	d11c      	bne.n	800675c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006722:	4b44      	ldr	r3, [pc, #272]	; (8006834 <HAL_RCC_OscConfig+0x274>)
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800672a:	2b00      	cmp	r3, #0
 800672c:	d116      	bne.n	800675c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800672e:	4b41      	ldr	r3, [pc, #260]	; (8006834 <HAL_RCC_OscConfig+0x274>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f003 0302 	and.w	r3, r3, #2
 8006736:	2b00      	cmp	r3, #0
 8006738:	d005      	beq.n	8006746 <HAL_RCC_OscConfig+0x186>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	2b01      	cmp	r3, #1
 8006740:	d001      	beq.n	8006746 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e1d3      	b.n	8006aee <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006746:	4b3b      	ldr	r3, [pc, #236]	; (8006834 <HAL_RCC_OscConfig+0x274>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	691b      	ldr	r3, [r3, #16]
 8006752:	00db      	lsls	r3, r3, #3
 8006754:	4937      	ldr	r1, [pc, #220]	; (8006834 <HAL_RCC_OscConfig+0x274>)
 8006756:	4313      	orrs	r3, r2
 8006758:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800675a:	e03a      	b.n	80067d2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d020      	beq.n	80067a6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006764:	4b34      	ldr	r3, [pc, #208]	; (8006838 <HAL_RCC_OscConfig+0x278>)
 8006766:	2201      	movs	r2, #1
 8006768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800676a:	f7fd f8d1 	bl	8003910 <HAL_GetTick>
 800676e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006770:	e008      	b.n	8006784 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006772:	f7fd f8cd 	bl	8003910 <HAL_GetTick>
 8006776:	4602      	mov	r2, r0
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	1ad3      	subs	r3, r2, r3
 800677c:	2b02      	cmp	r3, #2
 800677e:	d901      	bls.n	8006784 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006780:	2303      	movs	r3, #3
 8006782:	e1b4      	b.n	8006aee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006784:	4b2b      	ldr	r3, [pc, #172]	; (8006834 <HAL_RCC_OscConfig+0x274>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 0302 	and.w	r3, r3, #2
 800678c:	2b00      	cmp	r3, #0
 800678e:	d0f0      	beq.n	8006772 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006790:	4b28      	ldr	r3, [pc, #160]	; (8006834 <HAL_RCC_OscConfig+0x274>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	691b      	ldr	r3, [r3, #16]
 800679c:	00db      	lsls	r3, r3, #3
 800679e:	4925      	ldr	r1, [pc, #148]	; (8006834 <HAL_RCC_OscConfig+0x274>)
 80067a0:	4313      	orrs	r3, r2
 80067a2:	600b      	str	r3, [r1, #0]
 80067a4:	e015      	b.n	80067d2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80067a6:	4b24      	ldr	r3, [pc, #144]	; (8006838 <HAL_RCC_OscConfig+0x278>)
 80067a8:	2200      	movs	r2, #0
 80067aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067ac:	f7fd f8b0 	bl	8003910 <HAL_GetTick>
 80067b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067b2:	e008      	b.n	80067c6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80067b4:	f7fd f8ac 	bl	8003910 <HAL_GetTick>
 80067b8:	4602      	mov	r2, r0
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	1ad3      	subs	r3, r2, r3
 80067be:	2b02      	cmp	r3, #2
 80067c0:	d901      	bls.n	80067c6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80067c2:	2303      	movs	r3, #3
 80067c4:	e193      	b.n	8006aee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067c6:	4b1b      	ldr	r3, [pc, #108]	; (8006834 <HAL_RCC_OscConfig+0x274>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f003 0302 	and.w	r3, r3, #2
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d1f0      	bne.n	80067b4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 0308 	and.w	r3, r3, #8
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d036      	beq.n	800684c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	695b      	ldr	r3, [r3, #20]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d016      	beq.n	8006814 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80067e6:	4b15      	ldr	r3, [pc, #84]	; (800683c <HAL_RCC_OscConfig+0x27c>)
 80067e8:	2201      	movs	r2, #1
 80067ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067ec:	f7fd f890 	bl	8003910 <HAL_GetTick>
 80067f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067f2:	e008      	b.n	8006806 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80067f4:	f7fd f88c 	bl	8003910 <HAL_GetTick>
 80067f8:	4602      	mov	r2, r0
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	1ad3      	subs	r3, r2, r3
 80067fe:	2b02      	cmp	r3, #2
 8006800:	d901      	bls.n	8006806 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006802:	2303      	movs	r3, #3
 8006804:	e173      	b.n	8006aee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006806:	4b0b      	ldr	r3, [pc, #44]	; (8006834 <HAL_RCC_OscConfig+0x274>)
 8006808:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800680a:	f003 0302 	and.w	r3, r3, #2
 800680e:	2b00      	cmp	r3, #0
 8006810:	d0f0      	beq.n	80067f4 <HAL_RCC_OscConfig+0x234>
 8006812:	e01b      	b.n	800684c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006814:	4b09      	ldr	r3, [pc, #36]	; (800683c <HAL_RCC_OscConfig+0x27c>)
 8006816:	2200      	movs	r2, #0
 8006818:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800681a:	f7fd f879 	bl	8003910 <HAL_GetTick>
 800681e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006820:	e00e      	b.n	8006840 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006822:	f7fd f875 	bl	8003910 <HAL_GetTick>
 8006826:	4602      	mov	r2, r0
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	1ad3      	subs	r3, r2, r3
 800682c:	2b02      	cmp	r3, #2
 800682e:	d907      	bls.n	8006840 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006830:	2303      	movs	r3, #3
 8006832:	e15c      	b.n	8006aee <HAL_RCC_OscConfig+0x52e>
 8006834:	40023800 	.word	0x40023800
 8006838:	42470000 	.word	0x42470000
 800683c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006840:	4b8a      	ldr	r3, [pc, #552]	; (8006a6c <HAL_RCC_OscConfig+0x4ac>)
 8006842:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006844:	f003 0302 	and.w	r3, r3, #2
 8006848:	2b00      	cmp	r3, #0
 800684a:	d1ea      	bne.n	8006822 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f003 0304 	and.w	r3, r3, #4
 8006854:	2b00      	cmp	r3, #0
 8006856:	f000 8097 	beq.w	8006988 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800685a:	2300      	movs	r3, #0
 800685c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800685e:	4b83      	ldr	r3, [pc, #524]	; (8006a6c <HAL_RCC_OscConfig+0x4ac>)
 8006860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006866:	2b00      	cmp	r3, #0
 8006868:	d10f      	bne.n	800688a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800686a:	2300      	movs	r3, #0
 800686c:	60bb      	str	r3, [r7, #8]
 800686e:	4b7f      	ldr	r3, [pc, #508]	; (8006a6c <HAL_RCC_OscConfig+0x4ac>)
 8006870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006872:	4a7e      	ldr	r2, [pc, #504]	; (8006a6c <HAL_RCC_OscConfig+0x4ac>)
 8006874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006878:	6413      	str	r3, [r2, #64]	; 0x40
 800687a:	4b7c      	ldr	r3, [pc, #496]	; (8006a6c <HAL_RCC_OscConfig+0x4ac>)
 800687c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800687e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006882:	60bb      	str	r3, [r7, #8]
 8006884:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006886:	2301      	movs	r3, #1
 8006888:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800688a:	4b79      	ldr	r3, [pc, #484]	; (8006a70 <HAL_RCC_OscConfig+0x4b0>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006892:	2b00      	cmp	r3, #0
 8006894:	d118      	bne.n	80068c8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006896:	4b76      	ldr	r3, [pc, #472]	; (8006a70 <HAL_RCC_OscConfig+0x4b0>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a75      	ldr	r2, [pc, #468]	; (8006a70 <HAL_RCC_OscConfig+0x4b0>)
 800689c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80068a2:	f7fd f835 	bl	8003910 <HAL_GetTick>
 80068a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068a8:	e008      	b.n	80068bc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068aa:	f7fd f831 	bl	8003910 <HAL_GetTick>
 80068ae:	4602      	mov	r2, r0
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	1ad3      	subs	r3, r2, r3
 80068b4:	2b02      	cmp	r3, #2
 80068b6:	d901      	bls.n	80068bc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80068b8:	2303      	movs	r3, #3
 80068ba:	e118      	b.n	8006aee <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068bc:	4b6c      	ldr	r3, [pc, #432]	; (8006a70 <HAL_RCC_OscConfig+0x4b0>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d0f0      	beq.n	80068aa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d106      	bne.n	80068de <HAL_RCC_OscConfig+0x31e>
 80068d0:	4b66      	ldr	r3, [pc, #408]	; (8006a6c <HAL_RCC_OscConfig+0x4ac>)
 80068d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068d4:	4a65      	ldr	r2, [pc, #404]	; (8006a6c <HAL_RCC_OscConfig+0x4ac>)
 80068d6:	f043 0301 	orr.w	r3, r3, #1
 80068da:	6713      	str	r3, [r2, #112]	; 0x70
 80068dc:	e01c      	b.n	8006918 <HAL_RCC_OscConfig+0x358>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	2b05      	cmp	r3, #5
 80068e4:	d10c      	bne.n	8006900 <HAL_RCC_OscConfig+0x340>
 80068e6:	4b61      	ldr	r3, [pc, #388]	; (8006a6c <HAL_RCC_OscConfig+0x4ac>)
 80068e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ea:	4a60      	ldr	r2, [pc, #384]	; (8006a6c <HAL_RCC_OscConfig+0x4ac>)
 80068ec:	f043 0304 	orr.w	r3, r3, #4
 80068f0:	6713      	str	r3, [r2, #112]	; 0x70
 80068f2:	4b5e      	ldr	r3, [pc, #376]	; (8006a6c <HAL_RCC_OscConfig+0x4ac>)
 80068f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068f6:	4a5d      	ldr	r2, [pc, #372]	; (8006a6c <HAL_RCC_OscConfig+0x4ac>)
 80068f8:	f043 0301 	orr.w	r3, r3, #1
 80068fc:	6713      	str	r3, [r2, #112]	; 0x70
 80068fe:	e00b      	b.n	8006918 <HAL_RCC_OscConfig+0x358>
 8006900:	4b5a      	ldr	r3, [pc, #360]	; (8006a6c <HAL_RCC_OscConfig+0x4ac>)
 8006902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006904:	4a59      	ldr	r2, [pc, #356]	; (8006a6c <HAL_RCC_OscConfig+0x4ac>)
 8006906:	f023 0301 	bic.w	r3, r3, #1
 800690a:	6713      	str	r3, [r2, #112]	; 0x70
 800690c:	4b57      	ldr	r3, [pc, #348]	; (8006a6c <HAL_RCC_OscConfig+0x4ac>)
 800690e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006910:	4a56      	ldr	r2, [pc, #344]	; (8006a6c <HAL_RCC_OscConfig+0x4ac>)
 8006912:	f023 0304 	bic.w	r3, r3, #4
 8006916:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d015      	beq.n	800694c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006920:	f7fc fff6 	bl	8003910 <HAL_GetTick>
 8006924:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006926:	e00a      	b.n	800693e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006928:	f7fc fff2 	bl	8003910 <HAL_GetTick>
 800692c:	4602      	mov	r2, r0
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	1ad3      	subs	r3, r2, r3
 8006932:	f241 3288 	movw	r2, #5000	; 0x1388
 8006936:	4293      	cmp	r3, r2
 8006938:	d901      	bls.n	800693e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800693a:	2303      	movs	r3, #3
 800693c:	e0d7      	b.n	8006aee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800693e:	4b4b      	ldr	r3, [pc, #300]	; (8006a6c <HAL_RCC_OscConfig+0x4ac>)
 8006940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006942:	f003 0302 	and.w	r3, r3, #2
 8006946:	2b00      	cmp	r3, #0
 8006948:	d0ee      	beq.n	8006928 <HAL_RCC_OscConfig+0x368>
 800694a:	e014      	b.n	8006976 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800694c:	f7fc ffe0 	bl	8003910 <HAL_GetTick>
 8006950:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006952:	e00a      	b.n	800696a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006954:	f7fc ffdc 	bl	8003910 <HAL_GetTick>
 8006958:	4602      	mov	r2, r0
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006962:	4293      	cmp	r3, r2
 8006964:	d901      	bls.n	800696a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006966:	2303      	movs	r3, #3
 8006968:	e0c1      	b.n	8006aee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800696a:	4b40      	ldr	r3, [pc, #256]	; (8006a6c <HAL_RCC_OscConfig+0x4ac>)
 800696c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800696e:	f003 0302 	and.w	r3, r3, #2
 8006972:	2b00      	cmp	r3, #0
 8006974:	d1ee      	bne.n	8006954 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006976:	7dfb      	ldrb	r3, [r7, #23]
 8006978:	2b01      	cmp	r3, #1
 800697a:	d105      	bne.n	8006988 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800697c:	4b3b      	ldr	r3, [pc, #236]	; (8006a6c <HAL_RCC_OscConfig+0x4ac>)
 800697e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006980:	4a3a      	ldr	r2, [pc, #232]	; (8006a6c <HAL_RCC_OscConfig+0x4ac>)
 8006982:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006986:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	699b      	ldr	r3, [r3, #24]
 800698c:	2b00      	cmp	r3, #0
 800698e:	f000 80ad 	beq.w	8006aec <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006992:	4b36      	ldr	r3, [pc, #216]	; (8006a6c <HAL_RCC_OscConfig+0x4ac>)
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	f003 030c 	and.w	r3, r3, #12
 800699a:	2b08      	cmp	r3, #8
 800699c:	d060      	beq.n	8006a60 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	699b      	ldr	r3, [r3, #24]
 80069a2:	2b02      	cmp	r3, #2
 80069a4:	d145      	bne.n	8006a32 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069a6:	4b33      	ldr	r3, [pc, #204]	; (8006a74 <HAL_RCC_OscConfig+0x4b4>)
 80069a8:	2200      	movs	r2, #0
 80069aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069ac:	f7fc ffb0 	bl	8003910 <HAL_GetTick>
 80069b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069b2:	e008      	b.n	80069c6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069b4:	f7fc ffac 	bl	8003910 <HAL_GetTick>
 80069b8:	4602      	mov	r2, r0
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	1ad3      	subs	r3, r2, r3
 80069be:	2b02      	cmp	r3, #2
 80069c0:	d901      	bls.n	80069c6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80069c2:	2303      	movs	r3, #3
 80069c4:	e093      	b.n	8006aee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069c6:	4b29      	ldr	r3, [pc, #164]	; (8006a6c <HAL_RCC_OscConfig+0x4ac>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d1f0      	bne.n	80069b4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	69da      	ldr	r2, [r3, #28]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6a1b      	ldr	r3, [r3, #32]
 80069da:	431a      	orrs	r2, r3
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e0:	019b      	lsls	r3, r3, #6
 80069e2:	431a      	orrs	r2, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069e8:	085b      	lsrs	r3, r3, #1
 80069ea:	3b01      	subs	r3, #1
 80069ec:	041b      	lsls	r3, r3, #16
 80069ee:	431a      	orrs	r2, r3
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f4:	061b      	lsls	r3, r3, #24
 80069f6:	431a      	orrs	r2, r3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069fc:	071b      	lsls	r3, r3, #28
 80069fe:	491b      	ldr	r1, [pc, #108]	; (8006a6c <HAL_RCC_OscConfig+0x4ac>)
 8006a00:	4313      	orrs	r3, r2
 8006a02:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a04:	4b1b      	ldr	r3, [pc, #108]	; (8006a74 <HAL_RCC_OscConfig+0x4b4>)
 8006a06:	2201      	movs	r2, #1
 8006a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a0a:	f7fc ff81 	bl	8003910 <HAL_GetTick>
 8006a0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a10:	e008      	b.n	8006a24 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a12:	f7fc ff7d 	bl	8003910 <HAL_GetTick>
 8006a16:	4602      	mov	r2, r0
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	1ad3      	subs	r3, r2, r3
 8006a1c:	2b02      	cmp	r3, #2
 8006a1e:	d901      	bls.n	8006a24 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006a20:	2303      	movs	r3, #3
 8006a22:	e064      	b.n	8006aee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a24:	4b11      	ldr	r3, [pc, #68]	; (8006a6c <HAL_RCC_OscConfig+0x4ac>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d0f0      	beq.n	8006a12 <HAL_RCC_OscConfig+0x452>
 8006a30:	e05c      	b.n	8006aec <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a32:	4b10      	ldr	r3, [pc, #64]	; (8006a74 <HAL_RCC_OscConfig+0x4b4>)
 8006a34:	2200      	movs	r2, #0
 8006a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a38:	f7fc ff6a 	bl	8003910 <HAL_GetTick>
 8006a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a3e:	e008      	b.n	8006a52 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a40:	f7fc ff66 	bl	8003910 <HAL_GetTick>
 8006a44:	4602      	mov	r2, r0
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	2b02      	cmp	r3, #2
 8006a4c:	d901      	bls.n	8006a52 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	e04d      	b.n	8006aee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a52:	4b06      	ldr	r3, [pc, #24]	; (8006a6c <HAL_RCC_OscConfig+0x4ac>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1f0      	bne.n	8006a40 <HAL_RCC_OscConfig+0x480>
 8006a5e:	e045      	b.n	8006aec <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	699b      	ldr	r3, [r3, #24]
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d107      	bne.n	8006a78 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e040      	b.n	8006aee <HAL_RCC_OscConfig+0x52e>
 8006a6c:	40023800 	.word	0x40023800
 8006a70:	40007000 	.word	0x40007000
 8006a74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006a78:	4b1f      	ldr	r3, [pc, #124]	; (8006af8 <HAL_RCC_OscConfig+0x538>)
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	699b      	ldr	r3, [r3, #24]
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d030      	beq.n	8006ae8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d129      	bne.n	8006ae8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d122      	bne.n	8006ae8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006aa2:	68fa      	ldr	r2, [r7, #12]
 8006aa4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006aa8:	4013      	ands	r3, r2
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006aae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d119      	bne.n	8006ae8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006abe:	085b      	lsrs	r3, r3, #1
 8006ac0:	3b01      	subs	r3, #1
 8006ac2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d10f      	bne.n	8006ae8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d107      	bne.n	8006ae8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d001      	beq.n	8006aec <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e000      	b.n	8006aee <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006aec:	2300      	movs	r3, #0
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3718      	adds	r7, #24
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
 8006af6:	bf00      	nop
 8006af8:	40023800 	.word	0x40023800

08006afc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b082      	sub	sp, #8
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d101      	bne.n	8006b0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	e041      	b.n	8006b92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d106      	bne.n	8006b28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f7fc fb0e 	bl	8003144 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2202      	movs	r2, #2
 8006b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	3304      	adds	r3, #4
 8006b38:	4619      	mov	r1, r3
 8006b3a:	4610      	mov	r0, r2
 8006b3c:	f000 fbaa 	bl	8007294 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2201      	movs	r2, #1
 8006b54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2201      	movs	r2, #1
 8006b84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b90:	2300      	movs	r3, #0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3708      	adds	r7, #8
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
	...

08006b9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b085      	sub	sp, #20
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d001      	beq.n	8006bb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	e04e      	b.n	8006c52 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2202      	movs	r2, #2
 8006bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	68da      	ldr	r2, [r3, #12]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f042 0201 	orr.w	r2, r2, #1
 8006bca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a23      	ldr	r2, [pc, #140]	; (8006c60 <HAL_TIM_Base_Start_IT+0xc4>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d022      	beq.n	8006c1c <HAL_TIM_Base_Start_IT+0x80>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bde:	d01d      	beq.n	8006c1c <HAL_TIM_Base_Start_IT+0x80>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a1f      	ldr	r2, [pc, #124]	; (8006c64 <HAL_TIM_Base_Start_IT+0xc8>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d018      	beq.n	8006c1c <HAL_TIM_Base_Start_IT+0x80>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a1e      	ldr	r2, [pc, #120]	; (8006c68 <HAL_TIM_Base_Start_IT+0xcc>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d013      	beq.n	8006c1c <HAL_TIM_Base_Start_IT+0x80>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a1c      	ldr	r2, [pc, #112]	; (8006c6c <HAL_TIM_Base_Start_IT+0xd0>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d00e      	beq.n	8006c1c <HAL_TIM_Base_Start_IT+0x80>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a1b      	ldr	r2, [pc, #108]	; (8006c70 <HAL_TIM_Base_Start_IT+0xd4>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d009      	beq.n	8006c1c <HAL_TIM_Base_Start_IT+0x80>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a19      	ldr	r2, [pc, #100]	; (8006c74 <HAL_TIM_Base_Start_IT+0xd8>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d004      	beq.n	8006c1c <HAL_TIM_Base_Start_IT+0x80>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a18      	ldr	r2, [pc, #96]	; (8006c78 <HAL_TIM_Base_Start_IT+0xdc>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d111      	bne.n	8006c40 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	f003 0307 	and.w	r3, r3, #7
 8006c26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2b06      	cmp	r3, #6
 8006c2c:	d010      	beq.n	8006c50 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f042 0201 	orr.w	r2, r2, #1
 8006c3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c3e:	e007      	b.n	8006c50 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f042 0201 	orr.w	r2, r2, #1
 8006c4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3714      	adds	r7, #20
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop
 8006c60:	40010000 	.word	0x40010000
 8006c64:	40000400 	.word	0x40000400
 8006c68:	40000800 	.word	0x40000800
 8006c6c:	40000c00 	.word	0x40000c00
 8006c70:	40010400 	.word	0x40010400
 8006c74:	40014000 	.word	0x40014000
 8006c78:	40001800 	.word	0x40001800

08006c7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b082      	sub	sp, #8
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d101      	bne.n	8006c8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e041      	b.n	8006d12 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d106      	bne.n	8006ca8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f000 f839 	bl	8006d1a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2202      	movs	r2, #2
 8006cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	3304      	adds	r3, #4
 8006cb8:	4619      	mov	r1, r3
 8006cba:	4610      	mov	r0, r2
 8006cbc:	f000 faea 	bl	8007294 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d10:	2300      	movs	r3, #0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3708      	adds	r7, #8
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}

08006d1a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006d1a:	b480      	push	{r7}
 8006d1c:	b083      	sub	sp, #12
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006d22:	bf00      	nop
 8006d24:	370c      	adds	r7, #12
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr

08006d2e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d2e:	b580      	push	{r7, lr}
 8006d30:	b082      	sub	sp, #8
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	691b      	ldr	r3, [r3, #16]
 8006d3c:	f003 0302 	and.w	r3, r3, #2
 8006d40:	2b02      	cmp	r3, #2
 8006d42:	d122      	bne.n	8006d8a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	68db      	ldr	r3, [r3, #12]
 8006d4a:	f003 0302 	and.w	r3, r3, #2
 8006d4e:	2b02      	cmp	r3, #2
 8006d50:	d11b      	bne.n	8006d8a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f06f 0202 	mvn.w	r2, #2
 8006d5a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	699b      	ldr	r3, [r3, #24]
 8006d68:	f003 0303 	and.w	r3, r3, #3
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d003      	beq.n	8006d78 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 fa71 	bl	8007258 <HAL_TIM_IC_CaptureCallback>
 8006d76:	e005      	b.n	8006d84 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 fa63 	bl	8007244 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 fa74 	bl	800726c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	691b      	ldr	r3, [r3, #16]
 8006d90:	f003 0304 	and.w	r3, r3, #4
 8006d94:	2b04      	cmp	r3, #4
 8006d96:	d122      	bne.n	8006dde <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	68db      	ldr	r3, [r3, #12]
 8006d9e:	f003 0304 	and.w	r3, r3, #4
 8006da2:	2b04      	cmp	r3, #4
 8006da4:	d11b      	bne.n	8006dde <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f06f 0204 	mvn.w	r2, #4
 8006dae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2202      	movs	r2, #2
 8006db4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	699b      	ldr	r3, [r3, #24]
 8006dbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d003      	beq.n	8006dcc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 fa47 	bl	8007258 <HAL_TIM_IC_CaptureCallback>
 8006dca:	e005      	b.n	8006dd8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 fa39 	bl	8007244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 fa4a 	bl	800726c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	691b      	ldr	r3, [r3, #16]
 8006de4:	f003 0308 	and.w	r3, r3, #8
 8006de8:	2b08      	cmp	r3, #8
 8006dea:	d122      	bne.n	8006e32 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	f003 0308 	and.w	r3, r3, #8
 8006df6:	2b08      	cmp	r3, #8
 8006df8:	d11b      	bne.n	8006e32 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f06f 0208 	mvn.w	r2, #8
 8006e02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2204      	movs	r2, #4
 8006e08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	69db      	ldr	r3, [r3, #28]
 8006e10:	f003 0303 	and.w	r3, r3, #3
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d003      	beq.n	8006e20 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 fa1d 	bl	8007258 <HAL_TIM_IC_CaptureCallback>
 8006e1e:	e005      	b.n	8006e2c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 fa0f 	bl	8007244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 fa20 	bl	800726c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	691b      	ldr	r3, [r3, #16]
 8006e38:	f003 0310 	and.w	r3, r3, #16
 8006e3c:	2b10      	cmp	r3, #16
 8006e3e:	d122      	bne.n	8006e86 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	68db      	ldr	r3, [r3, #12]
 8006e46:	f003 0310 	and.w	r3, r3, #16
 8006e4a:	2b10      	cmp	r3, #16
 8006e4c:	d11b      	bne.n	8006e86 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f06f 0210 	mvn.w	r2, #16
 8006e56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2208      	movs	r2, #8
 8006e5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	69db      	ldr	r3, [r3, #28]
 8006e64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d003      	beq.n	8006e74 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f000 f9f3 	bl	8007258 <HAL_TIM_IC_CaptureCallback>
 8006e72:	e005      	b.n	8006e80 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 f9e5 	bl	8007244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 f9f6 	bl	800726c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2200      	movs	r2, #0
 8006e84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	691b      	ldr	r3, [r3, #16]
 8006e8c:	f003 0301 	and.w	r3, r3, #1
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d10e      	bne.n	8006eb2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	68db      	ldr	r3, [r3, #12]
 8006e9a:	f003 0301 	and.w	r3, r3, #1
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d107      	bne.n	8006eb2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f06f 0201 	mvn.w	r2, #1
 8006eaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f7fb fdaf 	bl	8002a10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	691b      	ldr	r3, [r3, #16]
 8006eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ebc:	2b80      	cmp	r3, #128	; 0x80
 8006ebe:	d10e      	bne.n	8006ede <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	68db      	ldr	r3, [r3, #12]
 8006ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eca:	2b80      	cmp	r3, #128	; 0x80
 8006ecc:	d107      	bne.n	8006ede <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006ed6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f000 fe57 	bl	8007b8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	691b      	ldr	r3, [r3, #16]
 8006ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ee8:	2b40      	cmp	r3, #64	; 0x40
 8006eea:	d10e      	bne.n	8006f0a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	68db      	ldr	r3, [r3, #12]
 8006ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ef6:	2b40      	cmp	r3, #64	; 0x40
 8006ef8:	d107      	bne.n	8006f0a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 f9bb 	bl	8007280 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	691b      	ldr	r3, [r3, #16]
 8006f10:	f003 0320 	and.w	r3, r3, #32
 8006f14:	2b20      	cmp	r3, #32
 8006f16:	d10e      	bne.n	8006f36 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	f003 0320 	and.w	r3, r3, #32
 8006f22:	2b20      	cmp	r3, #32
 8006f24:	d107      	bne.n	8006f36 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f06f 0220 	mvn.w	r2, #32
 8006f2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f000 fe21 	bl	8007b78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f36:	bf00      	nop
 8006f38:	3708      	adds	r7, #8
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
	...

08006f40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b084      	sub	sp, #16
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	60f8      	str	r0, [r7, #12]
 8006f48:	60b9      	str	r1, [r7, #8]
 8006f4a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d101      	bne.n	8006f5a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006f56:	2302      	movs	r3, #2
 8006f58:	e0ac      	b.n	80070b4 <HAL_TIM_PWM_ConfigChannel+0x174>
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2b0c      	cmp	r3, #12
 8006f66:	f200 809f 	bhi.w	80070a8 <HAL_TIM_PWM_ConfigChannel+0x168>
 8006f6a:	a201      	add	r2, pc, #4	; (adr r2, 8006f70 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f70:	08006fa5 	.word	0x08006fa5
 8006f74:	080070a9 	.word	0x080070a9
 8006f78:	080070a9 	.word	0x080070a9
 8006f7c:	080070a9 	.word	0x080070a9
 8006f80:	08006fe5 	.word	0x08006fe5
 8006f84:	080070a9 	.word	0x080070a9
 8006f88:	080070a9 	.word	0x080070a9
 8006f8c:	080070a9 	.word	0x080070a9
 8006f90:	08007027 	.word	0x08007027
 8006f94:	080070a9 	.word	0x080070a9
 8006f98:	080070a9 	.word	0x080070a9
 8006f9c:	080070a9 	.word	0x080070a9
 8006fa0:	08007067 	.word	0x08007067
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	68b9      	ldr	r1, [r7, #8]
 8006faa:	4618      	mov	r0, r3
 8006fac:	f000 fa12 	bl	80073d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	699a      	ldr	r2, [r3, #24]
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f042 0208 	orr.w	r2, r2, #8
 8006fbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	699a      	ldr	r2, [r3, #24]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f022 0204 	bic.w	r2, r2, #4
 8006fce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	6999      	ldr	r1, [r3, #24]
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	691a      	ldr	r2, [r3, #16]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	430a      	orrs	r2, r1
 8006fe0:	619a      	str	r2, [r3, #24]
      break;
 8006fe2:	e062      	b.n	80070aa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	68b9      	ldr	r1, [r7, #8]
 8006fea:	4618      	mov	r0, r3
 8006fec:	f000 fa62 	bl	80074b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	699a      	ldr	r2, [r3, #24]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ffe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	699a      	ldr	r2, [r3, #24]
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800700e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	6999      	ldr	r1, [r3, #24]
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	691b      	ldr	r3, [r3, #16]
 800701a:	021a      	lsls	r2, r3, #8
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	430a      	orrs	r2, r1
 8007022:	619a      	str	r2, [r3, #24]
      break;
 8007024:	e041      	b.n	80070aa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	68b9      	ldr	r1, [r7, #8]
 800702c:	4618      	mov	r0, r3
 800702e:	f000 fab7 	bl	80075a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	69da      	ldr	r2, [r3, #28]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f042 0208 	orr.w	r2, r2, #8
 8007040:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	69da      	ldr	r2, [r3, #28]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f022 0204 	bic.w	r2, r2, #4
 8007050:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	69d9      	ldr	r1, [r3, #28]
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	691a      	ldr	r2, [r3, #16]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	430a      	orrs	r2, r1
 8007062:	61da      	str	r2, [r3, #28]
      break;
 8007064:	e021      	b.n	80070aa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	68b9      	ldr	r1, [r7, #8]
 800706c:	4618      	mov	r0, r3
 800706e:	f000 fb0b 	bl	8007688 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	69da      	ldr	r2, [r3, #28]
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007080:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	69da      	ldr	r2, [r3, #28]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007090:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	69d9      	ldr	r1, [r3, #28]
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	691b      	ldr	r3, [r3, #16]
 800709c:	021a      	lsls	r2, r3, #8
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	430a      	orrs	r2, r1
 80070a4:	61da      	str	r2, [r3, #28]
      break;
 80070a6:	e000      	b.n	80070aa <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80070a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2200      	movs	r2, #0
 80070ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070b2:	2300      	movs	r3, #0
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3710      	adds	r7, #16
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b084      	sub	sp, #16
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d101      	bne.n	80070d4 <HAL_TIM_ConfigClockSource+0x18>
 80070d0:	2302      	movs	r3, #2
 80070d2:	e0b3      	b.n	800723c <HAL_TIM_ConfigClockSource+0x180>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2202      	movs	r2, #2
 80070e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80070f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80070fa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	68fa      	ldr	r2, [r7, #12]
 8007102:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800710c:	d03e      	beq.n	800718c <HAL_TIM_ConfigClockSource+0xd0>
 800710e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007112:	f200 8087 	bhi.w	8007224 <HAL_TIM_ConfigClockSource+0x168>
 8007116:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800711a:	f000 8085 	beq.w	8007228 <HAL_TIM_ConfigClockSource+0x16c>
 800711e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007122:	d87f      	bhi.n	8007224 <HAL_TIM_ConfigClockSource+0x168>
 8007124:	2b70      	cmp	r3, #112	; 0x70
 8007126:	d01a      	beq.n	800715e <HAL_TIM_ConfigClockSource+0xa2>
 8007128:	2b70      	cmp	r3, #112	; 0x70
 800712a:	d87b      	bhi.n	8007224 <HAL_TIM_ConfigClockSource+0x168>
 800712c:	2b60      	cmp	r3, #96	; 0x60
 800712e:	d050      	beq.n	80071d2 <HAL_TIM_ConfigClockSource+0x116>
 8007130:	2b60      	cmp	r3, #96	; 0x60
 8007132:	d877      	bhi.n	8007224 <HAL_TIM_ConfigClockSource+0x168>
 8007134:	2b50      	cmp	r3, #80	; 0x50
 8007136:	d03c      	beq.n	80071b2 <HAL_TIM_ConfigClockSource+0xf6>
 8007138:	2b50      	cmp	r3, #80	; 0x50
 800713a:	d873      	bhi.n	8007224 <HAL_TIM_ConfigClockSource+0x168>
 800713c:	2b40      	cmp	r3, #64	; 0x40
 800713e:	d058      	beq.n	80071f2 <HAL_TIM_ConfigClockSource+0x136>
 8007140:	2b40      	cmp	r3, #64	; 0x40
 8007142:	d86f      	bhi.n	8007224 <HAL_TIM_ConfigClockSource+0x168>
 8007144:	2b30      	cmp	r3, #48	; 0x30
 8007146:	d064      	beq.n	8007212 <HAL_TIM_ConfigClockSource+0x156>
 8007148:	2b30      	cmp	r3, #48	; 0x30
 800714a:	d86b      	bhi.n	8007224 <HAL_TIM_ConfigClockSource+0x168>
 800714c:	2b20      	cmp	r3, #32
 800714e:	d060      	beq.n	8007212 <HAL_TIM_ConfigClockSource+0x156>
 8007150:	2b20      	cmp	r3, #32
 8007152:	d867      	bhi.n	8007224 <HAL_TIM_ConfigClockSource+0x168>
 8007154:	2b00      	cmp	r3, #0
 8007156:	d05c      	beq.n	8007212 <HAL_TIM_ConfigClockSource+0x156>
 8007158:	2b10      	cmp	r3, #16
 800715a:	d05a      	beq.n	8007212 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800715c:	e062      	b.n	8007224 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6818      	ldr	r0, [r3, #0]
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	6899      	ldr	r1, [r3, #8]
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	685a      	ldr	r2, [r3, #4]
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	68db      	ldr	r3, [r3, #12]
 800716e:	f000 fb5b 	bl	8007828 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007180:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	68fa      	ldr	r2, [r7, #12]
 8007188:	609a      	str	r2, [r3, #8]
      break;
 800718a:	e04e      	b.n	800722a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6818      	ldr	r0, [r3, #0]
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	6899      	ldr	r1, [r3, #8]
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	685a      	ldr	r2, [r3, #4]
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	f000 fb44 	bl	8007828 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	689a      	ldr	r2, [r3, #8]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80071ae:	609a      	str	r2, [r3, #8]
      break;
 80071b0:	e03b      	b.n	800722a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6818      	ldr	r0, [r3, #0]
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	6859      	ldr	r1, [r3, #4]
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	68db      	ldr	r3, [r3, #12]
 80071be:	461a      	mov	r2, r3
 80071c0:	f000 fab8 	bl	8007734 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	2150      	movs	r1, #80	; 0x50
 80071ca:	4618      	mov	r0, r3
 80071cc:	f000 fb11 	bl	80077f2 <TIM_ITRx_SetConfig>
      break;
 80071d0:	e02b      	b.n	800722a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6818      	ldr	r0, [r3, #0]
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	6859      	ldr	r1, [r3, #4]
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	68db      	ldr	r3, [r3, #12]
 80071de:	461a      	mov	r2, r3
 80071e0:	f000 fad7 	bl	8007792 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	2160      	movs	r1, #96	; 0x60
 80071ea:	4618      	mov	r0, r3
 80071ec:	f000 fb01 	bl	80077f2 <TIM_ITRx_SetConfig>
      break;
 80071f0:	e01b      	b.n	800722a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6818      	ldr	r0, [r3, #0]
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	6859      	ldr	r1, [r3, #4]
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	68db      	ldr	r3, [r3, #12]
 80071fe:	461a      	mov	r2, r3
 8007200:	f000 fa98 	bl	8007734 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	2140      	movs	r1, #64	; 0x40
 800720a:	4618      	mov	r0, r3
 800720c:	f000 faf1 	bl	80077f2 <TIM_ITRx_SetConfig>
      break;
 8007210:	e00b      	b.n	800722a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4619      	mov	r1, r3
 800721c:	4610      	mov	r0, r2
 800721e:	f000 fae8 	bl	80077f2 <TIM_ITRx_SetConfig>
        break;
 8007222:	e002      	b.n	800722a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007224:	bf00      	nop
 8007226:	e000      	b.n	800722a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007228:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2201      	movs	r2, #1
 800722e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2200      	movs	r2, #0
 8007236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800723a:	2300      	movs	r3, #0
}
 800723c:	4618      	mov	r0, r3
 800723e:	3710      	adds	r7, #16
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007244:	b480      	push	{r7}
 8007246:	b083      	sub	sp, #12
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800724c:	bf00      	nop
 800724e:	370c      	adds	r7, #12
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007258:	b480      	push	{r7}
 800725a:	b083      	sub	sp, #12
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007260:	bf00      	nop
 8007262:	370c      	adds	r7, #12
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr

0800726c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800726c:	b480      	push	{r7}
 800726e:	b083      	sub	sp, #12
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007274:	bf00      	nop
 8007276:	370c      	adds	r7, #12
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr

08007280 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007280:	b480      	push	{r7}
 8007282:	b083      	sub	sp, #12
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007288:	bf00      	nop
 800728a:	370c      	adds	r7, #12
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr

08007294 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007294:	b480      	push	{r7}
 8007296:	b085      	sub	sp, #20
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	4a40      	ldr	r2, [pc, #256]	; (80073a8 <TIM_Base_SetConfig+0x114>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d013      	beq.n	80072d4 <TIM_Base_SetConfig+0x40>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072b2:	d00f      	beq.n	80072d4 <TIM_Base_SetConfig+0x40>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	4a3d      	ldr	r2, [pc, #244]	; (80073ac <TIM_Base_SetConfig+0x118>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d00b      	beq.n	80072d4 <TIM_Base_SetConfig+0x40>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	4a3c      	ldr	r2, [pc, #240]	; (80073b0 <TIM_Base_SetConfig+0x11c>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d007      	beq.n	80072d4 <TIM_Base_SetConfig+0x40>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	4a3b      	ldr	r2, [pc, #236]	; (80073b4 <TIM_Base_SetConfig+0x120>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d003      	beq.n	80072d4 <TIM_Base_SetConfig+0x40>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	4a3a      	ldr	r2, [pc, #232]	; (80073b8 <TIM_Base_SetConfig+0x124>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d108      	bne.n	80072e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	68fa      	ldr	r2, [r7, #12]
 80072e2:	4313      	orrs	r3, r2
 80072e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	4a2f      	ldr	r2, [pc, #188]	; (80073a8 <TIM_Base_SetConfig+0x114>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d02b      	beq.n	8007346 <TIM_Base_SetConfig+0xb2>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072f4:	d027      	beq.n	8007346 <TIM_Base_SetConfig+0xb2>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	4a2c      	ldr	r2, [pc, #176]	; (80073ac <TIM_Base_SetConfig+0x118>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d023      	beq.n	8007346 <TIM_Base_SetConfig+0xb2>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	4a2b      	ldr	r2, [pc, #172]	; (80073b0 <TIM_Base_SetConfig+0x11c>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d01f      	beq.n	8007346 <TIM_Base_SetConfig+0xb2>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	4a2a      	ldr	r2, [pc, #168]	; (80073b4 <TIM_Base_SetConfig+0x120>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d01b      	beq.n	8007346 <TIM_Base_SetConfig+0xb2>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	4a29      	ldr	r2, [pc, #164]	; (80073b8 <TIM_Base_SetConfig+0x124>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d017      	beq.n	8007346 <TIM_Base_SetConfig+0xb2>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	4a28      	ldr	r2, [pc, #160]	; (80073bc <TIM_Base_SetConfig+0x128>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d013      	beq.n	8007346 <TIM_Base_SetConfig+0xb2>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	4a27      	ldr	r2, [pc, #156]	; (80073c0 <TIM_Base_SetConfig+0x12c>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d00f      	beq.n	8007346 <TIM_Base_SetConfig+0xb2>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	4a26      	ldr	r2, [pc, #152]	; (80073c4 <TIM_Base_SetConfig+0x130>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d00b      	beq.n	8007346 <TIM_Base_SetConfig+0xb2>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	4a25      	ldr	r2, [pc, #148]	; (80073c8 <TIM_Base_SetConfig+0x134>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d007      	beq.n	8007346 <TIM_Base_SetConfig+0xb2>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	4a24      	ldr	r2, [pc, #144]	; (80073cc <TIM_Base_SetConfig+0x138>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d003      	beq.n	8007346 <TIM_Base_SetConfig+0xb2>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	4a23      	ldr	r2, [pc, #140]	; (80073d0 <TIM_Base_SetConfig+0x13c>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d108      	bne.n	8007358 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800734c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	68db      	ldr	r3, [r3, #12]
 8007352:	68fa      	ldr	r2, [r7, #12]
 8007354:	4313      	orrs	r3, r2
 8007356:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	695b      	ldr	r3, [r3, #20]
 8007362:	4313      	orrs	r3, r2
 8007364:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	68fa      	ldr	r2, [r7, #12]
 800736a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	689a      	ldr	r2, [r3, #8]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	4a0a      	ldr	r2, [pc, #40]	; (80073a8 <TIM_Base_SetConfig+0x114>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d003      	beq.n	800738c <TIM_Base_SetConfig+0xf8>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	4a0c      	ldr	r2, [pc, #48]	; (80073b8 <TIM_Base_SetConfig+0x124>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d103      	bne.n	8007394 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	691a      	ldr	r2, [r3, #16]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2201      	movs	r2, #1
 8007398:	615a      	str	r2, [r3, #20]
}
 800739a:	bf00      	nop
 800739c:	3714      	adds	r7, #20
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr
 80073a6:	bf00      	nop
 80073a8:	40010000 	.word	0x40010000
 80073ac:	40000400 	.word	0x40000400
 80073b0:	40000800 	.word	0x40000800
 80073b4:	40000c00 	.word	0x40000c00
 80073b8:	40010400 	.word	0x40010400
 80073bc:	40014000 	.word	0x40014000
 80073c0:	40014400 	.word	0x40014400
 80073c4:	40014800 	.word	0x40014800
 80073c8:	40001800 	.word	0x40001800
 80073cc:	40001c00 	.word	0x40001c00
 80073d0:	40002000 	.word	0x40002000

080073d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b087      	sub	sp, #28
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6a1b      	ldr	r3, [r3, #32]
 80073e2:	f023 0201 	bic.w	r2, r3, #1
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6a1b      	ldr	r3, [r3, #32]
 80073ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	699b      	ldr	r3, [r3, #24]
 80073fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f023 0303 	bic.w	r3, r3, #3
 800740a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	68fa      	ldr	r2, [r7, #12]
 8007412:	4313      	orrs	r3, r2
 8007414:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	f023 0302 	bic.w	r3, r3, #2
 800741c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	689b      	ldr	r3, [r3, #8]
 8007422:	697a      	ldr	r2, [r7, #20]
 8007424:	4313      	orrs	r3, r2
 8007426:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	4a20      	ldr	r2, [pc, #128]	; (80074ac <TIM_OC1_SetConfig+0xd8>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d003      	beq.n	8007438 <TIM_OC1_SetConfig+0x64>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	4a1f      	ldr	r2, [pc, #124]	; (80074b0 <TIM_OC1_SetConfig+0xdc>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d10c      	bne.n	8007452 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	f023 0308 	bic.w	r3, r3, #8
 800743e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	68db      	ldr	r3, [r3, #12]
 8007444:	697a      	ldr	r2, [r7, #20]
 8007446:	4313      	orrs	r3, r2
 8007448:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	f023 0304 	bic.w	r3, r3, #4
 8007450:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	4a15      	ldr	r2, [pc, #84]	; (80074ac <TIM_OC1_SetConfig+0xd8>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d003      	beq.n	8007462 <TIM_OC1_SetConfig+0x8e>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	4a14      	ldr	r2, [pc, #80]	; (80074b0 <TIM_OC1_SetConfig+0xdc>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d111      	bne.n	8007486 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007468:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007470:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	695b      	ldr	r3, [r3, #20]
 8007476:	693a      	ldr	r2, [r7, #16]
 8007478:	4313      	orrs	r3, r2
 800747a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	699b      	ldr	r3, [r3, #24]
 8007480:	693a      	ldr	r2, [r7, #16]
 8007482:	4313      	orrs	r3, r2
 8007484:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	693a      	ldr	r2, [r7, #16]
 800748a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	68fa      	ldr	r2, [r7, #12]
 8007490:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	685a      	ldr	r2, [r3, #4]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	697a      	ldr	r2, [r7, #20]
 800749e:	621a      	str	r2, [r3, #32]
}
 80074a0:	bf00      	nop
 80074a2:	371c      	adds	r7, #28
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr
 80074ac:	40010000 	.word	0x40010000
 80074b0:	40010400 	.word	0x40010400

080074b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b087      	sub	sp, #28
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6a1b      	ldr	r3, [r3, #32]
 80074c2:	f023 0210 	bic.w	r2, r3, #16
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6a1b      	ldr	r3, [r3, #32]
 80074ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	699b      	ldr	r3, [r3, #24]
 80074da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	021b      	lsls	r3, r3, #8
 80074f2:	68fa      	ldr	r2, [r7, #12]
 80074f4:	4313      	orrs	r3, r2
 80074f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	f023 0320 	bic.w	r3, r3, #32
 80074fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	011b      	lsls	r3, r3, #4
 8007506:	697a      	ldr	r2, [r7, #20]
 8007508:	4313      	orrs	r3, r2
 800750a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	4a22      	ldr	r2, [pc, #136]	; (8007598 <TIM_OC2_SetConfig+0xe4>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d003      	beq.n	800751c <TIM_OC2_SetConfig+0x68>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	4a21      	ldr	r2, [pc, #132]	; (800759c <TIM_OC2_SetConfig+0xe8>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d10d      	bne.n	8007538 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007522:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	68db      	ldr	r3, [r3, #12]
 8007528:	011b      	lsls	r3, r3, #4
 800752a:	697a      	ldr	r2, [r7, #20]
 800752c:	4313      	orrs	r3, r2
 800752e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007536:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	4a17      	ldr	r2, [pc, #92]	; (8007598 <TIM_OC2_SetConfig+0xe4>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d003      	beq.n	8007548 <TIM_OC2_SetConfig+0x94>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	4a16      	ldr	r2, [pc, #88]	; (800759c <TIM_OC2_SetConfig+0xe8>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d113      	bne.n	8007570 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800754e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007556:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	695b      	ldr	r3, [r3, #20]
 800755c:	009b      	lsls	r3, r3, #2
 800755e:	693a      	ldr	r2, [r7, #16]
 8007560:	4313      	orrs	r3, r2
 8007562:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	699b      	ldr	r3, [r3, #24]
 8007568:	009b      	lsls	r3, r3, #2
 800756a:	693a      	ldr	r2, [r7, #16]
 800756c:	4313      	orrs	r3, r2
 800756e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	693a      	ldr	r2, [r7, #16]
 8007574:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	68fa      	ldr	r2, [r7, #12]
 800757a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	685a      	ldr	r2, [r3, #4]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	697a      	ldr	r2, [r7, #20]
 8007588:	621a      	str	r2, [r3, #32]
}
 800758a:	bf00      	nop
 800758c:	371c      	adds	r7, #28
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr
 8007596:	bf00      	nop
 8007598:	40010000 	.word	0x40010000
 800759c:	40010400 	.word	0x40010400

080075a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b087      	sub	sp, #28
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6a1b      	ldr	r3, [r3, #32]
 80075ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6a1b      	ldr	r3, [r3, #32]
 80075ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	69db      	ldr	r3, [r3, #28]
 80075c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f023 0303 	bic.w	r3, r3, #3
 80075d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	68fa      	ldr	r2, [r7, #12]
 80075de:	4313      	orrs	r3, r2
 80075e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80075e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	021b      	lsls	r3, r3, #8
 80075f0:	697a      	ldr	r2, [r7, #20]
 80075f2:	4313      	orrs	r3, r2
 80075f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	4a21      	ldr	r2, [pc, #132]	; (8007680 <TIM_OC3_SetConfig+0xe0>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d003      	beq.n	8007606 <TIM_OC3_SetConfig+0x66>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	4a20      	ldr	r2, [pc, #128]	; (8007684 <TIM_OC3_SetConfig+0xe4>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d10d      	bne.n	8007622 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800760c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	68db      	ldr	r3, [r3, #12]
 8007612:	021b      	lsls	r3, r3, #8
 8007614:	697a      	ldr	r2, [r7, #20]
 8007616:	4313      	orrs	r3, r2
 8007618:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007620:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	4a16      	ldr	r2, [pc, #88]	; (8007680 <TIM_OC3_SetConfig+0xe0>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d003      	beq.n	8007632 <TIM_OC3_SetConfig+0x92>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	4a15      	ldr	r2, [pc, #84]	; (8007684 <TIM_OC3_SetConfig+0xe4>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d113      	bne.n	800765a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007638:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007640:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	695b      	ldr	r3, [r3, #20]
 8007646:	011b      	lsls	r3, r3, #4
 8007648:	693a      	ldr	r2, [r7, #16]
 800764a:	4313      	orrs	r3, r2
 800764c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	699b      	ldr	r3, [r3, #24]
 8007652:	011b      	lsls	r3, r3, #4
 8007654:	693a      	ldr	r2, [r7, #16]
 8007656:	4313      	orrs	r3, r2
 8007658:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	693a      	ldr	r2, [r7, #16]
 800765e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	68fa      	ldr	r2, [r7, #12]
 8007664:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	685a      	ldr	r2, [r3, #4]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	697a      	ldr	r2, [r7, #20]
 8007672:	621a      	str	r2, [r3, #32]
}
 8007674:	bf00      	nop
 8007676:	371c      	adds	r7, #28
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr
 8007680:	40010000 	.word	0x40010000
 8007684:	40010400 	.word	0x40010400

08007688 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007688:	b480      	push	{r7}
 800768a:	b087      	sub	sp, #28
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6a1b      	ldr	r3, [r3, #32]
 8007696:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6a1b      	ldr	r3, [r3, #32]
 80076a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	69db      	ldr	r3, [r3, #28]
 80076ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	021b      	lsls	r3, r3, #8
 80076c6:	68fa      	ldr	r2, [r7, #12]
 80076c8:	4313      	orrs	r3, r2
 80076ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80076d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	031b      	lsls	r3, r3, #12
 80076da:	693a      	ldr	r2, [r7, #16]
 80076dc:	4313      	orrs	r3, r2
 80076de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4a12      	ldr	r2, [pc, #72]	; (800772c <TIM_OC4_SetConfig+0xa4>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d003      	beq.n	80076f0 <TIM_OC4_SetConfig+0x68>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	4a11      	ldr	r2, [pc, #68]	; (8007730 <TIM_OC4_SetConfig+0xa8>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d109      	bne.n	8007704 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80076f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	695b      	ldr	r3, [r3, #20]
 80076fc:	019b      	lsls	r3, r3, #6
 80076fe:	697a      	ldr	r2, [r7, #20]
 8007700:	4313      	orrs	r3, r2
 8007702:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	697a      	ldr	r2, [r7, #20]
 8007708:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	68fa      	ldr	r2, [r7, #12]
 800770e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	685a      	ldr	r2, [r3, #4]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	693a      	ldr	r2, [r7, #16]
 800771c:	621a      	str	r2, [r3, #32]
}
 800771e:	bf00      	nop
 8007720:	371c      	adds	r7, #28
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr
 800772a:	bf00      	nop
 800772c:	40010000 	.word	0x40010000
 8007730:	40010400 	.word	0x40010400

08007734 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007734:	b480      	push	{r7}
 8007736:	b087      	sub	sp, #28
 8007738:	af00      	add	r7, sp, #0
 800773a:	60f8      	str	r0, [r7, #12]
 800773c:	60b9      	str	r1, [r7, #8]
 800773e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	6a1b      	ldr	r3, [r3, #32]
 8007744:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	6a1b      	ldr	r3, [r3, #32]
 800774a:	f023 0201 	bic.w	r2, r3, #1
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	699b      	ldr	r3, [r3, #24]
 8007756:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800775e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	011b      	lsls	r3, r3, #4
 8007764:	693a      	ldr	r2, [r7, #16]
 8007766:	4313      	orrs	r3, r2
 8007768:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	f023 030a 	bic.w	r3, r3, #10
 8007770:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007772:	697a      	ldr	r2, [r7, #20]
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	4313      	orrs	r3, r2
 8007778:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	693a      	ldr	r2, [r7, #16]
 800777e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	697a      	ldr	r2, [r7, #20]
 8007784:	621a      	str	r2, [r3, #32]
}
 8007786:	bf00      	nop
 8007788:	371c      	adds	r7, #28
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr

08007792 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007792:	b480      	push	{r7}
 8007794:	b087      	sub	sp, #28
 8007796:	af00      	add	r7, sp, #0
 8007798:	60f8      	str	r0, [r7, #12]
 800779a:	60b9      	str	r1, [r7, #8]
 800779c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	6a1b      	ldr	r3, [r3, #32]
 80077a2:	f023 0210 	bic.w	r2, r3, #16
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	699b      	ldr	r3, [r3, #24]
 80077ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	6a1b      	ldr	r3, [r3, #32]
 80077b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80077bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	031b      	lsls	r3, r3, #12
 80077c2:	697a      	ldr	r2, [r7, #20]
 80077c4:	4313      	orrs	r3, r2
 80077c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80077ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	011b      	lsls	r3, r3, #4
 80077d4:	693a      	ldr	r2, [r7, #16]
 80077d6:	4313      	orrs	r3, r2
 80077d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	697a      	ldr	r2, [r7, #20]
 80077de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	693a      	ldr	r2, [r7, #16]
 80077e4:	621a      	str	r2, [r3, #32]
}
 80077e6:	bf00      	nop
 80077e8:	371c      	adds	r7, #28
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr

080077f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80077f2:	b480      	push	{r7}
 80077f4:	b085      	sub	sp, #20
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
 80077fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007808:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800780a:	683a      	ldr	r2, [r7, #0]
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	4313      	orrs	r3, r2
 8007810:	f043 0307 	orr.w	r3, r3, #7
 8007814:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	68fa      	ldr	r2, [r7, #12]
 800781a:	609a      	str	r2, [r3, #8]
}
 800781c:	bf00      	nop
 800781e:	3714      	adds	r7, #20
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr

08007828 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007828:	b480      	push	{r7}
 800782a:	b087      	sub	sp, #28
 800782c:	af00      	add	r7, sp, #0
 800782e:	60f8      	str	r0, [r7, #12]
 8007830:	60b9      	str	r1, [r7, #8]
 8007832:	607a      	str	r2, [r7, #4]
 8007834:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007842:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	021a      	lsls	r2, r3, #8
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	431a      	orrs	r2, r3
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	4313      	orrs	r3, r2
 8007850:	697a      	ldr	r2, [r7, #20]
 8007852:	4313      	orrs	r3, r2
 8007854:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	697a      	ldr	r2, [r7, #20]
 800785a:	609a      	str	r2, [r3, #8]
}
 800785c:	bf00      	nop
 800785e:	371c      	adds	r7, #28
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr

08007868 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b084      	sub	sp, #16
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d109      	bne.n	800788c <HAL_TIMEx_PWMN_Start+0x24>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800787e:	b2db      	uxtb	r3, r3
 8007880:	2b01      	cmp	r3, #1
 8007882:	bf14      	ite	ne
 8007884:	2301      	movne	r3, #1
 8007886:	2300      	moveq	r3, #0
 8007888:	b2db      	uxtb	r3, r3
 800788a:	e022      	b.n	80078d2 <HAL_TIMEx_PWMN_Start+0x6a>
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	2b04      	cmp	r3, #4
 8007890:	d109      	bne.n	80078a6 <HAL_TIMEx_PWMN_Start+0x3e>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007898:	b2db      	uxtb	r3, r3
 800789a:	2b01      	cmp	r3, #1
 800789c:	bf14      	ite	ne
 800789e:	2301      	movne	r3, #1
 80078a0:	2300      	moveq	r3, #0
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	e015      	b.n	80078d2 <HAL_TIMEx_PWMN_Start+0x6a>
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	2b08      	cmp	r3, #8
 80078aa:	d109      	bne.n	80078c0 <HAL_TIMEx_PWMN_Start+0x58>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	bf14      	ite	ne
 80078b8:	2301      	movne	r3, #1
 80078ba:	2300      	moveq	r3, #0
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	e008      	b.n	80078d2 <HAL_TIMEx_PWMN_Start+0x6a>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	bf14      	ite	ne
 80078cc:	2301      	movne	r3, #1
 80078ce:	2300      	moveq	r3, #0
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d001      	beq.n	80078da <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80078d6:	2301      	movs	r3, #1
 80078d8:	e06d      	b.n	80079b6 <HAL_TIMEx_PWMN_Start+0x14e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d104      	bne.n	80078ea <HAL_TIMEx_PWMN_Start+0x82>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2202      	movs	r2, #2
 80078e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80078e8:	e013      	b.n	8007912 <HAL_TIMEx_PWMN_Start+0xaa>
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	2b04      	cmp	r3, #4
 80078ee:	d104      	bne.n	80078fa <HAL_TIMEx_PWMN_Start+0x92>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2202      	movs	r2, #2
 80078f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80078f8:	e00b      	b.n	8007912 <HAL_TIMEx_PWMN_Start+0xaa>
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	2b08      	cmp	r3, #8
 80078fe:	d104      	bne.n	800790a <HAL_TIMEx_PWMN_Start+0xa2>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2202      	movs	r2, #2
 8007904:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007908:	e003      	b.n	8007912 <HAL_TIMEx_PWMN_Start+0xaa>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2202      	movs	r2, #2
 800790e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	2204      	movs	r2, #4
 8007918:	6839      	ldr	r1, [r7, #0]
 800791a:	4618      	mov	r0, r3
 800791c:	f000 f940 	bl	8007ba0 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800792e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a22      	ldr	r2, [pc, #136]	; (80079c0 <HAL_TIMEx_PWMN_Start+0x158>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d022      	beq.n	8007980 <HAL_TIMEx_PWMN_Start+0x118>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007942:	d01d      	beq.n	8007980 <HAL_TIMEx_PWMN_Start+0x118>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a1e      	ldr	r2, [pc, #120]	; (80079c4 <HAL_TIMEx_PWMN_Start+0x15c>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d018      	beq.n	8007980 <HAL_TIMEx_PWMN_Start+0x118>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a1d      	ldr	r2, [pc, #116]	; (80079c8 <HAL_TIMEx_PWMN_Start+0x160>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d013      	beq.n	8007980 <HAL_TIMEx_PWMN_Start+0x118>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a1b      	ldr	r2, [pc, #108]	; (80079cc <HAL_TIMEx_PWMN_Start+0x164>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d00e      	beq.n	8007980 <HAL_TIMEx_PWMN_Start+0x118>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a1a      	ldr	r2, [pc, #104]	; (80079d0 <HAL_TIMEx_PWMN_Start+0x168>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d009      	beq.n	8007980 <HAL_TIMEx_PWMN_Start+0x118>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a18      	ldr	r2, [pc, #96]	; (80079d4 <HAL_TIMEx_PWMN_Start+0x16c>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d004      	beq.n	8007980 <HAL_TIMEx_PWMN_Start+0x118>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a17      	ldr	r2, [pc, #92]	; (80079d8 <HAL_TIMEx_PWMN_Start+0x170>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d111      	bne.n	80079a4 <HAL_TIMEx_PWMN_Start+0x13c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	f003 0307 	and.w	r3, r3, #7
 800798a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2b06      	cmp	r3, #6
 8007990:	d010      	beq.n	80079b4 <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	681a      	ldr	r2, [r3, #0]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f042 0201 	orr.w	r2, r2, #1
 80079a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079a2:	e007      	b.n	80079b4 <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f042 0201 	orr.w	r2, r2, #1
 80079b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80079b4:	2300      	movs	r3, #0
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3710      	adds	r7, #16
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop
 80079c0:	40010000 	.word	0x40010000
 80079c4:	40000400 	.word	0x40000400
 80079c8:	40000800 	.word	0x40000800
 80079cc:	40000c00 	.word	0x40000c00
 80079d0:	40010400 	.word	0x40010400
 80079d4:	40014000 	.word	0x40014000
 80079d8:	40001800 	.word	0x40001800

080079dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80079dc:	b480      	push	{r7}
 80079de:	b085      	sub	sp, #20
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d101      	bne.n	80079f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80079f0:	2302      	movs	r3, #2
 80079f2:	e05a      	b.n	8007aaa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2201      	movs	r2, #1
 80079f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2202      	movs	r2, #2
 8007a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	689b      	ldr	r3, [r3, #8]
 8007a12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	68fa      	ldr	r2, [r7, #12]
 8007a22:	4313      	orrs	r3, r2
 8007a24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	68fa      	ldr	r2, [r7, #12]
 8007a2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a21      	ldr	r2, [pc, #132]	; (8007ab8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d022      	beq.n	8007a7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a40:	d01d      	beq.n	8007a7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a1d      	ldr	r2, [pc, #116]	; (8007abc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d018      	beq.n	8007a7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a1b      	ldr	r2, [pc, #108]	; (8007ac0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d013      	beq.n	8007a7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a1a      	ldr	r2, [pc, #104]	; (8007ac4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d00e      	beq.n	8007a7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a18      	ldr	r2, [pc, #96]	; (8007ac8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d009      	beq.n	8007a7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a17      	ldr	r2, [pc, #92]	; (8007acc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d004      	beq.n	8007a7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a15      	ldr	r2, [pc, #84]	; (8007ad0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d10c      	bne.n	8007a98 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	68ba      	ldr	r2, [r7, #8]
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	68ba      	ldr	r2, [r7, #8]
 8007a96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007aa8:	2300      	movs	r3, #0
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3714      	adds	r7, #20
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab4:	4770      	bx	lr
 8007ab6:	bf00      	nop
 8007ab8:	40010000 	.word	0x40010000
 8007abc:	40000400 	.word	0x40000400
 8007ac0:	40000800 	.word	0x40000800
 8007ac4:	40000c00 	.word	0x40000c00
 8007ac8:	40010400 	.word	0x40010400
 8007acc:	40014000 	.word	0x40014000
 8007ad0:	40001800 	.word	0x40001800

08007ad4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b085      	sub	sp, #20
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d101      	bne.n	8007af0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007aec:	2302      	movs	r3, #2
 8007aee:	e03d      	b.n	8007b6c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2201      	movs	r2, #1
 8007af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	68db      	ldr	r3, [r3, #12]
 8007b02:	4313      	orrs	r3, r2
 8007b04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	4313      	orrs	r3, r2
 8007b12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	691b      	ldr	r3, [r3, #16]
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	695b      	ldr	r3, [r3, #20]
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	69db      	ldr	r3, [r3, #28]
 8007b56:	4313      	orrs	r3, r2
 8007b58:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	68fa      	ldr	r2, [r7, #12]
 8007b60:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b6a:	2300      	movs	r3, #0
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3714      	adds	r7, #20
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr

08007b78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b083      	sub	sp, #12
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b80:	bf00      	nop
 8007b82:	370c      	adds	r7, #12
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr

08007b8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b083      	sub	sp, #12
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b94:	bf00      	nop
 8007b96:	370c      	adds	r7, #12
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr

08007ba0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b087      	sub	sp, #28
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	60f8      	str	r0, [r7, #12]
 8007ba8:	60b9      	str	r1, [r7, #8]
 8007baa:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	f003 031f 	and.w	r3, r3, #31
 8007bb2:	2204      	movs	r2, #4
 8007bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8007bb8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	6a1a      	ldr	r2, [r3, #32]
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	43db      	mvns	r3, r3
 8007bc2:	401a      	ands	r2, r3
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	6a1a      	ldr	r2, [r3, #32]
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	f003 031f 	and.w	r3, r3, #31
 8007bd2:	6879      	ldr	r1, [r7, #4]
 8007bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8007bd8:	431a      	orrs	r2, r3
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	621a      	str	r2, [r3, #32]
}
 8007bde:	bf00      	nop
 8007be0:	371c      	adds	r7, #28
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr

08007bea <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007bea:	b580      	push	{r7, lr}
 8007bec:	b082      	sub	sp, #8
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d101      	bne.n	8007bfc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	e03f      	b.n	8007c7c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c02:	b2db      	uxtb	r3, r3
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d106      	bne.n	8007c16 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f7fb fbf7 	bl	8003404 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2224      	movs	r2, #36	; 0x24
 8007c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	68da      	ldr	r2, [r3, #12]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c2c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 fd92 	bl	8008758 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	691a      	ldr	r2, [r3, #16]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007c42:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	695a      	ldr	r2, [r3, #20]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007c52:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	68da      	ldr	r2, [r3, #12]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c62:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2220      	movs	r2, #32
 8007c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2220      	movs	r2, #32
 8007c76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007c7a:	2300      	movs	r3, #0
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3708      	adds	r7, #8
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b082      	sub	sp, #8
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d101      	bne.n	8007c96 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8007c92:	2301      	movs	r3, #1
 8007c94:	e047      	b.n	8007d26 <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d106      	bne.n	8007cb0 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f7fb fbaa 	bl	8003404 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2224      	movs	r2, #36	; 0x24
 8007cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	68da      	ldr	r2, [r3, #12]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007cc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f000 fd45 	bl	8008758 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	691a      	ldr	r2, [r3, #16]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007cdc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	695a      	ldr	r2, [r3, #20]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8007cec:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	695a      	ldr	r2, [r3, #20]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f042 0208 	orr.w	r2, r2, #8
 8007cfc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	68da      	ldr	r2, [r3, #12]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007d0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2200      	movs	r2, #0
 8007d12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2220      	movs	r2, #32
 8007d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2220      	movs	r2, #32
 8007d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007d24:	2300      	movs	r3, #0
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3708      	adds	r7, #8
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
	...

08007d30 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b086      	sub	sp, #24
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	60f8      	str	r0, [r7, #12]
 8007d38:	60b9      	str	r1, [r7, #8]
 8007d3a:	4613      	mov	r3, r2
 8007d3c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	2b20      	cmp	r3, #32
 8007d48:	d153      	bne.n	8007df2 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d002      	beq.n	8007d56 <HAL_UART_Transmit_DMA+0x26>
 8007d50:	88fb      	ldrh	r3, [r7, #6]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d101      	bne.n	8007d5a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007d56:	2301      	movs	r3, #1
 8007d58:	e04c      	b.n	8007df4 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d101      	bne.n	8007d68 <HAL_UART_Transmit_DMA+0x38>
 8007d64:	2302      	movs	r3, #2
 8007d66:	e045      	b.n	8007df4 <HAL_UART_Transmit_DMA+0xc4>
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007d70:	68ba      	ldr	r2, [r7, #8]
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	88fa      	ldrh	r2, [r7, #6]
 8007d7a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	88fa      	ldrh	r2, [r7, #6]
 8007d80:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2200      	movs	r2, #0
 8007d86:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2221      	movs	r2, #33	; 0x21
 8007d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d94:	4a19      	ldr	r2, [pc, #100]	; (8007dfc <HAL_UART_Transmit_DMA+0xcc>)
 8007d96:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d9c:	4a18      	ldr	r2, [pc, #96]	; (8007e00 <HAL_UART_Transmit_DMA+0xd0>)
 8007d9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007da4:	4a17      	ldr	r2, [pc, #92]	; (8007e04 <HAL_UART_Transmit_DMA+0xd4>)
 8007da6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dac:	2200      	movs	r2, #0
 8007dae:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8007db0:	f107 0308 	add.w	r3, r7, #8
 8007db4:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	6819      	ldr	r1, [r3, #0]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	3304      	adds	r3, #4
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	88fb      	ldrh	r3, [r7, #6]
 8007dc8:	f7fc fcee 	bl	80047a8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007dd4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	695a      	ldr	r2, [r3, #20]
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007dec:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8007dee:	2300      	movs	r3, #0
 8007df0:	e000      	b.n	8007df4 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8007df2:	2302      	movs	r3, #2
  }
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3718      	adds	r7, #24
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}
 8007dfc:	08008215 	.word	0x08008215
 8007e00:	08008267 	.word	0x08008267
 8007e04:	0800834f 	.word	0x0800834f

08007e08 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b084      	sub	sp, #16
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	60f8      	str	r0, [r7, #12]
 8007e10:	60b9      	str	r1, [r7, #8]
 8007e12:	4613      	mov	r3, r2
 8007e14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	2b20      	cmp	r3, #32
 8007e20:	d11d      	bne.n	8007e5e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d002      	beq.n	8007e2e <HAL_UART_Receive_DMA+0x26>
 8007e28:	88fb      	ldrh	r3, [r7, #6]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d101      	bne.n	8007e32 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	e016      	b.n	8007e60 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	d101      	bne.n	8007e40 <HAL_UART_Receive_DMA+0x38>
 8007e3c:	2302      	movs	r3, #2
 8007e3e:	e00f      	b.n	8007e60 <HAL_UART_Receive_DMA+0x58>
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2201      	movs	r2, #1
 8007e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8007e4e:	88fb      	ldrh	r3, [r7, #6]
 8007e50:	461a      	mov	r2, r3
 8007e52:	68b9      	ldr	r1, [r7, #8]
 8007e54:	68f8      	ldr	r0, [r7, #12]
 8007e56:	f000 fac5 	bl	80083e4 <UART_Start_Receive_DMA>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	e000      	b.n	8007e60 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007e5e:	2302      	movs	r3, #2
  }
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3710      	adds	r7, #16
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b08a      	sub	sp, #40	; 0x28
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	68db      	ldr	r3, [r3, #12]
 8007e7e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	695b      	ldr	r3, [r3, #20]
 8007e86:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e92:	f003 030f 	and.w	r3, r3, #15
 8007e96:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007e98:	69bb      	ldr	r3, [r7, #24]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d10d      	bne.n	8007eba <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea0:	f003 0320 	and.w	r3, r3, #32
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d008      	beq.n	8007eba <HAL_UART_IRQHandler+0x52>
 8007ea8:	6a3b      	ldr	r3, [r7, #32]
 8007eaa:	f003 0320 	and.w	r3, r3, #32
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d003      	beq.n	8007eba <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 fbb9 	bl	800862a <UART_Receive_IT>
      return;
 8007eb8:	e17c      	b.n	80081b4 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007eba:	69bb      	ldr	r3, [r7, #24]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	f000 80b1 	beq.w	8008024 <HAL_UART_IRQHandler+0x1bc>
 8007ec2:	69fb      	ldr	r3, [r7, #28]
 8007ec4:	f003 0301 	and.w	r3, r3, #1
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d105      	bne.n	8007ed8 <HAL_UART_IRQHandler+0x70>
 8007ecc:	6a3b      	ldr	r3, [r7, #32]
 8007ece:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	f000 80a6 	beq.w	8008024 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eda:	f003 0301 	and.w	r3, r3, #1
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d00a      	beq.n	8007ef8 <HAL_UART_IRQHandler+0x90>
 8007ee2:	6a3b      	ldr	r3, [r7, #32]
 8007ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d005      	beq.n	8007ef8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ef0:	f043 0201 	orr.w	r2, r3, #1
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efa:	f003 0304 	and.w	r3, r3, #4
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d00a      	beq.n	8007f18 <HAL_UART_IRQHandler+0xb0>
 8007f02:	69fb      	ldr	r3, [r7, #28]
 8007f04:	f003 0301 	and.w	r3, r3, #1
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d005      	beq.n	8007f18 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f10:	f043 0202 	orr.w	r2, r3, #2
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f1a:	f003 0302 	and.w	r3, r3, #2
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d00a      	beq.n	8007f38 <HAL_UART_IRQHandler+0xd0>
 8007f22:	69fb      	ldr	r3, [r7, #28]
 8007f24:	f003 0301 	and.w	r3, r3, #1
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d005      	beq.n	8007f38 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f30:	f043 0204 	orr.w	r2, r3, #4
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3a:	f003 0308 	and.w	r3, r3, #8
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d00f      	beq.n	8007f62 <HAL_UART_IRQHandler+0xfa>
 8007f42:	6a3b      	ldr	r3, [r7, #32]
 8007f44:	f003 0320 	and.w	r3, r3, #32
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d104      	bne.n	8007f56 <HAL_UART_IRQHandler+0xee>
 8007f4c:	69fb      	ldr	r3, [r7, #28]
 8007f4e:	f003 0301 	and.w	r3, r3, #1
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d005      	beq.n	8007f62 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f5a:	f043 0208 	orr.w	r2, r3, #8
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	f000 811f 	beq.w	80081aa <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f6e:	f003 0320 	and.w	r3, r3, #32
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d007      	beq.n	8007f86 <HAL_UART_IRQHandler+0x11e>
 8007f76:	6a3b      	ldr	r3, [r7, #32]
 8007f78:	f003 0320 	and.w	r3, r3, #32
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d002      	beq.n	8007f86 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 fb52 	bl	800862a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	695b      	ldr	r3, [r3, #20]
 8007f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f90:	2b40      	cmp	r3, #64	; 0x40
 8007f92:	bf0c      	ite	eq
 8007f94:	2301      	moveq	r3, #1
 8007f96:	2300      	movne	r3, #0
 8007f98:	b2db      	uxtb	r3, r3
 8007f9a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fa0:	f003 0308 	and.w	r3, r3, #8
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d102      	bne.n	8007fae <HAL_UART_IRQHandler+0x146>
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d031      	beq.n	8008012 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f000 fa92 	bl	80084d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	695b      	ldr	r3, [r3, #20]
 8007fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fbe:	2b40      	cmp	r3, #64	; 0x40
 8007fc0:	d123      	bne.n	800800a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	695a      	ldr	r2, [r3, #20]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fd0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d013      	beq.n	8008002 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fde:	4a77      	ldr	r2, [pc, #476]	; (80081bc <HAL_UART_IRQHandler+0x354>)
 8007fe0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f7fc fca6 	bl	8004938 <HAL_DMA_Abort_IT>
 8007fec:	4603      	mov	r3, r0
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d016      	beq.n	8008020 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ff8:	687a      	ldr	r2, [r7, #4]
 8007ffa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007ffc:	4610      	mov	r0, r2
 8007ffe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008000:	e00e      	b.n	8008020 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f7fa f84e 	bl	80020a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008008:	e00a      	b.n	8008020 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f7fa f84a 	bl	80020a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008010:	e006      	b.n	8008020 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f7fa f846 	bl	80020a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2200      	movs	r2, #0
 800801c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800801e:	e0c4      	b.n	80081aa <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008020:	bf00      	nop
    return;
 8008022:	e0c2      	b.n	80081aa <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008028:	2b01      	cmp	r3, #1
 800802a:	f040 80a2 	bne.w	8008172 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800802e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008030:	f003 0310 	and.w	r3, r3, #16
 8008034:	2b00      	cmp	r3, #0
 8008036:	f000 809c 	beq.w	8008172 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800803a:	6a3b      	ldr	r3, [r7, #32]
 800803c:	f003 0310 	and.w	r3, r3, #16
 8008040:	2b00      	cmp	r3, #0
 8008042:	f000 8096 	beq.w	8008172 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008046:	2300      	movs	r3, #0
 8008048:	60fb      	str	r3, [r7, #12]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	60fb      	str	r3, [r7, #12]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	60fb      	str	r3, [r7, #12]
 800805a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	695b      	ldr	r3, [r3, #20]
 8008062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008066:	2b40      	cmp	r3, #64	; 0x40
 8008068:	d14f      	bne.n	800810a <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8008074:	8a3b      	ldrh	r3, [r7, #16]
 8008076:	2b00      	cmp	r3, #0
 8008078:	f000 8099 	beq.w	80081ae <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008080:	8a3a      	ldrh	r2, [r7, #16]
 8008082:	429a      	cmp	r2, r3
 8008084:	f080 8093 	bcs.w	80081ae <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	8a3a      	ldrh	r2, [r7, #16]
 800808c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008092:	69db      	ldr	r3, [r3, #28]
 8008094:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008098:	d02b      	beq.n	80080f2 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	68da      	ldr	r2, [r3, #12]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80080a8:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	695a      	ldr	r2, [r3, #20]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f022 0201 	bic.w	r2, r2, #1
 80080b8:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	695a      	ldr	r2, [r3, #20]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080c8:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2220      	movs	r2, #32
 80080ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2200      	movs	r2, #0
 80080d6:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	68da      	ldr	r2, [r3, #12]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f022 0210 	bic.w	r2, r2, #16
 80080e6:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ec:	4618      	mov	r0, r3
 80080ee:	f7fc fbb3 	bl	8004858 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	1ad3      	subs	r3, r2, r3
 80080fe:	b29b      	uxth	r3, r3
 8008100:	4619      	mov	r1, r3
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 f87a 	bl	80081fc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008108:	e051      	b.n	80081ae <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008112:	b29b      	uxth	r3, r3
 8008114:	1ad3      	subs	r3, r2, r3
 8008116:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800811c:	b29b      	uxth	r3, r3
 800811e:	2b00      	cmp	r3, #0
 8008120:	d047      	beq.n	80081b2 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8008122:	8a7b      	ldrh	r3, [r7, #18]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d044      	beq.n	80081b2 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	68da      	ldr	r2, [r3, #12]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008136:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	695a      	ldr	r2, [r3, #20]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f022 0201 	bic.w	r2, r2, #1
 8008146:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2220      	movs	r2, #32
 800814c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2200      	movs	r2, #0
 8008154:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	68da      	ldr	r2, [r3, #12]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f022 0210 	bic.w	r2, r2, #16
 8008164:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008166:	8a7b      	ldrh	r3, [r7, #18]
 8008168:	4619      	mov	r1, r3
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 f846 	bl	80081fc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008170:	e01f      	b.n	80081b2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008178:	2b00      	cmp	r3, #0
 800817a:	d008      	beq.n	800818e <HAL_UART_IRQHandler+0x326>
 800817c:	6a3b      	ldr	r3, [r7, #32]
 800817e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008182:	2b00      	cmp	r3, #0
 8008184:	d003      	beq.n	800818e <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 f9e7 	bl	800855a <UART_Transmit_IT>
    return;
 800818c:	e012      	b.n	80081b4 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800818e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008194:	2b00      	cmp	r3, #0
 8008196:	d00d      	beq.n	80081b4 <HAL_UART_IRQHandler+0x34c>
 8008198:	6a3b      	ldr	r3, [r7, #32]
 800819a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d008      	beq.n	80081b4 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 fa29 	bl	80085fa <UART_EndTransmit_IT>
    return;
 80081a8:	e004      	b.n	80081b4 <HAL_UART_IRQHandler+0x34c>
    return;
 80081aa:	bf00      	nop
 80081ac:	e002      	b.n	80081b4 <HAL_UART_IRQHandler+0x34c>
      return;
 80081ae:	bf00      	nop
 80081b0:	e000      	b.n	80081b4 <HAL_UART_IRQHandler+0x34c>
      return;
 80081b2:	bf00      	nop
  }
}
 80081b4:	3728      	adds	r7, #40	; 0x28
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
 80081ba:	bf00      	nop
 80081bc:	08008533 	.word	0x08008533

080081c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b083      	sub	sp, #12
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80081c8:	bf00      	nop
 80081ca:	370c      	adds	r7, #12
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr

080081d4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b083      	sub	sp, #12
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80081dc:	bf00      	nop
 80081de:	370c      	adds	r7, #12
 80081e0:	46bd      	mov	sp, r7
 80081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e6:	4770      	bx	lr

080081e8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b083      	sub	sp, #12
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80081f0:	bf00      	nop
 80081f2:	370c      	adds	r7, #12
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr

080081fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b083      	sub	sp, #12
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	460b      	mov	r3, r1
 8008206:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008208:	bf00      	nop
 800820a:	370c      	adds	r7, #12
 800820c:	46bd      	mov	sp, r7
 800820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008212:	4770      	bx	lr

08008214 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008220:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800822c:	2b00      	cmp	r3, #0
 800822e:	d113      	bne.n	8008258 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2200      	movs	r2, #0
 8008234:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	695a      	ldr	r2, [r3, #20]
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008244:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	68da      	ldr	r2, [r3, #12]
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008254:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008256:	e002      	b.n	800825e <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8008258:	68f8      	ldr	r0, [r7, #12]
 800825a:	f7ff ffb1 	bl	80081c0 <HAL_UART_TxCpltCallback>
}
 800825e:	bf00      	nop
 8008260:	3710      	adds	r7, #16
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}

08008266 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008266:	b580      	push	{r7, lr}
 8008268:	b084      	sub	sp, #16
 800826a:	af00      	add	r7, sp, #0
 800826c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008272:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008274:	68f8      	ldr	r0, [r7, #12]
 8008276:	f7ff ffad 	bl	80081d4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800827a:	bf00      	nop
 800827c:	3710      	adds	r7, #16
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}

08008282 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008282:	b580      	push	{r7, lr}
 8008284:	b084      	sub	sp, #16
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800828e:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800829a:	2b00      	cmp	r3, #0
 800829c:	d12a      	bne.n	80082f4 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2200      	movs	r2, #0
 80082a2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	68da      	ldr	r2, [r3, #12]
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80082b2:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	695a      	ldr	r2, [r3, #20]
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f022 0201 	bic.w	r2, r2, #1
 80082c2:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	695a      	ldr	r2, [r3, #20]
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80082d2:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2220      	movs	r2, #32
 80082d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	d107      	bne.n	80082f4 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	68da      	ldr	r2, [r3, #12]
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f022 0210 	bic.w	r2, r2, #16
 80082f2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082f8:	2b01      	cmp	r3, #1
 80082fa:	d106      	bne.n	800830a <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008300:	4619      	mov	r1, r3
 8008302:	68f8      	ldr	r0, [r7, #12]
 8008304:	f7ff ff7a 	bl	80081fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008308:	e002      	b.n	8008310 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800830a:	68f8      	ldr	r0, [r7, #12]
 800830c:	f7f9 fe7e 	bl	800200c <HAL_UART_RxCpltCallback>
}
 8008310:	bf00      	nop
 8008312:	3710      	adds	r7, #16
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b084      	sub	sp, #16
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008324:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800832a:	2b01      	cmp	r3, #1
 800832c:	d108      	bne.n	8008340 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008332:	085b      	lsrs	r3, r3, #1
 8008334:	b29b      	uxth	r3, r3
 8008336:	4619      	mov	r1, r3
 8008338:	68f8      	ldr	r0, [r7, #12]
 800833a:	f7ff ff5f 	bl	80081fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800833e:	e002      	b.n	8008346 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008340:	68f8      	ldr	r0, [r7, #12]
 8008342:	f7ff ff51 	bl	80081e8 <HAL_UART_RxHalfCpltCallback>
}
 8008346:	bf00      	nop
 8008348:	3710      	adds	r7, #16
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}

0800834e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800834e:	b580      	push	{r7, lr}
 8008350:	b084      	sub	sp, #16
 8008352:	af00      	add	r7, sp, #0
 8008354:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008356:	2300      	movs	r3, #0
 8008358:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800835e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	695b      	ldr	r3, [r3, #20]
 8008366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800836a:	2b80      	cmp	r3, #128	; 0x80
 800836c:	bf0c      	ite	eq
 800836e:	2301      	moveq	r3, #1
 8008370:	2300      	movne	r3, #0
 8008372:	b2db      	uxtb	r3, r3
 8008374:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800837c:	b2db      	uxtb	r3, r3
 800837e:	2b21      	cmp	r3, #33	; 0x21
 8008380:	d108      	bne.n	8008394 <UART_DMAError+0x46>
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d005      	beq.n	8008394 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	2200      	movs	r2, #0
 800838c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800838e:	68b8      	ldr	r0, [r7, #8]
 8008390:	f000 f88c 	bl	80084ac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	695b      	ldr	r3, [r3, #20]
 800839a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800839e:	2b40      	cmp	r3, #64	; 0x40
 80083a0:	bf0c      	ite	eq
 80083a2:	2301      	moveq	r3, #1
 80083a4:	2300      	movne	r3, #0
 80083a6:	b2db      	uxtb	r3, r3
 80083a8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80083b0:	b2db      	uxtb	r3, r3
 80083b2:	2b22      	cmp	r3, #34	; 0x22
 80083b4:	d108      	bne.n	80083c8 <UART_DMAError+0x7a>
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d005      	beq.n	80083c8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	2200      	movs	r2, #0
 80083c0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80083c2:	68b8      	ldr	r0, [r7, #8]
 80083c4:	f000 f888 	bl	80084d8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083cc:	f043 0210 	orr.w	r2, r3, #16
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80083d4:	68b8      	ldr	r0, [r7, #8]
 80083d6:	f7f9 fe65 	bl	80020a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80083da:	bf00      	nop
 80083dc:	3710      	adds	r7, #16
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}
	...

080083e4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b086      	sub	sp, #24
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	60b9      	str	r1, [r7, #8]
 80083ee:	4613      	mov	r3, r2
 80083f0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80083f2:	68ba      	ldr	r2, [r7, #8]
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	88fa      	ldrh	r2, [r7, #6]
 80083fc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2200      	movs	r2, #0
 8008402:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2222      	movs	r2, #34	; 0x22
 8008408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008410:	4a23      	ldr	r2, [pc, #140]	; (80084a0 <UART_Start_Receive_DMA+0xbc>)
 8008412:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008418:	4a22      	ldr	r2, [pc, #136]	; (80084a4 <UART_Start_Receive_DMA+0xc0>)
 800841a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008420:	4a21      	ldr	r2, [pc, #132]	; (80084a8 <UART_Start_Receive_DMA+0xc4>)
 8008422:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008428:	2200      	movs	r2, #0
 800842a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800842c:	f107 0308 	add.w	r3, r7, #8
 8008430:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	3304      	adds	r3, #4
 800843c:	4619      	mov	r1, r3
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	681a      	ldr	r2, [r3, #0]
 8008442:	88fb      	ldrh	r3, [r7, #6]
 8008444:	f7fc f9b0 	bl	80047a8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008448:	2300      	movs	r3, #0
 800844a:	613b      	str	r3, [r7, #16]
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	613b      	str	r3, [r7, #16]
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	613b      	str	r3, [r7, #16]
 800845c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2200      	movs	r2, #0
 8008462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	68da      	ldr	r2, [r3, #12]
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008474:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	695a      	ldr	r2, [r3, #20]
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f042 0201 	orr.w	r2, r2, #1
 8008484:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	695a      	ldr	r2, [r3, #20]
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008494:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8008496:	2300      	movs	r3, #0
}
 8008498:	4618      	mov	r0, r3
 800849a:	3718      	adds	r7, #24
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}
 80084a0:	08008283 	.word	0x08008283
 80084a4:	08008319 	.word	0x08008319
 80084a8:	0800834f 	.word	0x0800834f

080084ac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b083      	sub	sp, #12
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	68da      	ldr	r2, [r3, #12]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80084c2:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2220      	movs	r2, #32
 80084c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80084cc:	bf00      	nop
 80084ce:	370c      	adds	r7, #12
 80084d0:	46bd      	mov	sp, r7
 80084d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d6:	4770      	bx	lr

080084d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80084d8:	b480      	push	{r7}
 80084da:	b083      	sub	sp, #12
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	68da      	ldr	r2, [r3, #12]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80084ee:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	695a      	ldr	r2, [r3, #20]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f022 0201 	bic.w	r2, r2, #1
 80084fe:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008504:	2b01      	cmp	r3, #1
 8008506:	d107      	bne.n	8008518 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	68da      	ldr	r2, [r3, #12]
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f022 0210 	bic.w	r2, r2, #16
 8008516:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2220      	movs	r2, #32
 800851c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2200      	movs	r2, #0
 8008524:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008526:	bf00      	nop
 8008528:	370c      	adds	r7, #12
 800852a:	46bd      	mov	sp, r7
 800852c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008530:	4770      	bx	lr

08008532 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008532:	b580      	push	{r7, lr}
 8008534:	b084      	sub	sp, #16
 8008536:	af00      	add	r7, sp, #0
 8008538:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800853e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2200      	movs	r2, #0
 8008544:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	2200      	movs	r2, #0
 800854a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800854c:	68f8      	ldr	r0, [r7, #12]
 800854e:	f7f9 fda9 	bl	80020a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008552:	bf00      	nop
 8008554:	3710      	adds	r7, #16
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}

0800855a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800855a:	b480      	push	{r7}
 800855c:	b085      	sub	sp, #20
 800855e:	af00      	add	r7, sp, #0
 8008560:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008568:	b2db      	uxtb	r3, r3
 800856a:	2b21      	cmp	r3, #33	; 0x21
 800856c:	d13e      	bne.n	80085ec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008576:	d114      	bne.n	80085a2 <UART_Transmit_IT+0x48>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	691b      	ldr	r3, [r3, #16]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d110      	bne.n	80085a2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6a1b      	ldr	r3, [r3, #32]
 8008584:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	881b      	ldrh	r3, [r3, #0]
 800858a:	461a      	mov	r2, r3
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008594:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6a1b      	ldr	r3, [r3, #32]
 800859a:	1c9a      	adds	r2, r3, #2
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	621a      	str	r2, [r3, #32]
 80085a0:	e008      	b.n	80085b4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6a1b      	ldr	r3, [r3, #32]
 80085a6:	1c59      	adds	r1, r3, #1
 80085a8:	687a      	ldr	r2, [r7, #4]
 80085aa:	6211      	str	r1, [r2, #32]
 80085ac:	781a      	ldrb	r2, [r3, #0]
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80085b8:	b29b      	uxth	r3, r3
 80085ba:	3b01      	subs	r3, #1
 80085bc:	b29b      	uxth	r3, r3
 80085be:	687a      	ldr	r2, [r7, #4]
 80085c0:	4619      	mov	r1, r3
 80085c2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d10f      	bne.n	80085e8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	68da      	ldr	r2, [r3, #12]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80085d6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	68da      	ldr	r2, [r3, #12]
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80085e6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80085e8:	2300      	movs	r3, #0
 80085ea:	e000      	b.n	80085ee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80085ec:	2302      	movs	r3, #2
  }
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3714      	adds	r7, #20
 80085f2:	46bd      	mov	sp, r7
 80085f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f8:	4770      	bx	lr

080085fa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80085fa:	b580      	push	{r7, lr}
 80085fc:	b082      	sub	sp, #8
 80085fe:	af00      	add	r7, sp, #0
 8008600:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	68da      	ldr	r2, [r3, #12]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008610:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2220      	movs	r2, #32
 8008616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f7ff fdd0 	bl	80081c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008620:	2300      	movs	r3, #0
}
 8008622:	4618      	mov	r0, r3
 8008624:	3708      	adds	r7, #8
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}

0800862a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800862a:	b580      	push	{r7, lr}
 800862c:	b084      	sub	sp, #16
 800862e:	af00      	add	r7, sp, #0
 8008630:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008638:	b2db      	uxtb	r3, r3
 800863a:	2b22      	cmp	r3, #34	; 0x22
 800863c:	f040 8087 	bne.w	800874e <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	689b      	ldr	r3, [r3, #8]
 8008644:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008648:	d117      	bne.n	800867a <UART_Receive_IT+0x50>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	691b      	ldr	r3, [r3, #16]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d113      	bne.n	800867a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008652:	2300      	movs	r3, #0
 8008654:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800865a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	b29b      	uxth	r3, r3
 8008664:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008668:	b29a      	uxth	r2, r3
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008672:	1c9a      	adds	r2, r3, #2
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	629a      	str	r2, [r3, #40]	; 0x28
 8008678:	e026      	b.n	80086c8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800867e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8008680:	2300      	movs	r3, #0
 8008682:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	689b      	ldr	r3, [r3, #8]
 8008688:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800868c:	d007      	beq.n	800869e <UART_Receive_IT+0x74>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	689b      	ldr	r3, [r3, #8]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d10a      	bne.n	80086ac <UART_Receive_IT+0x82>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	691b      	ldr	r3, [r3, #16]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d106      	bne.n	80086ac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	b2da      	uxtb	r2, r3
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	701a      	strb	r2, [r3, #0]
 80086aa:	e008      	b.n	80086be <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	685b      	ldr	r3, [r3, #4]
 80086b2:	b2db      	uxtb	r3, r3
 80086b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086b8:	b2da      	uxtb	r2, r3
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086c2:	1c5a      	adds	r2, r3, #1
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80086cc:	b29b      	uxth	r3, r3
 80086ce:	3b01      	subs	r3, #1
 80086d0:	b29b      	uxth	r3, r3
 80086d2:	687a      	ldr	r2, [r7, #4]
 80086d4:	4619      	mov	r1, r3
 80086d6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d136      	bne.n	800874a <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	68da      	ldr	r2, [r3, #12]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f022 0220 	bic.w	r2, r2, #32
 80086ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	68da      	ldr	r2, [r3, #12]
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80086fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	695a      	ldr	r2, [r3, #20]
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f022 0201 	bic.w	r2, r2, #1
 800870a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2220      	movs	r2, #32
 8008710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008718:	2b01      	cmp	r3, #1
 800871a:	d10e      	bne.n	800873a <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	68da      	ldr	r2, [r3, #12]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f022 0210 	bic.w	r2, r2, #16
 800872a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008730:	4619      	mov	r1, r3
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f7ff fd62 	bl	80081fc <HAL_UARTEx_RxEventCallback>
 8008738:	e002      	b.n	8008740 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f7f9 fc66 	bl	800200c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2200      	movs	r2, #0
 8008744:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8008746:	2300      	movs	r3, #0
 8008748:	e002      	b.n	8008750 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800874a:	2300      	movs	r3, #0
 800874c:	e000      	b.n	8008750 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800874e:	2302      	movs	r3, #2
  }
}
 8008750:	4618      	mov	r0, r3
 8008752:	3710      	adds	r7, #16
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}

08008758 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800875c:	b09f      	sub	sp, #124	; 0x7c
 800875e:	af00      	add	r7, sp, #0
 8008760:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008762:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	691b      	ldr	r3, [r3, #16]
 8008768:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800876c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800876e:	68d9      	ldr	r1, [r3, #12]
 8008770:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008772:	681a      	ldr	r2, [r3, #0]
 8008774:	ea40 0301 	orr.w	r3, r0, r1
 8008778:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800877a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800877c:	689a      	ldr	r2, [r3, #8]
 800877e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008780:	691b      	ldr	r3, [r3, #16]
 8008782:	431a      	orrs	r2, r3
 8008784:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008786:	695b      	ldr	r3, [r3, #20]
 8008788:	431a      	orrs	r2, r3
 800878a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800878c:	69db      	ldr	r3, [r3, #28]
 800878e:	4313      	orrs	r3, r2
 8008790:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008792:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	68db      	ldr	r3, [r3, #12]
 8008798:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800879c:	f021 010c 	bic.w	r1, r1, #12
 80087a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087a2:	681a      	ldr	r2, [r3, #0]
 80087a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80087a6:	430b      	orrs	r3, r1
 80087a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80087aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	695b      	ldr	r3, [r3, #20]
 80087b0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80087b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087b6:	6999      	ldr	r1, [r3, #24]
 80087b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	ea40 0301 	orr.w	r3, r0, r1
 80087c0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80087c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087c4:	681a      	ldr	r2, [r3, #0]
 80087c6:	4bc5      	ldr	r3, [pc, #788]	; (8008adc <UART_SetConfig+0x384>)
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d004      	beq.n	80087d6 <UART_SetConfig+0x7e>
 80087cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087ce:	681a      	ldr	r2, [r3, #0]
 80087d0:	4bc3      	ldr	r3, [pc, #780]	; (8008ae0 <UART_SetConfig+0x388>)
 80087d2:	429a      	cmp	r2, r3
 80087d4:	d103      	bne.n	80087de <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80087d6:	f7fd fd51 	bl	800627c <HAL_RCC_GetPCLK2Freq>
 80087da:	6778      	str	r0, [r7, #116]	; 0x74
 80087dc:	e002      	b.n	80087e4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80087de:	f7fd fd39 	bl	8006254 <HAL_RCC_GetPCLK1Freq>
 80087e2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80087e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087e6:	69db      	ldr	r3, [r3, #28]
 80087e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087ec:	f040 80b6 	bne.w	800895c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80087f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087f2:	461c      	mov	r4, r3
 80087f4:	f04f 0500 	mov.w	r5, #0
 80087f8:	4622      	mov	r2, r4
 80087fa:	462b      	mov	r3, r5
 80087fc:	1891      	adds	r1, r2, r2
 80087fe:	6439      	str	r1, [r7, #64]	; 0x40
 8008800:	415b      	adcs	r3, r3
 8008802:	647b      	str	r3, [r7, #68]	; 0x44
 8008804:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008808:	1912      	adds	r2, r2, r4
 800880a:	eb45 0303 	adc.w	r3, r5, r3
 800880e:	f04f 0000 	mov.w	r0, #0
 8008812:	f04f 0100 	mov.w	r1, #0
 8008816:	00d9      	lsls	r1, r3, #3
 8008818:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800881c:	00d0      	lsls	r0, r2, #3
 800881e:	4602      	mov	r2, r0
 8008820:	460b      	mov	r3, r1
 8008822:	1911      	adds	r1, r2, r4
 8008824:	6639      	str	r1, [r7, #96]	; 0x60
 8008826:	416b      	adcs	r3, r5
 8008828:	667b      	str	r3, [r7, #100]	; 0x64
 800882a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	461a      	mov	r2, r3
 8008830:	f04f 0300 	mov.w	r3, #0
 8008834:	1891      	adds	r1, r2, r2
 8008836:	63b9      	str	r1, [r7, #56]	; 0x38
 8008838:	415b      	adcs	r3, r3
 800883a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800883c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008840:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008844:	f7f7 fce4 	bl	8000210 <__aeabi_uldivmod>
 8008848:	4602      	mov	r2, r0
 800884a:	460b      	mov	r3, r1
 800884c:	4ba5      	ldr	r3, [pc, #660]	; (8008ae4 <UART_SetConfig+0x38c>)
 800884e:	fba3 2302 	umull	r2, r3, r3, r2
 8008852:	095b      	lsrs	r3, r3, #5
 8008854:	011e      	lsls	r6, r3, #4
 8008856:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008858:	461c      	mov	r4, r3
 800885a:	f04f 0500 	mov.w	r5, #0
 800885e:	4622      	mov	r2, r4
 8008860:	462b      	mov	r3, r5
 8008862:	1891      	adds	r1, r2, r2
 8008864:	6339      	str	r1, [r7, #48]	; 0x30
 8008866:	415b      	adcs	r3, r3
 8008868:	637b      	str	r3, [r7, #52]	; 0x34
 800886a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800886e:	1912      	adds	r2, r2, r4
 8008870:	eb45 0303 	adc.w	r3, r5, r3
 8008874:	f04f 0000 	mov.w	r0, #0
 8008878:	f04f 0100 	mov.w	r1, #0
 800887c:	00d9      	lsls	r1, r3, #3
 800887e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008882:	00d0      	lsls	r0, r2, #3
 8008884:	4602      	mov	r2, r0
 8008886:	460b      	mov	r3, r1
 8008888:	1911      	adds	r1, r2, r4
 800888a:	65b9      	str	r1, [r7, #88]	; 0x58
 800888c:	416b      	adcs	r3, r5
 800888e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008890:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	461a      	mov	r2, r3
 8008896:	f04f 0300 	mov.w	r3, #0
 800889a:	1891      	adds	r1, r2, r2
 800889c:	62b9      	str	r1, [r7, #40]	; 0x28
 800889e:	415b      	adcs	r3, r3
 80088a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80088a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80088a6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80088aa:	f7f7 fcb1 	bl	8000210 <__aeabi_uldivmod>
 80088ae:	4602      	mov	r2, r0
 80088b0:	460b      	mov	r3, r1
 80088b2:	4b8c      	ldr	r3, [pc, #560]	; (8008ae4 <UART_SetConfig+0x38c>)
 80088b4:	fba3 1302 	umull	r1, r3, r3, r2
 80088b8:	095b      	lsrs	r3, r3, #5
 80088ba:	2164      	movs	r1, #100	; 0x64
 80088bc:	fb01 f303 	mul.w	r3, r1, r3
 80088c0:	1ad3      	subs	r3, r2, r3
 80088c2:	00db      	lsls	r3, r3, #3
 80088c4:	3332      	adds	r3, #50	; 0x32
 80088c6:	4a87      	ldr	r2, [pc, #540]	; (8008ae4 <UART_SetConfig+0x38c>)
 80088c8:	fba2 2303 	umull	r2, r3, r2, r3
 80088cc:	095b      	lsrs	r3, r3, #5
 80088ce:	005b      	lsls	r3, r3, #1
 80088d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80088d4:	441e      	add	r6, r3
 80088d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80088d8:	4618      	mov	r0, r3
 80088da:	f04f 0100 	mov.w	r1, #0
 80088de:	4602      	mov	r2, r0
 80088e0:	460b      	mov	r3, r1
 80088e2:	1894      	adds	r4, r2, r2
 80088e4:	623c      	str	r4, [r7, #32]
 80088e6:	415b      	adcs	r3, r3
 80088e8:	627b      	str	r3, [r7, #36]	; 0x24
 80088ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80088ee:	1812      	adds	r2, r2, r0
 80088f0:	eb41 0303 	adc.w	r3, r1, r3
 80088f4:	f04f 0400 	mov.w	r4, #0
 80088f8:	f04f 0500 	mov.w	r5, #0
 80088fc:	00dd      	lsls	r5, r3, #3
 80088fe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008902:	00d4      	lsls	r4, r2, #3
 8008904:	4622      	mov	r2, r4
 8008906:	462b      	mov	r3, r5
 8008908:	1814      	adds	r4, r2, r0
 800890a:	653c      	str	r4, [r7, #80]	; 0x50
 800890c:	414b      	adcs	r3, r1
 800890e:	657b      	str	r3, [r7, #84]	; 0x54
 8008910:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	461a      	mov	r2, r3
 8008916:	f04f 0300 	mov.w	r3, #0
 800891a:	1891      	adds	r1, r2, r2
 800891c:	61b9      	str	r1, [r7, #24]
 800891e:	415b      	adcs	r3, r3
 8008920:	61fb      	str	r3, [r7, #28]
 8008922:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008926:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800892a:	f7f7 fc71 	bl	8000210 <__aeabi_uldivmod>
 800892e:	4602      	mov	r2, r0
 8008930:	460b      	mov	r3, r1
 8008932:	4b6c      	ldr	r3, [pc, #432]	; (8008ae4 <UART_SetConfig+0x38c>)
 8008934:	fba3 1302 	umull	r1, r3, r3, r2
 8008938:	095b      	lsrs	r3, r3, #5
 800893a:	2164      	movs	r1, #100	; 0x64
 800893c:	fb01 f303 	mul.w	r3, r1, r3
 8008940:	1ad3      	subs	r3, r2, r3
 8008942:	00db      	lsls	r3, r3, #3
 8008944:	3332      	adds	r3, #50	; 0x32
 8008946:	4a67      	ldr	r2, [pc, #412]	; (8008ae4 <UART_SetConfig+0x38c>)
 8008948:	fba2 2303 	umull	r2, r3, r2, r3
 800894c:	095b      	lsrs	r3, r3, #5
 800894e:	f003 0207 	and.w	r2, r3, #7
 8008952:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4432      	add	r2, r6
 8008958:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800895a:	e0b9      	b.n	8008ad0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800895c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800895e:	461c      	mov	r4, r3
 8008960:	f04f 0500 	mov.w	r5, #0
 8008964:	4622      	mov	r2, r4
 8008966:	462b      	mov	r3, r5
 8008968:	1891      	adds	r1, r2, r2
 800896a:	6139      	str	r1, [r7, #16]
 800896c:	415b      	adcs	r3, r3
 800896e:	617b      	str	r3, [r7, #20]
 8008970:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008974:	1912      	adds	r2, r2, r4
 8008976:	eb45 0303 	adc.w	r3, r5, r3
 800897a:	f04f 0000 	mov.w	r0, #0
 800897e:	f04f 0100 	mov.w	r1, #0
 8008982:	00d9      	lsls	r1, r3, #3
 8008984:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008988:	00d0      	lsls	r0, r2, #3
 800898a:	4602      	mov	r2, r0
 800898c:	460b      	mov	r3, r1
 800898e:	eb12 0804 	adds.w	r8, r2, r4
 8008992:	eb43 0905 	adc.w	r9, r3, r5
 8008996:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	4618      	mov	r0, r3
 800899c:	f04f 0100 	mov.w	r1, #0
 80089a0:	f04f 0200 	mov.w	r2, #0
 80089a4:	f04f 0300 	mov.w	r3, #0
 80089a8:	008b      	lsls	r3, r1, #2
 80089aa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80089ae:	0082      	lsls	r2, r0, #2
 80089b0:	4640      	mov	r0, r8
 80089b2:	4649      	mov	r1, r9
 80089b4:	f7f7 fc2c 	bl	8000210 <__aeabi_uldivmod>
 80089b8:	4602      	mov	r2, r0
 80089ba:	460b      	mov	r3, r1
 80089bc:	4b49      	ldr	r3, [pc, #292]	; (8008ae4 <UART_SetConfig+0x38c>)
 80089be:	fba3 2302 	umull	r2, r3, r3, r2
 80089c2:	095b      	lsrs	r3, r3, #5
 80089c4:	011e      	lsls	r6, r3, #4
 80089c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80089c8:	4618      	mov	r0, r3
 80089ca:	f04f 0100 	mov.w	r1, #0
 80089ce:	4602      	mov	r2, r0
 80089d0:	460b      	mov	r3, r1
 80089d2:	1894      	adds	r4, r2, r2
 80089d4:	60bc      	str	r4, [r7, #8]
 80089d6:	415b      	adcs	r3, r3
 80089d8:	60fb      	str	r3, [r7, #12]
 80089da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80089de:	1812      	adds	r2, r2, r0
 80089e0:	eb41 0303 	adc.w	r3, r1, r3
 80089e4:	f04f 0400 	mov.w	r4, #0
 80089e8:	f04f 0500 	mov.w	r5, #0
 80089ec:	00dd      	lsls	r5, r3, #3
 80089ee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80089f2:	00d4      	lsls	r4, r2, #3
 80089f4:	4622      	mov	r2, r4
 80089f6:	462b      	mov	r3, r5
 80089f8:	1814      	adds	r4, r2, r0
 80089fa:	64bc      	str	r4, [r7, #72]	; 0x48
 80089fc:	414b      	adcs	r3, r1
 80089fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	4618      	mov	r0, r3
 8008a06:	f04f 0100 	mov.w	r1, #0
 8008a0a:	f04f 0200 	mov.w	r2, #0
 8008a0e:	f04f 0300 	mov.w	r3, #0
 8008a12:	008b      	lsls	r3, r1, #2
 8008a14:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008a18:	0082      	lsls	r2, r0, #2
 8008a1a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008a1e:	f7f7 fbf7 	bl	8000210 <__aeabi_uldivmod>
 8008a22:	4602      	mov	r2, r0
 8008a24:	460b      	mov	r3, r1
 8008a26:	4b2f      	ldr	r3, [pc, #188]	; (8008ae4 <UART_SetConfig+0x38c>)
 8008a28:	fba3 1302 	umull	r1, r3, r3, r2
 8008a2c:	095b      	lsrs	r3, r3, #5
 8008a2e:	2164      	movs	r1, #100	; 0x64
 8008a30:	fb01 f303 	mul.w	r3, r1, r3
 8008a34:	1ad3      	subs	r3, r2, r3
 8008a36:	011b      	lsls	r3, r3, #4
 8008a38:	3332      	adds	r3, #50	; 0x32
 8008a3a:	4a2a      	ldr	r2, [pc, #168]	; (8008ae4 <UART_SetConfig+0x38c>)
 8008a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8008a40:	095b      	lsrs	r3, r3, #5
 8008a42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a46:	441e      	add	r6, r3
 8008a48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f04f 0100 	mov.w	r1, #0
 8008a50:	4602      	mov	r2, r0
 8008a52:	460b      	mov	r3, r1
 8008a54:	1894      	adds	r4, r2, r2
 8008a56:	603c      	str	r4, [r7, #0]
 8008a58:	415b      	adcs	r3, r3
 8008a5a:	607b      	str	r3, [r7, #4]
 8008a5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a60:	1812      	adds	r2, r2, r0
 8008a62:	eb41 0303 	adc.w	r3, r1, r3
 8008a66:	f04f 0400 	mov.w	r4, #0
 8008a6a:	f04f 0500 	mov.w	r5, #0
 8008a6e:	00dd      	lsls	r5, r3, #3
 8008a70:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008a74:	00d4      	lsls	r4, r2, #3
 8008a76:	4622      	mov	r2, r4
 8008a78:	462b      	mov	r3, r5
 8008a7a:	eb12 0a00 	adds.w	sl, r2, r0
 8008a7e:	eb43 0b01 	adc.w	fp, r3, r1
 8008a82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	4618      	mov	r0, r3
 8008a88:	f04f 0100 	mov.w	r1, #0
 8008a8c:	f04f 0200 	mov.w	r2, #0
 8008a90:	f04f 0300 	mov.w	r3, #0
 8008a94:	008b      	lsls	r3, r1, #2
 8008a96:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008a9a:	0082      	lsls	r2, r0, #2
 8008a9c:	4650      	mov	r0, sl
 8008a9e:	4659      	mov	r1, fp
 8008aa0:	f7f7 fbb6 	bl	8000210 <__aeabi_uldivmod>
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	460b      	mov	r3, r1
 8008aa8:	4b0e      	ldr	r3, [pc, #56]	; (8008ae4 <UART_SetConfig+0x38c>)
 8008aaa:	fba3 1302 	umull	r1, r3, r3, r2
 8008aae:	095b      	lsrs	r3, r3, #5
 8008ab0:	2164      	movs	r1, #100	; 0x64
 8008ab2:	fb01 f303 	mul.w	r3, r1, r3
 8008ab6:	1ad3      	subs	r3, r2, r3
 8008ab8:	011b      	lsls	r3, r3, #4
 8008aba:	3332      	adds	r3, #50	; 0x32
 8008abc:	4a09      	ldr	r2, [pc, #36]	; (8008ae4 <UART_SetConfig+0x38c>)
 8008abe:	fba2 2303 	umull	r2, r3, r2, r3
 8008ac2:	095b      	lsrs	r3, r3, #5
 8008ac4:	f003 020f 	and.w	r2, r3, #15
 8008ac8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4432      	add	r2, r6
 8008ace:	609a      	str	r2, [r3, #8]
}
 8008ad0:	bf00      	nop
 8008ad2:	377c      	adds	r7, #124	; 0x7c
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ada:	bf00      	nop
 8008adc:	40011000 	.word	0x40011000
 8008ae0:	40011400 	.word	0x40011400
 8008ae4:	51eb851f 	.word	0x51eb851f

08008ae8 <__read_flags>:


/*
 * Reads the flag status register and returns the value of the 8-bits register
 */
uint8_t __read_flags() {
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b090      	sub	sp, #64	; 0x40
 8008aec:	af00      	add	r7, sp, #0
	Command cmd = get_default_command();
 8008aee:	f107 0308 	add.w	r3, r7, #8
 8008af2:	4618      	mov	r0, r3
 8008af4:	f000 f988 	bl	8008e08 <get_default_command>
	with_data(&cmd, 1);
 8008af8:	f107 0308 	add.w	r3, r7, #8
 8008afc:	2101      	movs	r1, #1
 8008afe:	4618      	mov	r0, r3
 8008b00:	f000 f9b8 	bl	8008e74 <with_data>

	if(!qspi_run(&cmd, READ_FLAG_STATUS_REGISTER)) {
 8008b04:	f107 0308 	add.w	r3, r7, #8
 8008b08:	2170      	movs	r1, #112	; 0x70
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f000 f9c4 	bl	8008e98 <qspi_run>

	}

	uint8_t flags;

	if(!qspi_receive(&flags)) {
 8008b10:	1dfb      	adds	r3, r7, #7
 8008b12:	4618      	mov	r0, r3
 8008b14:	f000 fa28 	bl	8008f68 <qspi_receive>

	}

	return flags;
 8008b18:	79fb      	ldrb	r3, [r7, #7]
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3740      	adds	r7, #64	; 0x40
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}

08008b22 <__write_enable_latch>:

/*
 * Enables the write latch.
 * This function must be called before each PROGRAM or ERASE operation.
 */
bool __write_enable_latch() {
 8008b22:	b5b0      	push	{r4, r5, r7, lr}
 8008b24:	b09c      	sub	sp, #112	; 0x70
 8008b26:	af00      	add	r7, sp, #0
	Command cmd = get_default_command();
 8008b28:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f000 f96b 	bl	8008e08 <get_default_command>

	if(qspi_run(&cmd, WRITE_ENABLE_LATCH)) {
 8008b32:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008b36:	2106      	movs	r1, #6
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f000 f9ad 	bl	8008e98 <qspi_run>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d022      	beq.n	8008b8a <__write_enable_latch+0x68>
		cmd = get_default_command();
 8008b44:	463b      	mov	r3, r7
 8008b46:	4618      	mov	r0, r3
 8008b48:	f000 f95e 	bl	8008e08 <get_default_command>
 8008b4c:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8008b50:	463d      	mov	r5, r7
 8008b52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008b54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008b56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008b58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008b5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008b5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008b5e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008b62:	e884 0003 	stmia.w	r4, {r0, r1}

		with_data(&cmd, 1);
 8008b66:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008b6a:	2101      	movs	r1, #1
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f000 f981 	bl	8008e74 <with_data>

		if(qspi_poll(&cmd, READ_STATUS_REGISTER, 1, true)) {
 8008b72:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8008b76:	2301      	movs	r3, #1
 8008b78:	2201      	movs	r2, #1
 8008b7a:	2105      	movs	r1, #5
 8008b7c:	f000 f9a8 	bl	8008ed0 <qspi_poll>
 8008b80:	4603      	mov	r3, r0
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d001      	beq.n	8008b8a <__write_enable_latch+0x68>
			return true;
 8008b86:	2301      	movs	r3, #1
 8008b88:	e000      	b.n	8008b8c <__write_enable_latch+0x6a>
		}
	}

	return false;
 8008b8a:	2300      	movs	r3, #0
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3770      	adds	r7, #112	; 0x70
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bdb0      	pop	{r4, r5, r7, pc}

08008b94 <__write_disable_latch>:

/*
 * Call this function to prevent data corruption when a hardware fault (e.g. protection fault) occurs.
 * Please refer to the documentation for details.
 */
bool __write_disable_latch() {
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b08e      	sub	sp, #56	; 0x38
 8008b98:	af00      	add	r7, sp, #0
	Command cmd = get_default_command();
 8008b9a:	463b      	mov	r3, r7
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f000 f933 	bl	8008e08 <get_default_command>
	return qspi_run(&cmd, WRITE_ENABLE_LATCH);
 8008ba2:	463b      	mov	r3, r7
 8008ba4:	2106      	movs	r1, #6
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f000 f976 	bl	8008e98 <qspi_run>
 8008bac:	4603      	mov	r3, r0
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3738      	adds	r7, #56	; 0x38
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}

08008bb6 <flash_init>:

/*
 * Initialises the flash driver
 */
void flash_init() {
 8008bb6:	b580      	push	{r7, lr}
 8008bb8:	b090      	sub	sp, #64	; 0x40
 8008bba:	af00      	add	r7, sp, #0
	uint8_t configuration = 0b00011011; // 1 Dummy cycle
 8008bbc:	231b      	movs	r3, #27
 8008bbe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	Command cmd = get_default_command();
 8008bc2:	1d3b      	adds	r3, r7, #4
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f000 f91f 	bl	8008e08 <get_default_command>
	with_data(&cmd, 1);
 8008bca:	1d3b      	adds	r3, r7, #4
 8008bcc:	2101      	movs	r1, #1
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f000 f950 	bl	8008e74 <with_data>

	__write_enable_latch();
 8008bd4:	f7ff ffa5 	bl	8008b22 <__write_enable_latch>

	if(!qspi_run(&cmd, 0x81)) { // Write volatile configuration register
 8008bd8:	1d3b      	adds	r3, r7, #4
 8008bda:	2181      	movs	r1, #129	; 0x81
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f000 f95b 	bl	8008e98 <qspi_run>

	}

	if(!qspi_transmit(&configuration)) {
 8008be2:	f107 033f 	add.w	r3, r7, #63	; 0x3f
 8008be6:	4618      	mov	r0, r3
 8008be8:	f000 f9a8 	bl	8008f3c <qspi_transmit>

	}

	if(!qspi_poll(&cmd, READ_FLAG_STATUS_REGISTER, 7, true)) {
 8008bec:	1d38      	adds	r0, r7, #4
 8008bee:	2301      	movs	r3, #1
 8008bf0:	2207      	movs	r2, #7
 8008bf2:	2170      	movs	r1, #112	; 0x70
 8008bf4:	f000 f96c 	bl	8008ed0 <qspi_poll>

	}
}
 8008bf8:	bf00      	nop
 8008bfa:	3740      	adds	r7, #64	; 0x40
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}

08008c00 <flash_read>:
 * Test providers:
 * 	 - read_ut.c
 *
 */

void flash_read(uint32_t address, uint8_t* buffer, uint32_t length) {
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b084      	sub	sp, #16
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	60f8      	str	r0, [r7, #12]
 8008c08:	60b9      	str	r1, [r7, #8]
 8008c0a:	607a      	str	r2, [r7, #4]
	while(QUADSPI->SR & QUADSPI_SR_BUSY);
 8008c0c:	bf00      	nop
 8008c0e:	4b12      	ldr	r3, [pc, #72]	; (8008c58 <flash_read+0x58>)
 8008c10:	689b      	ldr	r3, [r3, #8]
 8008c12:	f003 0320 	and.w	r3, r3, #32
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d1f9      	bne.n	8008c0e <flash_read+0xe>
	QUADSPI->CCR = (uint32_t) (FREAD_SINGLE) | (0b00000001 << 24) | (0b00000100 << 16) | (0b00100101 << 8);
 8008c1a:	4b0f      	ldr	r3, [pc, #60]	; (8008c58 <flash_read+0x58>)
 8008c1c:	4a0f      	ldr	r2, [pc, #60]	; (8008c5c <flash_read+0x5c>)
 8008c1e:	615a      	str	r2, [r3, #20]
	while(QUADSPI->SR & QUADSPI_SR_BUSY);
 8008c20:	bf00      	nop
 8008c22:	4b0d      	ldr	r3, [pc, #52]	; (8008c58 <flash_read+0x58>)
 8008c24:	689b      	ldr	r3, [r3, #8]
 8008c26:	f003 0320 	and.w	r3, r3, #32
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d1f9      	bne.n	8008c22 <flash_read+0x22>
	QUADSPI->AR = address;
 8008c2e:	4a0a      	ldr	r2, [pc, #40]	; (8008c58 <flash_read+0x58>)
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	6193      	str	r3, [r2, #24]
	while(QUADSPI->SR & QUADSPI_SR_BUSY);
 8008c34:	bf00      	nop
 8008c36:	4b08      	ldr	r3, [pc, #32]	; (8008c58 <flash_read+0x58>)
 8008c38:	689b      	ldr	r3, [r3, #8]
 8008c3a:	f003 0320 	and.w	r3, r3, #32
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d1f9      	bne.n	8008c36 <flash_read+0x36>
	QUADSPI->DLR = length;
 8008c42:	4a05      	ldr	r2, [pc, #20]	; (8008c58 <flash_read+0x58>)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6113      	str	r3, [r2, #16]

	if(!qspi_receive(buffer)) {
 8008c48:	68b8      	ldr	r0, [r7, #8]
 8008c4a:	f000 f98d 	bl	8008f68 <qspi_receive>

	}
}
 8008c4e:	bf00      	nop
 8008c50:	3710      	adds	r7, #16
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
 8008c56:	bf00      	nop
 8008c58:	a0001000 	.word	0xa0001000
 8008c5c:	0104250b 	.word	0x0104250b

08008c60 <__flash_write_page>:
 * Test providers:
 * 	 - write_ut.c
 *
 */

void __flash_write_page(uint32_t address, uint8_t* buffer, uint32_t length) {
 8008c60:	b5b0      	push	{r4, r5, r7, lr}
 8008c62:	b0a2      	sub	sp, #136	; 0x88
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6478      	str	r0, [r7, #68]	; 0x44
 8008c68:	6439      	str	r1, [r7, #64]	; 0x40
 8008c6a:	63fa      	str	r2, [r7, #60]	; 0x3c
	__write_enable_latch();
 8008c6c:	f7ff ff59 	bl	8008b22 <__write_enable_latch>

	Command cmd = get_default_command();
 8008c70:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008c74:	4618      	mov	r0, r3
 8008c76:	f000 f8c7 	bl	8008e08 <get_default_command>

	with_address(&cmd, address);
 8008c7a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008c7e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008c80:	4618      	mov	r0, r3
 8008c82:	f000 f8e1 	bl	8008e48 <with_address>
	with_data(&cmd, length);
 8008c86:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008c8a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f000 f8f1 	bl	8008e74 <with_data>

	if(!qspi_run(&cmd, WRITE_SINGLE)) {
 8008c92:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008c96:	2102      	movs	r1, #2
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f000 f8fd 	bl	8008e98 <qspi_run>

	}

	if(!qspi_transmit(buffer)) {
 8008c9e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008ca0:	f000 f94c 	bl	8008f3c <qspi_transmit>

	/*
	 * Checks if the controller is ready to proceed to the next command
	 */

	cmd = get_default_command();
 8008ca4:	463b      	mov	r3, r7
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f000 f8ae 	bl	8008e08 <get_default_command>
 8008cac:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8008cb0:	463d      	mov	r5, r7
 8008cb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008cb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008cb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008cb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008cba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008cbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008cbe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008cc2:	e884 0003 	stmia.w	r4, {r0, r1}
	with_data(&cmd, 1);
 8008cc6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008cca:	2101      	movs	r1, #1
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f000 f8d1 	bl	8008e74 <with_data>

	if(!qspi_poll(&cmd, READ_FLAG_STATUS_REGISTER, 7, true)) {
 8008cd2:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	2207      	movs	r2, #7
 8008cda:	2170      	movs	r1, #112	; 0x70
 8008cdc:	f000 f8f8 	bl	8008ed0 <qspi_poll>

	}

	uint8_t flags = __read_flags();
 8008ce0:	f7ff ff02 	bl	8008ae8 <__read_flags>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	// Checks if the protection fault flag is set
	if(flags & (1 << 4)) {
 8008cea:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8008cee:	f003 0310 	and.w	r3, r3, #16
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d001      	beq.n	8008cfa <__flash_write_page+0x9a>
		__write_disable_latch(); // Manually reset the latch
 8008cf6:	f7ff ff4d 	bl	8008b94 <__write_disable_latch>


	}
}
 8008cfa:	bf00      	nop
 8008cfc:	3788      	adds	r7, #136	; 0x88
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bdb0      	pop	{r4, r5, r7, pc}

08008d02 <flash_write>:

void flash_write(uint32_t address, uint8_t* buffer, uint32_t length) {
 8008d02:	b580      	push	{r7, lr}
 8008d04:	b086      	sub	sp, #24
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	60f8      	str	r0, [r7, #12]
 8008d0a:	60b9      	str	r1, [r7, #8]
 8008d0c:	607a      	str	r2, [r7, #4]
	uint32_t internal_address = address % PAGE_SIZE;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	b2db      	uxtb	r3, r3
 8008d12:	617b      	str	r3, [r7, #20]

	while(internal_address + length > PAGE_SIZE) {
 8008d14:	e016      	b.n	8008d44 <flash_write+0x42>
		uint32_t write_length = PAGE_SIZE - internal_address;
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8008d1c:	613b      	str	r3, [r7, #16]

		__flash_write_page(address, buffer, write_length);
 8008d1e:	693a      	ldr	r2, [r7, #16]
 8008d20:	68b9      	ldr	r1, [r7, #8]
 8008d22:	68f8      	ldr	r0, [r7, #12]
 8008d24:	f7ff ff9c 	bl	8008c60 <__flash_write_page>
		buffer += write_length;
 8008d28:	68ba      	ldr	r2, [r7, #8]
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	4413      	add	r3, r2
 8008d2e:	60bb      	str	r3, [r7, #8]
		address += write_length;
 8008d30:	68fa      	ldr	r2, [r7, #12]
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	4413      	add	r3, r2
 8008d36:	60fb      	str	r3, [r7, #12]
		length -= write_length;
 8008d38:	687a      	ldr	r2, [r7, #4]
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	1ad3      	subs	r3, r2, r3
 8008d3e:	607b      	str	r3, [r7, #4]

		internal_address = 0;
 8008d40:	2300      	movs	r3, #0
 8008d42:	617b      	str	r3, [r7, #20]
	while(internal_address + length > PAGE_SIZE) {
 8008d44:	697a      	ldr	r2, [r7, #20]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	4413      	add	r3, r2
 8008d4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d4e:	d8e2      	bhi.n	8008d16 <flash_write+0x14>
	}

	__flash_write_page(address, buffer, length);
 8008d50:	687a      	ldr	r2, [r7, #4]
 8008d52:	68b9      	ldr	r1, [r7, #8]
 8008d54:	68f8      	ldr	r0, [r7, #12]
 8008d56:	f7ff ff83 	bl	8008c60 <__flash_write_page>
}
 8008d5a:	bf00      	nop
 8008d5c:	3718      	adds	r7, #24
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}

08008d62 <__flash_erase>:


   }
}

void __flash_erase(uint32_t instruction, uint32_t address) {
 8008d62:	b5b0      	push	{r4, r5, r7, lr}
 8008d64:	b0a0      	sub	sp, #128	; 0x80
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	63f8      	str	r0, [r7, #60]	; 0x3c
 8008d6a:	63b9      	str	r1, [r7, #56]	; 0x38

	__write_enable_latch();
 8008d6c:	f7ff fed9 	bl	8008b22 <__write_enable_latch>


	Command cmd = get_default_command();
 8008d70:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008d74:	4618      	mov	r0, r3
 8008d76:	f000 f847 	bl	8008e08 <get_default_command>
	with_address(&cmd, address);
 8008d7a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008d7e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008d80:	4618      	mov	r0, r3
 8008d82:	f000 f861 	bl	8008e48 <with_address>


	if(!qspi_run(&cmd, instruction)) {
 8008d86:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008d8a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f000 f883 	bl	8008e98 <qspi_run>
	}

	/*
	 * Checks if the controller is ready to proceed to the next command
	 */
	cmd = get_default_command();
 8008d92:	463b      	mov	r3, r7
 8008d94:	4618      	mov	r0, r3
 8008d96:	f000 f837 	bl	8008e08 <get_default_command>
 8008d9a:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8008d9e:	463d      	mov	r5, r7
 8008da0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008da2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008da4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008da6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008da8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008daa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008dac:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008db0:	e884 0003 	stmia.w	r4, {r0, r1}
	with_data(&cmd, 1);
 8008db4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008db8:	2101      	movs	r1, #1
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f000 f85a 	bl	8008e74 <with_data>

	if(!qspi_poll(&cmd, READ_FLAG_STATUS_REGISTER, 7, true)) {
 8008dc0:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	2207      	movs	r2, #7
 8008dc8:	2170      	movs	r1, #112	; 0x70
 8008dca:	f000 f881 	bl	8008ed0 <qspi_poll>
	}

	/*
	 * Checks if the protection fault flag is set
	 */
	uint8_t flags = __read_flags();
 8008dce:	f7ff fe8b 	bl	8008ae8 <__read_flags>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	if(flags & (1 << 5)) {
 8008dd8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8008ddc:	f003 0320 	and.w	r3, r3, #32
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d001      	beq.n	8008de8 <__flash_erase+0x86>
		__write_disable_latch(); // Manually reset the latch
 8008de4:	f7ff fed6 	bl	8008b94 <__write_disable_latch>


	}
}
 8008de8:	bf00      	nop
 8008dea:	3780      	adds	r7, #128	; 0x80
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bdb0      	pop	{r4, r5, r7, pc}

08008df0 <flash_erase_subsector>:

/*
 * Erases the whole sub-sector represented by the provided address.
 * The address may be any of those within the sub-sector.
 */
void flash_erase_subsector(uint32_t address) {
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b082      	sub	sp, #8
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
	__flash_erase(ERASE_SUBSECTOR, address);
 8008df8:	6879      	ldr	r1, [r7, #4]
 8008dfa:	2020      	movs	r0, #32
 8008dfc:	f7ff ffb1 	bl	8008d62 <__flash_erase>
}
 8008e00:	bf00      	nop
 8008e02:	3708      	adds	r7, #8
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <get_default_command>:
#include "io_driver.h"




Command get_default_command() {
 8008e08:	b5b0      	push	{r4, r5, r7, lr}
 8008e0a:	b090      	sub	sp, #64	; 0x40
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
	Command command = {
 8008e10:	f107 0308 	add.w	r3, r7, #8
 8008e14:	2238      	movs	r2, #56	; 0x38
 8008e16:	2100      	movs	r1, #0
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f002 f937 	bl	800b08c <memset>
 8008e1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e22:	623b      	str	r3, [r7, #32]
			.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY,
			.SIOOMode = QSPI_SIOO_INST_EVERY_CMD
		}
	};

	return command;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	461d      	mov	r5, r3
 8008e28:	f107 0408 	add.w	r4, r7, #8
 8008e2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008e2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008e30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008e32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008e34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008e36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008e38:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008e3c:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	3740      	adds	r7, #64	; 0x40
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bdb0      	pop	{r4, r5, r7, pc}

08008e48 <with_address>:

/*
 * The two following functions enable the programmer to build a QSPI command very easily.
 */
void with_address(Command* cmd, uint32_t address) {
 8008e48:	b480      	push	{r7}
 8008e4a:	b083      	sub	sp, #12
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	6039      	str	r1, [r7, #0]
	cmd->qspi_command.AddressMode = QSPI_ADDRESS_1_LINE;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008e58:	61da      	str	r2, [r3, #28]
	cmd->qspi_command.AddressSize = QSPI_ADDRESS_24_BITS;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008e60:	60da      	str	r2, [r3, #12]
	cmd->qspi_command.Address = address;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	683a      	ldr	r2, [r7, #0]
 8008e66:	605a      	str	r2, [r3, #4]
}
 8008e68:	bf00      	nop
 8008e6a:	370c      	adds	r7, #12
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e72:	4770      	bx	lr

08008e74 <with_data>:

void with_data(Command* cmd, uint32_t length) {
 8008e74:	b480      	push	{r7}
 8008e76:	b083      	sub	sp, #12
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	6039      	str	r1, [r7, #0]
	cmd->qspi_command.DataMode = QSPI_DATA_1_LINE;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008e84:	625a      	str	r2, [r3, #36]	; 0x24
	cmd->qspi_command.NbData = length;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	683a      	ldr	r2, [r7, #0]
 8008e8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008e8c:	bf00      	nop
 8008e8e:	370c      	adds	r7, #12
 8008e90:	46bd      	mov	sp, r7
 8008e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e96:	4770      	bx	lr

08008e98 <qspi_run>:


/*
 * Higher-level abstraction layer for the QSPI interface.
 */
bool qspi_run(Command* cmd, uint32_t instruction) {
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b082      	sub	sp, #8
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	6039      	str	r1, [r7, #0]
	cmd->qspi_command.Instruction = instruction;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	683a      	ldr	r2, [r7, #0]
 8008ea6:	601a      	str	r2, [r3, #0]
	return HAL_QSPI_Command(&hqspi, &(cmd->qspi_command), IO_TIMEOUT) == HAL_OK;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008eae:	4619      	mov	r1, r3
 8008eb0:	4806      	ldr	r0, [pc, #24]	; (8008ecc <qspi_run+0x34>)
 8008eb2:	f7fc fbb7 	bl	8005624 <HAL_QSPI_Command>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	bf0c      	ite	eq
 8008ebc:	2301      	moveq	r3, #1
 8008ebe:	2300      	movne	r3, #0
 8008ec0:	b2db      	uxtb	r3, r3
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3708      	adds	r7, #8
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}
 8008eca:	bf00      	nop
 8008ecc:	20006b0c 	.word	0x20006b0c

08008ed0 <qspi_poll>:

bool qspi_poll(Command* cmd, uint32_t instruction, uint8_t bit, bool value) {
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b08a      	sub	sp, #40	; 0x28
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	60f8      	str	r0, [r7, #12]
 8008ed8:	60b9      	str	r1, [r7, #8]
 8008eda:	4611      	mov	r1, r2
 8008edc:	461a      	mov	r2, r3
 8008ede:	460b      	mov	r3, r1
 8008ee0:	71fb      	strb	r3, [r7, #7]
 8008ee2:	4613      	mov	r3, r2
 8008ee4:	71bb      	strb	r3, [r7, #6]
	QSPI_AutoPollingTypeDef poller;

	poller.MatchMode = QSPI_MATCH_MODE_AND;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	623b      	str	r3, [r7, #32]
	poller.StatusBytesSize = 1;
 8008eea:	2301      	movs	r3, #1
 8008eec:	61fb      	str	r3, [r7, #28]
	poller.Interval = 0x10;
 8008eee:	2310      	movs	r3, #16
 8008ef0:	61bb      	str	r3, [r7, #24]
	poller.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8008ef2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008ef6:	627b      	str	r3, [r7, #36]	; 0x24
	poller.Match = value << bit;
 8008ef8:	79ba      	ldrb	r2, [r7, #6]
 8008efa:	79fb      	ldrb	r3, [r7, #7]
 8008efc:	fa02 f303 	lsl.w	r3, r2, r3
 8008f00:	613b      	str	r3, [r7, #16]
	poller.Mask = 1 << bit;
 8008f02:	79fb      	ldrb	r3, [r7, #7]
 8008f04:	2201      	movs	r2, #1
 8008f06:	fa02 f303 	lsl.w	r3, r2, r3
 8008f0a:	617b      	str	r3, [r7, #20]

	cmd->qspi_command.Instruction = instruction;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	68ba      	ldr	r2, [r7, #8]
 8008f10:	601a      	str	r2, [r3, #0]

	return HAL_QSPI_AutoPolling(&hqspi, &(cmd->qspi_command), &poller, IO_TIMEOUT) == HAL_OK;
 8008f12:	68f9      	ldr	r1, [r7, #12]
 8008f14:	f107 0210 	add.w	r2, r7, #16
 8008f18:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8008f1c:	4806      	ldr	r0, [pc, #24]	; (8008f38 <qspi_poll+0x68>)
 8008f1e:	f7fc fd18 	bl	8005952 <HAL_QSPI_AutoPolling>
 8008f22:	4603      	mov	r3, r0
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	bf0c      	ite	eq
 8008f28:	2301      	moveq	r3, #1
 8008f2a:	2300      	movne	r3, #0
 8008f2c:	b2db      	uxtb	r3, r3
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3728      	adds	r7, #40	; 0x28
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}
 8008f36:	bf00      	nop
 8008f38:	20006b0c 	.word	0x20006b0c

08008f3c <qspi_transmit>:

bool qspi_transmit(uint8_t* buffer) {
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b082      	sub	sp, #8
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
	return HAL_QSPI_Transmit(&hqspi, buffer, IO_TIMEOUT) == HAL_OK;
 8008f44:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008f48:	6879      	ldr	r1, [r7, #4]
 8008f4a:	4806      	ldr	r0, [pc, #24]	; (8008f64 <qspi_transmit+0x28>)
 8008f4c:	f7fc fbc8 	bl	80056e0 <HAL_QSPI_Transmit>
 8008f50:	4603      	mov	r3, r0
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	bf0c      	ite	eq
 8008f56:	2301      	moveq	r3, #1
 8008f58:	2300      	movne	r3, #0
 8008f5a:	b2db      	uxtb	r3, r3
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3708      	adds	r7, #8
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}
 8008f64:	20006b0c 	.word	0x20006b0c

08008f68 <qspi_receive>:

bool qspi_receive(uint8_t* buffer) {
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b082      	sub	sp, #8
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
	return HAL_QSPI_Receive(&hqspi, buffer, IO_TIMEOUT) == HAL_OK;
 8008f70:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008f74:	6879      	ldr	r1, [r7, #4]
 8008f76:	4806      	ldr	r0, [pc, #24]	; (8008f90 <qspi_receive+0x28>)
 8008f78:	f7fc fc49 	bl	800580e <HAL_QSPI_Receive>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	bf0c      	ite	eq
 8008f82:	2301      	moveq	r3, #1
 8008f84:	2300      	movne	r3, #0
 8008f86:	b2db      	uxtb	r3, r3
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3708      	adds	r7, #8
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}
 8008f90:	20006b0c 	.word	0x20006b0c

08008f94 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b085      	sub	sp, #20
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008fa2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008fa6:	2b84      	cmp	r3, #132	; 0x84
 8008fa8:	d005      	beq.n	8008fb6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008faa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	4413      	add	r3, r2
 8008fb2:	3303      	adds	r3, #3
 8008fb4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3714      	adds	r7, #20
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr

08008fc4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008fc8:	f000 ffba 	bl	8009f40 <vTaskStartScheduler>
  
  return osOK;
 8008fcc:	2300      	movs	r3, #0
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	bd80      	pop	{r7, pc}

08008fd2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008fd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fd4:	b089      	sub	sp, #36	; 0x24
 8008fd6:	af04      	add	r7, sp, #16
 8008fd8:	6078      	str	r0, [r7, #4]
 8008fda:	6039      	str	r1, [r7, #0]
      return NULL;
    } 
  }
#elif( configSUPPORT_STATIC_ALLOCATION == 1 )

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	685c      	ldr	r4, [r3, #4]
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681d      	ldr	r5, [r3, #0]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	691e      	ldr	r6, [r3, #16]
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f7ff ffd0 	bl	8008f94 <makeFreeRtosPriority>
 8008ff4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	695b      	ldr	r3, [r3, #20]
 8008ffa:	687a      	ldr	r2, [r7, #4]
 8008ffc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008ffe:	9202      	str	r2, [sp, #8]
 8009000:	9301      	str	r3, [sp, #4]
 8009002:	9100      	str	r1, [sp, #0]
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	4632      	mov	r2, r6
 8009008:	4629      	mov	r1, r5
 800900a:	4620      	mov	r0, r4
 800900c:	f000 fd98 	bl	8009b40 <xTaskCreateStatic>
 8009010:	60f8      	str	r0, [r7, #12]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009012:	68fb      	ldr	r3, [r7, #12]
}
 8009014:	4618      	mov	r0, r3
 8009016:	3714      	adds	r7, #20
 8009018:	46bd      	mov	sp, r7
 800901a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800901c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b084      	sub	sp, #16
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d001      	beq.n	8009032 <osDelay+0x16>
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	e000      	b.n	8009034 <osDelay+0x18>
 8009032:	2301      	movs	r3, #1
 8009034:	4618      	mov	r0, r3
 8009036:	f000 ff4f 	bl	8009ed8 <vTaskDelay>
  
  return osOK;
 800903a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800903c:	4618      	mov	r0, r3
 800903e:	3710      	adds	r7, #16
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}

08009044 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009044:	b480      	push	{r7}
 8009046:	b083      	sub	sp, #12
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f103 0208 	add.w	r2, r3, #8
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800905c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f103 0208 	add.w	r2, r3, #8
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f103 0208 	add.w	r2, r3, #8
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2200      	movs	r2, #0
 8009076:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009078:	bf00      	nop
 800907a:	370c      	adds	r7, #12
 800907c:	46bd      	mov	sp, r7
 800907e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009082:	4770      	bx	lr

08009084 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009084:	b480      	push	{r7}
 8009086:	b083      	sub	sp, #12
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2200      	movs	r2, #0
 8009090:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009092:	bf00      	nop
 8009094:	370c      	adds	r7, #12
 8009096:	46bd      	mov	sp, r7
 8009098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909c:	4770      	bx	lr

0800909e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800909e:	b480      	push	{r7}
 80090a0:	b085      	sub	sp, #20
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	6078      	str	r0, [r7, #4]
 80090a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	685b      	ldr	r3, [r3, #4]
 80090ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	68fa      	ldr	r2, [r7, #12]
 80090b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	689a      	ldr	r2, [r3, #8]
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	689b      	ldr	r3, [r3, #8]
 80090c0:	683a      	ldr	r2, [r7, #0]
 80090c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	683a      	ldr	r2, [r7, #0]
 80090c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	687a      	ldr	r2, [r7, #4]
 80090ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	1c5a      	adds	r2, r3, #1
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	601a      	str	r2, [r3, #0]
}
 80090da:	bf00      	nop
 80090dc:	3714      	adds	r7, #20
 80090de:	46bd      	mov	sp, r7
 80090e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e4:	4770      	bx	lr

080090e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80090e6:	b480      	push	{r7}
 80090e8:	b085      	sub	sp, #20
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	6078      	str	r0, [r7, #4]
 80090ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80090fc:	d103      	bne.n	8009106 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	691b      	ldr	r3, [r3, #16]
 8009102:	60fb      	str	r3, [r7, #12]
 8009104:	e00c      	b.n	8009120 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	3308      	adds	r3, #8
 800910a:	60fb      	str	r3, [r7, #12]
 800910c:	e002      	b.n	8009114 <vListInsert+0x2e>
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	60fb      	str	r3, [r7, #12]
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	68ba      	ldr	r2, [r7, #8]
 800911c:	429a      	cmp	r2, r3
 800911e:	d2f6      	bcs.n	800910e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	685a      	ldr	r2, [r3, #4]
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	685b      	ldr	r3, [r3, #4]
 800912c:	683a      	ldr	r2, [r7, #0]
 800912e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	68fa      	ldr	r2, [r7, #12]
 8009134:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	683a      	ldr	r2, [r7, #0]
 800913a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	687a      	ldr	r2, [r7, #4]
 8009140:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	1c5a      	adds	r2, r3, #1
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	601a      	str	r2, [r3, #0]
}
 800914c:	bf00      	nop
 800914e:	3714      	adds	r7, #20
 8009150:	46bd      	mov	sp, r7
 8009152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009156:	4770      	bx	lr

08009158 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009158:	b480      	push	{r7}
 800915a:	b085      	sub	sp, #20
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	691b      	ldr	r3, [r3, #16]
 8009164:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	685b      	ldr	r3, [r3, #4]
 800916a:	687a      	ldr	r2, [r7, #4]
 800916c:	6892      	ldr	r2, [r2, #8]
 800916e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	689b      	ldr	r3, [r3, #8]
 8009174:	687a      	ldr	r2, [r7, #4]
 8009176:	6852      	ldr	r2, [r2, #4]
 8009178:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	687a      	ldr	r2, [r7, #4]
 8009180:	429a      	cmp	r2, r3
 8009182:	d103      	bne.n	800918c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	689a      	ldr	r2, [r3, #8]
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2200      	movs	r2, #0
 8009190:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	1e5a      	subs	r2, r3, #1
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	3714      	adds	r7, #20
 80091a4:	46bd      	mov	sp, r7
 80091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091aa:	4770      	bx	lr

080091ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b084      	sub	sp, #16
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d10a      	bne.n	80091d6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80091c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c4:	f383 8811 	msr	BASEPRI, r3
 80091c8:	f3bf 8f6f 	isb	sy
 80091cc:	f3bf 8f4f 	dsb	sy
 80091d0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80091d2:	bf00      	nop
 80091d4:	e7fe      	b.n	80091d4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80091d6:	f001 fe05 	bl	800ade4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681a      	ldr	r2, [r3, #0]
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091e2:	68f9      	ldr	r1, [r7, #12]
 80091e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80091e6:	fb01 f303 	mul.w	r3, r1, r3
 80091ea:	441a      	add	r2, r3
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	2200      	movs	r2, #0
 80091f4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681a      	ldr	r2, [r3, #0]
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681a      	ldr	r2, [r3, #0]
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009206:	3b01      	subs	r3, #1
 8009208:	68f9      	ldr	r1, [r7, #12]
 800920a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800920c:	fb01 f303 	mul.w	r3, r1, r3
 8009210:	441a      	add	r2, r3
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	22ff      	movs	r2, #255	; 0xff
 800921a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	22ff      	movs	r2, #255	; 0xff
 8009222:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d114      	bne.n	8009256 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	691b      	ldr	r3, [r3, #16]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d01a      	beq.n	800926a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	3310      	adds	r3, #16
 8009238:	4618      	mov	r0, r3
 800923a:	f001 f8ef 	bl	800a41c <xTaskRemoveFromEventList>
 800923e:	4603      	mov	r3, r0
 8009240:	2b00      	cmp	r3, #0
 8009242:	d012      	beq.n	800926a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009244:	4b0c      	ldr	r3, [pc, #48]	; (8009278 <xQueueGenericReset+0xcc>)
 8009246:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800924a:	601a      	str	r2, [r3, #0]
 800924c:	f3bf 8f4f 	dsb	sy
 8009250:	f3bf 8f6f 	isb	sy
 8009254:	e009      	b.n	800926a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	3310      	adds	r3, #16
 800925a:	4618      	mov	r0, r3
 800925c:	f7ff fef2 	bl	8009044 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	3324      	adds	r3, #36	; 0x24
 8009264:	4618      	mov	r0, r3
 8009266:	f7ff feed 	bl	8009044 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800926a:	f001 fdeb 	bl	800ae44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800926e:	2301      	movs	r3, #1
}
 8009270:	4618      	mov	r0, r3
 8009272:	3710      	adds	r7, #16
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}
 8009278:	e000ed04 	.word	0xe000ed04

0800927c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800927c:	b580      	push	{r7, lr}
 800927e:	b08e      	sub	sp, #56	; 0x38
 8009280:	af02      	add	r7, sp, #8
 8009282:	60f8      	str	r0, [r7, #12]
 8009284:	60b9      	str	r1, [r7, #8]
 8009286:	607a      	str	r2, [r7, #4]
 8009288:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d10a      	bne.n	80092a6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009294:	f383 8811 	msr	BASEPRI, r3
 8009298:	f3bf 8f6f 	isb	sy
 800929c:	f3bf 8f4f 	dsb	sy
 80092a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80092a2:	bf00      	nop
 80092a4:	e7fe      	b.n	80092a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d10a      	bne.n	80092c2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80092ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b0:	f383 8811 	msr	BASEPRI, r3
 80092b4:	f3bf 8f6f 	isb	sy
 80092b8:	f3bf 8f4f 	dsb	sy
 80092bc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80092be:	bf00      	nop
 80092c0:	e7fe      	b.n	80092c0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d002      	beq.n	80092ce <xQueueGenericCreateStatic+0x52>
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d001      	beq.n	80092d2 <xQueueGenericCreateStatic+0x56>
 80092ce:	2301      	movs	r3, #1
 80092d0:	e000      	b.n	80092d4 <xQueueGenericCreateStatic+0x58>
 80092d2:	2300      	movs	r3, #0
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d10a      	bne.n	80092ee <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80092d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092dc:	f383 8811 	msr	BASEPRI, r3
 80092e0:	f3bf 8f6f 	isb	sy
 80092e4:	f3bf 8f4f 	dsb	sy
 80092e8:	623b      	str	r3, [r7, #32]
}
 80092ea:	bf00      	nop
 80092ec:	e7fe      	b.n	80092ec <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d102      	bne.n	80092fa <xQueueGenericCreateStatic+0x7e>
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d101      	bne.n	80092fe <xQueueGenericCreateStatic+0x82>
 80092fa:	2301      	movs	r3, #1
 80092fc:	e000      	b.n	8009300 <xQueueGenericCreateStatic+0x84>
 80092fe:	2300      	movs	r3, #0
 8009300:	2b00      	cmp	r3, #0
 8009302:	d10a      	bne.n	800931a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009308:	f383 8811 	msr	BASEPRI, r3
 800930c:	f3bf 8f6f 	isb	sy
 8009310:	f3bf 8f4f 	dsb	sy
 8009314:	61fb      	str	r3, [r7, #28]
}
 8009316:	bf00      	nop
 8009318:	e7fe      	b.n	8009318 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800931a:	2348      	movs	r3, #72	; 0x48
 800931c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	2b48      	cmp	r3, #72	; 0x48
 8009322:	d00a      	beq.n	800933a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009328:	f383 8811 	msr	BASEPRI, r3
 800932c:	f3bf 8f6f 	isb	sy
 8009330:	f3bf 8f4f 	dsb	sy
 8009334:	61bb      	str	r3, [r7, #24]
}
 8009336:	bf00      	nop
 8009338:	e7fe      	b.n	8009338 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800933a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009342:	2b00      	cmp	r3, #0
 8009344:	d009      	beq.n	800935a <xQueueGenericCreateStatic+0xde>
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009346:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800934a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800934c:	9300      	str	r3, [sp, #0]
 800934e:	4613      	mov	r3, r2
 8009350:	687a      	ldr	r2, [r7, #4]
 8009352:	68b9      	ldr	r1, [r7, #8]
 8009354:	68f8      	ldr	r0, [r7, #12]
 8009356:	f000 f805 	bl	8009364 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800935a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800935c:	4618      	mov	r0, r3
 800935e:	3730      	adds	r7, #48	; 0x30
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}

08009364 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b084      	sub	sp, #16
 8009368:	af00      	add	r7, sp, #0
 800936a:	60f8      	str	r0, [r7, #12]
 800936c:	60b9      	str	r1, [r7, #8]
 800936e:	607a      	str	r2, [r7, #4]
 8009370:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d103      	bne.n	8009380 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009378:	69bb      	ldr	r3, [r7, #24]
 800937a:	69ba      	ldr	r2, [r7, #24]
 800937c:	601a      	str	r2, [r3, #0]
 800937e:	e002      	b.n	8009386 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009380:	69bb      	ldr	r3, [r7, #24]
 8009382:	687a      	ldr	r2, [r7, #4]
 8009384:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009386:	69bb      	ldr	r3, [r7, #24]
 8009388:	68fa      	ldr	r2, [r7, #12]
 800938a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800938c:	69bb      	ldr	r3, [r7, #24]
 800938e:	68ba      	ldr	r2, [r7, #8]
 8009390:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009392:	2101      	movs	r1, #1
 8009394:	69b8      	ldr	r0, [r7, #24]
 8009396:	f7ff ff09 	bl	80091ac <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800939a:	bf00      	nop
 800939c:	3710      	adds	r7, #16
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}

080093a2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80093a2:	b580      	push	{r7, lr}
 80093a4:	b082      	sub	sp, #8
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d00e      	beq.n	80093ce <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2200      	movs	r2, #0
 80093b4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2200      	movs	r2, #0
 80093ba:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2200      	movs	r2, #0
 80093c0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80093c2:	2300      	movs	r3, #0
 80093c4:	2200      	movs	r2, #0
 80093c6:	2100      	movs	r1, #0
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f000 f81f 	bl	800940c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80093ce:	bf00      	nop
 80093d0:	3708      	adds	r7, #8
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}

080093d6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80093d6:	b580      	push	{r7, lr}
 80093d8:	b088      	sub	sp, #32
 80093da:	af02      	add	r7, sp, #8
 80093dc:	4603      	mov	r3, r0
 80093de:	6039      	str	r1, [r7, #0]
 80093e0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80093e2:	2301      	movs	r3, #1
 80093e4:	617b      	str	r3, [r7, #20]
 80093e6:	2300      	movs	r3, #0
 80093e8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80093ea:	79fb      	ldrb	r3, [r7, #7]
 80093ec:	9300      	str	r3, [sp, #0]
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	2200      	movs	r2, #0
 80093f2:	6939      	ldr	r1, [r7, #16]
 80093f4:	6978      	ldr	r0, [r7, #20]
 80093f6:	f7ff ff41 	bl	800927c <xQueueGenericCreateStatic>
 80093fa:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80093fc:	68f8      	ldr	r0, [r7, #12]
 80093fe:	f7ff ffd0 	bl	80093a2 <prvInitialiseMutex>

		return xNewQueue;
 8009402:	68fb      	ldr	r3, [r7, #12]
	}
 8009404:	4618      	mov	r0, r3
 8009406:	3718      	adds	r7, #24
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}

0800940c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b08e      	sub	sp, #56	; 0x38
 8009410:	af00      	add	r7, sp, #0
 8009412:	60f8      	str	r0, [r7, #12]
 8009414:	60b9      	str	r1, [r7, #8]
 8009416:	607a      	str	r2, [r7, #4]
 8009418:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800941a:	2300      	movs	r3, #0
 800941c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009424:	2b00      	cmp	r3, #0
 8009426:	d10a      	bne.n	800943e <xQueueGenericSend+0x32>
	__asm volatile
 8009428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800942c:	f383 8811 	msr	BASEPRI, r3
 8009430:	f3bf 8f6f 	isb	sy
 8009434:	f3bf 8f4f 	dsb	sy
 8009438:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800943a:	bf00      	nop
 800943c:	e7fe      	b.n	800943c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d103      	bne.n	800944c <xQueueGenericSend+0x40>
 8009444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009448:	2b00      	cmp	r3, #0
 800944a:	d101      	bne.n	8009450 <xQueueGenericSend+0x44>
 800944c:	2301      	movs	r3, #1
 800944e:	e000      	b.n	8009452 <xQueueGenericSend+0x46>
 8009450:	2300      	movs	r3, #0
 8009452:	2b00      	cmp	r3, #0
 8009454:	d10a      	bne.n	800946c <xQueueGenericSend+0x60>
	__asm volatile
 8009456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800945a:	f383 8811 	msr	BASEPRI, r3
 800945e:	f3bf 8f6f 	isb	sy
 8009462:	f3bf 8f4f 	dsb	sy
 8009466:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009468:	bf00      	nop
 800946a:	e7fe      	b.n	800946a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	2b02      	cmp	r3, #2
 8009470:	d103      	bne.n	800947a <xQueueGenericSend+0x6e>
 8009472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009476:	2b01      	cmp	r3, #1
 8009478:	d101      	bne.n	800947e <xQueueGenericSend+0x72>
 800947a:	2301      	movs	r3, #1
 800947c:	e000      	b.n	8009480 <xQueueGenericSend+0x74>
 800947e:	2300      	movs	r3, #0
 8009480:	2b00      	cmp	r3, #0
 8009482:	d10a      	bne.n	800949a <xQueueGenericSend+0x8e>
	__asm volatile
 8009484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009488:	f383 8811 	msr	BASEPRI, r3
 800948c:	f3bf 8f6f 	isb	sy
 8009490:	f3bf 8f4f 	dsb	sy
 8009494:	623b      	str	r3, [r7, #32]
}
 8009496:	bf00      	nop
 8009498:	e7fe      	b.n	8009498 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800949a:	f001 f955 	bl	800a748 <xTaskGetSchedulerState>
 800949e:	4603      	mov	r3, r0
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d102      	bne.n	80094aa <xQueueGenericSend+0x9e>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d101      	bne.n	80094ae <xQueueGenericSend+0xa2>
 80094aa:	2301      	movs	r3, #1
 80094ac:	e000      	b.n	80094b0 <xQueueGenericSend+0xa4>
 80094ae:	2300      	movs	r3, #0
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d10a      	bne.n	80094ca <xQueueGenericSend+0xbe>
	__asm volatile
 80094b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b8:	f383 8811 	msr	BASEPRI, r3
 80094bc:	f3bf 8f6f 	isb	sy
 80094c0:	f3bf 8f4f 	dsb	sy
 80094c4:	61fb      	str	r3, [r7, #28]
}
 80094c6:	bf00      	nop
 80094c8:	e7fe      	b.n	80094c8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80094ca:	f001 fc8b 	bl	800ade4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80094ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094d6:	429a      	cmp	r2, r3
 80094d8:	d302      	bcc.n	80094e0 <xQueueGenericSend+0xd4>
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	2b02      	cmp	r3, #2
 80094de:	d129      	bne.n	8009534 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80094e0:	683a      	ldr	r2, [r7, #0]
 80094e2:	68b9      	ldr	r1, [r7, #8]
 80094e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80094e6:	f000 fa41 	bl	800996c <prvCopyDataToQueue>
 80094ea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80094ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d010      	beq.n	8009516 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80094f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094f6:	3324      	adds	r3, #36	; 0x24
 80094f8:	4618      	mov	r0, r3
 80094fa:	f000 ff8f 	bl	800a41c <xTaskRemoveFromEventList>
 80094fe:	4603      	mov	r3, r0
 8009500:	2b00      	cmp	r3, #0
 8009502:	d013      	beq.n	800952c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009504:	4b3f      	ldr	r3, [pc, #252]	; (8009604 <xQueueGenericSend+0x1f8>)
 8009506:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800950a:	601a      	str	r2, [r3, #0]
 800950c:	f3bf 8f4f 	dsb	sy
 8009510:	f3bf 8f6f 	isb	sy
 8009514:	e00a      	b.n	800952c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009518:	2b00      	cmp	r3, #0
 800951a:	d007      	beq.n	800952c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800951c:	4b39      	ldr	r3, [pc, #228]	; (8009604 <xQueueGenericSend+0x1f8>)
 800951e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009522:	601a      	str	r2, [r3, #0]
 8009524:	f3bf 8f4f 	dsb	sy
 8009528:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800952c:	f001 fc8a 	bl	800ae44 <vPortExitCritical>
				return pdPASS;
 8009530:	2301      	movs	r3, #1
 8009532:	e063      	b.n	80095fc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d103      	bne.n	8009542 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800953a:	f001 fc83 	bl	800ae44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800953e:	2300      	movs	r3, #0
 8009540:	e05c      	b.n	80095fc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009544:	2b00      	cmp	r3, #0
 8009546:	d106      	bne.n	8009556 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009548:	f107 0314 	add.w	r3, r7, #20
 800954c:	4618      	mov	r0, r3
 800954e:	f000 ffc7 	bl	800a4e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009552:	2301      	movs	r3, #1
 8009554:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009556:	f001 fc75 	bl	800ae44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800955a:	f000 fd53 	bl	800a004 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800955e:	f001 fc41 	bl	800ade4 <vPortEnterCritical>
 8009562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009564:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009568:	b25b      	sxtb	r3, r3
 800956a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800956e:	d103      	bne.n	8009578 <xQueueGenericSend+0x16c>
 8009570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009572:	2200      	movs	r2, #0
 8009574:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800957a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800957e:	b25b      	sxtb	r3, r3
 8009580:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009584:	d103      	bne.n	800958e <xQueueGenericSend+0x182>
 8009586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009588:	2200      	movs	r2, #0
 800958a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800958e:	f001 fc59 	bl	800ae44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009592:	1d3a      	adds	r2, r7, #4
 8009594:	f107 0314 	add.w	r3, r7, #20
 8009598:	4611      	mov	r1, r2
 800959a:	4618      	mov	r0, r3
 800959c:	f000 ffb6 	bl	800a50c <xTaskCheckForTimeOut>
 80095a0:	4603      	mov	r3, r0
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d124      	bne.n	80095f0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80095a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80095a8:	f000 fab2 	bl	8009b10 <prvIsQueueFull>
 80095ac:	4603      	mov	r3, r0
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d018      	beq.n	80095e4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80095b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095b4:	3310      	adds	r3, #16
 80095b6:	687a      	ldr	r2, [r7, #4]
 80095b8:	4611      	mov	r1, r2
 80095ba:	4618      	mov	r0, r3
 80095bc:	f000 ff0a 	bl	800a3d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80095c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80095c2:	f000 fa3d 	bl	8009a40 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80095c6:	f000 fd2b 	bl	800a020 <xTaskResumeAll>
 80095ca:	4603      	mov	r3, r0
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	f47f af7c 	bne.w	80094ca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80095d2:	4b0c      	ldr	r3, [pc, #48]	; (8009604 <xQueueGenericSend+0x1f8>)
 80095d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095d8:	601a      	str	r2, [r3, #0]
 80095da:	f3bf 8f4f 	dsb	sy
 80095de:	f3bf 8f6f 	isb	sy
 80095e2:	e772      	b.n	80094ca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80095e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80095e6:	f000 fa2b 	bl	8009a40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80095ea:	f000 fd19 	bl	800a020 <xTaskResumeAll>
 80095ee:	e76c      	b.n	80094ca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80095f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80095f2:	f000 fa25 	bl	8009a40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80095f6:	f000 fd13 	bl	800a020 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80095fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	3738      	adds	r7, #56	; 0x38
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}
 8009604:	e000ed04 	.word	0xe000ed04

08009608 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b08e      	sub	sp, #56	; 0x38
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009618:	2b00      	cmp	r3, #0
 800961a:	d10a      	bne.n	8009632 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800961c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009620:	f383 8811 	msr	BASEPRI, r3
 8009624:	f3bf 8f6f 	isb	sy
 8009628:	f3bf 8f4f 	dsb	sy
 800962c:	623b      	str	r3, [r7, #32]
}
 800962e:	bf00      	nop
 8009630:	e7fe      	b.n	8009630 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009636:	2b00      	cmp	r3, #0
 8009638:	d00a      	beq.n	8009650 <xQueueGiveFromISR+0x48>
	__asm volatile
 800963a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800963e:	f383 8811 	msr	BASEPRI, r3
 8009642:	f3bf 8f6f 	isb	sy
 8009646:	f3bf 8f4f 	dsb	sy
 800964a:	61fb      	str	r3, [r7, #28]
}
 800964c:	bf00      	nop
 800964e:	e7fe      	b.n	800964e <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d103      	bne.n	8009660 <xQueueGiveFromISR+0x58>
 8009658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800965a:	689b      	ldr	r3, [r3, #8]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d101      	bne.n	8009664 <xQueueGiveFromISR+0x5c>
 8009660:	2301      	movs	r3, #1
 8009662:	e000      	b.n	8009666 <xQueueGiveFromISR+0x5e>
 8009664:	2300      	movs	r3, #0
 8009666:	2b00      	cmp	r3, #0
 8009668:	d10a      	bne.n	8009680 <xQueueGiveFromISR+0x78>
	__asm volatile
 800966a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800966e:	f383 8811 	msr	BASEPRI, r3
 8009672:	f3bf 8f6f 	isb	sy
 8009676:	f3bf 8f4f 	dsb	sy
 800967a:	61bb      	str	r3, [r7, #24]
}
 800967c:	bf00      	nop
 800967e:	e7fe      	b.n	800967e <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009680:	f001 fc92 	bl	800afa8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009684:	f3ef 8211 	mrs	r2, BASEPRI
 8009688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800968c:	f383 8811 	msr	BASEPRI, r3
 8009690:	f3bf 8f6f 	isb	sy
 8009694:	f3bf 8f4f 	dsb	sy
 8009698:	617a      	str	r2, [r7, #20]
 800969a:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800969c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800969e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80096a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096a4:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80096a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80096ac:	429a      	cmp	r2, r3
 80096ae:	d22b      	bcs.n	8009708 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80096b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80096b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80096ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096bc:	1c5a      	adds	r2, r3, #1
 80096be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096c0:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80096c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80096c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80096ca:	d112      	bne.n	80096f2 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80096cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d016      	beq.n	8009702 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80096d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d6:	3324      	adds	r3, #36	; 0x24
 80096d8:	4618      	mov	r0, r3
 80096da:	f000 fe9f 	bl	800a41c <xTaskRemoveFromEventList>
 80096de:	4603      	mov	r3, r0
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d00e      	beq.n	8009702 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d00b      	beq.n	8009702 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	2201      	movs	r2, #1
 80096ee:	601a      	str	r2, [r3, #0]
 80096f0:	e007      	b.n	8009702 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80096f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096f6:	3301      	adds	r3, #1
 80096f8:	b2db      	uxtb	r3, r3
 80096fa:	b25a      	sxtb	r2, r3
 80096fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009702:	2301      	movs	r3, #1
 8009704:	637b      	str	r3, [r7, #52]	; 0x34
 8009706:	e001      	b.n	800970c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009708:	2300      	movs	r3, #0
 800970a:	637b      	str	r3, [r7, #52]	; 0x34
 800970c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800970e:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009716:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800971a:	4618      	mov	r0, r3
 800971c:	3738      	adds	r7, #56	; 0x38
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}
	...

08009724 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b08e      	sub	sp, #56	; 0x38
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
 800972c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800972e:	2300      	movs	r3, #0
 8009730:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009736:	2300      	movs	r3, #0
 8009738:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800973a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800973c:	2b00      	cmp	r3, #0
 800973e:	d10a      	bne.n	8009756 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8009740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009744:	f383 8811 	msr	BASEPRI, r3
 8009748:	f3bf 8f6f 	isb	sy
 800974c:	f3bf 8f4f 	dsb	sy
 8009750:	623b      	str	r3, [r7, #32]
}
 8009752:	bf00      	nop
 8009754:	e7fe      	b.n	8009754 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800975a:	2b00      	cmp	r3, #0
 800975c:	d00a      	beq.n	8009774 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800975e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009762:	f383 8811 	msr	BASEPRI, r3
 8009766:	f3bf 8f6f 	isb	sy
 800976a:	f3bf 8f4f 	dsb	sy
 800976e:	61fb      	str	r3, [r7, #28]
}
 8009770:	bf00      	nop
 8009772:	e7fe      	b.n	8009772 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009774:	f000 ffe8 	bl	800a748 <xTaskGetSchedulerState>
 8009778:	4603      	mov	r3, r0
 800977a:	2b00      	cmp	r3, #0
 800977c:	d102      	bne.n	8009784 <xQueueSemaphoreTake+0x60>
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d101      	bne.n	8009788 <xQueueSemaphoreTake+0x64>
 8009784:	2301      	movs	r3, #1
 8009786:	e000      	b.n	800978a <xQueueSemaphoreTake+0x66>
 8009788:	2300      	movs	r3, #0
 800978a:	2b00      	cmp	r3, #0
 800978c:	d10a      	bne.n	80097a4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800978e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009792:	f383 8811 	msr	BASEPRI, r3
 8009796:	f3bf 8f6f 	isb	sy
 800979a:	f3bf 8f4f 	dsb	sy
 800979e:	61bb      	str	r3, [r7, #24]
}
 80097a0:	bf00      	nop
 80097a2:	e7fe      	b.n	80097a2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80097a4:	f001 fb1e 	bl	800ade4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80097a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097ac:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80097ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d024      	beq.n	80097fe <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80097b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097b6:	1e5a      	subs	r2, r3, #1
 80097b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ba:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80097bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d104      	bne.n	80097ce <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80097c4:	f001 f968 	bl	800aa98 <pvTaskIncrementMutexHeldCount>
 80097c8:	4602      	mov	r2, r0
 80097ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097cc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80097ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097d0:	691b      	ldr	r3, [r3, #16]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d00f      	beq.n	80097f6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80097d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097d8:	3310      	adds	r3, #16
 80097da:	4618      	mov	r0, r3
 80097dc:	f000 fe1e 	bl	800a41c <xTaskRemoveFromEventList>
 80097e0:	4603      	mov	r3, r0
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d007      	beq.n	80097f6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80097e6:	4b54      	ldr	r3, [pc, #336]	; (8009938 <xQueueSemaphoreTake+0x214>)
 80097e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097ec:	601a      	str	r2, [r3, #0]
 80097ee:	f3bf 8f4f 	dsb	sy
 80097f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80097f6:	f001 fb25 	bl	800ae44 <vPortExitCritical>
				return pdPASS;
 80097fa:	2301      	movs	r3, #1
 80097fc:	e097      	b.n	800992e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d111      	bne.n	8009828 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009806:	2b00      	cmp	r3, #0
 8009808:	d00a      	beq.n	8009820 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800980a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800980e:	f383 8811 	msr	BASEPRI, r3
 8009812:	f3bf 8f6f 	isb	sy
 8009816:	f3bf 8f4f 	dsb	sy
 800981a:	617b      	str	r3, [r7, #20]
}
 800981c:	bf00      	nop
 800981e:	e7fe      	b.n	800981e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009820:	f001 fb10 	bl	800ae44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009824:	2300      	movs	r3, #0
 8009826:	e082      	b.n	800992e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800982a:	2b00      	cmp	r3, #0
 800982c:	d106      	bne.n	800983c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800982e:	f107 030c 	add.w	r3, r7, #12
 8009832:	4618      	mov	r0, r3
 8009834:	f000 fe54 	bl	800a4e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009838:	2301      	movs	r3, #1
 800983a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800983c:	f001 fb02 	bl	800ae44 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009840:	f000 fbe0 	bl	800a004 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009844:	f001 face 	bl	800ade4 <vPortEnterCritical>
 8009848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800984a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800984e:	b25b      	sxtb	r3, r3
 8009850:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009854:	d103      	bne.n	800985e <xQueueSemaphoreTake+0x13a>
 8009856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009858:	2200      	movs	r2, #0
 800985a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800985e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009860:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009864:	b25b      	sxtb	r3, r3
 8009866:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800986a:	d103      	bne.n	8009874 <xQueueSemaphoreTake+0x150>
 800986c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800986e:	2200      	movs	r2, #0
 8009870:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009874:	f001 fae6 	bl	800ae44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009878:	463a      	mov	r2, r7
 800987a:	f107 030c 	add.w	r3, r7, #12
 800987e:	4611      	mov	r1, r2
 8009880:	4618      	mov	r0, r3
 8009882:	f000 fe43 	bl	800a50c <xTaskCheckForTimeOut>
 8009886:	4603      	mov	r3, r0
 8009888:	2b00      	cmp	r3, #0
 800988a:	d132      	bne.n	80098f2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800988c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800988e:	f000 f929 	bl	8009ae4 <prvIsQueueEmpty>
 8009892:	4603      	mov	r3, r0
 8009894:	2b00      	cmp	r3, #0
 8009896:	d026      	beq.n	80098e6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d109      	bne.n	80098b4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80098a0:	f001 faa0 	bl	800ade4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80098a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098a6:	689b      	ldr	r3, [r3, #8]
 80098a8:	4618      	mov	r0, r3
 80098aa:	f000 ff6b 	bl	800a784 <xTaskPriorityInherit>
 80098ae:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80098b0:	f001 fac8 	bl	800ae44 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80098b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098b6:	3324      	adds	r3, #36	; 0x24
 80098b8:	683a      	ldr	r2, [r7, #0]
 80098ba:	4611      	mov	r1, r2
 80098bc:	4618      	mov	r0, r3
 80098be:	f000 fd89 	bl	800a3d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80098c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80098c4:	f000 f8bc 	bl	8009a40 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80098c8:	f000 fbaa 	bl	800a020 <xTaskResumeAll>
 80098cc:	4603      	mov	r3, r0
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	f47f af68 	bne.w	80097a4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80098d4:	4b18      	ldr	r3, [pc, #96]	; (8009938 <xQueueSemaphoreTake+0x214>)
 80098d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098da:	601a      	str	r2, [r3, #0]
 80098dc:	f3bf 8f4f 	dsb	sy
 80098e0:	f3bf 8f6f 	isb	sy
 80098e4:	e75e      	b.n	80097a4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80098e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80098e8:	f000 f8aa 	bl	8009a40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80098ec:	f000 fb98 	bl	800a020 <xTaskResumeAll>
 80098f0:	e758      	b.n	80097a4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80098f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80098f4:	f000 f8a4 	bl	8009a40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80098f8:	f000 fb92 	bl	800a020 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80098fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80098fe:	f000 f8f1 	bl	8009ae4 <prvIsQueueEmpty>
 8009902:	4603      	mov	r3, r0
 8009904:	2b00      	cmp	r3, #0
 8009906:	f43f af4d 	beq.w	80097a4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800990a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800990c:	2b00      	cmp	r3, #0
 800990e:	d00d      	beq.n	800992c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8009910:	f001 fa68 	bl	800ade4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009914:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009916:	f000 f811 	bl	800993c <prvGetDisinheritPriorityAfterTimeout>
 800991a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800991c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800991e:	689b      	ldr	r3, [r3, #8]
 8009920:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009922:	4618      	mov	r0, r3
 8009924:	f001 f82a 	bl	800a97c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009928:	f001 fa8c 	bl	800ae44 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800992c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800992e:	4618      	mov	r0, r3
 8009930:	3738      	adds	r7, #56	; 0x38
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}
 8009936:	bf00      	nop
 8009938:	e000ed04 	.word	0xe000ed04

0800993c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800993c:	b480      	push	{r7}
 800993e:	b085      	sub	sp, #20
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009948:	2b00      	cmp	r3, #0
 800994a:	d006      	beq.n	800995a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f1c3 0307 	rsb	r3, r3, #7
 8009956:	60fb      	str	r3, [r7, #12]
 8009958:	e001      	b.n	800995e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800995a:	2300      	movs	r3, #0
 800995c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800995e:	68fb      	ldr	r3, [r7, #12]
	}
 8009960:	4618      	mov	r0, r3
 8009962:	3714      	adds	r7, #20
 8009964:	46bd      	mov	sp, r7
 8009966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996a:	4770      	bx	lr

0800996c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b086      	sub	sp, #24
 8009970:	af00      	add	r7, sp, #0
 8009972:	60f8      	str	r0, [r7, #12]
 8009974:	60b9      	str	r1, [r7, #8]
 8009976:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009978:	2300      	movs	r3, #0
 800997a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009980:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009986:	2b00      	cmp	r3, #0
 8009988:	d10d      	bne.n	80099a6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d14d      	bne.n	8009a2e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	689b      	ldr	r3, [r3, #8]
 8009996:	4618      	mov	r0, r3
 8009998:	f000 ff6a 	bl	800a870 <xTaskPriorityDisinherit>
 800999c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	2200      	movs	r2, #0
 80099a2:	609a      	str	r2, [r3, #8]
 80099a4:	e043      	b.n	8009a2e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d119      	bne.n	80099e0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	6858      	ldr	r0, [r3, #4]
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099b4:	461a      	mov	r2, r3
 80099b6:	68b9      	ldr	r1, [r7, #8]
 80099b8:	f001 fb5a 	bl	800b070 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	685a      	ldr	r2, [r3, #4]
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099c4:	441a      	add	r2, r3
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	685a      	ldr	r2, [r3, #4]
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	689b      	ldr	r3, [r3, #8]
 80099d2:	429a      	cmp	r2, r3
 80099d4:	d32b      	bcc.n	8009a2e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681a      	ldr	r2, [r3, #0]
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	605a      	str	r2, [r3, #4]
 80099de:	e026      	b.n	8009a2e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	68d8      	ldr	r0, [r3, #12]
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099e8:	461a      	mov	r2, r3
 80099ea:	68b9      	ldr	r1, [r7, #8]
 80099ec:	f001 fb40 	bl	800b070 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	68da      	ldr	r2, [r3, #12]
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099f8:	425b      	negs	r3, r3
 80099fa:	441a      	add	r2, r3
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	68da      	ldr	r2, [r3, #12]
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	429a      	cmp	r2, r3
 8009a0a:	d207      	bcs.n	8009a1c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	689a      	ldr	r2, [r3, #8]
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a14:	425b      	negs	r3, r3
 8009a16:	441a      	add	r2, r3
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2b02      	cmp	r3, #2
 8009a20:	d105      	bne.n	8009a2e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009a22:	693b      	ldr	r3, [r7, #16]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d002      	beq.n	8009a2e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	3b01      	subs	r3, #1
 8009a2c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009a2e:	693b      	ldr	r3, [r7, #16]
 8009a30:	1c5a      	adds	r2, r3, #1
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009a36:	697b      	ldr	r3, [r7, #20]
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3718      	adds	r7, #24
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}

08009a40 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b084      	sub	sp, #16
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009a48:	f001 f9cc 	bl	800ade4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a52:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009a54:	e011      	b.n	8009a7a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d012      	beq.n	8009a84 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	3324      	adds	r3, #36	; 0x24
 8009a62:	4618      	mov	r0, r3
 8009a64:	f000 fcda 	bl	800a41c <xTaskRemoveFromEventList>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d001      	beq.n	8009a72 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009a6e:	f000 fdaf 	bl	800a5d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009a72:	7bfb      	ldrb	r3, [r7, #15]
 8009a74:	3b01      	subs	r3, #1
 8009a76:	b2db      	uxtb	r3, r3
 8009a78:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	dce9      	bgt.n	8009a56 <prvUnlockQueue+0x16>
 8009a82:	e000      	b.n	8009a86 <prvUnlockQueue+0x46>
					break;
 8009a84:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	22ff      	movs	r2, #255	; 0xff
 8009a8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009a8e:	f001 f9d9 	bl	800ae44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009a92:	f001 f9a7 	bl	800ade4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009a9c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009a9e:	e011      	b.n	8009ac4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	691b      	ldr	r3, [r3, #16]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d012      	beq.n	8009ace <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	3310      	adds	r3, #16
 8009aac:	4618      	mov	r0, r3
 8009aae:	f000 fcb5 	bl	800a41c <xTaskRemoveFromEventList>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d001      	beq.n	8009abc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009ab8:	f000 fd8a 	bl	800a5d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009abc:	7bbb      	ldrb	r3, [r7, #14]
 8009abe:	3b01      	subs	r3, #1
 8009ac0:	b2db      	uxtb	r3, r3
 8009ac2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009ac4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	dce9      	bgt.n	8009aa0 <prvUnlockQueue+0x60>
 8009acc:	e000      	b.n	8009ad0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009ace:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	22ff      	movs	r2, #255	; 0xff
 8009ad4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009ad8:	f001 f9b4 	bl	800ae44 <vPortExitCritical>
}
 8009adc:	bf00      	nop
 8009ade:	3710      	adds	r7, #16
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bd80      	pop	{r7, pc}

08009ae4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b084      	sub	sp, #16
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009aec:	f001 f97a 	bl	800ade4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d102      	bne.n	8009afe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009af8:	2301      	movs	r3, #1
 8009afa:	60fb      	str	r3, [r7, #12]
 8009afc:	e001      	b.n	8009b02 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009afe:	2300      	movs	r3, #0
 8009b00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009b02:	f001 f99f 	bl	800ae44 <vPortExitCritical>

	return xReturn;
 8009b06:	68fb      	ldr	r3, [r7, #12]
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3710      	adds	r7, #16
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}

08009b10 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b084      	sub	sp, #16
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009b18:	f001 f964 	bl	800ade4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b24:	429a      	cmp	r2, r3
 8009b26:	d102      	bne.n	8009b2e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009b28:	2301      	movs	r3, #1
 8009b2a:	60fb      	str	r3, [r7, #12]
 8009b2c:	e001      	b.n	8009b32 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009b32:	f001 f987 	bl	800ae44 <vPortExitCritical>

	return xReturn;
 8009b36:	68fb      	ldr	r3, [r7, #12]
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	3710      	adds	r7, #16
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}

08009b40 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b08e      	sub	sp, #56	; 0x38
 8009b44:	af04      	add	r7, sp, #16
 8009b46:	60f8      	str	r0, [r7, #12]
 8009b48:	60b9      	str	r1, [r7, #8]
 8009b4a:	607a      	str	r2, [r7, #4]
 8009b4c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d10a      	bne.n	8009b6a <xTaskCreateStatic+0x2a>
	__asm volatile
 8009b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b58:	f383 8811 	msr	BASEPRI, r3
 8009b5c:	f3bf 8f6f 	isb	sy
 8009b60:	f3bf 8f4f 	dsb	sy
 8009b64:	623b      	str	r3, [r7, #32]
}
 8009b66:	bf00      	nop
 8009b68:	e7fe      	b.n	8009b68 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d10a      	bne.n	8009b86 <xTaskCreateStatic+0x46>
	__asm volatile
 8009b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b74:	f383 8811 	msr	BASEPRI, r3
 8009b78:	f3bf 8f6f 	isb	sy
 8009b7c:	f3bf 8f4f 	dsb	sy
 8009b80:	61fb      	str	r3, [r7, #28]
}
 8009b82:	bf00      	nop
 8009b84:	e7fe      	b.n	8009b84 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009b86:	2358      	movs	r3, #88	; 0x58
 8009b88:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	2b58      	cmp	r3, #88	; 0x58
 8009b8e:	d00a      	beq.n	8009ba6 <xTaskCreateStatic+0x66>
	__asm volatile
 8009b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b94:	f383 8811 	msr	BASEPRI, r3
 8009b98:	f3bf 8f6f 	isb	sy
 8009b9c:	f3bf 8f4f 	dsb	sy
 8009ba0:	61bb      	str	r3, [r7, #24]
}
 8009ba2:	bf00      	nop
 8009ba4:	e7fe      	b.n	8009ba4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009ba6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d01a      	beq.n	8009be4 <xTaskCreateStatic+0xa4>
 8009bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d017      	beq.n	8009be4 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bb6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009bbc:	631a      	str	r2, [r3, #48]	; 0x30
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	9303      	str	r3, [sp, #12]
 8009bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc4:	9302      	str	r3, [sp, #8]
 8009bc6:	f107 0314 	add.w	r3, r7, #20
 8009bca:	9301      	str	r3, [sp, #4]
 8009bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bce:	9300      	str	r3, [sp, #0]
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	687a      	ldr	r2, [r7, #4]
 8009bd4:	68b9      	ldr	r1, [r7, #8]
 8009bd6:	68f8      	ldr	r0, [r7, #12]
 8009bd8:	f000 f80b 	bl	8009bf2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009bdc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009bde:	f000 f893 	bl	8009d08 <prvAddNewTaskToReadyList>
 8009be2:	e001      	b.n	8009be8 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8009be4:	2300      	movs	r3, #0
 8009be6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009be8:	697b      	ldr	r3, [r7, #20]
	}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3728      	adds	r7, #40	; 0x28
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}

08009bf2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009bf2:	b580      	push	{r7, lr}
 8009bf4:	b088      	sub	sp, #32
 8009bf6:	af00      	add	r7, sp, #0
 8009bf8:	60f8      	str	r0, [r7, #12]
 8009bfa:	60b9      	str	r1, [r7, #8]
 8009bfc:	607a      	str	r2, [r7, #4]
 8009bfe:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009c0a:	3b01      	subs	r3, #1
 8009c0c:	009b      	lsls	r3, r3, #2
 8009c0e:	4413      	add	r3, r2
 8009c10:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009c12:	69bb      	ldr	r3, [r7, #24]
 8009c14:	f023 0307 	bic.w	r3, r3, #7
 8009c18:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009c1a:	69bb      	ldr	r3, [r7, #24]
 8009c1c:	f003 0307 	and.w	r3, r3, #7
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d00a      	beq.n	8009c3a <prvInitialiseNewTask+0x48>
	__asm volatile
 8009c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c28:	f383 8811 	msr	BASEPRI, r3
 8009c2c:	f3bf 8f6f 	isb	sy
 8009c30:	f3bf 8f4f 	dsb	sy
 8009c34:	617b      	str	r3, [r7, #20]
}
 8009c36:	bf00      	nop
 8009c38:	e7fe      	b.n	8009c38 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d01f      	beq.n	8009c80 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009c40:	2300      	movs	r3, #0
 8009c42:	61fb      	str	r3, [r7, #28]
 8009c44:	e012      	b.n	8009c6c <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009c46:	68ba      	ldr	r2, [r7, #8]
 8009c48:	69fb      	ldr	r3, [r7, #28]
 8009c4a:	4413      	add	r3, r2
 8009c4c:	7819      	ldrb	r1, [r3, #0]
 8009c4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c50:	69fb      	ldr	r3, [r7, #28]
 8009c52:	4413      	add	r3, r2
 8009c54:	3334      	adds	r3, #52	; 0x34
 8009c56:	460a      	mov	r2, r1
 8009c58:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009c5a:	68ba      	ldr	r2, [r7, #8]
 8009c5c:	69fb      	ldr	r3, [r7, #28]
 8009c5e:	4413      	add	r3, r2
 8009c60:	781b      	ldrb	r3, [r3, #0]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d006      	beq.n	8009c74 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009c66:	69fb      	ldr	r3, [r7, #28]
 8009c68:	3301      	adds	r3, #1
 8009c6a:	61fb      	str	r3, [r7, #28]
 8009c6c:	69fb      	ldr	r3, [r7, #28]
 8009c6e:	2b0f      	cmp	r3, #15
 8009c70:	d9e9      	bls.n	8009c46 <prvInitialiseNewTask+0x54>
 8009c72:	e000      	b.n	8009c76 <prvInitialiseNewTask+0x84>
			{
				break;
 8009c74:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c78:	2200      	movs	r2, #0
 8009c7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009c7e:	e003      	b.n	8009c88 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c82:	2200      	movs	r2, #0
 8009c84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c8a:	2b06      	cmp	r3, #6
 8009c8c:	d901      	bls.n	8009c92 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009c8e:	2306      	movs	r3, #6
 8009c90:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c96:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c9c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca6:	3304      	adds	r3, #4
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f7ff f9eb 	bl	8009084 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb0:	3318      	adds	r3, #24
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	f7ff f9e6 	bl	8009084 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cbc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc0:	f1c3 0207 	rsb	r2, r3, #7
 8009cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cc6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ccc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8009cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cdc:	2200      	movs	r2, #0
 8009cde:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009ce2:	683a      	ldr	r2, [r7, #0]
 8009ce4:	68f9      	ldr	r1, [r7, #12]
 8009ce6:	69b8      	ldr	r0, [r7, #24]
 8009ce8:	f000 ff50 	bl	800ab8c <pxPortInitialiseStack>
 8009cec:	4602      	mov	r2, r0
 8009cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cf0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d002      	beq.n	8009cfe <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cfc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009cfe:	bf00      	nop
 8009d00:	3720      	adds	r7, #32
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}
	...

08009d08 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b082      	sub	sp, #8
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009d10:	f001 f868 	bl	800ade4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009d14:	4b2a      	ldr	r3, [pc, #168]	; (8009dc0 <prvAddNewTaskToReadyList+0xb8>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	3301      	adds	r3, #1
 8009d1a:	4a29      	ldr	r2, [pc, #164]	; (8009dc0 <prvAddNewTaskToReadyList+0xb8>)
 8009d1c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009d1e:	4b29      	ldr	r3, [pc, #164]	; (8009dc4 <prvAddNewTaskToReadyList+0xbc>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d109      	bne.n	8009d3a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009d26:	4a27      	ldr	r2, [pc, #156]	; (8009dc4 <prvAddNewTaskToReadyList+0xbc>)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009d2c:	4b24      	ldr	r3, [pc, #144]	; (8009dc0 <prvAddNewTaskToReadyList+0xb8>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	2b01      	cmp	r3, #1
 8009d32:	d110      	bne.n	8009d56 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009d34:	f000 fc70 	bl	800a618 <prvInitialiseTaskLists>
 8009d38:	e00d      	b.n	8009d56 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009d3a:	4b23      	ldr	r3, [pc, #140]	; (8009dc8 <prvAddNewTaskToReadyList+0xc0>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d109      	bne.n	8009d56 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009d42:	4b20      	ldr	r3, [pc, #128]	; (8009dc4 <prvAddNewTaskToReadyList+0xbc>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d4c:	429a      	cmp	r2, r3
 8009d4e:	d802      	bhi.n	8009d56 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009d50:	4a1c      	ldr	r2, [pc, #112]	; (8009dc4 <prvAddNewTaskToReadyList+0xbc>)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009d56:	4b1d      	ldr	r3, [pc, #116]	; (8009dcc <prvAddNewTaskToReadyList+0xc4>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	3301      	adds	r3, #1
 8009d5c:	4a1b      	ldr	r2, [pc, #108]	; (8009dcc <prvAddNewTaskToReadyList+0xc4>)
 8009d5e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d64:	2201      	movs	r2, #1
 8009d66:	409a      	lsls	r2, r3
 8009d68:	4b19      	ldr	r3, [pc, #100]	; (8009dd0 <prvAddNewTaskToReadyList+0xc8>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	4313      	orrs	r3, r2
 8009d6e:	4a18      	ldr	r2, [pc, #96]	; (8009dd0 <prvAddNewTaskToReadyList+0xc8>)
 8009d70:	6013      	str	r3, [r2, #0]
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d76:	4613      	mov	r3, r2
 8009d78:	009b      	lsls	r3, r3, #2
 8009d7a:	4413      	add	r3, r2
 8009d7c:	009b      	lsls	r3, r3, #2
 8009d7e:	4a15      	ldr	r2, [pc, #84]	; (8009dd4 <prvAddNewTaskToReadyList+0xcc>)
 8009d80:	441a      	add	r2, r3
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	3304      	adds	r3, #4
 8009d86:	4619      	mov	r1, r3
 8009d88:	4610      	mov	r0, r2
 8009d8a:	f7ff f988 	bl	800909e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009d8e:	f001 f859 	bl	800ae44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009d92:	4b0d      	ldr	r3, [pc, #52]	; (8009dc8 <prvAddNewTaskToReadyList+0xc0>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d00e      	beq.n	8009db8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009d9a:	4b0a      	ldr	r3, [pc, #40]	; (8009dc4 <prvAddNewTaskToReadyList+0xbc>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009da4:	429a      	cmp	r2, r3
 8009da6:	d207      	bcs.n	8009db8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009da8:	4b0b      	ldr	r3, [pc, #44]	; (8009dd8 <prvAddNewTaskToReadyList+0xd0>)
 8009daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dae:	601a      	str	r2, [r3, #0]
 8009db0:	f3bf 8f4f 	dsb	sy
 8009db4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009db8:	bf00      	nop
 8009dba:	3708      	adds	r7, #8
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}
 8009dc0:	200063fc 	.word	0x200063fc
 8009dc4:	200062fc 	.word	0x200062fc
 8009dc8:	20006408 	.word	0x20006408
 8009dcc:	20006418 	.word	0x20006418
 8009dd0:	20006404 	.word	0x20006404
 8009dd4:	20006300 	.word	0x20006300
 8009dd8:	e000ed04 	.word	0xe000ed04

08009ddc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b08a      	sub	sp, #40	; 0x28
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
 8009de4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8009de6:	2300      	movs	r3, #0
 8009de8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d10a      	bne.n	8009e06 <vTaskDelayUntil+0x2a>
	__asm volatile
 8009df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009df4:	f383 8811 	msr	BASEPRI, r3
 8009df8:	f3bf 8f6f 	isb	sy
 8009dfc:	f3bf 8f4f 	dsb	sy
 8009e00:	617b      	str	r3, [r7, #20]
}
 8009e02:	bf00      	nop
 8009e04:	e7fe      	b.n	8009e04 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d10a      	bne.n	8009e22 <vTaskDelayUntil+0x46>
	__asm volatile
 8009e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e10:	f383 8811 	msr	BASEPRI, r3
 8009e14:	f3bf 8f6f 	isb	sy
 8009e18:	f3bf 8f4f 	dsb	sy
 8009e1c:	613b      	str	r3, [r7, #16]
}
 8009e1e:	bf00      	nop
 8009e20:	e7fe      	b.n	8009e20 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8009e22:	4b2a      	ldr	r3, [pc, #168]	; (8009ecc <vTaskDelayUntil+0xf0>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d00a      	beq.n	8009e40 <vTaskDelayUntil+0x64>
	__asm volatile
 8009e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e2e:	f383 8811 	msr	BASEPRI, r3
 8009e32:	f3bf 8f6f 	isb	sy
 8009e36:	f3bf 8f4f 	dsb	sy
 8009e3a:	60fb      	str	r3, [r7, #12]
}
 8009e3c:	bf00      	nop
 8009e3e:	e7fe      	b.n	8009e3e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8009e40:	f000 f8e0 	bl	800a004 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8009e44:	4b22      	ldr	r3, [pc, #136]	; (8009ed0 <vTaskDelayUntil+0xf4>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	683a      	ldr	r2, [r7, #0]
 8009e50:	4413      	add	r3, r2
 8009e52:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	6a3a      	ldr	r2, [r7, #32]
 8009e5a:	429a      	cmp	r2, r3
 8009e5c:	d20b      	bcs.n	8009e76 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	69fa      	ldr	r2, [r7, #28]
 8009e64:	429a      	cmp	r2, r3
 8009e66:	d211      	bcs.n	8009e8c <vTaskDelayUntil+0xb0>
 8009e68:	69fa      	ldr	r2, [r7, #28]
 8009e6a:	6a3b      	ldr	r3, [r7, #32]
 8009e6c:	429a      	cmp	r2, r3
 8009e6e:	d90d      	bls.n	8009e8c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8009e70:	2301      	movs	r3, #1
 8009e72:	627b      	str	r3, [r7, #36]	; 0x24
 8009e74:	e00a      	b.n	8009e8c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	69fa      	ldr	r2, [r7, #28]
 8009e7c:	429a      	cmp	r2, r3
 8009e7e:	d303      	bcc.n	8009e88 <vTaskDelayUntil+0xac>
 8009e80:	69fa      	ldr	r2, [r7, #28]
 8009e82:	6a3b      	ldr	r3, [r7, #32]
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d901      	bls.n	8009e8c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8009e88:	2301      	movs	r3, #1
 8009e8a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	69fa      	ldr	r2, [r7, #28]
 8009e90:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8009e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d006      	beq.n	8009ea6 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8009e98:	69fa      	ldr	r2, [r7, #28]
 8009e9a:	6a3b      	ldr	r3, [r7, #32]
 8009e9c:	1ad3      	subs	r3, r2, r3
 8009e9e:	2100      	movs	r1, #0
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f000 fe0d 	bl	800aac0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8009ea6:	f000 f8bb 	bl	800a020 <xTaskResumeAll>
 8009eaa:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009eac:	69bb      	ldr	r3, [r7, #24]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d107      	bne.n	8009ec2 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8009eb2:	4b08      	ldr	r3, [pc, #32]	; (8009ed4 <vTaskDelayUntil+0xf8>)
 8009eb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009eb8:	601a      	str	r2, [r3, #0]
 8009eba:	f3bf 8f4f 	dsb	sy
 8009ebe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009ec2:	bf00      	nop
 8009ec4:	3728      	adds	r7, #40	; 0x28
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}
 8009eca:	bf00      	nop
 8009ecc:	20006424 	.word	0x20006424
 8009ed0:	20006400 	.word	0x20006400
 8009ed4:	e000ed04 	.word	0xe000ed04

08009ed8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b084      	sub	sp, #16
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d017      	beq.n	8009f1a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009eea:	4b13      	ldr	r3, [pc, #76]	; (8009f38 <vTaskDelay+0x60>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d00a      	beq.n	8009f08 <vTaskDelay+0x30>
	__asm volatile
 8009ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef6:	f383 8811 	msr	BASEPRI, r3
 8009efa:	f3bf 8f6f 	isb	sy
 8009efe:	f3bf 8f4f 	dsb	sy
 8009f02:	60bb      	str	r3, [r7, #8]
}
 8009f04:	bf00      	nop
 8009f06:	e7fe      	b.n	8009f06 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009f08:	f000 f87c 	bl	800a004 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009f0c:	2100      	movs	r1, #0
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f000 fdd6 	bl	800aac0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009f14:	f000 f884 	bl	800a020 <xTaskResumeAll>
 8009f18:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d107      	bne.n	8009f30 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009f20:	4b06      	ldr	r3, [pc, #24]	; (8009f3c <vTaskDelay+0x64>)
 8009f22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f26:	601a      	str	r2, [r3, #0]
 8009f28:	f3bf 8f4f 	dsb	sy
 8009f2c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009f30:	bf00      	nop
 8009f32:	3710      	adds	r7, #16
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}
 8009f38:	20006424 	.word	0x20006424
 8009f3c:	e000ed04 	.word	0xe000ed04

08009f40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b08a      	sub	sp, #40	; 0x28
 8009f44:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009f46:	2300      	movs	r3, #0
 8009f48:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009f4e:	463a      	mov	r2, r7
 8009f50:	1d39      	adds	r1, r7, #4
 8009f52:	f107 0308 	add.w	r3, r7, #8
 8009f56:	4618      	mov	r0, r3
 8009f58:	f7f8 fc26 	bl	80027a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009f5c:	6839      	ldr	r1, [r7, #0]
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	68ba      	ldr	r2, [r7, #8]
 8009f62:	9202      	str	r2, [sp, #8]
 8009f64:	9301      	str	r3, [sp, #4]
 8009f66:	2300      	movs	r3, #0
 8009f68:	9300      	str	r3, [sp, #0]
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	460a      	mov	r2, r1
 8009f6e:	491f      	ldr	r1, [pc, #124]	; (8009fec <vTaskStartScheduler+0xac>)
 8009f70:	481f      	ldr	r0, [pc, #124]	; (8009ff0 <vTaskStartScheduler+0xb0>)
 8009f72:	f7ff fde5 	bl	8009b40 <xTaskCreateStatic>
 8009f76:	4603      	mov	r3, r0
 8009f78:	4a1e      	ldr	r2, [pc, #120]	; (8009ff4 <vTaskStartScheduler+0xb4>)
 8009f7a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009f7c:	4b1d      	ldr	r3, [pc, #116]	; (8009ff4 <vTaskStartScheduler+0xb4>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d002      	beq.n	8009f8a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009f84:	2301      	movs	r3, #1
 8009f86:	617b      	str	r3, [r7, #20]
 8009f88:	e001      	b.n	8009f8e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009f8e:	697b      	ldr	r3, [r7, #20]
 8009f90:	2b01      	cmp	r3, #1
 8009f92:	d118      	bne.n	8009fc6 <vTaskStartScheduler+0x86>
	__asm volatile
 8009f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f98:	f383 8811 	msr	BASEPRI, r3
 8009f9c:	f3bf 8f6f 	isb	sy
 8009fa0:	f3bf 8f4f 	dsb	sy
 8009fa4:	613b      	str	r3, [r7, #16]
}
 8009fa6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009fa8:	4b13      	ldr	r3, [pc, #76]	; (8009ff8 <vTaskStartScheduler+0xb8>)
 8009faa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009fae:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009fb0:	4b12      	ldr	r3, [pc, #72]	; (8009ffc <vTaskStartScheduler+0xbc>)
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009fb6:	4b12      	ldr	r3, [pc, #72]	; (800a000 <vTaskStartScheduler+0xc0>)
 8009fb8:	2200      	movs	r2, #0
 8009fba:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8009fbc:	f7f8 fbdc 	bl	8002778 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009fc0:	f000 fe6e 	bl	800aca0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009fc4:	e00e      	b.n	8009fe4 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009fcc:	d10a      	bne.n	8009fe4 <vTaskStartScheduler+0xa4>
	__asm volatile
 8009fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd2:	f383 8811 	msr	BASEPRI, r3
 8009fd6:	f3bf 8f6f 	isb	sy
 8009fda:	f3bf 8f4f 	dsb	sy
 8009fde:	60fb      	str	r3, [r7, #12]
}
 8009fe0:	bf00      	nop
 8009fe2:	e7fe      	b.n	8009fe2 <vTaskStartScheduler+0xa2>
}
 8009fe4:	bf00      	nop
 8009fe6:	3718      	adds	r7, #24
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}
 8009fec:	0800b0f4 	.word	0x0800b0f4
 8009ff0:	0800a5e9 	.word	0x0800a5e9
 8009ff4:	20006420 	.word	0x20006420
 8009ff8:	2000641c 	.word	0x2000641c
 8009ffc:	20006408 	.word	0x20006408
 800a000:	20006400 	.word	0x20006400

0800a004 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a004:	b480      	push	{r7}
 800a006:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a008:	4b04      	ldr	r3, [pc, #16]	; (800a01c <vTaskSuspendAll+0x18>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	3301      	adds	r3, #1
 800a00e:	4a03      	ldr	r2, [pc, #12]	; (800a01c <vTaskSuspendAll+0x18>)
 800a010:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a012:	bf00      	nop
 800a014:	46bd      	mov	sp, r7
 800a016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01a:	4770      	bx	lr
 800a01c:	20006424 	.word	0x20006424

0800a020 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b084      	sub	sp, #16
 800a024:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a026:	2300      	movs	r3, #0
 800a028:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a02a:	2300      	movs	r3, #0
 800a02c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a02e:	4b41      	ldr	r3, [pc, #260]	; (800a134 <xTaskResumeAll+0x114>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d10a      	bne.n	800a04c <xTaskResumeAll+0x2c>
	__asm volatile
 800a036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a03a:	f383 8811 	msr	BASEPRI, r3
 800a03e:	f3bf 8f6f 	isb	sy
 800a042:	f3bf 8f4f 	dsb	sy
 800a046:	603b      	str	r3, [r7, #0]
}
 800a048:	bf00      	nop
 800a04a:	e7fe      	b.n	800a04a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a04c:	f000 feca 	bl	800ade4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a050:	4b38      	ldr	r3, [pc, #224]	; (800a134 <xTaskResumeAll+0x114>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	3b01      	subs	r3, #1
 800a056:	4a37      	ldr	r2, [pc, #220]	; (800a134 <xTaskResumeAll+0x114>)
 800a058:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a05a:	4b36      	ldr	r3, [pc, #216]	; (800a134 <xTaskResumeAll+0x114>)
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d161      	bne.n	800a126 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a062:	4b35      	ldr	r3, [pc, #212]	; (800a138 <xTaskResumeAll+0x118>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d05d      	beq.n	800a126 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a06a:	e02e      	b.n	800a0ca <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a06c:	4b33      	ldr	r3, [pc, #204]	; (800a13c <xTaskResumeAll+0x11c>)
 800a06e:	68db      	ldr	r3, [r3, #12]
 800a070:	68db      	ldr	r3, [r3, #12]
 800a072:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	3318      	adds	r3, #24
 800a078:	4618      	mov	r0, r3
 800a07a:	f7ff f86d 	bl	8009158 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	3304      	adds	r3, #4
 800a082:	4618      	mov	r0, r3
 800a084:	f7ff f868 	bl	8009158 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a08c:	2201      	movs	r2, #1
 800a08e:	409a      	lsls	r2, r3
 800a090:	4b2b      	ldr	r3, [pc, #172]	; (800a140 <xTaskResumeAll+0x120>)
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	4313      	orrs	r3, r2
 800a096:	4a2a      	ldr	r2, [pc, #168]	; (800a140 <xTaskResumeAll+0x120>)
 800a098:	6013      	str	r3, [r2, #0]
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a09e:	4613      	mov	r3, r2
 800a0a0:	009b      	lsls	r3, r3, #2
 800a0a2:	4413      	add	r3, r2
 800a0a4:	009b      	lsls	r3, r3, #2
 800a0a6:	4a27      	ldr	r2, [pc, #156]	; (800a144 <xTaskResumeAll+0x124>)
 800a0a8:	441a      	add	r2, r3
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	3304      	adds	r3, #4
 800a0ae:	4619      	mov	r1, r3
 800a0b0:	4610      	mov	r0, r2
 800a0b2:	f7fe fff4 	bl	800909e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0ba:	4b23      	ldr	r3, [pc, #140]	; (800a148 <xTaskResumeAll+0x128>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0c0:	429a      	cmp	r2, r3
 800a0c2:	d302      	bcc.n	800a0ca <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800a0c4:	4b21      	ldr	r3, [pc, #132]	; (800a14c <xTaskResumeAll+0x12c>)
 800a0c6:	2201      	movs	r2, #1
 800a0c8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a0ca:	4b1c      	ldr	r3, [pc, #112]	; (800a13c <xTaskResumeAll+0x11c>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d1cc      	bne.n	800a06c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d001      	beq.n	800a0dc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a0d8:	f000 fb16 	bl	800a708 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a0dc:	4b1c      	ldr	r3, [pc, #112]	; (800a150 <xTaskResumeAll+0x130>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d010      	beq.n	800a10a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a0e8:	f000 f846 	bl	800a178 <xTaskIncrementTick>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d002      	beq.n	800a0f8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800a0f2:	4b16      	ldr	r3, [pc, #88]	; (800a14c <xTaskResumeAll+0x12c>)
 800a0f4:	2201      	movs	r2, #1
 800a0f6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	3b01      	subs	r3, #1
 800a0fc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d1f1      	bne.n	800a0e8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800a104:	4b12      	ldr	r3, [pc, #72]	; (800a150 <xTaskResumeAll+0x130>)
 800a106:	2200      	movs	r2, #0
 800a108:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a10a:	4b10      	ldr	r3, [pc, #64]	; (800a14c <xTaskResumeAll+0x12c>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d009      	beq.n	800a126 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a112:	2301      	movs	r3, #1
 800a114:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a116:	4b0f      	ldr	r3, [pc, #60]	; (800a154 <xTaskResumeAll+0x134>)
 800a118:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a11c:	601a      	str	r2, [r3, #0]
 800a11e:	f3bf 8f4f 	dsb	sy
 800a122:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a126:	f000 fe8d 	bl	800ae44 <vPortExitCritical>

	return xAlreadyYielded;
 800a12a:	68bb      	ldr	r3, [r7, #8]
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	3710      	adds	r7, #16
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}
 800a134:	20006424 	.word	0x20006424
 800a138:	200063fc 	.word	0x200063fc
 800a13c:	200063bc 	.word	0x200063bc
 800a140:	20006404 	.word	0x20006404
 800a144:	20006300 	.word	0x20006300
 800a148:	200062fc 	.word	0x200062fc
 800a14c:	20006410 	.word	0x20006410
 800a150:	2000640c 	.word	0x2000640c
 800a154:	e000ed04 	.word	0xe000ed04

0800a158 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a158:	b480      	push	{r7}
 800a15a:	b083      	sub	sp, #12
 800a15c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a15e:	4b05      	ldr	r3, [pc, #20]	; (800a174 <xTaskGetTickCount+0x1c>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a164:	687b      	ldr	r3, [r7, #4]
}
 800a166:	4618      	mov	r0, r3
 800a168:	370c      	adds	r7, #12
 800a16a:	46bd      	mov	sp, r7
 800a16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a170:	4770      	bx	lr
 800a172:	bf00      	nop
 800a174:	20006400 	.word	0x20006400

0800a178 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b086      	sub	sp, #24
 800a17c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a17e:	2300      	movs	r3, #0
 800a180:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a182:	4b4e      	ldr	r3, [pc, #312]	; (800a2bc <xTaskIncrementTick+0x144>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	2b00      	cmp	r3, #0
 800a188:	f040 808e 	bne.w	800a2a8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a18c:	4b4c      	ldr	r3, [pc, #304]	; (800a2c0 <xTaskIncrementTick+0x148>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	3301      	adds	r3, #1
 800a192:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a194:	4a4a      	ldr	r2, [pc, #296]	; (800a2c0 <xTaskIncrementTick+0x148>)
 800a196:	693b      	ldr	r3, [r7, #16]
 800a198:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a19a:	693b      	ldr	r3, [r7, #16]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d120      	bne.n	800a1e2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a1a0:	4b48      	ldr	r3, [pc, #288]	; (800a2c4 <xTaskIncrementTick+0x14c>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d00a      	beq.n	800a1c0 <xTaskIncrementTick+0x48>
	__asm volatile
 800a1aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ae:	f383 8811 	msr	BASEPRI, r3
 800a1b2:	f3bf 8f6f 	isb	sy
 800a1b6:	f3bf 8f4f 	dsb	sy
 800a1ba:	603b      	str	r3, [r7, #0]
}
 800a1bc:	bf00      	nop
 800a1be:	e7fe      	b.n	800a1be <xTaskIncrementTick+0x46>
 800a1c0:	4b40      	ldr	r3, [pc, #256]	; (800a2c4 <xTaskIncrementTick+0x14c>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	60fb      	str	r3, [r7, #12]
 800a1c6:	4b40      	ldr	r3, [pc, #256]	; (800a2c8 <xTaskIncrementTick+0x150>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	4a3e      	ldr	r2, [pc, #248]	; (800a2c4 <xTaskIncrementTick+0x14c>)
 800a1cc:	6013      	str	r3, [r2, #0]
 800a1ce:	4a3e      	ldr	r2, [pc, #248]	; (800a2c8 <xTaskIncrementTick+0x150>)
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	6013      	str	r3, [r2, #0]
 800a1d4:	4b3d      	ldr	r3, [pc, #244]	; (800a2cc <xTaskIncrementTick+0x154>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	3301      	adds	r3, #1
 800a1da:	4a3c      	ldr	r2, [pc, #240]	; (800a2cc <xTaskIncrementTick+0x154>)
 800a1dc:	6013      	str	r3, [r2, #0]
 800a1de:	f000 fa93 	bl	800a708 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a1e2:	4b3b      	ldr	r3, [pc, #236]	; (800a2d0 <xTaskIncrementTick+0x158>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	693a      	ldr	r2, [r7, #16]
 800a1e8:	429a      	cmp	r2, r3
 800a1ea:	d348      	bcc.n	800a27e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a1ec:	4b35      	ldr	r3, [pc, #212]	; (800a2c4 <xTaskIncrementTick+0x14c>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d104      	bne.n	800a200 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1f6:	4b36      	ldr	r3, [pc, #216]	; (800a2d0 <xTaskIncrementTick+0x158>)
 800a1f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a1fc:	601a      	str	r2, [r3, #0]
					break;
 800a1fe:	e03e      	b.n	800a27e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a200:	4b30      	ldr	r3, [pc, #192]	; (800a2c4 <xTaskIncrementTick+0x14c>)
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	68db      	ldr	r3, [r3, #12]
 800a206:	68db      	ldr	r3, [r3, #12]
 800a208:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	685b      	ldr	r3, [r3, #4]
 800a20e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a210:	693a      	ldr	r2, [r7, #16]
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	429a      	cmp	r2, r3
 800a216:	d203      	bcs.n	800a220 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a218:	4a2d      	ldr	r2, [pc, #180]	; (800a2d0 <xTaskIncrementTick+0x158>)
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a21e:	e02e      	b.n	800a27e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	3304      	adds	r3, #4
 800a224:	4618      	mov	r0, r3
 800a226:	f7fe ff97 	bl	8009158 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d004      	beq.n	800a23c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	3318      	adds	r3, #24
 800a236:	4618      	mov	r0, r3
 800a238:	f7fe ff8e 	bl	8009158 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a240:	2201      	movs	r2, #1
 800a242:	409a      	lsls	r2, r3
 800a244:	4b23      	ldr	r3, [pc, #140]	; (800a2d4 <xTaskIncrementTick+0x15c>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	4313      	orrs	r3, r2
 800a24a:	4a22      	ldr	r2, [pc, #136]	; (800a2d4 <xTaskIncrementTick+0x15c>)
 800a24c:	6013      	str	r3, [r2, #0]
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a252:	4613      	mov	r3, r2
 800a254:	009b      	lsls	r3, r3, #2
 800a256:	4413      	add	r3, r2
 800a258:	009b      	lsls	r3, r3, #2
 800a25a:	4a1f      	ldr	r2, [pc, #124]	; (800a2d8 <xTaskIncrementTick+0x160>)
 800a25c:	441a      	add	r2, r3
 800a25e:	68bb      	ldr	r3, [r7, #8]
 800a260:	3304      	adds	r3, #4
 800a262:	4619      	mov	r1, r3
 800a264:	4610      	mov	r0, r2
 800a266:	f7fe ff1a 	bl	800909e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a26e:	4b1b      	ldr	r3, [pc, #108]	; (800a2dc <xTaskIncrementTick+0x164>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a274:	429a      	cmp	r2, r3
 800a276:	d3b9      	bcc.n	800a1ec <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a278:	2301      	movs	r3, #1
 800a27a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a27c:	e7b6      	b.n	800a1ec <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a27e:	4b17      	ldr	r3, [pc, #92]	; (800a2dc <xTaskIncrementTick+0x164>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a284:	4914      	ldr	r1, [pc, #80]	; (800a2d8 <xTaskIncrementTick+0x160>)
 800a286:	4613      	mov	r3, r2
 800a288:	009b      	lsls	r3, r3, #2
 800a28a:	4413      	add	r3, r2
 800a28c:	009b      	lsls	r3, r3, #2
 800a28e:	440b      	add	r3, r1
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	2b01      	cmp	r3, #1
 800a294:	d901      	bls.n	800a29a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800a296:	2301      	movs	r3, #1
 800a298:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a29a:	4b11      	ldr	r3, [pc, #68]	; (800a2e0 <xTaskIncrementTick+0x168>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d007      	beq.n	800a2b2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	617b      	str	r3, [r7, #20]
 800a2a6:	e004      	b.n	800a2b2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a2a8:	4b0e      	ldr	r3, [pc, #56]	; (800a2e4 <xTaskIncrementTick+0x16c>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	3301      	adds	r3, #1
 800a2ae:	4a0d      	ldr	r2, [pc, #52]	; (800a2e4 <xTaskIncrementTick+0x16c>)
 800a2b0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a2b2:	697b      	ldr	r3, [r7, #20]
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3718      	adds	r7, #24
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}
 800a2bc:	20006424 	.word	0x20006424
 800a2c0:	20006400 	.word	0x20006400
 800a2c4:	200063b4 	.word	0x200063b4
 800a2c8:	200063b8 	.word	0x200063b8
 800a2cc:	20006414 	.word	0x20006414
 800a2d0:	2000641c 	.word	0x2000641c
 800a2d4:	20006404 	.word	0x20006404
 800a2d8:	20006300 	.word	0x20006300
 800a2dc:	200062fc 	.word	0x200062fc
 800a2e0:	20006410 	.word	0x20006410
 800a2e4:	2000640c 	.word	0x2000640c

0800a2e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b086      	sub	sp, #24
 800a2ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a2ee:	4b32      	ldr	r3, [pc, #200]	; (800a3b8 <vTaskSwitchContext+0xd0>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d003      	beq.n	800a2fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a2f6:	4b31      	ldr	r3, [pc, #196]	; (800a3bc <vTaskSwitchContext+0xd4>)
 800a2f8:	2201      	movs	r2, #1
 800a2fa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a2fc:	e058      	b.n	800a3b0 <vTaskSwitchContext+0xc8>
		xYieldPending = pdFALSE;
 800a2fe:	4b2f      	ldr	r3, [pc, #188]	; (800a3bc <vTaskSwitchContext+0xd4>)
 800a300:	2200      	movs	r2, #0
 800a302:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800a304:	f7f8 fa44 	bl	8002790 <getRunTimeCounterValue>
 800a308:	4603      	mov	r3, r0
 800a30a:	4a2d      	ldr	r2, [pc, #180]	; (800a3c0 <vTaskSwitchContext+0xd8>)
 800a30c:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800a30e:	4b2c      	ldr	r3, [pc, #176]	; (800a3c0 <vTaskSwitchContext+0xd8>)
 800a310:	681a      	ldr	r2, [r3, #0]
 800a312:	4b2c      	ldr	r3, [pc, #176]	; (800a3c4 <vTaskSwitchContext+0xdc>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	429a      	cmp	r2, r3
 800a318:	d909      	bls.n	800a32e <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800a31a:	4b2b      	ldr	r3, [pc, #172]	; (800a3c8 <vTaskSwitchContext+0xe0>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a320:	4a27      	ldr	r2, [pc, #156]	; (800a3c0 <vTaskSwitchContext+0xd8>)
 800a322:	6810      	ldr	r0, [r2, #0]
 800a324:	4a27      	ldr	r2, [pc, #156]	; (800a3c4 <vTaskSwitchContext+0xdc>)
 800a326:	6812      	ldr	r2, [r2, #0]
 800a328:	1a82      	subs	r2, r0, r2
 800a32a:	440a      	add	r2, r1
 800a32c:	64da      	str	r2, [r3, #76]	; 0x4c
			ulTaskSwitchedInTime = ulTotalRunTime;
 800a32e:	4b24      	ldr	r3, [pc, #144]	; (800a3c0 <vTaskSwitchContext+0xd8>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	4a24      	ldr	r2, [pc, #144]	; (800a3c4 <vTaskSwitchContext+0xdc>)
 800a334:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a336:	4b25      	ldr	r3, [pc, #148]	; (800a3cc <vTaskSwitchContext+0xe4>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	fab3 f383 	clz	r3, r3
 800a342:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a344:	7afb      	ldrb	r3, [r7, #11]
 800a346:	f1c3 031f 	rsb	r3, r3, #31
 800a34a:	617b      	str	r3, [r7, #20]
 800a34c:	4920      	ldr	r1, [pc, #128]	; (800a3d0 <vTaskSwitchContext+0xe8>)
 800a34e:	697a      	ldr	r2, [r7, #20]
 800a350:	4613      	mov	r3, r2
 800a352:	009b      	lsls	r3, r3, #2
 800a354:	4413      	add	r3, r2
 800a356:	009b      	lsls	r3, r3, #2
 800a358:	440b      	add	r3, r1
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d10a      	bne.n	800a376 <vTaskSwitchContext+0x8e>
	__asm volatile
 800a360:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a364:	f383 8811 	msr	BASEPRI, r3
 800a368:	f3bf 8f6f 	isb	sy
 800a36c:	f3bf 8f4f 	dsb	sy
 800a370:	607b      	str	r3, [r7, #4]
}
 800a372:	bf00      	nop
 800a374:	e7fe      	b.n	800a374 <vTaskSwitchContext+0x8c>
 800a376:	697a      	ldr	r2, [r7, #20]
 800a378:	4613      	mov	r3, r2
 800a37a:	009b      	lsls	r3, r3, #2
 800a37c:	4413      	add	r3, r2
 800a37e:	009b      	lsls	r3, r3, #2
 800a380:	4a13      	ldr	r2, [pc, #76]	; (800a3d0 <vTaskSwitchContext+0xe8>)
 800a382:	4413      	add	r3, r2
 800a384:	613b      	str	r3, [r7, #16]
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	685b      	ldr	r3, [r3, #4]
 800a38a:	685a      	ldr	r2, [r3, #4]
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	605a      	str	r2, [r3, #4]
 800a390:	693b      	ldr	r3, [r7, #16]
 800a392:	685a      	ldr	r2, [r3, #4]
 800a394:	693b      	ldr	r3, [r7, #16]
 800a396:	3308      	adds	r3, #8
 800a398:	429a      	cmp	r2, r3
 800a39a:	d104      	bne.n	800a3a6 <vTaskSwitchContext+0xbe>
 800a39c:	693b      	ldr	r3, [r7, #16]
 800a39e:	685b      	ldr	r3, [r3, #4]
 800a3a0:	685a      	ldr	r2, [r3, #4]
 800a3a2:	693b      	ldr	r3, [r7, #16]
 800a3a4:	605a      	str	r2, [r3, #4]
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	685b      	ldr	r3, [r3, #4]
 800a3aa:	68db      	ldr	r3, [r3, #12]
 800a3ac:	4a06      	ldr	r2, [pc, #24]	; (800a3c8 <vTaskSwitchContext+0xe0>)
 800a3ae:	6013      	str	r3, [r2, #0]
}
 800a3b0:	bf00      	nop
 800a3b2:	3718      	adds	r7, #24
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}
 800a3b8:	20006424 	.word	0x20006424
 800a3bc:	20006410 	.word	0x20006410
 800a3c0:	2000642c 	.word	0x2000642c
 800a3c4:	20006428 	.word	0x20006428
 800a3c8:	200062fc 	.word	0x200062fc
 800a3cc:	20006404 	.word	0x20006404
 800a3d0:	20006300 	.word	0x20006300

0800a3d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b084      	sub	sp, #16
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
 800a3dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d10a      	bne.n	800a3fa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a3e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3e8:	f383 8811 	msr	BASEPRI, r3
 800a3ec:	f3bf 8f6f 	isb	sy
 800a3f0:	f3bf 8f4f 	dsb	sy
 800a3f4:	60fb      	str	r3, [r7, #12]
}
 800a3f6:	bf00      	nop
 800a3f8:	e7fe      	b.n	800a3f8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a3fa:	4b07      	ldr	r3, [pc, #28]	; (800a418 <vTaskPlaceOnEventList+0x44>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	3318      	adds	r3, #24
 800a400:	4619      	mov	r1, r3
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	f7fe fe6f 	bl	80090e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a408:	2101      	movs	r1, #1
 800a40a:	6838      	ldr	r0, [r7, #0]
 800a40c:	f000 fb58 	bl	800aac0 <prvAddCurrentTaskToDelayedList>
}
 800a410:	bf00      	nop
 800a412:	3710      	adds	r7, #16
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}
 800a418:	200062fc 	.word	0x200062fc

0800a41c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b086      	sub	sp, #24
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	68db      	ldr	r3, [r3, #12]
 800a428:	68db      	ldr	r3, [r3, #12]
 800a42a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d10a      	bne.n	800a448 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a432:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a436:	f383 8811 	msr	BASEPRI, r3
 800a43a:	f3bf 8f6f 	isb	sy
 800a43e:	f3bf 8f4f 	dsb	sy
 800a442:	60fb      	str	r3, [r7, #12]
}
 800a444:	bf00      	nop
 800a446:	e7fe      	b.n	800a446 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a448:	693b      	ldr	r3, [r7, #16]
 800a44a:	3318      	adds	r3, #24
 800a44c:	4618      	mov	r0, r3
 800a44e:	f7fe fe83 	bl	8009158 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a452:	4b1d      	ldr	r3, [pc, #116]	; (800a4c8 <xTaskRemoveFromEventList+0xac>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d11c      	bne.n	800a494 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a45a:	693b      	ldr	r3, [r7, #16]
 800a45c:	3304      	adds	r3, #4
 800a45e:	4618      	mov	r0, r3
 800a460:	f7fe fe7a 	bl	8009158 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a464:	693b      	ldr	r3, [r7, #16]
 800a466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a468:	2201      	movs	r2, #1
 800a46a:	409a      	lsls	r2, r3
 800a46c:	4b17      	ldr	r3, [pc, #92]	; (800a4cc <xTaskRemoveFromEventList+0xb0>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	4313      	orrs	r3, r2
 800a472:	4a16      	ldr	r2, [pc, #88]	; (800a4cc <xTaskRemoveFromEventList+0xb0>)
 800a474:	6013      	str	r3, [r2, #0]
 800a476:	693b      	ldr	r3, [r7, #16]
 800a478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a47a:	4613      	mov	r3, r2
 800a47c:	009b      	lsls	r3, r3, #2
 800a47e:	4413      	add	r3, r2
 800a480:	009b      	lsls	r3, r3, #2
 800a482:	4a13      	ldr	r2, [pc, #76]	; (800a4d0 <xTaskRemoveFromEventList+0xb4>)
 800a484:	441a      	add	r2, r3
 800a486:	693b      	ldr	r3, [r7, #16]
 800a488:	3304      	adds	r3, #4
 800a48a:	4619      	mov	r1, r3
 800a48c:	4610      	mov	r0, r2
 800a48e:	f7fe fe06 	bl	800909e <vListInsertEnd>
 800a492:	e005      	b.n	800a4a0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a494:	693b      	ldr	r3, [r7, #16]
 800a496:	3318      	adds	r3, #24
 800a498:	4619      	mov	r1, r3
 800a49a:	480e      	ldr	r0, [pc, #56]	; (800a4d4 <xTaskRemoveFromEventList+0xb8>)
 800a49c:	f7fe fdff 	bl	800909e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a4a0:	693b      	ldr	r3, [r7, #16]
 800a4a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4a4:	4b0c      	ldr	r3, [pc, #48]	; (800a4d8 <xTaskRemoveFromEventList+0xbc>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4aa:	429a      	cmp	r2, r3
 800a4ac:	d905      	bls.n	800a4ba <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a4b2:	4b0a      	ldr	r3, [pc, #40]	; (800a4dc <xTaskRemoveFromEventList+0xc0>)
 800a4b4:	2201      	movs	r2, #1
 800a4b6:	601a      	str	r2, [r3, #0]
 800a4b8:	e001      	b.n	800a4be <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a4be:	697b      	ldr	r3, [r7, #20]
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3718      	adds	r7, #24
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}
 800a4c8:	20006424 	.word	0x20006424
 800a4cc:	20006404 	.word	0x20006404
 800a4d0:	20006300 	.word	0x20006300
 800a4d4:	200063bc 	.word	0x200063bc
 800a4d8:	200062fc 	.word	0x200062fc
 800a4dc:	20006410 	.word	0x20006410

0800a4e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b083      	sub	sp, #12
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a4e8:	4b06      	ldr	r3, [pc, #24]	; (800a504 <vTaskInternalSetTimeOutState+0x24>)
 800a4ea:	681a      	ldr	r2, [r3, #0]
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a4f0:	4b05      	ldr	r3, [pc, #20]	; (800a508 <vTaskInternalSetTimeOutState+0x28>)
 800a4f2:	681a      	ldr	r2, [r3, #0]
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	605a      	str	r2, [r3, #4]
}
 800a4f8:	bf00      	nop
 800a4fa:	370c      	adds	r7, #12
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a502:	4770      	bx	lr
 800a504:	20006414 	.word	0x20006414
 800a508:	20006400 	.word	0x20006400

0800a50c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b088      	sub	sp, #32
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
 800a514:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d10a      	bne.n	800a532 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a51c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a520:	f383 8811 	msr	BASEPRI, r3
 800a524:	f3bf 8f6f 	isb	sy
 800a528:	f3bf 8f4f 	dsb	sy
 800a52c:	613b      	str	r3, [r7, #16]
}
 800a52e:	bf00      	nop
 800a530:	e7fe      	b.n	800a530 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d10a      	bne.n	800a54e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a53c:	f383 8811 	msr	BASEPRI, r3
 800a540:	f3bf 8f6f 	isb	sy
 800a544:	f3bf 8f4f 	dsb	sy
 800a548:	60fb      	str	r3, [r7, #12]
}
 800a54a:	bf00      	nop
 800a54c:	e7fe      	b.n	800a54c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a54e:	f000 fc49 	bl	800ade4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a552:	4b1d      	ldr	r3, [pc, #116]	; (800a5c8 <xTaskCheckForTimeOut+0xbc>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	685b      	ldr	r3, [r3, #4]
 800a55c:	69ba      	ldr	r2, [r7, #24]
 800a55e:	1ad3      	subs	r3, r2, r3
 800a560:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a56a:	d102      	bne.n	800a572 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a56c:	2300      	movs	r3, #0
 800a56e:	61fb      	str	r3, [r7, #28]
 800a570:	e023      	b.n	800a5ba <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681a      	ldr	r2, [r3, #0]
 800a576:	4b15      	ldr	r3, [pc, #84]	; (800a5cc <xTaskCheckForTimeOut+0xc0>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	429a      	cmp	r2, r3
 800a57c:	d007      	beq.n	800a58e <xTaskCheckForTimeOut+0x82>
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	685b      	ldr	r3, [r3, #4]
 800a582:	69ba      	ldr	r2, [r7, #24]
 800a584:	429a      	cmp	r2, r3
 800a586:	d302      	bcc.n	800a58e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a588:	2301      	movs	r3, #1
 800a58a:	61fb      	str	r3, [r7, #28]
 800a58c:	e015      	b.n	800a5ba <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	697a      	ldr	r2, [r7, #20]
 800a594:	429a      	cmp	r2, r3
 800a596:	d20b      	bcs.n	800a5b0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	681a      	ldr	r2, [r3, #0]
 800a59c:	697b      	ldr	r3, [r7, #20]
 800a59e:	1ad2      	subs	r2, r2, r3
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	f7ff ff9b 	bl	800a4e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	61fb      	str	r3, [r7, #28]
 800a5ae:	e004      	b.n	800a5ba <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a5ba:	f000 fc43 	bl	800ae44 <vPortExitCritical>

	return xReturn;
 800a5be:	69fb      	ldr	r3, [r7, #28]
}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	3720      	adds	r7, #32
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}
 800a5c8:	20006400 	.word	0x20006400
 800a5cc:	20006414 	.word	0x20006414

0800a5d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a5d0:	b480      	push	{r7}
 800a5d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a5d4:	4b03      	ldr	r3, [pc, #12]	; (800a5e4 <vTaskMissedYield+0x14>)
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	601a      	str	r2, [r3, #0]
}
 800a5da:	bf00      	nop
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e2:	4770      	bx	lr
 800a5e4:	20006410 	.word	0x20006410

0800a5e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b082      	sub	sp, #8
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a5f0:	f000 f852 	bl	800a698 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a5f4:	4b06      	ldr	r3, [pc, #24]	; (800a610 <prvIdleTask+0x28>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	2b01      	cmp	r3, #1
 800a5fa:	d9f9      	bls.n	800a5f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a5fc:	4b05      	ldr	r3, [pc, #20]	; (800a614 <prvIdleTask+0x2c>)
 800a5fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a602:	601a      	str	r2, [r3, #0]
 800a604:	f3bf 8f4f 	dsb	sy
 800a608:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a60c:	e7f0      	b.n	800a5f0 <prvIdleTask+0x8>
 800a60e:	bf00      	nop
 800a610:	20006300 	.word	0x20006300
 800a614:	e000ed04 	.word	0xe000ed04

0800a618 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b082      	sub	sp, #8
 800a61c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a61e:	2300      	movs	r3, #0
 800a620:	607b      	str	r3, [r7, #4]
 800a622:	e00c      	b.n	800a63e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a624:	687a      	ldr	r2, [r7, #4]
 800a626:	4613      	mov	r3, r2
 800a628:	009b      	lsls	r3, r3, #2
 800a62a:	4413      	add	r3, r2
 800a62c:	009b      	lsls	r3, r3, #2
 800a62e:	4a12      	ldr	r2, [pc, #72]	; (800a678 <prvInitialiseTaskLists+0x60>)
 800a630:	4413      	add	r3, r2
 800a632:	4618      	mov	r0, r3
 800a634:	f7fe fd06 	bl	8009044 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	3301      	adds	r3, #1
 800a63c:	607b      	str	r3, [r7, #4]
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2b06      	cmp	r3, #6
 800a642:	d9ef      	bls.n	800a624 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a644:	480d      	ldr	r0, [pc, #52]	; (800a67c <prvInitialiseTaskLists+0x64>)
 800a646:	f7fe fcfd 	bl	8009044 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a64a:	480d      	ldr	r0, [pc, #52]	; (800a680 <prvInitialiseTaskLists+0x68>)
 800a64c:	f7fe fcfa 	bl	8009044 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a650:	480c      	ldr	r0, [pc, #48]	; (800a684 <prvInitialiseTaskLists+0x6c>)
 800a652:	f7fe fcf7 	bl	8009044 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a656:	480c      	ldr	r0, [pc, #48]	; (800a688 <prvInitialiseTaskLists+0x70>)
 800a658:	f7fe fcf4 	bl	8009044 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a65c:	480b      	ldr	r0, [pc, #44]	; (800a68c <prvInitialiseTaskLists+0x74>)
 800a65e:	f7fe fcf1 	bl	8009044 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a662:	4b0b      	ldr	r3, [pc, #44]	; (800a690 <prvInitialiseTaskLists+0x78>)
 800a664:	4a05      	ldr	r2, [pc, #20]	; (800a67c <prvInitialiseTaskLists+0x64>)
 800a666:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a668:	4b0a      	ldr	r3, [pc, #40]	; (800a694 <prvInitialiseTaskLists+0x7c>)
 800a66a:	4a05      	ldr	r2, [pc, #20]	; (800a680 <prvInitialiseTaskLists+0x68>)
 800a66c:	601a      	str	r2, [r3, #0]
}
 800a66e:	bf00      	nop
 800a670:	3708      	adds	r7, #8
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}
 800a676:	bf00      	nop
 800a678:	20006300 	.word	0x20006300
 800a67c:	2000638c 	.word	0x2000638c
 800a680:	200063a0 	.word	0x200063a0
 800a684:	200063bc 	.word	0x200063bc
 800a688:	200063d0 	.word	0x200063d0
 800a68c:	200063e8 	.word	0x200063e8
 800a690:	200063b4 	.word	0x200063b4
 800a694:	200063b8 	.word	0x200063b8

0800a698 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b082      	sub	sp, #8
 800a69c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a69e:	e019      	b.n	800a6d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a6a0:	f000 fba0 	bl	800ade4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6a4:	4b10      	ldr	r3, [pc, #64]	; (800a6e8 <prvCheckTasksWaitingTermination+0x50>)
 800a6a6:	68db      	ldr	r3, [r3, #12]
 800a6a8:	68db      	ldr	r3, [r3, #12]
 800a6aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	3304      	adds	r3, #4
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	f7fe fd51 	bl	8009158 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a6b6:	4b0d      	ldr	r3, [pc, #52]	; (800a6ec <prvCheckTasksWaitingTermination+0x54>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	3b01      	subs	r3, #1
 800a6bc:	4a0b      	ldr	r2, [pc, #44]	; (800a6ec <prvCheckTasksWaitingTermination+0x54>)
 800a6be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a6c0:	4b0b      	ldr	r3, [pc, #44]	; (800a6f0 <prvCheckTasksWaitingTermination+0x58>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	3b01      	subs	r3, #1
 800a6c6:	4a0a      	ldr	r2, [pc, #40]	; (800a6f0 <prvCheckTasksWaitingTermination+0x58>)
 800a6c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a6ca:	f000 fbbb 	bl	800ae44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	f000 f810 	bl	800a6f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a6d4:	4b06      	ldr	r3, [pc, #24]	; (800a6f0 <prvCheckTasksWaitingTermination+0x58>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d1e1      	bne.n	800a6a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a6dc:	bf00      	nop
 800a6de:	bf00      	nop
 800a6e0:	3708      	adds	r7, #8
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}
 800a6e6:	bf00      	nop
 800a6e8:	200063d0 	.word	0x200063d0
 800a6ec:	200063fc 	.word	0x200063fc
 800a6f0:	200063e4 	.word	0x200063e4

0800a6f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b083      	sub	sp, #12
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a6fc:	bf00      	nop
 800a6fe:	370c      	adds	r7, #12
 800a700:	46bd      	mov	sp, r7
 800a702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a706:	4770      	bx	lr

0800a708 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a708:	b480      	push	{r7}
 800a70a:	b083      	sub	sp, #12
 800a70c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a70e:	4b0c      	ldr	r3, [pc, #48]	; (800a740 <prvResetNextTaskUnblockTime+0x38>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d104      	bne.n	800a722 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a718:	4b0a      	ldr	r3, [pc, #40]	; (800a744 <prvResetNextTaskUnblockTime+0x3c>)
 800a71a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a71e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a720:	e008      	b.n	800a734 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a722:	4b07      	ldr	r3, [pc, #28]	; (800a740 <prvResetNextTaskUnblockTime+0x38>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	68db      	ldr	r3, [r3, #12]
 800a728:	68db      	ldr	r3, [r3, #12]
 800a72a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	685b      	ldr	r3, [r3, #4]
 800a730:	4a04      	ldr	r2, [pc, #16]	; (800a744 <prvResetNextTaskUnblockTime+0x3c>)
 800a732:	6013      	str	r3, [r2, #0]
}
 800a734:	bf00      	nop
 800a736:	370c      	adds	r7, #12
 800a738:	46bd      	mov	sp, r7
 800a73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73e:	4770      	bx	lr
 800a740:	200063b4 	.word	0x200063b4
 800a744:	2000641c 	.word	0x2000641c

0800a748 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a748:	b480      	push	{r7}
 800a74a:	b083      	sub	sp, #12
 800a74c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a74e:	4b0b      	ldr	r3, [pc, #44]	; (800a77c <xTaskGetSchedulerState+0x34>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d102      	bne.n	800a75c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a756:	2301      	movs	r3, #1
 800a758:	607b      	str	r3, [r7, #4]
 800a75a:	e008      	b.n	800a76e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a75c:	4b08      	ldr	r3, [pc, #32]	; (800a780 <xTaskGetSchedulerState+0x38>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d102      	bne.n	800a76a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a764:	2302      	movs	r3, #2
 800a766:	607b      	str	r3, [r7, #4]
 800a768:	e001      	b.n	800a76e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a76a:	2300      	movs	r3, #0
 800a76c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a76e:	687b      	ldr	r3, [r7, #4]
	}
 800a770:	4618      	mov	r0, r3
 800a772:	370c      	adds	r7, #12
 800a774:	46bd      	mov	sp, r7
 800a776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77a:	4770      	bx	lr
 800a77c:	20006408 	.word	0x20006408
 800a780:	20006424 	.word	0x20006424

0800a784 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a784:	b580      	push	{r7, lr}
 800a786:	b084      	sub	sp, #16
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a790:	2300      	movs	r3, #0
 800a792:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d05e      	beq.n	800a858 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a79e:	4b31      	ldr	r3, [pc, #196]	; (800a864 <xTaskPriorityInherit+0xe0>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7a4:	429a      	cmp	r2, r3
 800a7a6:	d24e      	bcs.n	800a846 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	699b      	ldr	r3, [r3, #24]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	db06      	blt.n	800a7be <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7b0:	4b2c      	ldr	r3, [pc, #176]	; (800a864 <xTaskPriorityInherit+0xe0>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7b6:	f1c3 0207 	rsb	r2, r3, #7
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a7be:	68bb      	ldr	r3, [r7, #8]
 800a7c0:	6959      	ldr	r1, [r3, #20]
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7c6:	4613      	mov	r3, r2
 800a7c8:	009b      	lsls	r3, r3, #2
 800a7ca:	4413      	add	r3, r2
 800a7cc:	009b      	lsls	r3, r3, #2
 800a7ce:	4a26      	ldr	r2, [pc, #152]	; (800a868 <xTaskPriorityInherit+0xe4>)
 800a7d0:	4413      	add	r3, r2
 800a7d2:	4299      	cmp	r1, r3
 800a7d4:	d12f      	bne.n	800a836 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a7d6:	68bb      	ldr	r3, [r7, #8]
 800a7d8:	3304      	adds	r3, #4
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f7fe fcbc 	bl	8009158 <uxListRemove>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d10a      	bne.n	800a7fc <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ea:	2201      	movs	r2, #1
 800a7ec:	fa02 f303 	lsl.w	r3, r2, r3
 800a7f0:	43da      	mvns	r2, r3
 800a7f2:	4b1e      	ldr	r3, [pc, #120]	; (800a86c <xTaskPriorityInherit+0xe8>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	4013      	ands	r3, r2
 800a7f8:	4a1c      	ldr	r2, [pc, #112]	; (800a86c <xTaskPriorityInherit+0xe8>)
 800a7fa:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a7fc:	4b19      	ldr	r3, [pc, #100]	; (800a864 <xTaskPriorityInherit+0xe0>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a802:	68bb      	ldr	r3, [r7, #8]
 800a804:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a806:	68bb      	ldr	r3, [r7, #8]
 800a808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a80a:	2201      	movs	r2, #1
 800a80c:	409a      	lsls	r2, r3
 800a80e:	4b17      	ldr	r3, [pc, #92]	; (800a86c <xTaskPriorityInherit+0xe8>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	4313      	orrs	r3, r2
 800a814:	4a15      	ldr	r2, [pc, #84]	; (800a86c <xTaskPriorityInherit+0xe8>)
 800a816:	6013      	str	r3, [r2, #0]
 800a818:	68bb      	ldr	r3, [r7, #8]
 800a81a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a81c:	4613      	mov	r3, r2
 800a81e:	009b      	lsls	r3, r3, #2
 800a820:	4413      	add	r3, r2
 800a822:	009b      	lsls	r3, r3, #2
 800a824:	4a10      	ldr	r2, [pc, #64]	; (800a868 <xTaskPriorityInherit+0xe4>)
 800a826:	441a      	add	r2, r3
 800a828:	68bb      	ldr	r3, [r7, #8]
 800a82a:	3304      	adds	r3, #4
 800a82c:	4619      	mov	r1, r3
 800a82e:	4610      	mov	r0, r2
 800a830:	f7fe fc35 	bl	800909e <vListInsertEnd>
 800a834:	e004      	b.n	800a840 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a836:	4b0b      	ldr	r3, [pc, #44]	; (800a864 <xTaskPriorityInherit+0xe0>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a840:	2301      	movs	r3, #1
 800a842:	60fb      	str	r3, [r7, #12]
 800a844:	e008      	b.n	800a858 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a846:	68bb      	ldr	r3, [r7, #8]
 800a848:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a84a:	4b06      	ldr	r3, [pc, #24]	; (800a864 <xTaskPriorityInherit+0xe0>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a850:	429a      	cmp	r2, r3
 800a852:	d201      	bcs.n	800a858 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a854:	2301      	movs	r3, #1
 800a856:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a858:	68fb      	ldr	r3, [r7, #12]
	}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3710      	adds	r7, #16
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}
 800a862:	bf00      	nop
 800a864:	200062fc 	.word	0x200062fc
 800a868:	20006300 	.word	0x20006300
 800a86c:	20006404 	.word	0x20006404

0800a870 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a870:	b580      	push	{r7, lr}
 800a872:	b086      	sub	sp, #24
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a87c:	2300      	movs	r3, #0
 800a87e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d06e      	beq.n	800a964 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a886:	4b3a      	ldr	r3, [pc, #232]	; (800a970 <xTaskPriorityDisinherit+0x100>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	693a      	ldr	r2, [r7, #16]
 800a88c:	429a      	cmp	r2, r3
 800a88e:	d00a      	beq.n	800a8a6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a890:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a894:	f383 8811 	msr	BASEPRI, r3
 800a898:	f3bf 8f6f 	isb	sy
 800a89c:	f3bf 8f4f 	dsb	sy
 800a8a0:	60fb      	str	r3, [r7, #12]
}
 800a8a2:	bf00      	nop
 800a8a4:	e7fe      	b.n	800a8a4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a8a6:	693b      	ldr	r3, [r7, #16]
 800a8a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d10a      	bne.n	800a8c4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a8ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b2:	f383 8811 	msr	BASEPRI, r3
 800a8b6:	f3bf 8f6f 	isb	sy
 800a8ba:	f3bf 8f4f 	dsb	sy
 800a8be:	60bb      	str	r3, [r7, #8]
}
 800a8c0:	bf00      	nop
 800a8c2:	e7fe      	b.n	800a8c2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a8c4:	693b      	ldr	r3, [r7, #16]
 800a8c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a8c8:	1e5a      	subs	r2, r3, #1
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a8ce:	693b      	ldr	r3, [r7, #16]
 800a8d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8d2:	693b      	ldr	r3, [r7, #16]
 800a8d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8d6:	429a      	cmp	r2, r3
 800a8d8:	d044      	beq.n	800a964 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a8da:	693b      	ldr	r3, [r7, #16]
 800a8dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d140      	bne.n	800a964 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	3304      	adds	r3, #4
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	f7fe fc36 	bl	8009158 <uxListRemove>
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d115      	bne.n	800a91e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a8f2:	693b      	ldr	r3, [r7, #16]
 800a8f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8f6:	491f      	ldr	r1, [pc, #124]	; (800a974 <xTaskPriorityDisinherit+0x104>)
 800a8f8:	4613      	mov	r3, r2
 800a8fa:	009b      	lsls	r3, r3, #2
 800a8fc:	4413      	add	r3, r2
 800a8fe:	009b      	lsls	r3, r3, #2
 800a900:	440b      	add	r3, r1
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d10a      	bne.n	800a91e <xTaskPriorityDisinherit+0xae>
 800a908:	693b      	ldr	r3, [r7, #16]
 800a90a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a90c:	2201      	movs	r2, #1
 800a90e:	fa02 f303 	lsl.w	r3, r2, r3
 800a912:	43da      	mvns	r2, r3
 800a914:	4b18      	ldr	r3, [pc, #96]	; (800a978 <xTaskPriorityDisinherit+0x108>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	4013      	ands	r3, r2
 800a91a:	4a17      	ldr	r2, [pc, #92]	; (800a978 <xTaskPriorityDisinherit+0x108>)
 800a91c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a922:	693b      	ldr	r3, [r7, #16]
 800a924:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a926:	693b      	ldr	r3, [r7, #16]
 800a928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a92a:	f1c3 0207 	rsb	r2, r3, #7
 800a92e:	693b      	ldr	r3, [r7, #16]
 800a930:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a932:	693b      	ldr	r3, [r7, #16]
 800a934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a936:	2201      	movs	r2, #1
 800a938:	409a      	lsls	r2, r3
 800a93a:	4b0f      	ldr	r3, [pc, #60]	; (800a978 <xTaskPriorityDisinherit+0x108>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	4313      	orrs	r3, r2
 800a940:	4a0d      	ldr	r2, [pc, #52]	; (800a978 <xTaskPriorityDisinherit+0x108>)
 800a942:	6013      	str	r3, [r2, #0]
 800a944:	693b      	ldr	r3, [r7, #16]
 800a946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a948:	4613      	mov	r3, r2
 800a94a:	009b      	lsls	r3, r3, #2
 800a94c:	4413      	add	r3, r2
 800a94e:	009b      	lsls	r3, r3, #2
 800a950:	4a08      	ldr	r2, [pc, #32]	; (800a974 <xTaskPriorityDisinherit+0x104>)
 800a952:	441a      	add	r2, r3
 800a954:	693b      	ldr	r3, [r7, #16]
 800a956:	3304      	adds	r3, #4
 800a958:	4619      	mov	r1, r3
 800a95a:	4610      	mov	r0, r2
 800a95c:	f7fe fb9f 	bl	800909e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a960:	2301      	movs	r3, #1
 800a962:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a964:	697b      	ldr	r3, [r7, #20]
	}
 800a966:	4618      	mov	r0, r3
 800a968:	3718      	adds	r7, #24
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}
 800a96e:	bf00      	nop
 800a970:	200062fc 	.word	0x200062fc
 800a974:	20006300 	.word	0x20006300
 800a978:	20006404 	.word	0x20006404

0800a97c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b088      	sub	sp, #32
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
 800a984:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a98a:	2301      	movs	r3, #1
 800a98c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d077      	beq.n	800aa84 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a994:	69bb      	ldr	r3, [r7, #24]
 800a996:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d10a      	bne.n	800a9b2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800a99c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a0:	f383 8811 	msr	BASEPRI, r3
 800a9a4:	f3bf 8f6f 	isb	sy
 800a9a8:	f3bf 8f4f 	dsb	sy
 800a9ac:	60fb      	str	r3, [r7, #12]
}
 800a9ae:	bf00      	nop
 800a9b0:	e7fe      	b.n	800a9b0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a9b2:	69bb      	ldr	r3, [r7, #24]
 800a9b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9b6:	683a      	ldr	r2, [r7, #0]
 800a9b8:	429a      	cmp	r2, r3
 800a9ba:	d902      	bls.n	800a9c2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	61fb      	str	r3, [r7, #28]
 800a9c0:	e002      	b.n	800a9c8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a9c2:	69bb      	ldr	r3, [r7, #24]
 800a9c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9c6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a9c8:	69bb      	ldr	r3, [r7, #24]
 800a9ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9cc:	69fa      	ldr	r2, [r7, #28]
 800a9ce:	429a      	cmp	r2, r3
 800a9d0:	d058      	beq.n	800aa84 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a9d2:	69bb      	ldr	r3, [r7, #24]
 800a9d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9d6:	697a      	ldr	r2, [r7, #20]
 800a9d8:	429a      	cmp	r2, r3
 800a9da:	d153      	bne.n	800aa84 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a9dc:	4b2b      	ldr	r3, [pc, #172]	; (800aa8c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	69ba      	ldr	r2, [r7, #24]
 800a9e2:	429a      	cmp	r2, r3
 800a9e4:	d10a      	bne.n	800a9fc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800a9e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ea:	f383 8811 	msr	BASEPRI, r3
 800a9ee:	f3bf 8f6f 	isb	sy
 800a9f2:	f3bf 8f4f 	dsb	sy
 800a9f6:	60bb      	str	r3, [r7, #8]
}
 800a9f8:	bf00      	nop
 800a9fa:	e7fe      	b.n	800a9fa <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a9fc:	69bb      	ldr	r3, [r7, #24]
 800a9fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa00:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800aa02:	69bb      	ldr	r3, [r7, #24]
 800aa04:	69fa      	ldr	r2, [r7, #28]
 800aa06:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800aa08:	69bb      	ldr	r3, [r7, #24]
 800aa0a:	699b      	ldr	r3, [r3, #24]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	db04      	blt.n	800aa1a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa10:	69fb      	ldr	r3, [r7, #28]
 800aa12:	f1c3 0207 	rsb	r2, r3, #7
 800aa16:	69bb      	ldr	r3, [r7, #24]
 800aa18:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800aa1a:	69bb      	ldr	r3, [r7, #24]
 800aa1c:	6959      	ldr	r1, [r3, #20]
 800aa1e:	693a      	ldr	r2, [r7, #16]
 800aa20:	4613      	mov	r3, r2
 800aa22:	009b      	lsls	r3, r3, #2
 800aa24:	4413      	add	r3, r2
 800aa26:	009b      	lsls	r3, r3, #2
 800aa28:	4a19      	ldr	r2, [pc, #100]	; (800aa90 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800aa2a:	4413      	add	r3, r2
 800aa2c:	4299      	cmp	r1, r3
 800aa2e:	d129      	bne.n	800aa84 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aa30:	69bb      	ldr	r3, [r7, #24]
 800aa32:	3304      	adds	r3, #4
 800aa34:	4618      	mov	r0, r3
 800aa36:	f7fe fb8f 	bl	8009158 <uxListRemove>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d10a      	bne.n	800aa56 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800aa40:	69bb      	ldr	r3, [r7, #24]
 800aa42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa44:	2201      	movs	r2, #1
 800aa46:	fa02 f303 	lsl.w	r3, r2, r3
 800aa4a:	43da      	mvns	r2, r3
 800aa4c:	4b11      	ldr	r3, [pc, #68]	; (800aa94 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	4013      	ands	r3, r2
 800aa52:	4a10      	ldr	r2, [pc, #64]	; (800aa94 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800aa54:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800aa56:	69bb      	ldr	r3, [r7, #24]
 800aa58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa5a:	2201      	movs	r2, #1
 800aa5c:	409a      	lsls	r2, r3
 800aa5e:	4b0d      	ldr	r3, [pc, #52]	; (800aa94 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	4313      	orrs	r3, r2
 800aa64:	4a0b      	ldr	r2, [pc, #44]	; (800aa94 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800aa66:	6013      	str	r3, [r2, #0]
 800aa68:	69bb      	ldr	r3, [r7, #24]
 800aa6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa6c:	4613      	mov	r3, r2
 800aa6e:	009b      	lsls	r3, r3, #2
 800aa70:	4413      	add	r3, r2
 800aa72:	009b      	lsls	r3, r3, #2
 800aa74:	4a06      	ldr	r2, [pc, #24]	; (800aa90 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800aa76:	441a      	add	r2, r3
 800aa78:	69bb      	ldr	r3, [r7, #24]
 800aa7a:	3304      	adds	r3, #4
 800aa7c:	4619      	mov	r1, r3
 800aa7e:	4610      	mov	r0, r2
 800aa80:	f7fe fb0d 	bl	800909e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800aa84:	bf00      	nop
 800aa86:	3720      	adds	r7, #32
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bd80      	pop	{r7, pc}
 800aa8c:	200062fc 	.word	0x200062fc
 800aa90:	20006300 	.word	0x20006300
 800aa94:	20006404 	.word	0x20006404

0800aa98 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800aa98:	b480      	push	{r7}
 800aa9a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800aa9c:	4b07      	ldr	r3, [pc, #28]	; (800aabc <pvTaskIncrementMutexHeldCount+0x24>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d004      	beq.n	800aaae <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800aaa4:	4b05      	ldr	r3, [pc, #20]	; (800aabc <pvTaskIncrementMutexHeldCount+0x24>)
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aaaa:	3201      	adds	r2, #1
 800aaac:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800aaae:	4b03      	ldr	r3, [pc, #12]	; (800aabc <pvTaskIncrementMutexHeldCount+0x24>)
 800aab0:	681b      	ldr	r3, [r3, #0]
	}
 800aab2:	4618      	mov	r0, r3
 800aab4:	46bd      	mov	sp, r7
 800aab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaba:	4770      	bx	lr
 800aabc:	200062fc 	.word	0x200062fc

0800aac0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b084      	sub	sp, #16
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
 800aac8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800aaca:	4b29      	ldr	r3, [pc, #164]	; (800ab70 <prvAddCurrentTaskToDelayedList+0xb0>)
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aad0:	4b28      	ldr	r3, [pc, #160]	; (800ab74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	3304      	adds	r3, #4
 800aad6:	4618      	mov	r0, r3
 800aad8:	f7fe fb3e 	bl	8009158 <uxListRemove>
 800aadc:	4603      	mov	r3, r0
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d10b      	bne.n	800aafa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800aae2:	4b24      	ldr	r3, [pc, #144]	; (800ab74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aae8:	2201      	movs	r2, #1
 800aaea:	fa02 f303 	lsl.w	r3, r2, r3
 800aaee:	43da      	mvns	r2, r3
 800aaf0:	4b21      	ldr	r3, [pc, #132]	; (800ab78 <prvAddCurrentTaskToDelayedList+0xb8>)
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	4013      	ands	r3, r2
 800aaf6:	4a20      	ldr	r2, [pc, #128]	; (800ab78 <prvAddCurrentTaskToDelayedList+0xb8>)
 800aaf8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab00:	d10a      	bne.n	800ab18 <prvAddCurrentTaskToDelayedList+0x58>
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d007      	beq.n	800ab18 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ab08:	4b1a      	ldr	r3, [pc, #104]	; (800ab74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	3304      	adds	r3, #4
 800ab0e:	4619      	mov	r1, r3
 800ab10:	481a      	ldr	r0, [pc, #104]	; (800ab7c <prvAddCurrentTaskToDelayedList+0xbc>)
 800ab12:	f7fe fac4 	bl	800909e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ab16:	e026      	b.n	800ab66 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ab18:	68fa      	ldr	r2, [r7, #12]
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	4413      	add	r3, r2
 800ab1e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ab20:	4b14      	ldr	r3, [pc, #80]	; (800ab74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	68ba      	ldr	r2, [r7, #8]
 800ab26:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ab28:	68ba      	ldr	r2, [r7, #8]
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	429a      	cmp	r2, r3
 800ab2e:	d209      	bcs.n	800ab44 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ab30:	4b13      	ldr	r3, [pc, #76]	; (800ab80 <prvAddCurrentTaskToDelayedList+0xc0>)
 800ab32:	681a      	ldr	r2, [r3, #0]
 800ab34:	4b0f      	ldr	r3, [pc, #60]	; (800ab74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	3304      	adds	r3, #4
 800ab3a:	4619      	mov	r1, r3
 800ab3c:	4610      	mov	r0, r2
 800ab3e:	f7fe fad2 	bl	80090e6 <vListInsert>
}
 800ab42:	e010      	b.n	800ab66 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ab44:	4b0f      	ldr	r3, [pc, #60]	; (800ab84 <prvAddCurrentTaskToDelayedList+0xc4>)
 800ab46:	681a      	ldr	r2, [r3, #0]
 800ab48:	4b0a      	ldr	r3, [pc, #40]	; (800ab74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	3304      	adds	r3, #4
 800ab4e:	4619      	mov	r1, r3
 800ab50:	4610      	mov	r0, r2
 800ab52:	f7fe fac8 	bl	80090e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ab56:	4b0c      	ldr	r3, [pc, #48]	; (800ab88 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	68ba      	ldr	r2, [r7, #8]
 800ab5c:	429a      	cmp	r2, r3
 800ab5e:	d202      	bcs.n	800ab66 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ab60:	4a09      	ldr	r2, [pc, #36]	; (800ab88 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	6013      	str	r3, [r2, #0]
}
 800ab66:	bf00      	nop
 800ab68:	3710      	adds	r7, #16
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	bd80      	pop	{r7, pc}
 800ab6e:	bf00      	nop
 800ab70:	20006400 	.word	0x20006400
 800ab74:	200062fc 	.word	0x200062fc
 800ab78:	20006404 	.word	0x20006404
 800ab7c:	200063e8 	.word	0x200063e8
 800ab80:	200063b8 	.word	0x200063b8
 800ab84:	200063b4 	.word	0x200063b4
 800ab88:	2000641c 	.word	0x2000641c

0800ab8c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ab8c:	b480      	push	{r7}
 800ab8e:	b085      	sub	sp, #20
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	60f8      	str	r0, [r7, #12]
 800ab94:	60b9      	str	r1, [r7, #8]
 800ab96:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	3b04      	subs	r3, #4
 800ab9c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800aba4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	3b04      	subs	r3, #4
 800abaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	f023 0201 	bic.w	r2, r3, #1
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	3b04      	subs	r3, #4
 800abba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800abbc:	4a0c      	ldr	r2, [pc, #48]	; (800abf0 <pxPortInitialiseStack+0x64>)
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	3b14      	subs	r3, #20
 800abc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800abc8:	687a      	ldr	r2, [r7, #4]
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	3b04      	subs	r3, #4
 800abd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	f06f 0202 	mvn.w	r2, #2
 800abda:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	3b20      	subs	r3, #32
 800abe0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800abe2:	68fb      	ldr	r3, [r7, #12]
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	3714      	adds	r7, #20
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr
 800abf0:	0800abf5 	.word	0x0800abf5

0800abf4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800abf4:	b480      	push	{r7}
 800abf6:	b085      	sub	sp, #20
 800abf8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800abfa:	2300      	movs	r3, #0
 800abfc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800abfe:	4b12      	ldr	r3, [pc, #72]	; (800ac48 <prvTaskExitError+0x54>)
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac06:	d00a      	beq.n	800ac1e <prvTaskExitError+0x2a>
	__asm volatile
 800ac08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac0c:	f383 8811 	msr	BASEPRI, r3
 800ac10:	f3bf 8f6f 	isb	sy
 800ac14:	f3bf 8f4f 	dsb	sy
 800ac18:	60fb      	str	r3, [r7, #12]
}
 800ac1a:	bf00      	nop
 800ac1c:	e7fe      	b.n	800ac1c <prvTaskExitError+0x28>
	__asm volatile
 800ac1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac22:	f383 8811 	msr	BASEPRI, r3
 800ac26:	f3bf 8f6f 	isb	sy
 800ac2a:	f3bf 8f4f 	dsb	sy
 800ac2e:	60bb      	str	r3, [r7, #8]
}
 800ac30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ac32:	bf00      	nop
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d0fc      	beq.n	800ac34 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ac3a:	bf00      	nop
 800ac3c:	bf00      	nop
 800ac3e:	3714      	adds	r7, #20
 800ac40:	46bd      	mov	sp, r7
 800ac42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac46:	4770      	bx	lr
 800ac48:	20000080 	.word	0x20000080
 800ac4c:	00000000 	.word	0x00000000

0800ac50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ac50:	4b07      	ldr	r3, [pc, #28]	; (800ac70 <pxCurrentTCBConst2>)
 800ac52:	6819      	ldr	r1, [r3, #0]
 800ac54:	6808      	ldr	r0, [r1, #0]
 800ac56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac5a:	f380 8809 	msr	PSP, r0
 800ac5e:	f3bf 8f6f 	isb	sy
 800ac62:	f04f 0000 	mov.w	r0, #0
 800ac66:	f380 8811 	msr	BASEPRI, r0
 800ac6a:	4770      	bx	lr
 800ac6c:	f3af 8000 	nop.w

0800ac70 <pxCurrentTCBConst2>:
 800ac70:	200062fc 	.word	0x200062fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ac74:	bf00      	nop
 800ac76:	bf00      	nop

0800ac78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ac78:	4808      	ldr	r0, [pc, #32]	; (800ac9c <prvPortStartFirstTask+0x24>)
 800ac7a:	6800      	ldr	r0, [r0, #0]
 800ac7c:	6800      	ldr	r0, [r0, #0]
 800ac7e:	f380 8808 	msr	MSP, r0
 800ac82:	f04f 0000 	mov.w	r0, #0
 800ac86:	f380 8814 	msr	CONTROL, r0
 800ac8a:	b662      	cpsie	i
 800ac8c:	b661      	cpsie	f
 800ac8e:	f3bf 8f4f 	dsb	sy
 800ac92:	f3bf 8f6f 	isb	sy
 800ac96:	df00      	svc	0
 800ac98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ac9a:	bf00      	nop
 800ac9c:	e000ed08 	.word	0xe000ed08

0800aca0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b086      	sub	sp, #24
 800aca4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800aca6:	4b46      	ldr	r3, [pc, #280]	; (800adc0 <xPortStartScheduler+0x120>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	4a46      	ldr	r2, [pc, #280]	; (800adc4 <xPortStartScheduler+0x124>)
 800acac:	4293      	cmp	r3, r2
 800acae:	d10a      	bne.n	800acc6 <xPortStartScheduler+0x26>
	__asm volatile
 800acb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acb4:	f383 8811 	msr	BASEPRI, r3
 800acb8:	f3bf 8f6f 	isb	sy
 800acbc:	f3bf 8f4f 	dsb	sy
 800acc0:	613b      	str	r3, [r7, #16]
}
 800acc2:	bf00      	nop
 800acc4:	e7fe      	b.n	800acc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800acc6:	4b3e      	ldr	r3, [pc, #248]	; (800adc0 <xPortStartScheduler+0x120>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	4a3f      	ldr	r2, [pc, #252]	; (800adc8 <xPortStartScheduler+0x128>)
 800accc:	4293      	cmp	r3, r2
 800acce:	d10a      	bne.n	800ace6 <xPortStartScheduler+0x46>
	__asm volatile
 800acd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd4:	f383 8811 	msr	BASEPRI, r3
 800acd8:	f3bf 8f6f 	isb	sy
 800acdc:	f3bf 8f4f 	dsb	sy
 800ace0:	60fb      	str	r3, [r7, #12]
}
 800ace2:	bf00      	nop
 800ace4:	e7fe      	b.n	800ace4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ace6:	4b39      	ldr	r3, [pc, #228]	; (800adcc <xPortStartScheduler+0x12c>)
 800ace8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800acea:	697b      	ldr	r3, [r7, #20]
 800acec:	781b      	ldrb	r3, [r3, #0]
 800acee:	b2db      	uxtb	r3, r3
 800acf0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	22ff      	movs	r2, #255	; 0xff
 800acf6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800acf8:	697b      	ldr	r3, [r7, #20]
 800acfa:	781b      	ldrb	r3, [r3, #0]
 800acfc:	b2db      	uxtb	r3, r3
 800acfe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ad00:	78fb      	ldrb	r3, [r7, #3]
 800ad02:	b2db      	uxtb	r3, r3
 800ad04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ad08:	b2da      	uxtb	r2, r3
 800ad0a:	4b31      	ldr	r3, [pc, #196]	; (800add0 <xPortStartScheduler+0x130>)
 800ad0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ad0e:	4b31      	ldr	r3, [pc, #196]	; (800add4 <xPortStartScheduler+0x134>)
 800ad10:	2207      	movs	r2, #7
 800ad12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ad14:	e009      	b.n	800ad2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ad16:	4b2f      	ldr	r3, [pc, #188]	; (800add4 <xPortStartScheduler+0x134>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	3b01      	subs	r3, #1
 800ad1c:	4a2d      	ldr	r2, [pc, #180]	; (800add4 <xPortStartScheduler+0x134>)
 800ad1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ad20:	78fb      	ldrb	r3, [r7, #3]
 800ad22:	b2db      	uxtb	r3, r3
 800ad24:	005b      	lsls	r3, r3, #1
 800ad26:	b2db      	uxtb	r3, r3
 800ad28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ad2a:	78fb      	ldrb	r3, [r7, #3]
 800ad2c:	b2db      	uxtb	r3, r3
 800ad2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad32:	2b80      	cmp	r3, #128	; 0x80
 800ad34:	d0ef      	beq.n	800ad16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ad36:	4b27      	ldr	r3, [pc, #156]	; (800add4 <xPortStartScheduler+0x134>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	f1c3 0307 	rsb	r3, r3, #7
 800ad3e:	2b04      	cmp	r3, #4
 800ad40:	d00a      	beq.n	800ad58 <xPortStartScheduler+0xb8>
	__asm volatile
 800ad42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad46:	f383 8811 	msr	BASEPRI, r3
 800ad4a:	f3bf 8f6f 	isb	sy
 800ad4e:	f3bf 8f4f 	dsb	sy
 800ad52:	60bb      	str	r3, [r7, #8]
}
 800ad54:	bf00      	nop
 800ad56:	e7fe      	b.n	800ad56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ad58:	4b1e      	ldr	r3, [pc, #120]	; (800add4 <xPortStartScheduler+0x134>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	021b      	lsls	r3, r3, #8
 800ad5e:	4a1d      	ldr	r2, [pc, #116]	; (800add4 <xPortStartScheduler+0x134>)
 800ad60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ad62:	4b1c      	ldr	r3, [pc, #112]	; (800add4 <xPortStartScheduler+0x134>)
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ad6a:	4a1a      	ldr	r2, [pc, #104]	; (800add4 <xPortStartScheduler+0x134>)
 800ad6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	b2da      	uxtb	r2, r3
 800ad72:	697b      	ldr	r3, [r7, #20]
 800ad74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ad76:	4b18      	ldr	r3, [pc, #96]	; (800add8 <xPortStartScheduler+0x138>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	4a17      	ldr	r2, [pc, #92]	; (800add8 <xPortStartScheduler+0x138>)
 800ad7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ad80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ad82:	4b15      	ldr	r3, [pc, #84]	; (800add8 <xPortStartScheduler+0x138>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	4a14      	ldr	r2, [pc, #80]	; (800add8 <xPortStartScheduler+0x138>)
 800ad88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ad8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ad8e:	f000 f8dd 	bl	800af4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ad92:	4b12      	ldr	r3, [pc, #72]	; (800addc <xPortStartScheduler+0x13c>)
 800ad94:	2200      	movs	r2, #0
 800ad96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ad98:	f000 f8fc 	bl	800af94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ad9c:	4b10      	ldr	r3, [pc, #64]	; (800ade0 <xPortStartScheduler+0x140>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	4a0f      	ldr	r2, [pc, #60]	; (800ade0 <xPortStartScheduler+0x140>)
 800ada2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ada6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ada8:	f7ff ff66 	bl	800ac78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800adac:	f7ff fa9c 	bl	800a2e8 <vTaskSwitchContext>
	prvTaskExitError();
 800adb0:	f7ff ff20 	bl	800abf4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800adb4:	2300      	movs	r3, #0
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	3718      	adds	r7, #24
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}
 800adbe:	bf00      	nop
 800adc0:	e000ed00 	.word	0xe000ed00
 800adc4:	410fc271 	.word	0x410fc271
 800adc8:	410fc270 	.word	0x410fc270
 800adcc:	e000e400 	.word	0xe000e400
 800add0:	20006430 	.word	0x20006430
 800add4:	20006434 	.word	0x20006434
 800add8:	e000ed20 	.word	0xe000ed20
 800addc:	20000080 	.word	0x20000080
 800ade0:	e000ef34 	.word	0xe000ef34

0800ade4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ade4:	b480      	push	{r7}
 800ade6:	b083      	sub	sp, #12
 800ade8:	af00      	add	r7, sp, #0
	__asm volatile
 800adea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adee:	f383 8811 	msr	BASEPRI, r3
 800adf2:	f3bf 8f6f 	isb	sy
 800adf6:	f3bf 8f4f 	dsb	sy
 800adfa:	607b      	str	r3, [r7, #4]
}
 800adfc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800adfe:	4b0f      	ldr	r3, [pc, #60]	; (800ae3c <vPortEnterCritical+0x58>)
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	3301      	adds	r3, #1
 800ae04:	4a0d      	ldr	r2, [pc, #52]	; (800ae3c <vPortEnterCritical+0x58>)
 800ae06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ae08:	4b0c      	ldr	r3, [pc, #48]	; (800ae3c <vPortEnterCritical+0x58>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	2b01      	cmp	r3, #1
 800ae0e:	d10f      	bne.n	800ae30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ae10:	4b0b      	ldr	r3, [pc, #44]	; (800ae40 <vPortEnterCritical+0x5c>)
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	b2db      	uxtb	r3, r3
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d00a      	beq.n	800ae30 <vPortEnterCritical+0x4c>
	__asm volatile
 800ae1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae1e:	f383 8811 	msr	BASEPRI, r3
 800ae22:	f3bf 8f6f 	isb	sy
 800ae26:	f3bf 8f4f 	dsb	sy
 800ae2a:	603b      	str	r3, [r7, #0]
}
 800ae2c:	bf00      	nop
 800ae2e:	e7fe      	b.n	800ae2e <vPortEnterCritical+0x4a>
	}
}
 800ae30:	bf00      	nop
 800ae32:	370c      	adds	r7, #12
 800ae34:	46bd      	mov	sp, r7
 800ae36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3a:	4770      	bx	lr
 800ae3c:	20000080 	.word	0x20000080
 800ae40:	e000ed04 	.word	0xe000ed04

0800ae44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ae44:	b480      	push	{r7}
 800ae46:	b083      	sub	sp, #12
 800ae48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ae4a:	4b12      	ldr	r3, [pc, #72]	; (800ae94 <vPortExitCritical+0x50>)
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d10a      	bne.n	800ae68 <vPortExitCritical+0x24>
	__asm volatile
 800ae52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae56:	f383 8811 	msr	BASEPRI, r3
 800ae5a:	f3bf 8f6f 	isb	sy
 800ae5e:	f3bf 8f4f 	dsb	sy
 800ae62:	607b      	str	r3, [r7, #4]
}
 800ae64:	bf00      	nop
 800ae66:	e7fe      	b.n	800ae66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ae68:	4b0a      	ldr	r3, [pc, #40]	; (800ae94 <vPortExitCritical+0x50>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	3b01      	subs	r3, #1
 800ae6e:	4a09      	ldr	r2, [pc, #36]	; (800ae94 <vPortExitCritical+0x50>)
 800ae70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ae72:	4b08      	ldr	r3, [pc, #32]	; (800ae94 <vPortExitCritical+0x50>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d105      	bne.n	800ae86 <vPortExitCritical+0x42>
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	f383 8811 	msr	BASEPRI, r3
}
 800ae84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ae86:	bf00      	nop
 800ae88:	370c      	adds	r7, #12
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae90:	4770      	bx	lr
 800ae92:	bf00      	nop
 800ae94:	20000080 	.word	0x20000080
	...

0800aea0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800aea0:	f3ef 8009 	mrs	r0, PSP
 800aea4:	f3bf 8f6f 	isb	sy
 800aea8:	4b15      	ldr	r3, [pc, #84]	; (800af00 <pxCurrentTCBConst>)
 800aeaa:	681a      	ldr	r2, [r3, #0]
 800aeac:	f01e 0f10 	tst.w	lr, #16
 800aeb0:	bf08      	it	eq
 800aeb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800aeb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeba:	6010      	str	r0, [r2, #0]
 800aebc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aec0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800aec4:	f380 8811 	msr	BASEPRI, r0
 800aec8:	f3bf 8f4f 	dsb	sy
 800aecc:	f3bf 8f6f 	isb	sy
 800aed0:	f7ff fa0a 	bl	800a2e8 <vTaskSwitchContext>
 800aed4:	f04f 0000 	mov.w	r0, #0
 800aed8:	f380 8811 	msr	BASEPRI, r0
 800aedc:	bc09      	pop	{r0, r3}
 800aede:	6819      	ldr	r1, [r3, #0]
 800aee0:	6808      	ldr	r0, [r1, #0]
 800aee2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aee6:	f01e 0f10 	tst.w	lr, #16
 800aeea:	bf08      	it	eq
 800aeec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aef0:	f380 8809 	msr	PSP, r0
 800aef4:	f3bf 8f6f 	isb	sy
 800aef8:	4770      	bx	lr
 800aefa:	bf00      	nop
 800aefc:	f3af 8000 	nop.w

0800af00 <pxCurrentTCBConst>:
 800af00:	200062fc 	.word	0x200062fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800af04:	bf00      	nop
 800af06:	bf00      	nop

0800af08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b082      	sub	sp, #8
 800af0c:	af00      	add	r7, sp, #0
	__asm volatile
 800af0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af12:	f383 8811 	msr	BASEPRI, r3
 800af16:	f3bf 8f6f 	isb	sy
 800af1a:	f3bf 8f4f 	dsb	sy
 800af1e:	607b      	str	r3, [r7, #4]
}
 800af20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800af22:	f7ff f929 	bl	800a178 <xTaskIncrementTick>
 800af26:	4603      	mov	r3, r0
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d003      	beq.n	800af34 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800af2c:	4b06      	ldr	r3, [pc, #24]	; (800af48 <SysTick_Handler+0x40>)
 800af2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af32:	601a      	str	r2, [r3, #0]
 800af34:	2300      	movs	r3, #0
 800af36:	603b      	str	r3, [r7, #0]
	__asm volatile
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	f383 8811 	msr	BASEPRI, r3
}
 800af3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800af40:	bf00      	nop
 800af42:	3708      	adds	r7, #8
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}
 800af48:	e000ed04 	.word	0xe000ed04

0800af4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800af4c:	b480      	push	{r7}
 800af4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800af50:	4b0b      	ldr	r3, [pc, #44]	; (800af80 <vPortSetupTimerInterrupt+0x34>)
 800af52:	2200      	movs	r2, #0
 800af54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800af56:	4b0b      	ldr	r3, [pc, #44]	; (800af84 <vPortSetupTimerInterrupt+0x38>)
 800af58:	2200      	movs	r2, #0
 800af5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800af5c:	4b0a      	ldr	r3, [pc, #40]	; (800af88 <vPortSetupTimerInterrupt+0x3c>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	4a0a      	ldr	r2, [pc, #40]	; (800af8c <vPortSetupTimerInterrupt+0x40>)
 800af62:	fba2 2303 	umull	r2, r3, r2, r3
 800af66:	099b      	lsrs	r3, r3, #6
 800af68:	4a09      	ldr	r2, [pc, #36]	; (800af90 <vPortSetupTimerInterrupt+0x44>)
 800af6a:	3b01      	subs	r3, #1
 800af6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800af6e:	4b04      	ldr	r3, [pc, #16]	; (800af80 <vPortSetupTimerInterrupt+0x34>)
 800af70:	2207      	movs	r2, #7
 800af72:	601a      	str	r2, [r3, #0]
}
 800af74:	bf00      	nop
 800af76:	46bd      	mov	sp, r7
 800af78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7c:	4770      	bx	lr
 800af7e:	bf00      	nop
 800af80:	e000e010 	.word	0xe000e010
 800af84:	e000e018 	.word	0xe000e018
 800af88:	20000074 	.word	0x20000074
 800af8c:	10624dd3 	.word	0x10624dd3
 800af90:	e000e014 	.word	0xe000e014

0800af94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800af94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800afa4 <vPortEnableVFP+0x10>
 800af98:	6801      	ldr	r1, [r0, #0]
 800af9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800af9e:	6001      	str	r1, [r0, #0]
 800afa0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800afa2:	bf00      	nop
 800afa4:	e000ed88 	.word	0xe000ed88

0800afa8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800afa8:	b480      	push	{r7}
 800afaa:	b085      	sub	sp, #20
 800afac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800afae:	f3ef 8305 	mrs	r3, IPSR
 800afb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	2b0f      	cmp	r3, #15
 800afb8:	d914      	bls.n	800afe4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800afba:	4a17      	ldr	r2, [pc, #92]	; (800b018 <vPortValidateInterruptPriority+0x70>)
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	4413      	add	r3, r2
 800afc0:	781b      	ldrb	r3, [r3, #0]
 800afc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800afc4:	4b15      	ldr	r3, [pc, #84]	; (800b01c <vPortValidateInterruptPriority+0x74>)
 800afc6:	781b      	ldrb	r3, [r3, #0]
 800afc8:	7afa      	ldrb	r2, [r7, #11]
 800afca:	429a      	cmp	r2, r3
 800afcc:	d20a      	bcs.n	800afe4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800afce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd2:	f383 8811 	msr	BASEPRI, r3
 800afd6:	f3bf 8f6f 	isb	sy
 800afda:	f3bf 8f4f 	dsb	sy
 800afde:	607b      	str	r3, [r7, #4]
}
 800afe0:	bf00      	nop
 800afe2:	e7fe      	b.n	800afe2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800afe4:	4b0e      	ldr	r3, [pc, #56]	; (800b020 <vPortValidateInterruptPriority+0x78>)
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800afec:	4b0d      	ldr	r3, [pc, #52]	; (800b024 <vPortValidateInterruptPriority+0x7c>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	429a      	cmp	r2, r3
 800aff2:	d90a      	bls.n	800b00a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800aff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff8:	f383 8811 	msr	BASEPRI, r3
 800affc:	f3bf 8f6f 	isb	sy
 800b000:	f3bf 8f4f 	dsb	sy
 800b004:	603b      	str	r3, [r7, #0]
}
 800b006:	bf00      	nop
 800b008:	e7fe      	b.n	800b008 <vPortValidateInterruptPriority+0x60>
	}
 800b00a:	bf00      	nop
 800b00c:	3714      	adds	r7, #20
 800b00e:	46bd      	mov	sp, r7
 800b010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b014:	4770      	bx	lr
 800b016:	bf00      	nop
 800b018:	e000e3f0 	.word	0xe000e3f0
 800b01c:	20006430 	.word	0x20006430
 800b020:	e000ed0c 	.word	0xe000ed0c
 800b024:	20006434 	.word	0x20006434

0800b028 <__libc_init_array>:
 800b028:	b570      	push	{r4, r5, r6, lr}
 800b02a:	4d0d      	ldr	r5, [pc, #52]	; (800b060 <__libc_init_array+0x38>)
 800b02c:	4c0d      	ldr	r4, [pc, #52]	; (800b064 <__libc_init_array+0x3c>)
 800b02e:	1b64      	subs	r4, r4, r5
 800b030:	10a4      	asrs	r4, r4, #2
 800b032:	2600      	movs	r6, #0
 800b034:	42a6      	cmp	r6, r4
 800b036:	d109      	bne.n	800b04c <__libc_init_array+0x24>
 800b038:	4d0b      	ldr	r5, [pc, #44]	; (800b068 <__libc_init_array+0x40>)
 800b03a:	4c0c      	ldr	r4, [pc, #48]	; (800b06c <__libc_init_array+0x44>)
 800b03c:	f000 f82e 	bl	800b09c <_init>
 800b040:	1b64      	subs	r4, r4, r5
 800b042:	10a4      	asrs	r4, r4, #2
 800b044:	2600      	movs	r6, #0
 800b046:	42a6      	cmp	r6, r4
 800b048:	d105      	bne.n	800b056 <__libc_init_array+0x2e>
 800b04a:	bd70      	pop	{r4, r5, r6, pc}
 800b04c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b050:	4798      	blx	r3
 800b052:	3601      	adds	r6, #1
 800b054:	e7ee      	b.n	800b034 <__libc_init_array+0xc>
 800b056:	f855 3b04 	ldr.w	r3, [r5], #4
 800b05a:	4798      	blx	r3
 800b05c:	3601      	adds	r6, #1
 800b05e:	e7f2      	b.n	800b046 <__libc_init_array+0x1e>
 800b060:	0800b128 	.word	0x0800b128
 800b064:	0800b128 	.word	0x0800b128
 800b068:	0800b128 	.word	0x0800b128
 800b06c:	0800b12c 	.word	0x0800b12c

0800b070 <memcpy>:
 800b070:	440a      	add	r2, r1
 800b072:	4291      	cmp	r1, r2
 800b074:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b078:	d100      	bne.n	800b07c <memcpy+0xc>
 800b07a:	4770      	bx	lr
 800b07c:	b510      	push	{r4, lr}
 800b07e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b082:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b086:	4291      	cmp	r1, r2
 800b088:	d1f9      	bne.n	800b07e <memcpy+0xe>
 800b08a:	bd10      	pop	{r4, pc}

0800b08c <memset>:
 800b08c:	4402      	add	r2, r0
 800b08e:	4603      	mov	r3, r0
 800b090:	4293      	cmp	r3, r2
 800b092:	d100      	bne.n	800b096 <memset+0xa>
 800b094:	4770      	bx	lr
 800b096:	f803 1b01 	strb.w	r1, [r3], #1
 800b09a:	e7f9      	b.n	800b090 <memset+0x4>

0800b09c <_init>:
 800b09c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b09e:	bf00      	nop
 800b0a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0a2:	bc08      	pop	{r3}
 800b0a4:	469e      	mov	lr, r3
 800b0a6:	4770      	bx	lr

0800b0a8 <_fini>:
 800b0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0aa:	bf00      	nop
 800b0ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0ae:	bc08      	pop	{r3}
 800b0b0:	469e      	mov	lr, r3
 800b0b2:	4770      	bx	lr
