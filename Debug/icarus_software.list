
icarus_software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb54  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  0800bd24  0800bd24  0001bd24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bda0  0800bda0  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800bda0  0800bda0  0001bda0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bda8  0800bda8  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bda8  0800bda8  0001bda8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bdac  0800bdac  0001bdac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800bdb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000809c  20000088  0800be38  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008124  0800be38  00028124  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002bc2f  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005fc8  00000000  00000000  0004bce7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d80  00000000  00000000  00051cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b08  00000000  00000000  00053a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028321  00000000  00000000  00055538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023893  00000000  00000000  0007d859  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e23a9  00000000  00000000  000a10ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00183495  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000078a8  00000000  00000000  001834e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000088 	.word	0x20000088
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800bd0c 	.word	0x0800bd0c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000008c 	.word	0x2000008c
 800020c:	0800bd0c 	.word	0x0800bd0c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000224:	f000 b96e 	b.w	8000504 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468c      	mov	ip, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	f040 8083 	bne.w	8000356 <__udivmoddi4+0x116>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d947      	bls.n	80002e6 <__udivmoddi4+0xa6>
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	b142      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025c:	f1c2 0020 	rsb	r0, r2, #32
 8000260:	fa24 f000 	lsr.w	r0, r4, r0
 8000264:	4091      	lsls	r1, r2
 8000266:	4097      	lsls	r7, r2
 8000268:	ea40 0c01 	orr.w	ip, r0, r1
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbbc f6f8 	udiv	r6, ip, r8
 8000278:	fa1f fe87 	uxth.w	lr, r7
 800027c:	fb08 c116 	mls	r1, r8, r6, ip
 8000280:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000284:	fb06 f10e 	mul.w	r1, r6, lr
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000292:	f080 8119 	bcs.w	80004c8 <__udivmoddi4+0x288>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8116 	bls.w	80004c8 <__udivmoddi4+0x288>
 800029c:	3e02      	subs	r6, #2
 800029e:	443b      	add	r3, r7
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b4:	45a6      	cmp	lr, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002be:	f080 8105 	bcs.w	80004cc <__udivmoddi4+0x28c>
 80002c2:	45a6      	cmp	lr, r4
 80002c4:	f240 8102 	bls.w	80004cc <__udivmoddi4+0x28c>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	2600      	movs	r6, #0
 80002d6:	b11d      	cbz	r5, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c5 4300 	strd	r4, r3, [r5]
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xaa>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	d150      	bne.n	8000394 <__udivmoddi4+0x154>
 80002f2:	1bcb      	subs	r3, r1, r7
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	fa1f f887 	uxth.w	r8, r7
 80002fc:	2601      	movs	r6, #1
 80002fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000302:	0c21      	lsrs	r1, r4, #16
 8000304:	fb0e 331c 	mls	r3, lr, ip, r3
 8000308:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800030c:	fb08 f30c 	mul.w	r3, r8, ip
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000314:	1879      	adds	r1, r7, r1
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0xe2>
 800031c:	428b      	cmp	r3, r1
 800031e:	f200 80e9 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 8000322:	4684      	mov	ip, r0
 8000324:	1ac9      	subs	r1, r1, r3
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000330:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x10c>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x10a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80d9 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e7bf      	b.n	80002d6 <__udivmoddi4+0x96>
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x12e>
 800035a:	2d00      	cmp	r5, #0
 800035c:	f000 80b1 	beq.w	80004c2 <__udivmoddi4+0x282>
 8000360:	2600      	movs	r6, #0
 8000362:	e9c5 0100 	strd	r0, r1, [r5]
 8000366:	4630      	mov	r0, r6
 8000368:	4631      	mov	r1, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f683 	clz	r6, r3
 8000372:	2e00      	cmp	r6, #0
 8000374:	d14a      	bne.n	800040c <__udivmoddi4+0x1cc>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0x140>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80b8 	bhi.w	80004f0 <__udivmoddi4+0x2b0>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0103 	sbc.w	r1, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	468c      	mov	ip, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0a8      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800038e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000394:	f1c2 0320 	rsb	r3, r2, #32
 8000398:	fa20 f603 	lsr.w	r6, r0, r3
 800039c:	4097      	lsls	r7, r2
 800039e:	fa01 f002 	lsl.w	r0, r1, r2
 80003a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a6:	40d9      	lsrs	r1, r3
 80003a8:	4330      	orrs	r0, r6
 80003aa:	0c03      	lsrs	r3, r0, #16
 80003ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b0:	fa1f f887 	uxth.w	r8, r7
 80003b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb06 f108 	mul.w	r1, r6, r8
 80003c0:	4299      	cmp	r1, r3
 80003c2:	fa04 f402 	lsl.w	r4, r4, r2
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x19c>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003ce:	f080 808d 	bcs.w	80004ec <__udivmoddi4+0x2ac>
 80003d2:	4299      	cmp	r1, r3
 80003d4:	f240 808a 	bls.w	80004ec <__udivmoddi4+0x2ac>
 80003d8:	3e02      	subs	r6, #2
 80003da:	443b      	add	r3, r7
 80003dc:	1a5b      	subs	r3, r3, r1
 80003de:	b281      	uxth	r1, r0
 80003e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb00 f308 	mul.w	r3, r0, r8
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x1c4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003fa:	d273      	bcs.n	80004e4 <__udivmoddi4+0x2a4>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d971      	bls.n	80004e4 <__udivmoddi4+0x2a4>
 8000400:	3802      	subs	r0, #2
 8000402:	4439      	add	r1, r7
 8000404:	1acb      	subs	r3, r1, r3
 8000406:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040a:	e778      	b.n	80002fe <__udivmoddi4+0xbe>
 800040c:	f1c6 0c20 	rsb	ip, r6, #32
 8000410:	fa03 f406 	lsl.w	r4, r3, r6
 8000414:	fa22 f30c 	lsr.w	r3, r2, ip
 8000418:	431c      	orrs	r4, r3
 800041a:	fa20 f70c 	lsr.w	r7, r0, ip
 800041e:	fa01 f306 	lsl.w	r3, r1, r6
 8000422:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000426:	fa21 f10c 	lsr.w	r1, r1, ip
 800042a:	431f      	orrs	r7, r3
 800042c:	0c3b      	lsrs	r3, r7, #16
 800042e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000432:	fa1f f884 	uxth.w	r8, r4
 8000436:	fb0e 1119 	mls	r1, lr, r9, r1
 800043a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043e:	fb09 fa08 	mul.w	sl, r9, r8
 8000442:	458a      	cmp	sl, r1
 8000444:	fa02 f206 	lsl.w	r2, r2, r6
 8000448:	fa00 f306 	lsl.w	r3, r0, r6
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x220>
 800044e:	1861      	adds	r1, r4, r1
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000454:	d248      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 8000456:	458a      	cmp	sl, r1
 8000458:	d946      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4421      	add	r1, r4
 8000460:	eba1 010a 	sub.w	r1, r1, sl
 8000464:	b2bf      	uxth	r7, r7
 8000466:	fbb1 f0fe 	udiv	r0, r1, lr
 800046a:	fb0e 1110 	mls	r1, lr, r0, r1
 800046e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45b8      	cmp	r8, r7
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x24a>
 800047a:	19e7      	adds	r7, r4, r7
 800047c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000480:	d22e      	bcs.n	80004e0 <__udivmoddi4+0x2a0>
 8000482:	45b8      	cmp	r8, r7
 8000484:	d92c      	bls.n	80004e0 <__udivmoddi4+0x2a0>
 8000486:	3802      	subs	r0, #2
 8000488:	4427      	add	r7, r4
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba7 0708 	sub.w	r7, r7, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454f      	cmp	r7, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	4649      	mov	r1, r9
 800049c:	d31a      	bcc.n	80004d4 <__udivmoddi4+0x294>
 800049e:	d017      	beq.n	80004d0 <__udivmoddi4+0x290>
 80004a0:	b15d      	cbz	r5, 80004ba <__udivmoddi4+0x27a>
 80004a2:	ebb3 020e 	subs.w	r2, r3, lr
 80004a6:	eb67 0701 	sbc.w	r7, r7, r1
 80004aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ae:	40f2      	lsrs	r2, r6
 80004b0:	ea4c 0202 	orr.w	r2, ip, r2
 80004b4:	40f7      	lsrs	r7, r6
 80004b6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ba:	2600      	movs	r6, #0
 80004bc:	4631      	mov	r1, r6
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e70b      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fd      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d0:	4543      	cmp	r3, r8
 80004d2:	d2e5      	bcs.n	80004a0 <__udivmoddi4+0x260>
 80004d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d8:	eb69 0104 	sbc.w	r1, r9, r4
 80004dc:	3801      	subs	r0, #1
 80004de:	e7df      	b.n	80004a0 <__udivmoddi4+0x260>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e7d2      	b.n	800048a <__udivmoddi4+0x24a>
 80004e4:	4660      	mov	r0, ip
 80004e6:	e78d      	b.n	8000404 <__udivmoddi4+0x1c4>
 80004e8:	4681      	mov	r9, r0
 80004ea:	e7b9      	b.n	8000460 <__udivmoddi4+0x220>
 80004ec:	4666      	mov	r6, ip
 80004ee:	e775      	b.n	80003dc <__udivmoddi4+0x19c>
 80004f0:	4630      	mov	r0, r6
 80004f2:	e74a      	b.n	800038a <__udivmoddi4+0x14a>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	4439      	add	r1, r7
 80004fa:	e713      	b.n	8000324 <__udivmoddi4+0xe4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	443c      	add	r4, r7
 8000500:	e724      	b.n	800034c <__udivmoddi4+0x10c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <pointer_inc>:
volatile int32_t can_buffer_pointer_tx = 0;


uint32_t can_readFrame(void);

uint32_t pointer_inc(uint32_t val, uint32_t size) {
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	6039      	str	r1, [r7, #0]
	return (val + 1) % size;
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	3301      	adds	r3, #1
 8000516:	683a      	ldr	r2, [r7, #0]
 8000518:	fbb3 f2f2 	udiv	r2, r3, r2
 800051c:	6839      	ldr	r1, [r7, #0]
 800051e:	fb01 f202 	mul.w	r2, r1, r2
 8000522:	1a9b      	subs	r3, r3, r2
}
 8000524:	4618      	mov	r0, r3
 8000526:	370c      	adds	r7, #12
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr

08000530 <can_addMsg>:

void can_addMsg(CAN_msg msg) {
 8000530:	b590      	push	{r4, r7, lr}
 8000532:	b085      	sub	sp, #20
 8000534:	af00      	add	r7, sp, #0
 8000536:	463c      	mov	r4, r7
 8000538:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	can_buffer[can_buffer_pointer_tx] = msg;
 800053c:	4b13      	ldr	r3, [pc, #76]	; (800058c <can_addMsg+0x5c>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a13      	ldr	r2, [pc, #76]	; (8000590 <can_addMsg+0x60>)
 8000542:	011b      	lsls	r3, r3, #4
 8000544:	4413      	add	r3, r2
 8000546:	461c      	mov	r4, r3
 8000548:	463b      	mov	r3, r7
 800054a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800054c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	can_buffer_pointer_tx = pointer_inc(can_buffer_pointer_tx, CAN_BUFFER_DEPTH);
 8000550:	4b0e      	ldr	r3, [pc, #56]	; (800058c <can_addMsg+0x5c>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2140      	movs	r1, #64	; 0x40
 8000556:	4618      	mov	r0, r3
 8000558:	f7ff ffd6 	bl	8000508 <pointer_inc>
 800055c:	4603      	mov	r3, r0
 800055e:	461a      	mov	r2, r3
 8000560:	4b0a      	ldr	r3, [pc, #40]	; (800058c <can_addMsg+0x5c>)
 8000562:	601a      	str	r2, [r3, #0]

	if (can_buffer_pointer_tx == can_buffer_pointer_rx) { // indicates overflow
 8000564:	4b09      	ldr	r3, [pc, #36]	; (800058c <can_addMsg+0x5c>)
 8000566:	681a      	ldr	r2, [r3, #0]
 8000568:	4b0a      	ldr	r3, [pc, #40]	; (8000594 <can_addMsg+0x64>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	429a      	cmp	r2, r3
 800056e:	d109      	bne.n	8000584 <can_addMsg+0x54>
		can_buffer_pointer_rx = pointer_inc(can_buffer_pointer_rx, CAN_BUFFER_DEPTH); // skip one msg in the rx buffer
 8000570:	4b08      	ldr	r3, [pc, #32]	; (8000594 <can_addMsg+0x64>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	2140      	movs	r1, #64	; 0x40
 8000576:	4618      	mov	r0, r3
 8000578:	f7ff ffc6 	bl	8000508 <pointer_inc>
 800057c:	4603      	mov	r3, r0
 800057e:	461a      	mov	r2, r3
 8000580:	4b04      	ldr	r3, [pc, #16]	; (8000594 <can_addMsg+0x64>)
 8000582:	601a      	str	r2, [r3, #0]
	}
}
 8000584:	bf00      	nop
 8000586:	3714      	adds	r7, #20
 8000588:	46bd      	mov	sp, r7
 800058a:	bd90      	pop	{r4, r7, pc}
 800058c:	200000a8 	.word	0x200000a8
 8000590:	20007584 	.word	0x20007584
 8000594:	200000a4 	.word	0x200000a4

08000598 <CAN_Config>:

/*
 * Configures CAN protocol for 250kbit/s without interrupt for reading (only polling).
 */
void CAN_Config(uint32_t id)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b08c      	sub	sp, #48	; 0x30
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]

    /*##-1- Configure the CAN peripheral #######################################*/
    // Done in MX_CAN1_Init()

    /*##-2- Configure the CAN Filter ###########################################*/
    sFilterConfig.FilterBank = 0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	61fb      	str	r3, [r7, #28]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80005a4:	2300      	movs	r3, #0
 80005a6:	623b      	str	r3, [r7, #32]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80005a8:	2301      	movs	r3, #1
 80005aa:	627b      	str	r3, [r7, #36]	; 0x24
    sFilterConfig.FilterIdHigh = 0x0000;
 80005ac:	2300      	movs	r3, #0
 80005ae:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterIdLow = 0x0000;
 80005b0:	2300      	movs	r3, #0
 80005b2:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterMaskIdHigh = 0x0000;
 80005b4:	2300      	movs	r3, #0
 80005b6:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterMaskIdLow = 0x0000;
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80005bc:	2300      	movs	r3, #0
 80005be:	61bb      	str	r3, [r7, #24]
    sFilterConfig.FilterActivation = ENABLE;
 80005c0:	2301      	movs	r3, #1
 80005c2:	62bb      	str	r3, [r7, #40]	; 0x28
    sFilterConfig.SlaveStartFilterBank = 14;
 80005c4:	230e      	movs	r3, #14
 80005c6:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 80005c8:	f107 0308 	add.w	r3, r7, #8
 80005cc:	4619      	mov	r1, r3
 80005ce:	4810      	ldr	r0, [pc, #64]	; (8000610 <CAN_Config+0x78>)
 80005d0:	f003 ff54 	bl	800447c <HAL_CAN_ConfigFilter>
        /* Filter configuration Error */
        //      _Error_Handler(__FILE__, __LINE__);
    }

    /*##-3- Start the CAN peripheral ###########################################*/
    if (HAL_CAN_Start(&hcan1) != HAL_OK)
 80005d4:	480e      	ldr	r0, [pc, #56]	; (8000610 <CAN_Config+0x78>)
 80005d6:	f004 f831 	bl	800463c <HAL_CAN_Start>
        /* Start Error */
        //      _Error_Handler(__FILE__, __LINE__);
    }

    /*##-4- Activate CAN RX notification #######################################*/
    if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80005da:	2102      	movs	r1, #2
 80005dc:	480c      	ldr	r0, [pc, #48]	; (8000610 <CAN_Config+0x78>)
 80005de:	f004 faaa 	bl	8004b36 <HAL_CAN_ActivateNotification>
        /* Notification Error */
    	//_Error_Handler(__FILE__, __LINE__);
    }

    /*##-5- Configure Transmission process #####################################*/
    TxHeader.StdId = id;
 80005e2:	4a0c      	ldr	r2, [pc, #48]	; (8000614 <CAN_Config+0x7c>)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	6013      	str	r3, [r2, #0]
    TxHeader.ExtId = id; // not needed
 80005e8:	4a0a      	ldr	r2, [pc, #40]	; (8000614 <CAN_Config+0x7c>)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	6053      	str	r3, [r2, #4]
    TxHeader.RTR = CAN_RTR_DATA;
 80005ee:	4b09      	ldr	r3, [pc, #36]	; (8000614 <CAN_Config+0x7c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	60da      	str	r2, [r3, #12]
    TxHeader.IDE = CAN_ID_STD;
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <CAN_Config+0x7c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	609a      	str	r2, [r3, #8]
    TxHeader.DLC = 8;
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <CAN_Config+0x7c>)
 80005fc:	2208      	movs	r2, #8
 80005fe:	611a      	str	r2, [r3, #16]
    TxHeader.TransmitGlobalTime = DISABLE;
 8000600:	4b04      	ldr	r3, [pc, #16]	; (8000614 <CAN_Config+0x7c>)
 8000602:	2200      	movs	r2, #0
 8000604:	751a      	strb	r2, [r3, #20]
}
 8000606:	bf00      	nop
 8000608:	3730      	adds	r7, #48	; 0x30
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	20007984 	.word	0x20007984
 8000614:	20007550 	.word	0x20007550

08000618 <can_setFrame>:
 * Sends a frame of 8 bytes (payload) on the CAN bus using our predefined protocol.
 * byte 0..3 --> some uint32_t
 * byte 4    --> data_id, see CAN_communication.h
 * byte 5..7 --> timestamp
 */
void can_setFrame(uint32_t data, uint8_t data_id, uint32_t timestamp) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b08e      	sub	sp, #56	; 0x38
 800061c:	af00      	add	r7, sp, #0
 800061e:	60f8      	str	r0, [r7, #12]
 8000620:	460b      	mov	r3, r1
 8000622:	607a      	str	r2, [r7, #4]
 8000624:	72fb      	strb	r3, [r7, #11]
	uint8_t TxData[8] = {0};
 8000626:	2300      	movs	r3, #0
 8000628:	633b      	str	r3, [r7, #48]	; 0x30
 800062a:	2300      	movs	r3, #0
 800062c:	637b      	str	r3, [r7, #52]	; 0x34
	TxData[0] = (uint8_t) (data >> 24);
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	0e1b      	lsrs	r3, r3, #24
 8000632:	b2db      	uxtb	r3, r3
 8000634:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    TxData[1] = (uint8_t) (data >> 16);
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	0c1b      	lsrs	r3, r3, #16
 800063c:	b2db      	uxtb	r3, r3
 800063e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    TxData[2] = (uint8_t) (data >> 8);
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	0a1b      	lsrs	r3, r3, #8
 8000646:	b2db      	uxtb	r3, r3
 8000648:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    TxData[3] = (uint8_t) (data >> 0);
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	b2db      	uxtb	r3, r3
 8000650:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    TxData[4] = data_id;
 8000654:	7afb      	ldrb	r3, [r7, #11]
 8000656:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    TxData[5] = (uint8_t) (timestamp >> 16);
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	0c1b      	lsrs	r3, r3, #16
 800065e:	b2db      	uxtb	r3, r3
 8000660:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    TxData[6] = (uint8_t) (timestamp >> 8);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	0a1b      	lsrs	r3, r3, #8
 8000668:	b2db      	uxtb	r3, r3
 800066a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    TxData[7] = (uint8_t) (timestamp >> 0);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	b2db      	uxtb	r3, r3
 8000672:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	while (HAL_CAN_IsTxMessagePending(&hcan1, TxMailbox)) {
 8000676:	e002      	b.n	800067e <can_setFrame+0x66>
		osDelay(1);
 8000678:	2001      	movs	r0, #1
 800067a:	f009 fb03 	bl	8009c84 <osDelay>
	while (HAL_CAN_IsTxMessagePending(&hcan1, TxMailbox)) {
 800067e:	4b13      	ldr	r3, [pc, #76]	; (80006cc <can_setFrame+0xb4>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4619      	mov	r1, r3
 8000684:	4812      	ldr	r0, [pc, #72]	; (80006d0 <can_setFrame+0xb8>)
 8000686:	f004 f8f8 	bl	800487a <HAL_CAN_IsTxMessagePending>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d1f3      	bne.n	8000678 <can_setFrame+0x60>
	} // wait for CAN to be ready

	CAN_msg message = (CAN_msg) {data, data_id, timestamp, TxHeader.StdId};
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	623b      	str	r3, [r7, #32]
 8000694:	7afb      	ldrb	r3, [r7, #11]
 8000696:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	62bb      	str	r3, [r7, #40]	; 0x28
 800069e:	4b0d      	ldr	r3, [pc, #52]	; (80006d4 <can_setFrame+0xbc>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) == HAL_OK) {
 80006a4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80006a8:	4b08      	ldr	r3, [pc, #32]	; (80006cc <can_setFrame+0xb4>)
 80006aa:	490a      	ldr	r1, [pc, #40]	; (80006d4 <can_setFrame+0xbc>)
 80006ac:	4808      	ldr	r0, [pc, #32]	; (80006d0 <can_setFrame+0xb8>)
 80006ae:	f004 f809 	bl	80046c4 <HAL_CAN_AddTxMessage>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d104      	bne.n	80006c2 <can_setFrame+0xaa>
    	can_addMsg(message);
 80006b8:	f107 0320 	add.w	r3, r7, #32
 80006bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006be:	f7ff ff37 	bl	8000530 <can_addMsg>

    } else { // something bad happen
    	// not sure what to do
    }
}
 80006c2:	bf00      	nop
 80006c4:	3738      	adds	r7, #56	; 0x38
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20007544 	.word	0x20007544
 80006d0:	20007984 	.word	0x20007984
 80006d4:	20007550 	.word	0x20007550

080006d8 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
	can_readFrame();
 80006e0:	f000 f858 	bl	8000794 <can_readFrame>
	can_addMsg(can_current_msg);
 80006e4:	4b03      	ldr	r3, [pc, #12]	; (80006f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 80006e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006e8:	f7ff ff22 	bl	8000530 <can_addMsg>
}
 80006ec:	bf00      	nop
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20007534 	.word	0x20007534

080006f8 <can_msgPending>:

uint32_t can_msgPending() {
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
	int32_t diff = can_buffer_pointer_tx - can_buffer_pointer_rx;
 80006fe:	4b09      	ldr	r3, [pc, #36]	; (8000724 <can_msgPending+0x2c>)
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <can_msgPending+0x30>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	1ad3      	subs	r3, r2, r3
 8000708:	607b      	str	r3, [r7, #4]
	if (diff < 0) {
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	2b00      	cmp	r3, #0
 800070e:	da02      	bge.n	8000716 <can_msgPending+0x1e>
		diff += CAN_BUFFER_DEPTH;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	3340      	adds	r3, #64	; 0x40
 8000714:	607b      	str	r3, [r7, #4]
	}

	return diff;
 8000716:	687b      	ldr	r3, [r7, #4]
}
 8000718:	4618      	mov	r0, r3
 800071a:	370c      	adds	r7, #12
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr
 8000724:	200000a8 	.word	0x200000a8
 8000728:	200000a4 	.word	0x200000a4

0800072c <can_readBuffer>:

CAN_msg can_readBuffer() {
 800072c:	b590      	push	{r4, r7, lr}
 800072e:	b087      	sub	sp, #28
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
	CAN_msg ret = {0};
 8000734:	f107 0308 	add.w	r3, r7, #8
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]

	if (can_msgPending() > 0) {
 8000742:	f7ff ffd9 	bl	80006f8 <can_msgPending>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d013      	beq.n	8000774 <can_readBuffer+0x48>
		ret = can_buffer[can_buffer_pointer_rx];
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <can_readBuffer+0x60>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a0f      	ldr	r2, [pc, #60]	; (8000790 <can_readBuffer+0x64>)
 8000752:	011b      	lsls	r3, r3, #4
 8000754:	4413      	add	r3, r2
 8000756:	f107 0408 	add.w	r4, r7, #8
 800075a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800075c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		can_buffer_pointer_rx = pointer_inc(can_buffer_pointer_rx, CAN_BUFFER_DEPTH);
 8000760:	4b0a      	ldr	r3, [pc, #40]	; (800078c <can_readBuffer+0x60>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2140      	movs	r1, #64	; 0x40
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff fece 	bl	8000508 <pointer_inc>
 800076c:	4603      	mov	r3, r0
 800076e:	461a      	mov	r2, r3
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <can_readBuffer+0x60>)
 8000772:	601a      	str	r2, [r3, #0]
	} else { // no message actually pending
		// do nothing, will return the {0} CAN_msg
	}


	return ret;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	461c      	mov	r4, r3
 8000778:	f107 0308 	add.w	r3, r7, #8
 800077c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800077e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8000782:	6878      	ldr	r0, [r7, #4]
 8000784:	371c      	adds	r7, #28
 8000786:	46bd      	mov	sp, r7
 8000788:	bd90      	pop	{r4, r7, pc}
 800078a:	bf00      	nop
 800078c:	200000a4 	.word	0x200000a4
 8000790:	20007584 	.word	0x20007584

08000794 <can_readFrame>:
 *
 * byte 0..3 --> some uint32_t
 * byte 4    --> data_id, see CAN_communication.h
 * byte 5..7 --> timestamp
 */
uint32_t can_readFrame(void) {
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
    uint32_t fill_level = HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0);
 800079a:	2100      	movs	r1, #0
 800079c:	482a      	ldr	r0, [pc, #168]	; (8000848 <can_readFrame+0xb4>)
 800079e:	f004 f9a2 	bl	8004ae6 <HAL_CAN_GetRxFifoFillLevel>
 80007a2:	6078      	str	r0, [r7, #4]
    if (fill_level > 0) {
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d049      	beq.n	800083e <can_readFrame+0xaa>
        HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData);
 80007aa:	4b28      	ldr	r3, [pc, #160]	; (800084c <can_readFrame+0xb8>)
 80007ac:	4a28      	ldr	r2, [pc, #160]	; (8000850 <can_readFrame+0xbc>)
 80007ae:	2100      	movs	r1, #0
 80007b0:	4825      	ldr	r0, [pc, #148]	; (8000848 <can_readFrame+0xb4>)
 80007b2:	f004 f886 	bl	80048c2 <HAL_CAN_GetRxMessage>

        can_current_msg.data = 0;
 80007b6:	4b27      	ldr	r3, [pc, #156]	; (8000854 <can_readFrame+0xc0>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
        can_current_msg.data += (uint32_t) RxData[0] << 24;
 80007bc:	4b25      	ldr	r3, [pc, #148]	; (8000854 <can_readFrame+0xc0>)
 80007be:	681a      	ldr	r2, [r3, #0]
 80007c0:	4b22      	ldr	r3, [pc, #136]	; (800084c <can_readFrame+0xb8>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	061b      	lsls	r3, r3, #24
 80007c6:	4413      	add	r3, r2
 80007c8:	4a22      	ldr	r2, [pc, #136]	; (8000854 <can_readFrame+0xc0>)
 80007ca:	6013      	str	r3, [r2, #0]
        can_current_msg.data += (uint32_t) RxData[1] << 16;
 80007cc:	4b21      	ldr	r3, [pc, #132]	; (8000854 <can_readFrame+0xc0>)
 80007ce:	681a      	ldr	r2, [r3, #0]
 80007d0:	4b1e      	ldr	r3, [pc, #120]	; (800084c <can_readFrame+0xb8>)
 80007d2:	785b      	ldrb	r3, [r3, #1]
 80007d4:	041b      	lsls	r3, r3, #16
 80007d6:	4413      	add	r3, r2
 80007d8:	4a1e      	ldr	r2, [pc, #120]	; (8000854 <can_readFrame+0xc0>)
 80007da:	6013      	str	r3, [r2, #0]
        can_current_msg.data += (uint32_t) RxData[2] << 8;
 80007dc:	4b1d      	ldr	r3, [pc, #116]	; (8000854 <can_readFrame+0xc0>)
 80007de:	681a      	ldr	r2, [r3, #0]
 80007e0:	4b1a      	ldr	r3, [pc, #104]	; (800084c <can_readFrame+0xb8>)
 80007e2:	789b      	ldrb	r3, [r3, #2]
 80007e4:	021b      	lsls	r3, r3, #8
 80007e6:	4413      	add	r3, r2
 80007e8:	4a1a      	ldr	r2, [pc, #104]	; (8000854 <can_readFrame+0xc0>)
 80007ea:	6013      	str	r3, [r2, #0]
		can_current_msg.data += (uint32_t) RxData[3] << 0;
 80007ec:	4b19      	ldr	r3, [pc, #100]	; (8000854 <can_readFrame+0xc0>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a16      	ldr	r2, [pc, #88]	; (800084c <can_readFrame+0xb8>)
 80007f2:	78d2      	ldrb	r2, [r2, #3]
 80007f4:	4413      	add	r3, r2
 80007f6:	4a17      	ldr	r2, [pc, #92]	; (8000854 <can_readFrame+0xc0>)
 80007f8:	6013      	str	r3, [r2, #0]

        can_current_msg.id = RxData[4];
 80007fa:	4b14      	ldr	r3, [pc, #80]	; (800084c <can_readFrame+0xb8>)
 80007fc:	791a      	ldrb	r2, [r3, #4]
 80007fe:	4b15      	ldr	r3, [pc, #84]	; (8000854 <can_readFrame+0xc0>)
 8000800:	711a      	strb	r2, [r3, #4]

        can_current_msg.timestamp = 0;
 8000802:	4b14      	ldr	r3, [pc, #80]	; (8000854 <can_readFrame+0xc0>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
        can_current_msg.timestamp += (uint32_t) RxData[5] << 16;
 8000808:	4b12      	ldr	r3, [pc, #72]	; (8000854 <can_readFrame+0xc0>)
 800080a:	689a      	ldr	r2, [r3, #8]
 800080c:	4b0f      	ldr	r3, [pc, #60]	; (800084c <can_readFrame+0xb8>)
 800080e:	795b      	ldrb	r3, [r3, #5]
 8000810:	041b      	lsls	r3, r3, #16
 8000812:	4413      	add	r3, r2
 8000814:	4a0f      	ldr	r2, [pc, #60]	; (8000854 <can_readFrame+0xc0>)
 8000816:	6093      	str	r3, [r2, #8]
        can_current_msg.timestamp += (uint32_t) RxData[6] << 8;
 8000818:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <can_readFrame+0xc0>)
 800081a:	689a      	ldr	r2, [r3, #8]
 800081c:	4b0b      	ldr	r3, [pc, #44]	; (800084c <can_readFrame+0xb8>)
 800081e:	799b      	ldrb	r3, [r3, #6]
 8000820:	021b      	lsls	r3, r3, #8
 8000822:	4413      	add	r3, r2
 8000824:	4a0b      	ldr	r2, [pc, #44]	; (8000854 <can_readFrame+0xc0>)
 8000826:	6093      	str	r3, [r2, #8]
		can_current_msg.timestamp += (uint32_t) RxData[7] << 0;
 8000828:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <can_readFrame+0xc0>)
 800082a:	689b      	ldr	r3, [r3, #8]
 800082c:	4a07      	ldr	r2, [pc, #28]	; (800084c <can_readFrame+0xb8>)
 800082e:	79d2      	ldrb	r2, [r2, #7]
 8000830:	4413      	add	r3, r2
 8000832:	4a08      	ldr	r2, [pc, #32]	; (8000854 <can_readFrame+0xc0>)
 8000834:	6093      	str	r3, [r2, #8]

        can_current_msg.id_CAN = RxHeader.StdId;
 8000836:	4b06      	ldr	r3, [pc, #24]	; (8000850 <can_readFrame+0xbc>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4a06      	ldr	r2, [pc, #24]	; (8000854 <can_readFrame+0xc0>)
 800083c:	60d3      	str	r3, [r2, #12]
    }
    return fill_level;
 800083e:	687b      	ldr	r3, [r7, #4]
}
 8000840:	4618      	mov	r0, r3
 8000842:	3708      	adds	r7, #8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20007984 	.word	0x20007984
 800084c:	20007548 	.word	0x20007548
 8000850:	20007568 	.word	0x20007568
 8000854:	20007534 	.word	0x20007534

08000858 <can_init>:


void can_init(void) {
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
	CAN_Config(CAN_ID_TVC_BOARD);
 800085c:	2008      	movs	r0, #8
 800085e:	f7ff fe9b 	bl	8000598 <CAN_Config>
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}

08000866 <util_encode_u32>:
	data[0] = value;
	data[1] = value>>8;
	data[2] = 0x00;
	data[3] = 0x00;
}
static inline void util_encode_u32(uint8_t * data, uint32_t value) {
 8000866:	b480      	push	{r7}
 8000868:	b083      	sub	sp, #12
 800086a:	af00      	add	r7, sp, #0
 800086c:	6078      	str	r0, [r7, #4]
 800086e:	6039      	str	r1, [r7, #0]
	data[0] = value;
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	b2da      	uxtb	r2, r3
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	701a      	strb	r2, [r3, #0]
	data[1] = value>>8;
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	0a1a      	lsrs	r2, r3, #8
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	3301      	adds	r3, #1
 8000880:	b2d2      	uxtb	r2, r2
 8000882:	701a      	strb	r2, [r3, #0]
	data[2] = value>>16;
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	0c1a      	lsrs	r2, r3, #16
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	3302      	adds	r3, #2
 800088c:	b2d2      	uxtb	r2, r2
 800088e:	701a      	strb	r2, [r3, #0]
	data[3] = value>>24;
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	0e1a      	lsrs	r2, r3, #24
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	3303      	adds	r3, #3
 8000898:	b2d2      	uxtb	r2, r2
 800089a:	701a      	strb	r2, [r3, #0]
}
 800089c:	bf00      	nop
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr

080008a8 <util_encode_i32>:
	data[0] = value;
	data[1] = value>>8;
	data[2] = 0x00;
	data[3] = 0x00;
}
static inline void util_encode_i32(uint8_t * data, int32_t value) {
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	6039      	str	r1, [r7, #0]
	data[0] = value;
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	b2da      	uxtb	r2, r3
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	701a      	strb	r2, [r3, #0]
	data[1] = value>>8;
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	121a      	asrs	r2, r3, #8
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	3301      	adds	r3, #1
 80008c2:	b2d2      	uxtb	r2, r2
 80008c4:	701a      	strb	r2, [r3, #0]
	data[2] = value>>16;
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	141a      	asrs	r2, r3, #16
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	3302      	adds	r3, #2
 80008ce:	b2d2      	uxtb	r2, r2
 80008d0:	701a      	strb	r2, [r3, #0]
	data[3] = value>>24;
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	161a      	asrs	r2, r3, #24
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	3303      	adds	r3, #3
 80008da:	b2d2      	uxtb	r2, r2
 80008dc:	701a      	strb	r2, [r3, #0]
}
 80008de:	bf00      	nop
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr

080008ea <util_decode_u16>:

static inline uint8_t util_decode_u8(uint8_t * data) {
	return data[0];
}

static inline uint16_t util_decode_u16(uint8_t * data) {
 80008ea:	b480      	push	{r7}
 80008ec:	b083      	sub	sp, #12
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	6078      	str	r0, [r7, #4]
	return (uint16_t) data[0] | data[1] << 8;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	b21a      	sxth	r2, r3
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	3301      	adds	r3, #1
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	021b      	lsls	r3, r3, #8
 8000900:	b21b      	sxth	r3, r3
 8000902:	4313      	orrs	r3, r2
 8000904:	b21b      	sxth	r3, r3
 8000906:	b29b      	uxth	r3, r3
}
 8000908:	4618      	mov	r0, r3
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr

08000914 <util_decode_u32>:

static inline uint32_t util_decode_u32(uint8_t * data) {
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
	return (uint32_t) data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	461a      	mov	r2, r3
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	3301      	adds	r3, #1
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	021b      	lsls	r3, r3, #8
 800092a:	4313      	orrs	r3, r2
 800092c:	687a      	ldr	r2, [r7, #4]
 800092e:	3202      	adds	r2, #2
 8000930:	7812      	ldrb	r2, [r2, #0]
 8000932:	0412      	lsls	r2, r2, #16
 8000934:	4313      	orrs	r3, r2
 8000936:	687a      	ldr	r2, [r7, #4]
 8000938:	3203      	adds	r2, #3
 800093a:	7812      	ldrb	r2, [r2, #0]
 800093c:	0612      	lsls	r2, r2, #24
 800093e:	4313      	orrs	r3, r2
}
 8000940:	4618      	mov	r0, r3
 8000942:	370c      	adds	r7, #12
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <util_decode_i32>:

static inline int16_t util_decode_i16(uint8_t * data) {
	return (int16_t) data[0] | data[1] << 8;
}

static inline int32_t util_decode_i32(uint8_t * data) {
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
	return (int32_t) data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	461a      	mov	r2, r3
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	3301      	adds	r3, #1
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	021b      	lsls	r3, r3, #8
 8000962:	431a      	orrs	r2, r3
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	3302      	adds	r3, #2
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	041b      	lsls	r3, r3, #16
 800096c:	431a      	orrs	r2, r3
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	3303      	adds	r3, #3
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	061b      	lsls	r3, r3, #24
 8000976:	4313      	orrs	r3, r2
}
 8000978:	4618      	mov	r0, r3
 800097a:	370c      	adds	r7, #12
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr

08000984 <cm4_global_init>:

/**********************
 *	DECLARATIONS
 **********************/

void cm4_global_init(void) {
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
	cm4_busy_sem = xSemaphoreCreateMutexStatic(&cm4_busy_sem_buffer);
 8000988:	4904      	ldr	r1, [pc, #16]	; (800099c <cm4_global_init+0x18>)
 800098a:	2001      	movs	r0, #1
 800098c:	f009 fb57 	bl	800a03e <xQueueCreateMutexStatic>
 8000990:	4603      	mov	r3, r0
 8000992:	4a03      	ldr	r2, [pc, #12]	; (80009a0 <cm4_global_init+0x1c>)
 8000994:	6013      	str	r3, [r2, #0]
}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	200000b0 	.word	0x200000b0
 80009a0:	200000ac 	.word	0x200000ac

080009a4 <cm4_init>:

void cm4_init(CM4_INST_t * cm4) {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af02      	add	r7, sp, #8
 80009aa:	6078      	str	r0, [r7, #4]
	static uint32_t id_counter = 0;
	cm4->id = id_counter++;
 80009ac:	4b17      	ldr	r3, [pc, #92]	; (8000a0c <cm4_init+0x68>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	1c5a      	adds	r2, r3, #1
 80009b2:	4916      	ldr	r1, [pc, #88]	; (8000a0c <cm4_init+0x68>)
 80009b4:	600a      	str	r2, [r1, #0]
 80009b6:	687a      	ldr	r2, [r7, #4]
 80009b8:	6013      	str	r3, [r2, #0]
	cm4->garbage_counter = 0;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	f503 53a4 	add.w	r3, r3, #5248	; 0x1480
 80009c0:	3304      	adds	r3, #4
 80009c2:	2200      	movs	r2, #0
 80009c4:	801a      	strh	r2, [r3, #0]
	cm4->rx_sem = xSemaphoreCreateBinaryStatic(&cm4->rx_sem_buffer);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 80009cc:	331c      	adds	r3, #28
 80009ce:	2203      	movs	r2, #3
 80009d0:	9200      	str	r2, [sp, #0]
 80009d2:	2200      	movs	r2, #0
 80009d4:	2100      	movs	r1, #0
 80009d6:	2001      	movs	r0, #1
 80009d8:	f009 fa84 	bl	8009ee4 <xQueueGenericCreateStatic>
 80009dc:	4602      	mov	r2, r0
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 80009e4:	3318      	adds	r3, #24
 80009e6:	601a      	str	r2, [r3, #0]
	msv2_init(&cm4->msv2);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	3304      	adds	r3, #4
 80009ec:	4618      	mov	r0, r3
 80009ee:	f001 faed 	bl	8001fcc <msv2_init>
	serial_init(&cm4->ser, &CM4_UART, cm4, cm4_decode_fcn);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	f503 5080 	add.w	r0, r3, #4096	; 0x1000
 80009f8:	3018      	adds	r0, #24
 80009fa:	4b05      	ldr	r3, [pc, #20]	; (8000a10 <cm4_init+0x6c>)
 80009fc:	687a      	ldr	r2, [r7, #4]
 80009fe:	4905      	ldr	r1, [pc, #20]	; (8000a14 <cm4_init+0x70>)
 8000a00:	f001 ff4c 	bl	800289c <serial_init>


}
 8000a04:	bf00      	nop
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	200000f8 	.word	0x200000f8
 8000a10:	08000a19 	.word	0x08000a19
 8000a14:	200080dc 	.word	0x200080dc

08000a18 <cm4_decode_fcn>:


SERIAL_RET_t cm4_decode_fcn(void * inst, uint8_t data) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	460b      	mov	r3, r1
 8000a22:	70fb      	strb	r3, [r7, #3]
	CM4_INST_t * cm4 = (CM4_INST_t *) inst;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	60fb      	str	r3, [r7, #12]
	MSV2_ERROR_t tmp = msv2_decode_fragment(&cm4->msv2, data);
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	3304      	adds	r3, #4
 8000a2c:	78fa      	ldrb	r2, [r7, #3]
 8000a2e:	4611      	mov	r1, r2
 8000a30:	4618      	mov	r0, r3
 8000a32:	f001 fbc5 	bl	80021c0 <msv2_decode_fragment>
 8000a36:	4603      	mov	r3, r0
 8000a38:	72fb      	strb	r3, [r7, #11]
	if(tmp == MSV2_SUCCESS || tmp == MSV2_WRONG_CRC) {
 8000a3a:	7afb      	ldrb	r3, [r7, #11]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d002      	beq.n	8000a46 <cm4_decode_fcn+0x2e>
 8000a40:	7afb      	ldrb	r3, [r7, #11]
 8000a42:	2b02      	cmp	r3, #2
 8000a44:	d114      	bne.n	8000a70 <cm4_decode_fcn+0x58>
		if(cm4->msv2.rx.opcode & 0x80) { //CM4 is master
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	7a1b      	ldrb	r3, [r3, #8]
 8000a4a:	b25b      	sxtb	r3, r3
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	da05      	bge.n	8000a5c <cm4_decode_fcn+0x44>
			led_toggle();
 8000a50:	f001 fa5c 	bl	8001f0c <led_toggle>
			cm4_generate_response(cm4);
 8000a54:	68f8      	ldr	r0, [r7, #12]
 8000a56:	f000 f811 	bl	8000a7c <cm4_generate_response>
 8000a5a:	e009      	b.n	8000a70 <cm4_decode_fcn+0x58>
		} else { //HB is master
			//led_off();
			xSemaphoreGive(cm4->rx_sem);
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8000a62:	3318      	adds	r3, #24
 8000a64:	6818      	ldr	r0, [r3, #0]
 8000a66:	2300      	movs	r3, #0
 8000a68:	2200      	movs	r2, #0
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	f009 fb02 	bl	800a074 <xQueueGenericSend>
		}

	}
	return tmp;
 8000a70:	7afb      	ldrb	r3, [r7, #11]
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3710      	adds	r7, #16
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
	...

08000a7c <cm4_generate_response>:

void cm4_generate_response(CM4_INST_t * cm4) {
 8000a7c:	b590      	push	{r4, r7, lr}
 8000a7e:	b085      	sub	sp, #20
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
	if (xSemaphoreTake(cm4_busy_sem, DRIV_TIMEOUT) == pdTRUE) {
 8000a84:	4b2b      	ldr	r3, [pc, #172]	; (8000b34 <cm4_generate_response+0xb8>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	21c8      	movs	r1, #200	; 0xc8
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f009 fc7e 	bl	800a38c <xQueueSemaphoreTake>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	d149      	bne.n	8000b2a <cm4_generate_response+0xae>
		static uint8_t send_data[MSV2_MAX_DATA_LEN];
		static uint16_t length = 0;
		static uint16_t bin_length = 0;
		uint8_t opcode = cm4->msv2.rx.opcode;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	7a1b      	ldrb	r3, [r3, #8]
 8000a9a:	73fb      	strb	r3, [r7, #15]
		opcode &= ~CM4_C2H_PREFIX;
 8000a9c:	7bfb      	ldrb	r3, [r7, #15]
 8000a9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000aa2:	73fb      	strb	r3, [r7, #15]
		if(opcode < response_fcn_max) {
 8000aa4:	7bfb      	ldrb	r3, [r7, #15]
 8000aa6:	b29a      	uxth	r2, r3
 8000aa8:	4b23      	ldr	r3, [pc, #140]	; (8000b38 <cm4_generate_response+0xbc>)
 8000aaa:	881b      	ldrh	r3, [r3, #0]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	d21c      	bcs.n	8000aea <cm4_generate_response+0x6e>
			response_fcn[opcode](cm4->msv2.rx.data, cm4->msv2.rx.length, send_data, &length);
 8000ab0:	7bfb      	ldrb	r3, [r7, #15]
 8000ab2:	4a22      	ldr	r2, [pc, #136]	; (8000b3c <cm4_generate_response+0xc0>)
 8000ab4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	f103 0012 	add.w	r0, r3, #18
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	89d9      	ldrh	r1, [r3, #14]
 8000ac2:	4b1f      	ldr	r3, [pc, #124]	; (8000b40 <cm4_generate_response+0xc4>)
 8000ac4:	4a1f      	ldr	r2, [pc, #124]	; (8000b44 <cm4_generate_response+0xc8>)
 8000ac6:	47a0      	blx	r4
			//length is in words
			bin_length = msv2_create_frame(&cm4->msv2, cm4->msv2.rx.opcode, length/2, send_data);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	1d18      	adds	r0, r3, #4
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	7a19      	ldrb	r1, [r3, #8]
 8000ad0:	4b1b      	ldr	r3, [pc, #108]	; (8000b40 <cm4_generate_response+0xc4>)
 8000ad2:	881b      	ldrh	r3, [r3, #0]
 8000ad4:	085b      	lsrs	r3, r3, #1
 8000ad6:	b29b      	uxth	r3, r3
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	4b1a      	ldr	r3, [pc, #104]	; (8000b44 <cm4_generate_response+0xc8>)
 8000adc:	f001 fa8a 	bl	8001ff4 <msv2_create_frame>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <cm4_generate_response+0xcc>)
 8000ae6:	801a      	strh	r2, [r3, #0]
 8000ae8:	e018      	b.n	8000b1c <cm4_generate_response+0xa0>
			//No response for now
			//serial_send(&cm4->ser, msv2_tx_data(&cm4->msv2), bin_length);
		} else {
			send_data[0] = MSV2_CRC_ERROR_LO;
 8000aea:	4b16      	ldr	r3, [pc, #88]	; (8000b44 <cm4_generate_response+0xc8>)
 8000aec:	22be      	movs	r2, #190	; 0xbe
 8000aee:	701a      	strb	r2, [r3, #0]
			send_data[1] = MSV2_CRC_ERROR_HI;
 8000af0:	4b14      	ldr	r3, [pc, #80]	; (8000b44 <cm4_generate_response+0xc8>)
 8000af2:	22eb      	movs	r2, #235	; 0xeb
 8000af4:	705a      	strb	r2, [r3, #1]
			length = 2;
 8000af6:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <cm4_generate_response+0xc4>)
 8000af8:	2202      	movs	r2, #2
 8000afa:	801a      	strh	r2, [r3, #0]
			bin_length = msv2_create_frame(&cm4->msv2, cm4->msv2.rx.opcode, length/2, send_data);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	1d18      	adds	r0, r3, #4
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	7a19      	ldrb	r1, [r3, #8]
 8000b04:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <cm4_generate_response+0xc4>)
 8000b06:	881b      	ldrh	r3, [r3, #0]
 8000b08:	085b      	lsrs	r3, r3, #1
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	b2da      	uxtb	r2, r3
 8000b0e:	4b0d      	ldr	r3, [pc, #52]	; (8000b44 <cm4_generate_response+0xc8>)
 8000b10:	f001 fa70 	bl	8001ff4 <msv2_create_frame>
 8000b14:	4603      	mov	r3, r0
 8000b16:	461a      	mov	r2, r3
 8000b18:	4b0b      	ldr	r3, [pc, #44]	; (8000b48 <cm4_generate_response+0xcc>)
 8000b1a:	801a      	strh	r2, [r3, #0]
			//no response for now
			//serial_send(&cm4->ser, msv2_tx_data(&cm4->msv2), bin_length);
		}
		xSemaphoreGive(cm4_busy_sem);
 8000b1c:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <cm4_generate_response+0xb8>)
 8000b1e:	6818      	ldr	r0, [r3, #0]
 8000b20:	2300      	movs	r3, #0
 8000b22:	2200      	movs	r2, #0
 8000b24:	2100      	movs	r1, #0
 8000b26:	f009 faa5 	bl	800a074 <xQueueGenericSend>
	}
}
 8000b2a:	bf00      	nop
 8000b2c:	3714      	adds	r7, #20
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd90      	pop	{r4, r7, pc}
 8000b32:	bf00      	nop
 8000b34:	200000ac 	.word	0x200000ac
 8000b38:	20000008 	.word	0x20000008
 8000b3c:	20000000 	.word	0x20000000
 8000b40:	200002fc 	.word	0x200002fc
 8000b44:	200000fc 	.word	0x200000fc
 8000b48:	200002fe 	.word	0x200002fe

08000b4c <cm4_response_ping>:

static void cm4_response_ping(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60f8      	str	r0, [r7, #12]
 8000b54:	607a      	str	r2, [r7, #4]
 8000b56:	603b      	str	r3, [r7, #0]
 8000b58:	460b      	mov	r3, r1
 8000b5a:	817b      	strh	r3, [r7, #10]
	resp[0] = MSV2_OK_LO;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	22c5      	movs	r2, #197	; 0xc5
 8000b60:	701a      	strb	r2, [r3, #0]
	resp[1] = MSV2_OK_HI;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	3301      	adds	r3, #1
 8000b66:	225c      	movs	r2, #92	; 0x5c
 8000b68:	701a      	strb	r2, [r3, #0]
	*resp_len = 2;
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	2202      	movs	r2, #2
 8000b6e:	801a      	strh	r2, [r3, #0]
}
 8000b70:	bf00      	nop
 8000b72:	3714      	adds	r7, #20
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <cm4_response_command>:

static void cm4_response_command(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 8000b7c:	b5b0      	push	{r4, r5, r7, lr}
 8000b7e:	b09c      	sub	sp, #112	; 0x70
 8000b80:	af0a      	add	r7, sp, #40	; 0x28
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	607a      	str	r2, [r7, #4]
 8000b86:	603b      	str	r3, [r7, #0]
 8000b88:	460b      	mov	r3, r1
 8000b8a:	817b      	strh	r3, [r7, #10]
	CM4_PAYLOAD_COMMAND_t cmd = {0};
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	2234      	movs	r2, #52	; 0x34
 8000b92:	2100      	movs	r1, #0
 8000b94:	4618      	mov	r0, r3
 8000b96:	f00b f8b1 	bl	800bcfc <memset>
	if(data_len == 50) {
 8000b9a:	897b      	ldrh	r3, [r7, #10]
 8000b9c:	2b32      	cmp	r3, #50	; 0x32
 8000b9e:	d177      	bne.n	8000c90 <cm4_response_command+0x114>
		cmd.timestamp = util_decode_u32(data);
 8000ba0:	68f8      	ldr	r0, [r7, #12]
 8000ba2:	f7ff feb7 	bl	8000914 <util_decode_u32>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	617b      	str	r3, [r7, #20]
		cmd.thrust = util_decode_i32(data+4);
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	3304      	adds	r3, #4
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff fecc 	bl	800094c <util_decode_i32>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	61bb      	str	r3, [r7, #24]

		cmd.dynamixel[0] = util_decode_i32(data+8);
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	3308      	adds	r3, #8
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff fec5 	bl	800094c <util_decode_i32>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	61fb      	str	r3, [r7, #28]
		cmd.dynamixel[1] = util_decode_i32(data+12);
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	330c      	adds	r3, #12
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f7ff febe 	bl	800094c <util_decode_i32>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	623b      	str	r3, [r7, #32]
		cmd.dynamixel[2] = util_decode_i32(data+16);
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	3310      	adds	r3, #16
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff feb7 	bl	800094c <util_decode_i32>
 8000bde:	4603      	mov	r3, r0
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
		cmd.dynamixel[3] = util_decode_i32(data+20);
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	3314      	adds	r3, #20
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff feb0 	bl	800094c <util_decode_i32>
 8000bec:	4603      	mov	r3, r0
 8000bee:	62bb      	str	r3, [r7, #40]	; 0x28

		cmd.position[0] = util_decode_i32(data+24);
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	3318      	adds	r3, #24
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff fea9 	bl	800094c <util_decode_i32>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
		cmd.position[1] = util_decode_i32(data+28);
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	331c      	adds	r3, #28
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff fea2 	bl	800094c <util_decode_i32>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	633b      	str	r3, [r7, #48]	; 0x30
		cmd.position[2] = util_decode_i32(data+32);
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	3320      	adds	r3, #32
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fe9b 	bl	800094c <util_decode_i32>
 8000c16:	4603      	mov	r3, r0
 8000c18:	637b      	str	r3, [r7, #52]	; 0x34

		cmd.speed[0] = util_decode_i32(data+36);
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	3324      	adds	r3, #36	; 0x24
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff fe94 	bl	800094c <util_decode_i32>
 8000c24:	4603      	mov	r3, r0
 8000c26:	63bb      	str	r3, [r7, #56]	; 0x38
		cmd.speed[1] = util_decode_i32(data+40);
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	3328      	adds	r3, #40	; 0x28
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff fe8d 	bl	800094c <util_decode_i32>
 8000c32:	4603      	mov	r3, r0
 8000c34:	63fb      	str	r3, [r7, #60]	; 0x3c
		cmd.speed[2] = util_decode_i32(data+44);
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	332c      	adds	r3, #44	; 0x2c
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff fe86 	bl	800094c <util_decode_i32>
 8000c40:	4603      	mov	r3, r0
 8000c42:	643b      	str	r3, [r7, #64]	; 0x40

		cmd.state = util_decode_u16(data+48);
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	3330      	adds	r3, #48	; 0x30
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff fe4e 	bl	80008ea <util_decode_u16>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

		control_set_cmd(cmd);
 8000c54:	466d      	mov	r5, sp
 8000c56:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000c5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c62:	6823      	ldr	r3, [r4, #0]
 8000c64:	602b      	str	r3, [r5, #0]
 8000c66:	f107 0314 	add.w	r3, r7, #20
 8000c6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c6c:	f000 fcb2 	bl	80015d4 <control_set_cmd>

		pipeline_send_control(&cmd);
 8000c70:	f107 0314 	add.w	r3, r7, #20
 8000c74:	4618      	mov	r0, r3
 8000c76:	f001 fcbd 	bl	80025f4 <pipeline_send_control>

		resp[0] = MSV2_OK_LO;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	22c5      	movs	r2, #197	; 0xc5
 8000c7e:	701a      	strb	r2, [r3, #0]
		resp[1] = MSV2_OK_HI;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3301      	adds	r3, #1
 8000c84:	225c      	movs	r2, #92	; 0x5c
 8000c86:	701a      	strb	r2, [r3, #0]
		*resp_len = 2;
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	2202      	movs	r2, #2
 8000c8c:	801a      	strh	r2, [r3, #0]
	} else {
		resp[0] = MSV2_ERROR_LO;
		resp[1] = MSV2_ERROR_HI;
		*resp_len = 2;
	}
}
 8000c8e:	e009      	b.n	8000ca4 <cm4_response_command+0x128>
		resp[0] = MSV2_ERROR_LO;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	22ce      	movs	r2, #206	; 0xce
 8000c94:	701a      	strb	r2, [r3, #0]
		resp[1] = MSV2_ERROR_HI;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	22ec      	movs	r2, #236	; 0xec
 8000c9c:	701a      	strb	r2, [r3, #0]
		*resp_len = 2;
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	2202      	movs	r2, #2
 8000ca2:	801a      	strh	r2, [r3, #0]
}
 8000ca4:	bf00      	nop
 8000ca6:	3748      	adds	r7, #72	; 0x48
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bdb0      	pop	{r4, r5, r7, pc}

08000cac <cm4_send>:



CM4_ERROR_t cm4_send(CM4_INST_t * cm4, uint8_t cmd, uint8_t * data, uint16_t length, uint8_t ** resp_data, uint16_t * resp_len) {
 8000cac:	b590      	push	{r4, r7, lr}
 8000cae:	b087      	sub	sp, #28
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	607a      	str	r2, [r7, #4]
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	460b      	mov	r3, r1
 8000cba:	72fb      	strb	r3, [r7, #11]
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	813b      	strh	r3, [r7, #8]
	if (xSemaphoreTake(cm4_busy_sem, DRIV_TIMEOUT) == pdTRUE) {
 8000cc0:	4b50      	ldr	r3, [pc, #320]	; (8000e04 <cm4_send+0x158>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	21c8      	movs	r1, #200	; 0xc8
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f009 fb60 	bl	800a38c <xQueueSemaphoreTake>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	f040 8092 	bne.w	8000df8 <cm4_send+0x14c>
		//led_on();
		uint16_t frame_length = msv2_create_frame(&cm4->msv2, cmd, length/2, data);
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	1d18      	adds	r0, r3, #4
 8000cd8:	893b      	ldrh	r3, [r7, #8]
 8000cda:	085b      	lsrs	r3, r3, #1
 8000cdc:	b29b      	uxth	r3, r3
 8000cde:	b2da      	uxtb	r2, r3
 8000ce0:	7af9      	ldrb	r1, [r7, #11]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	f001 f986 	bl	8001ff4 <msv2_create_frame>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	82fb      	strh	r3, [r7, #22]
		serial_send(&cm4->ser, msv2_tx_data(&cm4->msv2), frame_length);
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	f503 5480 	add.w	r4, r3, #4096	; 0x1000
 8000cf2:	3418      	adds	r4, #24
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	3304      	adds	r3, #4
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f001 fb55 	bl	80023a8 <msv2_tx_data>
 8000cfe:	4601      	mov	r1, r0
 8000d00:	8afb      	ldrh	r3, [r7, #22]
 8000d02:	461a      	mov	r2, r3
 8000d04:	4620      	mov	r0, r4
 8000d06:	f001 fe09 	bl	800291c <serial_send>
		if(cm4->rx_sem == NULL) {
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8000d10:	3318      	adds	r3, #24
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d108      	bne.n	8000d2a <cm4_send+0x7e>
			xSemaphoreGive(cm4_busy_sem);
 8000d18:	4b3a      	ldr	r3, [pc, #232]	; (8000e04 <cm4_send+0x158>)
 8000d1a:	6818      	ldr	r0, [r3, #0]
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2100      	movs	r1, #0
 8000d22:	f009 f9a7 	bl	800a074 <xQueueGenericSend>
			return CM4_LOCAL_ERROR;
 8000d26:	2308      	movs	r3, #8
 8000d28:	e067      	b.n	8000dfa <cm4_send+0x14e>
		}
		if(xSemaphoreTake(cm4->rx_sem, COMM_TIMEOUT) == pdTRUE) {
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8000d30:	3318      	adds	r3, #24
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	210a      	movs	r1, #10
 8000d36:	4618      	mov	r0, r3
 8000d38:	f009 fb28 	bl	800a38c <xQueueSemaphoreTake>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d131      	bne.n	8000da6 <cm4_send+0xfa>
			cm4->garbage_counter = 0;
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	f503 53a4 	add.w	r3, r3, #5248	; 0x1480
 8000d48:	3304      	adds	r3, #4
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	801a      	strh	r2, [r3, #0]
			if(cm4->msv2.rx.opcode == cmd) {
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	7a1b      	ldrb	r3, [r3, #8]
 8000d52:	7afa      	ldrb	r2, [r7, #11]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d117      	bne.n	8000d88 <cm4_send+0xdc>
				if(resp_len != NULL && resp_data != NULL) {
 8000d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d00b      	beq.n	8000d76 <cm4_send+0xca>
 8000d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d008      	beq.n	8000d76 <cm4_send+0xca>
					*resp_len = cm4->msv2.rx.length;
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	89da      	ldrh	r2, [r3, #14]
 8000d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d6a:	801a      	strh	r2, [r3, #0]
					*resp_data = cm4->msv2.rx.data;
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	f103 0212 	add.w	r2, r3, #18
 8000d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d74:	601a      	str	r2, [r3, #0]
				}
				xSemaphoreGive(cm4_busy_sem);
 8000d76:	4b23      	ldr	r3, [pc, #140]	; (8000e04 <cm4_send+0x158>)
 8000d78:	6818      	ldr	r0, [r3, #0]
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2100      	movs	r1, #0
 8000d80:	f009 f978 	bl	800a074 <xQueueGenericSend>
				return CM4_SUCCESS;
 8000d84:	2300      	movs	r3, #0
 8000d86:	e038      	b.n	8000dfa <cm4_send+0x14e>
			} else {
				if(resp_len != NULL) {
 8000d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d002      	beq.n	8000d94 <cm4_send+0xe8>
					*resp_len = 0;
 8000d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d90:	2200      	movs	r2, #0
 8000d92:	801a      	strh	r2, [r3, #0]
				}
				xSemaphoreGive(cm4_busy_sem);
 8000d94:	4b1b      	ldr	r3, [pc, #108]	; (8000e04 <cm4_send+0x158>)
 8000d96:	6818      	ldr	r0, [r3, #0]
 8000d98:	2300      	movs	r3, #0
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	f009 f969 	bl	800a074 <xQueueGenericSend>
				return CM4_REMOTE_ERROR;
 8000da2:	2302      	movs	r3, #2
 8000da4:	e029      	b.n	8000dfa <cm4_send+0x14e>
			}
		} else {
			cm4->garbage_counter++;
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	f503 53a4 	add.w	r3, r3, #5248	; 0x1480
 8000dac:	3304      	adds	r3, #4
 8000dae:	881b      	ldrh	r3, [r3, #0]
 8000db0:	3301      	adds	r3, #1
 8000db2:	b29a      	uxth	r2, r3
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	f503 53a4 	add.w	r3, r3, #5248	; 0x1480
 8000dba:	3304      	adds	r3, #4
 8000dbc:	801a      	strh	r2, [r3, #0]
			if(cm4->garbage_counter > GARBAGE_THRESHOLD) {
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	f503 53a4 	add.w	r3, r3, #5248	; 0x1480
 8000dc4:	3304      	adds	r3, #4
 8000dc6:	881b      	ldrh	r3, [r3, #0]
 8000dc8:	2b0a      	cmp	r3, #10
 8000dca:	d90c      	bls.n	8000de6 <cm4_send+0x13a>
				serial_garbage_clean(&cm4->ser);
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000dd2:	3318      	adds	r3, #24
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f001 fdb3 	bl	8002940 <serial_garbage_clean>
				cm4->garbage_counter = 0;
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	f503 53a4 	add.w	r3, r3, #5248	; 0x1480
 8000de0:	3304      	adds	r3, #4
 8000de2:	2200      	movs	r2, #0
 8000de4:	801a      	strh	r2, [r3, #0]
			}
			xSemaphoreGive(cm4_busy_sem);
 8000de6:	4b07      	ldr	r3, [pc, #28]	; (8000e04 <cm4_send+0x158>)
 8000de8:	6818      	ldr	r0, [r3, #0]
 8000dea:	2300      	movs	r3, #0
 8000dec:	2200      	movs	r2, #0
 8000dee:	2100      	movs	r1, #0
 8000df0:	f009 f940 	bl	800a074 <xQueueGenericSend>
			return CM4_TIMEOUT;
 8000df4:	2301      	movs	r3, #1
 8000df6:	e000      	b.n	8000dfa <cm4_send+0x14e>
		}

	} else {
		return CM4_BUSY;
 8000df8:	2304      	movs	r3, #4
	}

}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	371c      	adds	r7, #28
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd90      	pop	{r4, r7, pc}
 8000e02:	bf00      	nop
 8000e04:	200000ac 	.word	0x200000ac

08000e08 <cm4_ping>:

CM4_ERROR_t cm4_ping(CM4_INST_t * cm4) {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b086      	sub	sp, #24
 8000e0c:	af02      	add	r7, sp, #8
 8000e0e:	6078      	str	r0, [r7, #4]
	CM4_ERROR_t error = 0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	73fb      	strb	r3, [r7, #15]
	uint8_t data[] = {0xc5, 0x5c};
 8000e14:	f645 43c5 	movw	r3, #23749	; 0x5cc5
 8000e18:	81bb      	strh	r3, [r7, #12]
	error |= cm4_send(cm4, CM4_H2C_PING, data, 2, NULL, NULL);
 8000e1a:	f107 020c 	add.w	r2, r7, #12
 8000e1e:	2300      	movs	r3, #0
 8000e20:	9301      	str	r3, [sp, #4]
 8000e22:	2300      	movs	r3, #0
 8000e24:	9300      	str	r3, [sp, #0]
 8000e26:	2302      	movs	r3, #2
 8000e28:	2100      	movs	r1, #0
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f7ff ff3e 	bl	8000cac <cm4_send>
 8000e30:	4603      	mov	r3, r0
 8000e32:	461a      	mov	r2, r3
 8000e34:	7bfb      	ldrb	r3, [r7, #15]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	73fb      	strb	r3, [r7, #15]

	return error;
 8000e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3710      	adds	r7, #16
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <cm4_send_sensors>:


CM4_ERROR_t cm4_send_sensors(CM4_INST_t * cm4, CM4_PAYLOAD_SENSOR_t * sens) {
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b090      	sub	sp, #64	; 0x40
 8000e48:	af02      	add	r7, sp, #8
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]
	CM4_ERROR_t error = 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t * recv_data;
	uint16_t recv_len = 0;
 8000e54:	2300      	movs	r3, #0
 8000e56:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t send_len = 32;
 8000e58:	2320      	movs	r3, #32
 8000e5a:	86bb      	strh	r3, [r7, #52]	; 0x34
	uint8_t send_data[32];

	util_encode_u32(send_data, sens->timestamp);
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	f107 030c 	add.w	r3, r7, #12
 8000e64:	4611      	mov	r1, r2
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff fcfd 	bl	8000866 <util_encode_u32>
	util_encode_i32(send_data+4, sens->acc_x);
 8000e6c:	f107 030c 	add.w	r3, r7, #12
 8000e70:	3304      	adds	r3, #4
 8000e72:	683a      	ldr	r2, [r7, #0]
 8000e74:	6852      	ldr	r2, [r2, #4]
 8000e76:	4611      	mov	r1, r2
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff fd15 	bl	80008a8 <util_encode_i32>
	util_encode_i32(send_data+8, sens->acc_y);
 8000e7e:	f107 030c 	add.w	r3, r7, #12
 8000e82:	3308      	adds	r3, #8
 8000e84:	683a      	ldr	r2, [r7, #0]
 8000e86:	6892      	ldr	r2, [r2, #8]
 8000e88:	4611      	mov	r1, r2
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff fd0c 	bl	80008a8 <util_encode_i32>
	util_encode_i32(send_data+12, sens->acc_z);
 8000e90:	f107 030c 	add.w	r3, r7, #12
 8000e94:	330c      	adds	r3, #12
 8000e96:	683a      	ldr	r2, [r7, #0]
 8000e98:	68d2      	ldr	r2, [r2, #12]
 8000e9a:	4611      	mov	r1, r2
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff fd03 	bl	80008a8 <util_encode_i32>

	util_encode_i32(send_data+16, sens->gyro_x);
 8000ea2:	f107 030c 	add.w	r3, r7, #12
 8000ea6:	3310      	adds	r3, #16
 8000ea8:	683a      	ldr	r2, [r7, #0]
 8000eaa:	6912      	ldr	r2, [r2, #16]
 8000eac:	4611      	mov	r1, r2
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff fcfa 	bl	80008a8 <util_encode_i32>
	util_encode_i32(send_data+20, sens->gyro_y);
 8000eb4:	f107 030c 	add.w	r3, r7, #12
 8000eb8:	3314      	adds	r3, #20
 8000eba:	683a      	ldr	r2, [r7, #0]
 8000ebc:	6952      	ldr	r2, [r2, #20]
 8000ebe:	4611      	mov	r1, r2
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff fcf1 	bl	80008a8 <util_encode_i32>
	util_encode_i32(send_data+24, sens->gyro_z);
 8000ec6:	f107 030c 	add.w	r3, r7, #12
 8000eca:	3318      	adds	r3, #24
 8000ecc:	683a      	ldr	r2, [r7, #0]
 8000ece:	6992      	ldr	r2, [r2, #24]
 8000ed0:	4611      	mov	r1, r2
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff fce8 	bl	80008a8 <util_encode_i32>

	util_encode_i32(send_data+28, sens->alti);
 8000ed8:	f107 030c 	add.w	r3, r7, #12
 8000edc:	331c      	adds	r3, #28
 8000ede:	683a      	ldr	r2, [r7, #0]
 8000ee0:	6a12      	ldr	r2, [r2, #32]
 8000ee2:	4611      	mov	r1, r2
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff fcdf 	bl	80008a8 <util_encode_i32>

	error |= cm4_send(cm4, CM4_H2C_SENSORS, send_data, send_len , &recv_data, &recv_len);
 8000eea:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8000eec:	f107 020c 	add.w	r2, r7, #12
 8000ef0:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8000ef4:	9301      	str	r3, [sp, #4]
 8000ef6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000efa:	9300      	str	r3, [sp, #0]
 8000efc:	460b      	mov	r3, r1
 8000efe:	2103      	movs	r1, #3
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f7ff fed3 	bl	8000cac <cm4_send>
 8000f06:	4603      	mov	r3, r0
 8000f08:	461a      	mov	r2, r3
 8000f0a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	//EVENTUAL ACKNOWLEGE

	return error;
 8000f14:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3738      	adds	r7, #56	; 0x38
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <cm4_send_feedback>:

CM4_ERROR_t cm4_send_feedback(CM4_INST_t * cm4, CM4_PAYLOAD_FEEDBACK_t * feed) {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08e      	sub	sp, #56	; 0x38
 8000f24:	af02      	add	r7, sp, #8
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	6039      	str	r1, [r7, #0]
	CM4_ERROR_t error = 0;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t * recv_data;
	uint16_t recv_len = 0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t send_len = 24;
 8000f34:	2318      	movs	r3, #24
 8000f36:	85bb      	strh	r3, [r7, #44]	; 0x2c
	uint8_t send_data[24];

	util_encode_u32(send_data, feed->timestamp);
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	f107 030c 	add.w	r3, r7, #12
 8000f40:	4611      	mov	r1, r2
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff fc8f 	bl	8000866 <util_encode_u32>
	util_encode_i32(send_data+4, feed->cc_pressure);
 8000f48:	f107 030c 	add.w	r3, r7, #12
 8000f4c:	3304      	adds	r3, #4
 8000f4e:	683a      	ldr	r2, [r7, #0]
 8000f50:	6852      	ldr	r2, [r2, #4]
 8000f52:	4611      	mov	r1, r2
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff fca7 	bl	80008a8 <util_encode_i32>

	util_encode_i32(send_data+8, feed->dynamixel[0]);
 8000f5a:	f107 030c 	add.w	r3, r7, #12
 8000f5e:	3308      	adds	r3, #8
 8000f60:	683a      	ldr	r2, [r7, #0]
 8000f62:	6892      	ldr	r2, [r2, #8]
 8000f64:	4611      	mov	r1, r2
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff fc9e 	bl	80008a8 <util_encode_i32>
	util_encode_i32(send_data+12, feed->dynamixel[1]);
 8000f6c:	f107 030c 	add.w	r3, r7, #12
 8000f70:	330c      	adds	r3, #12
 8000f72:	683a      	ldr	r2, [r7, #0]
 8000f74:	68d2      	ldr	r2, [r2, #12]
 8000f76:	4611      	mov	r1, r2
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff fc95 	bl	80008a8 <util_encode_i32>
	util_encode_i32(send_data+16, feed->dynamixel[2]);
 8000f7e:	f107 030c 	add.w	r3, r7, #12
 8000f82:	3310      	adds	r3, #16
 8000f84:	683a      	ldr	r2, [r7, #0]
 8000f86:	6912      	ldr	r2, [r2, #16]
 8000f88:	4611      	mov	r1, r2
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff fc8c 	bl	80008a8 <util_encode_i32>
	util_encode_i32(send_data+20, feed->dynamixel[3]);
 8000f90:	f107 030c 	add.w	r3, r7, #12
 8000f94:	3314      	adds	r3, #20
 8000f96:	683a      	ldr	r2, [r7, #0]
 8000f98:	6952      	ldr	r2, [r2, #20]
 8000f9a:	4611      	mov	r1, r2
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff fc83 	bl	80008a8 <util_encode_i32>

	error |= cm4_send(cm4, CM4_H2C_FEEDBACK, send_data, send_len , &recv_data, &recv_len);
 8000fa2:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8000fa4:	f107 020c 	add.w	r2, r7, #12
 8000fa8:	f107 0326 	add.w	r3, r7, #38	; 0x26
 8000fac:	9301      	str	r3, [sp, #4]
 8000fae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fb2:	9300      	str	r3, [sp, #0]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	2104      	movs	r1, #4
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f7ff fe77 	bl	8000cac <cm4_send>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	//EVENTUAL ACKNOWLEGE

	return error;
 8000fcc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3730      	adds	r7, #48	; 0x30
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <cm4_boot>:

CM4_ERROR_t cm4_boot(CM4_INST_t * cm4) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
	allow_boot();
 8000fe0:	f000 f876 	bl	80010d0 <allow_boot>
	return CM4_SUCCESS;
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <cm4_is_ready>:

CM4_ERROR_t cm4_is_ready(CM4_INST_t * cm4, uint8_t * ready) {
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b082      	sub	sp, #8
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
 8000ff6:	6039      	str	r1, [r7, #0]
	if(ready == NULL){
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d101      	bne.n	8001002 <cm4_is_ready+0x14>
		return CM4_LOCAL_ERROR;
 8000ffe:	2308      	movs	r3, #8
 8001000:	e011      	b.n	8001026 <cm4_is_ready+0x38>
	}
	*ready = 0;
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	2200      	movs	r2, #0
 8001006:	701a      	strb	r2, [r3, #0]
	if(is_booted()) {
 8001008:	f000 f850 	bl	80010ac <is_booted>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d008      	beq.n	8001024 <cm4_is_ready+0x36>
		if(cm4_ping(cm4) == CM4_SUCCESS) {
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f7ff fef8 	bl	8000e08 <cm4_ping>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d102      	bne.n	8001024 <cm4_is_ready+0x36>
			*ready = 1;
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	2201      	movs	r2, #1
 8001022:	701a      	strb	r2, [r3, #0]
		}
	}
	return CM4_SUCCESS;
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <cm4_shutdown>:

CM4_ERROR_t cm4_shutdown(CM4_INST_t * cm4) {
 800102e:	b580      	push	{r7, lr}
 8001030:	b086      	sub	sp, #24
 8001032:	af02      	add	r7, sp, #8
 8001034:	6078      	str	r0, [r7, #4]
	//send shutdown command through uart
	uint8_t data[] = {0x00, 0x00};
 8001036:	2300      	movs	r3, #0
 8001038:	81bb      	strh	r3, [r7, #12]
	cm4_send(cm4, CM4_H2C_SHUTDOWN, data, 2, NULL, NULL);
 800103a:	f107 020c 	add.w	r2, r7, #12
 800103e:	2300      	movs	r3, #0
 8001040:	9301      	str	r3, [sp, #4]
 8001042:	2300      	movs	r3, #0
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	2302      	movs	r3, #2
 8001048:	2101      	movs	r1, #1
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f7ff fe2e 	bl	8000cac <cm4_send>

	return CM4_SUCCESS;
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <cm4_is_shutdown>:

CM4_ERROR_t cm4_is_shutdown(CM4_INST_t * cm4, uint8_t * shutdown) {
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
 8001062:	6039      	str	r1, [r7, #0]
	if(shutdown == NULL){
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d101      	bne.n	800106e <cm4_is_shutdown+0x14>
		return CM4_LOCAL_ERROR;
 800106a:	2308      	movs	r3, #8
 800106c:	e00f      	b.n	800108e <cm4_is_shutdown+0x34>
	}
	if(!is_booted()) {
 800106e:	f000 f81d 	bl	80010ac <is_booted>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d106      	bne.n	8001086 <cm4_is_shutdown+0x2c>
		//check wheter the CM4 answers
		//if answers
		hold_boot();
 8001078:	f000 f838 	bl	80010ec <hold_boot>
		*shutdown = 1;
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	2201      	movs	r2, #1
 8001080:	701a      	strb	r2, [r3, #0]
		return CM4_SUCCESS;
 8001082:	2300      	movs	r3, #0
 8001084:	e003      	b.n	800108e <cm4_is_shutdown+0x34>
	} else {
		*shutdown = 0;
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	2200      	movs	r2, #0
 800108a:	701a      	strb	r2, [r3, #0]
		return CM4_SUCCESS;
 800108c:	2300      	movs	r3, #0
	}
}
 800108e:	4618      	mov	r0, r3
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <cm4_force_shutdown>:


CM4_ERROR_t cm4_force_shutdown(CM4_INST_t * cm4) {
 8001096:	b580      	push	{r7, lr}
 8001098:	b082      	sub	sp, #8
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
	hold_boot();
 800109e:	f000 f825 	bl	80010ec <hold_boot>
	return CM4_SUCCESS;
 80010a2:	2300      	movs	r3, #0
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <is_booted>:



static uint8_t is_booted(void) {
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
	return CM4_RUN_PG_PORT->IDR & CM4_RUN_PG_PIN ?1:0;
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <is_booted+0x20>)
 80010b2:	691b      	ldr	r3, [r3, #16]
 80010b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	bf14      	ite	ne
 80010bc:	2301      	movne	r3, #1
 80010be:	2300      	moveq	r3, #0
 80010c0:	b2db      	uxtb	r3, r3
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	40020400 	.word	0x40020400

080010d0 <allow_boot>:

static void allow_boot(void) {
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
	CM4_GLOBAL_EN_PORT->BSRR = CM4_GLOBAL_EN_PIN;
 80010d4:	4b04      	ldr	r3, [pc, #16]	; (80010e8 <allow_boot+0x18>)
 80010d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010da:	619a      	str	r2, [r3, #24]
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	40020000 	.word	0x40020000

080010ec <hold_boot>:

static void hold_boot(void) {
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
	CM4_GLOBAL_EN_PORT->BSRR = CM4_GLOBAL_EN_PIN << 16;
 80010f0:	4b04      	ldr	r3, [pc, #16]	; (8001104 <hold_boot+0x18>)
 80010f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010f6:	619a      	str	r2, [r3, #24]
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	40020000 	.word	0x40020000

08001108 <control_thread>:

/**********************
 *	DECLARATIONS
 **********************/

void control_thread(void * arg) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
	static TickType_t last_wake_time;
	static const TickType_t period = pdMS_TO_TICKS(CONTROL_HEART_BEAT);



	led_init();
 8001110:	f000 feba 	bl	8001e88 <led_init>

	init_control(&control);
 8001114:	4815      	ldr	r0, [pc, #84]	; (800116c <control_thread+0x64>)
 8001116:	f000 f87f 	bl	8001218 <init_control>
	servo_config(&tvc_servo);

	control.tvc_servo = &tvc_servo;
#endif

	cm4_global_init();
 800111a:	f7ff fc33 	bl	8000984 <cm4_global_init>

	static CM4_INST_t cm4;

	cm4_init(&cm4);
 800111e:	4814      	ldr	r0, [pc, #80]	; (8001170 <control_thread+0x68>)
 8001120:	f7ff fc40 	bl	80009a4 <cm4_init>

	pipeline_init(&cm4);
 8001124:	4812      	ldr	r0, [pc, #72]	; (8001170 <control_thread+0x68>)
 8001126:	f001 f94d 	bl	80023c4 <pipeline_init>

	control.cm4 = &cm4;
 800112a:	4b10      	ldr	r3, [pc, #64]	; (800116c <control_thread+0x64>)
 800112c:	4a10      	ldr	r2, [pc, #64]	; (8001170 <control_thread+0x68>)
 800112e:	619a      	str	r2, [r3, #24]


	init_idle(&control);
 8001130:	480e      	ldr	r0, [pc, #56]	; (800116c <control_thread+0x64>)
 8001132:	f000 f886 	bl	8001242 <init_idle>



	last_wake_time = xTaskGetTickCount();
 8001136:	f009 fe43 	bl	800adc0 <xTaskGetTickCount>
 800113a:	4603      	mov	r3, r0
 800113c:	4a0d      	ldr	r2, [pc, #52]	; (8001174 <control_thread+0x6c>)
 800113e:	6013      	str	r3, [r2, #0]
		} else {
			servo_disable_led(control.tvc_servo, NULL);
		}
#endif

		control_update(&control);
 8001140:	480a      	ldr	r0, [pc, #40]	; (800116c <control_thread+0x64>)
 8001142:	f000 f81d 	bl	8001180 <control_update>


		if(control.state < CS_NUM && control.state >= 0) {
 8001146:	4b09      	ldr	r3, [pc, #36]	; (800116c <control_thread+0x64>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b05      	cmp	r3, #5
 800114c:	d807      	bhi.n	800115e <control_thread+0x56>
			control_fcn[control.state](&control);
 800114e:	4b07      	ldr	r3, [pc, #28]	; (800116c <control_thread+0x64>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	461a      	mov	r2, r3
 8001154:	4b08      	ldr	r3, [pc, #32]	; (8001178 <control_thread+0x70>)
 8001156:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800115a:	4804      	ldr	r0, [pc, #16]	; (800116c <control_thread+0x64>)
 800115c:	4798      	blx	r3
		}
		vTaskDelayUntil( &last_wake_time, period );
 800115e:	4b07      	ldr	r3, [pc, #28]	; (800117c <control_thread+0x74>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4619      	mov	r1, r3
 8001164:	4803      	ldr	r0, [pc, #12]	; (8001174 <control_thread+0x6c>)
 8001166:	f009 fc6d 	bl	800aa44 <vTaskDelayUntil>
		control_update(&control);
 800116a:	e7e9      	b.n	8001140 <control_thread+0x38>
 800116c:	20000300 	.word	0x20000300
 8001170:	20000390 	.word	0x20000390
 8001174:	20001818 	.word	0x20001818
 8001178:	20000030 	.word	0x20000030
 800117c:	0800bd78 	.word	0x0800bd78

08001180 <control_update>:
	}
}


static void control_update(CONTROL_INST_t * control) {
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]

	control->last_time = control->time;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	685a      	ldr	r2, [r3, #4]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	609a      	str	r2, [r3, #8]
	control->time = HAL_GetTick();
 8001190:	f003 f86c 	bl	800426c <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	605a      	str	r2, [r3, #4]
	control->iter++;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	1c5a      	adds	r2, r3, #1
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	615a      	str	r2, [r3, #20]

	if(control->counter_active) {
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	7c1b      	ldrb	r3, [r3, #16]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d00b      	beq.n	80011c4 <control_update+0x44>
		control->counter -= (control->time - control->last_time);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	4619      	mov	r1, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	689a      	ldr	r2, [r3, #8]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	440b      	add	r3, r1
 80011be:	461a      	mov	r2, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	60da      	str	r2, [r3, #12]
	}

	static uint16_t hb_count = 0;
	hb_count += CONTROL_HEART_BEAT;
 80011c4:	4b13      	ldr	r3, [pc, #76]	; (8001214 <control_update+0x94>)
 80011c6:	881b      	ldrh	r3, [r3, #0]
 80011c8:	330a      	adds	r3, #10
 80011ca:	b29a      	uxth	r2, r3
 80011cc:	4b11      	ldr	r3, [pc, #68]	; (8001214 <control_update+0x94>)
 80011ce:	801a      	strh	r2, [r3, #0]
	if(hb_count > 1000) {
 80011d0:	4b10      	ldr	r3, [pc, #64]	; (8001214 <control_update+0x94>)
 80011d2:	881b      	ldrh	r3, [r3, #0]
 80011d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011d8:	d90a      	bls.n	80011f0 <control_update+0x70>
		pipeline_send_heartbeat(control->state, control->time);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	781a      	ldrb	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	4619      	mov	r1, r3
 80011e4:	4610      	mov	r0, r2
 80011e6:	f001 fa70 	bl	80026ca <pipeline_send_heartbeat>
		hb_count = 0;
 80011ea:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <control_update+0x94>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	801a      	strh	r2, [r3, #0]
	servo_sync(control->tvc_servo);
#endif

	//init error if there is an issue with a motor

	if(control_sched_should_run(control, CONTROL_SCHED_ABORT)) {
 80011f0:	2101      	movs	r1, #1
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f000 fa22 	bl	800163c <control_sched_should_run>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d006      	beq.n	800120c <control_update+0x8c>
		init_abort(control);
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f000 f8d1 	bl	80013a6 <init_abort>
		control_sched_done(control, CONTROL_SCHED_ABORT);
 8001204:	2101      	movs	r1, #1
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f000 fa2d 	bl	8001666 <control_sched_done>
	}
}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	2000181c 	.word	0x2000181c

08001218 <init_control>:

static void init_control(CONTROL_INST_t * control) {
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
	control->sched = CONTROL_SCHED_NOTHING;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2200      	movs	r2, #0
 8001224:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	control->counter_active = 0;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2200      	movs	r2, #0
 800122c:	741a      	strb	r2, [r3, #16]
	control->command_payload.thrust = 2000;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001234:	661a      	str	r2, [r3, #96]	; 0x60
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <init_idle>:

static void init_idle(CONTROL_INST_t * control) {
 8001242:	b580      	push	{r7, lr}
 8001244:	b082      	sub	sp, #8
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
	control->state = CS_IDLE;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2200      	movs	r2, #0
 800124e:	701a      	strb	r2, [r3, #0]
	led_set_color(LED_GREEN);
 8001250:	2200      	movs	r2, #0
 8001252:	21ff      	movs	r1, #255	; 0xff
 8001254:	2000      	movs	r0, #0
 8001256:	f000 fe3b 	bl	8001ed0 <led_set_color>
	storage_disable();
 800125a:	f001 fcb1 	bl	8002bc0 <storage_disable>
	cm4_force_shutdown(control->cm4);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	699b      	ldr	r3, [r3, #24]
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff ff17 	bl	8001096 <cm4_force_shutdown>
}
 8001268:	bf00      	nop
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <idle>:

static void idle(CONTROL_INST_t * control) {
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
	if(control_sched_should_run(control, CONTROL_SCHED_MOVE_TVC)) {
		servo_move(control->tvc_servo, control->tvc_mov_target);
		control_sched_done(control, CONTROL_SCHED_MOVE_TVC);
	}
#endif
	if(control_sched_should_run(control, CONTROL_SCHED_BOOT)) {
 8001278:	2102      	movs	r1, #2
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f000 f9de 	bl	800163c <control_sched_should_run>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d006      	beq.n	8001294 <idle+0x24>
		init_boot(control);
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f000 f808 	bl	800129c <init_boot>
		control_sched_done(control, CONTROL_SCHED_BOOT);
 800128c:	2102      	movs	r1, #2
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f000 f9e9 	bl	8001666 <control_sched_done>
	}

}
 8001294:	bf00      	nop
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <init_boot>:

static void init_boot(CONTROL_INST_t * control) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
	//global enable
	//to boot the rpi
	led_set_color(LED_LILA);
 80012a4:	224f      	movs	r2, #79	; 0x4f
 80012a6:	2103      	movs	r1, #3
 80012a8:	20ff      	movs	r0, #255	; 0xff
 80012aa:	f000 fe11 	bl	8001ed0 <led_set_color>
	control->state = CS_BOOT;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2201      	movs	r2, #1
 80012b2:	701a      	strb	r2, [r3, #0]
	cm4_boot(control->cm4);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff fe8d 	bl	8000fd8 <cm4_boot>
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <boot>:

static void boot(CONTROL_INST_t * control) {
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b084      	sub	sp, #16
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
	//wait for the cm4 to start answering with concluent status packets
	uint8_t ready = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	73fb      	strb	r3, [r7, #15]
	cm4_is_ready(control->cm4, &ready);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	699b      	ldr	r3, [r3, #24]
 80012d6:	f107 020f 	add.w	r2, r7, #15
 80012da:	4611      	mov	r1, r2
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff fe86 	bl	8000fee <cm4_is_ready>
	if(ready) {
 80012e2:	7bfb      	ldrb	r3, [r7, #15]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d002      	beq.n	80012ee <boot+0x28>
		init_compute(control);
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f000 f804 	bl	80012f6 <init_compute>
	}
}
 80012ee:	bf00      	nop
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <init_compute>:

static void init_compute(CONTROL_INST_t * control) {
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b082      	sub	sp, #8
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
	//start sending data to raspberry pi
	led_set_color(LED_BLUE);
 80012fe:	22ff      	movs	r2, #255	; 0xff
 8001300:	2100      	movs	r1, #0
 8001302:	2000      	movs	r0, #0
 8001304:	f000 fde4 	bl	8001ed0 <led_set_color>
	control->state = CS_COMPUTE;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2202      	movs	r2, #2
 800130c:	701a      	strb	r2, [r3, #0]
}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <compute>:

static void compute(CONTROL_INST_t * control) {
 8001316:	b580      	push	{r7, lr}
 8001318:	b082      	sub	sp, #8
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]

	if(control_sched_should_run(control, CONTROL_SCHED_SHUTDOWN)) {
 800131e:	2103      	movs	r1, #3
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f000 f98b 	bl	800163c <control_sched_should_run>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d006      	beq.n	800133a <compute+0x24>
		init_shutdown(control);
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f000 f808 	bl	8001342 <init_shutdown>
		control_sched_done(control, CONTROL_SCHED_SHUTDOWN);
 8001332:	2103      	movs	r1, #3
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f000 f996 	bl	8001666 <control_sched_done>
	}
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <init_shutdown>:


static void init_shutdown(CONTROL_INST_t * control) {
 8001342:	b580      	push	{r7, lr}
 8001344:	b082      	sub	sp, #8
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
	led_set_color(LED_ORANGE);
 800134a:	2207      	movs	r2, #7
 800134c:	210f      	movs	r1, #15
 800134e:	207f      	movs	r0, #127	; 0x7f
 8001350:	f000 fdbe 	bl	8001ed0 <led_set_color>
	control->state = CS_SHUTDOWN;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2203      	movs	r2, #3
 8001358:	701a      	strb	r2, [r3, #0]
	cm4_shutdown(control->cm4);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	699b      	ldr	r3, [r3, #24]
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff fe65 	bl	800102e <cm4_shutdown>
}
 8001364:	bf00      	nop
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <shutdown>:

static void shutdown(CONTROL_INST_t * control) {
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
	uint8_t shutdown = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	73fb      	strb	r3, [r7, #15]
	cm4_shutdown(control->cm4);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff fe56 	bl	800102e <cm4_shutdown>
	cm4_is_shutdown(control->cm4, &shutdown);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	699b      	ldr	r3, [r3, #24]
 8001386:	f107 020f 	add.w	r2, r7, #15
 800138a:	4611      	mov	r1, r2
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff fe64 	bl	800105a <cm4_is_shutdown>
	if(shutdown) {
 8001392:	7bfb      	ldrb	r3, [r7, #15]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d002      	beq.n	800139e <shutdown+0x32>
		init_idle(control);
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f7ff ff52 	bl	8001242 <init_idle>
	}
}
 800139e:	bf00      	nop
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <init_abort>:

static void init_abort(CONTROL_INST_t * control) {
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b082      	sub	sp, #8
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
	led_set_color(LED_PINK);
 80013ae:	227f      	movs	r2, #127	; 0x7f
 80013b0:	2100      	movs	r1, #0
 80013b2:	207f      	movs	r0, #127	; 0x7f
 80013b4:	f000 fd8c 	bl	8001ed0 <led_set_color>
	control->shadow_state = control->state;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	781a      	ldrb	r2, [r3, #0]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	705a      	strb	r2, [r3, #1]
	control->state = CS_ABORT;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2204      	movs	r2, #4
 80013c4:	701a      	strb	r2, [r3, #0]
#if USE_DYNAMIXEL == 1
	servo_move(control->tvc_servo, 2048); //2048 is the straight position
#endif
	control->counter_active=0;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	741a      	strb	r2, [r3, #16]
	storage_disable();
 80013cc:	f001 fbf8 	bl	8002bc0 <storage_disable>
	cm4_force_shutdown(control->cm4);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff fe5e 	bl	8001096 <cm4_force_shutdown>
}
 80013da:	bf00      	nop
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <_abort>:

static void _abort(CONTROL_INST_t * control) {
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b082      	sub	sp, #8
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
	if(control_sched_should_run(control, CONTROL_SCHED_RECOVER)) {
 80013ea:	2105      	movs	r1, #5
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f000 f925 	bl	800163c <control_sched_should_run>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d006      	beq.n	8001406 <_abort+0x24>
		init_idle(control);
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff ff22 	bl	8001242 <init_idle>
		control_sched_done(control, CONTROL_SCHED_RECOVER);
 80013fe:	2105      	movs	r1, #5
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f000 f930 	bl	8001666 <control_sched_done>
	}
}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <init_error>:

static void init_error(CONTROL_INST_t * control) {
 800140e:	b580      	push	{r7, lr}
 8001410:	b082      	sub	sp, #8
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
	led_set_color(LED_RED);
 8001416:	2200      	movs	r2, #0
 8001418:	2100      	movs	r1, #0
 800141a:	20ff      	movs	r0, #255	; 0xff
 800141c:	f000 fd58 	bl	8001ed0 <led_set_color>
	control->state = CS_ERROR;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2205      	movs	r2, #5
 8001424:	701a      	strb	r2, [r3, #0]
	control->counter_active = 0;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2200      	movs	r2, #0
 800142a:	741a      	strb	r2, [r3, #16]
	storage_disable();
 800142c:	f001 fbc8 	bl	8002bc0 <storage_disable>
}
 8001430:	bf00      	nop
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <error>:

static void error(CONTROL_INST_t * control) {
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
	//wait for user release
	if(control_sched_should_run(control, CONTROL_SCHED_RECOVER)) {
 8001440:	2105      	movs	r1, #5
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f000 f8fa 	bl	800163c <control_sched_should_run>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d006      	beq.n	800145c <error+0x24>
		init_idle(control);
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f7ff fef7 	bl	8001242 <init_idle>
		control_sched_done(control, CONTROL_SCHED_RECOVER);
 8001454:	2105      	movs	r1, #5
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f000 f905 	bl	8001666 <control_sched_done>
	}
}
 800145c:	bf00      	nop
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <control_move_tvc>:
CONTROL_STATE_t control_get_state() {
	return control.state;
}


void control_move_tvc(int32_t target) {
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
	control_sched_set(&control, CONTROL_SCHED_MOVE_TVC);
 800146c:	2104      	movs	r1, #4
 800146e:	4805      	ldr	r0, [pc, #20]	; (8001484 <control_move_tvc+0x20>)
 8001470:	f000 f912 	bl	8001698 <control_sched_set>
	control.tvc_mov_target = target;
 8001474:	4a03      	ldr	r2, [pc, #12]	; (8001484 <control_move_tvc+0x20>)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6213      	str	r3, [r2, #32]
}
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000300 	.word	0x20000300

08001488 <control_boot>:

void control_boot(void) {
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
	control.command_payload.thrust = 2000;
 800148c:	4b04      	ldr	r3, [pc, #16]	; (80014a0 <control_boot+0x18>)
 800148e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001492:	661a      	str	r2, [r3, #96]	; 0x60
	control_sched_set(&control, CONTROL_SCHED_BOOT);
 8001494:	2102      	movs	r1, #2
 8001496:	4802      	ldr	r0, [pc, #8]	; (80014a0 <control_boot+0x18>)
 8001498:	f000 f8fe 	bl	8001698 <control_sched_set>
}
 800149c:	bf00      	nop
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20000300 	.word	0x20000300

080014a4 <control_shutdown>:

void control_shutdown(void) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
	control_sched_set(&control, CONTROL_SCHED_SHUTDOWN);
 80014a8:	2103      	movs	r1, #3
 80014aa:	4802      	ldr	r0, [pc, #8]	; (80014b4 <control_shutdown+0x10>)
 80014ac:	f000 f8f4 	bl	8001698 <control_sched_set>
}
 80014b0:	bf00      	nop
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20000300 	.word	0x20000300

080014b8 <control_abort>:

void control_abort() {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
	control_sched_set(&control, CONTROL_SCHED_ABORT);
 80014bc:	2101      	movs	r1, #1
 80014be:	4802      	ldr	r0, [pc, #8]	; (80014c8 <control_abort+0x10>)
 80014c0:	f000 f8ea 	bl	8001698 <control_sched_set>
}
 80014c4:	bf00      	nop
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20000300 	.word	0x20000300

080014cc <control_recover>:

void control_recover() {
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
	control_sched_set(&control, CONTROL_SCHED_RECOVER);
 80014d0:	2105      	movs	r1, #5
 80014d2:	4802      	ldr	r0, [pc, #8]	; (80014dc <control_recover+0x10>)
 80014d4:	f000 f8e0 	bl	8001698 <control_sched_set>
}
 80014d8:	bf00      	nop
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20000300 	.word	0x20000300

080014e0 <control_get_status>:

CONTROL_STATUS_t control_get_status() {
 80014e0:	b4b0      	push	{r4, r5, r7}
 80014e2:	b089      	sub	sp, #36	; 0x24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
	CONTROL_STATUS_t status = {0};
 80014e8:	f107 0308 	add.w	r3, r7, #8
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]
 80014f8:	615a      	str	r2, [r3, #20]
	status.state = control.state;
 80014fa:	4b17      	ldr	r3, [pc, #92]	; (8001558 <control_get_status+0x78>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	723b      	strb	r3, [r7, #8]
	status.tvc_error = control.tvc_servo->error;
 8001500:	4b15      	ldr	r3, [pc, #84]	; (8001558 <control_get_status+0x78>)
 8001502:	69db      	ldr	r3, [r3, #28]
 8001504:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 8001508:	3318      	adds	r3, #24
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	737b      	strb	r3, [r7, #13]
	status.tvc_psu_voltage = control.tvc_servo->psu_voltage;
 800150e:	4b12      	ldr	r3, [pc, #72]	; (8001558 <control_get_status+0x78>)
 8001510:	69db      	ldr	r3, [r3, #28]
 8001512:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 8001516:	3310      	adds	r3, #16
 8001518:	881b      	ldrh	r3, [r3, #0]
 800151a:	817b      	strh	r3, [r7, #10]
	status.tvc_temperature = control.tvc_servo->temperature;
 800151c:	4b0e      	ldr	r3, [pc, #56]	; (8001558 <control_get_status+0x78>)
 800151e:	69db      	ldr	r3, [r3, #28]
 8001520:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 8001524:	3312      	adds	r3, #18
 8001526:	f993 3000 	ldrsb.w	r3, [r3]
 800152a:	733b      	strb	r3, [r7, #12]
	status.tvc_position = control.tvc_servo->position;
 800152c:	4b0a      	ldr	r3, [pc, #40]	; (8001558 <control_get_status+0x78>)
 800152e:	69db      	ldr	r3, [r3, #28]
 8001530:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 8001534:	3314      	adds	r3, #20
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	613b      	str	r3, [r7, #16]

	return status;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	461d      	mov	r5, r3
 800153e:	f107 0408 	add.w	r4, r7, #8
 8001542:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001544:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001546:	e894 0003 	ldmia.w	r4, {r0, r1}
 800154a:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	3724      	adds	r7, #36	; 0x24
 8001552:	46bd      	mov	sp, r7
 8001554:	bcb0      	pop	{r4, r5, r7}
 8001556:	4770      	bx	lr
 8001558:	20000300 	.word	0x20000300

0800155c <control_get_cm4>:

CM4_INST_t * control_get_cm4(void) {
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
	return control.cm4;
 8001560:	4b03      	ldr	r3, [pc, #12]	; (8001570 <control_get_cm4+0x14>)
 8001562:	699b      	ldr	r3, [r3, #24]
}
 8001564:	4618      	mov	r0, r3
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	20000300 	.word	0x20000300

08001574 <control_set_sens>:

void control_set_sens(CM4_PAYLOAD_SENSOR_t sens) {
 8001574:	b084      	sub	sp, #16
 8001576:	b4b0      	push	{r4, r5, r7}
 8001578:	af00      	add	r7, sp, #0
 800157a:	f107 040c 	add.w	r4, r7, #12
 800157e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	control.sensor_payload = sens;
 8001582:	4b08      	ldr	r3, [pc, #32]	; (80015a4 <control_set_sens+0x30>)
 8001584:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8001588:	f107 050c 	add.w	r5, r7, #12
 800158c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800158e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001590:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001592:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001594:	682b      	ldr	r3, [r5, #0]
 8001596:	6023      	str	r3, [r4, #0]
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	bcb0      	pop	{r4, r5, r7}
 800159e:	b004      	add	sp, #16
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	20000300 	.word	0x20000300

080015a8 <control_get_sens>:

CM4_PAYLOAD_SENSOR_t control_get_sens(void) {
 80015a8:	b4b0      	push	{r4, r5, r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
	return control.sensor_payload;
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	4b07      	ldr	r3, [pc, #28]	; (80015d0 <control_get_sens+0x28>)
 80015b4:	4615      	mov	r5, r2
 80015b6:	f103 0438 	add.w	r4, r3, #56	; 0x38
 80015ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015c2:	6823      	ldr	r3, [r4, #0]
 80015c4:	602b      	str	r3, [r5, #0]
}
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bcb0      	pop	{r4, r5, r7}
 80015ce:	4770      	bx	lr
 80015d0:	20000300 	.word	0x20000300

080015d4 <control_set_cmd>:

void control_set_cmd(CM4_PAYLOAD_COMMAND_t cmd) {
 80015d4:	b084      	sub	sp, #16
 80015d6:	b4b0      	push	{r4, r5, r7}
 80015d8:	af00      	add	r7, sp, #0
 80015da:	f107 040c 	add.w	r4, r7, #12
 80015de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	control.command_payload = cmd;
 80015e2:	4b09      	ldr	r3, [pc, #36]	; (8001608 <control_set_cmd+0x34>)
 80015e4:	f103 045c 	add.w	r4, r3, #92	; 0x5c
 80015e8:	f107 050c 	add.w	r5, r7, #12
 80015ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015f8:	682b      	ldr	r3, [r5, #0]
 80015fa:	6023      	str	r3, [r4, #0]
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	bcb0      	pop	{r4, r5, r7}
 8001602:	b004      	add	sp, #16
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	20000300 	.word	0x20000300

0800160c <control_get_cmd>:

CM4_PAYLOAD_COMMAND_t control_get_cmd(void) {
 800160c:	b4b0      	push	{r4, r5, r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
	return control.command_payload;
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	4b08      	ldr	r3, [pc, #32]	; (8001638 <control_get_cmd+0x2c>)
 8001618:	4615      	mov	r5, r2
 800161a:	f103 045c 	add.w	r4, r3, #92	; 0x5c
 800161e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001620:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001622:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001624:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001626:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001628:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800162a:	6823      	ldr	r3, [r4, #0]
 800162c:	602b      	str	r3, [r5, #0]
}
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	bcb0      	pop	{r4, r5, r7}
 8001636:	4770      	bx	lr
 8001638:	20000300 	.word	0x20000300

0800163c <control_sched_should_run>:


static uint8_t control_sched_should_run(CONTROL_INST_t * control, CONTROL_SCHED_t num) {
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	460b      	mov	r3, r1
 8001646:	70fb      	strb	r3, [r7, #3]
	return control->sched == num;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800164e:	78fa      	ldrb	r2, [r7, #3]
 8001650:	429a      	cmp	r2, r3
 8001652:	bf0c      	ite	eq
 8001654:	2301      	moveq	r3, #1
 8001656:	2300      	movne	r3, #0
 8001658:	b2db      	uxtb	r3, r3
}
 800165a:	4618      	mov	r0, r3
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr

08001666 <control_sched_done>:

static void control_sched_done(CONTROL_INST_t * control, CONTROL_SCHED_t num) {
 8001666:	b580      	push	{r7, lr}
 8001668:	b082      	sub	sp, #8
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
 800166e:	460b      	mov	r3, r1
 8001670:	70fb      	strb	r3, [r7, #3]
	if(control->sched == num) {
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001678:	78fa      	ldrb	r2, [r7, #3]
 800167a:	429a      	cmp	r2, r3
 800167c:	d104      	bne.n	8001688 <control_sched_done+0x22>
		control->sched = CONTROL_SCHED_NOTHING;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	} else {
		init_error(control);
	}
}
 8001686:	e002      	b.n	800168e <control_sched_done+0x28>
		init_error(control);
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f7ff fec0 	bl	800140e <init_error>
}
 800168e:	bf00      	nop
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
	...

08001698 <control_sched_set>:

static void control_sched_set(CONTROL_INST_t * control, CONTROL_SCHED_t num) {
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	460b      	mov	r3, r1
 80016a2:	70fb      	strb	r3, [r7, #3]
	if(num == CONTROL_SCHED_ABORT) { //ABORT ALWAYS TAKES OVER
 80016a4:	78fb      	ldrb	r3, [r7, #3]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d103      	bne.n	80016b2 <control_sched_set+0x1a>
		control->sched = num;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	78fa      	ldrb	r2, [r7, #3]
 80016ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	}
	if(control->sched == CONTROL_SCHED_NOTHING) {
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d11c      	bne.n	80016f6 <control_sched_set+0x5e>
		for(uint8_t i = 0; i < SCHED_ALLOWED_WIDTH; i++) {
 80016bc:	2300      	movs	r3, #0
 80016be:	73fb      	strb	r3, [r7, #15]
 80016c0:	e016      	b.n	80016f0 <control_sched_set+0x58>
			if(sched_allowed[control->state][i] == num) {
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	4618      	mov	r0, r3
 80016c8:	7bfa      	ldrb	r2, [r7, #15]
 80016ca:	490d      	ldr	r1, [pc, #52]	; (8001700 <control_sched_set+0x68>)
 80016cc:	4603      	mov	r3, r0
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	4403      	add	r3, r0
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	440b      	add	r3, r1
 80016d6:	4413      	add	r3, r2
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	78fa      	ldrb	r2, [r7, #3]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d104      	bne.n	80016ea <control_sched_set+0x52>
				control->sched = num;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	78fa      	ldrb	r2, [r7, #3]
 80016e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				return;
 80016e8:	e005      	b.n	80016f6 <control_sched_set+0x5e>
		for(uint8_t i = 0; i < SCHED_ALLOWED_WIDTH; i++) {
 80016ea:	7bfb      	ldrb	r3, [r7, #15]
 80016ec:	3301      	adds	r3, #1
 80016ee:	73fb      	strb	r3, [r7, #15]
 80016f0:	7bfb      	ldrb	r3, [r7, #15]
 80016f2:	2b05      	cmp	r3, #5
 80016f4:	d9e5      	bls.n	80016c2 <control_sched_set+0x2a>
			}
		}
	}
}
 80016f6:	3714      	adds	r7, #20
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	2000000c 	.word	0x2000000c

08001704 <util_encode_u8>:
static inline void util_encode_u8(uint8_t * data, uint8_t value) {
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	460b      	mov	r3, r1
 800170e:	70fb      	strb	r3, [r7, #3]
	data[0] = value;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	78fa      	ldrb	r2, [r7, #3]
 8001714:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	3301      	adds	r3, #1
 800171a:	2200      	movs	r2, #0
 800171c:	701a      	strb	r2, [r3, #0]
	data[2] = 0x00;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	3302      	adds	r3, #2
 8001722:	2200      	movs	r2, #0
 8001724:	701a      	strb	r2, [r3, #0]
	data[3] = 0x00;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	3303      	adds	r3, #3
 800172a:	2200      	movs	r2, #0
 800172c:	701a      	strb	r2, [r3, #0]
}
 800172e:	bf00      	nop
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <util_encode_u16>:
static inline void util_encode_u16(uint8_t * data, uint16_t value) {
 800173a:	b480      	push	{r7}
 800173c:	b083      	sub	sp, #12
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
 8001742:	460b      	mov	r3, r1
 8001744:	807b      	strh	r3, [r7, #2]
	data[0] = value;
 8001746:	887b      	ldrh	r3, [r7, #2]
 8001748:	b2da      	uxtb	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	701a      	strb	r2, [r3, #0]
	data[1] = value>>8;
 800174e:	887b      	ldrh	r3, [r7, #2]
 8001750:	0a1b      	lsrs	r3, r3, #8
 8001752:	b29a      	uxth	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3301      	adds	r3, #1
 8001758:	b2d2      	uxtb	r2, r2
 800175a:	701a      	strb	r2, [r3, #0]
	data[2] = 0x00;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3302      	adds	r3, #2
 8001760:	2200      	movs	r2, #0
 8001762:	701a      	strb	r2, [r3, #0]
	data[3] = 0x00;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3303      	adds	r3, #3
 8001768:	2200      	movs	r2, #0
 800176a:	701a      	strb	r2, [r3, #0]
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <util_encode_u32>:
static inline void util_encode_u32(uint8_t * data, uint32_t value) {
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
	data[0] = value;
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	b2da      	uxtb	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	701a      	strb	r2, [r3, #0]
	data[1] = value>>8;
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	0a1a      	lsrs	r2, r3, #8
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	3301      	adds	r3, #1
 8001792:	b2d2      	uxtb	r2, r2
 8001794:	701a      	strb	r2, [r3, #0]
	data[2] = value>>16;
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	0c1a      	lsrs	r2, r3, #16
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	3302      	adds	r3, #2
 800179e:	b2d2      	uxtb	r2, r2
 80017a0:	701a      	strb	r2, [r3, #0]
	data[3] = value>>24;
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	0e1a      	lsrs	r2, r3, #24
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	3303      	adds	r3, #3
 80017aa:	b2d2      	uxtb	r2, r2
 80017ac:	701a      	strb	r2, [r3, #0]
}
 80017ae:	bf00      	nop
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <util_encode_i8>:
static inline void util_encode_i8(uint8_t * data, int8_t value) {
 80017ba:	b480      	push	{r7}
 80017bc:	b083      	sub	sp, #12
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
 80017c2:	460b      	mov	r3, r1
 80017c4:	70fb      	strb	r3, [r7, #3]
	data[0] = value;
 80017c6:	78fa      	ldrb	r2, [r7, #3]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3301      	adds	r3, #1
 80017d0:	2200      	movs	r2, #0
 80017d2:	701a      	strb	r2, [r3, #0]
	data[2] = 0x00;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	3302      	adds	r3, #2
 80017d8:	2200      	movs	r2, #0
 80017da:	701a      	strb	r2, [r3, #0]
	data[3] = 0x00;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3303      	adds	r3, #3
 80017e0:	2200      	movs	r2, #0
 80017e2:	701a      	strb	r2, [r3, #0]
}
 80017e4:	bf00      	nop
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <util_encode_i32>:
static inline void util_encode_i32(uint8_t * data, int32_t value) {
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
	data[0] = value;
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	b2da      	uxtb	r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	701a      	strb	r2, [r3, #0]
	data[1] = value>>8;
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	121a      	asrs	r2, r3, #8
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	3301      	adds	r3, #1
 800180a:	b2d2      	uxtb	r2, r2
 800180c:	701a      	strb	r2, [r3, #0]
	data[2] = value>>16;
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	141a      	asrs	r2, r3, #16
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	3302      	adds	r3, #2
 8001816:	b2d2      	uxtb	r2, r2
 8001818:	701a      	strb	r2, [r3, #0]
	data[3] = value>>24;
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	161a      	asrs	r2, r3, #24
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	3303      	adds	r3, #3
 8001822:	b2d2      	uxtb	r2, r2
 8001824:	701a      	strb	r2, [r3, #0]
}
 8001826:	bf00      	nop
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <util_decode_u32>:
static inline uint32_t util_decode_u32(uint8_t * data) {
 8001832:	b480      	push	{r7}
 8001834:	b083      	sub	sp, #12
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
	return (uint32_t) data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	461a      	mov	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3301      	adds	r3, #1
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	021b      	lsls	r3, r3, #8
 8001848:	4313      	orrs	r3, r2
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	3202      	adds	r2, #2
 800184e:	7812      	ldrb	r2, [r2, #0]
 8001850:	0412      	lsls	r2, r2, #16
 8001852:	4313      	orrs	r3, r2
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	3203      	adds	r2, #3
 8001858:	7812      	ldrb	r2, [r2, #0]
 800185a:	0612      	lsls	r2, r2, #24
 800185c:	4313      	orrs	r3, r2
}
 800185e:	4618      	mov	r0, r3
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <util_decode_i32>:
static inline int32_t util_decode_i32(uint8_t * data) {
 800186a:	b480      	push	{r7}
 800186c:	b083      	sub	sp, #12
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
	return (int32_t) data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	461a      	mov	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	3301      	adds	r3, #1
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	021b      	lsls	r3, r3, #8
 8001880:	431a      	orrs	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	3302      	adds	r3, #2
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	041b      	lsls	r3, r3, #16
 800188a:	431a      	orrs	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3303      	adds	r3, #3
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	061b      	lsls	r3, r3, #24
 8001894:	4313      	orrs	r3, r2
}
 8001896:	4618      	mov	r0, r3
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
	...

080018a4 <debug_decode_fcn>:
 *	DECLARATIONS
 **********************/


//Requires an instance of type debug
SERIAL_RET_t debug_decode_fcn(void * inst, uint8_t data) {
 80018a4:	b590      	push	{r4, r7, lr}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	460b      	mov	r3, r1
 80018ae:	70fb      	strb	r3, [r7, #3]
	static uint8_t send_data[MSV2_MAX_DATA_LEN];
	static uint16_t length = 0;
	static uint16_t bin_length = 0;
	DEBUG_INST_t * debug = (DEBUG_INST_t *) inst;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	60fb      	str	r3, [r7, #12]
	MSV2_ERROR_t tmp = msv2_decode_fragment(&debug->msv2, data);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	3304      	adds	r3, #4
 80018b8:	78fa      	ldrb	r2, [r7, #3]
 80018ba:	4611      	mov	r1, r2
 80018bc:	4618      	mov	r0, r3
 80018be:	f000 fc7f 	bl	80021c0 <msv2_decode_fragment>
 80018c2:	4603      	mov	r3, r0
 80018c4:	72fb      	strb	r3, [r7, #11]

	if(tmp == MSV2_SUCCESS) {
 80018c6:	7afb      	ldrb	r3, [r7, #11]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d15e      	bne.n	800198a <debug_decode_fcn+0xe6>
		if(debug->msv2.rx.opcode < debug_fcn_max) {
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	7a1b      	ldrb	r3, [r3, #8]
 80018d0:	b29a      	uxth	r2, r3
 80018d2:	4b30      	ldr	r3, [pc, #192]	; (8001994 <debug_decode_fcn+0xf0>)
 80018d4:	881b      	ldrh	r3, [r3, #0]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d22e      	bcs.n	8001938 <debug_decode_fcn+0x94>

			debug_fcn[debug->msv2.rx.opcode](debug->msv2.rx.data, debug->msv2.rx.length, send_data, &length);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	7a1b      	ldrb	r3, [r3, #8]
 80018de:	461a      	mov	r2, r3
 80018e0:	4b2d      	ldr	r3, [pc, #180]	; (8001998 <debug_decode_fcn+0xf4>)
 80018e2:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	f103 0012 	add.w	r0, r3, #18
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	89d9      	ldrh	r1, [r3, #14]
 80018f0:	4b2a      	ldr	r3, [pc, #168]	; (800199c <debug_decode_fcn+0xf8>)
 80018f2:	4a2b      	ldr	r2, [pc, #172]	; (80019a0 <debug_decode_fcn+0xfc>)
 80018f4:	47a0      	blx	r4
			//length is in words
			bin_length = msv2_create_frame(&debug->msv2, debug->msv2.rx.opcode, length/2, send_data);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	1d18      	adds	r0, r3, #4
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	7a19      	ldrb	r1, [r3, #8]
 80018fe:	4b27      	ldr	r3, [pc, #156]	; (800199c <debug_decode_fcn+0xf8>)
 8001900:	881b      	ldrh	r3, [r3, #0]
 8001902:	085b      	lsrs	r3, r3, #1
 8001904:	b29b      	uxth	r3, r3
 8001906:	b2da      	uxtb	r2, r3
 8001908:	4b25      	ldr	r3, [pc, #148]	; (80019a0 <debug_decode_fcn+0xfc>)
 800190a:	f000 fb73 	bl	8001ff4 <msv2_create_frame>
 800190e:	4603      	mov	r3, r0
 8001910:	461a      	mov	r2, r3
 8001912:	4b24      	ldr	r3, [pc, #144]	; (80019a4 <debug_decode_fcn+0x100>)
 8001914:	801a      	strh	r2, [r3, #0]
			serial_send(&debug->ser, msv2_tx_data(&debug->msv2), bin_length);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	f503 5480 	add.w	r4, r3, #4096	; 0x1000
 800191c:	3418      	adds	r4, #24
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	3304      	adds	r3, #4
 8001922:	4618      	mov	r0, r3
 8001924:	f000 fd40 	bl	80023a8 <msv2_tx_data>
 8001928:	4601      	mov	r1, r0
 800192a:	4b1e      	ldr	r3, [pc, #120]	; (80019a4 <debug_decode_fcn+0x100>)
 800192c:	881b      	ldrh	r3, [r3, #0]
 800192e:	461a      	mov	r2, r3
 8001930:	4620      	mov	r0, r4
 8001932:	f000 fff3 	bl	800291c <serial_send>
 8001936:	e028      	b.n	800198a <debug_decode_fcn+0xe6>
		} else {
			send_data[0] = CRC_ERROR_LO;
 8001938:	4b19      	ldr	r3, [pc, #100]	; (80019a0 <debug_decode_fcn+0xfc>)
 800193a:	22be      	movs	r2, #190	; 0xbe
 800193c:	701a      	strb	r2, [r3, #0]
			send_data[1] = CRC_ERROR_HI;
 800193e:	4b18      	ldr	r3, [pc, #96]	; (80019a0 <debug_decode_fcn+0xfc>)
 8001940:	22eb      	movs	r2, #235	; 0xeb
 8001942:	705a      	strb	r2, [r3, #1]
			length = 2;
 8001944:	4b15      	ldr	r3, [pc, #84]	; (800199c <debug_decode_fcn+0xf8>)
 8001946:	2202      	movs	r2, #2
 8001948:	801a      	strh	r2, [r3, #0]
			bin_length = msv2_create_frame(&debug->msv2, debug->msv2.rx.opcode, length/2, send_data);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	1d18      	adds	r0, r3, #4
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	7a19      	ldrb	r1, [r3, #8]
 8001952:	4b12      	ldr	r3, [pc, #72]	; (800199c <debug_decode_fcn+0xf8>)
 8001954:	881b      	ldrh	r3, [r3, #0]
 8001956:	085b      	lsrs	r3, r3, #1
 8001958:	b29b      	uxth	r3, r3
 800195a:	b2da      	uxtb	r2, r3
 800195c:	4b10      	ldr	r3, [pc, #64]	; (80019a0 <debug_decode_fcn+0xfc>)
 800195e:	f000 fb49 	bl	8001ff4 <msv2_create_frame>
 8001962:	4603      	mov	r3, r0
 8001964:	461a      	mov	r2, r3
 8001966:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <debug_decode_fcn+0x100>)
 8001968:	801a      	strh	r2, [r3, #0]
			serial_send(&debug->ser, msv2_tx_data(&debug->msv2), bin_length);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	f503 5480 	add.w	r4, r3, #4096	; 0x1000
 8001970:	3418      	adds	r4, #24
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	3304      	adds	r3, #4
 8001976:	4618      	mov	r0, r3
 8001978:	f000 fd16 	bl	80023a8 <msv2_tx_data>
 800197c:	4601      	mov	r1, r0
 800197e:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <debug_decode_fcn+0x100>)
 8001980:	881b      	ldrh	r3, [r3, #0]
 8001982:	461a      	mov	r2, r3
 8001984:	4620      	mov	r0, r4
 8001986:	f000 ffc9 	bl	800291c <serial_send>
		}
	}

	return tmp;
 800198a:	7afb      	ldrb	r3, [r7, #11]
}
 800198c:	4618      	mov	r0, r3
 800198e:	3714      	adds	r7, #20
 8001990:	46bd      	mov	sp, r7
 8001992:	bd90      	pop	{r4, r7, pc}
 8001994:	20000074 	.word	0x20000074
 8001998:	20000048 	.word	0x20000048
 800199c:	20001a20 	.word	0x20001a20
 80019a0:	20001820 	.word	0x20001820
 80019a4:	20001a22 	.word	0x20001a22

080019a8 <debug_init>:

void debug_init(DEBUG_INST_t * debug) {
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
	static uint32_t id_counter = 0;
	msv2_init(&debug->msv2);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	3304      	adds	r3, #4
 80019b4:	4618      	mov	r0, r3
 80019b6:	f000 fb09 	bl	8001fcc <msv2_init>
	serial_init(&debug->ser, &DEBUG_UART, debug, debug_decode_fcn);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f503 5080 	add.w	r0, r3, #4096	; 0x1000
 80019c0:	3018      	adds	r0, #24
 80019c2:	4b08      	ldr	r3, [pc, #32]	; (80019e4 <debug_init+0x3c>)
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	4908      	ldr	r1, [pc, #32]	; (80019e8 <debug_init+0x40>)
 80019c8:	f000 ff68 	bl	800289c <serial_init>
	debug->id = id_counter++;
 80019cc:	4b07      	ldr	r3, [pc, #28]	; (80019ec <debug_init+0x44>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	1c5a      	adds	r2, r3, #1
 80019d2:	4906      	ldr	r1, [pc, #24]	; (80019ec <debug_init+0x44>)
 80019d4:	600a      	str	r2, [r1, #0]
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	6013      	str	r3, [r2, #0]
}
 80019da:	bf00      	nop
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	080018a5 	.word	0x080018a5
 80019e8:	20007ed4 	.word	0x20007ed4
 80019ec:	20001a24 	.word	0x20001a24

080019f0 <debug_get_status>:

static void debug_get_status(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b08c      	sub	sp, #48	; 0x30
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	607a      	str	r2, [r7, #4]
 80019fa:	603b      	str	r3, [r7, #0]
 80019fc:	460b      	mov	r3, r1
 80019fe:	817b      	strh	r3, [r7, #10]
	CONTROL_STATUS_t status = control_get_status();
 8001a00:	f107 0314 	add.w	r3, r7, #20
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff fd6b 	bl	80014e0 <control_get_status>
	util_encode_u16(resp, status.state);
 8001a0a:	7d3b      	ldrb	r3, [r7, #20]
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	4619      	mov	r1, r3
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f7ff fe92 	bl	800173a <util_encode_u16>
	util_encode_u16(resp+2, 0); //padding
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	3302      	adds	r3, #2
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff fe8c 	bl	800173a <util_encode_u16>
	util_encode_i32(resp+4, status.counter);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	3304      	adds	r3, #4
 8001a26:	6a3a      	ldr	r2, [r7, #32]
 8001a28:	4611      	mov	r1, r2
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff fee0 	bl	80017f0 <util_encode_i32>
	uint32_t memory = storage_get_used();
 8001a30:	f001 f8a2 	bl	8002b78 <storage_get_used>
 8001a34:	62f8      	str	r0, [r7, #44]	; 0x2c
	util_encode_u32(resp+8, memory);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	3308      	adds	r3, #8
 8001a3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff fe9b 	bl	8001778 <util_encode_u32>
	util_encode_i32(resp+12, status.tvc_position);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	330c      	adds	r3, #12
 8001a46:	69fa      	ldr	r2, [r7, #28]
 8001a48:	4611      	mov	r1, r2
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff fed0 	bl	80017f0 <util_encode_i32>
	util_encode_u16(resp+16, status.tvc_psu_voltage);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3310      	adds	r3, #16
 8001a54:	8afa      	ldrh	r2, [r7, #22]
 8001a56:	4611      	mov	r1, r2
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff fe6e 	bl	800173a <util_encode_u16>
	util_encode_u8(resp+18, status.tvc_error);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	3312      	adds	r3, #18
 8001a62:	7e7a      	ldrb	r2, [r7, #25]
 8001a64:	4611      	mov	r1, r2
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff fe4c 	bl	8001704 <util_encode_u8>
	util_encode_i8(resp+19, status.tvc_temperature);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3313      	adds	r3, #19
 8001a70:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8001a74:	4611      	mov	r1, r2
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff fe9f 	bl	80017ba <util_encode_i8>
	*resp_len = 20;
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	2214      	movs	r2, #20
 8001a80:	801a      	strh	r2, [r3, #0]
}
 8001a82:	bf00      	nop
 8001a84:	3730      	adds	r7, #48	; 0x30
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <debug_boot>:

static void debug_boot(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b084      	sub	sp, #16
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	60f8      	str	r0, [r7, #12]
 8001a92:	607a      	str	r2, [r7, #4]
 8001a94:	603b      	str	r3, [r7, #0]
 8001a96:	460b      	mov	r3, r1
 8001a98:	817b      	strh	r3, [r7, #10]
	control_boot();
 8001a9a:	f7ff fcf5 	bl	8001488 <control_boot>
	resp[0] = OK_LO;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	22c5      	movs	r2, #197	; 0xc5
 8001aa2:	701a      	strb	r2, [r3, #0]
	resp[1] = OK_HI;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	225c      	movs	r2, #92	; 0x5c
 8001aaa:	701a      	strb	r2, [r3, #0]
	*resp_len = 2;
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	2202      	movs	r2, #2
 8001ab0:	801a      	strh	r2, [r3, #0]
}
 8001ab2:	bf00      	nop
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <debug_shutdown>:


static void debug_shutdown(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b084      	sub	sp, #16
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	60f8      	str	r0, [r7, #12]
 8001ac2:	607a      	str	r2, [r7, #4]
 8001ac4:	603b      	str	r3, [r7, #0]
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	817b      	strh	r3, [r7, #10]
	control_shutdown();
 8001aca:	f7ff fceb 	bl	80014a4 <control_shutdown>
	resp[0] = OK_LO;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	22c5      	movs	r2, #197	; 0xc5
 8001ad2:	701a      	strb	r2, [r3, #0]
	resp[1] = OK_HI;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	225c      	movs	r2, #92	; 0x5c
 8001ada:	701a      	strb	r2, [r3, #0]
	*resp_len = 2;
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	2202      	movs	r2, #2
 8001ae0:	801a      	strh	r2, [r3, #0]
}
 8001ae2:	bf00      	nop
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <debug_download>:

static void debug_download(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b086      	sub	sp, #24
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	60f8      	str	r0, [r7, #12]
 8001af2:	607a      	str	r2, [r7, #4]
 8001af4:	603b      	str	r3, [r7, #0]
 8001af6:	460b      	mov	r3, r1
 8001af8:	817b      	strh	r3, [r7, #10]
	//downloads 5 samples at a certain location
	if(data_len == DOWNLOAD_LEN) {
 8001afa:	897b      	ldrh	r3, [r7, #10]
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d11b      	bne.n	8001b38 <debug_download+0x4e>
		uint32_t location = util_decode_u32(data);
 8001b00:	68f8      	ldr	r0, [r7, #12]
 8001b02:	f7ff fe96 	bl	8001832 <util_decode_u32>
 8001b06:	6138      	str	r0, [r7, #16]
		for(uint8_t i = 0; i < 5; i++) {
 8001b08:	2300      	movs	r3, #0
 8001b0a:	75fb      	strb	r3, [r7, #23]
 8001b0c:	e00e      	b.n	8001b2c <debug_download+0x42>
			storage_get_sample(location+i, resp+i*32);
 8001b0e:	7dfa      	ldrb	r2, [r7, #23]
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	441a      	add	r2, r3
 8001b14:	7dfb      	ldrb	r3, [r7, #23]
 8001b16:	015b      	lsls	r3, r3, #5
 8001b18:	4619      	mov	r1, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	440b      	add	r3, r1
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4610      	mov	r0, r2
 8001b22:	f001 f835 	bl	8002b90 <storage_get_sample>
		for(uint8_t i = 0; i < 5; i++) {
 8001b26:	7dfb      	ldrb	r3, [r7, #23]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	75fb      	strb	r3, [r7, #23]
 8001b2c:	7dfb      	ldrb	r3, [r7, #23]
 8001b2e:	2b04      	cmp	r3, #4
 8001b30:	d9ed      	bls.n	8001b0e <debug_download+0x24>
		}
		*resp_len = 32*5;
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	22a0      	movs	r2, #160	; 0xa0
 8001b36:	801a      	strh	r2, [r3, #0]
	}
}
 8001b38:	bf00      	nop
 8001b3a:	3718      	adds	r7, #24
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <debug_tvc_move>:

static void debug_tvc_move(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	607a      	str	r2, [r7, #4]
 8001b4a:	603b      	str	r3, [r7, #0]
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	817b      	strh	r3, [r7, #10]
	if(data_len == TVC_MOVE_LEN) {
 8001b50:	897b      	ldrh	r3, [r7, #10]
 8001b52:	2b04      	cmp	r3, #4
 8001b54:	d111      	bne.n	8001b7a <debug_tvc_move+0x3a>
		int32_t target = util_decode_i32(data);
 8001b56:	68f8      	ldr	r0, [r7, #12]
 8001b58:	f7ff fe87 	bl	800186a <util_decode_i32>
 8001b5c:	6178      	str	r0, [r7, #20]
		control_move_tvc(target);
 8001b5e:	6978      	ldr	r0, [r7, #20]
 8001b60:	f7ff fc80 	bl	8001464 <control_move_tvc>
		resp[0] = OK_LO;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	22c5      	movs	r2, #197	; 0xc5
 8001b68:	701a      	strb	r2, [r3, #0]
		resp[1] = OK_HI;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	225c      	movs	r2, #92	; 0x5c
 8001b70:	701a      	strb	r2, [r3, #0]
		*resp_len = 2;
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	2202      	movs	r2, #2
 8001b76:	801a      	strh	r2, [r3, #0]
	} else {
		resp[0] = ERROR_LO;
		resp[1] = ERROR_HI;
		*resp_len = 2;
	}
}
 8001b78:	e009      	b.n	8001b8e <debug_tvc_move+0x4e>
		resp[0] = ERROR_LO;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	22ce      	movs	r2, #206	; 0xce
 8001b7e:	701a      	strb	r2, [r3, #0]
		resp[1] = ERROR_HI;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	3301      	adds	r3, #1
 8001b84:	22ec      	movs	r2, #236	; 0xec
 8001b86:	701a      	strb	r2, [r3, #0]
		*resp_len = 2;
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	801a      	strh	r2, [r3, #0]
}
 8001b8e:	bf00      	nop
 8001b90:	3718      	adds	r7, #24
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <debug_abort>:

static void debug_abort(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b084      	sub	sp, #16
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	60f8      	str	r0, [r7, #12]
 8001b9e:	607a      	str	r2, [r7, #4]
 8001ba0:	603b      	str	r3, [r7, #0]
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	817b      	strh	r3, [r7, #10]
	control_abort();
 8001ba6:	f7ff fc87 	bl	80014b8 <control_abort>
	resp[0] = OK_LO;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	22c5      	movs	r2, #197	; 0xc5
 8001bae:	701a      	strb	r2, [r3, #0]
	resp[1] = OK_HI;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	225c      	movs	r2, #92	; 0x5c
 8001bb6:	701a      	strb	r2, [r3, #0]
	*resp_len = 2;
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	2202      	movs	r2, #2
 8001bbc:	801a      	strh	r2, [r3, #0]
}
 8001bbe:	bf00      	nop
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <debug_recover>:

static void debug_recover(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b084      	sub	sp, #16
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	60f8      	str	r0, [r7, #12]
 8001bce:	607a      	str	r2, [r7, #4]
 8001bd0:	603b      	str	r3, [r7, #0]
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	817b      	strh	r3, [r7, #10]
	control_recover();
 8001bd6:	f7ff fc79 	bl	80014cc <control_recover>
	resp[0] = OK_LO;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	22c5      	movs	r2, #197	; 0xc5
 8001bde:	701a      	strb	r2, [r3, #0]
	resp[1] = OK_HI;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	3301      	adds	r3, #1
 8001be4:	225c      	movs	r2, #92	; 0x5c
 8001be6:	701a      	strb	r2, [r3, #0]
	*resp_len = 2;
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	2202      	movs	r2, #2
 8001bec:	801a      	strh	r2, [r3, #0]
}
 8001bee:	bf00      	nop
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <debug_sensor_write>:

static void debug_sensor_write(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 8001bf6:	b5b0      	push	{r4, r5, r7, lr}
 8001bf8:	b094      	sub	sp, #80	; 0x50
 8001bfa:	af06      	add	r7, sp, #24
 8001bfc:	60f8      	str	r0, [r7, #12]
 8001bfe:	607a      	str	r2, [r7, #4]
 8001c00:	603b      	str	r3, [r7, #0]
 8001c02:	460b      	mov	r3, r1
 8001c04:	817b      	strh	r3, [r7, #10]
	if(data_len == TRANSACTION_SENS_LEN) {
 8001c06:	897b      	ldrh	r3, [r7, #10]
 8001c08:	2b1c      	cmp	r3, #28
 8001c0a:	d155      	bne.n	8001cb8 <debug_sensor_write+0xc2>
		CM4_PAYLOAD_SENSOR_t sens_data = {0};
 8001c0c:	f107 0314 	add.w	r3, r7, #20
 8001c10:	2224      	movs	r2, #36	; 0x24
 8001c12:	2100      	movs	r1, #0
 8001c14:	4618      	mov	r0, r3
 8001c16:	f00a f871 	bl	800bcfc <memset>
		sens_data.acc_x = util_decode_i32(data);
 8001c1a:	68f8      	ldr	r0, [r7, #12]
 8001c1c:	f7ff fe25 	bl	800186a <util_decode_i32>
 8001c20:	4603      	mov	r3, r0
 8001c22:	61bb      	str	r3, [r7, #24]
		sens_data.acc_y = util_decode_i32(data+4);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	3304      	adds	r3, #4
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff fe1e 	bl	800186a <util_decode_i32>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	61fb      	str	r3, [r7, #28]
		sens_data.acc_z = util_decode_i32(data+8);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	3308      	adds	r3, #8
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff fe17 	bl	800186a <util_decode_i32>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	623b      	str	r3, [r7, #32]

		sens_data.gyro_x = util_decode_i32(data+12);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	330c      	adds	r3, #12
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff fe10 	bl	800186a <util_decode_i32>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	627b      	str	r3, [r7, #36]	; 0x24
		sens_data.gyro_y = util_decode_i32(data+16);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	3310      	adds	r3, #16
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff fe09 	bl	800186a <util_decode_i32>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	62bb      	str	r3, [r7, #40]	; 0x28
		sens_data.gyro_z = util_decode_i32(data+20);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	3314      	adds	r3, #20
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff fe02 	bl	800186a <util_decode_i32>
 8001c66:	4603      	mov	r3, r0
 8001c68:	62fb      	str	r3, [r7, #44]	; 0x2c

		sens_data.baro = util_decode_i32(data+24);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	3318      	adds	r3, #24
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff fdfb 	bl	800186a <util_decode_i32>
 8001c74:	4603      	mov	r3, r0
 8001c76:	633b      	str	r3, [r7, #48]	; 0x30

		control_set_sens(sens_data);
 8001c78:	466d      	mov	r5, sp
 8001c7a:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8001c7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c82:	6823      	ldr	r3, [r4, #0]
 8001c84:	602b      	str	r3, [r5, #0]
 8001c86:	f107 0314 	add.w	r3, r7, #20
 8001c8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c8c:	f7ff fc72 	bl	8001574 <control_set_sens>
		cm4_send_sensors(control_get_cm4(), &sens_data);
 8001c90:	f7ff fc64 	bl	800155c <control_get_cm4>
 8001c94:	4602      	mov	r2, r0
 8001c96:	f107 0314 	add.w	r3, r7, #20
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4610      	mov	r0, r2
 8001c9e:	f7ff f8d1 	bl	8000e44 <cm4_send_sensors>

		resp[0] = OK_LO;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	22c5      	movs	r2, #197	; 0xc5
 8001ca6:	701a      	strb	r2, [r3, #0]
		resp[1] = OK_HI;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	3301      	adds	r3, #1
 8001cac:	225c      	movs	r2, #92	; 0x5c
 8001cae:	701a      	strb	r2, [r3, #0]

		*resp_len = 2;
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	2202      	movs	r2, #2
 8001cb4:	801a      	strh	r2, [r3, #0]
	} else {
		resp[0] = ERROR_LO;
		resp[1] = ERROR_HI;
		*resp_len = 2;
	}
}
 8001cb6:	e009      	b.n	8001ccc <debug_sensor_write+0xd6>
		resp[0] = ERROR_LO;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	22ce      	movs	r2, #206	; 0xce
 8001cbc:	701a      	strb	r2, [r3, #0]
		resp[1] = ERROR_HI;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	22ec      	movs	r2, #236	; 0xec
 8001cc4:	701a      	strb	r2, [r3, #0]
		*resp_len = 2;
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	2202      	movs	r2, #2
 8001cca:	801a      	strh	r2, [r3, #0]
}
 8001ccc:	bf00      	nop
 8001cce:	3738      	adds	r7, #56	; 0x38
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bdb0      	pop	{r4, r5, r7, pc}

08001cd4 <debug_command_read>:

static void debug_command_read(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b092      	sub	sp, #72	; 0x48
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	607a      	str	r2, [r7, #4]
 8001cde:	603b      	str	r3, [r7, #0]
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	817b      	strh	r3, [r7, #10]

	CM4_PAYLOAD_COMMAND_t cmd_data = control_get_cmd();
 8001ce4:	f107 0314 	add.w	r3, r7, #20
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff fc8f 	bl	800160c <control_get_cmd>

	util_encode_i32(resp, cmd_data.thrust);
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f7ff fd7c 	bl	80017f0 <util_encode_i32>
	util_encode_i32(resp+4, cmd_data.dynamixel[0]);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3304      	adds	r3, #4
 8001cfc:	69fa      	ldr	r2, [r7, #28]
 8001cfe:	4611      	mov	r1, r2
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff fd75 	bl	80017f0 <util_encode_i32>
	util_encode_i32(resp+8, cmd_data.dynamixel[1]);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	3308      	adds	r3, #8
 8001d0a:	6a3a      	ldr	r2, [r7, #32]
 8001d0c:	4611      	mov	r1, r2
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff fd6e 	bl	80017f0 <util_encode_i32>
	util_encode_i32(resp+12, cmd_data.dynamixel[2]);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	330c      	adds	r3, #12
 8001d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d1a:	4611      	mov	r1, r2
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff fd67 	bl	80017f0 <util_encode_i32>
	util_encode_i32(resp+16, cmd_data.dynamixel[3]);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	3310      	adds	r3, #16
 8001d26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d28:	4611      	mov	r1, r2
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff fd60 	bl	80017f0 <util_encode_i32>

	util_encode_i32(resp+20, cmd_data.position[0]);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	3314      	adds	r3, #20
 8001d34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d36:	4611      	mov	r1, r2
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff fd59 	bl	80017f0 <util_encode_i32>
	util_encode_i32(resp+24, cmd_data.position[1]);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	3318      	adds	r3, #24
 8001d42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d44:	4611      	mov	r1, r2
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff fd52 	bl	80017f0 <util_encode_i32>
	util_encode_i32(resp+28, cmd_data.position[2]);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	331c      	adds	r3, #28
 8001d50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d52:	4611      	mov	r1, r2
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff fd4b 	bl	80017f0 <util_encode_i32>

	util_encode_i32(resp+32, cmd_data.speed[0]);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	3320      	adds	r3, #32
 8001d5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d60:	4611      	mov	r1, r2
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff fd44 	bl	80017f0 <util_encode_i32>
	util_encode_i32(resp+36, cmd_data.speed[1]);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	3324      	adds	r3, #36	; 0x24
 8001d6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d6e:	4611      	mov	r1, r2
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff fd3d 	bl	80017f0 <util_encode_i32>
	util_encode_i32(resp+40, cmd_data.speed[2]);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	3328      	adds	r3, #40	; 0x28
 8001d7a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001d7c:	4611      	mov	r1, r2
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff fd36 	bl	80017f0 <util_encode_i32>

	util_encode_u16(resp+44, cmd_data.state);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	332c      	adds	r3, #44	; 0x2c
 8001d88:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8001d8c:	4611      	mov	r1, r2
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff fcd3 	bl	800173a <util_encode_u16>

	*resp_len = TRANSACTION_CMD_LEN;
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	222e      	movs	r2, #46	; 0x2e
 8001d98:	801a      	strh	r2, [r3, #0]

}
 8001d9a:	bf00      	nop
 8001d9c:	3748      	adds	r7, #72	; 0x48
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <debug_sensor_read>:

static void debug_sensor_read(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b08e      	sub	sp, #56	; 0x38
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	60f8      	str	r0, [r7, #12]
 8001daa:	607a      	str	r2, [r7, #4]
 8001dac:	603b      	str	r3, [r7, #0]
 8001dae:	460b      	mov	r3, r1
 8001db0:	817b      	strh	r3, [r7, #10]

	CM4_PAYLOAD_SENSOR_t sens_data = control_get_sens();
 8001db2:	f107 0314 	add.w	r3, r7, #20
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff fbf6 	bl	80015a8 <control_get_sens>

	util_encode_i32(resp, sens_data.acc_x);
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f7ff fd15 	bl	80017f0 <util_encode_i32>
	util_encode_i32(resp+4, sens_data.acc_y);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	3304      	adds	r3, #4
 8001dca:	69fa      	ldr	r2, [r7, #28]
 8001dcc:	4611      	mov	r1, r2
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff fd0e 	bl	80017f0 <util_encode_i32>
	util_encode_i32(resp+8, sens_data.acc_z);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3308      	adds	r3, #8
 8001dd8:	6a3a      	ldr	r2, [r7, #32]
 8001dda:	4611      	mov	r1, r2
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff fd07 	bl	80017f0 <util_encode_i32>

	util_encode_i32(resp+12, sens_data.gyro_x);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	330c      	adds	r3, #12
 8001de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001de8:	4611      	mov	r1, r2
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff fd00 	bl	80017f0 <util_encode_i32>
	util_encode_i32(resp+16, sens_data.gyro_y);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3310      	adds	r3, #16
 8001df4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001df6:	4611      	mov	r1, r2
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff fcf9 	bl	80017f0 <util_encode_i32>
	util_encode_i32(resp+20, sens_data.gyro_z);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	3314      	adds	r3, #20
 8001e02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e04:	4611      	mov	r1, r2
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff fcf2 	bl	80017f0 <util_encode_i32>

	util_encode_i32(resp+24, sens_data.baro);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3318      	adds	r3, #24
 8001e10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e12:	4611      	mov	r1, r2
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff fceb 	bl	80017f0 <util_encode_i32>

	*resp_len = TRANSACTION_SENS_LEN;
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	221c      	movs	r2, #28
 8001e1e:	801a      	strh	r2, [r3, #0]

}
 8001e20:	bf00      	nop
 8001e22:	3738      	adds	r7, #56	; 0x38
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <debug_feedback_write>:

static void debug_feedback_write(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08a      	sub	sp, #40	; 0x28
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	607a      	str	r2, [r7, #4]
 8001e32:	603b      	str	r3, [r7, #0]
 8001e34:	460b      	mov	r3, r1
 8001e36:	817b      	strh	r3, [r7, #10]
	if(data_len == TRANSACTION_FEEDBACK_LEN) {
 8001e38:	897b      	ldrh	r3, [r7, #10]
 8001e3a:	2b04      	cmp	r3, #4
 8001e3c:	d120      	bne.n	8001e80 <debug_feedback_write+0x58>
		CM4_PAYLOAD_FEEDBACK_t feedback_data = {};
 8001e3e:	f107 0310 	add.w	r3, r7, #16
 8001e42:	2200      	movs	r2, #0
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	605a      	str	r2, [r3, #4]
 8001e48:	609a      	str	r2, [r3, #8]
 8001e4a:	60da      	str	r2, [r3, #12]
 8001e4c:	611a      	str	r2, [r3, #16]
 8001e4e:	615a      	str	r2, [r3, #20]
		feedback_data.cc_pressure = util_decode_u32(data);
 8001e50:	68f8      	ldr	r0, [r7, #12]
 8001e52:	f7ff fcee 	bl	8001832 <util_decode_u32>
 8001e56:	4603      	mov	r3, r0
 8001e58:	617b      	str	r3, [r7, #20]

		cm4_send_feedback(control_get_cm4(), &feedback_data);
 8001e5a:	f7ff fb7f 	bl	800155c <control_get_cm4>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	f107 0310 	add.w	r3, r7, #16
 8001e64:	4619      	mov	r1, r3
 8001e66:	4610      	mov	r0, r2
 8001e68:	f7ff f85a 	bl	8000f20 <cm4_send_feedback>

		resp[0] = OK_LO;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	22c5      	movs	r2, #197	; 0xc5
 8001e70:	701a      	strb	r2, [r3, #0]
		resp[1] = OK_HI;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	3301      	adds	r3, #1
 8001e76:	225c      	movs	r2, #92	; 0x5c
 8001e78:	701a      	strb	r2, [r3, #0]
		*resp_len = 2;
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	2202      	movs	r2, #2
 8001e7e:	801a      	strh	r2, [r3, #0]
	}
}
 8001e80:	bf00      	nop
 8001e82:	3728      	adds	r7, #40	; 0x28
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <led_init>:

/**********************
 *	DECLARATIONS
 **********************/

void led_init(void) {
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
	LED_TIM.Instance->ARR = LED_MAX;
 8001e8c:	4b0f      	ldr	r3, [pc, #60]	; (8001ecc <led_init+0x44>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001e94:	62da      	str	r2, [r3, #44]	; 0x2c
	LED_TIM.Instance->CCR1 = 0;
 8001e96:	4b0d      	ldr	r3, [pc, #52]	; (8001ecc <led_init+0x44>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	635a      	str	r2, [r3, #52]	; 0x34
	LED_TIM.Instance->CCR2 = 0;
 8001e9e:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <led_init+0x44>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	639a      	str	r2, [r3, #56]	; 0x38
	LED_TIM.Instance->CCR3 = 0;
 8001ea6:	4b09      	ldr	r3, [pc, #36]	; (8001ecc <led_init+0x44>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIMEx_PWMN_Start(&LED_TIM, TIM_CHANNEL_1);
 8001eae:	2100      	movs	r1, #0
 8001eb0:	4806      	ldr	r0, [pc, #24]	; (8001ecc <led_init+0x44>)
 8001eb2:	f006 fb0d 	bl	80084d0 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&LED_TIM, TIM_CHANNEL_2);
 8001eb6:	2104      	movs	r1, #4
 8001eb8:	4804      	ldr	r0, [pc, #16]	; (8001ecc <led_init+0x44>)
 8001eba:	f006 fb09 	bl	80084d0 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&LED_TIM, TIM_CHANNEL_3);
 8001ebe:	2108      	movs	r1, #8
 8001ec0:	4802      	ldr	r0, [pc, #8]	; (8001ecc <led_init+0x44>)
 8001ec2:	f006 fb05 	bl	80084d0 <HAL_TIMEx_PWMN_Start>
}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	20007cf4 	.word	0x20007cf4

08001ed0 <led_set_color>:

void led_set_color(uint8_t r, uint8_t g, uint8_t b) {
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	71fb      	strb	r3, [r7, #7]
 8001eda:	460b      	mov	r3, r1
 8001edc:	71bb      	strb	r3, [r7, #6]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	717b      	strb	r3, [r7, #5]
	LED_TIM.Instance->CCR1 = r;
 8001ee2:	4b09      	ldr	r3, [pc, #36]	; (8001f08 <led_set_color+0x38>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	79fa      	ldrb	r2, [r7, #7]
 8001ee8:	635a      	str	r2, [r3, #52]	; 0x34
	LED_TIM.Instance->CCR2 = g;
 8001eea:	4b07      	ldr	r3, [pc, #28]	; (8001f08 <led_set_color+0x38>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	79ba      	ldrb	r2, [r7, #6]
 8001ef0:	639a      	str	r2, [r3, #56]	; 0x38
	LED_TIM.Instance->CCR3 = b;
 8001ef2:	4b05      	ldr	r3, [pc, #20]	; (8001f08 <led_set_color+0x38>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	797a      	ldrb	r2, [r7, #5]
 8001ef8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001efa:	bf00      	nop
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	20007cf4 	.word	0x20007cf4

08001f0c <led_toggle>:

void led_toggle(void) {
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
	static uint8_t state = 0;

	if(state) {
 8001f10:	4b0d      	ldr	r3, [pc, #52]	; (8001f48 <led_toggle+0x3c>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d003      	beq.n	8001f20 <led_toggle+0x14>
		LED_PORT->BSRR = LED_PIN;
 8001f18:	4b0c      	ldr	r3, [pc, #48]	; (8001f4c <led_toggle+0x40>)
 8001f1a:	2202      	movs	r2, #2
 8001f1c:	619a      	str	r2, [r3, #24]
 8001f1e:	e003      	b.n	8001f28 <led_toggle+0x1c>
	} else {
		LED_PORT->BSRR = LED_PIN << 16;
 8001f20:	4b0a      	ldr	r3, [pc, #40]	; (8001f4c <led_toggle+0x40>)
 8001f22:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f26:	619a      	str	r2, [r3, #24]
	}

	state = !state;
 8001f28:	4b07      	ldr	r3, [pc, #28]	; (8001f48 <led_toggle+0x3c>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	bf0c      	ite	eq
 8001f30:	2301      	moveq	r3, #1
 8001f32:	2300      	movne	r3, #0
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	461a      	mov	r2, r3
 8001f38:	4b03      	ldr	r3, [pc, #12]	; (8001f48 <led_toggle+0x3c>)
 8001f3a:	701a      	strb	r2, [r3, #0]
}
 8001f3c:	bf00      	nop
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	20001a28 	.word	0x20001a28
 8001f4c:	40020800 	.word	0x40020800

08001f50 <calc_field_CRC>:

/**********************
 *	DECLARATIONS
 **********************/

uint16_t calc_field_CRC(uint16_t *p_data_array, uint16_t length) {
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	460b      	mov	r3, r1
 8001f5a:	807b      	strh	r3, [r7, #2]
	uint16_t shifter, c;
	uint16_t carry;
	uint16_t crc = 0;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	81bb      	strh	r3, [r7, #12]
	while (length--) {
 8001f60:	e028      	b.n	8001fb4 <calc_field_CRC+0x64>
		shifter = 0x8000;
 8001f62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f66:	81fb      	strh	r3, [r7, #14]
		c = *p_data_array++;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	1c9a      	adds	r2, r3, #2
 8001f6c:	607a      	str	r2, [r7, #4]
 8001f6e:	881b      	ldrh	r3, [r3, #0]
 8001f70:	817b      	strh	r3, [r7, #10]
		do {
			carry = crc & 0x8000;
 8001f72:	89bb      	ldrh	r3, [r7, #12]
 8001f74:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001f78:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001f7c:	813b      	strh	r3, [r7, #8]
			crc <<= 1;
 8001f7e:	89bb      	ldrh	r3, [r7, #12]
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	81bb      	strh	r3, [r7, #12]
			if (c & shifter) crc++;
 8001f84:	897a      	ldrh	r2, [r7, #10]
 8001f86:	89fb      	ldrh	r3, [r7, #14]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d002      	beq.n	8001f96 <calc_field_CRC+0x46>
 8001f90:	89bb      	ldrh	r3, [r7, #12]
 8001f92:	3301      	adds	r3, #1
 8001f94:	81bb      	strh	r3, [r7, #12]
			if (carry) crc ^= 0x1021;
 8001f96:	893b      	ldrh	r3, [r7, #8]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d005      	beq.n	8001fa8 <calc_field_CRC+0x58>
 8001f9c:	89bb      	ldrh	r3, [r7, #12]
 8001f9e:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8001fa2:	f083 0301 	eor.w	r3, r3, #1
 8001fa6:	81bb      	strh	r3, [r7, #12]
			shifter >>= 1;
 8001fa8:	89fb      	ldrh	r3, [r7, #14]
 8001faa:	085b      	lsrs	r3, r3, #1
 8001fac:	81fb      	strh	r3, [r7, #14]

		} while (shifter);
 8001fae:	89fb      	ldrh	r3, [r7, #14]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d1de      	bne.n	8001f72 <calc_field_CRC+0x22>
	while (length--) {
 8001fb4:	887b      	ldrh	r3, [r7, #2]
 8001fb6:	1e5a      	subs	r2, r3, #1
 8001fb8:	807a      	strh	r2, [r7, #2]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1d1      	bne.n	8001f62 <calc_field_CRC+0x12>

	}
	return crc;
 8001fbe:	89bb      	ldrh	r3, [r7, #12]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3714      	adds	r7, #20
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <msv2_init>:

void msv2_init(MSV2_INST_t * msv2) {
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
	static uint32_t id_counter = 0;
	msv2->id = id_counter++;
 8001fd4:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <msv2_init+0x24>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	1c5a      	adds	r2, r3, #1
 8001fda:	4905      	ldr	r1, [pc, #20]	; (8001ff0 <msv2_init+0x24>)
 8001fdc:	600a      	str	r2, [r1, #0]
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	6013      	str	r3, [r2, #0]
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	20001a2c 	.word	0x20001a2c

08001ff4 <msv2_create_frame>:

uint16_t msv2_create_frame(MSV2_INST_t * msv2, uint8_t opcode, uint8_t data_len, uint8_t * data) {
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	607b      	str	r3, [r7, #4]
 8001ffe:	460b      	mov	r3, r1
 8002000:	72fb      	strb	r3, [r7, #11]
 8002002:	4613      	mov	r3, r2
 8002004:	72bb      	strb	r3, [r7, #10]
	uint16_t array_len = data_len+2; //we add 1 for the opcode and len fields and 1 for the crc
 8002006:	7abb      	ldrb	r3, [r7, #10]
 8002008:	b29b      	uxth	r3, r3
 800200a:	3302      	adds	r3, #2
 800200c:	827b      	strh	r3, [r7, #18]
	msv2->tx.data_len = data_len;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	7aba      	ldrb	r2, [r7, #10]
 8002012:	f883 280f 	strb.w	r2, [r3, #2063]	; 0x80f
	msv2->tx.opcode = opcode;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	7afa      	ldrb	r2, [r7, #11]
 800201a:	f883 280e 	strb.w	r2, [r3, #2062]	; 0x80e
	msv2->tx.data[0] = DLE;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2290      	movs	r2, #144	; 0x90
 8002022:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
	msv2->tx.data[1] = STX;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2202      	movs	r2, #2
 800202a:	f883 2813 	strb.w	r2, [r3, #2067]	; 0x813
	msv2->tx.data[2] = opcode;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	7afa      	ldrb	r2, [r7, #11]
 8002032:	f883 2814 	strb.w	r2, [r3, #2068]	; 0x814
	msv2->tx.data[3] = data_len;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	7aba      	ldrb	r2, [r7, #10]
 800203a:	f883 2815 	strb.w	r2, [r3, #2069]	; 0x815
	msv2->tx.crc_data[0] = (data_len<<8) | opcode;  //header bytes inverted
 800203e:	7abb      	ldrb	r3, [r7, #10]
 8002040:	021b      	lsls	r3, r3, #8
 8002042:	b21a      	sxth	r2, r3
 8002044:	7afb      	ldrb	r3, [r7, #11]
 8002046:	b21b      	sxth	r3, r3
 8002048:	4313      	orrs	r3, r2
 800204a:	b21b      	sxth	r3, r3
 800204c:	b29a      	uxth	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f8a3 2c12 	strh.w	r2, [r3, #3090]	; 0xc12
	uint16_t counter=4;
 8002054:	2304      	movs	r3, #4
 8002056:	82fb      	strh	r3, [r7, #22]
	for(uint16_t i = 0; i < data_len; i++) {
 8002058:	2300      	movs	r3, #0
 800205a:	82bb      	strh	r3, [r7, #20]
 800205c:	e05b      	b.n	8002116 <msv2_create_frame+0x122>
		msv2->tx.data[counter++] = data[2*i]; //bytes in data need to be inverted before
 800205e:	8abb      	ldrh	r3, [r7, #20]
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	461a      	mov	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	441a      	add	r2, r3
 8002068:	8afb      	ldrh	r3, [r7, #22]
 800206a:	1c59      	adds	r1, r3, #1
 800206c:	82f9      	strh	r1, [r7, #22]
 800206e:	4619      	mov	r1, r3
 8002070:	7812      	ldrb	r2, [r2, #0]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	440b      	add	r3, r1
 8002076:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
		if(msv2->tx.data[counter-1] == DLE) {
 800207a:	8afb      	ldrh	r3, [r7, #22]
 800207c:	3b01      	subs	r3, #1
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	4413      	add	r3, r2
 8002082:	f893 3812 	ldrb.w	r3, [r3, #2066]	; 0x812
 8002086:	2b90      	cmp	r3, #144	; 0x90
 8002088:	d108      	bne.n	800209c <msv2_create_frame+0xa8>
			msv2->tx.data[counter++] = DLE;
 800208a:	8afb      	ldrh	r3, [r7, #22]
 800208c:	1c5a      	adds	r2, r3, #1
 800208e:	82fa      	strh	r2, [r7, #22]
 8002090:	461a      	mov	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	4413      	add	r3, r2
 8002096:	2290      	movs	r2, #144	; 0x90
 8002098:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
		}
		msv2->tx.data[counter++] = data[2*i+1];
 800209c:	8abb      	ldrh	r3, [r7, #20]
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	3301      	adds	r3, #1
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	441a      	add	r2, r3
 80020a6:	8afb      	ldrh	r3, [r7, #22]
 80020a8:	1c59      	adds	r1, r3, #1
 80020aa:	82f9      	strh	r1, [r7, #22]
 80020ac:	4619      	mov	r1, r3
 80020ae:	7812      	ldrb	r2, [r2, #0]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	440b      	add	r3, r1
 80020b4:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
		if(msv2->tx.data[counter-1] == DLE) {
 80020b8:	8afb      	ldrh	r3, [r7, #22]
 80020ba:	3b01      	subs	r3, #1
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	4413      	add	r3, r2
 80020c0:	f893 3812 	ldrb.w	r3, [r3, #2066]	; 0x812
 80020c4:	2b90      	cmp	r3, #144	; 0x90
 80020c6:	d108      	bne.n	80020da <msv2_create_frame+0xe6>
			msv2->tx.data[counter++] = DLE;
 80020c8:	8afb      	ldrh	r3, [r7, #22]
 80020ca:	1c5a      	adds	r2, r3, #1
 80020cc:	82fa      	strh	r2, [r7, #22]
 80020ce:	461a      	mov	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	4413      	add	r3, r2
 80020d4:	2290      	movs	r2, #144	; 0x90
 80020d6:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
		}
		msv2->tx.crc_data[i+1] = (data[2*i+1]<<8) |  data[2*i];
 80020da:	8abb      	ldrh	r3, [r7, #20]
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	3301      	adds	r3, #1
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	4413      	add	r3, r2
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	021b      	lsls	r3, r3, #8
 80020e8:	b21a      	sxth	r2, r3
 80020ea:	8abb      	ldrh	r3, [r7, #20]
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	4619      	mov	r1, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	440b      	add	r3, r1
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	b21b      	sxth	r3, r3
 80020f8:	4313      	orrs	r3, r2
 80020fa:	b21a      	sxth	r2, r3
 80020fc:	8abb      	ldrh	r3, [r7, #20]
 80020fe:	3301      	adds	r3, #1
 8002100:	b291      	uxth	r1, r2
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	f203 6304 	addw	r3, r3, #1540	; 0x604
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	4413      	add	r3, r2
 800210c:	460a      	mov	r2, r1
 800210e:	815a      	strh	r2, [r3, #10]
	for(uint16_t i = 0; i < data_len; i++) {
 8002110:	8abb      	ldrh	r3, [r7, #20]
 8002112:	3301      	adds	r3, #1
 8002114:	82bb      	strh	r3, [r7, #20]
 8002116:	7abb      	ldrb	r3, [r7, #10]
 8002118:	b29b      	uxth	r3, r3
 800211a:	8aba      	ldrh	r2, [r7, #20]
 800211c:	429a      	cmp	r2, r3
 800211e:	d39e      	bcc.n	800205e <msv2_create_frame+0x6a>
	}
	msv2->tx.crc_data[array_len-1] = 0x0000;
 8002120:	8a7b      	ldrh	r3, [r7, #18]
 8002122:	3b01      	subs	r3, #1
 8002124:	68fa      	ldr	r2, [r7, #12]
 8002126:	f203 6304 	addw	r3, r3, #1540	; 0x604
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	4413      	add	r3, r2
 800212e:	2200      	movs	r2, #0
 8002130:	815a      	strh	r2, [r3, #10]
	uint16_t crc = calc_field_CRC(msv2->tx.crc_data, array_len);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f603 4312 	addw	r3, r3, #3090	; 0xc12
 8002138:	8a7a      	ldrh	r2, [r7, #18]
 800213a:	4611      	mov	r1, r2
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff ff07 	bl	8001f50 <calc_field_CRC>
 8002142:	4603      	mov	r3, r0
 8002144:	823b      	strh	r3, [r7, #16]
	msv2->tx.data[counter++] = crc&0xff; //crc bytes are inverted (LSB first) !!
 8002146:	8afb      	ldrh	r3, [r7, #22]
 8002148:	1c5a      	adds	r2, r3, #1
 800214a:	82fa      	strh	r2, [r7, #22]
 800214c:	4619      	mov	r1, r3
 800214e:	8a3b      	ldrh	r3, [r7, #16]
 8002150:	b2da      	uxtb	r2, r3
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	440b      	add	r3, r1
 8002156:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
	if(msv2->tx.data[counter-1] == DLE) {
 800215a:	8afb      	ldrh	r3, [r7, #22]
 800215c:	3b01      	subs	r3, #1
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	4413      	add	r3, r2
 8002162:	f893 3812 	ldrb.w	r3, [r3, #2066]	; 0x812
 8002166:	2b90      	cmp	r3, #144	; 0x90
 8002168:	d108      	bne.n	800217c <msv2_create_frame+0x188>
		msv2->tx.data[counter++] = DLE;
 800216a:	8afb      	ldrh	r3, [r7, #22]
 800216c:	1c5a      	adds	r2, r3, #1
 800216e:	82fa      	strh	r2, [r7, #22]
 8002170:	461a      	mov	r2, r3
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	4413      	add	r3, r2
 8002176:	2290      	movs	r2, #144	; 0x90
 8002178:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
	}
	msv2->tx.data[counter++] = crc>>8;
 800217c:	8a3b      	ldrh	r3, [r7, #16]
 800217e:	0a1b      	lsrs	r3, r3, #8
 8002180:	b29a      	uxth	r2, r3
 8002182:	8afb      	ldrh	r3, [r7, #22]
 8002184:	1c59      	adds	r1, r3, #1
 8002186:	82f9      	strh	r1, [r7, #22]
 8002188:	4619      	mov	r1, r3
 800218a:	b2d2      	uxtb	r2, r2
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	440b      	add	r3, r1
 8002190:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
	if(msv2->tx.data[counter-1] == DLE) {
 8002194:	8afb      	ldrh	r3, [r7, #22]
 8002196:	3b01      	subs	r3, #1
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	4413      	add	r3, r2
 800219c:	f893 3812 	ldrb.w	r3, [r3, #2066]	; 0x812
 80021a0:	2b90      	cmp	r3, #144	; 0x90
 80021a2:	d108      	bne.n	80021b6 <msv2_create_frame+0x1c2>
		msv2->tx.data[counter++] = DLE;
 80021a4:	8afb      	ldrh	r3, [r7, #22]
 80021a6:	1c5a      	adds	r2, r3, #1
 80021a8:	82fa      	strh	r2, [r7, #22]
 80021aa:	461a      	mov	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	4413      	add	r3, r2
 80021b0:	2290      	movs	r2, #144	; 0x90
 80021b2:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
	}
	return counter;
 80021b6:	8afb      	ldrh	r3, [r7, #22]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3718      	adds	r7, #24
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <msv2_decode_fragment>:

/*
 * 	d: received byte
 *
 */
MSV2_ERROR_t msv2_decode_fragment(MSV2_INST_t * msv2, uint8_t d) {
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	460b      	mov	r3, r1
 80021ca:	70fb      	strb	r3, [r7, #3]
    //if a DLE in data is followed by STX, we start again
    if (msv2->rx.escape == 1 && d == STX) {
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	7a5b      	ldrb	r3, [r3, #9]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d10a      	bne.n	80021ea <msv2_decode_fragment+0x2a>
 80021d4:	78fb      	ldrb	r3, [r7, #3]
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d107      	bne.n	80021ea <msv2_decode_fragment+0x2a>
    	msv2->rx.state = WAITING_OPCODE;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2202      	movs	r2, #2
 80021de:	721a      	strb	r2, [r3, #8]
    	msv2->rx.escape = 0;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	725a      	strb	r2, [r3, #9]
        return MSV2_PROGRESS;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e0da      	b.n	80023a0 <msv2_decode_fragment+0x1e0>
    }

    if (msv2->rx.state == WAITING_DLE && d == DLE) {
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	7a1b      	ldrb	r3, [r3, #8]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d107      	bne.n	8002202 <msv2_decode_fragment+0x42>
 80021f2:	78fb      	ldrb	r3, [r7, #3]
 80021f4:	2b90      	cmp	r3, #144	; 0x90
 80021f6:	d104      	bne.n	8002202 <msv2_decode_fragment+0x42>
    	msv2->rx.state = WAITING_STX;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	721a      	strb	r2, [r3, #8]
        return MSV2_PROGRESS;
 80021fe:	2301      	movs	r3, #1
 8002200:	e0ce      	b.n	80023a0 <msv2_decode_fragment+0x1e0>
    }
    //escape in case a DLE is in the data
    if (d == DLE && msv2->rx.escape == 0) {
 8002202:	78fb      	ldrb	r3, [r7, #3]
 8002204:	2b90      	cmp	r3, #144	; 0x90
 8002206:	d108      	bne.n	800221a <msv2_decode_fragment+0x5a>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	7a5b      	ldrb	r3, [r3, #9]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d104      	bne.n	800221a <msv2_decode_fragment+0x5a>
    	msv2->rx.escape = 1;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	725a      	strb	r2, [r3, #9]
        return MSV2_PROGRESS;
 8002216:	2301      	movs	r3, #1
 8002218:	e0c2      	b.n	80023a0 <msv2_decode_fragment+0x1e0>
    }
    //if it is doubled, it counts as data
    if (d == DLE && msv2->rx.escape == 1) {
 800221a:	78fb      	ldrb	r3, [r7, #3]
 800221c:	2b90      	cmp	r3, #144	; 0x90
 800221e:	d106      	bne.n	800222e <msv2_decode_fragment+0x6e>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	7a5b      	ldrb	r3, [r3, #9]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d102      	bne.n	800222e <msv2_decode_fragment+0x6e>
    	msv2->rx.escape = 0;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	725a      	strb	r2, [r3, #9]

    }

    if (msv2->rx.state == WAITING_STX && d == STX) {
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	7a1b      	ldrb	r3, [r3, #8]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d107      	bne.n	8002246 <msv2_decode_fragment+0x86>
 8002236:	78fb      	ldrb	r3, [r7, #3]
 8002238:	2b02      	cmp	r3, #2
 800223a:	d104      	bne.n	8002246 <msv2_decode_fragment+0x86>
    	msv2->rx.state = WAITING_OPCODE;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2202      	movs	r2, #2
 8002240:	721a      	strb	r2, [r3, #8]
        return MSV2_PROGRESS;
 8002242:	2301      	movs	r3, #1
 8002244:	e0ac      	b.n	80023a0 <msv2_decode_fragment+0x1e0>
    }

    if (msv2->rx.state == WAITING_OPCODE) {
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	7a1b      	ldrb	r3, [r3, #8]
 800224a:	2b02      	cmp	r3, #2
 800224c:	d107      	bne.n	800225e <msv2_decode_fragment+0x9e>
    	msv2->rx.opcode = d;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	78fa      	ldrb	r2, [r7, #3]
 8002252:	711a      	strb	r2, [r3, #4]
    	msv2->rx.state = WAITING_LEN;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2203      	movs	r2, #3
 8002258:	721a      	strb	r2, [r3, #8]
        return MSV2_PROGRESS;
 800225a:	2301      	movs	r3, #1
 800225c:	e0a0      	b.n	80023a0 <msv2_decode_fragment+0x1e0>
    }

    if (msv2->rx.state == WAITING_LEN) {
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	7a1b      	ldrb	r3, [r3, #8]
 8002262:	2b03      	cmp	r3, #3
 8002264:	d11d      	bne.n	80022a2 <msv2_decode_fragment+0xe2>
    	msv2->rx.data_len = d; //legth in words
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	78fa      	ldrb	r2, [r7, #3]
 800226a:	715a      	strb	r2, [r3, #5]
    	msv2->rx.length = 2*d; //length in bytes
 800226c:	78fb      	ldrb	r3, [r7, #3]
 800226e:	b29b      	uxth	r3, r3
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	b29a      	uxth	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	815a      	strh	r2, [r3, #10]
    	msv2->rx.crc_data[0] = (msv2->rx.data_len<<8) | msv2->rx.opcode;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	795b      	ldrb	r3, [r3, #5]
 800227c:	021b      	lsls	r3, r3, #8
 800227e:	b21a      	sxth	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	791b      	ldrb	r3, [r3, #4]
 8002284:	b21b      	sxth	r3, r3
 8002286:	4313      	orrs	r3, r2
 8002288:	b21b      	sxth	r3, r3
 800228a:	b29a      	uxth	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
    	msv2->rx.counter = 0;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	819a      	strh	r2, [r3, #12]
    	msv2->rx.state = WAITING_DATA;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2204      	movs	r2, #4
 800229c:	721a      	strb	r2, [r3, #8]
        return MSV2_PROGRESS;
 800229e:	2301      	movs	r3, #1
 80022a0:	e07e      	b.n	80023a0 <msv2_decode_fragment+0x1e0>
    }

    if (msv2->rx.state == WAITING_DATA) {
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	7a1b      	ldrb	r3, [r3, #8]
 80022a6:	2b04      	cmp	r3, #4
 80022a8:	d136      	bne.n	8002318 <msv2_decode_fragment+0x158>
    	msv2->rx.data[msv2->rx.counter] = d;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	899b      	ldrh	r3, [r3, #12]
 80022ae:	461a      	mov	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4413      	add	r3, r2
 80022b4:	78fa      	ldrb	r2, [r7, #3]
 80022b6:	739a      	strb	r2, [r3, #14]
    	if(msv2->rx.counter & 0x01) { //LSB == '1'
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	899b      	ldrh	r3, [r3, #12]
 80022bc:	f003 0301 	and.w	r3, r3, #1
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d018      	beq.n	80022f6 <msv2_decode_fragment+0x136>
    		msv2->rx.crc_data[msv2->rx.counter/2 + 1] = (msv2->rx.data[msv2->rx.counter - 1]) |  d<<8;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	899b      	ldrh	r3, [r3, #12]
 80022c8:	3b01      	subs	r3, #1
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	4413      	add	r3, r2
 80022ce:	7b9b      	ldrb	r3, [r3, #14]
 80022d0:	b21a      	sxth	r2, r3
 80022d2:	78fb      	ldrb	r3, [r7, #3]
 80022d4:	021b      	lsls	r3, r3, #8
 80022d6:	b21b      	sxth	r3, r3
 80022d8:	4313      	orrs	r3, r2
 80022da:	b21a      	sxth	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	899b      	ldrh	r3, [r3, #12]
 80022e0:	085b      	lsrs	r3, r3, #1
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	3301      	adds	r3, #1
 80022e6:	b291      	uxth	r1, r2
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	4413      	add	r3, r2
 80022f2:	460a      	mov	r2, r1
 80022f4:	80da      	strh	r2, [r3, #6]
    	}
    	msv2->rx.counter += 1;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	899b      	ldrh	r3, [r3, #12]
 80022fa:	3301      	adds	r3, #1
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	819a      	strh	r2, [r3, #12]
        //the length  is in WORDS, but we read BYTES
        if (msv2->rx.counter==msv2->rx.length) {
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	899a      	ldrh	r2, [r3, #12]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	895b      	ldrh	r3, [r3, #10]
 800230a:	429a      	cmp	r2, r3
 800230c:	d102      	bne.n	8002314 <msv2_decode_fragment+0x154>
        	msv2->rx.state = WAITING_CRC1;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2205      	movs	r2, #5
 8002312:	721a      	strb	r2, [r3, #8]
        }
        return MSV2_PROGRESS;
 8002314:	2301      	movs	r3, #1
 8002316:	e043      	b.n	80023a0 <msv2_decode_fragment+0x1e0>
    }

    if (msv2->rx.state == WAITING_CRC1) {
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	7a1b      	ldrb	r3, [r3, #8]
 800231c:	2b05      	cmp	r3, #5
 800231e:	d108      	bne.n	8002332 <msv2_decode_fragment+0x172>
    	msv2->rx.crc = d;
 8002320:	78fb      	ldrb	r3, [r7, #3]
 8002322:	b29a      	uxth	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	80da      	strh	r2, [r3, #6]
    	msv2->rx.state = WAITING_CRC2;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2206      	movs	r2, #6
 800232c:	721a      	strb	r2, [r3, #8]
        return MSV2_PROGRESS;
 800232e:	2301      	movs	r3, #1
 8002330:	e036      	b.n	80023a0 <msv2_decode_fragment+0x1e0>

    }

    if (msv2->rx.state == WAITING_CRC2) {
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	7a1b      	ldrb	r3, [r3, #8]
 8002336:	2b06      	cmp	r3, #6
 8002338:	d12e      	bne.n	8002398 <msv2_decode_fragment+0x1d8>
    	msv2->rx.crc |= d<<8;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	88db      	ldrh	r3, [r3, #6]
 800233e:	b21a      	sxth	r2, r3
 8002340:	78fb      	ldrb	r3, [r7, #3]
 8002342:	021b      	lsls	r3, r3, #8
 8002344:	b21b      	sxth	r3, r3
 8002346:	4313      	orrs	r3, r2
 8002348:	b21b      	sxth	r3, r3
 800234a:	b29a      	uxth	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	80da      	strh	r2, [r3, #6]
    	msv2->rx.state = WAITING_DLE;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	721a      	strb	r2, [r3, #8]
    	msv2->rx.crc_data[msv2->rx.data_len+1] = 0;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	795b      	ldrb	r3, [r3, #5]
 800235a:	3301      	adds	r3, #1
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	4413      	add	r3, r2
 8002366:	2200      	movs	r2, #0
 8002368:	80da      	strh	r2, [r3, #6]
    	uint16_t crc = calc_field_CRC(msv2->rx.crc_data, msv2->rx.data_len+2);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f203 420e 	addw	r2, r3, #1038	; 0x40e
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	795b      	ldrb	r3, [r3, #5]
 8002374:	b29b      	uxth	r3, r3
 8002376:	3302      	adds	r3, #2
 8002378:	b29b      	uxth	r3, r3
 800237a:	4619      	mov	r1, r3
 800237c:	4610      	mov	r0, r2
 800237e:	f7ff fde7 	bl	8001f50 <calc_field_CRC>
 8002382:	4603      	mov	r3, r0
 8002384:	81fb      	strh	r3, [r7, #14]
    	if(msv2->rx.crc == crc) {
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	88db      	ldrh	r3, [r3, #6]
 800238a:	89fa      	ldrh	r2, [r7, #14]
 800238c:	429a      	cmp	r2, r3
 800238e:	d101      	bne.n	8002394 <msv2_decode_fragment+0x1d4>
    		return MSV2_SUCCESS;
 8002390:	2300      	movs	r3, #0
 8002392:	e005      	b.n	80023a0 <msv2_decode_fragment+0x1e0>
    	} else {
    		return MSV2_WRONG_CRC;
 8002394:	2302      	movs	r3, #2
 8002396:	e003      	b.n	80023a0 <msv2_decode_fragment+0x1e0>
    	}
    }
    msv2->rx.state=WAITING_DLE;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	721a      	strb	r2, [r3, #8]
    return MSV2_PROGRESS;
 800239e:	2301      	movs	r3, #1
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3710      	adds	r7, #16
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <msv2_tx_data>:

uint8_t * msv2_rx_data(MSV2_INST_t * msv2) {
	return msv2->rx.data;
}

uint8_t * msv2_tx_data(MSV2_INST_t * msv2) {
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
	return msv2->tx.data;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f603 0312 	addw	r3, r3, #2066	; 0x812
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
	...

080023c4 <pipeline_init>:
/**********************
 *	DECLARATIONS
 **********************/


void pipeline_init(CM4_INST_t * cm4) {
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
	pipeline.cm4 = cm4;
 80023cc:	4a06      	ldr	r2, [pc, #24]	; (80023e8 <pipeline_init+0x24>)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	pipeline.control_data.thrust = 2000;
 80023d4:	4b04      	ldr	r3, [pc, #16]	; (80023e8 <pipeline_init+0x24>)
 80023d6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80023da:	619a      	str	r2, [r3, #24]
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	20001a30 	.word	0x20001a30

080023ec <pipeline_thread>:

void pipeline_thread(void * arg) {
 80023ec:	b590      	push	{r4, r7, lr}
 80023ee:	b087      	sub	sp, #28
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6178      	str	r0, [r7, #20]

	static TickType_t last_wake_time;
	static const TickType_t period = pdMS_TO_TICKS(PIPELINE_HEART_BEAT);

	last_wake_time = xTaskGetTickCount();
 80023f4:	f008 fce4 	bl	800adc0 <xTaskGetTickCount>
 80023f8:	4603      	mov	r3, r0
 80023fa:	4a79      	ldr	r2, [pc, #484]	; (80025e0 <pipeline_thread+0x1f4>)
 80023fc:	6013      	str	r3, [r2, #0]

	while(pipeline.cm4 == NULL) {
 80023fe:	e002      	b.n	8002406 <pipeline_thread+0x1a>
		osDelay(1);
 8002400:	2001      	movs	r0, #1
 8002402:	f007 fc3f 	bl	8009c84 <osDelay>
	while(pipeline.cm4 == NULL) {
 8002406:	4b77      	ldr	r3, [pc, #476]	; (80025e4 <pipeline_thread+0x1f8>)
 8002408:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800240c:	2b00      	cmp	r3, #0
 800240e:	d0f7      	beq.n	8002400 <pipeline_thread+0x14>
	}

	for(;;) {

		//Receive all can messages
		while(can_msgPending()) {
 8002410:	e0d8      	b.n	80025c4 <pipeline_thread+0x1d8>
			pipeline.msg = can_readBuffer();
 8002412:	4c74      	ldr	r4, [pc, #464]	; (80025e4 <pipeline_thread+0x1f8>)
 8002414:	463b      	mov	r3, r7
 8002416:	4618      	mov	r0, r3
 8002418:	f7fe f988 	bl	800072c <can_readBuffer>
 800241c:	463b      	mov	r3, r7
 800241e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002420:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


			if(pipeline.msg.id == DATA_ID_ALTITUDE){
 8002424:	4b6f      	ldr	r3, [pc, #444]	; (80025e4 <pipeline_thread+0x1f8>)
 8002426:	791b      	ldrb	r3, [r3, #4]
 8002428:	2b31      	cmp	r3, #49	; 0x31
 800242a:	d10e      	bne.n	800244a <pipeline_thread+0x5e>
				pipeline.sensors_data.alti = (int32_t) pipeline.msg.data;
 800242c:	4b6d      	ldr	r3, [pc, #436]	; (80025e4 <pipeline_thread+0x1f8>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	461a      	mov	r2, r3
 8002432:	4b6c      	ldr	r3, [pc, #432]	; (80025e4 <pipeline_thread+0x1f8>)
 8002434:	66da      	str	r2, [r3, #108]	; 0x6c
				pipeline.sensors_flags |= PIPELINE_SENSORS_ALTI;
 8002436:	4b6b      	ldr	r3, [pc, #428]	; (80025e4 <pipeline_thread+0x1f8>)
 8002438:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800243c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002440:	b2da      	uxtb	r2, r3
 8002442:	4b68      	ldr	r3, [pc, #416]	; (80025e4 <pipeline_thread+0x1f8>)
 8002444:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8002448:	e09c      	b.n	8002584 <pipeline_thread+0x198>

			} else if(pipeline.msg.id == DATA_ID_ACCELERATION_X) {
 800244a:	4b66      	ldr	r3, [pc, #408]	; (80025e4 <pipeline_thread+0x1f8>)
 800244c:	791b      	ldrb	r3, [r3, #4]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d10e      	bne.n	8002470 <pipeline_thread+0x84>
				pipeline.sensors_data.acc_x = (int32_t) pipeline.msg.data;
 8002452:	4b64      	ldr	r3, [pc, #400]	; (80025e4 <pipeline_thread+0x1f8>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	461a      	mov	r2, r3
 8002458:	4b62      	ldr	r3, [pc, #392]	; (80025e4 <pipeline_thread+0x1f8>)
 800245a:	651a      	str	r2, [r3, #80]	; 0x50
				pipeline.sensors_flags |= PIPELINE_SENSORS_ACC_X;
 800245c:	4b61      	ldr	r3, [pc, #388]	; (80025e4 <pipeline_thread+0x1f8>)
 800245e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002462:	f043 0301 	orr.w	r3, r3, #1
 8002466:	b2da      	uxtb	r2, r3
 8002468:	4b5e      	ldr	r3, [pc, #376]	; (80025e4 <pipeline_thread+0x1f8>)
 800246a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800246e:	e089      	b.n	8002584 <pipeline_thread+0x198>

			} else if(pipeline.msg.id == DATA_ID_ACCELERATION_Y) {
 8002470:	4b5c      	ldr	r3, [pc, #368]	; (80025e4 <pipeline_thread+0x1f8>)
 8002472:	791b      	ldrb	r3, [r3, #4]
 8002474:	2b02      	cmp	r3, #2
 8002476:	d10e      	bne.n	8002496 <pipeline_thread+0xaa>
				pipeline.sensors_data.acc_y = (int32_t) pipeline.msg.data;
 8002478:	4b5a      	ldr	r3, [pc, #360]	; (80025e4 <pipeline_thread+0x1f8>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	461a      	mov	r2, r3
 800247e:	4b59      	ldr	r3, [pc, #356]	; (80025e4 <pipeline_thread+0x1f8>)
 8002480:	655a      	str	r2, [r3, #84]	; 0x54
				pipeline.sensors_flags |= PIPELINE_SENSORS_ACC_Y;
 8002482:	4b58      	ldr	r3, [pc, #352]	; (80025e4 <pipeline_thread+0x1f8>)
 8002484:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002488:	f043 0302 	orr.w	r3, r3, #2
 800248c:	b2da      	uxtb	r2, r3
 800248e:	4b55      	ldr	r3, [pc, #340]	; (80025e4 <pipeline_thread+0x1f8>)
 8002490:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8002494:	e076      	b.n	8002584 <pipeline_thread+0x198>

			} else if(pipeline.msg.id == DATA_ID_ACCELERATION_Z) {
 8002496:	4b53      	ldr	r3, [pc, #332]	; (80025e4 <pipeline_thread+0x1f8>)
 8002498:	791b      	ldrb	r3, [r3, #4]
 800249a:	2b03      	cmp	r3, #3
 800249c:	d10e      	bne.n	80024bc <pipeline_thread+0xd0>
				pipeline.sensors_data.acc_z = (int32_t) pipeline.msg.data;
 800249e:	4b51      	ldr	r3, [pc, #324]	; (80025e4 <pipeline_thread+0x1f8>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	461a      	mov	r2, r3
 80024a4:	4b4f      	ldr	r3, [pc, #316]	; (80025e4 <pipeline_thread+0x1f8>)
 80024a6:	659a      	str	r2, [r3, #88]	; 0x58
				pipeline.sensors_flags |= PIPELINE_SENSORS_ACC_Z;
 80024a8:	4b4e      	ldr	r3, [pc, #312]	; (80025e4 <pipeline_thread+0x1f8>)
 80024aa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80024ae:	f043 0304 	orr.w	r3, r3, #4
 80024b2:	b2da      	uxtb	r2, r3
 80024b4:	4b4b      	ldr	r3, [pc, #300]	; (80025e4 <pipeline_thread+0x1f8>)
 80024b6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 80024ba:	e063      	b.n	8002584 <pipeline_thread+0x198>

			} else if(pipeline.msg.id == DATA_ID_GYRO_X) {
 80024bc:	4b49      	ldr	r3, [pc, #292]	; (80025e4 <pipeline_thread+0x1f8>)
 80024be:	791b      	ldrb	r3, [r3, #4]
 80024c0:	2b04      	cmp	r3, #4
 80024c2:	d10e      	bne.n	80024e2 <pipeline_thread+0xf6>
				pipeline.sensors_data.gyro_x = (int32_t) pipeline.msg.data;
 80024c4:	4b47      	ldr	r3, [pc, #284]	; (80025e4 <pipeline_thread+0x1f8>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	461a      	mov	r2, r3
 80024ca:	4b46      	ldr	r3, [pc, #280]	; (80025e4 <pipeline_thread+0x1f8>)
 80024cc:	65da      	str	r2, [r3, #92]	; 0x5c
				pipeline.sensors_flags |= PIPELINE_SENSORS_GYRO_X;
 80024ce:	4b45      	ldr	r3, [pc, #276]	; (80025e4 <pipeline_thread+0x1f8>)
 80024d0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80024d4:	f043 0308 	orr.w	r3, r3, #8
 80024d8:	b2da      	uxtb	r2, r3
 80024da:	4b42      	ldr	r3, [pc, #264]	; (80025e4 <pipeline_thread+0x1f8>)
 80024dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 80024e0:	e050      	b.n	8002584 <pipeline_thread+0x198>

			} else if(pipeline.msg.id == DATA_ID_GYRO_Y) {
 80024e2:	4b40      	ldr	r3, [pc, #256]	; (80025e4 <pipeline_thread+0x1f8>)
 80024e4:	791b      	ldrb	r3, [r3, #4]
 80024e6:	2b05      	cmp	r3, #5
 80024e8:	d10e      	bne.n	8002508 <pipeline_thread+0x11c>
				pipeline.sensors_data.gyro_y = (int32_t) pipeline.msg.data;
 80024ea:	4b3e      	ldr	r3, [pc, #248]	; (80025e4 <pipeline_thread+0x1f8>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	461a      	mov	r2, r3
 80024f0:	4b3c      	ldr	r3, [pc, #240]	; (80025e4 <pipeline_thread+0x1f8>)
 80024f2:	661a      	str	r2, [r3, #96]	; 0x60
				pipeline.sensors_flags |= PIPELINE_SENSORS_GYRO_Y;
 80024f4:	4b3b      	ldr	r3, [pc, #236]	; (80025e4 <pipeline_thread+0x1f8>)
 80024f6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80024fa:	f043 0310 	orr.w	r3, r3, #16
 80024fe:	b2da      	uxtb	r2, r3
 8002500:	4b38      	ldr	r3, [pc, #224]	; (80025e4 <pipeline_thread+0x1f8>)
 8002502:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8002506:	e03d      	b.n	8002584 <pipeline_thread+0x198>

			} else if(pipeline.msg.id == DATA_ID_GYRO_Z) {
 8002508:	4b36      	ldr	r3, [pc, #216]	; (80025e4 <pipeline_thread+0x1f8>)
 800250a:	791b      	ldrb	r3, [r3, #4]
 800250c:	2b06      	cmp	r3, #6
 800250e:	d10e      	bne.n	800252e <pipeline_thread+0x142>
				pipeline.sensors_data.gyro_z = (int32_t) pipeline.msg.data;
 8002510:	4b34      	ldr	r3, [pc, #208]	; (80025e4 <pipeline_thread+0x1f8>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	461a      	mov	r2, r3
 8002516:	4b33      	ldr	r3, [pc, #204]	; (80025e4 <pipeline_thread+0x1f8>)
 8002518:	665a      	str	r2, [r3, #100]	; 0x64
				pipeline.sensors_flags |= PIPELINE_SENSORS_GYRO_Z;
 800251a:	4b32      	ldr	r3, [pc, #200]	; (80025e4 <pipeline_thread+0x1f8>)
 800251c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002520:	f043 0320 	orr.w	r3, r3, #32
 8002524:	b2da      	uxtb	r2, r3
 8002526:	4b2f      	ldr	r3, [pc, #188]	; (80025e4 <pipeline_thread+0x1f8>)
 8002528:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800252c:	e02a      	b.n	8002584 <pipeline_thread+0x198>

			} else if(pipeline.msg.id == DATA_ID_PRESS_2) {
 800252e:	4b2d      	ldr	r3, [pc, #180]	; (80025e4 <pipeline_thread+0x1f8>)
 8002530:	791b      	ldrb	r3, [r3, #4]
 8002532:	2b56      	cmp	r3, #86	; 0x56
 8002534:	d10e      	bne.n	8002554 <pipeline_thread+0x168>
				pipeline.feedback_data.cc_pressure = (int32_t) pipeline.msg.data;
 8002536:	4b2b      	ldr	r3, [pc, #172]	; (80025e4 <pipeline_thread+0x1f8>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	461a      	mov	r2, r3
 800253c:	4b29      	ldr	r3, [pc, #164]	; (80025e4 <pipeline_thread+0x1f8>)
 800253e:	679a      	str	r2, [r3, #120]	; 0x78
				pipeline.feedback_flags |= PIPELINE_FEEDBACK_THRUST;
 8002540:	4b28      	ldr	r3, [pc, #160]	; (80025e4 <pipeline_thread+0x1f8>)
 8002542:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002546:	f043 0301 	orr.w	r3, r3, #1
 800254a:	b2da      	uxtb	r2, r3
 800254c:	4b25      	ldr	r3, [pc, #148]	; (80025e4 <pipeline_thread+0x1f8>)
 800254e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8002552:	e017      	b.n	8002584 <pipeline_thread+0x198>

			} else if(pipeline.msg.id == DATA_ID_TVC_COMMAND) {
 8002554:	4b23      	ldr	r3, [pc, #140]	; (80025e4 <pipeline_thread+0x1f8>)
 8002556:	791b      	ldrb	r3, [r3, #4]
 8002558:	2b64      	cmp	r3, #100	; 0x64
 800255a:	d113      	bne.n	8002584 <pipeline_thread+0x198>
				if(pipeline.msg.data == TVC_COMMAND_BOOT) {
 800255c:	4b21      	ldr	r3, [pc, #132]	; (80025e4 <pipeline_thread+0x1f8>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d102      	bne.n	800256a <pipeline_thread+0x17e>
					control_boot();
 8002564:	f7fe ff90 	bl	8001488 <control_boot>
 8002568:	e00c      	b.n	8002584 <pipeline_thread+0x198>
				} else if(pipeline.msg.data == TVC_COMMAND_SHUTDOWN) {
 800256a:	4b1e      	ldr	r3, [pc, #120]	; (80025e4 <pipeline_thread+0x1f8>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2b02      	cmp	r3, #2
 8002570:	d102      	bne.n	8002578 <pipeline_thread+0x18c>
					control_shutdown();
 8002572:	f7fe ff97 	bl	80014a4 <control_shutdown>
 8002576:	e005      	b.n	8002584 <pipeline_thread+0x198>
				} else if(pipeline.msg.data == TVC_COMMAND_ABORT) {
 8002578:	4b1a      	ldr	r3, [pc, #104]	; (80025e4 <pipeline_thread+0x1f8>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2b03      	cmp	r3, #3
 800257e:	d101      	bne.n	8002584 <pipeline_thread+0x198>
					control_abort();
 8002580:	f7fe ff9a 	bl	80014b8 <control_abort>
				}
			}



			if(pipeline.sensors_flags == PIPELINE_SENSORS_ALL) {
 8002584:	4b17      	ldr	r3, [pc, #92]	; (80025e4 <pipeline_thread+0x1f8>)
 8002586:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800258a:	2b7f      	cmp	r3, #127	; 0x7f
 800258c:	d10a      	bne.n	80025a4 <pipeline_thread+0x1b8>
				pipeline.sensors_flags = 0;
 800258e:	4b15      	ldr	r3, [pc, #84]	; (80025e4 <pipeline_thread+0x1f8>)
 8002590:	2200      	movs	r2, #0
 8002592:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
				cm4_send_sensors(pipeline.cm4, &pipeline.sensors_data);
 8002596:	4b13      	ldr	r3, [pc, #76]	; (80025e4 <pipeline_thread+0x1f8>)
 8002598:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800259c:	4912      	ldr	r1, [pc, #72]	; (80025e8 <pipeline_thread+0x1fc>)
 800259e:	4618      	mov	r0, r3
 80025a0:	f7fe fc50 	bl	8000e44 <cm4_send_sensors>
			}

			if(pipeline.feedback_flags == PIPELINE_FEEDBACK_ALL) {
 80025a4:	4b0f      	ldr	r3, [pc, #60]	; (80025e4 <pipeline_thread+0x1f8>)
 80025a6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d10a      	bne.n	80025c4 <pipeline_thread+0x1d8>
				pipeline.feedback_flags = 0;
 80025ae:	4b0d      	ldr	r3, [pc, #52]	; (80025e4 <pipeline_thread+0x1f8>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
				cm4_send_feedback(pipeline.cm4, &pipeline.feedback_data);
 80025b6:	4b0b      	ldr	r3, [pc, #44]	; (80025e4 <pipeline_thread+0x1f8>)
 80025b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025bc:	490b      	ldr	r1, [pc, #44]	; (80025ec <pipeline_thread+0x200>)
 80025be:	4618      	mov	r0, r3
 80025c0:	f7fe fcae 	bl	8000f20 <cm4_send_feedback>
		while(can_msgPending()) {
 80025c4:	f7fe f898 	bl	80006f8 <can_msgPending>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f47f af21 	bne.w	8002412 <pipeline_thread+0x26>
			}
		}
		vTaskDelayUntil( &last_wake_time, period );
 80025d0:	4b07      	ldr	r3, [pc, #28]	; (80025f0 <pipeline_thread+0x204>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4619      	mov	r1, r3
 80025d6:	4802      	ldr	r0, [pc, #8]	; (80025e0 <pipeline_thread+0x1f4>)
 80025d8:	f008 fa34 	bl	800aa44 <vTaskDelayUntil>
		while(can_msgPending()) {
 80025dc:	e7f2      	b.n	80025c4 <pipeline_thread+0x1d8>
 80025de:	bf00      	nop
 80025e0:	20001ac0 	.word	0x20001ac0
 80025e4:	20001a30 	.word	0x20001a30
 80025e8:	20001a7c 	.word	0x20001a7c
 80025ec:	20001aa4 	.word	0x20001aa4
 80025f0:	0800bd7c 	.word	0x0800bd7c

080025f4 <pipeline_send_control>:
	}
}



void pipeline_send_control(CM4_PAYLOAD_COMMAND_t * cmd) {
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
	can_setFrame((uint32_t) cmd->thrust, DATA_ID_THRUST_CMD, cmd->timestamp);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	4618      	mov	r0, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	461a      	mov	r2, r3
 8002608:	2165      	movs	r1, #101	; 0x65
 800260a:	f7fe f805 	bl	8000618 <can_setFrame>
	can_setFrame((uint32_t) cmd->dynamixel[0], DATA_ID_VANE_CMD_1, cmd->timestamp);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	4618      	mov	r0, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	461a      	mov	r2, r3
 800261a:	2166      	movs	r1, #102	; 0x66
 800261c:	f7fd fffc 	bl	8000618 <can_setFrame>
	can_setFrame((uint32_t) cmd->dynamixel[1], DATA_ID_VANE_CMD_2, cmd->timestamp);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	4618      	mov	r0, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	461a      	mov	r2, r3
 800262c:	2167      	movs	r1, #103	; 0x67
 800262e:	f7fd fff3 	bl	8000618 <can_setFrame>
	can_setFrame((uint32_t) cmd->dynamixel[2], DATA_ID_VANE_CMD_3, cmd->timestamp);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	4618      	mov	r0, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	461a      	mov	r2, r3
 800263e:	2168      	movs	r1, #104	; 0x68
 8002640:	f7fd ffea 	bl	8000618 <can_setFrame>
	can_setFrame((uint32_t) cmd->dynamixel[3], DATA_ID_VANE_CMD_4, cmd->timestamp);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	695b      	ldr	r3, [r3, #20]
 8002648:	4618      	mov	r0, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	461a      	mov	r2, r3
 8002650:	2169      	movs	r1, #105	; 0x69
 8002652:	f7fd ffe1 	bl	8000618 <can_setFrame>
	can_setFrame((uint32_t) cmd->position[0], DATA_ID_KALMAN_X, cmd->timestamp);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	4618      	mov	r0, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	461a      	mov	r2, r3
 8002662:	2128      	movs	r1, #40	; 0x28
 8002664:	f7fd ffd8 	bl	8000618 <can_setFrame>
	can_setFrame((uint32_t) cmd->speed[0], DATA_ID_KALMAN_VX, cmd->timestamp);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266c:	4618      	mov	r0, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	461a      	mov	r2, r3
 8002674:	212b      	movs	r1, #43	; 0x2b
 8002676:	f7fd ffcf 	bl	8000618 <can_setFrame>
	can_setFrame((uint32_t) cmd->position[1], DATA_ID_KALMAN_Y, cmd->timestamp);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	4618      	mov	r0, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	461a      	mov	r2, r3
 8002686:	2129      	movs	r1, #41	; 0x29
 8002688:	f7fd ffc6 	bl	8000618 <can_setFrame>
	can_setFrame((uint32_t) cmd->speed[1], DATA_ID_KALMAN_VY, cmd->timestamp);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002690:	4618      	mov	r0, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	461a      	mov	r2, r3
 8002698:	212c      	movs	r1, #44	; 0x2c
 800269a:	f7fd ffbd 	bl	8000618 <can_setFrame>
	can_setFrame((uint32_t) cmd->position[2], DATA_ID_KALMAN_Z, cmd->timestamp);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	4618      	mov	r0, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	461a      	mov	r2, r3
 80026aa:	212a      	movs	r1, #42	; 0x2a
 80026ac:	f7fd ffb4 	bl	8000618 <can_setFrame>
	can_setFrame((uint32_t) cmd->speed[2], DATA_ID_KALMAN_VZ, cmd->timestamp);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b4:	4618      	mov	r0, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	461a      	mov	r2, r3
 80026bc:	212d      	movs	r1, #45	; 0x2d
 80026be:	f7fd ffab 	bl	8000618 <can_setFrame>

}
 80026c2:	bf00      	nop
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <pipeline_send_heartbeat>:


void pipeline_send_heartbeat(CONTROL_STATE_t state, uint32_t time) {
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b082      	sub	sp, #8
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	4603      	mov	r3, r0
 80026d2:	6039      	str	r1, [r7, #0]
 80026d4:	71fb      	strb	r3, [r7, #7]
	can_setFrame((uint32_t) state, DATA_ID_TVC_HEARTBEAT, time);
 80026d6:	79fb      	ldrb	r3, [r7, #7]
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	216a      	movs	r1, #106	; 0x6a
 80026dc:	4618      	mov	r0, r3
 80026de:	f7fd ff9b 	bl	8000618 <can_setFrame>
}
 80026e2:	bf00      	nop
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <util_buffer_u8_init>:
static inline void util_buffer_u8_init(UTIL_BUFFER_U8_t * bfr, uint8_t * buffer, uint16_t bfr_len) {
 80026ea:	b480      	push	{r7}
 80026ec:	b085      	sub	sp, #20
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	60f8      	str	r0, [r7, #12]
 80026f2:	60b9      	str	r1, [r7, #8]
 80026f4:	4613      	mov	r3, r2
 80026f6:	80fb      	strh	r3, [r7, #6]
	bfr->c_ix = 0;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	801a      	strh	r2, [r3, #0]
	bfr->l_ix = 0;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	805a      	strh	r2, [r3, #2]
	bfr->bfr_len = bfr_len;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	88fa      	ldrh	r2, [r7, #6]
 8002708:	809a      	strh	r2, [r3, #4]
	bfr->buffer = buffer;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	68ba      	ldr	r2, [r7, #8]
 800270e:	609a      	str	r2, [r3, #8]
}
 8002710:	bf00      	nop
 8002712:	3714      	adds	r7, #20
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <util_buffer_u8_add>:
static inline void util_buffer_u8_add(UTIL_BUFFER_U8_t * bfr, uint8_t d) {
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	460b      	mov	r3, r1
 8002726:	70fb      	strb	r3, [r7, #3]
	bfr->buffer[bfr->c_ix++] = d;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	881b      	ldrh	r3, [r3, #0]
 8002730:	1c59      	adds	r1, r3, #1
 8002732:	b288      	uxth	r0, r1
 8002734:	6879      	ldr	r1, [r7, #4]
 8002736:	8008      	strh	r0, [r1, #0]
 8002738:	4413      	add	r3, r2
 800273a:	78fa      	ldrb	r2, [r7, #3]
 800273c:	701a      	strb	r2, [r3, #0]
	if(bfr->c_ix == bfr->bfr_len) bfr->c_ix = 0;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	881a      	ldrh	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	889b      	ldrh	r3, [r3, #4]
 8002746:	429a      	cmp	r2, r3
 8002748:	d102      	bne.n	8002750 <util_buffer_u8_add+0x34>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	801a      	strh	r2, [r3, #0]
}
 8002750:	bf00      	nop
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <util_buffer_u8_get>:
static inline uint8_t util_buffer_u8_get(UTIL_BUFFER_U8_t * bfr) {
 800275c:	b480      	push	{r7}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
	uint8_t tmp = bfr->buffer[bfr->l_ix++];
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	885b      	ldrh	r3, [r3, #2]
 800276c:	1c59      	adds	r1, r3, #1
 800276e:	b288      	uxth	r0, r1
 8002770:	6879      	ldr	r1, [r7, #4]
 8002772:	8048      	strh	r0, [r1, #2]
 8002774:	4413      	add	r3, r2
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	73fb      	strb	r3, [r7, #15]
	if(bfr->l_ix == bfr->bfr_len) bfr->l_ix=0;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	885a      	ldrh	r2, [r3, #2]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	889b      	ldrh	r3, [r3, #4]
 8002782:	429a      	cmp	r2, r3
 8002784:	d102      	bne.n	800278c <util_buffer_u8_get+0x30>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	805a      	strh	r2, [r3, #2]
	return tmp;
 800278c:	7bfb      	ldrb	r3, [r7, #15]
}
 800278e:	4618      	mov	r0, r3
 8002790:	3714      	adds	r7, #20
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr

0800279a <util_buffer_u8_isempty>:
static inline uint8_t util_buffer_u8_isempty(UTIL_BUFFER_U8_t * bfr) {
 800279a:	b480      	push	{r7}
 800279c:	b083      	sub	sp, #12
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
	return bfr->l_ix == bfr->c_ix;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	885a      	ldrh	r2, [r3, #2]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	881b      	ldrh	r3, [r3, #0]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	bf0c      	ite	eq
 80027ae:	2301      	moveq	r3, #1
 80027b0:	2300      	movne	r3, #0
 80027b2:	b2db      	uxtb	r3, r3
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <HAL_UART_RxCpltCallback>:

/*
 * UART RX ISR
 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80027c8:	2300      	movs	r3, #0
 80027ca:	60bb      	str	r3, [r7, #8]
	for(uint16_t i = 0; i < serial_devices_count; i++) {
 80027cc:	2300      	movs	r3, #0
 80027ce:	81fb      	strh	r3, [r7, #14]
 80027d0:	e025      	b.n	800281e <HAL_UART_RxCpltCallback+0x5e>
		if(serial_devices[i]->uart == huart) {
 80027d2:	89fb      	ldrh	r3, [r7, #14]
 80027d4:	4a1c      	ldr	r2, [pc, #112]	; (8002848 <HAL_UART_RxCpltCallback+0x88>)
 80027d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d11a      	bne.n	8002818 <HAL_UART_RxCpltCallback+0x58>
			util_buffer_u8_add(&serial_devices[i]->bfr, serial_devices[i]->dma_buffer);
 80027e2:	89fb      	ldrh	r3, [r7, #14]
 80027e4:	4a18      	ldr	r2, [pc, #96]	; (8002848 <HAL_UART_RxCpltCallback+0x88>)
 80027e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ea:	f103 0210 	add.w	r2, r3, #16
 80027ee:	89fb      	ldrh	r3, [r7, #14]
 80027f0:	4915      	ldr	r1, [pc, #84]	; (8002848 <HAL_UART_RxCpltCallback+0x88>)
 80027f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80027f6:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 80027fa:	4619      	mov	r1, r3
 80027fc:	4610      	mov	r0, r2
 80027fe:	f7ff ff8d 	bl	800271c <util_buffer_u8_add>
			xSemaphoreGiveFromISR( serial_rx_sem, &xHigherPriorityTaskWoken );
 8002802:	4b12      	ldr	r3, [pc, #72]	; (800284c <HAL_UART_RxCpltCallback+0x8c>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f107 0208 	add.w	r2, r7, #8
 800280a:	4611      	mov	r1, r2
 800280c:	4618      	mov	r0, r3
 800280e:	f007 fd2f 	bl	800a270 <xQueueGiveFromISR>
			if(i==2) {
 8002812:	89fb      	ldrh	r3, [r7, #14]
 8002814:	2b02      	cmp	r3, #2
				break;
			}
			break;
 8002816:	e007      	b.n	8002828 <HAL_UART_RxCpltCallback+0x68>
	for(uint16_t i = 0; i < serial_devices_count; i++) {
 8002818:	89fb      	ldrh	r3, [r7, #14]
 800281a:	3301      	adds	r3, #1
 800281c:	81fb      	strh	r3, [r7, #14]
 800281e:	4b0c      	ldr	r3, [pc, #48]	; (8002850 <HAL_UART_RxCpltCallback+0x90>)
 8002820:	881b      	ldrh	r3, [r3, #0]
 8002822:	89fa      	ldrh	r2, [r7, #14]
 8002824:	429a      	cmp	r2, r3
 8002826:	d3d4      	bcc.n	80027d2 <HAL_UART_RxCpltCallback+0x12>
		}
	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d007      	beq.n	800283e <HAL_UART_RxCpltCallback+0x7e>
 800282e:	4b09      	ldr	r3, [pc, #36]	; (8002854 <HAL_UART_RxCpltCallback+0x94>)
 8002830:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002834:	601a      	str	r2, [r3, #0]
 8002836:	f3bf 8f4f 	dsb	sy
 800283a:	f3bf 8f6f 	isb	sy
}
 800283e:	bf00      	nop
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	20001ac4 	.word	0x20001ac4
 800284c:	20001b08 	.word	0x20001b08
 8002850:	20001b04 	.word	0x20001b04
 8002854:	e000ed04 	.word	0xe000ed04

08002858 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef * lol = huart;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	60fb      	str	r3, [r7, #12]
}
 8002864:	bf00      	nop
 8002866:	3714      	adds	r7, #20
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <serial_global_init>:



void serial_global_init(void) {
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af02      	add	r7, sp, #8
	serial_rx_sem = xSemaphoreCreateBinaryStatic( &serial_rx_sem_buffer );
 8002876:	2303      	movs	r3, #3
 8002878:	9300      	str	r3, [sp, #0]
 800287a:	4b06      	ldr	r3, [pc, #24]	; (8002894 <serial_global_init+0x24>)
 800287c:	2200      	movs	r2, #0
 800287e:	2100      	movs	r1, #0
 8002880:	2001      	movs	r0, #1
 8002882:	f007 fb2f 	bl	8009ee4 <xQueueGenericCreateStatic>
 8002886:	4603      	mov	r3, r0
 8002888:	4a03      	ldr	r2, [pc, #12]	; (8002898 <serial_global_init+0x28>)
 800288a:	6013      	str	r3, [r2, #0]
}
 800288c:	bf00      	nop
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	20001b0c 	.word	0x20001b0c
 8002898:	20001b08 	.word	0x20001b08

0800289c <serial_init>:


void serial_init(SERIAL_INST_t * ser, UART_HandleTypeDef * uart, void * inst, SERIAL_RET_t (*decode_fcn)(void *, uint8_t)) {
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
 80028a8:	603b      	str	r3, [r7, #0]
	ser->id = serial_devices_count;
 80028aa:	4b1a      	ldr	r3, [pc, #104]	; (8002914 <serial_init+0x78>)
 80028ac:	881b      	ldrh	r3, [r3, #0]
 80028ae:	461a      	mov	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	601a      	str	r2, [r3, #0]
	ser->uart = uart;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	68ba      	ldr	r2, [r7, #8]
 80028b8:	605a      	str	r2, [r3, #4]
	ser->inst = inst;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	609a      	str	r2, [r3, #8]
	ser->decode_fcn = decode_fcn;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	683a      	ldr	r2, [r7, #0]
 80028c4:	60da      	str	r2, [r3, #12]
	util_buffer_u8_init(&ser->bfr, ser->buffer, SERIAL_FIFO_LEN);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f103 0010 	add.w	r0, r3, #16
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	331c      	adds	r3, #28
 80028d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028d4:	4619      	mov	r1, r3
 80028d6:	f7ff ff08 	bl	80026ea <util_buffer_u8_init>
	if(serial_devices_count < SERIAL_MAX_INST) {
 80028da:	4b0e      	ldr	r3, [pc, #56]	; (8002914 <serial_init+0x78>)
 80028dc:	881b      	ldrh	r3, [r3, #0]
 80028de:	2b0f      	cmp	r3, #15
 80028e0:	d80e      	bhi.n	8002900 <serial_init+0x64>
		HAL_UART_Receive_DMA(uart, &ser->dma_buffer, 1);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 80028e8:	2201      	movs	r2, #1
 80028ea:	4619      	mov	r1, r3
 80028ec:	68b8      	ldr	r0, [r7, #8]
 80028ee:	f006 f8bf 	bl	8008a70 <HAL_UART_Receive_DMA>
		serial_devices[serial_devices_count] = ser;
 80028f2:	4b08      	ldr	r3, [pc, #32]	; (8002914 <serial_init+0x78>)
 80028f4:	881b      	ldrh	r3, [r3, #0]
 80028f6:	4619      	mov	r1, r3
 80028f8:	4a07      	ldr	r2, [pc, #28]	; (8002918 <serial_init+0x7c>)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	}
	serial_devices_count++;
 8002900:	4b04      	ldr	r3, [pc, #16]	; (8002914 <serial_init+0x78>)
 8002902:	881b      	ldrh	r3, [r3, #0]
 8002904:	3301      	adds	r3, #1
 8002906:	b29a      	uxth	r2, r3
 8002908:	4b02      	ldr	r3, [pc, #8]	; (8002914 <serial_init+0x78>)
 800290a:	801a      	strh	r2, [r3, #0]
}
 800290c:	bf00      	nop
 800290e:	3710      	adds	r7, #16
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	20001b04 	.word	0x20001b04
 8002918:	20001ac4 	.word	0x20001ac4

0800291c <serial_send>:

void serial_send(SERIAL_INST_t * ser, uint8_t * data, uint16_t length) {
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	4613      	mov	r3, r2
 8002928:	80fb      	strh	r3, [r7, #6]
	HAL_UART_Transmit_DMA(ser->uart, data, length);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	88fa      	ldrh	r2, [r7, #6]
 8002930:	68b9      	ldr	r1, [r7, #8]
 8002932:	4618      	mov	r0, r3
 8002934:	f006 f830 	bl	8008998 <HAL_UART_Transmit_DMA>
	//HAL_UART_Transmit(ser->uart, data, length, 500);
}
 8002938:	bf00      	nop
 800293a:	3710      	adds	r7, #16
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <serial_garbage_clean>:

void serial_garbage_clean(SERIAL_INST_t * ser) {
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(ser->uart, &ser->dma_buffer, 1);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6858      	ldr	r0, [r3, #4]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8002952:	2201      	movs	r2, #1
 8002954:	4619      	mov	r1, r3
 8002956:	f006 f88b 	bl	8008a70 <HAL_UART_Receive_DMA>
}
 800295a:	bf00      	nop
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
	...

08002964 <serial_thread>:

void serial_thread(void * arg) {
 8002964:	b5b0      	push	{r4, r5, r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]

	serial_global_init();
 800296c:	f7ff ff80 	bl	8002870 <serial_global_init>

	for(;;) {
		if( xSemaphoreTake(serial_rx_sem, 0xffff) == pdTRUE ) {
 8002970:	4b1b      	ldr	r3, [pc, #108]	; (80029e0 <serial_thread+0x7c>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002978:	4618      	mov	r0, r3
 800297a:	f007 fd07 	bl	800a38c <xQueueSemaphoreTake>
 800297e:	4603      	mov	r3, r0
 8002980:	2b01      	cmp	r3, #1
 8002982:	d1f5      	bne.n	8002970 <serial_thread+0xc>
			for(uint16_t i = 0; i < serial_devices_count; i++) {
 8002984:	2300      	movs	r3, #0
 8002986:	81fb      	strh	r3, [r7, #14]
 8002988:	e023      	b.n	80029d2 <serial_thread+0x6e>
				while(!util_buffer_u8_isempty(&serial_devices[i]->bfr)) {
					serial_devices[i]->decode_fcn(serial_devices[i]->inst, util_buffer_u8_get(&serial_devices[i]->bfr));
 800298a:	89fb      	ldrh	r3, [r7, #14]
 800298c:	4a15      	ldr	r2, [pc, #84]	; (80029e4 <serial_thread+0x80>)
 800298e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002992:	68dc      	ldr	r4, [r3, #12]
 8002994:	89fb      	ldrh	r3, [r7, #14]
 8002996:	4a13      	ldr	r2, [pc, #76]	; (80029e4 <serial_thread+0x80>)
 8002998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800299c:	689d      	ldr	r5, [r3, #8]
 800299e:	89fb      	ldrh	r3, [r7, #14]
 80029a0:	4a10      	ldr	r2, [pc, #64]	; (80029e4 <serial_thread+0x80>)
 80029a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029a6:	3310      	adds	r3, #16
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7ff fed7 	bl	800275c <util_buffer_u8_get>
 80029ae:	4603      	mov	r3, r0
 80029b0:	4619      	mov	r1, r3
 80029b2:	4628      	mov	r0, r5
 80029b4:	47a0      	blx	r4
				while(!util_buffer_u8_isempty(&serial_devices[i]->bfr)) {
 80029b6:	89fb      	ldrh	r3, [r7, #14]
 80029b8:	4a0a      	ldr	r2, [pc, #40]	; (80029e4 <serial_thread+0x80>)
 80029ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029be:	3310      	adds	r3, #16
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff feea 	bl	800279a <util_buffer_u8_isempty>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d0de      	beq.n	800298a <serial_thread+0x26>
			for(uint16_t i = 0; i < serial_devices_count; i++) {
 80029cc:	89fb      	ldrh	r3, [r7, #14]
 80029ce:	3301      	adds	r3, #1
 80029d0:	81fb      	strh	r3, [r7, #14]
 80029d2:	4b05      	ldr	r3, [pc, #20]	; (80029e8 <serial_thread+0x84>)
 80029d4:	881b      	ldrh	r3, [r3, #0]
 80029d6:	89fa      	ldrh	r2, [r7, #14]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d3ec      	bcc.n	80029b6 <serial_thread+0x52>
		if( xSemaphoreTake(serial_rx_sem, 0xffff) == pdTRUE ) {
 80029dc:	e7c8      	b.n	8002970 <serial_thread+0xc>
 80029de:	bf00      	nop
 80029e0:	20001b08 	.word	0x20001b08
 80029e4:	20001ac4 	.word	0x20001ac4
 80029e8:	20001b04 	.word	0x20001b04

080029ec <storage_init>:

/**********************
 *	DECLARATIONS
 **********************/

void storage_init() {
 80029ec:	b5b0      	push	{r4, r5, r7, lr}
 80029ee:	b09c      	sub	sp, #112	; 0x70
 80029f0:	af02      	add	r7, sp, #8
	static STORAGE_HEADER_t header;
	flash_init();
 80029f2:	f006 ff14 	bl	800981e <flash_init>
	flash_read(HEADER_ADDR, (uint8_t *) &header, sizeof(STORAGE_HEADER_t));
 80029f6:	2210      	movs	r2, #16
 80029f8:	4936      	ldr	r1, [pc, #216]	; (8002ad4 <storage_init+0xe8>)
 80029fa:	2000      	movs	r0, #0
 80029fc:	f006 ff34 	bl	8009868 <flash_read>
	if(header.magic == MAGIC_NUMBER) {
 8002a00:	4b34      	ldr	r3, [pc, #208]	; (8002ad4 <storage_init+0xe8>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a34      	ldr	r2, [pc, #208]	; (8002ad8 <storage_init+0xec>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d149      	bne.n	8002a9e <storage_init+0xb2>
		used_subsectors = header.used;
 8002a0a:	4b32      	ldr	r3, [pc, #200]	; (8002ad4 <storage_init+0xe8>)
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	4a33      	ldr	r2, [pc, #204]	; (8002adc <storage_init+0xf0>)
 8002a10:	6013      	str	r3, [r2, #0]
		if(used_subsectors > 1) {
 8002a12:	4b32      	ldr	r3, [pc, #200]	; (8002adc <storage_init+0xf0>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d93d      	bls.n	8002a96 <storage_init+0xaa>
			STORAGE_DATA_t data = {0};
 8002a1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a1e:	2220      	movs	r2, #32
 8002a20:	2100      	movs	r1, #0
 8002a22:	4618      	mov	r0, r3
 8002a24:	f009 f96a 	bl	800bcfc <memset>
			STORAGE_DATA_t last_valid_data = {0};
 8002a28:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002a2c:	2220      	movs	r2, #32
 8002a2e:	2100      	movs	r1, #0
 8002a30:	4618      	mov	r0, r3
 8002a32:	f009 f963 	bl	800bcfc <memset>
			uint32_t count = (used_subsectors-2)*SAMPLES_PER_SS;
 8002a36:	4b29      	ldr	r3, [pc, #164]	; (8002adc <storage_init+0xf0>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	3b02      	subs	r3, #2
 8002a3c:	01db      	lsls	r3, r3, #7
 8002a3e:	667b      	str	r3, [r7, #100]	; 0x64
			data = read_data(count);
 8002a40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a44:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002a46:	4618      	mov	r0, r3
 8002a48:	f000 f878 	bl	8002b3c <read_data>
			while(data.sample_id == count){
 8002a4c:	e01a      	b.n	8002a84 <storage_init+0x98>
				last_valid_data = data;
 8002a4e:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8002a52:	f107 0524 	add.w	r5, r7, #36	; 0x24
 8002a56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a5a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002a5e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				data = read_data(++count);
 8002a62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a64:	3301      	adds	r3, #1
 8002a66:	667b      	str	r3, [r7, #100]	; 0x64
 8002a68:	463b      	mov	r3, r7
 8002a6a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f000 f865 	bl	8002b3c <read_data>
 8002a72:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8002a76:	463d      	mov	r5, r7
 8002a78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a7c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002a80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			while(data.sample_id == count){
 8002a84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a86:	461a      	mov	r2, r3
 8002a88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d0df      	beq.n	8002a4e <storage_init+0x62>
			}

			data_counter = count;
 8002a8e:	4a14      	ldr	r2, [pc, #80]	; (8002ae0 <storage_init+0xf4>)
 8002a90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a92:	6013      	str	r3, [r2, #0]
 8002a94:	e009      	b.n	8002aaa <storage_init+0xbe>
		} else {
			data_counter = 0;
 8002a96:	4b12      	ldr	r3, [pc, #72]	; (8002ae0 <storage_init+0xf4>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	e005      	b.n	8002aaa <storage_init+0xbe>
		}
	} else {
		write_header_used(1);
 8002a9e:	2001      	movs	r0, #1
 8002aa0:	f000 f828 	bl	8002af4 <write_header_used>
		data_counter = 0;
 8002aa4:	4b0e      	ldr	r3, [pc, #56]	; (8002ae0 <storage_init+0xf4>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	601a      	str	r2, [r3, #0]
	}
	record_active = 0;
 8002aaa:	4b0e      	ldr	r3, [pc, #56]	; (8002ae4 <storage_init+0xf8>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	701a      	strb	r2, [r3, #0]
	restart_required = 0;
 8002ab0:	4b0d      	ldr	r3, [pc, #52]	; (8002ae8 <storage_init+0xfc>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	701a      	strb	r2, [r3, #0]
	storage_sem = xSemaphoreCreateBinaryStatic(&storage_sem_buffer);
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	9300      	str	r3, [sp, #0]
 8002aba:	4b0c      	ldr	r3, [pc, #48]	; (8002aec <storage_init+0x100>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	2100      	movs	r1, #0
 8002ac0:	2001      	movs	r0, #1
 8002ac2:	f007 fa0f 	bl	8009ee4 <xQueueGenericCreateStatic>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	4a09      	ldr	r2, [pc, #36]	; (8002af0 <storage_init+0x104>)
 8002aca:	6013      	str	r3, [r2, #0]
}
 8002acc:	bf00      	nop
 8002ace:	3768      	adds	r7, #104	; 0x68
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bdb0      	pop	{r4, r5, r7, pc}
 8002ad4:	20001bb0 	.word	0x20001bb0
 8002ad8:	cbe0c5e6 	.word	0xcbe0c5e6
 8002adc:	20001b54 	.word	0x20001b54
 8002ae0:	20001b58 	.word	0x20001b58
 8002ae4:	20001b5c 	.word	0x20001b5c
 8002ae8:	20001b5d 	.word	0x20001b5d
 8002aec:	20001b68 	.word	0x20001b68
 8002af0:	20001b64 	.word	0x20001b64

08002af4 <write_header_used>:

}



static void write_header_used(uint32_t used) {
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
	static STORAGE_HEADER_t header;
	flash_read(HEADER_ADDR, (uint8_t *) &header, sizeof(STORAGE_HEADER_t));
 8002afc:	2210      	movs	r2, #16
 8002afe:	490c      	ldr	r1, [pc, #48]	; (8002b30 <write_header_used+0x3c>)
 8002b00:	2000      	movs	r0, #0
 8002b02:	f006 feb1 	bl	8009868 <flash_read>
	flash_erase_subsector(HEADER_ADDR);
 8002b06:	2000      	movs	r0, #0
 8002b08:	f006 ffa6 	bl	8009a58 <flash_erase_subsector>
	header.magic = MAGIC_NUMBER;
 8002b0c:	4b08      	ldr	r3, [pc, #32]	; (8002b30 <write_header_used+0x3c>)
 8002b0e:	4a09      	ldr	r2, [pc, #36]	; (8002b34 <write_header_used+0x40>)
 8002b10:	601a      	str	r2, [r3, #0]
	header.used = used;
 8002b12:	4a07      	ldr	r2, [pc, #28]	; (8002b30 <write_header_used+0x3c>)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6053      	str	r3, [r2, #4]
	flash_write(HEADER_ADDR, (uint8_t *) &header, sizeof(STORAGE_HEADER_t));
 8002b18:	2210      	movs	r2, #16
 8002b1a:	4905      	ldr	r1, [pc, #20]	; (8002b30 <write_header_used+0x3c>)
 8002b1c:	2000      	movs	r0, #0
 8002b1e:	f006 ff24 	bl	800996a <flash_write>
	used_subsectors = used;
 8002b22:	4a05      	ldr	r2, [pc, #20]	; (8002b38 <write_header_used+0x44>)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6013      	str	r3, [r2, #0]
}
 8002b28:	bf00      	nop
 8002b2a:	3708      	adds	r7, #8
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	20001bc0 	.word	0x20001bc0
 8002b34:	cbe0c5e6 	.word	0xcbe0c5e6
 8002b38:	20001b54 	.word	0x20001b54

08002b3c <read_data>:



static STORAGE_DATA_t read_data(uint32_t id) {
 8002b3c:	b5b0      	push	{r4, r5, r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
	static STORAGE_DATA_t data;
	flash_read(ADDRESS(id), (uint8_t *) &data, sizeof(STORAGE_DATA_t));
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	3380      	adds	r3, #128	; 0x80
 8002b4a:	015b      	lsls	r3, r3, #5
 8002b4c:	2220      	movs	r2, #32
 8002b4e:	4909      	ldr	r1, [pc, #36]	; (8002b74 <read_data+0x38>)
 8002b50:	4618      	mov	r0, r3
 8002b52:	f006 fe89 	bl	8009868 <flash_read>
	return data;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a06      	ldr	r2, [pc, #24]	; (8002b74 <read_data+0x38>)
 8002b5a:	461c      	mov	r4, r3
 8002b5c:	4615      	mov	r5, r2
 8002b5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b62:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002b66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bdb0      	pop	{r4, r5, r7, pc}
 8002b72:	bf00      	nop
 8002b74:	20001bd0 	.word	0x20001bd0

08002b78 <storage_get_used>:
		flash_erase_subsector(addr);
	}
	flash_write(addr, (uint8_t *) &data, sizeof(STORAGE_DATA_t));
}

uint32_t storage_get_used() {
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
	return data_counter;
 8002b7c:	4b03      	ldr	r3, [pc, #12]	; (8002b8c <storage_get_used+0x14>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	20001b58 	.word	0x20001b58

08002b90 <storage_get_sample>:

void storage_get_sample(uint32_t id, void * dest) {
 8002b90:	b5b0      	push	{r4, r5, r7, lr}
 8002b92:	b08a      	sub	sp, #40	; 0x28
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6278      	str	r0, [r7, #36]	; 0x24
 8002b98:	6239      	str	r1, [r7, #32]
	*((STORAGE_DATA_t *)dest) = read_data(id);
 8002b9a:	6a3c      	ldr	r4, [r7, #32]
 8002b9c:	463b      	mov	r3, r7
 8002b9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff ffcb 	bl	8002b3c <read_data>
 8002ba6:	4625      	mov	r5, r4
 8002ba8:	463c      	mov	r4, r7
 8002baa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002bb2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8002bb6:	bf00      	nop
 8002bb8:	3728      	adds	r7, #40	; 0x28
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002bc0 <storage_disable>:

void storage_enable() {
	record_active = 1;
}

void storage_disable() {
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
	record_should_stop = STORAGE_AFTER_SAVE;
 8002bc4:	4b04      	ldr	r3, [pc, #16]	; (8002bd8 <storage_disable+0x18>)
 8002bc6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002bca:	601a      	str	r2, [r3, #0]
}
 8002bcc:	bf00      	nop
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	20001b60 	.word	0x20001b60

08002bdc <storage_thread>:
		xSemaphoreGive(storage_sem);
	}
}


void storage_thread(void * arg) {
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]



	storage_init();
 8002be4:	f7ff ff02 	bl	80029ec <storage_init>




	for(;;) {
		last_time = time;
 8002be8:	4b1b      	ldr	r3, [pc, #108]	; (8002c58 <storage_thread+0x7c>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a1b      	ldr	r2, [pc, #108]	; (8002c5c <storage_thread+0x80>)
 8002bee:	6013      	str	r3, [r2, #0]
		time = HAL_GetTick();
 8002bf0:	f001 fb3c 	bl	800426c <HAL_GetTick>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	4a18      	ldr	r2, [pc, #96]	; (8002c58 <storage_thread+0x7c>)
 8002bf8:	6013      	str	r3, [r2, #0]
		if(restart_required) {
 8002bfa:	4b19      	ldr	r3, [pc, #100]	; (8002c60 <storage_thread+0x84>)
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d008      	beq.n	8002c14 <storage_thread+0x38>
			write_header_used(1);
 8002c02:	2001      	movs	r0, #1
 8002c04:	f7ff ff76 	bl	8002af4 <write_header_used>
			data_counter = 0;
 8002c08:	4b16      	ldr	r3, [pc, #88]	; (8002c64 <storage_thread+0x88>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	601a      	str	r2, [r3, #0]
			restart_required = 0;
 8002c0e:	4b14      	ldr	r3, [pc, #80]	; (8002c60 <storage_thread+0x84>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	701a      	strb	r2, [r3, #0]
		}
		if(record_should_stop) {
 8002c14:	4b14      	ldr	r3, [pc, #80]	; (8002c68 <storage_thread+0x8c>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d014      	beq.n	8002c46 <storage_thread+0x6a>
			record_should_stop -= time-last_time;;
 8002c1c:	4b0f      	ldr	r3, [pc, #60]	; (8002c5c <storage_thread+0x80>)
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	4b0d      	ldr	r3, [pc, #52]	; (8002c58 <storage_thread+0x7c>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	4a10      	ldr	r2, [pc, #64]	; (8002c68 <storage_thread+0x8c>)
 8002c28:	6812      	ldr	r2, [r2, #0]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	4b0e      	ldr	r3, [pc, #56]	; (8002c68 <storage_thread+0x8c>)
 8002c30:	601a      	str	r2, [r3, #0]
			if(record_should_stop<=0){
 8002c32:	4b0d      	ldr	r3, [pc, #52]	; (8002c68 <storage_thread+0x8c>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	dc05      	bgt.n	8002c46 <storage_thread+0x6a>
				record_active=0;
 8002c3a:	4b0c      	ldr	r3, [pc, #48]	; (8002c6c <storage_thread+0x90>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	701a      	strb	r2, [r3, #0]
				record_should_stop=0;
 8002c40:	4b09      	ldr	r3, [pc, #36]	; (8002c68 <storage_thread+0x8c>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	601a      	str	r2, [r3, #0]
			}
		}
		if(xSemaphoreTake(storage_sem, 0xffff) == pdTRUE) {
 8002c46:	4b0a      	ldr	r3, [pc, #40]	; (8002c70 <storage_thread+0x94>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f007 fb9c 	bl	800a38c <xQueueSemaphoreTake>
		last_time = time;
 8002c54:	e7c8      	b.n	8002be8 <storage_thread+0xc>
 8002c56:	bf00      	nop
 8002c58:	20001bf0 	.word	0x20001bf0
 8002c5c:	20001bf4 	.word	0x20001bf4
 8002c60:	20001b5d 	.word	0x20001b5d
 8002c64:	20001b58 	.word	0x20001b58
 8002c68:	20001b60 	.word	0x20001b60
 8002c6c:	20001b5c 	.word	0x20001b5c
 8002c70:	20001b64 	.word	0x20001b64

08002c74 <threads_init>:
 **********************/

/*
 * Create all the threads needed by the software
 */
void threads_init(void) {
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af04      	add	r7, sp, #16


	serial_global_init();
 8002c7a:	f7ff fdf9 	bl	8002870 <serial_global_init>
	static DEBUG_INST_t debug;
	debug_init(&debug);
 8002c7e:	4824      	ldr	r0, [pc, #144]	; (8002d10 <threads_init+0x9c>)
 8002c80:	f7fe fe92 	bl	80019a8 <debug_init>

	can_init();
 8002c84:	f7fd fde8 	bl	8000858 <can_init>
	/*
	 * Storage thread
	 * lowest priority
	 */

	CREATE_THREAD(storage_handle, storage, storage_thread, STORAGE_SZ, STORAGE_PRIO);
 8002c88:	4b22      	ldr	r3, [pc, #136]	; (8002d14 <threads_init+0xa0>)
 8002c8a:	9302      	str	r3, [sp, #8]
 8002c8c:	4b22      	ldr	r3, [pc, #136]	; (8002d18 <threads_init+0xa4>)
 8002c8e:	9301      	str	r3, [sp, #4]
 8002c90:	2303      	movs	r3, #3
 8002c92:	9300      	str	r3, [sp, #0]
 8002c94:	2300      	movs	r3, #0
 8002c96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c9a:	4920      	ldr	r1, [pc, #128]	; (8002d1c <threads_init+0xa8>)
 8002c9c:	4820      	ldr	r0, [pc, #128]	; (8002d20 <threads_init+0xac>)
 8002c9e:	f007 fd83 	bl	800a7a8 <xTaskCreateStatic>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	4a1f      	ldr	r2, [pc, #124]	; (8002d24 <threads_init+0xb0>)
 8002ca6:	6013      	str	r3, [r2, #0]

	/*
	 *  Serial RX processing thread (Bottom half)
	 *  low priority
	 */
	CREATE_THREAD(serial_handle, serial, serial_thread, SERIAL_SZ, SERIAL_PRIO);
 8002ca8:	4b1f      	ldr	r3, [pc, #124]	; (8002d28 <threads_init+0xb4>)
 8002caa:	9302      	str	r3, [sp, #8]
 8002cac:	4b1f      	ldr	r3, [pc, #124]	; (8002d2c <threads_init+0xb8>)
 8002cae:	9301      	str	r3, [sp, #4]
 8002cb0:	2305      	movs	r3, #5
 8002cb2:	9300      	str	r3, [sp, #0]
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cba:	491d      	ldr	r1, [pc, #116]	; (8002d30 <threads_init+0xbc>)
 8002cbc:	481d      	ldr	r0, [pc, #116]	; (8002d34 <threads_init+0xc0>)
 8002cbe:	f007 fd73 	bl	800a7a8 <xTaskCreateStatic>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	4a1c      	ldr	r2, [pc, #112]	; (8002d38 <threads_init+0xc4>)
 8002cc6:	6013      	str	r3, [r2, #0]

	/*
	 *  Main control thread
	 *  Highest priority
	 */
	CREATE_THREAD(control_handle, control, control_thread, CONTROL_SZ, CONTROL_PRIO);
 8002cc8:	4b1c      	ldr	r3, [pc, #112]	; (8002d3c <threads_init+0xc8>)
 8002cca:	9302      	str	r3, [sp, #8]
 8002ccc:	4b1c      	ldr	r3, [pc, #112]	; (8002d40 <threads_init+0xcc>)
 8002cce:	9301      	str	r3, [sp, #4]
 8002cd0:	2306      	movs	r3, #6
 8002cd2:	9300      	str	r3, [sp, #0]
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cda:	491a      	ldr	r1, [pc, #104]	; (8002d44 <threads_init+0xd0>)
 8002cdc:	481a      	ldr	r0, [pc, #104]	; (8002d48 <threads_init+0xd4>)
 8002cde:	f007 fd63 	bl	800a7a8 <xTaskCreateStatic>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	4a19      	ldr	r2, [pc, #100]	; (8002d4c <threads_init+0xd8>)
 8002ce6:	6013      	str	r3, [r2, #0]

	/*
	 *  pipeline thread
	 *  Highest priority
	 */
	CREATE_THREAD(pipeline_handle, pipeline, pipeline_thread, CAN_SZ, CAN_PRIO);
 8002ce8:	4b19      	ldr	r3, [pc, #100]	; (8002d50 <threads_init+0xdc>)
 8002cea:	9302      	str	r3, [sp, #8]
 8002cec:	4b19      	ldr	r3, [pc, #100]	; (8002d54 <threads_init+0xe0>)
 8002cee:	9301      	str	r3, [sp, #4]
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	9300      	str	r3, [sp, #0]
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cfa:	4917      	ldr	r1, [pc, #92]	; (8002d58 <threads_init+0xe4>)
 8002cfc:	4817      	ldr	r0, [pc, #92]	; (8002d5c <threads_init+0xe8>)
 8002cfe:	f007 fd53 	bl	800a7a8 <xTaskCreateStatic>
 8002d02:	4603      	mov	r3, r0
 8002d04:	4a16      	ldr	r2, [pc, #88]	; (8002d60 <threads_init+0xec>)
 8002d06:	6013      	str	r3, [r2, #0]


}
 8002d08:	bf00      	nop
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	20001c08 	.word	0x20001c08
 8002d14:	20004040 	.word	0x20004040
 8002d18:	20003040 	.word	0x20003040
 8002d1c:	0800bd24 	.word	0x0800bd24
 8002d20:	08002bdd 	.word	0x08002bdd
 8002d24:	20001c00 	.word	0x20001c00
 8002d28:	20005098 	.word	0x20005098
 8002d2c:	20004098 	.word	0x20004098
 8002d30:	0800bd2c 	.word	0x0800bd2c
 8002d34:	08002965 	.word	0x08002965
 8002d38:	20001bfc 	.word	0x20001bfc
 8002d3c:	200060f0 	.word	0x200060f0
 8002d40:	200050f0 	.word	0x200050f0
 8002d44:	0800bd34 	.word	0x0800bd34
 8002d48:	08001109 	.word	0x08001109
 8002d4c:	20001bf8 	.word	0x20001bf8
 8002d50:	20007148 	.word	0x20007148
 8002d54:	20006148 	.word	0x20006148
 8002d58:	0800bd3c 	.word	0x0800bd3c
 8002d5c:	080023ed 	.word	0x080023ed
 8002d60:	20001c04 	.word	0x20001c04

08002d64 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002d68:	4b17      	ldr	r3, [pc, #92]	; (8002dc8 <MX_CAN1_Init+0x64>)
 8002d6a:	4a18      	ldr	r2, [pc, #96]	; (8002dcc <MX_CAN1_Init+0x68>)
 8002d6c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 8002d6e:	4b16      	ldr	r3, [pc, #88]	; (8002dc8 <MX_CAN1_Init+0x64>)
 8002d70:	2209      	movs	r2, #9
 8002d72:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002d74:	4b14      	ldr	r3, [pc, #80]	; (8002dc8 <MX_CAN1_Init+0x64>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002d7a:	4b13      	ldr	r3, [pc, #76]	; (8002dc8 <MX_CAN1_Init+0x64>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8002d80:	4b11      	ldr	r3, [pc, #68]	; (8002dc8 <MX_CAN1_Init+0x64>)
 8002d82:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8002d86:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8002d88:	4b0f      	ldr	r3, [pc, #60]	; (8002dc8 <MX_CAN1_Init+0x64>)
 8002d8a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002d8e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002d90:	4b0d      	ldr	r3, [pc, #52]	; (8002dc8 <MX_CAN1_Init+0x64>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002d96:	4b0c      	ldr	r3, [pc, #48]	; (8002dc8 <MX_CAN1_Init+0x64>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002d9c:	4b0a      	ldr	r3, [pc, #40]	; (8002dc8 <MX_CAN1_Init+0x64>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8002da2:	4b09      	ldr	r3, [pc, #36]	; (8002dc8 <MX_CAN1_Init+0x64>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002da8:	4b07      	ldr	r3, [pc, #28]	; (8002dc8 <MX_CAN1_Init+0x64>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002dae:	4b06      	ldr	r3, [pc, #24]	; (8002dc8 <MX_CAN1_Init+0x64>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002db4:	4804      	ldr	r0, [pc, #16]	; (8002dc8 <MX_CAN1_Init+0x64>)
 8002db6:	f001 fa65 	bl	8004284 <HAL_CAN_Init>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8002dc0:	f000 fa42 	bl	8003248 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8002dc4:	bf00      	nop
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	20007984 	.word	0x20007984
 8002dcc:	40006400 	.word	0x40006400

08002dd0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b08a      	sub	sp, #40	; 0x28
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dd8:	f107 0314 	add.w	r3, r7, #20
 8002ddc:	2200      	movs	r2, #0
 8002dde:	601a      	str	r2, [r3, #0]
 8002de0:	605a      	str	r2, [r3, #4]
 8002de2:	609a      	str	r2, [r3, #8]
 8002de4:	60da      	str	r2, [r3, #12]
 8002de6:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a2d      	ldr	r2, [pc, #180]	; (8002ea4 <HAL_CAN_MspInit+0xd4>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d153      	bne.n	8002e9a <HAL_CAN_MspInit+0xca>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002df2:	2300      	movs	r3, #0
 8002df4:	613b      	str	r3, [r7, #16]
 8002df6:	4b2c      	ldr	r3, [pc, #176]	; (8002ea8 <HAL_CAN_MspInit+0xd8>)
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	4a2b      	ldr	r2, [pc, #172]	; (8002ea8 <HAL_CAN_MspInit+0xd8>)
 8002dfc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e00:	6413      	str	r3, [r2, #64]	; 0x40
 8002e02:	4b29      	ldr	r3, [pc, #164]	; (8002ea8 <HAL_CAN_MspInit+0xd8>)
 8002e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e0a:	613b      	str	r3, [r7, #16]
 8002e0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e0e:	2300      	movs	r3, #0
 8002e10:	60fb      	str	r3, [r7, #12]
 8002e12:	4b25      	ldr	r3, [pc, #148]	; (8002ea8 <HAL_CAN_MspInit+0xd8>)
 8002e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e16:	4a24      	ldr	r2, [pc, #144]	; (8002ea8 <HAL_CAN_MspInit+0xd8>)
 8002e18:	f043 0301 	orr.w	r3, r3, #1
 8002e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e1e:	4b22      	ldr	r3, [pc, #136]	; (8002ea8 <HAL_CAN_MspInit+0xd8>)
 8002e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	60fb      	str	r3, [r7, #12]
 8002e28:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	60bb      	str	r3, [r7, #8]
 8002e2e:	4b1e      	ldr	r3, [pc, #120]	; (8002ea8 <HAL_CAN_MspInit+0xd8>)
 8002e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e32:	4a1d      	ldr	r2, [pc, #116]	; (8002ea8 <HAL_CAN_MspInit+0xd8>)
 8002e34:	f043 0302 	orr.w	r3, r3, #2
 8002e38:	6313      	str	r3, [r2, #48]	; 0x30
 8002e3a:	4b1b      	ldr	r3, [pc, #108]	; (8002ea8 <HAL_CAN_MspInit+0xd8>)
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	60bb      	str	r3, [r7, #8]
 8002e44:	68bb      	ldr	r3, [r7, #8]
    /**CAN1 GPIO Configuration
    PA12     ------> CAN1_TX
    PB8     ------> CAN1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002e46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e50:	2300      	movs	r3, #0
 8002e52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e54:	2303      	movs	r3, #3
 8002e56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002e58:	2309      	movs	r3, #9
 8002e5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e5c:	f107 0314 	add.w	r3, r7, #20
 8002e60:	4619      	mov	r1, r3
 8002e62:	4812      	ldr	r0, [pc, #72]	; (8002eac <HAL_CAN_MspInit+0xdc>)
 8002e64:	f002 fda0 	bl	80059a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002e68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e6e:	2302      	movs	r3, #2
 8002e70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e72:	2300      	movs	r3, #0
 8002e74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e76:	2303      	movs	r3, #3
 8002e78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002e7a:	2309      	movs	r3, #9
 8002e7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e7e:	f107 0314 	add.w	r3, r7, #20
 8002e82:	4619      	mov	r1, r3
 8002e84:	480a      	ldr	r0, [pc, #40]	; (8002eb0 <HAL_CAN_MspInit+0xe0>)
 8002e86:	f002 fd8f 	bl	80059a8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	2105      	movs	r1, #5
 8002e8e:	2014      	movs	r0, #20
 8002e90:	f002 f95e 	bl	8005150 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002e94:	2014      	movs	r0, #20
 8002e96:	f002 f977 	bl	8005188 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8002e9a:	bf00      	nop
 8002e9c:	3728      	adds	r7, #40	; 0x28
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	40006400 	.word	0x40006400
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	40020000 	.word	0x40020000
 8002eb0:	40020400 	.word	0x40020400

08002eb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002eba:	2300      	movs	r3, #0
 8002ebc:	607b      	str	r3, [r7, #4]
 8002ebe:	4b27      	ldr	r3, [pc, #156]	; (8002f5c <MX_DMA_Init+0xa8>)
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec2:	4a26      	ldr	r2, [pc, #152]	; (8002f5c <MX_DMA_Init+0xa8>)
 8002ec4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eca:	4b24      	ldr	r3, [pc, #144]	; (8002f5c <MX_DMA_Init+0xa8>)
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ece:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ed2:	607b      	str	r3, [r7, #4]
 8002ed4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	603b      	str	r3, [r7, #0]
 8002eda:	4b20      	ldr	r3, [pc, #128]	; (8002f5c <MX_DMA_Init+0xa8>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ede:	4a1f      	ldr	r2, [pc, #124]	; (8002f5c <MX_DMA_Init+0xa8>)
 8002ee0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ee6:	4b1d      	ldr	r3, [pc, #116]	; (8002f5c <MX_DMA_Init+0xa8>)
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eee:	603b      	str	r3, [r7, #0]
 8002ef0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	2105      	movs	r1, #5
 8002ef6:	200c      	movs	r0, #12
 8002ef8:	f002 f92a 	bl	8005150 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002efc:	200c      	movs	r0, #12
 8002efe:	f002 f943 	bl	8005188 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8002f02:	2200      	movs	r2, #0
 8002f04:	2105      	movs	r1, #5
 8002f06:	200e      	movs	r0, #14
 8002f08:	f002 f922 	bl	8005150 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002f0c:	200e      	movs	r0, #14
 8002f0e:	f002 f93b 	bl	8005188 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8002f12:	2200      	movs	r2, #0
 8002f14:	2105      	movs	r1, #5
 8002f16:	203a      	movs	r0, #58	; 0x3a
 8002f18:	f002 f91a 	bl	8005150 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002f1c:	203a      	movs	r0, #58	; 0x3a
 8002f1e:	f002 f933 	bl	8005188 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 8002f22:	2200      	movs	r2, #0
 8002f24:	2105      	movs	r1, #5
 8002f26:	2044      	movs	r0, #68	; 0x44
 8002f28:	f002 f912 	bl	8005150 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8002f2c:	2044      	movs	r0, #68	; 0x44
 8002f2e:	f002 f92b 	bl	8005188 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8002f32:	2200      	movs	r2, #0
 8002f34:	2105      	movs	r1, #5
 8002f36:	2045      	movs	r0, #69	; 0x45
 8002f38:	f002 f90a 	bl	8005150 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002f3c:	2045      	movs	r0, #69	; 0x45
 8002f3e:	f002 f923 	bl	8005188 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8002f42:	2200      	movs	r2, #0
 8002f44:	2105      	movs	r1, #5
 8002f46:	2046      	movs	r0, #70	; 0x46
 8002f48:	f002 f902 	bl	8005150 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002f4c:	2046      	movs	r0, #70	; 0x46
 8002f4e:	f002 f91b 	bl	8005188 <HAL_NVIC_EnableIRQ>

}
 8002f52:	bf00      	nop
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	40023800 	.word	0x40023800

08002f60 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0
	TIM5->CR1 = 0b1;
 8002f64:	4b03      	ldr	r3, [pc, #12]	; (8002f74 <configureTimerForRunTimeStats+0x14>)
 8002f66:	2201      	movs	r2, #1
 8002f68:	601a      	str	r2, [r3, #0]
}
 8002f6a:	bf00      	nop
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr
 8002f74:	40000c00 	.word	0x40000c00

08002f78 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
return TIM5->CNT;
 8002f7c:	4b03      	ldr	r3, [pc, #12]	; (8002f8c <getRunTimeCounterValue+0x14>)
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	40000c00 	.word	0x40000c00

08002f90 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	4a07      	ldr	r2, [pc, #28]	; (8002fbc <vApplicationGetIdleTaskMemory+0x2c>)
 8002fa0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	4a06      	ldr	r2, [pc, #24]	; (8002fc0 <vApplicationGetIdleTaskMemory+0x30>)
 8002fa6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2280      	movs	r2, #128	; 0x80
 8002fac:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002fae:	bf00      	nop
 8002fb0:	3714      	adds	r7, #20
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	200071a0 	.word	0x200071a0
 8002fc0:	200071f8 	.word	0x200071f8

08002fc4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002fc4:	b5b0      	push	{r4, r5, r7, lr}
 8002fc6:	b088      	sub	sp, #32
 8002fc8:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128, defaultTaskBuffer, &defaultTaskControlBlock);
 8002fca:	4b0a      	ldr	r3, [pc, #40]	; (8002ff4 <MX_FREERTOS_Init+0x30>)
 8002fcc:	1d3c      	adds	r4, r7, #4
 8002fce:	461d      	mov	r5, r3
 8002fd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fd4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002fd8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002fdc:	1d3b      	adds	r3, r7, #4
 8002fde:	2100      	movs	r1, #0
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f006 fe2a 	bl	8009c3a <osThreadCreate>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	4a03      	ldr	r2, [pc, #12]	; (8002ff8 <MX_FREERTOS_Init+0x34>)
 8002fea:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002fec:	bf00      	nop
 8002fee:	3720      	adds	r7, #32
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bdb0      	pop	{r4, r5, r7, pc}
 8002ff4:	0800bd54 	.word	0x0800bd54
 8002ff8:	200079ac 	.word	0x200079ac

08002ffc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8003004:	2001      	movs	r0, #1
 8003006:	f006 fe3d 	bl	8009c84 <osDelay>
 800300a:	e7fb      	b.n	8003004 <StartDefaultTask+0x8>

0800300c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b088      	sub	sp, #32
 8003010:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003012:	f107 030c 	add.w	r3, r7, #12
 8003016:	2200      	movs	r2, #0
 8003018:	601a      	str	r2, [r3, #0]
 800301a:	605a      	str	r2, [r3, #4]
 800301c:	609a      	str	r2, [r3, #8]
 800301e:	60da      	str	r2, [r3, #12]
 8003020:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003022:	2300      	movs	r3, #0
 8003024:	60bb      	str	r3, [r7, #8]
 8003026:	4b30      	ldr	r3, [pc, #192]	; (80030e8 <MX_GPIO_Init+0xdc>)
 8003028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302a:	4a2f      	ldr	r2, [pc, #188]	; (80030e8 <MX_GPIO_Init+0xdc>)
 800302c:	f043 0304 	orr.w	r3, r3, #4
 8003030:	6313      	str	r3, [r2, #48]	; 0x30
 8003032:	4b2d      	ldr	r3, [pc, #180]	; (80030e8 <MX_GPIO_Init+0xdc>)
 8003034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003036:	f003 0304 	and.w	r3, r3, #4
 800303a:	60bb      	str	r3, [r7, #8]
 800303c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800303e:	2300      	movs	r3, #0
 8003040:	607b      	str	r3, [r7, #4]
 8003042:	4b29      	ldr	r3, [pc, #164]	; (80030e8 <MX_GPIO_Init+0xdc>)
 8003044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003046:	4a28      	ldr	r2, [pc, #160]	; (80030e8 <MX_GPIO_Init+0xdc>)
 8003048:	f043 0301 	orr.w	r3, r3, #1
 800304c:	6313      	str	r3, [r2, #48]	; 0x30
 800304e:	4b26      	ldr	r3, [pc, #152]	; (80030e8 <MX_GPIO_Init+0xdc>)
 8003050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	607b      	str	r3, [r7, #4]
 8003058:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800305a:	2300      	movs	r3, #0
 800305c:	603b      	str	r3, [r7, #0]
 800305e:	4b22      	ldr	r3, [pc, #136]	; (80030e8 <MX_GPIO_Init+0xdc>)
 8003060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003062:	4a21      	ldr	r2, [pc, #132]	; (80030e8 <MX_GPIO_Init+0xdc>)
 8003064:	f043 0302 	orr.w	r3, r3, #2
 8003068:	6313      	str	r3, [r2, #48]	; 0x30
 800306a:	4b1f      	ldr	r3, [pc, #124]	; (80030e8 <MX_GPIO_Init+0xdc>)
 800306c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	603b      	str	r3, [r7, #0]
 8003074:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003076:	2200      	movs	r2, #0
 8003078:	2102      	movs	r1, #2
 800307a:	481c      	ldr	r0, [pc, #112]	; (80030ec <MX_GPIO_Init+0xe0>)
 800307c:	f002 fe28 	bl	8005cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GLOBAL_EN_GPIO_Port, GLOBAL_EN_Pin, GPIO_PIN_RESET);
 8003080:	2200      	movs	r2, #0
 8003082:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003086:	481a      	ldr	r0, [pc, #104]	; (80030f0 <MX_GPIO_Init+0xe4>)
 8003088:	f002 fe22 	bl	8005cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 800308c:	2302      	movs	r3, #2
 800308e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003090:	2301      	movs	r3, #1
 8003092:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003094:	2300      	movs	r3, #0
 8003096:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003098:	2300      	movs	r3, #0
 800309a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800309c:	f107 030c 	add.w	r3, r7, #12
 80030a0:	4619      	mov	r1, r3
 80030a2:	4812      	ldr	r0, [pc, #72]	; (80030ec <MX_GPIO_Init+0xe0>)
 80030a4:	f002 fc80 	bl	80059a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RUN_PG_Pin;
 80030a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030ae:	2300      	movs	r3, #0
 80030b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b2:	2300      	movs	r3, #0
 80030b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(RUN_PG_GPIO_Port, &GPIO_InitStruct);
 80030b6:	f107 030c 	add.w	r3, r7, #12
 80030ba:	4619      	mov	r1, r3
 80030bc:	480d      	ldr	r0, [pc, #52]	; (80030f4 <MX_GPIO_Init+0xe8>)
 80030be:	f002 fc73 	bl	80059a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GLOBAL_EN_Pin;
 80030c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80030c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80030c8:	2311      	movs	r3, #17
 80030ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030cc:	2300      	movs	r3, #0
 80030ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030d0:	2300      	movs	r3, #0
 80030d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GLOBAL_EN_GPIO_Port, &GPIO_InitStruct);
 80030d4:	f107 030c 	add.w	r3, r7, #12
 80030d8:	4619      	mov	r1, r3
 80030da:	4805      	ldr	r0, [pc, #20]	; (80030f0 <MX_GPIO_Init+0xe4>)
 80030dc:	f002 fc64 	bl	80059a8 <HAL_GPIO_Init>

}
 80030e0:	bf00      	nop
 80030e2:	3720      	adds	r7, #32
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	40023800 	.word	0x40023800
 80030ec:	40020800 	.word	0x40020800
 80030f0:	40020000 	.word	0x40020000
 80030f4:	40020400 	.word	0x40020400

080030f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80030fc:	f001 f880 	bl	8004200 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003100:	f000 f824 	bl	800314c <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003104:	f7ff ff82 	bl	800300c <MX_GPIO_Init>
  MX_DMA_Init();
 8003108:	f7ff fed4 	bl	8002eb4 <MX_DMA_Init>
  MX_TIM8_Init();
 800310c:	f000 fc08 	bl	8003920 <MX_TIM8_Init>
  MX_TIM2_Init();
 8003110:	f000 fb1e 	bl	8003750 <MX_TIM2_Init>
  MX_USART6_UART_Init();
 8003114:	f000 fdf4 	bl	8003d00 <MX_USART6_UART_Init>
  MX_USART3_UART_Init();
 8003118:	f000 fdc8 	bl	8003cac <MX_USART3_UART_Init>
  MX_QUADSPI_Init();
 800311c:	f000 f89c 	bl	8003258 <MX_QUADSPI_Init>
  MX_TIM3_Init();
 8003120:	f000 fb62 	bl	80037e8 <MX_TIM3_Init>
  MX_CAN1_Init();
 8003124:	f7ff fe1e 	bl	8002d64 <MX_CAN1_Init>
  MX_USART1_UART_Init();
 8003128:	f000 fd96 	bl	8003c58 <MX_USART1_UART_Init>
  MX_TIM5_Init();
 800312c:	f000 fbaa 	bl	8003884 <MX_TIM5_Init>
  MX_SPI2_Init();
 8003130:	f000 f93e 	bl	80033b0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */



  threads_init();
 8003134:	f7ff fd9e 	bl	8002c74 <threads_init>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8003138:	f7ff ff44 	bl	8002fc4 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800313c:	f006 fd76 	bl	8009c2c <osKernelStart>



  while (1)
  {
	osDelay(1000);
 8003140:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003144:	f006 fd9e 	bl	8009c84 <osDelay>
 8003148:	e7fa      	b.n	8003140 <main+0x48>
	...

0800314c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b094      	sub	sp, #80	; 0x50
 8003150:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003152:	f107 031c 	add.w	r3, r7, #28
 8003156:	2234      	movs	r2, #52	; 0x34
 8003158:	2100      	movs	r1, #0
 800315a:	4618      	mov	r0, r3
 800315c:	f008 fdce 	bl	800bcfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003160:	f107 0308 	add.w	r3, r7, #8
 8003164:	2200      	movs	r2, #0
 8003166:	601a      	str	r2, [r3, #0]
 8003168:	605a      	str	r2, [r3, #4]
 800316a:	609a      	str	r2, [r3, #8]
 800316c:	60da      	str	r2, [r3, #12]
 800316e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003170:	2300      	movs	r3, #0
 8003172:	607b      	str	r3, [r7, #4]
 8003174:	4b29      	ldr	r3, [pc, #164]	; (800321c <SystemClock_Config+0xd0>)
 8003176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003178:	4a28      	ldr	r2, [pc, #160]	; (800321c <SystemClock_Config+0xd0>)
 800317a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800317e:	6413      	str	r3, [r2, #64]	; 0x40
 8003180:	4b26      	ldr	r3, [pc, #152]	; (800321c <SystemClock_Config+0xd0>)
 8003182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003184:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003188:	607b      	str	r3, [r7, #4]
 800318a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800318c:	2300      	movs	r3, #0
 800318e:	603b      	str	r3, [r7, #0]
 8003190:	4b23      	ldr	r3, [pc, #140]	; (8003220 <SystemClock_Config+0xd4>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003198:	4a21      	ldr	r2, [pc, #132]	; (8003220 <SystemClock_Config+0xd4>)
 800319a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800319e:	6013      	str	r3, [r2, #0]
 80031a0:	4b1f      	ldr	r3, [pc, #124]	; (8003220 <SystemClock_Config+0xd4>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80031a8:	603b      	str	r3, [r7, #0]
 80031aa:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80031ac:	2302      	movs	r3, #2
 80031ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80031b0:	2301      	movs	r3, #1
 80031b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80031b4:	2310      	movs	r3, #16
 80031b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80031b8:	2302      	movs	r3, #2
 80031ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80031bc:	2300      	movs	r3, #0
 80031be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80031c0:	2308      	movs	r3, #8
 80031c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 80031c4:	2348      	movs	r3, #72	; 0x48
 80031c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80031c8:	2302      	movs	r3, #2
 80031ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80031cc:	2303      	movs	r3, #3
 80031ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80031d0:	2302      	movs	r3, #2
 80031d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031d4:	f107 031c 	add.w	r3, r7, #28
 80031d8:	4618      	mov	r0, r3
 80031da:	f003 ff9d 	bl	8007118 <HAL_RCC_OscConfig>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d001      	beq.n	80031e8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80031e4:	f000 f830 	bl	8003248 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031e8:	230f      	movs	r3, #15
 80031ea:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80031ec:	2302      	movs	r3, #2
 80031ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031f0:	2300      	movs	r3, #0
 80031f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80031f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80031fa:	2300      	movs	r3, #0
 80031fc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80031fe:	f107 0308 	add.w	r3, r7, #8
 8003202:	2102      	movs	r1, #2
 8003204:	4618      	mov	r0, r3
 8003206:	f003 fcdf 	bl	8006bc8 <HAL_RCC_ClockConfig>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d001      	beq.n	8003214 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8003210:	f000 f81a 	bl	8003248 <Error_Handler>
  }
}
 8003214:	bf00      	nop
 8003216:	3750      	adds	r7, #80	; 0x50
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	40023800 	.word	0x40023800
 8003220:	40007000 	.word	0x40007000

08003224 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a04      	ldr	r2, [pc, #16]	; (8003244 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d101      	bne.n	800323a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003236:	f001 f805 	bl	8004244 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800323a:	bf00      	nop
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	40010000 	.word	0x40010000

08003248 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800324c:	bf00      	nop
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
	...

08003258 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 800325c:	4b12      	ldr	r3, [pc, #72]	; (80032a8 <MX_QUADSPI_Init+0x50>)
 800325e:	4a13      	ldr	r2, [pc, #76]	; (80032ac <MX_QUADSPI_Init+0x54>)
 8003260:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 100;
 8003262:	4b11      	ldr	r3, [pc, #68]	; (80032a8 <MX_QUADSPI_Init+0x50>)
 8003264:	2264      	movs	r2, #100	; 0x64
 8003266:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8003268:	4b0f      	ldr	r3, [pc, #60]	; (80032a8 <MX_QUADSPI_Init+0x50>)
 800326a:	2201      	movs	r2, #1
 800326c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800326e:	4b0e      	ldr	r3, [pc, #56]	; (80032a8 <MX_QUADSPI_Init+0x50>)
 8003270:	2200      	movs	r2, #0
 8003272:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 26;
 8003274:	4b0c      	ldr	r3, [pc, #48]	; (80032a8 <MX_QUADSPI_Init+0x50>)
 8003276:	221a      	movs	r2, #26
 8003278:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800327a:	4b0b      	ldr	r3, [pc, #44]	; (80032a8 <MX_QUADSPI_Init+0x50>)
 800327c:	2200      	movs	r2, #0
 800327e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8003280:	4b09      	ldr	r3, [pc, #36]	; (80032a8 <MX_QUADSPI_Init+0x50>)
 8003282:	2200      	movs	r2, #0
 8003284:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8003286:	4b08      	ldr	r3, [pc, #32]	; (80032a8 <MX_QUADSPI_Init+0x50>)
 8003288:	2200      	movs	r2, #0
 800328a:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800328c:	4b06      	ldr	r3, [pc, #24]	; (80032a8 <MX_QUADSPI_Init+0x50>)
 800328e:	2200      	movs	r2, #0
 8003290:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8003292:	4805      	ldr	r0, [pc, #20]	; (80032a8 <MX_QUADSPI_Init+0x50>)
 8003294:	f002 fd36 	bl	8005d04 <HAL_QSPI_Init>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 800329e:	f7ff ffd3 	bl	8003248 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80032a2:	bf00      	nop
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	20007c08 	.word	0x20007c08
 80032ac:	a0001000 	.word	0xa0001000

080032b0 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b08a      	sub	sp, #40	; 0x28
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032b8:	f107 0314 	add.w	r3, r7, #20
 80032bc:	2200      	movs	r2, #0
 80032be:	601a      	str	r2, [r3, #0]
 80032c0:	605a      	str	r2, [r3, #4]
 80032c2:	609a      	str	r2, [r3, #8]
 80032c4:	60da      	str	r2, [r3, #12]
 80032c6:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a34      	ldr	r2, [pc, #208]	; (80033a0 <HAL_QSPI_MspInit+0xf0>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d162      	bne.n	8003398 <HAL_QSPI_MspInit+0xe8>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80032d2:	2300      	movs	r3, #0
 80032d4:	613b      	str	r3, [r7, #16]
 80032d6:	4b33      	ldr	r3, [pc, #204]	; (80033a4 <HAL_QSPI_MspInit+0xf4>)
 80032d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032da:	4a32      	ldr	r2, [pc, #200]	; (80033a4 <HAL_QSPI_MspInit+0xf4>)
 80032dc:	f043 0302 	orr.w	r3, r3, #2
 80032e0:	6393      	str	r3, [r2, #56]	; 0x38
 80032e2:	4b30      	ldr	r3, [pc, #192]	; (80033a4 <HAL_QSPI_MspInit+0xf4>)
 80032e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	613b      	str	r3, [r7, #16]
 80032ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032ee:	2300      	movs	r3, #0
 80032f0:	60fb      	str	r3, [r7, #12]
 80032f2:	4b2c      	ldr	r3, [pc, #176]	; (80033a4 <HAL_QSPI_MspInit+0xf4>)
 80032f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f6:	4a2b      	ldr	r2, [pc, #172]	; (80033a4 <HAL_QSPI_MspInit+0xf4>)
 80032f8:	f043 0302 	orr.w	r3, r3, #2
 80032fc:	6313      	str	r3, [r2, #48]	; 0x30
 80032fe:	4b29      	ldr	r3, [pc, #164]	; (80033a4 <HAL_QSPI_MspInit+0xf4>)
 8003300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	60fb      	str	r3, [r7, #12]
 8003308:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800330a:	2300      	movs	r3, #0
 800330c:	60bb      	str	r3, [r7, #8]
 800330e:	4b25      	ldr	r3, [pc, #148]	; (80033a4 <HAL_QSPI_MspInit+0xf4>)
 8003310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003312:	4a24      	ldr	r2, [pc, #144]	; (80033a4 <HAL_QSPI_MspInit+0xf4>)
 8003314:	f043 0304 	orr.w	r3, r3, #4
 8003318:	6313      	str	r3, [r2, #48]	; 0x30
 800331a:	4b22      	ldr	r3, [pc, #136]	; (80033a4 <HAL_QSPI_MspInit+0xf4>)
 800331c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331e:	f003 0304 	and.w	r3, r3, #4
 8003322:	60bb      	str	r3, [r7, #8]
 8003324:	68bb      	ldr	r3, [r7, #8]
    PB2     ------> QUADSPI_CLK
    PC9     ------> QUADSPI_BK1_IO0
    PC10     ------> QUADSPI_BK1_IO1
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003326:	2304      	movs	r3, #4
 8003328:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800332a:	2302      	movs	r3, #2
 800332c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332e:	2300      	movs	r3, #0
 8003330:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003332:	2303      	movs	r3, #3
 8003334:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8003336:	2309      	movs	r3, #9
 8003338:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800333a:	f107 0314 	add.w	r3, r7, #20
 800333e:	4619      	mov	r1, r3
 8003340:	4819      	ldr	r0, [pc, #100]	; (80033a8 <HAL_QSPI_MspInit+0xf8>)
 8003342:	f002 fb31 	bl	80059a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003346:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800334a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800334c:	2302      	movs	r3, #2
 800334e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003350:	2300      	movs	r3, #0
 8003352:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003354:	2303      	movs	r3, #3
 8003356:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8003358:	2309      	movs	r3, #9
 800335a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800335c:	f107 0314 	add.w	r3, r7, #20
 8003360:	4619      	mov	r1, r3
 8003362:	4812      	ldr	r0, [pc, #72]	; (80033ac <HAL_QSPI_MspInit+0xfc>)
 8003364:	f002 fb20 	bl	80059a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003368:	2340      	movs	r3, #64	; 0x40
 800336a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800336c:	2302      	movs	r3, #2
 800336e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003370:	2300      	movs	r3, #0
 8003372:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003374:	2303      	movs	r3, #3
 8003376:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8003378:	230a      	movs	r3, #10
 800337a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800337c:	f107 0314 	add.w	r3, r7, #20
 8003380:	4619      	mov	r1, r3
 8003382:	4809      	ldr	r0, [pc, #36]	; (80033a8 <HAL_QSPI_MspInit+0xf8>)
 8003384:	f002 fb10 	bl	80059a8 <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 5, 0);
 8003388:	2200      	movs	r2, #0
 800338a:	2105      	movs	r1, #5
 800338c:	205c      	movs	r0, #92	; 0x5c
 800338e:	f001 fedf 	bl	8005150 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8003392:	205c      	movs	r0, #92	; 0x5c
 8003394:	f001 fef8 	bl	8005188 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8003398:	bf00      	nop
 800339a:	3728      	adds	r7, #40	; 0x28
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	a0001000 	.word	0xa0001000
 80033a4:	40023800 	.word	0x40023800
 80033a8:	40020400 	.word	0x40020400
 80033ac:	40020800 	.word	0x40020800

080033b0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80033b4:	4b17      	ldr	r3, [pc, #92]	; (8003414 <MX_SPI2_Init+0x64>)
 80033b6:	4a18      	ldr	r2, [pc, #96]	; (8003418 <MX_SPI2_Init+0x68>)
 80033b8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80033ba:	4b16      	ldr	r3, [pc, #88]	; (8003414 <MX_SPI2_Init+0x64>)
 80033bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80033c0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80033c2:	4b14      	ldr	r3, [pc, #80]	; (8003414 <MX_SPI2_Init+0x64>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80033c8:	4b12      	ldr	r3, [pc, #72]	; (8003414 <MX_SPI2_Init+0x64>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80033ce:	4b11      	ldr	r3, [pc, #68]	; (8003414 <MX_SPI2_Init+0x64>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80033d4:	4b0f      	ldr	r3, [pc, #60]	; (8003414 <MX_SPI2_Init+0x64>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80033da:	4b0e      	ldr	r3, [pc, #56]	; (8003414 <MX_SPI2_Init+0x64>)
 80033dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033e0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80033e2:	4b0c      	ldr	r3, [pc, #48]	; (8003414 <MX_SPI2_Init+0x64>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80033e8:	4b0a      	ldr	r3, [pc, #40]	; (8003414 <MX_SPI2_Init+0x64>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80033ee:	4b09      	ldr	r3, [pc, #36]	; (8003414 <MX_SPI2_Init+0x64>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033f4:	4b07      	ldr	r3, [pc, #28]	; (8003414 <MX_SPI2_Init+0x64>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80033fa:	4b06      	ldr	r3, [pc, #24]	; (8003414 <MX_SPI2_Init+0x64>)
 80033fc:	220a      	movs	r2, #10
 80033fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003400:	4804      	ldr	r0, [pc, #16]	; (8003414 <MX_SPI2_Init+0x64>)
 8003402:	f004 f927 	bl	8007654 <HAL_SPI_Init>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d001      	beq.n	8003410 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800340c:	f7ff ff1c 	bl	8003248 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003410:	bf00      	nop
 8003412:	bd80      	pop	{r7, pc}
 8003414:	20007c54 	.word	0x20007c54
 8003418:	40003800 	.word	0x40003800

0800341c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b08a      	sub	sp, #40	; 0x28
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003424:	f107 0314 	add.w	r3, r7, #20
 8003428:	2200      	movs	r2, #0
 800342a:	601a      	str	r2, [r3, #0]
 800342c:	605a      	str	r2, [r3, #4]
 800342e:	609a      	str	r2, [r3, #8]
 8003430:	60da      	str	r2, [r3, #12]
 8003432:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a28      	ldr	r2, [pc, #160]	; (80034dc <HAL_SPI_MspInit+0xc0>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d14a      	bne.n	80034d4 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800343e:	2300      	movs	r3, #0
 8003440:	613b      	str	r3, [r7, #16]
 8003442:	4b27      	ldr	r3, [pc, #156]	; (80034e0 <HAL_SPI_MspInit+0xc4>)
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	4a26      	ldr	r2, [pc, #152]	; (80034e0 <HAL_SPI_MspInit+0xc4>)
 8003448:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800344c:	6413      	str	r3, [r2, #64]	; 0x40
 800344e:	4b24      	ldr	r3, [pc, #144]	; (80034e0 <HAL_SPI_MspInit+0xc4>)
 8003450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003452:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003456:	613b      	str	r3, [r7, #16]
 8003458:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800345a:	2300      	movs	r3, #0
 800345c:	60fb      	str	r3, [r7, #12]
 800345e:	4b20      	ldr	r3, [pc, #128]	; (80034e0 <HAL_SPI_MspInit+0xc4>)
 8003460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003462:	4a1f      	ldr	r2, [pc, #124]	; (80034e0 <HAL_SPI_MspInit+0xc4>)
 8003464:	f043 0304 	orr.w	r3, r3, #4
 8003468:	6313      	str	r3, [r2, #48]	; 0x30
 800346a:	4b1d      	ldr	r3, [pc, #116]	; (80034e0 <HAL_SPI_MspInit+0xc4>)
 800346c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346e:	f003 0304 	and.w	r3, r3, #4
 8003472:	60fb      	str	r3, [r7, #12]
 8003474:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003476:	2300      	movs	r3, #0
 8003478:	60bb      	str	r3, [r7, #8]
 800347a:	4b19      	ldr	r3, [pc, #100]	; (80034e0 <HAL_SPI_MspInit+0xc4>)
 800347c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347e:	4a18      	ldr	r2, [pc, #96]	; (80034e0 <HAL_SPI_MspInit+0xc4>)
 8003480:	f043 0302 	orr.w	r3, r3, #2
 8003484:	6313      	str	r3, [r2, #48]	; 0x30
 8003486:	4b16      	ldr	r3, [pc, #88]	; (80034e0 <HAL_SPI_MspInit+0xc4>)
 8003488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	60bb      	str	r3, [r7, #8]
 8003490:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003492:	230c      	movs	r3, #12
 8003494:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003496:	2302      	movs	r3, #2
 8003498:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800349a:	2300      	movs	r3, #0
 800349c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800349e:	2303      	movs	r3, #3
 80034a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80034a2:	2305      	movs	r3, #5
 80034a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034a6:	f107 0314 	add.w	r3, r7, #20
 80034aa:	4619      	mov	r1, r3
 80034ac:	480d      	ldr	r0, [pc, #52]	; (80034e4 <HAL_SPI_MspInit+0xc8>)
 80034ae:	f002 fa7b 	bl	80059a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80034b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b8:	2302      	movs	r3, #2
 80034ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034bc:	2300      	movs	r3, #0
 80034be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034c0:	2303      	movs	r3, #3
 80034c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80034c4:	2305      	movs	r3, #5
 80034c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034c8:	f107 0314 	add.w	r3, r7, #20
 80034cc:	4619      	mov	r1, r3
 80034ce:	4806      	ldr	r0, [pc, #24]	; (80034e8 <HAL_SPI_MspInit+0xcc>)
 80034d0:	f002 fa6a 	bl	80059a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80034d4:	bf00      	nop
 80034d6:	3728      	adds	r7, #40	; 0x28
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	40003800 	.word	0x40003800
 80034e0:	40023800 	.word	0x40023800
 80034e4:	40020800 	.word	0x40020800
 80034e8:	40020400 	.word	0x40020400

080034ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034f2:	2300      	movs	r3, #0
 80034f4:	607b      	str	r3, [r7, #4]
 80034f6:	4b12      	ldr	r3, [pc, #72]	; (8003540 <HAL_MspInit+0x54>)
 80034f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034fa:	4a11      	ldr	r2, [pc, #68]	; (8003540 <HAL_MspInit+0x54>)
 80034fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003500:	6453      	str	r3, [r2, #68]	; 0x44
 8003502:	4b0f      	ldr	r3, [pc, #60]	; (8003540 <HAL_MspInit+0x54>)
 8003504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003506:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800350a:	607b      	str	r3, [r7, #4]
 800350c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800350e:	2300      	movs	r3, #0
 8003510:	603b      	str	r3, [r7, #0]
 8003512:	4b0b      	ldr	r3, [pc, #44]	; (8003540 <HAL_MspInit+0x54>)
 8003514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003516:	4a0a      	ldr	r2, [pc, #40]	; (8003540 <HAL_MspInit+0x54>)
 8003518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800351c:	6413      	str	r3, [r2, #64]	; 0x40
 800351e:	4b08      	ldr	r3, [pc, #32]	; (8003540 <HAL_MspInit+0x54>)
 8003520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003526:	603b      	str	r3, [r7, #0]
 8003528:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800352a:	2200      	movs	r2, #0
 800352c:	210f      	movs	r1, #15
 800352e:	f06f 0001 	mvn.w	r0, #1
 8003532:	f001 fe0d 	bl	8005150 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003536:	bf00      	nop
 8003538:	3708      	adds	r7, #8
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	40023800 	.word	0x40023800

08003544 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b08c      	sub	sp, #48	; 0x30
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800354c:	2300      	movs	r3, #0
 800354e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003550:	2300      	movs	r3, #0
 8003552:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8003554:	2200      	movs	r2, #0
 8003556:	6879      	ldr	r1, [r7, #4]
 8003558:	2019      	movs	r0, #25
 800355a:	f001 fdf9 	bl	8005150 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800355e:	2019      	movs	r0, #25
 8003560:	f001 fe12 	bl	8005188 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003564:	2300      	movs	r3, #0
 8003566:	60fb      	str	r3, [r7, #12]
 8003568:	4b1e      	ldr	r3, [pc, #120]	; (80035e4 <HAL_InitTick+0xa0>)
 800356a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356c:	4a1d      	ldr	r2, [pc, #116]	; (80035e4 <HAL_InitTick+0xa0>)
 800356e:	f043 0301 	orr.w	r3, r3, #1
 8003572:	6453      	str	r3, [r2, #68]	; 0x44
 8003574:	4b1b      	ldr	r3, [pc, #108]	; (80035e4 <HAL_InitTick+0xa0>)
 8003576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	60fb      	str	r3, [r7, #12]
 800357e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003580:	f107 0210 	add.w	r2, r7, #16
 8003584:	f107 0314 	add.w	r3, r7, #20
 8003588:	4611      	mov	r1, r2
 800358a:	4618      	mov	r0, r3
 800358c:	f003 fc36 	bl	8006dfc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003590:	f003 fc20 	bl	8006dd4 <HAL_RCC_GetPCLK2Freq>
 8003594:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003598:	4a13      	ldr	r2, [pc, #76]	; (80035e8 <HAL_InitTick+0xa4>)
 800359a:	fba2 2303 	umull	r2, r3, r2, r3
 800359e:	0c9b      	lsrs	r3, r3, #18
 80035a0:	3b01      	subs	r3, #1
 80035a2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80035a4:	4b11      	ldr	r3, [pc, #68]	; (80035ec <HAL_InitTick+0xa8>)
 80035a6:	4a12      	ldr	r2, [pc, #72]	; (80035f0 <HAL_InitTick+0xac>)
 80035a8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80035aa:	4b10      	ldr	r3, [pc, #64]	; (80035ec <HAL_InitTick+0xa8>)
 80035ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80035b0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80035b2:	4a0e      	ldr	r2, [pc, #56]	; (80035ec <HAL_InitTick+0xa8>)
 80035b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80035b8:	4b0c      	ldr	r3, [pc, #48]	; (80035ec <HAL_InitTick+0xa8>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035be:	4b0b      	ldr	r3, [pc, #44]	; (80035ec <HAL_InitTick+0xa8>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80035c4:	4809      	ldr	r0, [pc, #36]	; (80035ec <HAL_InitTick+0xa8>)
 80035c6:	f004 f8ce 	bl	8007766 <HAL_TIM_Base_Init>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d104      	bne.n	80035da <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80035d0:	4806      	ldr	r0, [pc, #24]	; (80035ec <HAL_InitTick+0xa8>)
 80035d2:	f004 f917 	bl	8007804 <HAL_TIM_Base_Start_IT>
 80035d6:	4603      	mov	r3, r0
 80035d8:	e000      	b.n	80035dc <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3730      	adds	r7, #48	; 0x30
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	40023800 	.word	0x40023800
 80035e8:	431bde83 	.word	0x431bde83
 80035ec:	20007cac 	.word	0x20007cac
 80035f0:	40010000 	.word	0x40010000

080035f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80035f8:	bf00      	nop
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr

08003602 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	af00      	add	r7, sp, #0
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */

	  led_set_color(LED_WHITE);
 8003606:	222f      	movs	r2, #47	; 0x2f
 8003608:	212f      	movs	r1, #47	; 0x2f
 800360a:	202f      	movs	r0, #47	; 0x2f
 800360c:	f7fe fc60 	bl	8001ed0 <led_set_color>
 8003610:	e7f9      	b.n	8003606 <HardFault_Handler+0x4>

08003612 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003612:	b480      	push	{r7}
 8003614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003616:	e7fe      	b.n	8003616 <MemManage_Handler+0x4>

08003618 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003618:	b480      	push	{r7}
 800361a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800361c:	e7fe      	b.n	800361c <BusFault_Handler+0x4>

0800361e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800361e:	b480      	push	{r7}
 8003620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003622:	e7fe      	b.n	8003622 <UsageFault_Handler+0x4>

08003624 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003624:	b480      	push	{r7}
 8003626:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003628:	bf00      	nop
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
	...

08003634 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003638:	4802      	ldr	r0, [pc, #8]	; (8003644 <DMA1_Stream1_IRQHandler+0x10>)
 800363a:	f001 ff4b 	bl	80054d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800363e:	bf00      	nop
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	20007e74 	.word	0x20007e74

08003648 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800364c:	4802      	ldr	r0, [pc, #8]	; (8003658 <DMA1_Stream3_IRQHandler+0x10>)
 800364e:	f001 ff41 	bl	80054d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003652:	bf00      	nop
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	20007f18 	.word	0x20007f18

0800365c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003660:	4802      	ldr	r0, [pc, #8]	; (800366c <CAN1_RX0_IRQHandler+0x10>)
 8003662:	f001 fa8e 	bl	8004b82 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003666:	bf00      	nop
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	20007984 	.word	0x20007984

08003670 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003674:	4802      	ldr	r0, [pc, #8]	; (8003680 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003676:	f004 f98e 	bl	8007996 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800367a:	bf00      	nop
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	20007cac 	.word	0x20007cac

08003684 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003688:	4802      	ldr	r0, [pc, #8]	; (8003694 <USART1_IRQHandler+0x10>)
 800368a:	f005 fa21 	bl	8008ad0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800368e:	bf00      	nop
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	20008098 	.word	0x20008098

08003698 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800369c:	4802      	ldr	r0, [pc, #8]	; (80036a8 <USART3_IRQHandler+0x10>)
 800369e:	f005 fa17 	bl	8008ad0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80036a2:	bf00      	nop
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	20007ed4 	.word	0x20007ed4

080036ac <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80036b0:	4802      	ldr	r0, [pc, #8]	; (80036bc <DMA2_Stream2_IRQHandler+0x10>)
 80036b2:	f001 ff0f 	bl	80054d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80036b6:	bf00      	nop
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	20007e14 	.word	0x20007e14

080036c0 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80036c4:	4802      	ldr	r0, [pc, #8]	; (80036d0 <DMA2_Stream5_IRQHandler+0x10>)
 80036c6:	f001 ff05 	bl	80054d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 80036ca:	bf00      	nop
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	20008038 	.word	0x20008038

080036d4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 80036d8:	4802      	ldr	r0, [pc, #8]	; (80036e4 <DMA2_Stream6_IRQHandler+0x10>)
 80036da:	f001 fefb 	bl	80054d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80036de:	bf00      	nop
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	20007fd8 	.word	0x20007fd8

080036e8 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80036ec:	4802      	ldr	r0, [pc, #8]	; (80036f8 <DMA2_Stream7_IRQHandler+0x10>)
 80036ee:	f001 fef1 	bl	80054d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80036f2:	bf00      	nop
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	20007f78 	.word	0x20007f78

080036fc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003700:	4802      	ldr	r0, [pc, #8]	; (800370c <USART6_IRQHandler+0x10>)
 8003702:	f005 f9e5 	bl	8008ad0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003706:	bf00      	nop
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	200080dc 	.word	0x200080dc

08003710 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 8003714:	4802      	ldr	r0, [pc, #8]	; (8003720 <QUADSPI_IRQHandler+0x10>)
 8003716:	f002 fb71 	bl	8005dfc <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 800371a:	bf00      	nop
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	20007c08 	.word	0x20007c08

08003724 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003728:	4b08      	ldr	r3, [pc, #32]	; (800374c <SystemInit+0x28>)
 800372a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800372e:	4a07      	ldr	r2, [pc, #28]	; (800374c <SystemInit+0x28>)
 8003730:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003734:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003738:	4b04      	ldr	r3, [pc, #16]	; (800374c <SystemInit+0x28>)
 800373a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800373e:	609a      	str	r2, [r3, #8]
#endif
}
 8003740:	bf00      	nop
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	e000ed00 	.word	0xe000ed00

08003750 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b086      	sub	sp, #24
 8003754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003756:	f107 0308 	add.w	r3, r7, #8
 800375a:	2200      	movs	r2, #0
 800375c:	601a      	str	r2, [r3, #0]
 800375e:	605a      	str	r2, [r3, #4]
 8003760:	609a      	str	r2, [r3, #8]
 8003762:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003764:	463b      	mov	r3, r7
 8003766:	2200      	movs	r2, #0
 8003768:	601a      	str	r2, [r3, #0]
 800376a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800376c:	4b1d      	ldr	r3, [pc, #116]	; (80037e4 <MX_TIM2_Init+0x94>)
 800376e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003772:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 49;
 8003774:	4b1b      	ldr	r3, [pc, #108]	; (80037e4 <MX_TIM2_Init+0x94>)
 8003776:	2231      	movs	r2, #49	; 0x31
 8003778:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800377a:	4b1a      	ldr	r3, [pc, #104]	; (80037e4 <MX_TIM2_Init+0x94>)
 800377c:	2210      	movs	r2, #16
 800377e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8003780:	4b18      	ldr	r3, [pc, #96]	; (80037e4 <MX_TIM2_Init+0x94>)
 8003782:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003786:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003788:	4b16      	ldr	r3, [pc, #88]	; (80037e4 <MX_TIM2_Init+0x94>)
 800378a:	2200      	movs	r2, #0
 800378c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800378e:	4b15      	ldr	r3, [pc, #84]	; (80037e4 <MX_TIM2_Init+0x94>)
 8003790:	2200      	movs	r2, #0
 8003792:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003794:	4813      	ldr	r0, [pc, #76]	; (80037e4 <MX_TIM2_Init+0x94>)
 8003796:	f003 ffe6 	bl	8007766 <HAL_TIM_Base_Init>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80037a0:	f7ff fd52 	bl	8003248 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80037a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80037aa:	f107 0308 	add.w	r3, r7, #8
 80037ae:	4619      	mov	r1, r3
 80037b0:	480c      	ldr	r0, [pc, #48]	; (80037e4 <MX_TIM2_Init+0x94>)
 80037b2:	f004 fab7 	bl	8007d24 <HAL_TIM_ConfigClockSource>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d001      	beq.n	80037c0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80037bc:	f7ff fd44 	bl	8003248 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037c0:	2300      	movs	r3, #0
 80037c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037c4:	2300      	movs	r3, #0
 80037c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80037c8:	463b      	mov	r3, r7
 80037ca:	4619      	mov	r1, r3
 80037cc:	4805      	ldr	r0, [pc, #20]	; (80037e4 <MX_TIM2_Init+0x94>)
 80037ce:	f004 ff39 	bl	8008644 <HAL_TIMEx_MasterConfigSynchronization>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d001      	beq.n	80037dc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80037d8:	f7ff fd36 	bl	8003248 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80037dc:	bf00      	nop
 80037de:	3718      	adds	r7, #24
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	20007dcc 	.word	0x20007dcc

080037e8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80037ee:	f107 0308 	add.w	r3, r7, #8
 80037f2:	2200      	movs	r2, #0
 80037f4:	601a      	str	r2, [r3, #0]
 80037f6:	605a      	str	r2, [r3, #4]
 80037f8:	609a      	str	r2, [r3, #8]
 80037fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037fc:	463b      	mov	r3, r7
 80037fe:	2200      	movs	r2, #0
 8003800:	601a      	str	r2, [r3, #0]
 8003802:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003804:	4b1d      	ldr	r3, [pc, #116]	; (800387c <MX_TIM3_Init+0x94>)
 8003806:	4a1e      	ldr	r2, [pc, #120]	; (8003880 <MX_TIM3_Init+0x98>)
 8003808:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800380a:	4b1c      	ldr	r3, [pc, #112]	; (800387c <MX_TIM3_Init+0x94>)
 800380c:	2200      	movs	r2, #0
 800380e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003810:	4b1a      	ldr	r3, [pc, #104]	; (800387c <MX_TIM3_Init+0x94>)
 8003812:	2200      	movs	r2, #0
 8003814:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1125;
 8003816:	4b19      	ldr	r3, [pc, #100]	; (800387c <MX_TIM3_Init+0x94>)
 8003818:	f240 4265 	movw	r2, #1125	; 0x465
 800381c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800381e:	4b17      	ldr	r3, [pc, #92]	; (800387c <MX_TIM3_Init+0x94>)
 8003820:	2200      	movs	r2, #0
 8003822:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003824:	4b15      	ldr	r3, [pc, #84]	; (800387c <MX_TIM3_Init+0x94>)
 8003826:	2200      	movs	r2, #0
 8003828:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800382a:	4814      	ldr	r0, [pc, #80]	; (800387c <MX_TIM3_Init+0x94>)
 800382c:	f003 ff9b 	bl	8007766 <HAL_TIM_Base_Init>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d001      	beq.n	800383a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8003836:	f7ff fd07 	bl	8003248 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800383a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800383e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003840:	f107 0308 	add.w	r3, r7, #8
 8003844:	4619      	mov	r1, r3
 8003846:	480d      	ldr	r0, [pc, #52]	; (800387c <MX_TIM3_Init+0x94>)
 8003848:	f004 fa6c 	bl	8007d24 <HAL_TIM_ConfigClockSource>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8003852:	f7ff fcf9 	bl	8003248 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003856:	2320      	movs	r3, #32
 8003858:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800385a:	2300      	movs	r3, #0
 800385c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800385e:	463b      	mov	r3, r7
 8003860:	4619      	mov	r1, r3
 8003862:	4806      	ldr	r0, [pc, #24]	; (800387c <MX_TIM3_Init+0x94>)
 8003864:	f004 feee 	bl	8008644 <HAL_TIMEx_MasterConfigSynchronization>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800386e:	f7ff fceb 	bl	8003248 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003872:	bf00      	nop
 8003874:	3718      	adds	r7, #24
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	20007d84 	.word	0x20007d84
 8003880:	40000400 	.word	0x40000400

08003884 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800388a:	f107 0308 	add.w	r3, r7, #8
 800388e:	2200      	movs	r2, #0
 8003890:	601a      	str	r2, [r3, #0]
 8003892:	605a      	str	r2, [r3, #4]
 8003894:	609a      	str	r2, [r3, #8]
 8003896:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003898:	463b      	mov	r3, r7
 800389a:	2200      	movs	r2, #0
 800389c:	601a      	str	r2, [r3, #0]
 800389e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80038a0:	4b1d      	ldr	r3, [pc, #116]	; (8003918 <MX_TIM5_Init+0x94>)
 80038a2:	4a1e      	ldr	r2, [pc, #120]	; (800391c <MX_TIM5_Init+0x98>)
 80038a4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 7199;
 80038a6:	4b1c      	ldr	r3, [pc, #112]	; (8003918 <MX_TIM5_Init+0x94>)
 80038a8:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80038ac:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038ae:	4b1a      	ldr	r3, [pc, #104]	; (8003918 <MX_TIM5_Init+0x94>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80038b4:	4b18      	ldr	r3, [pc, #96]	; (8003918 <MX_TIM5_Init+0x94>)
 80038b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80038ba:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038bc:	4b16      	ldr	r3, [pc, #88]	; (8003918 <MX_TIM5_Init+0x94>)
 80038be:	2200      	movs	r2, #0
 80038c0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038c2:	4b15      	ldr	r3, [pc, #84]	; (8003918 <MX_TIM5_Init+0x94>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80038c8:	4813      	ldr	r0, [pc, #76]	; (8003918 <MX_TIM5_Init+0x94>)
 80038ca:	f003 ff4c 	bl	8007766 <HAL_TIM_Base_Init>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d001      	beq.n	80038d8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80038d4:	f7ff fcb8 	bl	8003248 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80038de:	f107 0308 	add.w	r3, r7, #8
 80038e2:	4619      	mov	r1, r3
 80038e4:	480c      	ldr	r0, [pc, #48]	; (8003918 <MX_TIM5_Init+0x94>)
 80038e6:	f004 fa1d 	bl	8007d24 <HAL_TIM_ConfigClockSource>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d001      	beq.n	80038f4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80038f0:	f7ff fcaa 	bl	8003248 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038f4:	2300      	movs	r3, #0
 80038f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038f8:	2300      	movs	r3, #0
 80038fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80038fc:	463b      	mov	r3, r7
 80038fe:	4619      	mov	r1, r3
 8003900:	4805      	ldr	r0, [pc, #20]	; (8003918 <MX_TIM5_Init+0x94>)
 8003902:	f004 fe9f 	bl	8008644 <HAL_TIMEx_MasterConfigSynchronization>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d001      	beq.n	8003910 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800390c:	f7ff fc9c 	bl	8003248 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003910:	bf00      	nop
 8003912:	3718      	adds	r7, #24
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	20007d3c 	.word	0x20007d3c
 800391c:	40000c00 	.word	0x40000c00

08003920 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b096      	sub	sp, #88	; 0x58
 8003924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003926:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800392a:	2200      	movs	r2, #0
 800392c:	601a      	str	r2, [r3, #0]
 800392e:	605a      	str	r2, [r3, #4]
 8003930:	609a      	str	r2, [r3, #8]
 8003932:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003934:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003938:	2200      	movs	r2, #0
 800393a:	601a      	str	r2, [r3, #0]
 800393c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800393e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003942:	2200      	movs	r2, #0
 8003944:	601a      	str	r2, [r3, #0]
 8003946:	605a      	str	r2, [r3, #4]
 8003948:	609a      	str	r2, [r3, #8]
 800394a:	60da      	str	r2, [r3, #12]
 800394c:	611a      	str	r2, [r3, #16]
 800394e:	615a      	str	r2, [r3, #20]
 8003950:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003952:	1d3b      	adds	r3, r7, #4
 8003954:	2220      	movs	r2, #32
 8003956:	2100      	movs	r1, #0
 8003958:	4618      	mov	r0, r3
 800395a:	f008 f9cf 	bl	800bcfc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800395e:	4b4b      	ldr	r3, [pc, #300]	; (8003a8c <MX_TIM8_Init+0x16c>)
 8003960:	4a4b      	ldr	r2, [pc, #300]	; (8003a90 <MX_TIM8_Init+0x170>)
 8003962:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003964:	4b49      	ldr	r3, [pc, #292]	; (8003a8c <MX_TIM8_Init+0x16c>)
 8003966:	2200      	movs	r2, #0
 8003968:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800396a:	4b48      	ldr	r3, [pc, #288]	; (8003a8c <MX_TIM8_Init+0x16c>)
 800396c:	2200      	movs	r2, #0
 800396e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 255;
 8003970:	4b46      	ldr	r3, [pc, #280]	; (8003a8c <MX_TIM8_Init+0x16c>)
 8003972:	22ff      	movs	r2, #255	; 0xff
 8003974:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003976:	4b45      	ldr	r3, [pc, #276]	; (8003a8c <MX_TIM8_Init+0x16c>)
 8003978:	2200      	movs	r2, #0
 800397a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800397c:	4b43      	ldr	r3, [pc, #268]	; (8003a8c <MX_TIM8_Init+0x16c>)
 800397e:	2200      	movs	r2, #0
 8003980:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003982:	4b42      	ldr	r3, [pc, #264]	; (8003a8c <MX_TIM8_Init+0x16c>)
 8003984:	2200      	movs	r2, #0
 8003986:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003988:	4840      	ldr	r0, [pc, #256]	; (8003a8c <MX_TIM8_Init+0x16c>)
 800398a:	f003 feec 	bl	8007766 <HAL_TIM_Base_Init>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d001      	beq.n	8003998 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8003994:	f7ff fc58 	bl	8003248 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003998:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800399c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800399e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80039a2:	4619      	mov	r1, r3
 80039a4:	4839      	ldr	r0, [pc, #228]	; (8003a8c <MX_TIM8_Init+0x16c>)
 80039a6:	f004 f9bd 	bl	8007d24 <HAL_TIM_ConfigClockSource>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d001      	beq.n	80039b4 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 80039b0:	f7ff fc4a 	bl	8003248 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80039b4:	4835      	ldr	r0, [pc, #212]	; (8003a8c <MX_TIM8_Init+0x16c>)
 80039b6:	f003 ff95 	bl	80078e4 <HAL_TIM_PWM_Init>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d001      	beq.n	80039c4 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80039c0:	f7ff fc42 	bl	8003248 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039c4:	2300      	movs	r3, #0
 80039c6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039c8:	2300      	movs	r3, #0
 80039ca:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80039cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80039d0:	4619      	mov	r1, r3
 80039d2:	482e      	ldr	r0, [pc, #184]	; (8003a8c <MX_TIM8_Init+0x16c>)
 80039d4:	f004 fe36 	bl	8008644 <HAL_TIMEx_MasterConfigSynchronization>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 80039de:	f7ff fc33 	bl	8003248 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80039e2:	2360      	movs	r3, #96	; 0x60
 80039e4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 128;
 80039e6:	2380      	movs	r3, #128	; 0x80
 80039e8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80039ea:	2300      	movs	r3, #0
 80039ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 80039ee:	2308      	movs	r3, #8
 80039f0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80039f2:	2300      	movs	r3, #0
 80039f4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80039f6:	2300      	movs	r3, #0
 80039f8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80039fa:	2300      	movs	r3, #0
 80039fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80039fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a02:	2200      	movs	r2, #0
 8003a04:	4619      	mov	r1, r3
 8003a06:	4821      	ldr	r0, [pc, #132]	; (8003a8c <MX_TIM8_Init+0x16c>)
 8003a08:	f004 f8ce 	bl	8007ba8 <HAL_TIM_PWM_ConfigChannel>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 8003a12:	f7ff fc19 	bl	8003248 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003a16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a1a:	2204      	movs	r2, #4
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	481b      	ldr	r0, [pc, #108]	; (8003a8c <MX_TIM8_Init+0x16c>)
 8003a20:	f004 f8c2 	bl	8007ba8 <HAL_TIM_PWM_ConfigChannel>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 8003a2a:	f7ff fc0d 	bl	8003248 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003a32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a36:	2208      	movs	r2, #8
 8003a38:	4619      	mov	r1, r3
 8003a3a:	4814      	ldr	r0, [pc, #80]	; (8003a8c <MX_TIM8_Init+0x16c>)
 8003a3c:	f004 f8b4 	bl	8007ba8 <HAL_TIM_PWM_ConfigChannel>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 8003a46:	f7ff fbff 	bl	8003248 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003a52:	2300      	movs	r3, #0
 8003a54:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003a56:	2300      	movs	r3, #0
 8003a58:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003a5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a62:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003a64:	2300      	movs	r3, #0
 8003a66:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003a68:	1d3b      	adds	r3, r7, #4
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	4807      	ldr	r0, [pc, #28]	; (8003a8c <MX_TIM8_Init+0x16c>)
 8003a6e:	f004 fe65 	bl	800873c <HAL_TIMEx_ConfigBreakDeadTime>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d001      	beq.n	8003a7c <MX_TIM8_Init+0x15c>
  {
    Error_Handler();
 8003a78:	f7ff fbe6 	bl	8003248 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003a7c:	4803      	ldr	r0, [pc, #12]	; (8003a8c <MX_TIM8_Init+0x16c>)
 8003a7e:	f000 f891 	bl	8003ba4 <HAL_TIM_MspPostInit>

}
 8003a82:	bf00      	nop
 8003a84:	3758      	adds	r7, #88	; 0x58
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	20007cf4 	.word	0x20007cf4
 8003a90:	40010400 	.word	0x40010400

08003a94 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b08c      	sub	sp, #48	; 0x30
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a9c:	f107 031c 	add.w	r3, r7, #28
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	601a      	str	r2, [r3, #0]
 8003aa4:	605a      	str	r2, [r3, #4]
 8003aa6:	609a      	str	r2, [r3, #8]
 8003aa8:	60da      	str	r2, [r3, #12]
 8003aaa:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ab4:	d10e      	bne.n	8003ad4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	61bb      	str	r3, [r7, #24]
 8003aba:	4b35      	ldr	r3, [pc, #212]	; (8003b90 <HAL_TIM_Base_MspInit+0xfc>)
 8003abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abe:	4a34      	ldr	r2, [pc, #208]	; (8003b90 <HAL_TIM_Base_MspInit+0xfc>)
 8003ac0:	f043 0301 	orr.w	r3, r3, #1
 8003ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ac6:	4b32      	ldr	r3, [pc, #200]	; (8003b90 <HAL_TIM_Base_MspInit+0xfc>)
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	61bb      	str	r3, [r7, #24]
 8003ad0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8003ad2:	e058      	b.n	8003b86 <HAL_TIM_Base_MspInit+0xf2>
  else if(tim_baseHandle->Instance==TIM3)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a2e      	ldr	r2, [pc, #184]	; (8003b94 <HAL_TIM_Base_MspInit+0x100>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d10e      	bne.n	8003afc <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003ade:	2300      	movs	r3, #0
 8003ae0:	617b      	str	r3, [r7, #20]
 8003ae2:	4b2b      	ldr	r3, [pc, #172]	; (8003b90 <HAL_TIM_Base_MspInit+0xfc>)
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae6:	4a2a      	ldr	r2, [pc, #168]	; (8003b90 <HAL_TIM_Base_MspInit+0xfc>)
 8003ae8:	f043 0302 	orr.w	r3, r3, #2
 8003aec:	6413      	str	r3, [r2, #64]	; 0x40
 8003aee:	4b28      	ldr	r3, [pc, #160]	; (8003b90 <HAL_TIM_Base_MspInit+0xfc>)
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	617b      	str	r3, [r7, #20]
 8003af8:	697b      	ldr	r3, [r7, #20]
}
 8003afa:	e044      	b.n	8003b86 <HAL_TIM_Base_MspInit+0xf2>
  else if(tim_baseHandle->Instance==TIM5)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a25      	ldr	r2, [pc, #148]	; (8003b98 <HAL_TIM_Base_MspInit+0x104>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d12c      	bne.n	8003b60 <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003b06:	2300      	movs	r3, #0
 8003b08:	613b      	str	r3, [r7, #16]
 8003b0a:	4b21      	ldr	r3, [pc, #132]	; (8003b90 <HAL_TIM_Base_MspInit+0xfc>)
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0e:	4a20      	ldr	r2, [pc, #128]	; (8003b90 <HAL_TIM_Base_MspInit+0xfc>)
 8003b10:	f043 0308 	orr.w	r3, r3, #8
 8003b14:	6413      	str	r3, [r2, #64]	; 0x40
 8003b16:	4b1e      	ldr	r3, [pc, #120]	; (8003b90 <HAL_TIM_Base_MspInit+0xfc>)
 8003b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1a:	f003 0308 	and.w	r3, r3, #8
 8003b1e:	613b      	str	r3, [r7, #16]
 8003b20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b22:	2300      	movs	r3, #0
 8003b24:	60fb      	str	r3, [r7, #12]
 8003b26:	4b1a      	ldr	r3, [pc, #104]	; (8003b90 <HAL_TIM_Base_MspInit+0xfc>)
 8003b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2a:	4a19      	ldr	r2, [pc, #100]	; (8003b90 <HAL_TIM_Base_MspInit+0xfc>)
 8003b2c:	f043 0301 	orr.w	r3, r3, #1
 8003b30:	6313      	str	r3, [r2, #48]	; 0x30
 8003b32:	4b17      	ldr	r3, [pc, #92]	; (8003b90 <HAL_TIM_Base_MspInit+0xfc>)
 8003b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	60fb      	str	r3, [r7, #12]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003b3e:	230f      	movs	r3, #15
 8003b40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b42:	2302      	movs	r3, #2
 8003b44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b46:	2300      	movs	r3, #0
 8003b48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003b4e:	2302      	movs	r3, #2
 8003b50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b52:	f107 031c 	add.w	r3, r7, #28
 8003b56:	4619      	mov	r1, r3
 8003b58:	4810      	ldr	r0, [pc, #64]	; (8003b9c <HAL_TIM_Base_MspInit+0x108>)
 8003b5a:	f001 ff25 	bl	80059a8 <HAL_GPIO_Init>
}
 8003b5e:	e012      	b.n	8003b86 <HAL_TIM_Base_MspInit+0xf2>
  else if(tim_baseHandle->Instance==TIM8)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a0e      	ldr	r2, [pc, #56]	; (8003ba0 <HAL_TIM_Base_MspInit+0x10c>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d10d      	bne.n	8003b86 <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	60bb      	str	r3, [r7, #8]
 8003b6e:	4b08      	ldr	r3, [pc, #32]	; (8003b90 <HAL_TIM_Base_MspInit+0xfc>)
 8003b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b72:	4a07      	ldr	r2, [pc, #28]	; (8003b90 <HAL_TIM_Base_MspInit+0xfc>)
 8003b74:	f043 0302 	orr.w	r3, r3, #2
 8003b78:	6453      	str	r3, [r2, #68]	; 0x44
 8003b7a:	4b05      	ldr	r3, [pc, #20]	; (8003b90 <HAL_TIM_Base_MspInit+0xfc>)
 8003b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	60bb      	str	r3, [r7, #8]
 8003b84:	68bb      	ldr	r3, [r7, #8]
}
 8003b86:	bf00      	nop
 8003b88:	3730      	adds	r7, #48	; 0x30
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	40023800 	.word	0x40023800
 8003b94:	40000400 	.word	0x40000400
 8003b98:	40000c00 	.word	0x40000c00
 8003b9c:	40020000 	.word	0x40020000
 8003ba0:	40010400 	.word	0x40010400

08003ba4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b08a      	sub	sp, #40	; 0x28
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bac:	f107 0314 	add.w	r3, r7, #20
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	601a      	str	r2, [r3, #0]
 8003bb4:	605a      	str	r2, [r3, #4]
 8003bb6:	609a      	str	r2, [r3, #8]
 8003bb8:	60da      	str	r2, [r3, #12]
 8003bba:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a21      	ldr	r2, [pc, #132]	; (8003c48 <HAL_TIM_MspPostInit+0xa4>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d13c      	bne.n	8003c40 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	613b      	str	r3, [r7, #16]
 8003bca:	4b20      	ldr	r3, [pc, #128]	; (8003c4c <HAL_TIM_MspPostInit+0xa8>)
 8003bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bce:	4a1f      	ldr	r2, [pc, #124]	; (8003c4c <HAL_TIM_MspPostInit+0xa8>)
 8003bd0:	f043 0301 	orr.w	r3, r3, #1
 8003bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8003bd6:	4b1d      	ldr	r3, [pc, #116]	; (8003c4c <HAL_TIM_MspPostInit+0xa8>)
 8003bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	613b      	str	r3, [r7, #16]
 8003be0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003be2:	2300      	movs	r3, #0
 8003be4:	60fb      	str	r3, [r7, #12]
 8003be6:	4b19      	ldr	r3, [pc, #100]	; (8003c4c <HAL_TIM_MspPostInit+0xa8>)
 8003be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bea:	4a18      	ldr	r2, [pc, #96]	; (8003c4c <HAL_TIM_MspPostInit+0xa8>)
 8003bec:	f043 0302 	orr.w	r3, r3, #2
 8003bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8003bf2:	4b16      	ldr	r3, [pc, #88]	; (8003c4c <HAL_TIM_MspPostInit+0xa8>)
 8003bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	60fb      	str	r3, [r7, #12]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PA7     ------> TIM8_CH1N
    PB14     ------> TIM8_CH2N
    PB15     ------> TIM8_CH3N
    */
    GPIO_InitStruct.Pin = LED_RED_Pin;
 8003bfe:	2380      	movs	r3, #128	; 0x80
 8003c00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c02:	2302      	movs	r3, #2
 8003c04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c06:	2300      	movs	r3, #0
 8003c08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8003c12:	f107 0314 	add.w	r3, r7, #20
 8003c16:	4619      	mov	r1, r3
 8003c18:	480d      	ldr	r0, [pc, #52]	; (8003c50 <HAL_TIM_MspPostInit+0xac>)
 8003c1a:	f001 fec5 	bl	80059a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_BLUE_Pin;
 8003c1e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003c22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c24:	2302      	movs	r3, #2
 8003c26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003c30:	2303      	movs	r3, #3
 8003c32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c34:	f107 0314 	add.w	r3, r7, #20
 8003c38:	4619      	mov	r1, r3
 8003c3a:	4806      	ldr	r0, [pc, #24]	; (8003c54 <HAL_TIM_MspPostInit+0xb0>)
 8003c3c:	f001 feb4 	bl	80059a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003c40:	bf00      	nop
 8003c42:	3728      	adds	r7, #40	; 0x28
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	40010400 	.word	0x40010400
 8003c4c:	40023800 	.word	0x40023800
 8003c50:	40020000 	.word	0x40020000
 8003c54:	40020400 	.word	0x40020400

08003c58 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003c5c:	4b11      	ldr	r3, [pc, #68]	; (8003ca4 <MX_USART1_UART_Init+0x4c>)
 8003c5e:	4a12      	ldr	r2, [pc, #72]	; (8003ca8 <MX_USART1_UART_Init+0x50>)
 8003c60:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003c62:	4b10      	ldr	r3, [pc, #64]	; (8003ca4 <MX_USART1_UART_Init+0x4c>)
 8003c64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003c68:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003c6a:	4b0e      	ldr	r3, [pc, #56]	; (8003ca4 <MX_USART1_UART_Init+0x4c>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003c70:	4b0c      	ldr	r3, [pc, #48]	; (8003ca4 <MX_USART1_UART_Init+0x4c>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003c76:	4b0b      	ldr	r3, [pc, #44]	; (8003ca4 <MX_USART1_UART_Init+0x4c>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003c7c:	4b09      	ldr	r3, [pc, #36]	; (8003ca4 <MX_USART1_UART_Init+0x4c>)
 8003c7e:	220c      	movs	r2, #12
 8003c80:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c82:	4b08      	ldr	r3, [pc, #32]	; (8003ca4 <MX_USART1_UART_Init+0x4c>)
 8003c84:	2200      	movs	r2, #0
 8003c86:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c88:	4b06      	ldr	r3, [pc, #24]	; (8003ca4 <MX_USART1_UART_Init+0x4c>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8003c8e:	4805      	ldr	r0, [pc, #20]	; (8003ca4 <MX_USART1_UART_Init+0x4c>)
 8003c90:	f004 fe2c 	bl	80088ec <HAL_HalfDuplex_Init>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003c9a:	f7ff fad5 	bl	8003248 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003c9e:	bf00      	nop
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	20008098 	.word	0x20008098
 8003ca8:	40011000 	.word	0x40011000

08003cac <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003cb0:	4b11      	ldr	r3, [pc, #68]	; (8003cf8 <MX_USART3_UART_Init+0x4c>)
 8003cb2:	4a12      	ldr	r2, [pc, #72]	; (8003cfc <MX_USART3_UART_Init+0x50>)
 8003cb4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003cb6:	4b10      	ldr	r3, [pc, #64]	; (8003cf8 <MX_USART3_UART_Init+0x4c>)
 8003cb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003cbc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003cbe:	4b0e      	ldr	r3, [pc, #56]	; (8003cf8 <MX_USART3_UART_Init+0x4c>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003cc4:	4b0c      	ldr	r3, [pc, #48]	; (8003cf8 <MX_USART3_UART_Init+0x4c>)
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003cca:	4b0b      	ldr	r3, [pc, #44]	; (8003cf8 <MX_USART3_UART_Init+0x4c>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003cd0:	4b09      	ldr	r3, [pc, #36]	; (8003cf8 <MX_USART3_UART_Init+0x4c>)
 8003cd2:	220c      	movs	r2, #12
 8003cd4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003cd6:	4b08      	ldr	r3, [pc, #32]	; (8003cf8 <MX_USART3_UART_Init+0x4c>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003cdc:	4b06      	ldr	r3, [pc, #24]	; (8003cf8 <MX_USART3_UART_Init+0x4c>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003ce2:	4805      	ldr	r0, [pc, #20]	; (8003cf8 <MX_USART3_UART_Init+0x4c>)
 8003ce4:	f004 fdb5 	bl	8008852 <HAL_UART_Init>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003cee:	f7ff faab 	bl	8003248 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003cf2:	bf00      	nop
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	20007ed4 	.word	0x20007ed4
 8003cfc:	40004800 	.word	0x40004800

08003d00 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003d04:	4b11      	ldr	r3, [pc, #68]	; (8003d4c <MX_USART6_UART_Init+0x4c>)
 8003d06:	4a12      	ldr	r2, [pc, #72]	; (8003d50 <MX_USART6_UART_Init+0x50>)
 8003d08:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8003d0a:	4b10      	ldr	r3, [pc, #64]	; (8003d4c <MX_USART6_UART_Init+0x4c>)
 8003d0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003d10:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003d12:	4b0e      	ldr	r3, [pc, #56]	; (8003d4c <MX_USART6_UART_Init+0x4c>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003d18:	4b0c      	ldr	r3, [pc, #48]	; (8003d4c <MX_USART6_UART_Init+0x4c>)
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003d1e:	4b0b      	ldr	r3, [pc, #44]	; (8003d4c <MX_USART6_UART_Init+0x4c>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003d24:	4b09      	ldr	r3, [pc, #36]	; (8003d4c <MX_USART6_UART_Init+0x4c>)
 8003d26:	220c      	movs	r2, #12
 8003d28:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d2a:	4b08      	ldr	r3, [pc, #32]	; (8003d4c <MX_USART6_UART_Init+0x4c>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d30:	4b06      	ldr	r3, [pc, #24]	; (8003d4c <MX_USART6_UART_Init+0x4c>)
 8003d32:	2200      	movs	r2, #0
 8003d34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003d36:	4805      	ldr	r0, [pc, #20]	; (8003d4c <MX_USART6_UART_Init+0x4c>)
 8003d38:	f004 fd8b 	bl	8008852 <HAL_UART_Init>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d001      	beq.n	8003d46 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003d42:	f7ff fa81 	bl	8003248 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003d46:	bf00      	nop
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	200080dc 	.word	0x200080dc
 8003d50:	40011400 	.word	0x40011400

08003d54 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b08e      	sub	sp, #56	; 0x38
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d60:	2200      	movs	r2, #0
 8003d62:	601a      	str	r2, [r3, #0]
 8003d64:	605a      	str	r2, [r3, #4]
 8003d66:	609a      	str	r2, [r3, #8]
 8003d68:	60da      	str	r2, [r3, #12]
 8003d6a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a4c      	ldr	r2, [pc, #304]	; (8003ea4 <HAL_UART_MspInit+0x150>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	f040 80a4 	bne.w	8003ec0 <HAL_UART_MspInit+0x16c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003d78:	2300      	movs	r3, #0
 8003d7a:	623b      	str	r3, [r7, #32]
 8003d7c:	4b4a      	ldr	r3, [pc, #296]	; (8003ea8 <HAL_UART_MspInit+0x154>)
 8003d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d80:	4a49      	ldr	r2, [pc, #292]	; (8003ea8 <HAL_UART_MspInit+0x154>)
 8003d82:	f043 0310 	orr.w	r3, r3, #16
 8003d86:	6453      	str	r3, [r2, #68]	; 0x44
 8003d88:	4b47      	ldr	r3, [pc, #284]	; (8003ea8 <HAL_UART_MspInit+0x154>)
 8003d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d8c:	f003 0310 	and.w	r3, r3, #16
 8003d90:	623b      	str	r3, [r7, #32]
 8003d92:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d94:	2300      	movs	r3, #0
 8003d96:	61fb      	str	r3, [r7, #28]
 8003d98:	4b43      	ldr	r3, [pc, #268]	; (8003ea8 <HAL_UART_MspInit+0x154>)
 8003d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9c:	4a42      	ldr	r2, [pc, #264]	; (8003ea8 <HAL_UART_MspInit+0x154>)
 8003d9e:	f043 0301 	orr.w	r3, r3, #1
 8003da2:	6313      	str	r3, [r2, #48]	; 0x30
 8003da4:	4b40      	ldr	r3, [pc, #256]	; (8003ea8 <HAL_UART_MspInit+0x154>)
 8003da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da8:	f003 0301 	and.w	r3, r3, #1
 8003dac:	61fb      	str	r3, [r7, #28]
 8003dae:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = SERVO_TX_Pin;
 8003db0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003db4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003db6:	2312      	movs	r3, #18
 8003db8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003dc2:	2307      	movs	r3, #7
 8003dc4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SERVO_TX_GPIO_Port, &GPIO_InitStruct);
 8003dc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003dca:	4619      	mov	r1, r3
 8003dcc:	4837      	ldr	r0, [pc, #220]	; (8003eac <HAL_UART_MspInit+0x158>)
 8003dce:	f001 fdeb 	bl	80059a8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 8003dd2:	4b37      	ldr	r3, [pc, #220]	; (8003eb0 <HAL_UART_MspInit+0x15c>)
 8003dd4:	4a37      	ldr	r2, [pc, #220]	; (8003eb4 <HAL_UART_MspInit+0x160>)
 8003dd6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003dd8:	4b35      	ldr	r3, [pc, #212]	; (8003eb0 <HAL_UART_MspInit+0x15c>)
 8003dda:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003dde:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003de0:	4b33      	ldr	r3, [pc, #204]	; (8003eb0 <HAL_UART_MspInit+0x15c>)
 8003de2:	2200      	movs	r2, #0
 8003de4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003de6:	4b32      	ldr	r3, [pc, #200]	; (8003eb0 <HAL_UART_MspInit+0x15c>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003dec:	4b30      	ldr	r3, [pc, #192]	; (8003eb0 <HAL_UART_MspInit+0x15c>)
 8003dee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003df2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003df4:	4b2e      	ldr	r3, [pc, #184]	; (8003eb0 <HAL_UART_MspInit+0x15c>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003dfa:	4b2d      	ldr	r3, [pc, #180]	; (8003eb0 <HAL_UART_MspInit+0x15c>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003e00:	4b2b      	ldr	r3, [pc, #172]	; (8003eb0 <HAL_UART_MspInit+0x15c>)
 8003e02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e06:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003e08:	4b29      	ldr	r3, [pc, #164]	; (8003eb0 <HAL_UART_MspInit+0x15c>)
 8003e0a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003e0e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e10:	4b27      	ldr	r3, [pc, #156]	; (8003eb0 <HAL_UART_MspInit+0x15c>)
 8003e12:	2200      	movs	r2, #0
 8003e14:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003e16:	4826      	ldr	r0, [pc, #152]	; (8003eb0 <HAL_UART_MspInit+0x15c>)
 8003e18:	f001 f9c4 	bl	80051a4 <HAL_DMA_Init>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d001      	beq.n	8003e26 <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 8003e22:	f7ff fa11 	bl	8003248 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a21      	ldr	r2, [pc, #132]	; (8003eb0 <HAL_UART_MspInit+0x15c>)
 8003e2a:	639a      	str	r2, [r3, #56]	; 0x38
 8003e2c:	4a20      	ldr	r2, [pc, #128]	; (8003eb0 <HAL_UART_MspInit+0x15c>)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8003e32:	4b21      	ldr	r3, [pc, #132]	; (8003eb8 <HAL_UART_MspInit+0x164>)
 8003e34:	4a21      	ldr	r2, [pc, #132]	; (8003ebc <HAL_UART_MspInit+0x168>)
 8003e36:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8003e38:	4b1f      	ldr	r3, [pc, #124]	; (8003eb8 <HAL_UART_MspInit+0x164>)
 8003e3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003e3e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003e40:	4b1d      	ldr	r3, [pc, #116]	; (8003eb8 <HAL_UART_MspInit+0x164>)
 8003e42:	2240      	movs	r2, #64	; 0x40
 8003e44:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e46:	4b1c      	ldr	r3, [pc, #112]	; (8003eb8 <HAL_UART_MspInit+0x164>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003e4c:	4b1a      	ldr	r3, [pc, #104]	; (8003eb8 <HAL_UART_MspInit+0x164>)
 8003e4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e52:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e54:	4b18      	ldr	r3, [pc, #96]	; (8003eb8 <HAL_UART_MspInit+0x164>)
 8003e56:	2200      	movs	r2, #0
 8003e58:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e5a:	4b17      	ldr	r3, [pc, #92]	; (8003eb8 <HAL_UART_MspInit+0x164>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003e60:	4b15      	ldr	r3, [pc, #84]	; (8003eb8 <HAL_UART_MspInit+0x164>)
 8003e62:	2200      	movs	r2, #0
 8003e64:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8003e66:	4b14      	ldr	r3, [pc, #80]	; (8003eb8 <HAL_UART_MspInit+0x164>)
 8003e68:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003e6c:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e6e:	4b12      	ldr	r3, [pc, #72]	; (8003eb8 <HAL_UART_MspInit+0x164>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003e74:	4810      	ldr	r0, [pc, #64]	; (8003eb8 <HAL_UART_MspInit+0x164>)
 8003e76:	f001 f995 	bl	80051a4 <HAL_DMA_Init>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d001      	beq.n	8003e84 <HAL_UART_MspInit+0x130>
    {
      Error_Handler();
 8003e80:	f7ff f9e2 	bl	8003248 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a0c      	ldr	r2, [pc, #48]	; (8003eb8 <HAL_UART_MspInit+0x164>)
 8003e88:	635a      	str	r2, [r3, #52]	; 0x34
 8003e8a:	4a0b      	ldr	r2, [pc, #44]	; (8003eb8 <HAL_UART_MspInit+0x164>)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003e90:	2200      	movs	r2, #0
 8003e92:	2105      	movs	r1, #5
 8003e94:	2025      	movs	r0, #37	; 0x25
 8003e96:	f001 f95b 	bl	8005150 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003e9a:	2025      	movs	r0, #37	; 0x25
 8003e9c:	f001 f974 	bl	8005188 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8003ea0:	e171      	b.n	8004186 <HAL_UART_MspInit+0x432>
 8003ea2:	bf00      	nop
 8003ea4:	40011000 	.word	0x40011000
 8003ea8:	40023800 	.word	0x40023800
 8003eac:	40020000 	.word	0x40020000
 8003eb0:	20008038 	.word	0x20008038
 8003eb4:	40026488 	.word	0x40026488
 8003eb8:	20007f78 	.word	0x20007f78
 8003ebc:	400264b8 	.word	0x400264b8
  else if(uartHandle->Instance==USART3)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a5b      	ldr	r2, [pc, #364]	; (8004034 <HAL_UART_MspInit+0x2e0>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	f040 80c4 	bne.w	8004054 <HAL_UART_MspInit+0x300>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003ecc:	2300      	movs	r3, #0
 8003ece:	61bb      	str	r3, [r7, #24]
 8003ed0:	4b59      	ldr	r3, [pc, #356]	; (8004038 <HAL_UART_MspInit+0x2e4>)
 8003ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed4:	4a58      	ldr	r2, [pc, #352]	; (8004038 <HAL_UART_MspInit+0x2e4>)
 8003ed6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003eda:	6413      	str	r3, [r2, #64]	; 0x40
 8003edc:	4b56      	ldr	r3, [pc, #344]	; (8004038 <HAL_UART_MspInit+0x2e4>)
 8003ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ee4:	61bb      	str	r3, [r7, #24]
 8003ee6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ee8:	2300      	movs	r3, #0
 8003eea:	617b      	str	r3, [r7, #20]
 8003eec:	4b52      	ldr	r3, [pc, #328]	; (8004038 <HAL_UART_MspInit+0x2e4>)
 8003eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef0:	4a51      	ldr	r2, [pc, #324]	; (8004038 <HAL_UART_MspInit+0x2e4>)
 8003ef2:	f043 0304 	orr.w	r3, r3, #4
 8003ef6:	6313      	str	r3, [r2, #48]	; 0x30
 8003ef8:	4b4f      	ldr	r3, [pc, #316]	; (8004038 <HAL_UART_MspInit+0x2e4>)
 8003efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efc:	f003 0304 	and.w	r3, r3, #4
 8003f00:	617b      	str	r3, [r7, #20]
 8003f02:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f04:	2300      	movs	r3, #0
 8003f06:	613b      	str	r3, [r7, #16]
 8003f08:	4b4b      	ldr	r3, [pc, #300]	; (8004038 <HAL_UART_MspInit+0x2e4>)
 8003f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0c:	4a4a      	ldr	r2, [pc, #296]	; (8004038 <HAL_UART_MspInit+0x2e4>)
 8003f0e:	f043 0302 	orr.w	r3, r3, #2
 8003f12:	6313      	str	r3, [r2, #48]	; 0x30
 8003f14:	4b48      	ldr	r3, [pc, #288]	; (8004038 <HAL_UART_MspInit+0x2e4>)
 8003f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f18:	f003 0302 	and.w	r3, r3, #2
 8003f1c:	613b      	str	r3, [r7, #16]
 8003f1e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = DEBUG_RX_Pin;
 8003f20:	2320      	movs	r3, #32
 8003f22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f24:	2302      	movs	r3, #2
 8003f26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003f30:	2307      	movs	r3, #7
 8003f32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DEBUG_RX_GPIO_Port, &GPIO_InitStruct);
 8003f34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f38:	4619      	mov	r1, r3
 8003f3a:	4840      	ldr	r0, [pc, #256]	; (800403c <HAL_UART_MspInit+0x2e8>)
 8003f3c:	f001 fd34 	bl	80059a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DEBUG_TX_Pin;
 8003f40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f46:	2302      	movs	r3, #2
 8003f48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003f52:	2307      	movs	r3, #7
 8003f54:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DEBUG_TX_GPIO_Port, &GPIO_InitStruct);
 8003f56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	4838      	ldr	r0, [pc, #224]	; (8004040 <HAL_UART_MspInit+0x2ec>)
 8003f5e:	f001 fd23 	bl	80059a8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003f62:	4b38      	ldr	r3, [pc, #224]	; (8004044 <HAL_UART_MspInit+0x2f0>)
 8003f64:	4a38      	ldr	r2, [pc, #224]	; (8004048 <HAL_UART_MspInit+0x2f4>)
 8003f66:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003f68:	4b36      	ldr	r3, [pc, #216]	; (8004044 <HAL_UART_MspInit+0x2f0>)
 8003f6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003f6e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f70:	4b34      	ldr	r3, [pc, #208]	; (8004044 <HAL_UART_MspInit+0x2f0>)
 8003f72:	2200      	movs	r2, #0
 8003f74:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f76:	4b33      	ldr	r3, [pc, #204]	; (8004044 <HAL_UART_MspInit+0x2f0>)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003f7c:	4b31      	ldr	r3, [pc, #196]	; (8004044 <HAL_UART_MspInit+0x2f0>)
 8003f7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f82:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f84:	4b2f      	ldr	r3, [pc, #188]	; (8004044 <HAL_UART_MspInit+0x2f0>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f8a:	4b2e      	ldr	r3, [pc, #184]	; (8004044 <HAL_UART_MspInit+0x2f0>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8003f90:	4b2c      	ldr	r3, [pc, #176]	; (8004044 <HAL_UART_MspInit+0x2f0>)
 8003f92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f96:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003f98:	4b2a      	ldr	r3, [pc, #168]	; (8004044 <HAL_UART_MspInit+0x2f0>)
 8003f9a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003f9e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003fa0:	4b28      	ldr	r3, [pc, #160]	; (8004044 <HAL_UART_MspInit+0x2f0>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003fa6:	4827      	ldr	r0, [pc, #156]	; (8004044 <HAL_UART_MspInit+0x2f0>)
 8003fa8:	f001 f8fc 	bl	80051a4 <HAL_DMA_Init>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d001      	beq.n	8003fb6 <HAL_UART_MspInit+0x262>
      Error_Handler();
 8003fb2:	f7ff f949 	bl	8003248 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a22      	ldr	r2, [pc, #136]	; (8004044 <HAL_UART_MspInit+0x2f0>)
 8003fba:	639a      	str	r2, [r3, #56]	; 0x38
 8003fbc:	4a21      	ldr	r2, [pc, #132]	; (8004044 <HAL_UART_MspInit+0x2f0>)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8003fc2:	4b22      	ldr	r3, [pc, #136]	; (800404c <HAL_UART_MspInit+0x2f8>)
 8003fc4:	4a22      	ldr	r2, [pc, #136]	; (8004050 <HAL_UART_MspInit+0x2fc>)
 8003fc6:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8003fc8:	4b20      	ldr	r3, [pc, #128]	; (800404c <HAL_UART_MspInit+0x2f8>)
 8003fca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003fce:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003fd0:	4b1e      	ldr	r3, [pc, #120]	; (800404c <HAL_UART_MspInit+0x2f8>)
 8003fd2:	2240      	movs	r2, #64	; 0x40
 8003fd4:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003fd6:	4b1d      	ldr	r3, [pc, #116]	; (800404c <HAL_UART_MspInit+0x2f8>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003fdc:	4b1b      	ldr	r3, [pc, #108]	; (800404c <HAL_UART_MspInit+0x2f8>)
 8003fde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003fe2:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003fe4:	4b19      	ldr	r3, [pc, #100]	; (800404c <HAL_UART_MspInit+0x2f8>)
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003fea:	4b18      	ldr	r3, [pc, #96]	; (800404c <HAL_UART_MspInit+0x2f8>)
 8003fec:	2200      	movs	r2, #0
 8003fee:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003ff0:	4b16      	ldr	r3, [pc, #88]	; (800404c <HAL_UART_MspInit+0x2f8>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003ff6:	4b15      	ldr	r3, [pc, #84]	; (800404c <HAL_UART_MspInit+0x2f8>)
 8003ff8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003ffc:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ffe:	4b13      	ldr	r3, [pc, #76]	; (800404c <HAL_UART_MspInit+0x2f8>)
 8004000:	2200      	movs	r2, #0
 8004002:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004004:	4811      	ldr	r0, [pc, #68]	; (800404c <HAL_UART_MspInit+0x2f8>)
 8004006:	f001 f8cd 	bl	80051a4 <HAL_DMA_Init>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d001      	beq.n	8004014 <HAL_UART_MspInit+0x2c0>
      Error_Handler();
 8004010:	f7ff f91a 	bl	8003248 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a0d      	ldr	r2, [pc, #52]	; (800404c <HAL_UART_MspInit+0x2f8>)
 8004018:	635a      	str	r2, [r3, #52]	; 0x34
 800401a:	4a0c      	ldr	r2, [pc, #48]	; (800404c <HAL_UART_MspInit+0x2f8>)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8004020:	2200      	movs	r2, #0
 8004022:	2105      	movs	r1, #5
 8004024:	2027      	movs	r0, #39	; 0x27
 8004026:	f001 f893 	bl	8005150 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800402a:	2027      	movs	r0, #39	; 0x27
 800402c:	f001 f8ac 	bl	8005188 <HAL_NVIC_EnableIRQ>
}
 8004030:	e0a9      	b.n	8004186 <HAL_UART_MspInit+0x432>
 8004032:	bf00      	nop
 8004034:	40004800 	.word	0x40004800
 8004038:	40023800 	.word	0x40023800
 800403c:	40020800 	.word	0x40020800
 8004040:	40020400 	.word	0x40020400
 8004044:	20007e74 	.word	0x20007e74
 8004048:	40026028 	.word	0x40026028
 800404c:	20007f18 	.word	0x20007f18
 8004050:	40026058 	.word	0x40026058
  else if(uartHandle->Instance==USART6)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a4d      	ldr	r2, [pc, #308]	; (8004190 <HAL_UART_MspInit+0x43c>)
 800405a:	4293      	cmp	r3, r2
 800405c:	f040 8093 	bne.w	8004186 <HAL_UART_MspInit+0x432>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004060:	2300      	movs	r3, #0
 8004062:	60fb      	str	r3, [r7, #12]
 8004064:	4b4b      	ldr	r3, [pc, #300]	; (8004194 <HAL_UART_MspInit+0x440>)
 8004066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004068:	4a4a      	ldr	r2, [pc, #296]	; (8004194 <HAL_UART_MspInit+0x440>)
 800406a:	f043 0320 	orr.w	r3, r3, #32
 800406e:	6453      	str	r3, [r2, #68]	; 0x44
 8004070:	4b48      	ldr	r3, [pc, #288]	; (8004194 <HAL_UART_MspInit+0x440>)
 8004072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004074:	f003 0320 	and.w	r3, r3, #32
 8004078:	60fb      	str	r3, [r7, #12]
 800407a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800407c:	2300      	movs	r3, #0
 800407e:	60bb      	str	r3, [r7, #8]
 8004080:	4b44      	ldr	r3, [pc, #272]	; (8004194 <HAL_UART_MspInit+0x440>)
 8004082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004084:	4a43      	ldr	r2, [pc, #268]	; (8004194 <HAL_UART_MspInit+0x440>)
 8004086:	f043 0304 	orr.w	r3, r3, #4
 800408a:	6313      	str	r3, [r2, #48]	; 0x30
 800408c:	4b41      	ldr	r3, [pc, #260]	; (8004194 <HAL_UART_MspInit+0x440>)
 800408e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004090:	f003 0304 	and.w	r3, r3, #4
 8004094:	60bb      	str	r3, [r7, #8]
 8004096:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CM4_TX_Pin|CM4_RX_Pin;
 8004098:	23c0      	movs	r3, #192	; 0xc0
 800409a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800409c:	2302      	movs	r3, #2
 800409e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040a0:	2300      	movs	r3, #0
 80040a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040a4:	2303      	movs	r3, #3
 80040a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80040a8:	2308      	movs	r3, #8
 80040aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040b0:	4619      	mov	r1, r3
 80040b2:	4839      	ldr	r0, [pc, #228]	; (8004198 <HAL_UART_MspInit+0x444>)
 80040b4:	f001 fc78 	bl	80059a8 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream2;
 80040b8:	4b38      	ldr	r3, [pc, #224]	; (800419c <HAL_UART_MspInit+0x448>)
 80040ba:	4a39      	ldr	r2, [pc, #228]	; (80041a0 <HAL_UART_MspInit+0x44c>)
 80040bc:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80040be:	4b37      	ldr	r3, [pc, #220]	; (800419c <HAL_UART_MspInit+0x448>)
 80040c0:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80040c4:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80040c6:	4b35      	ldr	r3, [pc, #212]	; (800419c <HAL_UART_MspInit+0x448>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80040cc:	4b33      	ldr	r3, [pc, #204]	; (800419c <HAL_UART_MspInit+0x448>)
 80040ce:	2200      	movs	r2, #0
 80040d0:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80040d2:	4b32      	ldr	r3, [pc, #200]	; (800419c <HAL_UART_MspInit+0x448>)
 80040d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80040d8:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80040da:	4b30      	ldr	r3, [pc, #192]	; (800419c <HAL_UART_MspInit+0x448>)
 80040dc:	2200      	movs	r2, #0
 80040de:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80040e0:	4b2e      	ldr	r3, [pc, #184]	; (800419c <HAL_UART_MspInit+0x448>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 80040e6:	4b2d      	ldr	r3, [pc, #180]	; (800419c <HAL_UART_MspInit+0x448>)
 80040e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040ec:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80040ee:	4b2b      	ldr	r3, [pc, #172]	; (800419c <HAL_UART_MspInit+0x448>)
 80040f0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80040f4:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80040f6:	4b29      	ldr	r3, [pc, #164]	; (800419c <HAL_UART_MspInit+0x448>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80040fc:	4827      	ldr	r0, [pc, #156]	; (800419c <HAL_UART_MspInit+0x448>)
 80040fe:	f001 f851 	bl	80051a4 <HAL_DMA_Init>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d001      	beq.n	800410c <HAL_UART_MspInit+0x3b8>
      Error_Handler();
 8004108:	f7ff f89e 	bl	8003248 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a23      	ldr	r2, [pc, #140]	; (800419c <HAL_UART_MspInit+0x448>)
 8004110:	639a      	str	r2, [r3, #56]	; 0x38
 8004112:	4a22      	ldr	r2, [pc, #136]	; (800419c <HAL_UART_MspInit+0x448>)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8004118:	4b22      	ldr	r3, [pc, #136]	; (80041a4 <HAL_UART_MspInit+0x450>)
 800411a:	4a23      	ldr	r2, [pc, #140]	; (80041a8 <HAL_UART_MspInit+0x454>)
 800411c:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 800411e:	4b21      	ldr	r3, [pc, #132]	; (80041a4 <HAL_UART_MspInit+0x450>)
 8004120:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8004124:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004126:	4b1f      	ldr	r3, [pc, #124]	; (80041a4 <HAL_UART_MspInit+0x450>)
 8004128:	2240      	movs	r2, #64	; 0x40
 800412a:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800412c:	4b1d      	ldr	r3, [pc, #116]	; (80041a4 <HAL_UART_MspInit+0x450>)
 800412e:	2200      	movs	r2, #0
 8004130:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004132:	4b1c      	ldr	r3, [pc, #112]	; (80041a4 <HAL_UART_MspInit+0x450>)
 8004134:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004138:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800413a:	4b1a      	ldr	r3, [pc, #104]	; (80041a4 <HAL_UART_MspInit+0x450>)
 800413c:	2200      	movs	r2, #0
 800413e:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004140:	4b18      	ldr	r3, [pc, #96]	; (80041a4 <HAL_UART_MspInit+0x450>)
 8004142:	2200      	movs	r2, #0
 8004144:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8004146:	4b17      	ldr	r3, [pc, #92]	; (80041a4 <HAL_UART_MspInit+0x450>)
 8004148:	2200      	movs	r2, #0
 800414a:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800414c:	4b15      	ldr	r3, [pc, #84]	; (80041a4 <HAL_UART_MspInit+0x450>)
 800414e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004152:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004154:	4b13      	ldr	r3, [pc, #76]	; (80041a4 <HAL_UART_MspInit+0x450>)
 8004156:	2200      	movs	r2, #0
 8004158:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 800415a:	4812      	ldr	r0, [pc, #72]	; (80041a4 <HAL_UART_MspInit+0x450>)
 800415c:	f001 f822 	bl	80051a4 <HAL_DMA_Init>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d001      	beq.n	800416a <HAL_UART_MspInit+0x416>
      Error_Handler();
 8004166:	f7ff f86f 	bl	8003248 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a0d      	ldr	r2, [pc, #52]	; (80041a4 <HAL_UART_MspInit+0x450>)
 800416e:	635a      	str	r2, [r3, #52]	; 0x34
 8004170:	4a0c      	ldr	r2, [pc, #48]	; (80041a4 <HAL_UART_MspInit+0x450>)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8004176:	2200      	movs	r2, #0
 8004178:	2105      	movs	r1, #5
 800417a:	2047      	movs	r0, #71	; 0x47
 800417c:	f000 ffe8 	bl	8005150 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004180:	2047      	movs	r0, #71	; 0x47
 8004182:	f001 f801 	bl	8005188 <HAL_NVIC_EnableIRQ>
}
 8004186:	bf00      	nop
 8004188:	3738      	adds	r7, #56	; 0x38
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	40011400 	.word	0x40011400
 8004194:	40023800 	.word	0x40023800
 8004198:	40020800 	.word	0x40020800
 800419c:	20007e14 	.word	0x20007e14
 80041a0:	40026440 	.word	0x40026440
 80041a4:	20007fd8 	.word	0x20007fd8
 80041a8:	400264a0 	.word	0x400264a0

080041ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80041ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80041e4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80041b0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80041b2:	e003      	b.n	80041bc <LoopCopyDataInit>

080041b4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80041b4:	4b0c      	ldr	r3, [pc, #48]	; (80041e8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80041b6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80041b8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80041ba:	3104      	adds	r1, #4

080041bc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80041bc:	480b      	ldr	r0, [pc, #44]	; (80041ec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80041be:	4b0c      	ldr	r3, [pc, #48]	; (80041f0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80041c0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80041c2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80041c4:	d3f6      	bcc.n	80041b4 <CopyDataInit>
  ldr  r2, =_sbss
 80041c6:	4a0b      	ldr	r2, [pc, #44]	; (80041f4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80041c8:	e002      	b.n	80041d0 <LoopFillZerobss>

080041ca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80041ca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80041cc:	f842 3b04 	str.w	r3, [r2], #4

080041d0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80041d0:	4b09      	ldr	r3, [pc, #36]	; (80041f8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80041d2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80041d4:	d3f9      	bcc.n	80041ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80041d6:	f7ff faa5 	bl	8003724 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80041da:	f007 fd5d 	bl	800bc98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80041de:	f7fe ff8b 	bl	80030f8 <main>
  bx  lr    
 80041e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80041e4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80041e8:	0800bdb0 	.word	0x0800bdb0
  ldr  r0, =_sdata
 80041ec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80041f0:	20000088 	.word	0x20000088
  ldr  r2, =_sbss
 80041f4:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 80041f8:	20008124 	.word	0x20008124

080041fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80041fc:	e7fe      	b.n	80041fc <ADC_IRQHandler>
	...

08004200 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004204:	4b0e      	ldr	r3, [pc, #56]	; (8004240 <HAL_Init+0x40>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a0d      	ldr	r2, [pc, #52]	; (8004240 <HAL_Init+0x40>)
 800420a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800420e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004210:	4b0b      	ldr	r3, [pc, #44]	; (8004240 <HAL_Init+0x40>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a0a      	ldr	r2, [pc, #40]	; (8004240 <HAL_Init+0x40>)
 8004216:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800421a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800421c:	4b08      	ldr	r3, [pc, #32]	; (8004240 <HAL_Init+0x40>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a07      	ldr	r2, [pc, #28]	; (8004240 <HAL_Init+0x40>)
 8004222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004226:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004228:	2003      	movs	r0, #3
 800422a:	f000 ff86 	bl	800513a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800422e:	2000      	movs	r0, #0
 8004230:	f7ff f988 	bl	8003544 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004234:	f7ff f95a 	bl	80034ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	40023c00 	.word	0x40023c00

08004244 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004244:	b480      	push	{r7}
 8004246:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004248:	4b06      	ldr	r3, [pc, #24]	; (8004264 <HAL_IncTick+0x20>)
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	461a      	mov	r2, r3
 800424e:	4b06      	ldr	r3, [pc, #24]	; (8004268 <HAL_IncTick+0x24>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4413      	add	r3, r2
 8004254:	4a04      	ldr	r2, [pc, #16]	; (8004268 <HAL_IncTick+0x24>)
 8004256:	6013      	str	r3, [r2, #0]
}
 8004258:	bf00      	nop
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	20000080 	.word	0x20000080
 8004268:	20008120 	.word	0x20008120

0800426c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800426c:	b480      	push	{r7}
 800426e:	af00      	add	r7, sp, #0
  return uwTick;
 8004270:	4b03      	ldr	r3, [pc, #12]	; (8004280 <HAL_GetTick+0x14>)
 8004272:	681b      	ldr	r3, [r3, #0]
}
 8004274:	4618      	mov	r0, r3
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	20008120 	.word	0x20008120

08004284 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e0ed      	b.n	8004472 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f893 3020 	ldrb.w	r3, [r3, #32]
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d102      	bne.n	80042a8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f7fe fd94 	bl	8002dd0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f022 0202 	bic.w	r2, r2, #2
 80042b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042b8:	f7ff ffd8 	bl	800426c <HAL_GetTick>
 80042bc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80042be:	e012      	b.n	80042e6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80042c0:	f7ff ffd4 	bl	800426c <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	2b0a      	cmp	r3, #10
 80042cc:	d90b      	bls.n	80042e6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2205      	movs	r2, #5
 80042de:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e0c5      	b.n	8004472 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d1e5      	bne.n	80042c0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f042 0201 	orr.w	r2, r2, #1
 8004302:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004304:	f7ff ffb2 	bl	800426c <HAL_GetTick>
 8004308:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800430a:	e012      	b.n	8004332 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800430c:	f7ff ffae 	bl	800426c <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	2b0a      	cmp	r3, #10
 8004318:	d90b      	bls.n	8004332 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2205      	movs	r2, #5
 800432a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e09f      	b.n	8004472 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f003 0301 	and.w	r3, r3, #1
 800433c:	2b00      	cmp	r3, #0
 800433e:	d0e5      	beq.n	800430c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	7e1b      	ldrb	r3, [r3, #24]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d108      	bne.n	800435a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004356:	601a      	str	r2, [r3, #0]
 8004358:	e007      	b.n	800436a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004368:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	7e5b      	ldrb	r3, [r3, #25]
 800436e:	2b01      	cmp	r3, #1
 8004370:	d108      	bne.n	8004384 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004380:	601a      	str	r2, [r3, #0]
 8004382:	e007      	b.n	8004394 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004392:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	7e9b      	ldrb	r3, [r3, #26]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d108      	bne.n	80043ae <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f042 0220 	orr.w	r2, r2, #32
 80043aa:	601a      	str	r2, [r3, #0]
 80043ac:	e007      	b.n	80043be <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f022 0220 	bic.w	r2, r2, #32
 80043bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	7edb      	ldrb	r3, [r3, #27]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d108      	bne.n	80043d8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f022 0210 	bic.w	r2, r2, #16
 80043d4:	601a      	str	r2, [r3, #0]
 80043d6:	e007      	b.n	80043e8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f042 0210 	orr.w	r2, r2, #16
 80043e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	7f1b      	ldrb	r3, [r3, #28]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d108      	bne.n	8004402 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f042 0208 	orr.w	r2, r2, #8
 80043fe:	601a      	str	r2, [r3, #0]
 8004400:	e007      	b.n	8004412 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f022 0208 	bic.w	r2, r2, #8
 8004410:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	7f5b      	ldrb	r3, [r3, #29]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d108      	bne.n	800442c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f042 0204 	orr.w	r2, r2, #4
 8004428:	601a      	str	r2, [r3, #0]
 800442a:	e007      	b.n	800443c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f022 0204 	bic.w	r2, r2, #4
 800443a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	689a      	ldr	r2, [r3, #8]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	431a      	orrs	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	431a      	orrs	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	695b      	ldr	r3, [r3, #20]
 8004450:	ea42 0103 	orr.w	r1, r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	1e5a      	subs	r2, r3, #1
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	430a      	orrs	r2, r1
 8004460:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3710      	adds	r7, #16
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
	...

0800447c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800447c:	b480      	push	{r7}
 800447e:	b087      	sub	sp, #28
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004492:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004494:	7cfb      	ldrb	r3, [r7, #19]
 8004496:	2b01      	cmp	r3, #1
 8004498:	d003      	beq.n	80044a2 <HAL_CAN_ConfigFilter+0x26>
 800449a:	7cfb      	ldrb	r3, [r7, #19]
 800449c:	2b02      	cmp	r3, #2
 800449e:	f040 80be 	bne.w	800461e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80044a2:	4b65      	ldr	r3, [pc, #404]	; (8004638 <HAL_CAN_ConfigFilter+0x1bc>)
 80044a4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80044ac:	f043 0201 	orr.w	r2, r3, #1
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80044bc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d0:	021b      	lsls	r3, r3, #8
 80044d2:	431a      	orrs	r2, r3
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	f003 031f 	and.w	r3, r3, #31
 80044e2:	2201      	movs	r2, #1
 80044e4:	fa02 f303 	lsl.w	r3, r2, r3
 80044e8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	43db      	mvns	r3, r3
 80044f4:	401a      	ands	r2, r3
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	69db      	ldr	r3, [r3, #28]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d123      	bne.n	800454c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	43db      	mvns	r3, r3
 800450e:	401a      	ands	r2, r3
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004522:	683a      	ldr	r2, [r7, #0]
 8004524:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004526:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	3248      	adds	r2, #72	; 0x48
 800452c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004540:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004542:	6979      	ldr	r1, [r7, #20]
 8004544:	3348      	adds	r3, #72	; 0x48
 8004546:	00db      	lsls	r3, r3, #3
 8004548:	440b      	add	r3, r1
 800454a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	69db      	ldr	r3, [r3, #28]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d122      	bne.n	800459a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	431a      	orrs	r2, r3
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004570:	683a      	ldr	r2, [r7, #0]
 8004572:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004574:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	3248      	adds	r2, #72	; 0x48
 800457a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800458e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004590:	6979      	ldr	r1, [r7, #20]
 8004592:	3348      	adds	r3, #72	; 0x48
 8004594:	00db      	lsls	r3, r3, #3
 8004596:	440b      	add	r3, r1
 8004598:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d109      	bne.n	80045b6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	43db      	mvns	r3, r3
 80045ac:	401a      	ands	r2, r3
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80045b4:	e007      	b.n	80045c6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	431a      	orrs	r2, r3
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d109      	bne.n	80045e2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	43db      	mvns	r3, r3
 80045d8:	401a      	ands	r2, r3
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80045e0:	e007      	b.n	80045f2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	431a      	orrs	r2, r3
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d107      	bne.n	800460a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	431a      	orrs	r2, r3
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004610:	f023 0201 	bic.w	r2, r3, #1
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800461a:	2300      	movs	r3, #0
 800461c:	e006      	b.n	800462c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004622:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
  }
}
 800462c:	4618      	mov	r0, r3
 800462e:	371c      	adds	r7, #28
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr
 8004638:	40006400 	.word	0x40006400

0800463c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f893 3020 	ldrb.w	r3, [r3, #32]
 800464a:	b2db      	uxtb	r3, r3
 800464c:	2b01      	cmp	r3, #1
 800464e:	d12e      	bne.n	80046ae <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2202      	movs	r2, #2
 8004654:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f022 0201 	bic.w	r2, r2, #1
 8004666:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004668:	f7ff fe00 	bl	800426c <HAL_GetTick>
 800466c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800466e:	e012      	b.n	8004696 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004670:	f7ff fdfc 	bl	800426c <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	2b0a      	cmp	r3, #10
 800467c:	d90b      	bls.n	8004696 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004682:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2205      	movs	r2, #5
 800468e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e012      	b.n	80046bc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f003 0301 	and.w	r3, r3, #1
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d1e5      	bne.n	8004670 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80046aa:	2300      	movs	r3, #0
 80046ac:	e006      	b.n	80046bc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
  }
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3710      	adds	r7, #16
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b089      	sub	sp, #36	; 0x24
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
 80046d0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046d8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80046e2:	7ffb      	ldrb	r3, [r7, #31]
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d003      	beq.n	80046f0 <HAL_CAN_AddTxMessage+0x2c>
 80046e8:	7ffb      	ldrb	r3, [r7, #31]
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	f040 80b8 	bne.w	8004860 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d10a      	bne.n	8004710 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004700:	2b00      	cmp	r3, #0
 8004702:	d105      	bne.n	8004710 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800470a:	2b00      	cmp	r3, #0
 800470c:	f000 80a0 	beq.w	8004850 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	0e1b      	lsrs	r3, r3, #24
 8004714:	f003 0303 	and.w	r3, r3, #3
 8004718:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	2b02      	cmp	r3, #2
 800471e:	d907      	bls.n	8004730 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004724:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e09e      	b.n	800486e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004730:	2201      	movs	r2, #1
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	409a      	lsls	r2, r3
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10d      	bne.n	800475e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800474c:	68f9      	ldr	r1, [r7, #12]
 800474e:	6809      	ldr	r1, [r1, #0]
 8004750:	431a      	orrs	r2, r3
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	3318      	adds	r3, #24
 8004756:	011b      	lsls	r3, r3, #4
 8004758:	440b      	add	r3, r1
 800475a:	601a      	str	r2, [r3, #0]
 800475c:	e00f      	b.n	800477e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004768:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800476e:	68f9      	ldr	r1, [r7, #12]
 8004770:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004772:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	3318      	adds	r3, #24
 8004778:	011b      	lsls	r3, r3, #4
 800477a:	440b      	add	r3, r1
 800477c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6819      	ldr	r1, [r3, #0]
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	691a      	ldr	r2, [r3, #16]
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	3318      	adds	r3, #24
 800478a:	011b      	lsls	r3, r3, #4
 800478c:	440b      	add	r3, r1
 800478e:	3304      	adds	r3, #4
 8004790:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	7d1b      	ldrb	r3, [r3, #20]
 8004796:	2b01      	cmp	r3, #1
 8004798:	d111      	bne.n	80047be <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	3318      	adds	r3, #24
 80047a2:	011b      	lsls	r3, r3, #4
 80047a4:	4413      	add	r3, r2
 80047a6:	3304      	adds	r3, #4
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	6811      	ldr	r1, [r2, #0]
 80047ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	3318      	adds	r3, #24
 80047b6:	011b      	lsls	r3, r3, #4
 80047b8:	440b      	add	r3, r1
 80047ba:	3304      	adds	r3, #4
 80047bc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	3307      	adds	r3, #7
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	061a      	lsls	r2, r3, #24
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	3306      	adds	r3, #6
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	041b      	lsls	r3, r3, #16
 80047ce:	431a      	orrs	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	3305      	adds	r3, #5
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	021b      	lsls	r3, r3, #8
 80047d8:	4313      	orrs	r3, r2
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	3204      	adds	r2, #4
 80047de:	7812      	ldrb	r2, [r2, #0]
 80047e0:	4610      	mov	r0, r2
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	6811      	ldr	r1, [r2, #0]
 80047e6:	ea43 0200 	orr.w	r2, r3, r0
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	011b      	lsls	r3, r3, #4
 80047ee:	440b      	add	r3, r1
 80047f0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80047f4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	3303      	adds	r3, #3
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	061a      	lsls	r2, r3, #24
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	3302      	adds	r3, #2
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	041b      	lsls	r3, r3, #16
 8004806:	431a      	orrs	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	3301      	adds	r3, #1
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	021b      	lsls	r3, r3, #8
 8004810:	4313      	orrs	r3, r2
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	7812      	ldrb	r2, [r2, #0]
 8004816:	4610      	mov	r0, r2
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	6811      	ldr	r1, [r2, #0]
 800481c:	ea43 0200 	orr.w	r2, r3, r0
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	011b      	lsls	r3, r3, #4
 8004824:	440b      	add	r3, r1
 8004826:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800482a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	3318      	adds	r3, #24
 8004834:	011b      	lsls	r3, r3, #4
 8004836:	4413      	add	r3, r2
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	6811      	ldr	r1, [r2, #0]
 800483e:	f043 0201 	orr.w	r2, r3, #1
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	3318      	adds	r3, #24
 8004846:	011b      	lsls	r3, r3, #4
 8004848:	440b      	add	r3, r1
 800484a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800484c:	2300      	movs	r3, #0
 800484e:	e00e      	b.n	800486e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004854:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e006      	b.n	800486e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004864:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
  }
}
 800486e:	4618      	mov	r0, r3
 8004870:	3724      	adds	r7, #36	; 0x24
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr

0800487a <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 800487a:	b480      	push	{r7}
 800487c:	b085      	sub	sp, #20
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
 8004882:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8004884:	2300      	movs	r3, #0
 8004886:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800488e:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8004890:	7afb      	ldrb	r3, [r7, #11]
 8004892:	2b01      	cmp	r3, #1
 8004894:	d002      	beq.n	800489c <HAL_CAN_IsTxMessagePending+0x22>
 8004896:	7afb      	ldrb	r3, [r7, #11]
 8004898:	2b02      	cmp	r3, #2
 800489a:	d10b      	bne.n	80048b4 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	689a      	ldr	r2, [r3, #8]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	069b      	lsls	r3, r3, #26
 80048a6:	401a      	ands	r2, r3
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	069b      	lsls	r3, r3, #26
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d001      	beq.n	80048b4 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 80048b0:	2301      	movs	r3, #1
 80048b2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 80048b4:	68fb      	ldr	r3, [r7, #12]
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3714      	adds	r7, #20
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr

080048c2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80048c2:	b480      	push	{r7}
 80048c4:	b087      	sub	sp, #28
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	60f8      	str	r0, [r7, #12]
 80048ca:	60b9      	str	r1, [r7, #8]
 80048cc:	607a      	str	r2, [r7, #4]
 80048ce:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048d6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80048d8:	7dfb      	ldrb	r3, [r7, #23]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d003      	beq.n	80048e6 <HAL_CAN_GetRxMessage+0x24>
 80048de:	7dfb      	ldrb	r3, [r7, #23]
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	f040 80f3 	bne.w	8004acc <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d10e      	bne.n	800490a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	f003 0303 	and.w	r3, r3, #3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d116      	bne.n	8004928 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e0e7      	b.n	8004ada <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	f003 0303 	and.w	r3, r3, #3
 8004914:	2b00      	cmp	r3, #0
 8004916:	d107      	bne.n	8004928 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e0d8      	b.n	8004ada <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	331b      	adds	r3, #27
 8004930:	011b      	lsls	r3, r3, #4
 8004932:	4413      	add	r3, r2
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0204 	and.w	r2, r3, #4
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d10c      	bne.n	8004960 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	331b      	adds	r3, #27
 800494e:	011b      	lsls	r3, r3, #4
 8004950:	4413      	add	r3, r2
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	0d5b      	lsrs	r3, r3, #21
 8004956:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	601a      	str	r2, [r3, #0]
 800495e:	e00b      	b.n	8004978 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	331b      	adds	r3, #27
 8004968:	011b      	lsls	r3, r3, #4
 800496a:	4413      	add	r3, r2
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	08db      	lsrs	r3, r3, #3
 8004970:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	331b      	adds	r3, #27
 8004980:	011b      	lsls	r3, r3, #4
 8004982:	4413      	add	r3, r2
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0202 	and.w	r2, r3, #2
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	331b      	adds	r3, #27
 8004996:	011b      	lsls	r3, r3, #4
 8004998:	4413      	add	r3, r2
 800499a:	3304      	adds	r3, #4
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 020f 	and.w	r2, r3, #15
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	331b      	adds	r3, #27
 80049ae:	011b      	lsls	r3, r3, #4
 80049b0:	4413      	add	r3, r2
 80049b2:	3304      	adds	r3, #4
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	0a1b      	lsrs	r3, r3, #8
 80049b8:	b2da      	uxtb	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	331b      	adds	r3, #27
 80049c6:	011b      	lsls	r3, r3, #4
 80049c8:	4413      	add	r3, r2
 80049ca:	3304      	adds	r3, #4
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	0c1b      	lsrs	r3, r3, #16
 80049d0:	b29a      	uxth	r2, r3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	011b      	lsls	r3, r3, #4
 80049de:	4413      	add	r3, r2
 80049e0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	b2da      	uxtb	r2, r3
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	011b      	lsls	r3, r3, #4
 80049f4:	4413      	add	r3, r2
 80049f6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	0a1a      	lsrs	r2, r3, #8
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	3301      	adds	r3, #1
 8004a02:	b2d2      	uxtb	r2, r2
 8004a04:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	011b      	lsls	r3, r3, #4
 8004a0e:	4413      	add	r3, r2
 8004a10:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	0c1a      	lsrs	r2, r3, #16
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	3302      	adds	r3, #2
 8004a1c:	b2d2      	uxtb	r2, r2
 8004a1e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	011b      	lsls	r3, r3, #4
 8004a28:	4413      	add	r3, r2
 8004a2a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	0e1a      	lsrs	r2, r3, #24
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	3303      	adds	r3, #3
 8004a36:	b2d2      	uxtb	r2, r2
 8004a38:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	011b      	lsls	r3, r3, #4
 8004a42:	4413      	add	r3, r2
 8004a44:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	3304      	adds	r3, #4
 8004a4e:	b2d2      	uxtb	r2, r2
 8004a50:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	011b      	lsls	r3, r3, #4
 8004a5a:	4413      	add	r3, r2
 8004a5c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	0a1a      	lsrs	r2, r3, #8
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	3305      	adds	r3, #5
 8004a68:	b2d2      	uxtb	r2, r2
 8004a6a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	011b      	lsls	r3, r3, #4
 8004a74:	4413      	add	r3, r2
 8004a76:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	0c1a      	lsrs	r2, r3, #16
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	3306      	adds	r3, #6
 8004a82:	b2d2      	uxtb	r2, r2
 8004a84:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	011b      	lsls	r3, r3, #4
 8004a8e:	4413      	add	r3, r2
 8004a90:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	0e1a      	lsrs	r2, r3, #24
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	3307      	adds	r3, #7
 8004a9c:	b2d2      	uxtb	r2, r2
 8004a9e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d108      	bne.n	8004ab8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	68da      	ldr	r2, [r3, #12]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f042 0220 	orr.w	r2, r2, #32
 8004ab4:	60da      	str	r2, [r3, #12]
 8004ab6:	e007      	b.n	8004ac8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	691a      	ldr	r2, [r3, #16]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f042 0220 	orr.w	r2, r2, #32
 8004ac6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	e006      	b.n	8004ada <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
  }
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	371c      	adds	r7, #28
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr

08004ae6 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8004ae6:	b480      	push	{r7}
 8004ae8:	b085      	sub	sp, #20
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
 8004aee:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8004af0:	2300      	movs	r3, #0
 8004af2:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004afa:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004afc:	7afb      	ldrb	r3, [r7, #11]
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d002      	beq.n	8004b08 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8004b02:	7afb      	ldrb	r3, [r7, #11]
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d10f      	bne.n	8004b28 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d106      	bne.n	8004b1c <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	f003 0303 	and.w	r3, r3, #3
 8004b18:	60fb      	str	r3, [r7, #12]
 8004b1a:	e005      	b.n	8004b28 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	f003 0303 	and.w	r3, r3, #3
 8004b26:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8004b28:	68fb      	ldr	r3, [r7, #12]
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3714      	adds	r7, #20
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004b36:	b480      	push	{r7}
 8004b38:	b085      	sub	sp, #20
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
 8004b3e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b46:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004b48:	7bfb      	ldrb	r3, [r7, #15]
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d002      	beq.n	8004b54 <HAL_CAN_ActivateNotification+0x1e>
 8004b4e:	7bfb      	ldrb	r3, [r7, #15]
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d109      	bne.n	8004b68 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6959      	ldr	r1, [r3, #20]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	683a      	ldr	r2, [r7, #0]
 8004b60:	430a      	orrs	r2, r1
 8004b62:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004b64:	2300      	movs	r3, #0
 8004b66:	e006      	b.n	8004b76 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
  }
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3714      	adds	r7, #20
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr

08004b82 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004b82:	b580      	push	{r7, lr}
 8004b84:	b08a      	sub	sp, #40	; 0x28
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	695b      	ldr	r3, [r3, #20]
 8004b94:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	699b      	ldr	r3, [r3, #24]
 8004bbc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004bbe:	6a3b      	ldr	r3, [r7, #32]
 8004bc0:	f003 0301 	and.w	r3, r3, #1
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d07c      	beq.n	8004cc2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	f003 0301 	and.w	r3, r3, #1
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d023      	beq.n	8004c1a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	f003 0302 	and.w	r3, r3, #2
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d003      	beq.n	8004bec <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 f983 	bl	8004ef0 <HAL_CAN_TxMailbox0CompleteCallback>
 8004bea:	e016      	b.n	8004c1a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	f003 0304 	and.w	r3, r3, #4
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d004      	beq.n	8004c00 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004bfc:	627b      	str	r3, [r7, #36]	; 0x24
 8004bfe:	e00c      	b.n	8004c1a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	f003 0308 	and.w	r3, r3, #8
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d004      	beq.n	8004c14 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c10:	627b      	str	r3, [r7, #36]	; 0x24
 8004c12:	e002      	b.n	8004c1a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f000 f989 	bl	8004f2c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d024      	beq.n	8004c6e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c2c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d003      	beq.n	8004c40 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f000 f963 	bl	8004f04 <HAL_CAN_TxMailbox1CompleteCallback>
 8004c3e:	e016      	b.n	8004c6e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d004      	beq.n	8004c54 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004c50:	627b      	str	r3, [r7, #36]	; 0x24
 8004c52:	e00c      	b.n	8004c6e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d004      	beq.n	8004c68 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c64:	627b      	str	r3, [r7, #36]	; 0x24
 8004c66:	e002      	b.n	8004c6e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f000 f969 	bl	8004f40 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d024      	beq.n	8004cc2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004c80:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d003      	beq.n	8004c94 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f000 f943 	bl	8004f18 <HAL_CAN_TxMailbox2CompleteCallback>
 8004c92:	e016      	b.n	8004cc2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d004      	beq.n	8004ca8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ca6:	e00c      	b.n	8004cc2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d004      	beq.n	8004cbc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8004cba:	e002      	b.n	8004cc2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f000 f949 	bl	8004f54 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004cc2:	6a3b      	ldr	r3, [r7, #32]
 8004cc4:	f003 0308 	and.w	r3, r3, #8
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d00c      	beq.n	8004ce6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	f003 0310 	and.w	r3, r3, #16
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d007      	beq.n	8004ce6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004cdc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2210      	movs	r2, #16
 8004ce4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004ce6:	6a3b      	ldr	r3, [r7, #32]
 8004ce8:	f003 0304 	and.w	r3, r3, #4
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00b      	beq.n	8004d08 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	f003 0308 	and.w	r3, r3, #8
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d006      	beq.n	8004d08 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2208      	movs	r2, #8
 8004d00:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 f930 	bl	8004f68 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004d08:	6a3b      	ldr	r3, [r7, #32]
 8004d0a:	f003 0302 	and.w	r3, r3, #2
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d009      	beq.n	8004d26 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	f003 0303 	and.w	r3, r3, #3
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d002      	beq.n	8004d26 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f7fb fcd9 	bl	80006d8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004d26:	6a3b      	ldr	r3, [r7, #32]
 8004d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d00c      	beq.n	8004d4a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	f003 0310 	and.w	r3, r3, #16
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d007      	beq.n	8004d4a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d40:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	2210      	movs	r2, #16
 8004d48:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004d4a:	6a3b      	ldr	r3, [r7, #32]
 8004d4c:	f003 0320 	and.w	r3, r3, #32
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d00b      	beq.n	8004d6c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	f003 0308 	and.w	r3, r3, #8
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d006      	beq.n	8004d6c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2208      	movs	r2, #8
 8004d64:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 f912 	bl	8004f90 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004d6c:	6a3b      	ldr	r3, [r7, #32]
 8004d6e:	f003 0310 	and.w	r3, r3, #16
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d009      	beq.n	8004d8a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	f003 0303 	and.w	r3, r3, #3
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d002      	beq.n	8004d8a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 f8f9 	bl	8004f7c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004d8a:	6a3b      	ldr	r3, [r7, #32]
 8004d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d00b      	beq.n	8004dac <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	f003 0310 	and.w	r3, r3, #16
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d006      	beq.n	8004dac <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	2210      	movs	r2, #16
 8004da4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 f8fc 	bl	8004fa4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004dac:	6a3b      	ldr	r3, [r7, #32]
 8004dae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00b      	beq.n	8004dce <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	f003 0308 	and.w	r3, r3, #8
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d006      	beq.n	8004dce <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2208      	movs	r2, #8
 8004dc6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f000 f8f5 	bl	8004fb8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004dce:	6a3b      	ldr	r3, [r7, #32]
 8004dd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d07b      	beq.n	8004ed0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	f003 0304 	and.w	r3, r3, #4
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d072      	beq.n	8004ec8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004de2:	6a3b      	ldr	r3, [r7, #32]
 8004de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d008      	beq.n	8004dfe <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d003      	beq.n	8004dfe <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df8:	f043 0301 	orr.w	r3, r3, #1
 8004dfc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004dfe:	6a3b      	ldr	r3, [r7, #32]
 8004e00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d008      	beq.n	8004e1a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d003      	beq.n	8004e1a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e14:	f043 0302 	orr.w	r3, r3, #2
 8004e18:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004e1a:	6a3b      	ldr	r3, [r7, #32]
 8004e1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d008      	beq.n	8004e36 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d003      	beq.n	8004e36 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e30:	f043 0304 	orr.w	r3, r3, #4
 8004e34:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004e36:	6a3b      	ldr	r3, [r7, #32]
 8004e38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d043      	beq.n	8004ec8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d03e      	beq.n	8004ec8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e50:	2b60      	cmp	r3, #96	; 0x60
 8004e52:	d02b      	beq.n	8004eac <HAL_CAN_IRQHandler+0x32a>
 8004e54:	2b60      	cmp	r3, #96	; 0x60
 8004e56:	d82e      	bhi.n	8004eb6 <HAL_CAN_IRQHandler+0x334>
 8004e58:	2b50      	cmp	r3, #80	; 0x50
 8004e5a:	d022      	beq.n	8004ea2 <HAL_CAN_IRQHandler+0x320>
 8004e5c:	2b50      	cmp	r3, #80	; 0x50
 8004e5e:	d82a      	bhi.n	8004eb6 <HAL_CAN_IRQHandler+0x334>
 8004e60:	2b40      	cmp	r3, #64	; 0x40
 8004e62:	d019      	beq.n	8004e98 <HAL_CAN_IRQHandler+0x316>
 8004e64:	2b40      	cmp	r3, #64	; 0x40
 8004e66:	d826      	bhi.n	8004eb6 <HAL_CAN_IRQHandler+0x334>
 8004e68:	2b30      	cmp	r3, #48	; 0x30
 8004e6a:	d010      	beq.n	8004e8e <HAL_CAN_IRQHandler+0x30c>
 8004e6c:	2b30      	cmp	r3, #48	; 0x30
 8004e6e:	d822      	bhi.n	8004eb6 <HAL_CAN_IRQHandler+0x334>
 8004e70:	2b10      	cmp	r3, #16
 8004e72:	d002      	beq.n	8004e7a <HAL_CAN_IRQHandler+0x2f8>
 8004e74:	2b20      	cmp	r3, #32
 8004e76:	d005      	beq.n	8004e84 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004e78:	e01d      	b.n	8004eb6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7c:	f043 0308 	orr.w	r3, r3, #8
 8004e80:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004e82:	e019      	b.n	8004eb8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e86:	f043 0310 	orr.w	r3, r3, #16
 8004e8a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004e8c:	e014      	b.n	8004eb8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e90:	f043 0320 	orr.w	r3, r3, #32
 8004e94:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004e96:	e00f      	b.n	8004eb8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e9e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004ea0:	e00a      	b.n	8004eb8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ea8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004eaa:	e005      	b.n	8004eb8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eb2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004eb4:	e000      	b.n	8004eb8 <HAL_CAN_IRQHandler+0x336>
            break;
 8004eb6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	699a      	ldr	r2, [r3, #24]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004ec6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2204      	movs	r2, #4
 8004ece:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d008      	beq.n	8004ee8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004edc:	431a      	orrs	r2, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 f872 	bl	8004fcc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004ee8:	bf00      	nop
 8004eea:	3728      	adds	r7, #40	; 0x28
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004ef8:	bf00      	nop
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004f0c:	bf00      	nop
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004f34:	bf00      	nop
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004f5c:	bf00      	nop
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004f84:	bf00      	nop
 8004f86:	370c      	adds	r7, #12
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr

08004f90 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004fac:	bf00      	nop
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004fc0:	bf00      	nop
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004fd4:	bf00      	nop
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b085      	sub	sp, #20
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f003 0307 	and.w	r3, r3, #7
 8004fee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ff0:	4b0c      	ldr	r3, [pc, #48]	; (8005024 <__NVIC_SetPriorityGrouping+0x44>)
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ff6:	68ba      	ldr	r2, [r7, #8]
 8004ff8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005008:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800500c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005010:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005012:	4a04      	ldr	r2, [pc, #16]	; (8005024 <__NVIC_SetPriorityGrouping+0x44>)
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	60d3      	str	r3, [r2, #12]
}
 8005018:	bf00      	nop
 800501a:	3714      	adds	r7, #20
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr
 8005024:	e000ed00 	.word	0xe000ed00

08005028 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005028:	b480      	push	{r7}
 800502a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800502c:	4b04      	ldr	r3, [pc, #16]	; (8005040 <__NVIC_GetPriorityGrouping+0x18>)
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	0a1b      	lsrs	r3, r3, #8
 8005032:	f003 0307 	and.w	r3, r3, #7
}
 8005036:	4618      	mov	r0, r3
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr
 8005040:	e000ed00 	.word	0xe000ed00

08005044 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	4603      	mov	r3, r0
 800504c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800504e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005052:	2b00      	cmp	r3, #0
 8005054:	db0b      	blt.n	800506e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005056:	79fb      	ldrb	r3, [r7, #7]
 8005058:	f003 021f 	and.w	r2, r3, #31
 800505c:	4907      	ldr	r1, [pc, #28]	; (800507c <__NVIC_EnableIRQ+0x38>)
 800505e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005062:	095b      	lsrs	r3, r3, #5
 8005064:	2001      	movs	r0, #1
 8005066:	fa00 f202 	lsl.w	r2, r0, r2
 800506a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800506e:	bf00      	nop
 8005070:	370c      	adds	r7, #12
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	e000e100 	.word	0xe000e100

08005080 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	4603      	mov	r3, r0
 8005088:	6039      	str	r1, [r7, #0]
 800508a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800508c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005090:	2b00      	cmp	r3, #0
 8005092:	db0a      	blt.n	80050aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	b2da      	uxtb	r2, r3
 8005098:	490c      	ldr	r1, [pc, #48]	; (80050cc <__NVIC_SetPriority+0x4c>)
 800509a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800509e:	0112      	lsls	r2, r2, #4
 80050a0:	b2d2      	uxtb	r2, r2
 80050a2:	440b      	add	r3, r1
 80050a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80050a8:	e00a      	b.n	80050c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	b2da      	uxtb	r2, r3
 80050ae:	4908      	ldr	r1, [pc, #32]	; (80050d0 <__NVIC_SetPriority+0x50>)
 80050b0:	79fb      	ldrb	r3, [r7, #7]
 80050b2:	f003 030f 	and.w	r3, r3, #15
 80050b6:	3b04      	subs	r3, #4
 80050b8:	0112      	lsls	r2, r2, #4
 80050ba:	b2d2      	uxtb	r2, r2
 80050bc:	440b      	add	r3, r1
 80050be:	761a      	strb	r2, [r3, #24]
}
 80050c0:	bf00      	nop
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr
 80050cc:	e000e100 	.word	0xe000e100
 80050d0:	e000ed00 	.word	0xe000ed00

080050d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b089      	sub	sp, #36	; 0x24
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f003 0307 	and.w	r3, r3, #7
 80050e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	f1c3 0307 	rsb	r3, r3, #7
 80050ee:	2b04      	cmp	r3, #4
 80050f0:	bf28      	it	cs
 80050f2:	2304      	movcs	r3, #4
 80050f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	3304      	adds	r3, #4
 80050fa:	2b06      	cmp	r3, #6
 80050fc:	d902      	bls.n	8005104 <NVIC_EncodePriority+0x30>
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	3b03      	subs	r3, #3
 8005102:	e000      	b.n	8005106 <NVIC_EncodePriority+0x32>
 8005104:	2300      	movs	r3, #0
 8005106:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005108:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	fa02 f303 	lsl.w	r3, r2, r3
 8005112:	43da      	mvns	r2, r3
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	401a      	ands	r2, r3
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800511c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	fa01 f303 	lsl.w	r3, r1, r3
 8005126:	43d9      	mvns	r1, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800512c:	4313      	orrs	r3, r2
         );
}
 800512e:	4618      	mov	r0, r3
 8005130:	3724      	adds	r7, #36	; 0x24
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr

0800513a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800513a:	b580      	push	{r7, lr}
 800513c:	b082      	sub	sp, #8
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f7ff ff4c 	bl	8004fe0 <__NVIC_SetPriorityGrouping>
}
 8005148:	bf00      	nop
 800514a:	3708      	adds	r7, #8
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005150:	b580      	push	{r7, lr}
 8005152:	b086      	sub	sp, #24
 8005154:	af00      	add	r7, sp, #0
 8005156:	4603      	mov	r3, r0
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	607a      	str	r2, [r7, #4]
 800515c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800515e:	2300      	movs	r3, #0
 8005160:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005162:	f7ff ff61 	bl	8005028 <__NVIC_GetPriorityGrouping>
 8005166:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	68b9      	ldr	r1, [r7, #8]
 800516c:	6978      	ldr	r0, [r7, #20]
 800516e:	f7ff ffb1 	bl	80050d4 <NVIC_EncodePriority>
 8005172:	4602      	mov	r2, r0
 8005174:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005178:	4611      	mov	r1, r2
 800517a:	4618      	mov	r0, r3
 800517c:	f7ff ff80 	bl	8005080 <__NVIC_SetPriority>
}
 8005180:	bf00      	nop
 8005182:	3718      	adds	r7, #24
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	4603      	mov	r3, r0
 8005190:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005196:	4618      	mov	r0, r3
 8005198:	f7ff ff54 	bl	8005044 <__NVIC_EnableIRQ>
}
 800519c:	bf00      	nop
 800519e:	3708      	adds	r7, #8
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b086      	sub	sp, #24
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80051ac:	2300      	movs	r3, #0
 80051ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80051b0:	f7ff f85c 	bl	800426c <HAL_GetTick>
 80051b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d101      	bne.n	80051c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e099      	b.n	80052f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2202      	movs	r2, #2
 80051cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f022 0201 	bic.w	r2, r2, #1
 80051de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051e0:	e00f      	b.n	8005202 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80051e2:	f7ff f843 	bl	800426c <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	2b05      	cmp	r3, #5
 80051ee:	d908      	bls.n	8005202 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2220      	movs	r2, #32
 80051f4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2203      	movs	r2, #3
 80051fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e078      	b.n	80052f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0301 	and.w	r3, r3, #1
 800520c:	2b00      	cmp	r3, #0
 800520e:	d1e8      	bne.n	80051e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005218:	697a      	ldr	r2, [r7, #20]
 800521a:	4b38      	ldr	r3, [pc, #224]	; (80052fc <HAL_DMA_Init+0x158>)
 800521c:	4013      	ands	r3, r2
 800521e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	685a      	ldr	r2, [r3, #4]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800522e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800523a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005246:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6a1b      	ldr	r3, [r3, #32]
 800524c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	4313      	orrs	r3, r2
 8005252:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005258:	2b04      	cmp	r3, #4
 800525a:	d107      	bne.n	800526c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005264:	4313      	orrs	r3, r2
 8005266:	697a      	ldr	r2, [r7, #20]
 8005268:	4313      	orrs	r3, r2
 800526a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	697a      	ldr	r2, [r7, #20]
 8005272:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	695b      	ldr	r3, [r3, #20]
 800527a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	f023 0307 	bic.w	r3, r3, #7
 8005282:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005288:	697a      	ldr	r2, [r7, #20]
 800528a:	4313      	orrs	r3, r2
 800528c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005292:	2b04      	cmp	r3, #4
 8005294:	d117      	bne.n	80052c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	4313      	orrs	r3, r2
 800529e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d00e      	beq.n	80052c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f000 fb01 	bl	80058b0 <DMA_CheckFifoParam>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d008      	beq.n	80052c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2240      	movs	r2, #64	; 0x40
 80052b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2201      	movs	r2, #1
 80052be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80052c2:	2301      	movs	r3, #1
 80052c4:	e016      	b.n	80052f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	697a      	ldr	r2, [r7, #20]
 80052cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 fab8 	bl	8005844 <DMA_CalcBaseAndBitshift>
 80052d4:	4603      	mov	r3, r0
 80052d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052dc:	223f      	movs	r2, #63	; 0x3f
 80052de:	409a      	lsls	r2, r3
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3718      	adds	r7, #24
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	f010803f 	.word	0xf010803f

08005300 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b086      	sub	sp, #24
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	607a      	str	r2, [r7, #4]
 800530c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800530e:	2300      	movs	r3, #0
 8005310:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005316:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800531e:	2b01      	cmp	r3, #1
 8005320:	d101      	bne.n	8005326 <HAL_DMA_Start_IT+0x26>
 8005322:	2302      	movs	r3, #2
 8005324:	e040      	b.n	80053a8 <HAL_DMA_Start_IT+0xa8>
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2201      	movs	r2, #1
 800532a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005334:	b2db      	uxtb	r3, r3
 8005336:	2b01      	cmp	r3, #1
 8005338:	d12f      	bne.n	800539a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2202      	movs	r2, #2
 800533e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2200      	movs	r2, #0
 8005346:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	68b9      	ldr	r1, [r7, #8]
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	f000 fa4a 	bl	80057e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005358:	223f      	movs	r2, #63	; 0x3f
 800535a:	409a      	lsls	r2, r3
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f042 0216 	orr.w	r2, r2, #22
 800536e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005374:	2b00      	cmp	r3, #0
 8005376:	d007      	beq.n	8005388 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f042 0208 	orr.w	r2, r2, #8
 8005386:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f042 0201 	orr.w	r2, r2, #1
 8005396:	601a      	str	r2, [r3, #0]
 8005398:	e005      	b.n	80053a6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80053a2:	2302      	movs	r3, #2
 80053a4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80053a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3718      	adds	r7, #24
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053bc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80053be:	f7fe ff55 	bl	800426c <HAL_GetTick>
 80053c2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	d008      	beq.n	80053e2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2280      	movs	r2, #128	; 0x80
 80053d4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e052      	b.n	8005488 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f022 0216 	bic.w	r2, r2, #22
 80053f0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	695a      	ldr	r2, [r3, #20]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005400:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005406:	2b00      	cmp	r3, #0
 8005408:	d103      	bne.n	8005412 <HAL_DMA_Abort+0x62>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800540e:	2b00      	cmp	r3, #0
 8005410:	d007      	beq.n	8005422 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f022 0208 	bic.w	r2, r2, #8
 8005420:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f022 0201 	bic.w	r2, r2, #1
 8005430:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005432:	e013      	b.n	800545c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005434:	f7fe ff1a 	bl	800426c <HAL_GetTick>
 8005438:	4602      	mov	r2, r0
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	2b05      	cmp	r3, #5
 8005440:	d90c      	bls.n	800545c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2220      	movs	r2, #32
 8005446:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2203      	movs	r2, #3
 8005454:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	e015      	b.n	8005488 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 0301 	and.w	r3, r3, #1
 8005466:	2b00      	cmp	r3, #0
 8005468:	d1e4      	bne.n	8005434 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800546e:	223f      	movs	r2, #63	; 0x3f
 8005470:	409a      	lsls	r2, r3
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2201      	movs	r2, #1
 8005482:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8005486:	2300      	movs	r3, #0
}
 8005488:	4618      	mov	r0, r3
 800548a:	3710      	adds	r7, #16
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	2b02      	cmp	r3, #2
 80054a2:	d004      	beq.n	80054ae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2280      	movs	r2, #128	; 0x80
 80054a8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e00c      	b.n	80054c8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2205      	movs	r2, #5
 80054b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f022 0201 	bic.w	r2, r2, #1
 80054c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	370c      	adds	r7, #12
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b086      	sub	sp, #24
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80054dc:	2300      	movs	r3, #0
 80054de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80054e0:	4b92      	ldr	r3, [pc, #584]	; (800572c <HAL_DMA_IRQHandler+0x258>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a92      	ldr	r2, [pc, #584]	; (8005730 <HAL_DMA_IRQHandler+0x25c>)
 80054e6:	fba2 2303 	umull	r2, r3, r2, r3
 80054ea:	0a9b      	lsrs	r3, r3, #10
 80054ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054fe:	2208      	movs	r2, #8
 8005500:	409a      	lsls	r2, r3
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	4013      	ands	r3, r2
 8005506:	2b00      	cmp	r3, #0
 8005508:	d01a      	beq.n	8005540 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0304 	and.w	r3, r3, #4
 8005514:	2b00      	cmp	r3, #0
 8005516:	d013      	beq.n	8005540 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f022 0204 	bic.w	r2, r2, #4
 8005526:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800552c:	2208      	movs	r2, #8
 800552e:	409a      	lsls	r2, r3
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005538:	f043 0201 	orr.w	r2, r3, #1
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005544:	2201      	movs	r2, #1
 8005546:	409a      	lsls	r2, r3
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	4013      	ands	r3, r2
 800554c:	2b00      	cmp	r3, #0
 800554e:	d012      	beq.n	8005576 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	695b      	ldr	r3, [r3, #20]
 8005556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00b      	beq.n	8005576 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005562:	2201      	movs	r2, #1
 8005564:	409a      	lsls	r2, r3
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800556e:	f043 0202 	orr.w	r2, r3, #2
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800557a:	2204      	movs	r2, #4
 800557c:	409a      	lsls	r2, r3
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	4013      	ands	r3, r2
 8005582:	2b00      	cmp	r3, #0
 8005584:	d012      	beq.n	80055ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 0302 	and.w	r3, r3, #2
 8005590:	2b00      	cmp	r3, #0
 8005592:	d00b      	beq.n	80055ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005598:	2204      	movs	r2, #4
 800559a:	409a      	lsls	r2, r3
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a4:	f043 0204 	orr.w	r2, r3, #4
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055b0:	2210      	movs	r2, #16
 80055b2:	409a      	lsls	r2, r3
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	4013      	ands	r3, r2
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d043      	beq.n	8005644 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0308 	and.w	r3, r3, #8
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d03c      	beq.n	8005644 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055ce:	2210      	movs	r2, #16
 80055d0:	409a      	lsls	r2, r3
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d018      	beq.n	8005616 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d108      	bne.n	8005604 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d024      	beq.n	8005644 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	4798      	blx	r3
 8005602:	e01f      	b.n	8005644 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005608:	2b00      	cmp	r3, #0
 800560a:	d01b      	beq.n	8005644 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	4798      	blx	r3
 8005614:	e016      	b.n	8005644 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005620:	2b00      	cmp	r3, #0
 8005622:	d107      	bne.n	8005634 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f022 0208 	bic.w	r2, r2, #8
 8005632:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005638:	2b00      	cmp	r3, #0
 800563a:	d003      	beq.n	8005644 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005648:	2220      	movs	r2, #32
 800564a:	409a      	lsls	r2, r3
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	4013      	ands	r3, r2
 8005650:	2b00      	cmp	r3, #0
 8005652:	f000 808e 	beq.w	8005772 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 0310 	and.w	r3, r3, #16
 8005660:	2b00      	cmp	r3, #0
 8005662:	f000 8086 	beq.w	8005772 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800566a:	2220      	movs	r2, #32
 800566c:	409a      	lsls	r2, r3
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005678:	b2db      	uxtb	r3, r3
 800567a:	2b05      	cmp	r3, #5
 800567c:	d136      	bne.n	80056ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f022 0216 	bic.w	r2, r2, #22
 800568c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	695a      	ldr	r2, [r3, #20]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800569c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d103      	bne.n	80056ae <HAL_DMA_IRQHandler+0x1da>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d007      	beq.n	80056be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f022 0208 	bic.w	r2, r2, #8
 80056bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056c2:	223f      	movs	r2, #63	; 0x3f
 80056c4:	409a      	lsls	r2, r3
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2201      	movs	r2, #1
 80056d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d07d      	beq.n	80057de <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	4798      	blx	r3
        }
        return;
 80056ea:	e078      	b.n	80057de <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d01c      	beq.n	8005734 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005704:	2b00      	cmp	r3, #0
 8005706:	d108      	bne.n	800571a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800570c:	2b00      	cmp	r3, #0
 800570e:	d030      	beq.n	8005772 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	4798      	blx	r3
 8005718:	e02b      	b.n	8005772 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800571e:	2b00      	cmp	r3, #0
 8005720:	d027      	beq.n	8005772 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	4798      	blx	r3
 800572a:	e022      	b.n	8005772 <HAL_DMA_IRQHandler+0x29e>
 800572c:	20000078 	.word	0x20000078
 8005730:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800573e:	2b00      	cmp	r3, #0
 8005740:	d10f      	bne.n	8005762 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f022 0210 	bic.w	r2, r2, #16
 8005750:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2201      	movs	r2, #1
 800575e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005766:	2b00      	cmp	r3, #0
 8005768:	d003      	beq.n	8005772 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005776:	2b00      	cmp	r3, #0
 8005778:	d032      	beq.n	80057e0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800577e:	f003 0301 	and.w	r3, r3, #1
 8005782:	2b00      	cmp	r3, #0
 8005784:	d022      	beq.n	80057cc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2205      	movs	r2, #5
 800578a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f022 0201 	bic.w	r2, r2, #1
 800579c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	3301      	adds	r3, #1
 80057a2:	60bb      	str	r3, [r7, #8]
 80057a4:	697a      	ldr	r2, [r7, #20]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d307      	bcc.n	80057ba <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 0301 	and.w	r3, r3, #1
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d1f2      	bne.n	800579e <HAL_DMA_IRQHandler+0x2ca>
 80057b8:	e000      	b.n	80057bc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80057ba:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d005      	beq.n	80057e0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	4798      	blx	r3
 80057dc:	e000      	b.n	80057e0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80057de:	bf00      	nop
    }
  }
}
 80057e0:	3718      	adds	r7, #24
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop

080057e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b085      	sub	sp, #20
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	607a      	str	r2, [r7, #4]
 80057f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005804:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	683a      	ldr	r2, [r7, #0]
 800580c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	2b40      	cmp	r3, #64	; 0x40
 8005814:	d108      	bne.n	8005828 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	68ba      	ldr	r2, [r7, #8]
 8005824:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005826:	e007      	b.n	8005838 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68ba      	ldr	r2, [r7, #8]
 800582e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	60da      	str	r2, [r3, #12]
}
 8005838:	bf00      	nop
 800583a:	3714      	adds	r7, #20
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005844:	b480      	push	{r7}
 8005846:	b085      	sub	sp, #20
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	b2db      	uxtb	r3, r3
 8005852:	3b10      	subs	r3, #16
 8005854:	4a14      	ldr	r2, [pc, #80]	; (80058a8 <DMA_CalcBaseAndBitshift+0x64>)
 8005856:	fba2 2303 	umull	r2, r3, r2, r3
 800585a:	091b      	lsrs	r3, r3, #4
 800585c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800585e:	4a13      	ldr	r2, [pc, #76]	; (80058ac <DMA_CalcBaseAndBitshift+0x68>)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	4413      	add	r3, r2
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	461a      	mov	r2, r3
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2b03      	cmp	r3, #3
 8005870:	d909      	bls.n	8005886 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800587a:	f023 0303 	bic.w	r3, r3, #3
 800587e:	1d1a      	adds	r2, r3, #4
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	659a      	str	r2, [r3, #88]	; 0x58
 8005884:	e007      	b.n	8005896 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800588e:	f023 0303 	bic.w	r3, r3, #3
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800589a:	4618      	mov	r0, r3
 800589c:	3714      	adds	r7, #20
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr
 80058a6:	bf00      	nop
 80058a8:	aaaaaaab 	.word	0xaaaaaaab
 80058ac:	0800bd98 	.word	0x0800bd98

080058b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058b8:	2300      	movs	r3, #0
 80058ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d11f      	bne.n	800590a <DMA_CheckFifoParam+0x5a>
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	2b03      	cmp	r3, #3
 80058ce:	d856      	bhi.n	800597e <DMA_CheckFifoParam+0xce>
 80058d0:	a201      	add	r2, pc, #4	; (adr r2, 80058d8 <DMA_CheckFifoParam+0x28>)
 80058d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058d6:	bf00      	nop
 80058d8:	080058e9 	.word	0x080058e9
 80058dc:	080058fb 	.word	0x080058fb
 80058e0:	080058e9 	.word	0x080058e9
 80058e4:	0800597f 	.word	0x0800597f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d046      	beq.n	8005982 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058f8:	e043      	b.n	8005982 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005902:	d140      	bne.n	8005986 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005908:	e03d      	b.n	8005986 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	699b      	ldr	r3, [r3, #24]
 800590e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005912:	d121      	bne.n	8005958 <DMA_CheckFifoParam+0xa8>
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	2b03      	cmp	r3, #3
 8005918:	d837      	bhi.n	800598a <DMA_CheckFifoParam+0xda>
 800591a:	a201      	add	r2, pc, #4	; (adr r2, 8005920 <DMA_CheckFifoParam+0x70>)
 800591c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005920:	08005931 	.word	0x08005931
 8005924:	08005937 	.word	0x08005937
 8005928:	08005931 	.word	0x08005931
 800592c:	08005949 	.word	0x08005949
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	73fb      	strb	r3, [r7, #15]
      break;
 8005934:	e030      	b.n	8005998 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800593a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800593e:	2b00      	cmp	r3, #0
 8005940:	d025      	beq.n	800598e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005946:	e022      	b.n	800598e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800594c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005950:	d11f      	bne.n	8005992 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005956:	e01c      	b.n	8005992 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	2b02      	cmp	r3, #2
 800595c:	d903      	bls.n	8005966 <DMA_CheckFifoParam+0xb6>
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	2b03      	cmp	r3, #3
 8005962:	d003      	beq.n	800596c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005964:	e018      	b.n	8005998 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	73fb      	strb	r3, [r7, #15]
      break;
 800596a:	e015      	b.n	8005998 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005970:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005974:	2b00      	cmp	r3, #0
 8005976:	d00e      	beq.n	8005996 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	73fb      	strb	r3, [r7, #15]
      break;
 800597c:	e00b      	b.n	8005996 <DMA_CheckFifoParam+0xe6>
      break;
 800597e:	bf00      	nop
 8005980:	e00a      	b.n	8005998 <DMA_CheckFifoParam+0xe8>
      break;
 8005982:	bf00      	nop
 8005984:	e008      	b.n	8005998 <DMA_CheckFifoParam+0xe8>
      break;
 8005986:	bf00      	nop
 8005988:	e006      	b.n	8005998 <DMA_CheckFifoParam+0xe8>
      break;
 800598a:	bf00      	nop
 800598c:	e004      	b.n	8005998 <DMA_CheckFifoParam+0xe8>
      break;
 800598e:	bf00      	nop
 8005990:	e002      	b.n	8005998 <DMA_CheckFifoParam+0xe8>
      break;   
 8005992:	bf00      	nop
 8005994:	e000      	b.n	8005998 <DMA_CheckFifoParam+0xe8>
      break;
 8005996:	bf00      	nop
    }
  } 
  
  return status; 
 8005998:	7bfb      	ldrb	r3, [r7, #15]
}
 800599a:	4618      	mov	r0, r3
 800599c:	3714      	adds	r7, #20
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr
 80059a6:	bf00      	nop

080059a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b089      	sub	sp, #36	; 0x24
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80059b2:	2300      	movs	r3, #0
 80059b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80059b6:	2300      	movs	r3, #0
 80059b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80059ba:	2300      	movs	r3, #0
 80059bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80059be:	2300      	movs	r3, #0
 80059c0:	61fb      	str	r3, [r7, #28]
 80059c2:	e165      	b.n	8005c90 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80059c4:	2201      	movs	r2, #1
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	fa02 f303 	lsl.w	r3, r2, r3
 80059cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	697a      	ldr	r2, [r7, #20]
 80059d4:	4013      	ands	r3, r2
 80059d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80059d8:	693a      	ldr	r2, [r7, #16]
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	429a      	cmp	r2, r3
 80059de:	f040 8154 	bne.w	8005c8a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	f003 0303 	and.w	r3, r3, #3
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d005      	beq.n	80059fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d130      	bne.n	8005a5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	005b      	lsls	r3, r3, #1
 8005a04:	2203      	movs	r2, #3
 8005a06:	fa02 f303 	lsl.w	r3, r2, r3
 8005a0a:	43db      	mvns	r3, r3
 8005a0c:	69ba      	ldr	r2, [r7, #24]
 8005a0e:	4013      	ands	r3, r2
 8005a10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	68da      	ldr	r2, [r3, #12]
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	005b      	lsls	r3, r3, #1
 8005a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1e:	69ba      	ldr	r2, [r7, #24]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	69ba      	ldr	r2, [r7, #24]
 8005a28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005a30:	2201      	movs	r2, #1
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	fa02 f303 	lsl.w	r3, r2, r3
 8005a38:	43db      	mvns	r3, r3
 8005a3a:	69ba      	ldr	r2, [r7, #24]
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	091b      	lsrs	r3, r3, #4
 8005a46:	f003 0201 	and.w	r2, r3, #1
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a50:	69ba      	ldr	r2, [r7, #24]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	69ba      	ldr	r2, [r7, #24]
 8005a5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	f003 0303 	and.w	r3, r3, #3
 8005a64:	2b03      	cmp	r3, #3
 8005a66:	d017      	beq.n	8005a98 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	005b      	lsls	r3, r3, #1
 8005a72:	2203      	movs	r2, #3
 8005a74:	fa02 f303 	lsl.w	r3, r2, r3
 8005a78:	43db      	mvns	r3, r3
 8005a7a:	69ba      	ldr	r2, [r7, #24]
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	689a      	ldr	r2, [r3, #8]
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	005b      	lsls	r3, r3, #1
 8005a88:	fa02 f303 	lsl.w	r3, r2, r3
 8005a8c:	69ba      	ldr	r2, [r7, #24]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	69ba      	ldr	r2, [r7, #24]
 8005a96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	f003 0303 	and.w	r3, r3, #3
 8005aa0:	2b02      	cmp	r3, #2
 8005aa2:	d123      	bne.n	8005aec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	08da      	lsrs	r2, r3, #3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	3208      	adds	r2, #8
 8005aac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	f003 0307 	and.w	r3, r3, #7
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	220f      	movs	r2, #15
 8005abc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac0:	43db      	mvns	r3, r3
 8005ac2:	69ba      	ldr	r2, [r7, #24]
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	691a      	ldr	r2, [r3, #16]
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	f003 0307 	and.w	r3, r3, #7
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad8:	69ba      	ldr	r2, [r7, #24]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	08da      	lsrs	r2, r3, #3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	3208      	adds	r2, #8
 8005ae6:	69b9      	ldr	r1, [r7, #24]
 8005ae8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	005b      	lsls	r3, r3, #1
 8005af6:	2203      	movs	r2, #3
 8005af8:	fa02 f303 	lsl.w	r3, r2, r3
 8005afc:	43db      	mvns	r3, r3
 8005afe:	69ba      	ldr	r2, [r7, #24]
 8005b00:	4013      	ands	r3, r2
 8005b02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	f003 0203 	and.w	r2, r3, #3
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	005b      	lsls	r3, r3, #1
 8005b10:	fa02 f303 	lsl.w	r3, r2, r3
 8005b14:	69ba      	ldr	r2, [r7, #24]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	69ba      	ldr	r2, [r7, #24]
 8005b1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	f000 80ae 	beq.w	8005c8a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b2e:	2300      	movs	r3, #0
 8005b30:	60fb      	str	r3, [r7, #12]
 8005b32:	4b5d      	ldr	r3, [pc, #372]	; (8005ca8 <HAL_GPIO_Init+0x300>)
 8005b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b36:	4a5c      	ldr	r2, [pc, #368]	; (8005ca8 <HAL_GPIO_Init+0x300>)
 8005b38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b3c:	6453      	str	r3, [r2, #68]	; 0x44
 8005b3e:	4b5a      	ldr	r3, [pc, #360]	; (8005ca8 <HAL_GPIO_Init+0x300>)
 8005b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b46:	60fb      	str	r3, [r7, #12]
 8005b48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b4a:	4a58      	ldr	r2, [pc, #352]	; (8005cac <HAL_GPIO_Init+0x304>)
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	089b      	lsrs	r3, r3, #2
 8005b50:	3302      	adds	r3, #2
 8005b52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	f003 0303 	and.w	r3, r3, #3
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	220f      	movs	r2, #15
 8005b62:	fa02 f303 	lsl.w	r3, r2, r3
 8005b66:	43db      	mvns	r3, r3
 8005b68:	69ba      	ldr	r2, [r7, #24]
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a4f      	ldr	r2, [pc, #316]	; (8005cb0 <HAL_GPIO_Init+0x308>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d025      	beq.n	8005bc2 <HAL_GPIO_Init+0x21a>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a4e      	ldr	r2, [pc, #312]	; (8005cb4 <HAL_GPIO_Init+0x30c>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d01f      	beq.n	8005bbe <HAL_GPIO_Init+0x216>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a4d      	ldr	r2, [pc, #308]	; (8005cb8 <HAL_GPIO_Init+0x310>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d019      	beq.n	8005bba <HAL_GPIO_Init+0x212>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a4c      	ldr	r2, [pc, #304]	; (8005cbc <HAL_GPIO_Init+0x314>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d013      	beq.n	8005bb6 <HAL_GPIO_Init+0x20e>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a4b      	ldr	r2, [pc, #300]	; (8005cc0 <HAL_GPIO_Init+0x318>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d00d      	beq.n	8005bb2 <HAL_GPIO_Init+0x20a>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a4a      	ldr	r2, [pc, #296]	; (8005cc4 <HAL_GPIO_Init+0x31c>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d007      	beq.n	8005bae <HAL_GPIO_Init+0x206>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a49      	ldr	r2, [pc, #292]	; (8005cc8 <HAL_GPIO_Init+0x320>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d101      	bne.n	8005baa <HAL_GPIO_Init+0x202>
 8005ba6:	2306      	movs	r3, #6
 8005ba8:	e00c      	b.n	8005bc4 <HAL_GPIO_Init+0x21c>
 8005baa:	2307      	movs	r3, #7
 8005bac:	e00a      	b.n	8005bc4 <HAL_GPIO_Init+0x21c>
 8005bae:	2305      	movs	r3, #5
 8005bb0:	e008      	b.n	8005bc4 <HAL_GPIO_Init+0x21c>
 8005bb2:	2304      	movs	r3, #4
 8005bb4:	e006      	b.n	8005bc4 <HAL_GPIO_Init+0x21c>
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	e004      	b.n	8005bc4 <HAL_GPIO_Init+0x21c>
 8005bba:	2302      	movs	r3, #2
 8005bbc:	e002      	b.n	8005bc4 <HAL_GPIO_Init+0x21c>
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e000      	b.n	8005bc4 <HAL_GPIO_Init+0x21c>
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	69fa      	ldr	r2, [r7, #28]
 8005bc6:	f002 0203 	and.w	r2, r2, #3
 8005bca:	0092      	lsls	r2, r2, #2
 8005bcc:	4093      	lsls	r3, r2
 8005bce:	69ba      	ldr	r2, [r7, #24]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005bd4:	4935      	ldr	r1, [pc, #212]	; (8005cac <HAL_GPIO_Init+0x304>)
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	089b      	lsrs	r3, r3, #2
 8005bda:	3302      	adds	r3, #2
 8005bdc:	69ba      	ldr	r2, [r7, #24]
 8005bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005be2:	4b3a      	ldr	r3, [pc, #232]	; (8005ccc <HAL_GPIO_Init+0x324>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	43db      	mvns	r3, r3
 8005bec:	69ba      	ldr	r2, [r7, #24]
 8005bee:	4013      	ands	r3, r2
 8005bf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d003      	beq.n	8005c06 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005bfe:	69ba      	ldr	r2, [r7, #24]
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005c06:	4a31      	ldr	r2, [pc, #196]	; (8005ccc <HAL_GPIO_Init+0x324>)
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005c0c:	4b2f      	ldr	r3, [pc, #188]	; (8005ccc <HAL_GPIO_Init+0x324>)
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	43db      	mvns	r3, r3
 8005c16:	69ba      	ldr	r2, [r7, #24]
 8005c18:	4013      	ands	r3, r2
 8005c1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d003      	beq.n	8005c30 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005c28:	69ba      	ldr	r2, [r7, #24]
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005c30:	4a26      	ldr	r2, [pc, #152]	; (8005ccc <HAL_GPIO_Init+0x324>)
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005c36:	4b25      	ldr	r3, [pc, #148]	; (8005ccc <HAL_GPIO_Init+0x324>)
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	43db      	mvns	r3, r3
 8005c40:	69ba      	ldr	r2, [r7, #24]
 8005c42:	4013      	ands	r3, r2
 8005c44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d003      	beq.n	8005c5a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005c52:	69ba      	ldr	r2, [r7, #24]
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005c5a:	4a1c      	ldr	r2, [pc, #112]	; (8005ccc <HAL_GPIO_Init+0x324>)
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005c60:	4b1a      	ldr	r3, [pc, #104]	; (8005ccc <HAL_GPIO_Init+0x324>)
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	43db      	mvns	r3, r3
 8005c6a:	69ba      	ldr	r2, [r7, #24]
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d003      	beq.n	8005c84 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005c7c:	69ba      	ldr	r2, [r7, #24]
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005c84:	4a11      	ldr	r2, [pc, #68]	; (8005ccc <HAL_GPIO_Init+0x324>)
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	61fb      	str	r3, [r7, #28]
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	2b0f      	cmp	r3, #15
 8005c94:	f67f ae96 	bls.w	80059c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005c98:	bf00      	nop
 8005c9a:	bf00      	nop
 8005c9c:	3724      	adds	r7, #36	; 0x24
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	40023800 	.word	0x40023800
 8005cac:	40013800 	.word	0x40013800
 8005cb0:	40020000 	.word	0x40020000
 8005cb4:	40020400 	.word	0x40020400
 8005cb8:	40020800 	.word	0x40020800
 8005cbc:	40020c00 	.word	0x40020c00
 8005cc0:	40021000 	.word	0x40021000
 8005cc4:	40021400 	.word	0x40021400
 8005cc8:	40021800 	.word	0x40021800
 8005ccc:	40013c00 	.word	0x40013c00

08005cd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	460b      	mov	r3, r1
 8005cda:	807b      	strh	r3, [r7, #2]
 8005cdc:	4613      	mov	r3, r2
 8005cde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005ce0:	787b      	ldrb	r3, [r7, #1]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d003      	beq.n	8005cee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005ce6:	887a      	ldrh	r2, [r7, #2]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005cec:	e003      	b.n	8005cf6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005cee:	887b      	ldrh	r3, [r7, #2]
 8005cf0:	041a      	lsls	r2, r3, #16
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	619a      	str	r2, [r3, #24]
}
 8005cf6:	bf00      	nop
 8005cf8:	370c      	adds	r7, #12
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr
	...

08005d04 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b086      	sub	sp, #24
 8005d08:	af02      	add	r7, sp, #8
 8005d0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005d0c:	f7fe faae 	bl	800426c <HAL_GetTick>
 8005d10:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d101      	bne.n	8005d1c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e069      	b.n	8005df0 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d10b      	bne.n	8005d40 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f7fd fabd 	bl	80032b0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8005d36:	f241 3188 	movw	r1, #5000	; 0x1388
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 fd46 	bl	80067cc <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	3b01      	subs	r3, #1
 8005d50:	021a      	lsls	r2, r3, #8
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	430a      	orrs	r2, r1
 8005d58:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d5e:	9300      	str	r3, [sp, #0]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2200      	movs	r2, #0
 8005d64:	2120      	movs	r1, #32
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f000 fd71 	bl	800684e <QSPI_WaitFlagStateUntilTimeout>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005d70:	7afb      	ldrb	r3, [r7, #11]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d137      	bne.n	8005de6 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005d80:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	6852      	ldr	r2, [r2, #4]
 8005d88:	0611      	lsls	r1, r2, #24
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	68d2      	ldr	r2, [r2, #12]
 8005d8e:	4311      	orrs	r1, r2
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	69d2      	ldr	r2, [r2, #28]
 8005d94:	4311      	orrs	r1, r2
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	6a12      	ldr	r2, [r2, #32]
 8005d9a:	4311      	orrs	r1, r2
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	6812      	ldr	r2, [r2, #0]
 8005da0:	430b      	orrs	r3, r1
 8005da2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	685a      	ldr	r2, [r3, #4]
 8005daa:	4b13      	ldr	r3, [pc, #76]	; (8005df8 <HAL_QSPI_Init+0xf4>)
 8005dac:	4013      	ands	r3, r2
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	6912      	ldr	r2, [r2, #16]
 8005db2:	0411      	lsls	r1, r2, #16
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	6952      	ldr	r2, [r2, #20]
 8005db8:	4311      	orrs	r1, r2
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	6992      	ldr	r2, [r2, #24]
 8005dbe:	4311      	orrs	r1, r2
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	6812      	ldr	r2, [r2, #0]
 8005dc4:	430b      	orrs	r3, r1
 8005dc6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f042 0201 	orr.w	r2, r2, #1
 8005dd6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2201      	movs	r2, #1
 8005de2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005dee:	7afb      	ldrb	r3, [r7, #11]
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3710      	adds	r7, #16
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	ffe0f8fe 	.word	0xffe0f8fe

08005dfc <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi : QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b086      	sub	sp, #24
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	f003 0304 	and.w	r3, r3, #4
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d064      	beq.n	8005ee8 <HAL_QSPI_IRQHandler+0xec>
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d05f      	beq.n	8005ee8 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	3320      	adds	r3, #32
 8005e2e:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	2b12      	cmp	r3, #18
 8005e3a:	d125      	bne.n	8005e88 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8005e3c:	e01c      	b.n	8005e78 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00f      	beq.n	8005e66 <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4a:	781a      	ldrb	r2, [r3, #0]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e54:	1c5a      	adds	r2, r3, #1
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e5e:	1e5a      	subs	r2, r3, #1
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	62da      	str	r2, [r3, #44]	; 0x2c
 8005e64:	e008      	b.n	8005e78 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005e74:	601a      	str	r2, [r3, #0]
          break;
 8005e76:	e033      	b.n	8005ee0 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	f003 0304 	and.w	r3, r3, #4
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d1db      	bne.n	8005e3e <HAL_QSPI_IRQHandler+0x42>
 8005e86:	e02b      	b.n	8005ee0 <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	2b22      	cmp	r3, #34	; 0x22
 8005e92:	d125      	bne.n	8005ee0 <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8005e94:	e01d      	b.n	8005ed2 <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d010      	beq.n	8005ec0 <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	7812      	ldrb	r2, [r2, #0]
 8005ea6:	b2d2      	uxtb	r2, r2
 8005ea8:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eae:	1c5a      	adds	r2, r3, #1
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb8:	1e5a      	subs	r2, r3, #1
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	639a      	str	r2, [r3, #56]	; 0x38
 8005ebe:	e008      	b.n	8005ed2 <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005ece:	601a      	str	r2, [r3, #0]
          break;
 8005ed0:	e006      	b.n	8005ee0 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	f003 0304 	and.w	r3, r3, #4
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d1da      	bne.n	8005e96 <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f000 fb8b 	bl	80065fc <HAL_QSPI_FifoThresholdCallback>
 8005ee6:	e142      	b.n	800616e <HAL_QSPI_IRQHandler+0x372>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	f003 0302 	and.w	r3, r3, #2
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	f000 80b6 	beq.w	8006060 <HAL_QSPI_IRQHandler+0x264>
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	f000 80b0 	beq.w	8006060 <HAL_QSPI_IRQHandler+0x264>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	2202      	movs	r2, #2
 8005f06:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8005f16:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	2b12      	cmp	r3, #18
 8005f22:	d123      	bne.n	8005f6c <HAL_QSPI_IRQHandler+0x170>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f003 0304 	and.w	r3, r3, #4
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d011      	beq.n	8005f56 <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f022 0204 	bic.w	r2, r2, #4
 8005f40:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f022 0201 	bic.w	r2, r2, #1
 8005f54:	601a      	str	r2, [r3, #0]
      }

      /* Clear Busy bit */
      HAL_QSPI_Abort_IT(hqspi);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 fbdc 	bl	8006714 <HAL_QSPI_Abort_IT>

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f000 fb3f 	bl	80065e8 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8005f6a:	e0fd      	b.n	8006168 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	2b22      	cmp	r3, #34	; 0x22
 8005f76:	d146      	bne.n	8006006 <HAL_QSPI_IRQHandler+0x20a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f003 0304 	and.w	r3, r3, #4
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d012      	beq.n	8005fac <HAL_QSPI_IRQHandler+0x1b0>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f022 0204 	bic.w	r2, r2, #4
 8005f94:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f022 0201 	bic.w	r2, r2, #1
 8005fa8:	601a      	str	r2, [r3, #0]
 8005faa:	e021      	b.n	8005ff0 <HAL_QSPI_IRQHandler+0x1f4>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	3320      	adds	r3, #32
 8005fb2:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8005fb4:	e013      	b.n	8005fde <HAL_QSPI_IRQHandler+0x1e2>
        {
          if (hqspi->RxXferCount > 0U)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d017      	beq.n	8005fee <HAL_QSPI_IRQHandler+0x1f2>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	7812      	ldrb	r2, [r2, #0]
 8005fc6:	b2d2      	uxtb	r2, r2
 8005fc8:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fce:	1c5a      	adds	r2, r3, #1
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd8:	1e5a      	subs	r2, r3, #1
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d1e4      	bne.n	8005fb6 <HAL_QSPI_IRQHandler+0x1ba>
 8005fec:	e000      	b.n	8005ff0 <HAL_QSPI_IRQHandler+0x1f4>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 8005fee:	bf00      	nop
          }
        }
      }

      /* Workaround - Extra data written in the FIFO at the end of a read transfer */
      HAL_QSPI_Abort_IT(hqspi);
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 fb8f 	bl	8006714 <HAL_QSPI_Abort_IT>

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 fae8 	bl	80065d4 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8006004:	e0b0      	b.n	8006168 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800600c:	b2db      	uxtb	r3, r3
 800600e:	2b02      	cmp	r3, #2
 8006010:	d107      	bne.n	8006022 <HAL_QSPI_IRQHandler+0x226>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2201      	movs	r2, #1
 8006016:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 fad0 	bl	80065c0 <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8006020:	e0a2      	b.n	8006168 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006028:	b2db      	uxtb	r3, r3
 800602a:	2b08      	cmp	r3, #8
 800602c:	f040 809c 	bne.w	8006168 <HAL_QSPI_IRQHandler+0x36c>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	695a      	ldr	r2, [r3, #20]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800603e:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800604c:	2b00      	cmp	r3, #0
 800604e:	d103      	bne.n	8006058 <HAL_QSPI_IRQHandler+0x25c>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f000 faab 	bl	80065ac <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8006056:	e087      	b.n	8006168 <HAL_QSPI_IRQHandler+0x36c>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 fa9d 	bl	8006598 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800605e:	e083      	b.n	8006168 <HAL_QSPI_IRQHandler+0x36c>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	f003 0308 	and.w	r3, r3, #8
 8006066:	2b00      	cmp	r3, #0
 8006068:	d01f      	beq.n	80060aa <HAL_QSPI_IRQHandler+0x2ae>
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006070:	2b00      	cmp	r3, #0
 8006072:	d01a      	beq.n	80060aa <HAL_QSPI_IRQHandler+0x2ae>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2208      	movs	r2, #8
 800607a:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006086:	2b00      	cmp	r3, #0
 8006088:	d00b      	beq.n	80060a2 <HAL_QSPI_IRQHandler+0x2a6>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8006098:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2201      	movs	r2, #1
 800609e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 fab4 	bl	8006610 <HAL_QSPI_StatusMatchCallback>
 80060a8:	e061      	b.n	800616e <HAL_QSPI_IRQHandler+0x372>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	f003 0301 	and.w	r3, r3, #1
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d047      	beq.n	8006144 <HAL_QSPI_IRQHandler+0x348>
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d042      	beq.n	8006144 <HAL_QSPI_IRQHandler+0x348>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2201      	movs	r2, #1
 80060c4:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80060d4:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060da:	f043 0202 	orr.w	r2, r3, #2
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f003 0304 	and.w	r3, r3, #4
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d021      	beq.n	8006134 <HAL_QSPI_IRQHandler+0x338>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f022 0204 	bic.w	r2, r2, #4
 80060fe:	601a      	str	r2, [r3, #0]

      /* Disable the DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006104:	4a1c      	ldr	r2, [pc, #112]	; (8006178 <HAL_QSPI_IRQHandler+0x37c>)
 8006106:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800610c:	4618      	mov	r0, r3
 800610e:	f7ff f9bf 	bl	8005490 <HAL_DMA_Abort_IT>
 8006112:	4603      	mov	r3, r0
 8006114:	2b00      	cmp	r3, #0
 8006116:	d029      	beq.n	800616c <HAL_QSPI_IRQHandler+0x370>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800611c:	f043 0204 	orr.w	r2, r3, #4
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 fa33 	bl	8006598 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8006132:	e01b      	b.n	800616c <HAL_QSPI_IRQHandler+0x370>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f000 fa2b 	bl	8006598 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8006142:	e013      	b.n	800616c <HAL_QSPI_IRQHandler+0x370>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	f003 0310 	and.w	r3, r3, #16
 800614a:	2b00      	cmp	r3, #0
 800614c:	d00f      	beq.n	800616e <HAL_QSPI_IRQHandler+0x372>
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006154:	2b00      	cmp	r3, #0
 8006156:	d00a      	beq.n	800616e <HAL_QSPI_IRQHandler+0x372>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2210      	movs	r2, #16
 800615e:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f000 fa5f 	bl	8006624 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 8006166:	e002      	b.n	800616e <HAL_QSPI_IRQHandler+0x372>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8006168:	bf00      	nop
 800616a:	e000      	b.n	800616e <HAL_QSPI_IRQHandler+0x372>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800616c:	bf00      	nop
}
 800616e:	bf00      	nop
 8006170:	3718      	adds	r7, #24
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop
 8006178:	080067e9 	.word	0x080067e9

0800617c <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b088      	sub	sp, #32
 8006180:	af02      	add	r7, sp, #8
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006188:	f7fe f870 	bl	800426c <HAL_GetTick>
 800618c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006194:	b2db      	uxtb	r3, r3
 8006196:	2b01      	cmp	r3, #1
 8006198:	d101      	bne.n	800619e <HAL_QSPI_Command+0x22>
 800619a:	2302      	movs	r3, #2
 800619c:	e048      	b.n	8006230 <HAL_QSPI_Command+0xb4>
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2201      	movs	r2, #1
 80061a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d137      	bne.n	8006222 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2200      	movs	r2, #0
 80061b6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2202      	movs	r2, #2
 80061bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	9300      	str	r3, [sp, #0]
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	2200      	movs	r2, #0
 80061c8:	2120      	movs	r1, #32
 80061ca:	68f8      	ldr	r0, [r7, #12]
 80061cc:	f000 fb3f 	bl	800684e <QSPI_WaitFlagStateUntilTimeout>
 80061d0:	4603      	mov	r3, r0
 80061d2:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80061d4:	7dfb      	ldrb	r3, [r7, #23]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d125      	bne.n	8006226 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80061da:	2200      	movs	r2, #0
 80061dc:	68b9      	ldr	r1, [r7, #8]
 80061de:	68f8      	ldr	r0, [r7, #12]
 80061e0:	f000 fb6c 	bl	80068bc <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d115      	bne.n	8006218 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	9300      	str	r3, [sp, #0]
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	2201      	movs	r2, #1
 80061f4:	2102      	movs	r1, #2
 80061f6:	68f8      	ldr	r0, [r7, #12]
 80061f8:	f000 fb29 	bl	800684e <QSPI_WaitFlagStateUntilTimeout>
 80061fc:	4603      	mov	r3, r0
 80061fe:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8006200:	7dfb      	ldrb	r3, [r7, #23]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d10f      	bne.n	8006226 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	2202      	movs	r2, #2
 800620c:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2201      	movs	r2, #1
 8006212:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006216:	e006      	b.n	8006226 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006220:	e001      	b.n	8006226 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8006222:	2302      	movs	r3, #2
 8006224:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2200      	movs	r2, #0
 800622a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800622e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006230:	4618      	mov	r0, r3
 8006232:	3718      	adds	r7, #24
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b08a      	sub	sp, #40	; 0x28
 800623c:	af02      	add	r7, sp, #8
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006244:	2300      	movs	r3, #0
 8006246:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8006248:	f7fe f810 	bl	800426c <HAL_GetTick>
 800624c:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	3320      	adds	r3, #32
 8006254:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800625c:	b2db      	uxtb	r3, r3
 800625e:	2b01      	cmp	r3, #1
 8006260:	d101      	bne.n	8006266 <HAL_QSPI_Transmit+0x2e>
 8006262:	2302      	movs	r3, #2
 8006264:	e07b      	b.n	800635e <HAL_QSPI_Transmit+0x126>
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2201      	movs	r2, #1
 800626a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006274:	b2db      	uxtb	r3, r3
 8006276:	2b01      	cmp	r3, #1
 8006278:	d16a      	bne.n	8006350 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d05b      	beq.n	800633e <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2212      	movs	r2, #18
 800628a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	691b      	ldr	r3, [r3, #16]
 8006294:	1c5a      	adds	r2, r3, #1
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	691b      	ldr	r3, [r3, #16]
 80062a0:	1c5a      	adds	r2, r3, #1
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	68ba      	ldr	r2, [r7, #8]
 80062aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	695a      	ldr	r2, [r3, #20]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80062ba:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 80062bc:	e01b      	b.n	80062f6 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	9300      	str	r3, [sp, #0]
 80062c2:	69bb      	ldr	r3, [r7, #24]
 80062c4:	2201      	movs	r2, #1
 80062c6:	2104      	movs	r1, #4
 80062c8:	68f8      	ldr	r0, [r7, #12]
 80062ca:	f000 fac0 	bl	800684e <QSPI_WaitFlagStateUntilTimeout>
 80062ce:	4603      	mov	r3, r0
 80062d0:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 80062d2:	7ffb      	ldrb	r3, [r7, #31]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d113      	bne.n	8006300 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062dc:	781a      	ldrb	r2, [r3, #0]
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e6:	1c5a      	adds	r2, r3, #1
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f0:	1e5a      	subs	r2, r3, #1
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d1df      	bne.n	80062be <HAL_QSPI_Transmit+0x86>
 80062fe:	e000      	b.n	8006302 <HAL_QSPI_Transmit+0xca>
          break;
 8006300:	bf00      	nop
      }

      if (status == HAL_OK)
 8006302:	7ffb      	ldrb	r3, [r7, #31]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d115      	bne.n	8006334 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	9300      	str	r3, [sp, #0]
 800630c:	69bb      	ldr	r3, [r7, #24]
 800630e:	2201      	movs	r2, #1
 8006310:	2102      	movs	r1, #2
 8006312:	68f8      	ldr	r0, [r7, #12]
 8006314:	f000 fa9b 	bl	800684e <QSPI_WaitFlagStateUntilTimeout>
 8006318:	4603      	mov	r3, r0
 800631a:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800631c:	7ffb      	ldrb	r3, [r7, #31]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d108      	bne.n	8006334 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	2202      	movs	r2, #2
 8006328:	60da      	str	r2, [r3, #12]

          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 800632a:	68f8      	ldr	r0, [r7, #12]
 800632c:	f000 f984 	bl	8006638 <HAL_QSPI_Abort>
 8006330:	4603      	mov	r3, r0
 8006332:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2201      	movs	r2, #1
 8006338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800633c:	e00a      	b.n	8006354 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006342:	f043 0208 	orr.w	r2, r3, #8
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	77fb      	strb	r3, [r7, #31]
 800634e:	e001      	b.n	8006354 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 8006350:	2302      	movs	r3, #2
 8006352:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2200      	movs	r2, #0
 8006358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800635c:	7ffb      	ldrb	r3, [r7, #31]
}
 800635e:	4618      	mov	r0, r3
 8006360:	3720      	adds	r7, #32
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}

08006366 <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8006366:	b580      	push	{r7, lr}
 8006368:	b08a      	sub	sp, #40	; 0x28
 800636a:	af02      	add	r7, sp, #8
 800636c:	60f8      	str	r0, [r7, #12]
 800636e:	60b9      	str	r1, [r7, #8]
 8006370:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006372:	2300      	movs	r3, #0
 8006374:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8006376:	f7fd ff79 	bl	800426c <HAL_GetTick>
 800637a:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	699b      	ldr	r3, [r3, #24]
 8006382:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	3320      	adds	r3, #32
 800638a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006392:	b2db      	uxtb	r3, r3
 8006394:	2b01      	cmp	r3, #1
 8006396:	d101      	bne.n	800639c <HAL_QSPI_Receive+0x36>
 8006398:	2302      	movs	r3, #2
 800639a:	e082      	b.n	80064a2 <HAL_QSPI_Receive+0x13c>
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d171      	bne.n	8006494 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2200      	movs	r2, #0
 80063b4:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d062      	beq.n	8006482 <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2222      	movs	r2, #34	; 0x22
 80063c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	691b      	ldr	r3, [r3, #16]
 80063ca:	1c5a      	adds	r2, r3, #1
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	1c5a      	adds	r2, r3, #1
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	68ba      	ldr	r2, [r7, #8]
 80063e0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	695b      	ldr	r3, [r3, #20]
 80063e8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80063f4:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	697a      	ldr	r2, [r7, #20]
 80063fc:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 80063fe:	e01c      	b.n	800643a <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	9300      	str	r3, [sp, #0]
 8006404:	69bb      	ldr	r3, [r7, #24]
 8006406:	2201      	movs	r2, #1
 8006408:	2106      	movs	r1, #6
 800640a:	68f8      	ldr	r0, [r7, #12]
 800640c:	f000 fa1f 	bl	800684e <QSPI_WaitFlagStateUntilTimeout>
 8006410:	4603      	mov	r3, r0
 8006412:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8006414:	7ffb      	ldrb	r3, [r7, #31]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d114      	bne.n	8006444 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800641e:	693a      	ldr	r2, [r7, #16]
 8006420:	7812      	ldrb	r2, [r2, #0]
 8006422:	b2d2      	uxtb	r2, r2
 8006424:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800642a:	1c5a      	adds	r2, r3, #1
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006434:	1e5a      	subs	r2, r3, #1
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800643e:	2b00      	cmp	r3, #0
 8006440:	d1de      	bne.n	8006400 <HAL_QSPI_Receive+0x9a>
 8006442:	e000      	b.n	8006446 <HAL_QSPI_Receive+0xe0>
          break;
 8006444:	bf00      	nop
      }

      if (status == HAL_OK)
 8006446:	7ffb      	ldrb	r3, [r7, #31]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d115      	bne.n	8006478 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	9300      	str	r3, [sp, #0]
 8006450:	69bb      	ldr	r3, [r7, #24]
 8006452:	2201      	movs	r2, #1
 8006454:	2102      	movs	r1, #2
 8006456:	68f8      	ldr	r0, [r7, #12]
 8006458:	f000 f9f9 	bl	800684e <QSPI_WaitFlagStateUntilTimeout>
 800645c:	4603      	mov	r3, r0
 800645e:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8006460:	7ffb      	ldrb	r3, [r7, #31]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d108      	bne.n	8006478 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	2202      	movs	r2, #2
 800646c:	60da      	str	r2, [r3, #12]

          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 800646e:	68f8      	ldr	r0, [r7, #12]
 8006470:	f000 f8e2 	bl	8006638 <HAL_QSPI_Abort>
 8006474:	4603      	mov	r3, r0
 8006476:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006480:	e00a      	b.n	8006498 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006486:	f043 0208 	orr.w	r2, r3, #8
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	77fb      	strb	r3, [r7, #31]
 8006492:	e001      	b.n	8006498 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 8006494:	2302      	movs	r3, #2
 8006496:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2200      	movs	r2, #0
 800649c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 80064a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3720      	adds	r7, #32
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}

080064aa <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 80064aa:	b580      	push	{r7, lr}
 80064ac:	b088      	sub	sp, #32
 80064ae:	af02      	add	r7, sp, #8
 80064b0:	60f8      	str	r0, [r7, #12]
 80064b2:	60b9      	str	r1, [r7, #8]
 80064b4:	607a      	str	r2, [r7, #4]
 80064b6:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80064b8:	f7fd fed8 	bl	800426c <HAL_GetTick>
 80064bc:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d101      	bne.n	80064ce <HAL_QSPI_AutoPolling+0x24>
 80064ca:	2302      	movs	r3, #2
 80064cc:	e060      	b.n	8006590 <HAL_QSPI_AutoPolling+0xe6>
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2201      	movs	r2, #1
 80064d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d14f      	bne.n	8006582 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2200      	movs	r2, #0
 80064e6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2242      	movs	r2, #66	; 0x42
 80064ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	9300      	str	r3, [sp, #0]
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	2200      	movs	r2, #0
 80064f8:	2120      	movs	r1, #32
 80064fa:	68f8      	ldr	r0, [r7, #12]
 80064fc:	f000 f9a7 	bl	800684e <QSPI_WaitFlagStateUntilTimeout>
 8006500:	4603      	mov	r3, r0
 8006502:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8006504:	7dfb      	ldrb	r3, [r7, #23]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d13d      	bne.n	8006586 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	6812      	ldr	r2, [r2, #0]
 8006512:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	6852      	ldr	r2, [r2, #4]
 800651c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	6892      	ldr	r2, [r2, #8]
 8006526:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	431a      	orrs	r2, r3
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8006540:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	68da      	ldr	r2, [r3, #12]
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800654a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800654e:	68b9      	ldr	r1, [r7, #8]
 8006550:	68f8      	ldr	r0, [r7, #12]
 8006552:	f000 f9b3 	bl	80068bc <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	9300      	str	r3, [sp, #0]
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	2201      	movs	r2, #1
 800655e:	2108      	movs	r1, #8
 8006560:	68f8      	ldr	r0, [r7, #12]
 8006562:	f000 f974 	bl	800684e <QSPI_WaitFlagStateUntilTimeout>
 8006566:	4603      	mov	r3, r0
 8006568:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800656a:	7dfb      	ldrb	r3, [r7, #23]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d10a      	bne.n	8006586 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	2208      	movs	r2, #8
 8006576:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006580:	e001      	b.n	8006586 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8006582:	2302      	movs	r3, #2
 8006584:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2200      	movs	r2, #0
 800658a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800658e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006590:	4618      	mov	r0, r3
 8006592:	3718      	adds	r7, #24
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 8006598:	b480      	push	{r7}
 800659a:	b083      	sub	sp, #12
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 80065a0:	bf00      	nop
 80065a2:	370c      	adds	r7, #12
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr

080065ac <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 80065b4:	bf00      	nop
 80065b6:	370c      	adds	r7, #12
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b083      	sub	sp, #12
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 80065c8:	bf00      	nop
 80065ca:	370c      	adds	r7, #12
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr

080065d4 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b083      	sub	sp, #12
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 80065dc:	bf00      	nop
 80065de:	370c      	adds	r7, #12
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr

080065e8 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b083      	sub	sp, #12
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 80065f0:	bf00      	nop
 80065f2:	370c      	adds	r7, #12
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 8006604:	bf00      	nop
 8006606:	370c      	adds	r7, #12
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr

08006610 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 8006610:	b480      	push	{r7}
 8006612:	b083      	sub	sp, #12
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 8006618:	bf00      	nop
 800661a:	370c      	adds	r7, #12
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr

08006624 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 800662c:	bf00      	nop
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b086      	sub	sp, #24
 800663c:	af02      	add	r7, sp, #8
 800663e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006640:	2300      	movs	r3, #0
 8006642:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8006644:	f7fd fe12 	bl	800426c <HAL_GetTick>
 8006648:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006650:	b2db      	uxtb	r3, r3
 8006652:	f003 0302 	and.w	r3, r3, #2
 8006656:	2b00      	cmp	r3, #0
 8006658:	d056      	beq.n	8006708 <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f003 0304 	and.w	r3, r3, #4
 800666c:	2b00      	cmp	r3, #0
 800666e:	d017      	beq.n	80066a0 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f022 0204 	bic.w	r2, r2, #4
 800667e:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006684:	4618      	mov	r0, r3
 8006686:	f7fe fe93 	bl	80053b0 <HAL_DMA_Abort>
 800668a:	4603      	mov	r3, r0
 800668c:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 800668e:	7bfb      	ldrb	r3, [r7, #15]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d005      	beq.n	80066a0 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006698:	f043 0204 	orr.w	r2, r3, #4
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f042 0202 	orr.w	r2, r2, #2
 80066ae:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066b4:	9300      	str	r3, [sp, #0]
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	2201      	movs	r2, #1
 80066ba:	2102      	movs	r1, #2
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f000 f8c6 	bl	800684e <QSPI_WaitFlagStateUntilTimeout>
 80066c2:	4603      	mov	r3, r0
 80066c4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80066c6:	7bfb      	ldrb	r3, [r7, #15]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d10e      	bne.n	80066ea <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	2202      	movs	r2, #2
 80066d2:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066d8:	9300      	str	r3, [sp, #0]
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	2200      	movs	r2, #0
 80066de:	2120      	movs	r1, #32
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f000 f8b4 	bl	800684e <QSPI_WaitFlagStateUntilTimeout>
 80066e6:	4603      	mov	r3, r0
 80066e8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80066ea:	7bfb      	ldrb	r3, [r7, #15]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d10b      	bne.n	8006708 <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	695a      	ldr	r2, [r3, #20]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80066fe:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2201      	movs	r2, #1
 8006704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
  }

  return status;
 8006708:	7bfb      	ldrb	r3, [r7, #15]
}
 800670a:	4618      	mov	r0, r3
 800670c:	3710      	adds	r7, #16
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
	...

08006714 <HAL_QSPI_Abort_IT>:
* @brief  Abort the current transmission (non-blocking function)
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort_IT(QSPI_HandleTypeDef *hqspi)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800671c:	2300      	movs	r3, #0
 800671e:	73fb      	strb	r3, [r7, #15]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006726:	b2db      	uxtb	r3, r3
 8006728:	f003 0302 	and.w	r3, r3, #2
 800672c:	2b00      	cmp	r3, #0
 800672e:	d046      	beq.n	80067be <HAL_QSPI_Abort_IT+0xaa>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_ABORT;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2208      	movs	r2, #8
 800673c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable all interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_TO | QSPI_IT_SM | QSPI_IT_FT | QSPI_IT_TC | QSPI_IT_TE));
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800674e:	601a      	str	r2, [r3, #0]

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f003 0304 	and.w	r3, r3, #4
 800675a:	2b00      	cmp	r3, #0
 800675c:	d01b      	beq.n	8006796 <HAL_QSPI_Abort_IT+0x82>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f022 0204 	bic.w	r2, r2, #4
 800676c:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006772:	4a15      	ldr	r2, [pc, #84]	; (80067c8 <HAL_QSPI_Abort_IT+0xb4>)
 8006774:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800677a:	4618      	mov	r0, r3
 800677c:	f7fe fe88 	bl	8005490 <HAL_DMA_Abort_IT>
 8006780:	4603      	mov	r3, r0
 8006782:	2b00      	cmp	r3, #0
 8006784:	d01b      	beq.n	80067be <HAL_QSPI_Abort_IT+0xaa>
      {
        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2201      	movs	r2, #1
 800678a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f7ff ff0c 	bl	80065ac <HAL_QSPI_AbortCpltCallback>
 8006794:	e013      	b.n	80067be <HAL_QSPI_Abort_IT+0xaa>
      }
    }
    else
    {
      /* Clear interrupt */
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	2202      	movs	r2, #2
 800679c:	60da      	str	r2, [r3, #12]

      /* Enable the QSPI Transfer Complete Interrupt */
      __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80067ac:	601a      	str	r2, [r3, #0]

      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f042 0202 	orr.w	r2, r2, #2
 80067bc:	601a      	str	r2, [r3, #0]
    }
  }
  return status;
 80067be:	7bfb      	ldrb	r3, [r7, #15]
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3710      	adds	r7, #16
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}
 80067c8:	080067e9 	.word	0x080067e9

080067cc <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b083      	sub	sp, #12
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	683a      	ldr	r2, [r7, #0]
 80067da:	649a      	str	r2, [r3, #72]	; 0x48
}
 80067dc:	bf00      	nop
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <QSPI_DMAAbortCplt>:
  * @brief  DMA QSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f4:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2200      	movs	r2, #0
 80067fa:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2200      	movs	r2, #0
 8006800:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006808:	b2db      	uxtb	r3, r3
 800680a:	2b08      	cmp	r3, #8
 800680c:	d114      	bne.n	8006838 <QSPI_DMAAbortCplt+0x50>
  {
    /* DMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	2202      	movs	r2, #2
 8006814:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006824:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f042 0202 	orr.w	r2, r2, #2
 8006834:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 8006836:	e006      	b.n	8006846 <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2201      	movs	r2, #1
 800683c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 8006840:	68f8      	ldr	r0, [r7, #12]
 8006842:	f7ff fea9 	bl	8006598 <HAL_QSPI_ErrorCallback>
}
 8006846:	bf00      	nop
 8006848:	3710      	adds	r7, #16
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}

0800684e <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800684e:	b580      	push	{r7, lr}
 8006850:	b084      	sub	sp, #16
 8006852:	af00      	add	r7, sp, #0
 8006854:	60f8      	str	r0, [r7, #12]
 8006856:	60b9      	str	r1, [r7, #8]
 8006858:	603b      	str	r3, [r7, #0]
 800685a:	4613      	mov	r3, r2
 800685c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800685e:	e01a      	b.n	8006896 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006860:	69bb      	ldr	r3, [r7, #24]
 8006862:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006866:	d016      	beq.n	8006896 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006868:	f7fd fd00 	bl	800426c <HAL_GetTick>
 800686c:	4602      	mov	r2, r0
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	1ad3      	subs	r3, r2, r3
 8006872:	69ba      	ldr	r2, [r7, #24]
 8006874:	429a      	cmp	r2, r3
 8006876:	d302      	bcc.n	800687e <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006878:	69bb      	ldr	r3, [r7, #24]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d10b      	bne.n	8006896 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2204      	movs	r2, #4
 8006882:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800688a:	f043 0201 	orr.w	r2, r3, #1
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	e00e      	b.n	80068b4 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	689a      	ldr	r2, [r3, #8]
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	4013      	ands	r3, r2
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	bf14      	ite	ne
 80068a4:	2301      	movne	r3, #1
 80068a6:	2300      	moveq	r3, #0
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	461a      	mov	r2, r3
 80068ac:	79fb      	ldrb	r3, [r7, #7]
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d1d6      	bne.n	8006860 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80068b2:	2300      	movs	r3, #0
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3710      	adds	r7, #16
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 80068bc:	b480      	push	{r7}
 80068be:	b085      	sub	sp, #20
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	60b9      	str	r1, [r7, #8]
 80068c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d009      	beq.n	80068e4 <QSPI_Config+0x28>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80068d6:	d005      	beq.n	80068e4 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	3a01      	subs	r2, #1
 80068e2:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	699b      	ldr	r3, [r3, #24]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	f000 80b9 	beq.w	8006a60 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	6a1b      	ldr	r3, [r3, #32]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d05f      	beq.n	80069b6 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	68ba      	ldr	r2, [r7, #8]
 80068fc:	6892      	ldr	r2, [r2, #8]
 80068fe:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	69db      	ldr	r3, [r3, #28]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d031      	beq.n	800696c <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006910:	431a      	orrs	r2, r3
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006916:	431a      	orrs	r2, r3
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691c:	431a      	orrs	r2, r3
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	695b      	ldr	r3, [r3, #20]
 8006922:	049b      	lsls	r3, r3, #18
 8006924:	431a      	orrs	r2, r3
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	431a      	orrs	r2, r3
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	6a1b      	ldr	r3, [r3, #32]
 8006930:	431a      	orrs	r2, r3
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	431a      	orrs	r2, r3
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	69db      	ldr	r3, [r3, #28]
 800693c:	431a      	orrs	r2, r3
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	699b      	ldr	r3, [r3, #24]
 8006942:	431a      	orrs	r2, r3
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	ea42 0103 	orr.w	r1, r2, r3
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	430a      	orrs	r2, r1
 8006954:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800695c:	f000 812e 	beq.w	8006bbc <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68ba      	ldr	r2, [r7, #8]
 8006966:	6852      	ldr	r2, [r2, #4]
 8006968:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800696a:	e127      	b.n	8006bbc <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006974:	431a      	orrs	r2, r3
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800697a:	431a      	orrs	r2, r3
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006980:	431a      	orrs	r2, r3
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	695b      	ldr	r3, [r3, #20]
 8006986:	049b      	lsls	r3, r3, #18
 8006988:	431a      	orrs	r2, r3
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	431a      	orrs	r2, r3
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	6a1b      	ldr	r3, [r3, #32]
 8006994:	431a      	orrs	r2, r3
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	69db      	ldr	r3, [r3, #28]
 800699a:	431a      	orrs	r2, r3
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	699b      	ldr	r3, [r3, #24]
 80069a0:	431a      	orrs	r2, r3
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	ea42 0103 	orr.w	r1, r2, r3
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	430a      	orrs	r2, r1
 80069b2:	615a      	str	r2, [r3, #20]
}
 80069b4:	e102      	b.n	8006bbc <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	69db      	ldr	r3, [r3, #28]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d02e      	beq.n	8006a1c <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069c6:	431a      	orrs	r2, r3
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069cc:	431a      	orrs	r2, r3
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d2:	431a      	orrs	r2, r3
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	695b      	ldr	r3, [r3, #20]
 80069d8:	049b      	lsls	r3, r3, #18
 80069da:	431a      	orrs	r2, r3
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	6a1b      	ldr	r3, [r3, #32]
 80069e0:	431a      	orrs	r2, r3
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	431a      	orrs	r2, r3
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	69db      	ldr	r3, [r3, #28]
 80069ec:	431a      	orrs	r2, r3
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	699b      	ldr	r3, [r3, #24]
 80069f2:	431a      	orrs	r2, r3
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	ea42 0103 	orr.w	r1, r2, r3
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	430a      	orrs	r2, r1
 8006a04:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006a0c:	f000 80d6 	beq.w	8006bbc <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	68ba      	ldr	r2, [r7, #8]
 8006a16:	6852      	ldr	r2, [r2, #4]
 8006a18:	619a      	str	r2, [r3, #24]
}
 8006a1a:	e0cf      	b.n	8006bbc <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a24:	431a      	orrs	r2, r3
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a2a:	431a      	orrs	r2, r3
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a30:	431a      	orrs	r2, r3
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	695b      	ldr	r3, [r3, #20]
 8006a36:	049b      	lsls	r3, r3, #18
 8006a38:	431a      	orrs	r2, r3
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	6a1b      	ldr	r3, [r3, #32]
 8006a3e:	431a      	orrs	r2, r3
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	69db      	ldr	r3, [r3, #28]
 8006a44:	431a      	orrs	r2, r3
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	699b      	ldr	r3, [r3, #24]
 8006a4a:	431a      	orrs	r2, r3
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	ea42 0103 	orr.w	r1, r2, r3
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	430a      	orrs	r2, r1
 8006a5c:	615a      	str	r2, [r3, #20]
}
 8006a5e:	e0ad      	b.n	8006bbc <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	6a1b      	ldr	r3, [r3, #32]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d058      	beq.n	8006b1a <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	68ba      	ldr	r2, [r7, #8]
 8006a6e:	6892      	ldr	r2, [r2, #8]
 8006a70:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	69db      	ldr	r3, [r3, #28]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d02d      	beq.n	8006ad6 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a82:	431a      	orrs	r2, r3
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a88:	431a      	orrs	r2, r3
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8e:	431a      	orrs	r2, r3
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	695b      	ldr	r3, [r3, #20]
 8006a94:	049b      	lsls	r3, r3, #18
 8006a96:	431a      	orrs	r2, r3
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	691b      	ldr	r3, [r3, #16]
 8006a9c:	431a      	orrs	r2, r3
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	6a1b      	ldr	r3, [r3, #32]
 8006aa2:	431a      	orrs	r2, r3
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	431a      	orrs	r2, r3
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	69db      	ldr	r3, [r3, #28]
 8006aae:	431a      	orrs	r2, r3
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	699b      	ldr	r3, [r3, #24]
 8006ab4:	ea42 0103 	orr.w	r1, r2, r3
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	430a      	orrs	r2, r1
 8006ac0:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006ac8:	d078      	beq.n	8006bbc <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	68ba      	ldr	r2, [r7, #8]
 8006ad0:	6852      	ldr	r2, [r2, #4]
 8006ad2:	619a      	str	r2, [r3, #24]
}
 8006ad4:	e072      	b.n	8006bbc <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ade:	431a      	orrs	r2, r3
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ae4:	431a      	orrs	r2, r3
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aea:	431a      	orrs	r2, r3
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	695b      	ldr	r3, [r3, #20]
 8006af0:	049b      	lsls	r3, r3, #18
 8006af2:	431a      	orrs	r2, r3
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	691b      	ldr	r3, [r3, #16]
 8006af8:	431a      	orrs	r2, r3
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	6a1b      	ldr	r3, [r3, #32]
 8006afe:	431a      	orrs	r2, r3
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	69db      	ldr	r3, [r3, #28]
 8006b04:	431a      	orrs	r2, r3
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	699b      	ldr	r3, [r3, #24]
 8006b0a:	ea42 0103 	orr.w	r1, r2, r3
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	430a      	orrs	r2, r1
 8006b16:	615a      	str	r2, [r3, #20]
}
 8006b18:	e050      	b.n	8006bbc <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	69db      	ldr	r3, [r3, #28]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d02a      	beq.n	8006b78 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b2a:	431a      	orrs	r2, r3
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b30:	431a      	orrs	r2, r3
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b36:	431a      	orrs	r2, r3
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	695b      	ldr	r3, [r3, #20]
 8006b3c:	049b      	lsls	r3, r3, #18
 8006b3e:	431a      	orrs	r2, r3
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	6a1b      	ldr	r3, [r3, #32]
 8006b44:	431a      	orrs	r2, r3
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	431a      	orrs	r2, r3
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	69db      	ldr	r3, [r3, #28]
 8006b50:	431a      	orrs	r2, r3
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	699b      	ldr	r3, [r3, #24]
 8006b56:	ea42 0103 	orr.w	r1, r2, r3
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	430a      	orrs	r2, r1
 8006b62:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006b6a:	d027      	beq.n	8006bbc <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	68ba      	ldr	r2, [r7, #8]
 8006b72:	6852      	ldr	r2, [r2, #4]
 8006b74:	619a      	str	r2, [r3, #24]
}
 8006b76:	e021      	b.n	8006bbc <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d01d      	beq.n	8006bbc <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b88:	431a      	orrs	r2, r3
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b8e:	431a      	orrs	r2, r3
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b94:	431a      	orrs	r2, r3
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	695b      	ldr	r3, [r3, #20]
 8006b9a:	049b      	lsls	r3, r3, #18
 8006b9c:	431a      	orrs	r2, r3
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	6a1b      	ldr	r3, [r3, #32]
 8006ba2:	431a      	orrs	r2, r3
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	69db      	ldr	r3, [r3, #28]
 8006ba8:	431a      	orrs	r2, r3
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	699b      	ldr	r3, [r3, #24]
 8006bae:	ea42 0103 	orr.w	r1, r2, r3
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	430a      	orrs	r2, r1
 8006bba:	615a      	str	r2, [r3, #20]
}
 8006bbc:	bf00      	nop
 8006bbe:	3714      	adds	r7, #20
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr

08006bc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d101      	bne.n	8006bdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e0cc      	b.n	8006d76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006bdc:	4b68      	ldr	r3, [pc, #416]	; (8006d80 <HAL_RCC_ClockConfig+0x1b8>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 030f 	and.w	r3, r3, #15
 8006be4:	683a      	ldr	r2, [r7, #0]
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d90c      	bls.n	8006c04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bea:	4b65      	ldr	r3, [pc, #404]	; (8006d80 <HAL_RCC_ClockConfig+0x1b8>)
 8006bec:	683a      	ldr	r2, [r7, #0]
 8006bee:	b2d2      	uxtb	r2, r2
 8006bf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bf2:	4b63      	ldr	r3, [pc, #396]	; (8006d80 <HAL_RCC_ClockConfig+0x1b8>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f003 030f 	and.w	r3, r3, #15
 8006bfa:	683a      	ldr	r2, [r7, #0]
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d001      	beq.n	8006c04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	e0b8      	b.n	8006d76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f003 0302 	and.w	r3, r3, #2
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d020      	beq.n	8006c52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f003 0304 	and.w	r3, r3, #4
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d005      	beq.n	8006c28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c1c:	4b59      	ldr	r3, [pc, #356]	; (8006d84 <HAL_RCC_ClockConfig+0x1bc>)
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	4a58      	ldr	r2, [pc, #352]	; (8006d84 <HAL_RCC_ClockConfig+0x1bc>)
 8006c22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006c26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 0308 	and.w	r3, r3, #8
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d005      	beq.n	8006c40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006c34:	4b53      	ldr	r3, [pc, #332]	; (8006d84 <HAL_RCC_ClockConfig+0x1bc>)
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	4a52      	ldr	r2, [pc, #328]	; (8006d84 <HAL_RCC_ClockConfig+0x1bc>)
 8006c3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006c3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c40:	4b50      	ldr	r3, [pc, #320]	; (8006d84 <HAL_RCC_ClockConfig+0x1bc>)
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	494d      	ldr	r1, [pc, #308]	; (8006d84 <HAL_RCC_ClockConfig+0x1bc>)
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f003 0301 	and.w	r3, r3, #1
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d044      	beq.n	8006ce8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d107      	bne.n	8006c76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c66:	4b47      	ldr	r3, [pc, #284]	; (8006d84 <HAL_RCC_ClockConfig+0x1bc>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d119      	bne.n	8006ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	e07f      	b.n	8006d76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	2b02      	cmp	r3, #2
 8006c7c:	d003      	beq.n	8006c86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c82:	2b03      	cmp	r3, #3
 8006c84:	d107      	bne.n	8006c96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c86:	4b3f      	ldr	r3, [pc, #252]	; (8006d84 <HAL_RCC_ClockConfig+0x1bc>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d109      	bne.n	8006ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	e06f      	b.n	8006d76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c96:	4b3b      	ldr	r3, [pc, #236]	; (8006d84 <HAL_RCC_ClockConfig+0x1bc>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f003 0302 	and.w	r3, r3, #2
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d101      	bne.n	8006ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e067      	b.n	8006d76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006ca6:	4b37      	ldr	r3, [pc, #220]	; (8006d84 <HAL_RCC_ClockConfig+0x1bc>)
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	f023 0203 	bic.w	r2, r3, #3
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	4934      	ldr	r1, [pc, #208]	; (8006d84 <HAL_RCC_ClockConfig+0x1bc>)
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006cb8:	f7fd fad8 	bl	800426c <HAL_GetTick>
 8006cbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cbe:	e00a      	b.n	8006cd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006cc0:	f7fd fad4 	bl	800426c <HAL_GetTick>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	1ad3      	subs	r3, r2, r3
 8006cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d901      	bls.n	8006cd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006cd2:	2303      	movs	r3, #3
 8006cd4:	e04f      	b.n	8006d76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cd6:	4b2b      	ldr	r3, [pc, #172]	; (8006d84 <HAL_RCC_ClockConfig+0x1bc>)
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	f003 020c 	and.w	r2, r3, #12
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d1eb      	bne.n	8006cc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006ce8:	4b25      	ldr	r3, [pc, #148]	; (8006d80 <HAL_RCC_ClockConfig+0x1b8>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f003 030f 	and.w	r3, r3, #15
 8006cf0:	683a      	ldr	r2, [r7, #0]
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d20c      	bcs.n	8006d10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cf6:	4b22      	ldr	r3, [pc, #136]	; (8006d80 <HAL_RCC_ClockConfig+0x1b8>)
 8006cf8:	683a      	ldr	r2, [r7, #0]
 8006cfa:	b2d2      	uxtb	r2, r2
 8006cfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cfe:	4b20      	ldr	r3, [pc, #128]	; (8006d80 <HAL_RCC_ClockConfig+0x1b8>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f003 030f 	and.w	r3, r3, #15
 8006d06:	683a      	ldr	r2, [r7, #0]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d001      	beq.n	8006d10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e032      	b.n	8006d76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f003 0304 	and.w	r3, r3, #4
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d008      	beq.n	8006d2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d1c:	4b19      	ldr	r3, [pc, #100]	; (8006d84 <HAL_RCC_ClockConfig+0x1bc>)
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	4916      	ldr	r1, [pc, #88]	; (8006d84 <HAL_RCC_ClockConfig+0x1bc>)
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f003 0308 	and.w	r3, r3, #8
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d009      	beq.n	8006d4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d3a:	4b12      	ldr	r3, [pc, #72]	; (8006d84 <HAL_RCC_ClockConfig+0x1bc>)
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	00db      	lsls	r3, r3, #3
 8006d48:	490e      	ldr	r1, [pc, #56]	; (8006d84 <HAL_RCC_ClockConfig+0x1bc>)
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006d4e:	f000 f887 	bl	8006e60 <HAL_RCC_GetSysClockFreq>
 8006d52:	4602      	mov	r2, r0
 8006d54:	4b0b      	ldr	r3, [pc, #44]	; (8006d84 <HAL_RCC_ClockConfig+0x1bc>)
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	091b      	lsrs	r3, r3, #4
 8006d5a:	f003 030f 	and.w	r3, r3, #15
 8006d5e:	490a      	ldr	r1, [pc, #40]	; (8006d88 <HAL_RCC_ClockConfig+0x1c0>)
 8006d60:	5ccb      	ldrb	r3, [r1, r3]
 8006d62:	fa22 f303 	lsr.w	r3, r2, r3
 8006d66:	4a09      	ldr	r2, [pc, #36]	; (8006d8c <HAL_RCC_ClockConfig+0x1c4>)
 8006d68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006d6a:	4b09      	ldr	r3, [pc, #36]	; (8006d90 <HAL_RCC_ClockConfig+0x1c8>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f7fc fbe8 	bl	8003544 <HAL_InitTick>

  return HAL_OK;
 8006d74:	2300      	movs	r3, #0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3710      	adds	r7, #16
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	40023c00 	.word	0x40023c00
 8006d84:	40023800 	.word	0x40023800
 8006d88:	0800bd80 	.word	0x0800bd80
 8006d8c:	20000078 	.word	0x20000078
 8006d90:	2000007c 	.word	0x2000007c

08006d94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d94:	b480      	push	{r7}
 8006d96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d98:	4b03      	ldr	r3, [pc, #12]	; (8006da8 <HAL_RCC_GetHCLKFreq+0x14>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr
 8006da6:	bf00      	nop
 8006da8:	20000078 	.word	0x20000078

08006dac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006db0:	f7ff fff0 	bl	8006d94 <HAL_RCC_GetHCLKFreq>
 8006db4:	4602      	mov	r2, r0
 8006db6:	4b05      	ldr	r3, [pc, #20]	; (8006dcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	0a9b      	lsrs	r3, r3, #10
 8006dbc:	f003 0307 	and.w	r3, r3, #7
 8006dc0:	4903      	ldr	r1, [pc, #12]	; (8006dd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006dc2:	5ccb      	ldrb	r3, [r1, r3]
 8006dc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	bd80      	pop	{r7, pc}
 8006dcc:	40023800 	.word	0x40023800
 8006dd0:	0800bd90 	.word	0x0800bd90

08006dd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006dd8:	f7ff ffdc 	bl	8006d94 <HAL_RCC_GetHCLKFreq>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	4b05      	ldr	r3, [pc, #20]	; (8006df4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	0b5b      	lsrs	r3, r3, #13
 8006de4:	f003 0307 	and.w	r3, r3, #7
 8006de8:	4903      	ldr	r1, [pc, #12]	; (8006df8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006dea:	5ccb      	ldrb	r3, [r1, r3]
 8006dec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	bd80      	pop	{r7, pc}
 8006df4:	40023800 	.word	0x40023800
 8006df8:	0800bd90 	.word	0x0800bd90

08006dfc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	220f      	movs	r2, #15
 8006e0a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006e0c:	4b12      	ldr	r3, [pc, #72]	; (8006e58 <HAL_RCC_GetClockConfig+0x5c>)
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	f003 0203 	and.w	r2, r3, #3
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006e18:	4b0f      	ldr	r3, [pc, #60]	; (8006e58 <HAL_RCC_GetClockConfig+0x5c>)
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006e24:	4b0c      	ldr	r3, [pc, #48]	; (8006e58 <HAL_RCC_GetClockConfig+0x5c>)
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006e30:	4b09      	ldr	r3, [pc, #36]	; (8006e58 <HAL_RCC_GetClockConfig+0x5c>)
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	08db      	lsrs	r3, r3, #3
 8006e36:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006e3e:	4b07      	ldr	r3, [pc, #28]	; (8006e5c <HAL_RCC_GetClockConfig+0x60>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f003 020f 	and.w	r2, r3, #15
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	601a      	str	r2, [r3, #0]
}
 8006e4a:	bf00      	nop
 8006e4c:	370c      	adds	r7, #12
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr
 8006e56:	bf00      	nop
 8006e58:	40023800 	.word	0x40023800
 8006e5c:	40023c00 	.word	0x40023c00

08006e60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006e64:	b087      	sub	sp, #28
 8006e66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006e68:	2600      	movs	r6, #0
 8006e6a:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 8006e6c:	2600      	movs	r6, #0
 8006e6e:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 8006e70:	2600      	movs	r6, #0
 8006e72:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 8006e74:	2600      	movs	r6, #0
 8006e76:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006e78:	2600      	movs	r6, #0
 8006e7a:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e7c:	4ea3      	ldr	r6, [pc, #652]	; (800710c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8006e7e:	68b6      	ldr	r6, [r6, #8]
 8006e80:	f006 060c 	and.w	r6, r6, #12
 8006e84:	2e0c      	cmp	r6, #12
 8006e86:	f200 8137 	bhi.w	80070f8 <HAL_RCC_GetSysClockFreq+0x298>
 8006e8a:	f20f 0c08 	addw	ip, pc, #8
 8006e8e:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 8006e92:	bf00      	nop
 8006e94:	08006ec9 	.word	0x08006ec9
 8006e98:	080070f9 	.word	0x080070f9
 8006e9c:	080070f9 	.word	0x080070f9
 8006ea0:	080070f9 	.word	0x080070f9
 8006ea4:	08006ecf 	.word	0x08006ecf
 8006ea8:	080070f9 	.word	0x080070f9
 8006eac:	080070f9 	.word	0x080070f9
 8006eb0:	080070f9 	.word	0x080070f9
 8006eb4:	08006ed5 	.word	0x08006ed5
 8006eb8:	080070f9 	.word	0x080070f9
 8006ebc:	080070f9 	.word	0x080070f9
 8006ec0:	080070f9 	.word	0x080070f9
 8006ec4:	08006feb 	.word	0x08006feb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006ec8:	4b91      	ldr	r3, [pc, #580]	; (8007110 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8006eca:	613b      	str	r3, [r7, #16]
       break;
 8006ecc:	e117      	b.n	80070fe <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006ece:	4b91      	ldr	r3, [pc, #580]	; (8007114 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8006ed0:	613b      	str	r3, [r7, #16]
      break;
 8006ed2:	e114      	b.n	80070fe <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ed4:	4b8d      	ldr	r3, [pc, #564]	; (800710c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006edc:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006ede:	4b8b      	ldr	r3, [pc, #556]	; (800710c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d024      	beq.n	8006f34 <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006eea:	4b88      	ldr	r3, [pc, #544]	; (800710c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	099b      	lsrs	r3, r3, #6
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	f04f 0300 	mov.w	r3, #0
 8006ef6:	f240 14ff 	movw	r4, #511	; 0x1ff
 8006efa:	f04f 0500 	mov.w	r5, #0
 8006efe:	ea02 0004 	and.w	r0, r2, r4
 8006f02:	ea03 0105 	and.w	r1, r3, r5
 8006f06:	4b83      	ldr	r3, [pc, #524]	; (8007114 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8006f08:	fb03 f201 	mul.w	r2, r3, r1
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	fb03 f300 	mul.w	r3, r3, r0
 8006f12:	4413      	add	r3, r2
 8006f14:	4a7f      	ldr	r2, [pc, #508]	; (8007114 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8006f16:	fba0 0102 	umull	r0, r1, r0, r2
 8006f1a:	440b      	add	r3, r1
 8006f1c:	4619      	mov	r1, r3
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	461a      	mov	r2, r3
 8006f22:	f04f 0300 	mov.w	r3, #0
 8006f26:	f7f9 f973 	bl	8000210 <__aeabi_uldivmod>
 8006f2a:	4602      	mov	r2, r0
 8006f2c:	460b      	mov	r3, r1
 8006f2e:	4613      	mov	r3, r2
 8006f30:	617b      	str	r3, [r7, #20]
 8006f32:	e04c      	b.n	8006fce <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f34:	4b75      	ldr	r3, [pc, #468]	; (800710c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	099b      	lsrs	r3, r3, #6
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	f04f 0300 	mov.w	r3, #0
 8006f40:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006f44:	f04f 0100 	mov.w	r1, #0
 8006f48:	ea02 0800 	and.w	r8, r2, r0
 8006f4c:	ea03 0901 	and.w	r9, r3, r1
 8006f50:	4640      	mov	r0, r8
 8006f52:	4649      	mov	r1, r9
 8006f54:	f04f 0200 	mov.w	r2, #0
 8006f58:	f04f 0300 	mov.w	r3, #0
 8006f5c:	014b      	lsls	r3, r1, #5
 8006f5e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006f62:	0142      	lsls	r2, r0, #5
 8006f64:	4610      	mov	r0, r2
 8006f66:	4619      	mov	r1, r3
 8006f68:	ebb0 0008 	subs.w	r0, r0, r8
 8006f6c:	eb61 0109 	sbc.w	r1, r1, r9
 8006f70:	f04f 0200 	mov.w	r2, #0
 8006f74:	f04f 0300 	mov.w	r3, #0
 8006f78:	018b      	lsls	r3, r1, #6
 8006f7a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006f7e:	0182      	lsls	r2, r0, #6
 8006f80:	1a12      	subs	r2, r2, r0
 8006f82:	eb63 0301 	sbc.w	r3, r3, r1
 8006f86:	f04f 0000 	mov.w	r0, #0
 8006f8a:	f04f 0100 	mov.w	r1, #0
 8006f8e:	00d9      	lsls	r1, r3, #3
 8006f90:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006f94:	00d0      	lsls	r0, r2, #3
 8006f96:	4602      	mov	r2, r0
 8006f98:	460b      	mov	r3, r1
 8006f9a:	eb12 0208 	adds.w	r2, r2, r8
 8006f9e:	eb43 0309 	adc.w	r3, r3, r9
 8006fa2:	f04f 0000 	mov.w	r0, #0
 8006fa6:	f04f 0100 	mov.w	r1, #0
 8006faa:	0299      	lsls	r1, r3, #10
 8006fac:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006fb0:	0290      	lsls	r0, r2, #10
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	460b      	mov	r3, r1
 8006fb6:	4610      	mov	r0, r2
 8006fb8:	4619      	mov	r1, r3
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	f04f 0300 	mov.w	r3, #0
 8006fc2:	f7f9 f925 	bl	8000210 <__aeabi_uldivmod>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	460b      	mov	r3, r1
 8006fca:	4613      	mov	r3, r2
 8006fcc:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006fce:	4b4f      	ldr	r3, [pc, #316]	; (800710c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	0c1b      	lsrs	r3, r3, #16
 8006fd4:	f003 0303 	and.w	r3, r3, #3
 8006fd8:	3301      	adds	r3, #1
 8006fda:	005b      	lsls	r3, r3, #1
 8006fdc:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8006fde:	697a      	ldr	r2, [r7, #20]
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fe6:	613b      	str	r3, [r7, #16]
      break;
 8006fe8:	e089      	b.n	80070fe <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006fea:	4948      	ldr	r1, [pc, #288]	; (800710c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8006fec:	6849      	ldr	r1, [r1, #4]
 8006fee:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8006ff2:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006ff4:	4945      	ldr	r1, [pc, #276]	; (800710c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8006ff6:	6849      	ldr	r1, [r1, #4]
 8006ff8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8006ffc:	2900      	cmp	r1, #0
 8006ffe:	d024      	beq.n	800704a <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007000:	4942      	ldr	r1, [pc, #264]	; (800710c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8007002:	6849      	ldr	r1, [r1, #4]
 8007004:	0989      	lsrs	r1, r1, #6
 8007006:	4608      	mov	r0, r1
 8007008:	f04f 0100 	mov.w	r1, #0
 800700c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8007010:	f04f 0500 	mov.w	r5, #0
 8007014:	ea00 0204 	and.w	r2, r0, r4
 8007018:	ea01 0305 	and.w	r3, r1, r5
 800701c:	493d      	ldr	r1, [pc, #244]	; (8007114 <HAL_RCC_GetSysClockFreq+0x2b4>)
 800701e:	fb01 f003 	mul.w	r0, r1, r3
 8007022:	2100      	movs	r1, #0
 8007024:	fb01 f102 	mul.w	r1, r1, r2
 8007028:	1844      	adds	r4, r0, r1
 800702a:	493a      	ldr	r1, [pc, #232]	; (8007114 <HAL_RCC_GetSysClockFreq+0x2b4>)
 800702c:	fba2 0101 	umull	r0, r1, r2, r1
 8007030:	1863      	adds	r3, r4, r1
 8007032:	4619      	mov	r1, r3
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	461a      	mov	r2, r3
 8007038:	f04f 0300 	mov.w	r3, #0
 800703c:	f7f9 f8e8 	bl	8000210 <__aeabi_uldivmod>
 8007040:	4602      	mov	r2, r0
 8007042:	460b      	mov	r3, r1
 8007044:	4613      	mov	r3, r2
 8007046:	617b      	str	r3, [r7, #20]
 8007048:	e04a      	b.n	80070e0 <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800704a:	4b30      	ldr	r3, [pc, #192]	; (800710c <HAL_RCC_GetSysClockFreq+0x2ac>)
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	099b      	lsrs	r3, r3, #6
 8007050:	461a      	mov	r2, r3
 8007052:	f04f 0300 	mov.w	r3, #0
 8007056:	f240 10ff 	movw	r0, #511	; 0x1ff
 800705a:	f04f 0100 	mov.w	r1, #0
 800705e:	ea02 0400 	and.w	r4, r2, r0
 8007062:	ea03 0501 	and.w	r5, r3, r1
 8007066:	4620      	mov	r0, r4
 8007068:	4629      	mov	r1, r5
 800706a:	f04f 0200 	mov.w	r2, #0
 800706e:	f04f 0300 	mov.w	r3, #0
 8007072:	014b      	lsls	r3, r1, #5
 8007074:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007078:	0142      	lsls	r2, r0, #5
 800707a:	4610      	mov	r0, r2
 800707c:	4619      	mov	r1, r3
 800707e:	1b00      	subs	r0, r0, r4
 8007080:	eb61 0105 	sbc.w	r1, r1, r5
 8007084:	f04f 0200 	mov.w	r2, #0
 8007088:	f04f 0300 	mov.w	r3, #0
 800708c:	018b      	lsls	r3, r1, #6
 800708e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007092:	0182      	lsls	r2, r0, #6
 8007094:	1a12      	subs	r2, r2, r0
 8007096:	eb63 0301 	sbc.w	r3, r3, r1
 800709a:	f04f 0000 	mov.w	r0, #0
 800709e:	f04f 0100 	mov.w	r1, #0
 80070a2:	00d9      	lsls	r1, r3, #3
 80070a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80070a8:	00d0      	lsls	r0, r2, #3
 80070aa:	4602      	mov	r2, r0
 80070ac:	460b      	mov	r3, r1
 80070ae:	1912      	adds	r2, r2, r4
 80070b0:	eb45 0303 	adc.w	r3, r5, r3
 80070b4:	f04f 0000 	mov.w	r0, #0
 80070b8:	f04f 0100 	mov.w	r1, #0
 80070bc:	0299      	lsls	r1, r3, #10
 80070be:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80070c2:	0290      	lsls	r0, r2, #10
 80070c4:	4602      	mov	r2, r0
 80070c6:	460b      	mov	r3, r1
 80070c8:	4610      	mov	r0, r2
 80070ca:	4619      	mov	r1, r3
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	461a      	mov	r2, r3
 80070d0:	f04f 0300 	mov.w	r3, #0
 80070d4:	f7f9 f89c 	bl	8000210 <__aeabi_uldivmod>
 80070d8:	4602      	mov	r2, r0
 80070da:	460b      	mov	r3, r1
 80070dc:	4613      	mov	r3, r2
 80070de:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80070e0:	4b0a      	ldr	r3, [pc, #40]	; (800710c <HAL_RCC_GetSysClockFreq+0x2ac>)
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	0f1b      	lsrs	r3, r3, #28
 80070e6:	f003 0307 	and.w	r3, r3, #7
 80070ea:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80070ec:	697a      	ldr	r2, [r7, #20]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80070f4:	613b      	str	r3, [r7, #16]
      break;
 80070f6:	e002      	b.n	80070fe <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80070f8:	4b05      	ldr	r3, [pc, #20]	; (8007110 <HAL_RCC_GetSysClockFreq+0x2b0>)
 80070fa:	613b      	str	r3, [r7, #16]
      break;
 80070fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80070fe:	693b      	ldr	r3, [r7, #16]
}
 8007100:	4618      	mov	r0, r3
 8007102:	371c      	adds	r7, #28
 8007104:	46bd      	mov	sp, r7
 8007106:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800710a:	bf00      	nop
 800710c:	40023800 	.word	0x40023800
 8007110:	00f42400 	.word	0x00f42400
 8007114:	017d7840 	.word	0x017d7840

08007118 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b086      	sub	sp, #24
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d101      	bne.n	800712a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007126:	2301      	movs	r3, #1
 8007128:	e28d      	b.n	8007646 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f003 0301 	and.w	r3, r3, #1
 8007132:	2b00      	cmp	r3, #0
 8007134:	f000 8083 	beq.w	800723e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007138:	4b94      	ldr	r3, [pc, #592]	; (800738c <HAL_RCC_OscConfig+0x274>)
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	f003 030c 	and.w	r3, r3, #12
 8007140:	2b04      	cmp	r3, #4
 8007142:	d019      	beq.n	8007178 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007144:	4b91      	ldr	r3, [pc, #580]	; (800738c <HAL_RCC_OscConfig+0x274>)
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800714c:	2b08      	cmp	r3, #8
 800714e:	d106      	bne.n	800715e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007150:	4b8e      	ldr	r3, [pc, #568]	; (800738c <HAL_RCC_OscConfig+0x274>)
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007158:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800715c:	d00c      	beq.n	8007178 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800715e:	4b8b      	ldr	r3, [pc, #556]	; (800738c <HAL_RCC_OscConfig+0x274>)
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007166:	2b0c      	cmp	r3, #12
 8007168:	d112      	bne.n	8007190 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800716a:	4b88      	ldr	r3, [pc, #544]	; (800738c <HAL_RCC_OscConfig+0x274>)
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007172:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007176:	d10b      	bne.n	8007190 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007178:	4b84      	ldr	r3, [pc, #528]	; (800738c <HAL_RCC_OscConfig+0x274>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007180:	2b00      	cmp	r3, #0
 8007182:	d05b      	beq.n	800723c <HAL_RCC_OscConfig+0x124>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d157      	bne.n	800723c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	e25a      	b.n	8007646 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007198:	d106      	bne.n	80071a8 <HAL_RCC_OscConfig+0x90>
 800719a:	4b7c      	ldr	r3, [pc, #496]	; (800738c <HAL_RCC_OscConfig+0x274>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a7b      	ldr	r2, [pc, #492]	; (800738c <HAL_RCC_OscConfig+0x274>)
 80071a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071a4:	6013      	str	r3, [r2, #0]
 80071a6:	e01d      	b.n	80071e4 <HAL_RCC_OscConfig+0xcc>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80071b0:	d10c      	bne.n	80071cc <HAL_RCC_OscConfig+0xb4>
 80071b2:	4b76      	ldr	r3, [pc, #472]	; (800738c <HAL_RCC_OscConfig+0x274>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a75      	ldr	r2, [pc, #468]	; (800738c <HAL_RCC_OscConfig+0x274>)
 80071b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80071bc:	6013      	str	r3, [r2, #0]
 80071be:	4b73      	ldr	r3, [pc, #460]	; (800738c <HAL_RCC_OscConfig+0x274>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a72      	ldr	r2, [pc, #456]	; (800738c <HAL_RCC_OscConfig+0x274>)
 80071c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071c8:	6013      	str	r3, [r2, #0]
 80071ca:	e00b      	b.n	80071e4 <HAL_RCC_OscConfig+0xcc>
 80071cc:	4b6f      	ldr	r3, [pc, #444]	; (800738c <HAL_RCC_OscConfig+0x274>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a6e      	ldr	r2, [pc, #440]	; (800738c <HAL_RCC_OscConfig+0x274>)
 80071d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071d6:	6013      	str	r3, [r2, #0]
 80071d8:	4b6c      	ldr	r3, [pc, #432]	; (800738c <HAL_RCC_OscConfig+0x274>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a6b      	ldr	r2, [pc, #428]	; (800738c <HAL_RCC_OscConfig+0x274>)
 80071de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80071e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d013      	beq.n	8007214 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071ec:	f7fd f83e 	bl	800426c <HAL_GetTick>
 80071f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071f2:	e008      	b.n	8007206 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80071f4:	f7fd f83a 	bl	800426c <HAL_GetTick>
 80071f8:	4602      	mov	r2, r0
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	1ad3      	subs	r3, r2, r3
 80071fe:	2b64      	cmp	r3, #100	; 0x64
 8007200:	d901      	bls.n	8007206 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8007202:	2303      	movs	r3, #3
 8007204:	e21f      	b.n	8007646 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007206:	4b61      	ldr	r3, [pc, #388]	; (800738c <HAL_RCC_OscConfig+0x274>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800720e:	2b00      	cmp	r3, #0
 8007210:	d0f0      	beq.n	80071f4 <HAL_RCC_OscConfig+0xdc>
 8007212:	e014      	b.n	800723e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007214:	f7fd f82a 	bl	800426c <HAL_GetTick>
 8007218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800721a:	e008      	b.n	800722e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800721c:	f7fd f826 	bl	800426c <HAL_GetTick>
 8007220:	4602      	mov	r2, r0
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	1ad3      	subs	r3, r2, r3
 8007226:	2b64      	cmp	r3, #100	; 0x64
 8007228:	d901      	bls.n	800722e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800722a:	2303      	movs	r3, #3
 800722c:	e20b      	b.n	8007646 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800722e:	4b57      	ldr	r3, [pc, #348]	; (800738c <HAL_RCC_OscConfig+0x274>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007236:	2b00      	cmp	r3, #0
 8007238:	d1f0      	bne.n	800721c <HAL_RCC_OscConfig+0x104>
 800723a:	e000      	b.n	800723e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800723c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f003 0302 	and.w	r3, r3, #2
 8007246:	2b00      	cmp	r3, #0
 8007248:	d06f      	beq.n	800732a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800724a:	4b50      	ldr	r3, [pc, #320]	; (800738c <HAL_RCC_OscConfig+0x274>)
 800724c:	689b      	ldr	r3, [r3, #8]
 800724e:	f003 030c 	and.w	r3, r3, #12
 8007252:	2b00      	cmp	r3, #0
 8007254:	d017      	beq.n	8007286 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007256:	4b4d      	ldr	r3, [pc, #308]	; (800738c <HAL_RCC_OscConfig+0x274>)
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800725e:	2b08      	cmp	r3, #8
 8007260:	d105      	bne.n	800726e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007262:	4b4a      	ldr	r3, [pc, #296]	; (800738c <HAL_RCC_OscConfig+0x274>)
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800726a:	2b00      	cmp	r3, #0
 800726c:	d00b      	beq.n	8007286 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800726e:	4b47      	ldr	r3, [pc, #284]	; (800738c <HAL_RCC_OscConfig+0x274>)
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007276:	2b0c      	cmp	r3, #12
 8007278:	d11c      	bne.n	80072b4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800727a:	4b44      	ldr	r3, [pc, #272]	; (800738c <HAL_RCC_OscConfig+0x274>)
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007282:	2b00      	cmp	r3, #0
 8007284:	d116      	bne.n	80072b4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007286:	4b41      	ldr	r3, [pc, #260]	; (800738c <HAL_RCC_OscConfig+0x274>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f003 0302 	and.w	r3, r3, #2
 800728e:	2b00      	cmp	r3, #0
 8007290:	d005      	beq.n	800729e <HAL_RCC_OscConfig+0x186>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	68db      	ldr	r3, [r3, #12]
 8007296:	2b01      	cmp	r3, #1
 8007298:	d001      	beq.n	800729e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800729a:	2301      	movs	r3, #1
 800729c:	e1d3      	b.n	8007646 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800729e:	4b3b      	ldr	r3, [pc, #236]	; (800738c <HAL_RCC_OscConfig+0x274>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	00db      	lsls	r3, r3, #3
 80072ac:	4937      	ldr	r1, [pc, #220]	; (800738c <HAL_RCC_OscConfig+0x274>)
 80072ae:	4313      	orrs	r3, r2
 80072b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80072b2:	e03a      	b.n	800732a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d020      	beq.n	80072fe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80072bc:	4b34      	ldr	r3, [pc, #208]	; (8007390 <HAL_RCC_OscConfig+0x278>)
 80072be:	2201      	movs	r2, #1
 80072c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072c2:	f7fc ffd3 	bl	800426c <HAL_GetTick>
 80072c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072c8:	e008      	b.n	80072dc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80072ca:	f7fc ffcf 	bl	800426c <HAL_GetTick>
 80072ce:	4602      	mov	r2, r0
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	1ad3      	subs	r3, r2, r3
 80072d4:	2b02      	cmp	r3, #2
 80072d6:	d901      	bls.n	80072dc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80072d8:	2303      	movs	r3, #3
 80072da:	e1b4      	b.n	8007646 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072dc:	4b2b      	ldr	r3, [pc, #172]	; (800738c <HAL_RCC_OscConfig+0x274>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f003 0302 	and.w	r3, r3, #2
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d0f0      	beq.n	80072ca <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072e8:	4b28      	ldr	r3, [pc, #160]	; (800738c <HAL_RCC_OscConfig+0x274>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	691b      	ldr	r3, [r3, #16]
 80072f4:	00db      	lsls	r3, r3, #3
 80072f6:	4925      	ldr	r1, [pc, #148]	; (800738c <HAL_RCC_OscConfig+0x274>)
 80072f8:	4313      	orrs	r3, r2
 80072fa:	600b      	str	r3, [r1, #0]
 80072fc:	e015      	b.n	800732a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80072fe:	4b24      	ldr	r3, [pc, #144]	; (8007390 <HAL_RCC_OscConfig+0x278>)
 8007300:	2200      	movs	r2, #0
 8007302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007304:	f7fc ffb2 	bl	800426c <HAL_GetTick>
 8007308:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800730a:	e008      	b.n	800731e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800730c:	f7fc ffae 	bl	800426c <HAL_GetTick>
 8007310:	4602      	mov	r2, r0
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	1ad3      	subs	r3, r2, r3
 8007316:	2b02      	cmp	r3, #2
 8007318:	d901      	bls.n	800731e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800731a:	2303      	movs	r3, #3
 800731c:	e193      	b.n	8007646 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800731e:	4b1b      	ldr	r3, [pc, #108]	; (800738c <HAL_RCC_OscConfig+0x274>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f003 0302 	and.w	r3, r3, #2
 8007326:	2b00      	cmp	r3, #0
 8007328:	d1f0      	bne.n	800730c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f003 0308 	and.w	r3, r3, #8
 8007332:	2b00      	cmp	r3, #0
 8007334:	d036      	beq.n	80073a4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	695b      	ldr	r3, [r3, #20]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d016      	beq.n	800736c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800733e:	4b15      	ldr	r3, [pc, #84]	; (8007394 <HAL_RCC_OscConfig+0x27c>)
 8007340:	2201      	movs	r2, #1
 8007342:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007344:	f7fc ff92 	bl	800426c <HAL_GetTick>
 8007348:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800734a:	e008      	b.n	800735e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800734c:	f7fc ff8e 	bl	800426c <HAL_GetTick>
 8007350:	4602      	mov	r2, r0
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	1ad3      	subs	r3, r2, r3
 8007356:	2b02      	cmp	r3, #2
 8007358:	d901      	bls.n	800735e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800735a:	2303      	movs	r3, #3
 800735c:	e173      	b.n	8007646 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800735e:	4b0b      	ldr	r3, [pc, #44]	; (800738c <HAL_RCC_OscConfig+0x274>)
 8007360:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007362:	f003 0302 	and.w	r3, r3, #2
 8007366:	2b00      	cmp	r3, #0
 8007368:	d0f0      	beq.n	800734c <HAL_RCC_OscConfig+0x234>
 800736a:	e01b      	b.n	80073a4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800736c:	4b09      	ldr	r3, [pc, #36]	; (8007394 <HAL_RCC_OscConfig+0x27c>)
 800736e:	2200      	movs	r2, #0
 8007370:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007372:	f7fc ff7b 	bl	800426c <HAL_GetTick>
 8007376:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007378:	e00e      	b.n	8007398 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800737a:	f7fc ff77 	bl	800426c <HAL_GetTick>
 800737e:	4602      	mov	r2, r0
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	1ad3      	subs	r3, r2, r3
 8007384:	2b02      	cmp	r3, #2
 8007386:	d907      	bls.n	8007398 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8007388:	2303      	movs	r3, #3
 800738a:	e15c      	b.n	8007646 <HAL_RCC_OscConfig+0x52e>
 800738c:	40023800 	.word	0x40023800
 8007390:	42470000 	.word	0x42470000
 8007394:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007398:	4b8a      	ldr	r3, [pc, #552]	; (80075c4 <HAL_RCC_OscConfig+0x4ac>)
 800739a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800739c:	f003 0302 	and.w	r3, r3, #2
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d1ea      	bne.n	800737a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f003 0304 	and.w	r3, r3, #4
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	f000 8097 	beq.w	80074e0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80073b2:	2300      	movs	r3, #0
 80073b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80073b6:	4b83      	ldr	r3, [pc, #524]	; (80075c4 <HAL_RCC_OscConfig+0x4ac>)
 80073b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d10f      	bne.n	80073e2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80073c2:	2300      	movs	r3, #0
 80073c4:	60bb      	str	r3, [r7, #8]
 80073c6:	4b7f      	ldr	r3, [pc, #508]	; (80075c4 <HAL_RCC_OscConfig+0x4ac>)
 80073c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ca:	4a7e      	ldr	r2, [pc, #504]	; (80075c4 <HAL_RCC_OscConfig+0x4ac>)
 80073cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073d0:	6413      	str	r3, [r2, #64]	; 0x40
 80073d2:	4b7c      	ldr	r3, [pc, #496]	; (80075c4 <HAL_RCC_OscConfig+0x4ac>)
 80073d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073da:	60bb      	str	r3, [r7, #8]
 80073dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80073de:	2301      	movs	r3, #1
 80073e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073e2:	4b79      	ldr	r3, [pc, #484]	; (80075c8 <HAL_RCC_OscConfig+0x4b0>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d118      	bne.n	8007420 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80073ee:	4b76      	ldr	r3, [pc, #472]	; (80075c8 <HAL_RCC_OscConfig+0x4b0>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a75      	ldr	r2, [pc, #468]	; (80075c8 <HAL_RCC_OscConfig+0x4b0>)
 80073f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80073fa:	f7fc ff37 	bl	800426c <HAL_GetTick>
 80073fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007400:	e008      	b.n	8007414 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007402:	f7fc ff33 	bl	800426c <HAL_GetTick>
 8007406:	4602      	mov	r2, r0
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	1ad3      	subs	r3, r2, r3
 800740c:	2b02      	cmp	r3, #2
 800740e:	d901      	bls.n	8007414 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8007410:	2303      	movs	r3, #3
 8007412:	e118      	b.n	8007646 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007414:	4b6c      	ldr	r3, [pc, #432]	; (80075c8 <HAL_RCC_OscConfig+0x4b0>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800741c:	2b00      	cmp	r3, #0
 800741e:	d0f0      	beq.n	8007402 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	2b01      	cmp	r3, #1
 8007426:	d106      	bne.n	8007436 <HAL_RCC_OscConfig+0x31e>
 8007428:	4b66      	ldr	r3, [pc, #408]	; (80075c4 <HAL_RCC_OscConfig+0x4ac>)
 800742a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800742c:	4a65      	ldr	r2, [pc, #404]	; (80075c4 <HAL_RCC_OscConfig+0x4ac>)
 800742e:	f043 0301 	orr.w	r3, r3, #1
 8007432:	6713      	str	r3, [r2, #112]	; 0x70
 8007434:	e01c      	b.n	8007470 <HAL_RCC_OscConfig+0x358>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	2b05      	cmp	r3, #5
 800743c:	d10c      	bne.n	8007458 <HAL_RCC_OscConfig+0x340>
 800743e:	4b61      	ldr	r3, [pc, #388]	; (80075c4 <HAL_RCC_OscConfig+0x4ac>)
 8007440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007442:	4a60      	ldr	r2, [pc, #384]	; (80075c4 <HAL_RCC_OscConfig+0x4ac>)
 8007444:	f043 0304 	orr.w	r3, r3, #4
 8007448:	6713      	str	r3, [r2, #112]	; 0x70
 800744a:	4b5e      	ldr	r3, [pc, #376]	; (80075c4 <HAL_RCC_OscConfig+0x4ac>)
 800744c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800744e:	4a5d      	ldr	r2, [pc, #372]	; (80075c4 <HAL_RCC_OscConfig+0x4ac>)
 8007450:	f043 0301 	orr.w	r3, r3, #1
 8007454:	6713      	str	r3, [r2, #112]	; 0x70
 8007456:	e00b      	b.n	8007470 <HAL_RCC_OscConfig+0x358>
 8007458:	4b5a      	ldr	r3, [pc, #360]	; (80075c4 <HAL_RCC_OscConfig+0x4ac>)
 800745a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800745c:	4a59      	ldr	r2, [pc, #356]	; (80075c4 <HAL_RCC_OscConfig+0x4ac>)
 800745e:	f023 0301 	bic.w	r3, r3, #1
 8007462:	6713      	str	r3, [r2, #112]	; 0x70
 8007464:	4b57      	ldr	r3, [pc, #348]	; (80075c4 <HAL_RCC_OscConfig+0x4ac>)
 8007466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007468:	4a56      	ldr	r2, [pc, #344]	; (80075c4 <HAL_RCC_OscConfig+0x4ac>)
 800746a:	f023 0304 	bic.w	r3, r3, #4
 800746e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d015      	beq.n	80074a4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007478:	f7fc fef8 	bl	800426c <HAL_GetTick>
 800747c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800747e:	e00a      	b.n	8007496 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007480:	f7fc fef4 	bl	800426c <HAL_GetTick>
 8007484:	4602      	mov	r2, r0
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	1ad3      	subs	r3, r2, r3
 800748a:	f241 3288 	movw	r2, #5000	; 0x1388
 800748e:	4293      	cmp	r3, r2
 8007490:	d901      	bls.n	8007496 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8007492:	2303      	movs	r3, #3
 8007494:	e0d7      	b.n	8007646 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007496:	4b4b      	ldr	r3, [pc, #300]	; (80075c4 <HAL_RCC_OscConfig+0x4ac>)
 8007498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800749a:	f003 0302 	and.w	r3, r3, #2
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d0ee      	beq.n	8007480 <HAL_RCC_OscConfig+0x368>
 80074a2:	e014      	b.n	80074ce <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074a4:	f7fc fee2 	bl	800426c <HAL_GetTick>
 80074a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80074aa:	e00a      	b.n	80074c2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80074ac:	f7fc fede 	bl	800426c <HAL_GetTick>
 80074b0:	4602      	mov	r2, r0
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	1ad3      	subs	r3, r2, r3
 80074b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d901      	bls.n	80074c2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80074be:	2303      	movs	r3, #3
 80074c0:	e0c1      	b.n	8007646 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80074c2:	4b40      	ldr	r3, [pc, #256]	; (80075c4 <HAL_RCC_OscConfig+0x4ac>)
 80074c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074c6:	f003 0302 	and.w	r3, r3, #2
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d1ee      	bne.n	80074ac <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80074ce:	7dfb      	ldrb	r3, [r7, #23]
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d105      	bne.n	80074e0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074d4:	4b3b      	ldr	r3, [pc, #236]	; (80075c4 <HAL_RCC_OscConfig+0x4ac>)
 80074d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d8:	4a3a      	ldr	r2, [pc, #232]	; (80075c4 <HAL_RCC_OscConfig+0x4ac>)
 80074da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	699b      	ldr	r3, [r3, #24]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	f000 80ad 	beq.w	8007644 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80074ea:	4b36      	ldr	r3, [pc, #216]	; (80075c4 <HAL_RCC_OscConfig+0x4ac>)
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	f003 030c 	and.w	r3, r3, #12
 80074f2:	2b08      	cmp	r3, #8
 80074f4:	d060      	beq.n	80075b8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	699b      	ldr	r3, [r3, #24]
 80074fa:	2b02      	cmp	r3, #2
 80074fc:	d145      	bne.n	800758a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074fe:	4b33      	ldr	r3, [pc, #204]	; (80075cc <HAL_RCC_OscConfig+0x4b4>)
 8007500:	2200      	movs	r2, #0
 8007502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007504:	f7fc feb2 	bl	800426c <HAL_GetTick>
 8007508:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800750a:	e008      	b.n	800751e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800750c:	f7fc feae 	bl	800426c <HAL_GetTick>
 8007510:	4602      	mov	r2, r0
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	1ad3      	subs	r3, r2, r3
 8007516:	2b02      	cmp	r3, #2
 8007518:	d901      	bls.n	800751e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800751a:	2303      	movs	r3, #3
 800751c:	e093      	b.n	8007646 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800751e:	4b29      	ldr	r3, [pc, #164]	; (80075c4 <HAL_RCC_OscConfig+0x4ac>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007526:	2b00      	cmp	r3, #0
 8007528:	d1f0      	bne.n	800750c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	69da      	ldr	r2, [r3, #28]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6a1b      	ldr	r3, [r3, #32]
 8007532:	431a      	orrs	r2, r3
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007538:	019b      	lsls	r3, r3, #6
 800753a:	431a      	orrs	r2, r3
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007540:	085b      	lsrs	r3, r3, #1
 8007542:	3b01      	subs	r3, #1
 8007544:	041b      	lsls	r3, r3, #16
 8007546:	431a      	orrs	r2, r3
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800754c:	061b      	lsls	r3, r3, #24
 800754e:	431a      	orrs	r2, r3
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007554:	071b      	lsls	r3, r3, #28
 8007556:	491b      	ldr	r1, [pc, #108]	; (80075c4 <HAL_RCC_OscConfig+0x4ac>)
 8007558:	4313      	orrs	r3, r2
 800755a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800755c:	4b1b      	ldr	r3, [pc, #108]	; (80075cc <HAL_RCC_OscConfig+0x4b4>)
 800755e:	2201      	movs	r2, #1
 8007560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007562:	f7fc fe83 	bl	800426c <HAL_GetTick>
 8007566:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007568:	e008      	b.n	800757c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800756a:	f7fc fe7f 	bl	800426c <HAL_GetTick>
 800756e:	4602      	mov	r2, r0
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	1ad3      	subs	r3, r2, r3
 8007574:	2b02      	cmp	r3, #2
 8007576:	d901      	bls.n	800757c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007578:	2303      	movs	r3, #3
 800757a:	e064      	b.n	8007646 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800757c:	4b11      	ldr	r3, [pc, #68]	; (80075c4 <HAL_RCC_OscConfig+0x4ac>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007584:	2b00      	cmp	r3, #0
 8007586:	d0f0      	beq.n	800756a <HAL_RCC_OscConfig+0x452>
 8007588:	e05c      	b.n	8007644 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800758a:	4b10      	ldr	r3, [pc, #64]	; (80075cc <HAL_RCC_OscConfig+0x4b4>)
 800758c:	2200      	movs	r2, #0
 800758e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007590:	f7fc fe6c 	bl	800426c <HAL_GetTick>
 8007594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007596:	e008      	b.n	80075aa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007598:	f7fc fe68 	bl	800426c <HAL_GetTick>
 800759c:	4602      	mov	r2, r0
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	1ad3      	subs	r3, r2, r3
 80075a2:	2b02      	cmp	r3, #2
 80075a4:	d901      	bls.n	80075aa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80075a6:	2303      	movs	r3, #3
 80075a8:	e04d      	b.n	8007646 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075aa:	4b06      	ldr	r3, [pc, #24]	; (80075c4 <HAL_RCC_OscConfig+0x4ac>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d1f0      	bne.n	8007598 <HAL_RCC_OscConfig+0x480>
 80075b6:	e045      	b.n	8007644 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	699b      	ldr	r3, [r3, #24]
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d107      	bne.n	80075d0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80075c0:	2301      	movs	r3, #1
 80075c2:	e040      	b.n	8007646 <HAL_RCC_OscConfig+0x52e>
 80075c4:	40023800 	.word	0x40023800
 80075c8:	40007000 	.word	0x40007000
 80075cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80075d0:	4b1f      	ldr	r3, [pc, #124]	; (8007650 <HAL_RCC_OscConfig+0x538>)
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	699b      	ldr	r3, [r3, #24]
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d030      	beq.n	8007640 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d129      	bne.n	8007640 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075f6:	429a      	cmp	r2, r3
 80075f8:	d122      	bne.n	8007640 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80075fa:	68fa      	ldr	r2, [r7, #12]
 80075fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007600:	4013      	ands	r3, r2
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007606:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007608:	4293      	cmp	r3, r2
 800760a:	d119      	bne.n	8007640 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007616:	085b      	lsrs	r3, r3, #1
 8007618:	3b01      	subs	r3, #1
 800761a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800761c:	429a      	cmp	r2, r3
 800761e:	d10f      	bne.n	8007640 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800762a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800762c:	429a      	cmp	r2, r3
 800762e:	d107      	bne.n	8007640 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800763a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800763c:	429a      	cmp	r2, r3
 800763e:	d001      	beq.n	8007644 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8007640:	2301      	movs	r3, #1
 8007642:	e000      	b.n	8007646 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8007644:	2300      	movs	r3, #0
}
 8007646:	4618      	mov	r0, r3
 8007648:	3718      	adds	r7, #24
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}
 800764e:	bf00      	nop
 8007650:	40023800 	.word	0x40023800

08007654 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b082      	sub	sp, #8
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d101      	bne.n	8007666 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007662:	2301      	movs	r3, #1
 8007664:	e07b      	b.n	800775e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800766a:	2b00      	cmp	r3, #0
 800766c:	d108      	bne.n	8007680 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007676:	d009      	beq.n	800768c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2200      	movs	r2, #0
 800767c:	61da      	str	r2, [r3, #28]
 800767e:	e005      	b.n	800768c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2200      	movs	r2, #0
 800768a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007698:	b2db      	uxtb	r3, r3
 800769a:	2b00      	cmp	r3, #0
 800769c:	d106      	bne.n	80076ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2200      	movs	r2, #0
 80076a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f7fb feb8 	bl	800341c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2202      	movs	r2, #2
 80076b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80076d4:	431a      	orrs	r2, r3
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	68db      	ldr	r3, [r3, #12]
 80076da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076de:	431a      	orrs	r2, r3
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	691b      	ldr	r3, [r3, #16]
 80076e4:	f003 0302 	and.w	r3, r3, #2
 80076e8:	431a      	orrs	r2, r3
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	695b      	ldr	r3, [r3, #20]
 80076ee:	f003 0301 	and.w	r3, r3, #1
 80076f2:	431a      	orrs	r2, r3
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	699b      	ldr	r3, [r3, #24]
 80076f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076fc:	431a      	orrs	r2, r3
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	69db      	ldr	r3, [r3, #28]
 8007702:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007706:	431a      	orrs	r2, r3
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6a1b      	ldr	r3, [r3, #32]
 800770c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007710:	ea42 0103 	orr.w	r1, r2, r3
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007718:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	430a      	orrs	r2, r1
 8007722:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	699b      	ldr	r3, [r3, #24]
 8007728:	0c1b      	lsrs	r3, r3, #16
 800772a:	f003 0104 	and.w	r1, r3, #4
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007732:	f003 0210 	and.w	r2, r3, #16
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	430a      	orrs	r2, r1
 800773c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	69da      	ldr	r2, [r3, #28]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800774c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2200      	movs	r2, #0
 8007752:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800775c:	2300      	movs	r3, #0
}
 800775e:	4618      	mov	r0, r3
 8007760:	3708      	adds	r7, #8
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}

08007766 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007766:	b580      	push	{r7, lr}
 8007768:	b082      	sub	sp, #8
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d101      	bne.n	8007778 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	e041      	b.n	80077fc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800777e:	b2db      	uxtb	r3, r3
 8007780:	2b00      	cmp	r3, #0
 8007782:	d106      	bne.n	8007792 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f7fc f981 	bl	8003a94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2202      	movs	r2, #2
 8007796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	3304      	adds	r3, #4
 80077a2:	4619      	mov	r1, r3
 80077a4:	4610      	mov	r0, r2
 80077a6:	f000 fba9 	bl	8007efc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2201      	movs	r2, #1
 80077ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2201      	movs	r2, #1
 80077b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2201      	movs	r2, #1
 80077be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2201      	movs	r2, #1
 80077c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2201      	movs	r2, #1
 80077ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2201      	movs	r2, #1
 80077d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2201      	movs	r2, #1
 80077de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2201      	movs	r2, #1
 80077e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2201      	movs	r2, #1
 80077ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2201      	movs	r2, #1
 80077f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80077fa:	2300      	movs	r3, #0
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3708      	adds	r7, #8
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007804:	b480      	push	{r7}
 8007806:	b085      	sub	sp, #20
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007812:	b2db      	uxtb	r3, r3
 8007814:	2b01      	cmp	r3, #1
 8007816:	d001      	beq.n	800781c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007818:	2301      	movs	r3, #1
 800781a:	e04e      	b.n	80078ba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2202      	movs	r2, #2
 8007820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	68da      	ldr	r2, [r3, #12]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f042 0201 	orr.w	r2, r2, #1
 8007832:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a23      	ldr	r2, [pc, #140]	; (80078c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d022      	beq.n	8007884 <HAL_TIM_Base_Start_IT+0x80>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007846:	d01d      	beq.n	8007884 <HAL_TIM_Base_Start_IT+0x80>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a1f      	ldr	r2, [pc, #124]	; (80078cc <HAL_TIM_Base_Start_IT+0xc8>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d018      	beq.n	8007884 <HAL_TIM_Base_Start_IT+0x80>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a1e      	ldr	r2, [pc, #120]	; (80078d0 <HAL_TIM_Base_Start_IT+0xcc>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d013      	beq.n	8007884 <HAL_TIM_Base_Start_IT+0x80>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a1c      	ldr	r2, [pc, #112]	; (80078d4 <HAL_TIM_Base_Start_IT+0xd0>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d00e      	beq.n	8007884 <HAL_TIM_Base_Start_IT+0x80>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a1b      	ldr	r2, [pc, #108]	; (80078d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d009      	beq.n	8007884 <HAL_TIM_Base_Start_IT+0x80>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a19      	ldr	r2, [pc, #100]	; (80078dc <HAL_TIM_Base_Start_IT+0xd8>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d004      	beq.n	8007884 <HAL_TIM_Base_Start_IT+0x80>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a18      	ldr	r2, [pc, #96]	; (80078e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d111      	bne.n	80078a8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	f003 0307 	and.w	r3, r3, #7
 800788e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2b06      	cmp	r3, #6
 8007894:	d010      	beq.n	80078b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f042 0201 	orr.w	r2, r2, #1
 80078a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078a6:	e007      	b.n	80078b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f042 0201 	orr.w	r2, r2, #1
 80078b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80078b8:	2300      	movs	r3, #0
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3714      	adds	r7, #20
 80078be:	46bd      	mov	sp, r7
 80078c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c4:	4770      	bx	lr
 80078c6:	bf00      	nop
 80078c8:	40010000 	.word	0x40010000
 80078cc:	40000400 	.word	0x40000400
 80078d0:	40000800 	.word	0x40000800
 80078d4:	40000c00 	.word	0x40000c00
 80078d8:	40010400 	.word	0x40010400
 80078dc:	40014000 	.word	0x40014000
 80078e0:	40001800 	.word	0x40001800

080078e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b082      	sub	sp, #8
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d101      	bne.n	80078f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80078f2:	2301      	movs	r3, #1
 80078f4:	e041      	b.n	800797a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d106      	bne.n	8007910 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 f839 	bl	8007982 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2202      	movs	r2, #2
 8007914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681a      	ldr	r2, [r3, #0]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	3304      	adds	r3, #4
 8007920:	4619      	mov	r1, r3
 8007922:	4610      	mov	r0, r2
 8007924:	f000 faea 	bl	8007efc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2201      	movs	r2, #1
 800792c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2201      	movs	r2, #1
 8007934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2201      	movs	r2, #1
 800793c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2201      	movs	r2, #1
 8007944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2201      	movs	r2, #1
 800794c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2201      	movs	r2, #1
 8007954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2201      	movs	r2, #1
 800795c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2201      	movs	r2, #1
 8007964:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2201      	movs	r2, #1
 800796c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2201      	movs	r2, #1
 8007974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007978:	2300      	movs	r3, #0
}
 800797a:	4618      	mov	r0, r3
 800797c:	3708      	adds	r7, #8
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}

08007982 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007982:	b480      	push	{r7}
 8007984:	b083      	sub	sp, #12
 8007986:	af00      	add	r7, sp, #0
 8007988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800798a:	bf00      	nop
 800798c:	370c      	adds	r7, #12
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr

08007996 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007996:	b580      	push	{r7, lr}
 8007998:	b082      	sub	sp, #8
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	691b      	ldr	r3, [r3, #16]
 80079a4:	f003 0302 	and.w	r3, r3, #2
 80079a8:	2b02      	cmp	r3, #2
 80079aa:	d122      	bne.n	80079f2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	68db      	ldr	r3, [r3, #12]
 80079b2:	f003 0302 	and.w	r3, r3, #2
 80079b6:	2b02      	cmp	r3, #2
 80079b8:	d11b      	bne.n	80079f2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f06f 0202 	mvn.w	r2, #2
 80079c2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2201      	movs	r2, #1
 80079c8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	699b      	ldr	r3, [r3, #24]
 80079d0:	f003 0303 	and.w	r3, r3, #3
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d003      	beq.n	80079e0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 fa71 	bl	8007ec0 <HAL_TIM_IC_CaptureCallback>
 80079de:	e005      	b.n	80079ec <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 fa63 	bl	8007eac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 fa74 	bl	8007ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2200      	movs	r2, #0
 80079f0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	691b      	ldr	r3, [r3, #16]
 80079f8:	f003 0304 	and.w	r3, r3, #4
 80079fc:	2b04      	cmp	r3, #4
 80079fe:	d122      	bne.n	8007a46 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	68db      	ldr	r3, [r3, #12]
 8007a06:	f003 0304 	and.w	r3, r3, #4
 8007a0a:	2b04      	cmp	r3, #4
 8007a0c:	d11b      	bne.n	8007a46 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f06f 0204 	mvn.w	r2, #4
 8007a16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2202      	movs	r2, #2
 8007a1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	699b      	ldr	r3, [r3, #24]
 8007a24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d003      	beq.n	8007a34 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f000 fa47 	bl	8007ec0 <HAL_TIM_IC_CaptureCallback>
 8007a32:	e005      	b.n	8007a40 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 fa39 	bl	8007eac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 fa4a 	bl	8007ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2200      	movs	r2, #0
 8007a44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	691b      	ldr	r3, [r3, #16]
 8007a4c:	f003 0308 	and.w	r3, r3, #8
 8007a50:	2b08      	cmp	r3, #8
 8007a52:	d122      	bne.n	8007a9a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	68db      	ldr	r3, [r3, #12]
 8007a5a:	f003 0308 	and.w	r3, r3, #8
 8007a5e:	2b08      	cmp	r3, #8
 8007a60:	d11b      	bne.n	8007a9a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f06f 0208 	mvn.w	r2, #8
 8007a6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2204      	movs	r2, #4
 8007a70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	69db      	ldr	r3, [r3, #28]
 8007a78:	f003 0303 	and.w	r3, r3, #3
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d003      	beq.n	8007a88 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 fa1d 	bl	8007ec0 <HAL_TIM_IC_CaptureCallback>
 8007a86:	e005      	b.n	8007a94 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f000 fa0f 	bl	8007eac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 fa20 	bl	8007ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2200      	movs	r2, #0
 8007a98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	691b      	ldr	r3, [r3, #16]
 8007aa0:	f003 0310 	and.w	r3, r3, #16
 8007aa4:	2b10      	cmp	r3, #16
 8007aa6:	d122      	bne.n	8007aee <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	68db      	ldr	r3, [r3, #12]
 8007aae:	f003 0310 	and.w	r3, r3, #16
 8007ab2:	2b10      	cmp	r3, #16
 8007ab4:	d11b      	bne.n	8007aee <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f06f 0210 	mvn.w	r2, #16
 8007abe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2208      	movs	r2, #8
 8007ac4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	69db      	ldr	r3, [r3, #28]
 8007acc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d003      	beq.n	8007adc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 f9f3 	bl	8007ec0 <HAL_TIM_IC_CaptureCallback>
 8007ada:	e005      	b.n	8007ae8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f000 f9e5 	bl	8007eac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 f9f6 	bl	8007ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	691b      	ldr	r3, [r3, #16]
 8007af4:	f003 0301 	and.w	r3, r3, #1
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d10e      	bne.n	8007b1a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	68db      	ldr	r3, [r3, #12]
 8007b02:	f003 0301 	and.w	r3, r3, #1
 8007b06:	2b01      	cmp	r3, #1
 8007b08:	d107      	bne.n	8007b1a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f06f 0201 	mvn.w	r2, #1
 8007b12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f7fb fb85 	bl	8003224 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	691b      	ldr	r3, [r3, #16]
 8007b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b24:	2b80      	cmp	r3, #128	; 0x80
 8007b26:	d10e      	bne.n	8007b46 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	68db      	ldr	r3, [r3, #12]
 8007b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b32:	2b80      	cmp	r3, #128	; 0x80
 8007b34:	d107      	bne.n	8007b46 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007b3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f000 fe57 	bl	80087f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	691b      	ldr	r3, [r3, #16]
 8007b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b50:	2b40      	cmp	r3, #64	; 0x40
 8007b52:	d10e      	bne.n	8007b72 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	68db      	ldr	r3, [r3, #12]
 8007b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b5e:	2b40      	cmp	r3, #64	; 0x40
 8007b60:	d107      	bne.n	8007b72 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007b6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 f9bb 	bl	8007ee8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	691b      	ldr	r3, [r3, #16]
 8007b78:	f003 0320 	and.w	r3, r3, #32
 8007b7c:	2b20      	cmp	r3, #32
 8007b7e:	d10e      	bne.n	8007b9e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	68db      	ldr	r3, [r3, #12]
 8007b86:	f003 0320 	and.w	r3, r3, #32
 8007b8a:	2b20      	cmp	r3, #32
 8007b8c:	d107      	bne.n	8007b9e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f06f 0220 	mvn.w	r2, #32
 8007b96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f000 fe21 	bl	80087e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007b9e:	bf00      	nop
 8007ba0:	3708      	adds	r7, #8
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}
	...

08007ba8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b084      	sub	sp, #16
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	60b9      	str	r1, [r7, #8]
 8007bb2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d101      	bne.n	8007bc2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007bbe:	2302      	movs	r3, #2
 8007bc0:	e0ac      	b.n	8007d1c <HAL_TIM_PWM_ConfigChannel+0x174>
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2b0c      	cmp	r3, #12
 8007bce:	f200 809f 	bhi.w	8007d10 <HAL_TIM_PWM_ConfigChannel+0x168>
 8007bd2:	a201      	add	r2, pc, #4	; (adr r2, 8007bd8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bd8:	08007c0d 	.word	0x08007c0d
 8007bdc:	08007d11 	.word	0x08007d11
 8007be0:	08007d11 	.word	0x08007d11
 8007be4:	08007d11 	.word	0x08007d11
 8007be8:	08007c4d 	.word	0x08007c4d
 8007bec:	08007d11 	.word	0x08007d11
 8007bf0:	08007d11 	.word	0x08007d11
 8007bf4:	08007d11 	.word	0x08007d11
 8007bf8:	08007c8f 	.word	0x08007c8f
 8007bfc:	08007d11 	.word	0x08007d11
 8007c00:	08007d11 	.word	0x08007d11
 8007c04:	08007d11 	.word	0x08007d11
 8007c08:	08007ccf 	.word	0x08007ccf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	68b9      	ldr	r1, [r7, #8]
 8007c12:	4618      	mov	r0, r3
 8007c14:	f000 fa12 	bl	800803c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	699a      	ldr	r2, [r3, #24]
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f042 0208 	orr.w	r2, r2, #8
 8007c26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	699a      	ldr	r2, [r3, #24]
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f022 0204 	bic.w	r2, r2, #4
 8007c36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	6999      	ldr	r1, [r3, #24]
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	691a      	ldr	r2, [r3, #16]
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	430a      	orrs	r2, r1
 8007c48:	619a      	str	r2, [r3, #24]
      break;
 8007c4a:	e062      	b.n	8007d12 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	68b9      	ldr	r1, [r7, #8]
 8007c52:	4618      	mov	r0, r3
 8007c54:	f000 fa62 	bl	800811c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	699a      	ldr	r2, [r3, #24]
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	699a      	ldr	r2, [r3, #24]
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	6999      	ldr	r1, [r3, #24]
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	691b      	ldr	r3, [r3, #16]
 8007c82:	021a      	lsls	r2, r3, #8
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	430a      	orrs	r2, r1
 8007c8a:	619a      	str	r2, [r3, #24]
      break;
 8007c8c:	e041      	b.n	8007d12 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	68b9      	ldr	r1, [r7, #8]
 8007c94:	4618      	mov	r0, r3
 8007c96:	f000 fab7 	bl	8008208 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	69da      	ldr	r2, [r3, #28]
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f042 0208 	orr.w	r2, r2, #8
 8007ca8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	69da      	ldr	r2, [r3, #28]
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f022 0204 	bic.w	r2, r2, #4
 8007cb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	69d9      	ldr	r1, [r3, #28]
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	691a      	ldr	r2, [r3, #16]
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	430a      	orrs	r2, r1
 8007cca:	61da      	str	r2, [r3, #28]
      break;
 8007ccc:	e021      	b.n	8007d12 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	68b9      	ldr	r1, [r7, #8]
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f000 fb0b 	bl	80082f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	69da      	ldr	r2, [r3, #28]
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ce8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	69da      	ldr	r2, [r3, #28]
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	69d9      	ldr	r1, [r3, #28]
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	691b      	ldr	r3, [r3, #16]
 8007d04:	021a      	lsls	r2, r3, #8
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	430a      	orrs	r2, r1
 8007d0c:	61da      	str	r2, [r3, #28]
      break;
 8007d0e:	e000      	b.n	8007d12 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8007d10:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2200      	movs	r2, #0
 8007d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d1a:	2300      	movs	r3, #0
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3710      	adds	r7, #16
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}

08007d24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b084      	sub	sp, #16
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	d101      	bne.n	8007d3c <HAL_TIM_ConfigClockSource+0x18>
 8007d38:	2302      	movs	r3, #2
 8007d3a:	e0b3      	b.n	8007ea4 <HAL_TIM_ConfigClockSource+0x180>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2201      	movs	r2, #1
 8007d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2202      	movs	r2, #2
 8007d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007d5a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d62:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	68fa      	ldr	r2, [r7, #12]
 8007d6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d74:	d03e      	beq.n	8007df4 <HAL_TIM_ConfigClockSource+0xd0>
 8007d76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d7a:	f200 8087 	bhi.w	8007e8c <HAL_TIM_ConfigClockSource+0x168>
 8007d7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d82:	f000 8085 	beq.w	8007e90 <HAL_TIM_ConfigClockSource+0x16c>
 8007d86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d8a:	d87f      	bhi.n	8007e8c <HAL_TIM_ConfigClockSource+0x168>
 8007d8c:	2b70      	cmp	r3, #112	; 0x70
 8007d8e:	d01a      	beq.n	8007dc6 <HAL_TIM_ConfigClockSource+0xa2>
 8007d90:	2b70      	cmp	r3, #112	; 0x70
 8007d92:	d87b      	bhi.n	8007e8c <HAL_TIM_ConfigClockSource+0x168>
 8007d94:	2b60      	cmp	r3, #96	; 0x60
 8007d96:	d050      	beq.n	8007e3a <HAL_TIM_ConfigClockSource+0x116>
 8007d98:	2b60      	cmp	r3, #96	; 0x60
 8007d9a:	d877      	bhi.n	8007e8c <HAL_TIM_ConfigClockSource+0x168>
 8007d9c:	2b50      	cmp	r3, #80	; 0x50
 8007d9e:	d03c      	beq.n	8007e1a <HAL_TIM_ConfigClockSource+0xf6>
 8007da0:	2b50      	cmp	r3, #80	; 0x50
 8007da2:	d873      	bhi.n	8007e8c <HAL_TIM_ConfigClockSource+0x168>
 8007da4:	2b40      	cmp	r3, #64	; 0x40
 8007da6:	d058      	beq.n	8007e5a <HAL_TIM_ConfigClockSource+0x136>
 8007da8:	2b40      	cmp	r3, #64	; 0x40
 8007daa:	d86f      	bhi.n	8007e8c <HAL_TIM_ConfigClockSource+0x168>
 8007dac:	2b30      	cmp	r3, #48	; 0x30
 8007dae:	d064      	beq.n	8007e7a <HAL_TIM_ConfigClockSource+0x156>
 8007db0:	2b30      	cmp	r3, #48	; 0x30
 8007db2:	d86b      	bhi.n	8007e8c <HAL_TIM_ConfigClockSource+0x168>
 8007db4:	2b20      	cmp	r3, #32
 8007db6:	d060      	beq.n	8007e7a <HAL_TIM_ConfigClockSource+0x156>
 8007db8:	2b20      	cmp	r3, #32
 8007dba:	d867      	bhi.n	8007e8c <HAL_TIM_ConfigClockSource+0x168>
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d05c      	beq.n	8007e7a <HAL_TIM_ConfigClockSource+0x156>
 8007dc0:	2b10      	cmp	r3, #16
 8007dc2:	d05a      	beq.n	8007e7a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007dc4:	e062      	b.n	8007e8c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6818      	ldr	r0, [r3, #0]
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	6899      	ldr	r1, [r3, #8]
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	685a      	ldr	r2, [r3, #4]
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	68db      	ldr	r3, [r3, #12]
 8007dd6:	f000 fb5b 	bl	8008490 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	689b      	ldr	r3, [r3, #8]
 8007de0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007de8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	68fa      	ldr	r2, [r7, #12]
 8007df0:	609a      	str	r2, [r3, #8]
      break;
 8007df2:	e04e      	b.n	8007e92 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6818      	ldr	r0, [r3, #0]
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	6899      	ldr	r1, [r3, #8]
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	685a      	ldr	r2, [r3, #4]
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	68db      	ldr	r3, [r3, #12]
 8007e04:	f000 fb44 	bl	8008490 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	689a      	ldr	r2, [r3, #8]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e16:	609a      	str	r2, [r3, #8]
      break;
 8007e18:	e03b      	b.n	8007e92 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6818      	ldr	r0, [r3, #0]
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	6859      	ldr	r1, [r3, #4]
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	68db      	ldr	r3, [r3, #12]
 8007e26:	461a      	mov	r2, r3
 8007e28:	f000 fab8 	bl	800839c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	2150      	movs	r1, #80	; 0x50
 8007e32:	4618      	mov	r0, r3
 8007e34:	f000 fb11 	bl	800845a <TIM_ITRx_SetConfig>
      break;
 8007e38:	e02b      	b.n	8007e92 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6818      	ldr	r0, [r3, #0]
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	6859      	ldr	r1, [r3, #4]
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	68db      	ldr	r3, [r3, #12]
 8007e46:	461a      	mov	r2, r3
 8007e48:	f000 fad7 	bl	80083fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	2160      	movs	r1, #96	; 0x60
 8007e52:	4618      	mov	r0, r3
 8007e54:	f000 fb01 	bl	800845a <TIM_ITRx_SetConfig>
      break;
 8007e58:	e01b      	b.n	8007e92 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6818      	ldr	r0, [r3, #0]
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	6859      	ldr	r1, [r3, #4]
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	68db      	ldr	r3, [r3, #12]
 8007e66:	461a      	mov	r2, r3
 8007e68:	f000 fa98 	bl	800839c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	2140      	movs	r1, #64	; 0x40
 8007e72:	4618      	mov	r0, r3
 8007e74:	f000 faf1 	bl	800845a <TIM_ITRx_SetConfig>
      break;
 8007e78:	e00b      	b.n	8007e92 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681a      	ldr	r2, [r3, #0]
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4619      	mov	r1, r3
 8007e84:	4610      	mov	r0, r2
 8007e86:	f000 fae8 	bl	800845a <TIM_ITRx_SetConfig>
        break;
 8007e8a:	e002      	b.n	8007e92 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007e8c:	bf00      	nop
 8007e8e:	e000      	b.n	8007e92 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007e90:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2201      	movs	r2, #1
 8007e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ea2:	2300      	movs	r3, #0
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3710      	adds	r7, #16
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007eb4:	bf00      	nop
 8007eb6:	370c      	adds	r7, #12
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr

08007ec0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b083      	sub	sp, #12
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007ec8:	bf00      	nop
 8007eca:	370c      	adds	r7, #12
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr

08007ed4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007edc:	bf00      	nop
 8007ede:	370c      	adds	r7, #12
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee6:	4770      	bx	lr

08007ee8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b083      	sub	sp, #12
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ef0:	bf00      	nop
 8007ef2:	370c      	adds	r7, #12
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr

08007efc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b085      	sub	sp, #20
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	4a40      	ldr	r2, [pc, #256]	; (8008010 <TIM_Base_SetConfig+0x114>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d013      	beq.n	8007f3c <TIM_Base_SetConfig+0x40>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f1a:	d00f      	beq.n	8007f3c <TIM_Base_SetConfig+0x40>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	4a3d      	ldr	r2, [pc, #244]	; (8008014 <TIM_Base_SetConfig+0x118>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d00b      	beq.n	8007f3c <TIM_Base_SetConfig+0x40>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4a3c      	ldr	r2, [pc, #240]	; (8008018 <TIM_Base_SetConfig+0x11c>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d007      	beq.n	8007f3c <TIM_Base_SetConfig+0x40>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	4a3b      	ldr	r2, [pc, #236]	; (800801c <TIM_Base_SetConfig+0x120>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d003      	beq.n	8007f3c <TIM_Base_SetConfig+0x40>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	4a3a      	ldr	r2, [pc, #232]	; (8008020 <TIM_Base_SetConfig+0x124>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d108      	bne.n	8007f4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	68fa      	ldr	r2, [r7, #12]
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	4a2f      	ldr	r2, [pc, #188]	; (8008010 <TIM_Base_SetConfig+0x114>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d02b      	beq.n	8007fae <TIM_Base_SetConfig+0xb2>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f5c:	d027      	beq.n	8007fae <TIM_Base_SetConfig+0xb2>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	4a2c      	ldr	r2, [pc, #176]	; (8008014 <TIM_Base_SetConfig+0x118>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d023      	beq.n	8007fae <TIM_Base_SetConfig+0xb2>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	4a2b      	ldr	r2, [pc, #172]	; (8008018 <TIM_Base_SetConfig+0x11c>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d01f      	beq.n	8007fae <TIM_Base_SetConfig+0xb2>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	4a2a      	ldr	r2, [pc, #168]	; (800801c <TIM_Base_SetConfig+0x120>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d01b      	beq.n	8007fae <TIM_Base_SetConfig+0xb2>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	4a29      	ldr	r2, [pc, #164]	; (8008020 <TIM_Base_SetConfig+0x124>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d017      	beq.n	8007fae <TIM_Base_SetConfig+0xb2>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	4a28      	ldr	r2, [pc, #160]	; (8008024 <TIM_Base_SetConfig+0x128>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d013      	beq.n	8007fae <TIM_Base_SetConfig+0xb2>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	4a27      	ldr	r2, [pc, #156]	; (8008028 <TIM_Base_SetConfig+0x12c>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d00f      	beq.n	8007fae <TIM_Base_SetConfig+0xb2>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	4a26      	ldr	r2, [pc, #152]	; (800802c <TIM_Base_SetConfig+0x130>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d00b      	beq.n	8007fae <TIM_Base_SetConfig+0xb2>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	4a25      	ldr	r2, [pc, #148]	; (8008030 <TIM_Base_SetConfig+0x134>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d007      	beq.n	8007fae <TIM_Base_SetConfig+0xb2>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	4a24      	ldr	r2, [pc, #144]	; (8008034 <TIM_Base_SetConfig+0x138>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d003      	beq.n	8007fae <TIM_Base_SetConfig+0xb2>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	4a23      	ldr	r2, [pc, #140]	; (8008038 <TIM_Base_SetConfig+0x13c>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d108      	bne.n	8007fc0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	68db      	ldr	r3, [r3, #12]
 8007fba:	68fa      	ldr	r2, [r7, #12]
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	695b      	ldr	r3, [r3, #20]
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	68fa      	ldr	r2, [r7, #12]
 8007fd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	689a      	ldr	r2, [r3, #8]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	681a      	ldr	r2, [r3, #0]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	4a0a      	ldr	r2, [pc, #40]	; (8008010 <TIM_Base_SetConfig+0x114>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d003      	beq.n	8007ff4 <TIM_Base_SetConfig+0xf8>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	4a0c      	ldr	r2, [pc, #48]	; (8008020 <TIM_Base_SetConfig+0x124>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d103      	bne.n	8007ffc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	691a      	ldr	r2, [r3, #16]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2201      	movs	r2, #1
 8008000:	615a      	str	r2, [r3, #20]
}
 8008002:	bf00      	nop
 8008004:	3714      	adds	r7, #20
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr
 800800e:	bf00      	nop
 8008010:	40010000 	.word	0x40010000
 8008014:	40000400 	.word	0x40000400
 8008018:	40000800 	.word	0x40000800
 800801c:	40000c00 	.word	0x40000c00
 8008020:	40010400 	.word	0x40010400
 8008024:	40014000 	.word	0x40014000
 8008028:	40014400 	.word	0x40014400
 800802c:	40014800 	.word	0x40014800
 8008030:	40001800 	.word	0x40001800
 8008034:	40001c00 	.word	0x40001c00
 8008038:	40002000 	.word	0x40002000

0800803c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800803c:	b480      	push	{r7}
 800803e:	b087      	sub	sp, #28
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6a1b      	ldr	r3, [r3, #32]
 800804a:	f023 0201 	bic.w	r2, r3, #1
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6a1b      	ldr	r3, [r3, #32]
 8008056:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	699b      	ldr	r3, [r3, #24]
 8008062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800806a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f023 0303 	bic.w	r3, r3, #3
 8008072:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	68fa      	ldr	r2, [r7, #12]
 800807a:	4313      	orrs	r3, r2
 800807c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	f023 0302 	bic.w	r3, r3, #2
 8008084:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	689b      	ldr	r3, [r3, #8]
 800808a:	697a      	ldr	r2, [r7, #20]
 800808c:	4313      	orrs	r3, r2
 800808e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	4a20      	ldr	r2, [pc, #128]	; (8008114 <TIM_OC1_SetConfig+0xd8>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d003      	beq.n	80080a0 <TIM_OC1_SetConfig+0x64>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	4a1f      	ldr	r2, [pc, #124]	; (8008118 <TIM_OC1_SetConfig+0xdc>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d10c      	bne.n	80080ba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	f023 0308 	bic.w	r3, r3, #8
 80080a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	68db      	ldr	r3, [r3, #12]
 80080ac:	697a      	ldr	r2, [r7, #20]
 80080ae:	4313      	orrs	r3, r2
 80080b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	f023 0304 	bic.w	r3, r3, #4
 80080b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	4a15      	ldr	r2, [pc, #84]	; (8008114 <TIM_OC1_SetConfig+0xd8>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d003      	beq.n	80080ca <TIM_OC1_SetConfig+0x8e>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	4a14      	ldr	r2, [pc, #80]	; (8008118 <TIM_OC1_SetConfig+0xdc>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d111      	bne.n	80080ee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80080d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	695b      	ldr	r3, [r3, #20]
 80080de:	693a      	ldr	r2, [r7, #16]
 80080e0:	4313      	orrs	r3, r2
 80080e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	699b      	ldr	r3, [r3, #24]
 80080e8:	693a      	ldr	r2, [r7, #16]
 80080ea:	4313      	orrs	r3, r2
 80080ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	693a      	ldr	r2, [r7, #16]
 80080f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	68fa      	ldr	r2, [r7, #12]
 80080f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	685a      	ldr	r2, [r3, #4]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	697a      	ldr	r2, [r7, #20]
 8008106:	621a      	str	r2, [r3, #32]
}
 8008108:	bf00      	nop
 800810a:	371c      	adds	r7, #28
 800810c:	46bd      	mov	sp, r7
 800810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008112:	4770      	bx	lr
 8008114:	40010000 	.word	0x40010000
 8008118:	40010400 	.word	0x40010400

0800811c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800811c:	b480      	push	{r7}
 800811e:	b087      	sub	sp, #28
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6a1b      	ldr	r3, [r3, #32]
 800812a:	f023 0210 	bic.w	r2, r3, #16
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6a1b      	ldr	r3, [r3, #32]
 8008136:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	699b      	ldr	r3, [r3, #24]
 8008142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800814a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008152:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	021b      	lsls	r3, r3, #8
 800815a:	68fa      	ldr	r2, [r7, #12]
 800815c:	4313      	orrs	r3, r2
 800815e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	f023 0320 	bic.w	r3, r3, #32
 8008166:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	689b      	ldr	r3, [r3, #8]
 800816c:	011b      	lsls	r3, r3, #4
 800816e:	697a      	ldr	r2, [r7, #20]
 8008170:	4313      	orrs	r3, r2
 8008172:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	4a22      	ldr	r2, [pc, #136]	; (8008200 <TIM_OC2_SetConfig+0xe4>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d003      	beq.n	8008184 <TIM_OC2_SetConfig+0x68>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	4a21      	ldr	r2, [pc, #132]	; (8008204 <TIM_OC2_SetConfig+0xe8>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d10d      	bne.n	80081a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800818a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	68db      	ldr	r3, [r3, #12]
 8008190:	011b      	lsls	r3, r3, #4
 8008192:	697a      	ldr	r2, [r7, #20]
 8008194:	4313      	orrs	r3, r2
 8008196:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800819e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	4a17      	ldr	r2, [pc, #92]	; (8008200 <TIM_OC2_SetConfig+0xe4>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d003      	beq.n	80081b0 <TIM_OC2_SetConfig+0x94>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	4a16      	ldr	r2, [pc, #88]	; (8008204 <TIM_OC2_SetConfig+0xe8>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d113      	bne.n	80081d8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80081b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80081be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	695b      	ldr	r3, [r3, #20]
 80081c4:	009b      	lsls	r3, r3, #2
 80081c6:	693a      	ldr	r2, [r7, #16]
 80081c8:	4313      	orrs	r3, r2
 80081ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	699b      	ldr	r3, [r3, #24]
 80081d0:	009b      	lsls	r3, r3, #2
 80081d2:	693a      	ldr	r2, [r7, #16]
 80081d4:	4313      	orrs	r3, r2
 80081d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	693a      	ldr	r2, [r7, #16]
 80081dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	68fa      	ldr	r2, [r7, #12]
 80081e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	685a      	ldr	r2, [r3, #4]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	697a      	ldr	r2, [r7, #20]
 80081f0:	621a      	str	r2, [r3, #32]
}
 80081f2:	bf00      	nop
 80081f4:	371c      	adds	r7, #28
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr
 80081fe:	bf00      	nop
 8008200:	40010000 	.word	0x40010000
 8008204:	40010400 	.word	0x40010400

08008208 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008208:	b480      	push	{r7}
 800820a:	b087      	sub	sp, #28
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6a1b      	ldr	r3, [r3, #32]
 8008216:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6a1b      	ldr	r3, [r3, #32]
 8008222:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	69db      	ldr	r3, [r3, #28]
 800822e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f023 0303 	bic.w	r3, r3, #3
 800823e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	68fa      	ldr	r2, [r7, #12]
 8008246:	4313      	orrs	r3, r2
 8008248:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008250:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	021b      	lsls	r3, r3, #8
 8008258:	697a      	ldr	r2, [r7, #20]
 800825a:	4313      	orrs	r3, r2
 800825c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	4a21      	ldr	r2, [pc, #132]	; (80082e8 <TIM_OC3_SetConfig+0xe0>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d003      	beq.n	800826e <TIM_OC3_SetConfig+0x66>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	4a20      	ldr	r2, [pc, #128]	; (80082ec <TIM_OC3_SetConfig+0xe4>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d10d      	bne.n	800828a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008274:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	68db      	ldr	r3, [r3, #12]
 800827a:	021b      	lsls	r3, r3, #8
 800827c:	697a      	ldr	r2, [r7, #20]
 800827e:	4313      	orrs	r3, r2
 8008280:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008288:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4a16      	ldr	r2, [pc, #88]	; (80082e8 <TIM_OC3_SetConfig+0xe0>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d003      	beq.n	800829a <TIM_OC3_SetConfig+0x92>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	4a15      	ldr	r2, [pc, #84]	; (80082ec <TIM_OC3_SetConfig+0xe4>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d113      	bne.n	80082c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80082a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80082a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	695b      	ldr	r3, [r3, #20]
 80082ae:	011b      	lsls	r3, r3, #4
 80082b0:	693a      	ldr	r2, [r7, #16]
 80082b2:	4313      	orrs	r3, r2
 80082b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	699b      	ldr	r3, [r3, #24]
 80082ba:	011b      	lsls	r3, r3, #4
 80082bc:	693a      	ldr	r2, [r7, #16]
 80082be:	4313      	orrs	r3, r2
 80082c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	693a      	ldr	r2, [r7, #16]
 80082c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	68fa      	ldr	r2, [r7, #12]
 80082cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	685a      	ldr	r2, [r3, #4]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	697a      	ldr	r2, [r7, #20]
 80082da:	621a      	str	r2, [r3, #32]
}
 80082dc:	bf00      	nop
 80082de:	371c      	adds	r7, #28
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr
 80082e8:	40010000 	.word	0x40010000
 80082ec:	40010400 	.word	0x40010400

080082f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b087      	sub	sp, #28
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6a1b      	ldr	r3, [r3, #32]
 80082fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6a1b      	ldr	r3, [r3, #32]
 800830a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	69db      	ldr	r3, [r3, #28]
 8008316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800831e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008326:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	021b      	lsls	r3, r3, #8
 800832e:	68fa      	ldr	r2, [r7, #12]
 8008330:	4313      	orrs	r3, r2
 8008332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800833a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	031b      	lsls	r3, r3, #12
 8008342:	693a      	ldr	r2, [r7, #16]
 8008344:	4313      	orrs	r3, r2
 8008346:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	4a12      	ldr	r2, [pc, #72]	; (8008394 <TIM_OC4_SetConfig+0xa4>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d003      	beq.n	8008358 <TIM_OC4_SetConfig+0x68>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	4a11      	ldr	r2, [pc, #68]	; (8008398 <TIM_OC4_SetConfig+0xa8>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d109      	bne.n	800836c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800835e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	695b      	ldr	r3, [r3, #20]
 8008364:	019b      	lsls	r3, r3, #6
 8008366:	697a      	ldr	r2, [r7, #20]
 8008368:	4313      	orrs	r3, r2
 800836a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	697a      	ldr	r2, [r7, #20]
 8008370:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	68fa      	ldr	r2, [r7, #12]
 8008376:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	685a      	ldr	r2, [r3, #4]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	693a      	ldr	r2, [r7, #16]
 8008384:	621a      	str	r2, [r3, #32]
}
 8008386:	bf00      	nop
 8008388:	371c      	adds	r7, #28
 800838a:	46bd      	mov	sp, r7
 800838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008390:	4770      	bx	lr
 8008392:	bf00      	nop
 8008394:	40010000 	.word	0x40010000
 8008398:	40010400 	.word	0x40010400

0800839c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800839c:	b480      	push	{r7}
 800839e:	b087      	sub	sp, #28
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	60f8      	str	r0, [r7, #12]
 80083a4:	60b9      	str	r1, [r7, #8]
 80083a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	6a1b      	ldr	r3, [r3, #32]
 80083ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	6a1b      	ldr	r3, [r3, #32]
 80083b2:	f023 0201 	bic.w	r2, r3, #1
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	699b      	ldr	r3, [r3, #24]
 80083be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80083c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	011b      	lsls	r3, r3, #4
 80083cc:	693a      	ldr	r2, [r7, #16]
 80083ce:	4313      	orrs	r3, r2
 80083d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	f023 030a 	bic.w	r3, r3, #10
 80083d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80083da:	697a      	ldr	r2, [r7, #20]
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	4313      	orrs	r3, r2
 80083e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	693a      	ldr	r2, [r7, #16]
 80083e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	697a      	ldr	r2, [r7, #20]
 80083ec:	621a      	str	r2, [r3, #32]
}
 80083ee:	bf00      	nop
 80083f0:	371c      	adds	r7, #28
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr

080083fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80083fa:	b480      	push	{r7}
 80083fc:	b087      	sub	sp, #28
 80083fe:	af00      	add	r7, sp, #0
 8008400:	60f8      	str	r0, [r7, #12]
 8008402:	60b9      	str	r1, [r7, #8]
 8008404:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	6a1b      	ldr	r3, [r3, #32]
 800840a:	f023 0210 	bic.w	r2, r3, #16
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	699b      	ldr	r3, [r3, #24]
 8008416:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	6a1b      	ldr	r3, [r3, #32]
 800841c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008424:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	031b      	lsls	r3, r3, #12
 800842a:	697a      	ldr	r2, [r7, #20]
 800842c:	4313      	orrs	r3, r2
 800842e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008436:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	011b      	lsls	r3, r3, #4
 800843c:	693a      	ldr	r2, [r7, #16]
 800843e:	4313      	orrs	r3, r2
 8008440:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	697a      	ldr	r2, [r7, #20]
 8008446:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	693a      	ldr	r2, [r7, #16]
 800844c:	621a      	str	r2, [r3, #32]
}
 800844e:	bf00      	nop
 8008450:	371c      	adds	r7, #28
 8008452:	46bd      	mov	sp, r7
 8008454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008458:	4770      	bx	lr

0800845a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800845a:	b480      	push	{r7}
 800845c:	b085      	sub	sp, #20
 800845e:	af00      	add	r7, sp, #0
 8008460:	6078      	str	r0, [r7, #4]
 8008462:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	689b      	ldr	r3, [r3, #8]
 8008468:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008470:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008472:	683a      	ldr	r2, [r7, #0]
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	4313      	orrs	r3, r2
 8008478:	f043 0307 	orr.w	r3, r3, #7
 800847c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	68fa      	ldr	r2, [r7, #12]
 8008482:	609a      	str	r2, [r3, #8]
}
 8008484:	bf00      	nop
 8008486:	3714      	adds	r7, #20
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr

08008490 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008490:	b480      	push	{r7}
 8008492:	b087      	sub	sp, #28
 8008494:	af00      	add	r7, sp, #0
 8008496:	60f8      	str	r0, [r7, #12]
 8008498:	60b9      	str	r1, [r7, #8]
 800849a:	607a      	str	r2, [r7, #4]
 800849c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	689b      	ldr	r3, [r3, #8]
 80084a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80084aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	021a      	lsls	r2, r3, #8
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	431a      	orrs	r2, r3
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	4313      	orrs	r3, r2
 80084b8:	697a      	ldr	r2, [r7, #20]
 80084ba:	4313      	orrs	r3, r2
 80084bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	697a      	ldr	r2, [r7, #20]
 80084c2:	609a      	str	r2, [r3, #8]
}
 80084c4:	bf00      	nop
 80084c6:	371c      	adds	r7, #28
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr

080084d0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b084      	sub	sp, #16
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d109      	bne.n	80084f4 <HAL_TIMEx_PWMN_Start+0x24>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80084e6:	b2db      	uxtb	r3, r3
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	bf14      	ite	ne
 80084ec:	2301      	movne	r3, #1
 80084ee:	2300      	moveq	r3, #0
 80084f0:	b2db      	uxtb	r3, r3
 80084f2:	e022      	b.n	800853a <HAL_TIMEx_PWMN_Start+0x6a>
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	2b04      	cmp	r3, #4
 80084f8:	d109      	bne.n	800850e <HAL_TIMEx_PWMN_Start+0x3e>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008500:	b2db      	uxtb	r3, r3
 8008502:	2b01      	cmp	r3, #1
 8008504:	bf14      	ite	ne
 8008506:	2301      	movne	r3, #1
 8008508:	2300      	moveq	r3, #0
 800850a:	b2db      	uxtb	r3, r3
 800850c:	e015      	b.n	800853a <HAL_TIMEx_PWMN_Start+0x6a>
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	2b08      	cmp	r3, #8
 8008512:	d109      	bne.n	8008528 <HAL_TIMEx_PWMN_Start+0x58>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800851a:	b2db      	uxtb	r3, r3
 800851c:	2b01      	cmp	r3, #1
 800851e:	bf14      	ite	ne
 8008520:	2301      	movne	r3, #1
 8008522:	2300      	moveq	r3, #0
 8008524:	b2db      	uxtb	r3, r3
 8008526:	e008      	b.n	800853a <HAL_TIMEx_PWMN_Start+0x6a>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800852e:	b2db      	uxtb	r3, r3
 8008530:	2b01      	cmp	r3, #1
 8008532:	bf14      	ite	ne
 8008534:	2301      	movne	r3, #1
 8008536:	2300      	moveq	r3, #0
 8008538:	b2db      	uxtb	r3, r3
 800853a:	2b00      	cmp	r3, #0
 800853c:	d001      	beq.n	8008542 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800853e:	2301      	movs	r3, #1
 8008540:	e06d      	b.n	800861e <HAL_TIMEx_PWMN_Start+0x14e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d104      	bne.n	8008552 <HAL_TIMEx_PWMN_Start+0x82>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2202      	movs	r2, #2
 800854c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008550:	e013      	b.n	800857a <HAL_TIMEx_PWMN_Start+0xaa>
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	2b04      	cmp	r3, #4
 8008556:	d104      	bne.n	8008562 <HAL_TIMEx_PWMN_Start+0x92>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2202      	movs	r2, #2
 800855c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008560:	e00b      	b.n	800857a <HAL_TIMEx_PWMN_Start+0xaa>
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	2b08      	cmp	r3, #8
 8008566:	d104      	bne.n	8008572 <HAL_TIMEx_PWMN_Start+0xa2>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2202      	movs	r2, #2
 800856c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008570:	e003      	b.n	800857a <HAL_TIMEx_PWMN_Start+0xaa>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2202      	movs	r2, #2
 8008576:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	2204      	movs	r2, #4
 8008580:	6839      	ldr	r1, [r7, #0]
 8008582:	4618      	mov	r0, r3
 8008584:	f000 f940 	bl	8008808 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008596:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a22      	ldr	r2, [pc, #136]	; (8008628 <HAL_TIMEx_PWMN_Start+0x158>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d022      	beq.n	80085e8 <HAL_TIMEx_PWMN_Start+0x118>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085aa:	d01d      	beq.n	80085e8 <HAL_TIMEx_PWMN_Start+0x118>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a1e      	ldr	r2, [pc, #120]	; (800862c <HAL_TIMEx_PWMN_Start+0x15c>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d018      	beq.n	80085e8 <HAL_TIMEx_PWMN_Start+0x118>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4a1d      	ldr	r2, [pc, #116]	; (8008630 <HAL_TIMEx_PWMN_Start+0x160>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d013      	beq.n	80085e8 <HAL_TIMEx_PWMN_Start+0x118>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a1b      	ldr	r2, [pc, #108]	; (8008634 <HAL_TIMEx_PWMN_Start+0x164>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d00e      	beq.n	80085e8 <HAL_TIMEx_PWMN_Start+0x118>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4a1a      	ldr	r2, [pc, #104]	; (8008638 <HAL_TIMEx_PWMN_Start+0x168>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d009      	beq.n	80085e8 <HAL_TIMEx_PWMN_Start+0x118>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a18      	ldr	r2, [pc, #96]	; (800863c <HAL_TIMEx_PWMN_Start+0x16c>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d004      	beq.n	80085e8 <HAL_TIMEx_PWMN_Start+0x118>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a17      	ldr	r2, [pc, #92]	; (8008640 <HAL_TIMEx_PWMN_Start+0x170>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d111      	bne.n	800860c <HAL_TIMEx_PWMN_Start+0x13c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	689b      	ldr	r3, [r3, #8]
 80085ee:	f003 0307 	and.w	r3, r3, #7
 80085f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2b06      	cmp	r3, #6
 80085f8:	d010      	beq.n	800861c <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	681a      	ldr	r2, [r3, #0]
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f042 0201 	orr.w	r2, r2, #1
 8008608:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800860a:	e007      	b.n	800861c <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	681a      	ldr	r2, [r3, #0]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f042 0201 	orr.w	r2, r2, #1
 800861a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800861c:	2300      	movs	r3, #0
}
 800861e:	4618      	mov	r0, r3
 8008620:	3710      	adds	r7, #16
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}
 8008626:	bf00      	nop
 8008628:	40010000 	.word	0x40010000
 800862c:	40000400 	.word	0x40000400
 8008630:	40000800 	.word	0x40000800
 8008634:	40000c00 	.word	0x40000c00
 8008638:	40010400 	.word	0x40010400
 800863c:	40014000 	.word	0x40014000
 8008640:	40001800 	.word	0x40001800

08008644 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008644:	b480      	push	{r7}
 8008646:	b085      	sub	sp, #20
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
 800864c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008654:	2b01      	cmp	r3, #1
 8008656:	d101      	bne.n	800865c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008658:	2302      	movs	r3, #2
 800865a:	e05a      	b.n	8008712 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2201      	movs	r2, #1
 8008660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2202      	movs	r2, #2
 8008668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	689b      	ldr	r3, [r3, #8]
 800867a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008682:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	68fa      	ldr	r2, [r7, #12]
 800868a:	4313      	orrs	r3, r2
 800868c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	68fa      	ldr	r2, [r7, #12]
 8008694:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a21      	ldr	r2, [pc, #132]	; (8008720 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d022      	beq.n	80086e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086a8:	d01d      	beq.n	80086e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a1d      	ldr	r2, [pc, #116]	; (8008724 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d018      	beq.n	80086e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a1b      	ldr	r2, [pc, #108]	; (8008728 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d013      	beq.n	80086e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a1a      	ldr	r2, [pc, #104]	; (800872c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d00e      	beq.n	80086e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a18      	ldr	r2, [pc, #96]	; (8008730 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d009      	beq.n	80086e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a17      	ldr	r2, [pc, #92]	; (8008734 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d004      	beq.n	80086e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a15      	ldr	r2, [pc, #84]	; (8008738 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d10c      	bne.n	8008700 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	68ba      	ldr	r2, [r7, #8]
 80086f4:	4313      	orrs	r3, r2
 80086f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	68ba      	ldr	r2, [r7, #8]
 80086fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2201      	movs	r2, #1
 8008704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2200      	movs	r2, #0
 800870c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008710:	2300      	movs	r3, #0
}
 8008712:	4618      	mov	r0, r3
 8008714:	3714      	adds	r7, #20
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr
 800871e:	bf00      	nop
 8008720:	40010000 	.word	0x40010000
 8008724:	40000400 	.word	0x40000400
 8008728:	40000800 	.word	0x40000800
 800872c:	40000c00 	.word	0x40000c00
 8008730:	40010400 	.word	0x40010400
 8008734:	40014000 	.word	0x40014000
 8008738:	40001800 	.word	0x40001800

0800873c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800873c:	b480      	push	{r7}
 800873e:	b085      	sub	sp, #20
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
 8008744:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008746:	2300      	movs	r3, #0
 8008748:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008750:	2b01      	cmp	r3, #1
 8008752:	d101      	bne.n	8008758 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008754:	2302      	movs	r3, #2
 8008756:	e03d      	b.n	80087d4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2201      	movs	r2, #1
 800875c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	68db      	ldr	r3, [r3, #12]
 800876a:	4313      	orrs	r3, r2
 800876c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	689b      	ldr	r3, [r3, #8]
 8008778:	4313      	orrs	r3, r2
 800877a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	4313      	orrs	r3, r2
 8008788:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4313      	orrs	r3, r2
 8008796:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	691b      	ldr	r3, [r3, #16]
 80087a2:	4313      	orrs	r3, r2
 80087a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	695b      	ldr	r3, [r3, #20]
 80087b0:	4313      	orrs	r3, r2
 80087b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	69db      	ldr	r3, [r3, #28]
 80087be:	4313      	orrs	r3, r2
 80087c0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	68fa      	ldr	r2, [r7, #12]
 80087c8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2200      	movs	r2, #0
 80087ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80087d2:	2300      	movs	r3, #0
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3714      	adds	r7, #20
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b083      	sub	sp, #12
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80087e8:	bf00      	nop
 80087ea:	370c      	adds	r7, #12
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr

080087f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b083      	sub	sp, #12
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80087fc:	bf00      	nop
 80087fe:	370c      	adds	r7, #12
 8008800:	46bd      	mov	sp, r7
 8008802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008806:	4770      	bx	lr

08008808 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8008808:	b480      	push	{r7}
 800880a:	b087      	sub	sp, #28
 800880c:	af00      	add	r7, sp, #0
 800880e:	60f8      	str	r0, [r7, #12]
 8008810:	60b9      	str	r1, [r7, #8]
 8008812:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	f003 031f 	and.w	r3, r3, #31
 800881a:	2204      	movs	r2, #4
 800881c:	fa02 f303 	lsl.w	r3, r2, r3
 8008820:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	6a1a      	ldr	r2, [r3, #32]
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	43db      	mvns	r3, r3
 800882a:	401a      	ands	r2, r3
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	6a1a      	ldr	r2, [r3, #32]
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	f003 031f 	and.w	r3, r3, #31
 800883a:	6879      	ldr	r1, [r7, #4]
 800883c:	fa01 f303 	lsl.w	r3, r1, r3
 8008840:	431a      	orrs	r2, r3
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	621a      	str	r2, [r3, #32]
}
 8008846:	bf00      	nop
 8008848:	371c      	adds	r7, #28
 800884a:	46bd      	mov	sp, r7
 800884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008850:	4770      	bx	lr

08008852 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008852:	b580      	push	{r7, lr}
 8008854:	b082      	sub	sp, #8
 8008856:	af00      	add	r7, sp, #0
 8008858:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d101      	bne.n	8008864 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008860:	2301      	movs	r3, #1
 8008862:	e03f      	b.n	80088e4 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800886a:	b2db      	uxtb	r3, r3
 800886c:	2b00      	cmp	r3, #0
 800886e:	d106      	bne.n	800887e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2200      	movs	r2, #0
 8008874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f7fb fa6b 	bl	8003d54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2224      	movs	r2, #36	; 0x24
 8008882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	68da      	ldr	r2, [r3, #12]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008894:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f000 fd92 	bl	80093c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	691a      	ldr	r2, [r3, #16]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80088aa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	695a      	ldr	r2, [r3, #20]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80088ba:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	68da      	ldr	r2, [r3, #12]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80088ca:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2200      	movs	r2, #0
 80088d0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2220      	movs	r2, #32
 80088d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2220      	movs	r2, #32
 80088de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80088e2:	2300      	movs	r3, #0
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3708      	adds	r7, #8
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}

080088ec <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b082      	sub	sp, #8
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d101      	bne.n	80088fe <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80088fa:	2301      	movs	r3, #1
 80088fc:	e047      	b.n	800898e <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008904:	b2db      	uxtb	r3, r3
 8008906:	2b00      	cmp	r3, #0
 8008908:	d106      	bne.n	8008918 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2200      	movs	r2, #0
 800890e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f7fb fa1e 	bl	8003d54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2224      	movs	r2, #36	; 0x24
 800891c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	68da      	ldr	r2, [r3, #12]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800892e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f000 fd45 	bl	80093c0 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	691a      	ldr	r2, [r3, #16]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008944:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	695a      	ldr	r2, [r3, #20]
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8008954:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	695a      	ldr	r2, [r3, #20]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f042 0208 	orr.w	r2, r2, #8
 8008964:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	68da      	ldr	r2, [r3, #12]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008974:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2200      	movs	r2, #0
 800897a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2220      	movs	r2, #32
 8008980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2220      	movs	r2, #32
 8008988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800898c:	2300      	movs	r3, #0
}
 800898e:	4618      	mov	r0, r3
 8008990:	3708      	adds	r7, #8
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
	...

08008998 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b086      	sub	sp, #24
 800899c:	af00      	add	r7, sp, #0
 800899e:	60f8      	str	r0, [r7, #12]
 80089a0:	60b9      	str	r1, [r7, #8]
 80089a2:	4613      	mov	r3, r2
 80089a4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	2b20      	cmp	r3, #32
 80089b0:	d153      	bne.n	8008a5a <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d002      	beq.n	80089be <HAL_UART_Transmit_DMA+0x26>
 80089b8:	88fb      	ldrh	r3, [r7, #6]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d101      	bne.n	80089c2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80089be:	2301      	movs	r3, #1
 80089c0:	e04c      	b.n	8008a5c <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089c8:	2b01      	cmp	r3, #1
 80089ca:	d101      	bne.n	80089d0 <HAL_UART_Transmit_DMA+0x38>
 80089cc:	2302      	movs	r3, #2
 80089ce:	e045      	b.n	8008a5c <HAL_UART_Transmit_DMA+0xc4>
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2201      	movs	r2, #1
 80089d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80089d8:	68ba      	ldr	r2, [r7, #8]
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	88fa      	ldrh	r2, [r7, #6]
 80089e2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	88fa      	ldrh	r2, [r7, #6]
 80089e8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2200      	movs	r2, #0
 80089ee:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	2221      	movs	r2, #33	; 0x21
 80089f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089fc:	4a19      	ldr	r2, [pc, #100]	; (8008a64 <HAL_UART_Transmit_DMA+0xcc>)
 80089fe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a04:	4a18      	ldr	r2, [pc, #96]	; (8008a68 <HAL_UART_Transmit_DMA+0xd0>)
 8008a06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a0c:	4a17      	ldr	r2, [pc, #92]	; (8008a6c <HAL_UART_Transmit_DMA+0xd4>)
 8008a0e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a14:	2200      	movs	r2, #0
 8008a16:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8008a18:	f107 0308 	add.w	r3, r7, #8
 8008a1c:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	6819      	ldr	r1, [r3, #0]
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	3304      	adds	r3, #4
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	88fb      	ldrh	r3, [r7, #6]
 8008a30:	f7fc fc66 	bl	8005300 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008a3c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2200      	movs	r2, #0
 8008a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	695a      	ldr	r2, [r3, #20]
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008a54:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8008a56:	2300      	movs	r3, #0
 8008a58:	e000      	b.n	8008a5c <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8008a5a:	2302      	movs	r3, #2
  }
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3718      	adds	r7, #24
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}
 8008a64:	08008e7d 	.word	0x08008e7d
 8008a68:	08008ecf 	.word	0x08008ecf
 8008a6c:	08008fb7 	.word	0x08008fb7

08008a70 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b084      	sub	sp, #16
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	60f8      	str	r0, [r7, #12]
 8008a78:	60b9      	str	r1, [r7, #8]
 8008a7a:	4613      	mov	r3, r2
 8008a7c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008a84:	b2db      	uxtb	r3, r3
 8008a86:	2b20      	cmp	r3, #32
 8008a88:	d11d      	bne.n	8008ac6 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d002      	beq.n	8008a96 <HAL_UART_Receive_DMA+0x26>
 8008a90:	88fb      	ldrh	r3, [r7, #6]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d101      	bne.n	8008a9a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008a96:	2301      	movs	r3, #1
 8008a98:	e016      	b.n	8008ac8 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d101      	bne.n	8008aa8 <HAL_UART_Receive_DMA+0x38>
 8008aa4:	2302      	movs	r3, #2
 8008aa6:	e00f      	b.n	8008ac8 <HAL_UART_Receive_DMA+0x58>
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	2201      	movs	r2, #1
 8008aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8008ab6:	88fb      	ldrh	r3, [r7, #6]
 8008ab8:	461a      	mov	r2, r3
 8008aba:	68b9      	ldr	r1, [r7, #8]
 8008abc:	68f8      	ldr	r0, [r7, #12]
 8008abe:	f000 fac5 	bl	800904c <UART_Start_Receive_DMA>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	e000      	b.n	8008ac8 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008ac6:	2302      	movs	r3, #2
  }
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3710      	adds	r7, #16
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b08a      	sub	sp, #40	; 0x28
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	68db      	ldr	r3, [r3, #12]
 8008ae6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	695b      	ldr	r3, [r3, #20]
 8008aee:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8008af0:	2300      	movs	r3, #0
 8008af2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8008af4:	2300      	movs	r3, #0
 8008af6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008afa:	f003 030f 	and.w	r3, r3, #15
 8008afe:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8008b00:	69bb      	ldr	r3, [r7, #24]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d10d      	bne.n	8008b22 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b08:	f003 0320 	and.w	r3, r3, #32
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d008      	beq.n	8008b22 <HAL_UART_IRQHandler+0x52>
 8008b10:	6a3b      	ldr	r3, [r7, #32]
 8008b12:	f003 0320 	and.w	r3, r3, #32
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d003      	beq.n	8008b22 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 fbb9 	bl	8009292 <UART_Receive_IT>
      return;
 8008b20:	e17c      	b.n	8008e1c <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008b22:	69bb      	ldr	r3, [r7, #24]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	f000 80b1 	beq.w	8008c8c <HAL_UART_IRQHandler+0x1bc>
 8008b2a:	69fb      	ldr	r3, [r7, #28]
 8008b2c:	f003 0301 	and.w	r3, r3, #1
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d105      	bne.n	8008b40 <HAL_UART_IRQHandler+0x70>
 8008b34:	6a3b      	ldr	r3, [r7, #32]
 8008b36:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	f000 80a6 	beq.w	8008c8c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b42:	f003 0301 	and.w	r3, r3, #1
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d00a      	beq.n	8008b60 <HAL_UART_IRQHandler+0x90>
 8008b4a:	6a3b      	ldr	r3, [r7, #32]
 8008b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d005      	beq.n	8008b60 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b58:	f043 0201 	orr.w	r2, r3, #1
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b62:	f003 0304 	and.w	r3, r3, #4
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d00a      	beq.n	8008b80 <HAL_UART_IRQHandler+0xb0>
 8008b6a:	69fb      	ldr	r3, [r7, #28]
 8008b6c:	f003 0301 	and.w	r3, r3, #1
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d005      	beq.n	8008b80 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b78:	f043 0202 	orr.w	r2, r3, #2
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b82:	f003 0302 	and.w	r3, r3, #2
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d00a      	beq.n	8008ba0 <HAL_UART_IRQHandler+0xd0>
 8008b8a:	69fb      	ldr	r3, [r7, #28]
 8008b8c:	f003 0301 	and.w	r3, r3, #1
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d005      	beq.n	8008ba0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b98:	f043 0204 	orr.w	r2, r3, #4
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba2:	f003 0308 	and.w	r3, r3, #8
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d00f      	beq.n	8008bca <HAL_UART_IRQHandler+0xfa>
 8008baa:	6a3b      	ldr	r3, [r7, #32]
 8008bac:	f003 0320 	and.w	r3, r3, #32
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d104      	bne.n	8008bbe <HAL_UART_IRQHandler+0xee>
 8008bb4:	69fb      	ldr	r3, [r7, #28]
 8008bb6:	f003 0301 	and.w	r3, r3, #1
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d005      	beq.n	8008bca <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bc2:	f043 0208 	orr.w	r2, r3, #8
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	f000 811f 	beq.w	8008e12 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd6:	f003 0320 	and.w	r3, r3, #32
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d007      	beq.n	8008bee <HAL_UART_IRQHandler+0x11e>
 8008bde:	6a3b      	ldr	r3, [r7, #32]
 8008be0:	f003 0320 	and.w	r3, r3, #32
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d002      	beq.n	8008bee <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f000 fb52 	bl	8009292 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	695b      	ldr	r3, [r3, #20]
 8008bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bf8:	2b40      	cmp	r3, #64	; 0x40
 8008bfa:	bf0c      	ite	eq
 8008bfc:	2301      	moveq	r3, #1
 8008bfe:	2300      	movne	r3, #0
 8008c00:	b2db      	uxtb	r3, r3
 8008c02:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c08:	f003 0308 	and.w	r3, r3, #8
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d102      	bne.n	8008c16 <HAL_UART_IRQHandler+0x146>
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d031      	beq.n	8008c7a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f000 fa92 	bl	8009140 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	695b      	ldr	r3, [r3, #20]
 8008c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c26:	2b40      	cmp	r3, #64	; 0x40
 8008c28:	d123      	bne.n	8008c72 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	695a      	ldr	r2, [r3, #20]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c38:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d013      	beq.n	8008c6a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c46:	4a77      	ldr	r2, [pc, #476]	; (8008e24 <HAL_UART_IRQHandler+0x354>)
 8008c48:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f7fc fc1e 	bl	8005490 <HAL_DMA_Abort_IT>
 8008c54:	4603      	mov	r3, r0
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d016      	beq.n	8008c88 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c60:	687a      	ldr	r2, [r7, #4]
 8008c62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008c64:	4610      	mov	r0, r2
 8008c66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c68:	e00e      	b.n	8008c88 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f7f9 fdf4 	bl	8002858 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c70:	e00a      	b.n	8008c88 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f7f9 fdf0 	bl	8002858 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c78:	e006      	b.n	8008c88 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f7f9 fdec 	bl	8002858 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2200      	movs	r2, #0
 8008c84:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008c86:	e0c4      	b.n	8008e12 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c88:	bf00      	nop
    return;
 8008c8a:	e0c2      	b.n	8008e12 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c90:	2b01      	cmp	r3, #1
 8008c92:	f040 80a2 	bne.w	8008dda <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8008c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c98:	f003 0310 	and.w	r3, r3, #16
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	f000 809c 	beq.w	8008dda <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8008ca2:	6a3b      	ldr	r3, [r7, #32]
 8008ca4:	f003 0310 	and.w	r3, r3, #16
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	f000 8096 	beq.w	8008dda <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008cae:	2300      	movs	r3, #0
 8008cb0:	60fb      	str	r3, [r7, #12]
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	60fb      	str	r3, [r7, #12]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	685b      	ldr	r3, [r3, #4]
 8008cc0:	60fb      	str	r3, [r7, #12]
 8008cc2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	695b      	ldr	r3, [r3, #20]
 8008cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cce:	2b40      	cmp	r3, #64	; 0x40
 8008cd0:	d14f      	bne.n	8008d72 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8008cdc:	8a3b      	ldrh	r3, [r7, #16]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	f000 8099 	beq.w	8008e16 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008ce8:	8a3a      	ldrh	r2, [r7, #16]
 8008cea:	429a      	cmp	r2, r3
 8008cec:	f080 8093 	bcs.w	8008e16 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	8a3a      	ldrh	r2, [r7, #16]
 8008cf4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cfa:	69db      	ldr	r3, [r3, #28]
 8008cfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d00:	d02b      	beq.n	8008d5a <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	68da      	ldr	r2, [r3, #12]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008d10:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	695a      	ldr	r2, [r3, #20]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f022 0201 	bic.w	r2, r2, #1
 8008d20:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	695a      	ldr	r2, [r3, #20]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d30:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2220      	movs	r2, #32
 8008d36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	68da      	ldr	r2, [r3, #12]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f022 0210 	bic.w	r2, r2, #16
 8008d4e:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d54:	4618      	mov	r0, r3
 8008d56:	f7fc fb2b 	bl	80053b0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	1ad3      	subs	r3, r2, r3
 8008d66:	b29b      	uxth	r3, r3
 8008d68:	4619      	mov	r1, r3
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 f87a 	bl	8008e64 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008d70:	e051      	b.n	8008e16 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008d7a:	b29b      	uxth	r3, r3
 8008d7c:	1ad3      	subs	r3, r2, r3
 8008d7e:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008d84:	b29b      	uxth	r3, r3
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d047      	beq.n	8008e1a <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8008d8a:	8a7b      	ldrh	r3, [r7, #18]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d044      	beq.n	8008e1a <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	68da      	ldr	r2, [r3, #12]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008d9e:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	695a      	ldr	r2, [r3, #20]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f022 0201 	bic.w	r2, r2, #1
 8008dae:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2220      	movs	r2, #32
 8008db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	68da      	ldr	r2, [r3, #12]
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f022 0210 	bic.w	r2, r2, #16
 8008dcc:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008dce:	8a7b      	ldrh	r3, [r7, #18]
 8008dd0:	4619      	mov	r1, r3
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f000 f846 	bl	8008e64 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008dd8:	e01f      	b.n	8008e1a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d008      	beq.n	8008df6 <HAL_UART_IRQHandler+0x326>
 8008de4:	6a3b      	ldr	r3, [r7, #32]
 8008de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d003      	beq.n	8008df6 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f000 f9e7 	bl	80091c2 <UART_Transmit_IT>
    return;
 8008df4:	e012      	b.n	8008e1c <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d00d      	beq.n	8008e1c <HAL_UART_IRQHandler+0x34c>
 8008e00:	6a3b      	ldr	r3, [r7, #32]
 8008e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d008      	beq.n	8008e1c <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f000 fa29 	bl	8009262 <UART_EndTransmit_IT>
    return;
 8008e10:	e004      	b.n	8008e1c <HAL_UART_IRQHandler+0x34c>
    return;
 8008e12:	bf00      	nop
 8008e14:	e002      	b.n	8008e1c <HAL_UART_IRQHandler+0x34c>
      return;
 8008e16:	bf00      	nop
 8008e18:	e000      	b.n	8008e1c <HAL_UART_IRQHandler+0x34c>
      return;
 8008e1a:	bf00      	nop
  }
}
 8008e1c:	3728      	adds	r7, #40	; 0x28
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
 8008e22:	bf00      	nop
 8008e24:	0800919b 	.word	0x0800919b

08008e28 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b083      	sub	sp, #12
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008e30:	bf00      	nop
 8008e32:	370c      	adds	r7, #12
 8008e34:	46bd      	mov	sp, r7
 8008e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3a:	4770      	bx	lr

08008e3c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b083      	sub	sp, #12
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008e44:	bf00      	nop
 8008e46:	370c      	adds	r7, #12
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr

08008e50 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b083      	sub	sp, #12
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008e58:	bf00      	nop
 8008e5a:	370c      	adds	r7, #12
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr

08008e64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008e64:	b480      	push	{r7}
 8008e66:	b083      	sub	sp, #12
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	460b      	mov	r3, r1
 8008e6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008e70:	bf00      	nop
 8008e72:	370c      	adds	r7, #12
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr

08008e7c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b084      	sub	sp, #16
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e88:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d113      	bne.n	8008ec0 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	695a      	ldr	r2, [r3, #20]
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008eac:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	68da      	ldr	r2, [r3, #12]
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ebc:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008ebe:	e002      	b.n	8008ec6 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8008ec0:	68f8      	ldr	r0, [r7, #12]
 8008ec2:	f7ff ffb1 	bl	8008e28 <HAL_UART_TxCpltCallback>
}
 8008ec6:	bf00      	nop
 8008ec8:	3710      	adds	r7, #16
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}

08008ece <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008ece:	b580      	push	{r7, lr}
 8008ed0:	b084      	sub	sp, #16
 8008ed2:	af00      	add	r7, sp, #0
 8008ed4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eda:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008edc:	68f8      	ldr	r0, [r7, #12]
 8008ede:	f7ff ffad 	bl	8008e3c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ee2:	bf00      	nop
 8008ee4:	3710      	adds	r7, #16
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}

08008eea <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008eea:	b580      	push	{r7, lr}
 8008eec:	b084      	sub	sp, #16
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ef6:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d12a      	bne.n	8008f5c <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	68da      	ldr	r2, [r3, #12]
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008f1a:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	695a      	ldr	r2, [r3, #20]
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f022 0201 	bic.w	r2, r2, #1
 8008f2a:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	695a      	ldr	r2, [r3, #20]
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f3a:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2220      	movs	r2, #32
 8008f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d107      	bne.n	8008f5c <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	68da      	ldr	r2, [r3, #12]
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f022 0210 	bic.w	r2, r2, #16
 8008f5a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	d106      	bne.n	8008f72 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008f68:	4619      	mov	r1, r3
 8008f6a:	68f8      	ldr	r0, [r7, #12]
 8008f6c:	f7ff ff7a 	bl	8008e64 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008f70:	e002      	b.n	8008f78 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8008f72:	68f8      	ldr	r0, [r7, #12]
 8008f74:	f7f9 fc24 	bl	80027c0 <HAL_UART_RxCpltCallback>
}
 8008f78:	bf00      	nop
 8008f7a:	3710      	adds	r7, #16
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}

08008f80 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b084      	sub	sp, #16
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f8c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d108      	bne.n	8008fa8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008f9a:	085b      	lsrs	r3, r3, #1
 8008f9c:	b29b      	uxth	r3, r3
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	68f8      	ldr	r0, [r7, #12]
 8008fa2:	f7ff ff5f 	bl	8008e64 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008fa6:	e002      	b.n	8008fae <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008fa8:	68f8      	ldr	r0, [r7, #12]
 8008faa:	f7ff ff51 	bl	8008e50 <HAL_UART_RxHalfCpltCallback>
}
 8008fae:	bf00      	nop
 8008fb0:	3710      	adds	r7, #16
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}

08008fb6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008fb6:	b580      	push	{r7, lr}
 8008fb8:	b084      	sub	sp, #16
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fc6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	695b      	ldr	r3, [r3, #20]
 8008fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fd2:	2b80      	cmp	r3, #128	; 0x80
 8008fd4:	bf0c      	ite	eq
 8008fd6:	2301      	moveq	r3, #1
 8008fd8:	2300      	movne	r3, #0
 8008fda:	b2db      	uxtb	r3, r3
 8008fdc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fe4:	b2db      	uxtb	r3, r3
 8008fe6:	2b21      	cmp	r3, #33	; 0x21
 8008fe8:	d108      	bne.n	8008ffc <UART_DMAError+0x46>
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d005      	beq.n	8008ffc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008ff6:	68b8      	ldr	r0, [r7, #8]
 8008ff8:	f000 f88c 	bl	8009114 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	695b      	ldr	r3, [r3, #20]
 8009002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009006:	2b40      	cmp	r3, #64	; 0x40
 8009008:	bf0c      	ite	eq
 800900a:	2301      	moveq	r3, #1
 800900c:	2300      	movne	r3, #0
 800900e:	b2db      	uxtb	r3, r3
 8009010:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009018:	b2db      	uxtb	r3, r3
 800901a:	2b22      	cmp	r3, #34	; 0x22
 800901c:	d108      	bne.n	8009030 <UART_DMAError+0x7a>
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d005      	beq.n	8009030 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	2200      	movs	r2, #0
 8009028:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800902a:	68b8      	ldr	r0, [r7, #8]
 800902c:	f000 f888 	bl	8009140 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009034:	f043 0210 	orr.w	r2, r3, #16
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800903c:	68b8      	ldr	r0, [r7, #8]
 800903e:	f7f9 fc0b 	bl	8002858 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009042:	bf00      	nop
 8009044:	3710      	adds	r7, #16
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}
	...

0800904c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b086      	sub	sp, #24
 8009050:	af00      	add	r7, sp, #0
 8009052:	60f8      	str	r0, [r7, #12]
 8009054:	60b9      	str	r1, [r7, #8]
 8009056:	4613      	mov	r3, r2
 8009058:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800905a:	68ba      	ldr	r2, [r7, #8]
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	88fa      	ldrh	r2, [r7, #6]
 8009064:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2200      	movs	r2, #0
 800906a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	2222      	movs	r2, #34	; 0x22
 8009070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009078:	4a23      	ldr	r2, [pc, #140]	; (8009108 <UART_Start_Receive_DMA+0xbc>)
 800907a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009080:	4a22      	ldr	r2, [pc, #136]	; (800910c <UART_Start_Receive_DMA+0xc0>)
 8009082:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009088:	4a21      	ldr	r2, [pc, #132]	; (8009110 <UART_Start_Receive_DMA+0xc4>)
 800908a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009090:	2200      	movs	r2, #0
 8009092:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009094:	f107 0308 	add.w	r3, r7, #8
 8009098:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	3304      	adds	r3, #4
 80090a4:	4619      	mov	r1, r3
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	681a      	ldr	r2, [r3, #0]
 80090aa:	88fb      	ldrh	r3, [r7, #6]
 80090ac:	f7fc f928 	bl	8005300 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80090b0:	2300      	movs	r3, #0
 80090b2:	613b      	str	r3, [r7, #16]
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	613b      	str	r3, [r7, #16]
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	685b      	ldr	r3, [r3, #4]
 80090c2:	613b      	str	r3, [r7, #16]
 80090c4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	2200      	movs	r2, #0
 80090ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	68da      	ldr	r2, [r3, #12]
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80090dc:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	695a      	ldr	r2, [r3, #20]
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f042 0201 	orr.w	r2, r2, #1
 80090ec:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	695a      	ldr	r2, [r3, #20]
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80090fc:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80090fe:	2300      	movs	r3, #0
}
 8009100:	4618      	mov	r0, r3
 8009102:	3718      	adds	r7, #24
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}
 8009108:	08008eeb 	.word	0x08008eeb
 800910c:	08008f81 	.word	0x08008f81
 8009110:	08008fb7 	.word	0x08008fb7

08009114 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009114:	b480      	push	{r7}
 8009116:	b083      	sub	sp, #12
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	68da      	ldr	r2, [r3, #12]
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800912a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2220      	movs	r2, #32
 8009130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8009134:	bf00      	nop
 8009136:	370c      	adds	r7, #12
 8009138:	46bd      	mov	sp, r7
 800913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913e:	4770      	bx	lr

08009140 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009140:	b480      	push	{r7}
 8009142:	b083      	sub	sp, #12
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	68da      	ldr	r2, [r3, #12]
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009156:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	695a      	ldr	r2, [r3, #20]
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f022 0201 	bic.w	r2, r2, #1
 8009166:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800916c:	2b01      	cmp	r3, #1
 800916e:	d107      	bne.n	8009180 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	68da      	ldr	r2, [r3, #12]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f022 0210 	bic.w	r2, r2, #16
 800917e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2220      	movs	r2, #32
 8009184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2200      	movs	r2, #0
 800918c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800918e:	bf00      	nop
 8009190:	370c      	adds	r7, #12
 8009192:	46bd      	mov	sp, r7
 8009194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009198:	4770      	bx	lr

0800919a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800919a:	b580      	push	{r7, lr}
 800919c:	b084      	sub	sp, #16
 800919e:	af00      	add	r7, sp, #0
 80091a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	2200      	movs	r2, #0
 80091ac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	2200      	movs	r2, #0
 80091b2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80091b4:	68f8      	ldr	r0, [r7, #12]
 80091b6:	f7f9 fb4f 	bl	8002858 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091ba:	bf00      	nop
 80091bc:	3710      	adds	r7, #16
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}

080091c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80091c2:	b480      	push	{r7}
 80091c4:	b085      	sub	sp, #20
 80091c6:	af00      	add	r7, sp, #0
 80091c8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091d0:	b2db      	uxtb	r3, r3
 80091d2:	2b21      	cmp	r3, #33	; 0x21
 80091d4:	d13e      	bne.n	8009254 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	689b      	ldr	r3, [r3, #8]
 80091da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091de:	d114      	bne.n	800920a <UART_Transmit_IT+0x48>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	691b      	ldr	r3, [r3, #16]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d110      	bne.n	800920a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6a1b      	ldr	r3, [r3, #32]
 80091ec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	881b      	ldrh	r3, [r3, #0]
 80091f2:	461a      	mov	r2, r3
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80091fc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6a1b      	ldr	r3, [r3, #32]
 8009202:	1c9a      	adds	r2, r3, #2
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	621a      	str	r2, [r3, #32]
 8009208:	e008      	b.n	800921c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6a1b      	ldr	r3, [r3, #32]
 800920e:	1c59      	adds	r1, r3, #1
 8009210:	687a      	ldr	r2, [r7, #4]
 8009212:	6211      	str	r1, [r2, #32]
 8009214:	781a      	ldrb	r2, [r3, #0]
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009220:	b29b      	uxth	r3, r3
 8009222:	3b01      	subs	r3, #1
 8009224:	b29b      	uxth	r3, r3
 8009226:	687a      	ldr	r2, [r7, #4]
 8009228:	4619      	mov	r1, r3
 800922a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800922c:	2b00      	cmp	r3, #0
 800922e:	d10f      	bne.n	8009250 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	68da      	ldr	r2, [r3, #12]
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800923e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	68da      	ldr	r2, [r3, #12]
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800924e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009250:	2300      	movs	r3, #0
 8009252:	e000      	b.n	8009256 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009254:	2302      	movs	r3, #2
  }
}
 8009256:	4618      	mov	r0, r3
 8009258:	3714      	adds	r7, #20
 800925a:	46bd      	mov	sp, r7
 800925c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009260:	4770      	bx	lr

08009262 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009262:	b580      	push	{r7, lr}
 8009264:	b082      	sub	sp, #8
 8009266:	af00      	add	r7, sp, #0
 8009268:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	68da      	ldr	r2, [r3, #12]
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009278:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2220      	movs	r2, #32
 800927e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f7ff fdd0 	bl	8008e28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009288:	2300      	movs	r3, #0
}
 800928a:	4618      	mov	r0, r3
 800928c:	3708      	adds	r7, #8
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}

08009292 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009292:	b580      	push	{r7, lr}
 8009294:	b084      	sub	sp, #16
 8009296:	af00      	add	r7, sp, #0
 8009298:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80092a0:	b2db      	uxtb	r3, r3
 80092a2:	2b22      	cmp	r3, #34	; 0x22
 80092a4:	f040 8087 	bne.w	80093b6 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	689b      	ldr	r3, [r3, #8]
 80092ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092b0:	d117      	bne.n	80092e2 <UART_Receive_IT+0x50>
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	691b      	ldr	r3, [r3, #16]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d113      	bne.n	80092e2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80092ba:	2300      	movs	r3, #0
 80092bc:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092c2:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	685b      	ldr	r3, [r3, #4]
 80092ca:	b29b      	uxth	r3, r3
 80092cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092d0:	b29a      	uxth	r2, r3
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092da:	1c9a      	adds	r2, r3, #2
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	629a      	str	r2, [r3, #40]	; 0x28
 80092e0:	e026      	b.n	8009330 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092e6:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80092e8:	2300      	movs	r3, #0
 80092ea:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	689b      	ldr	r3, [r3, #8]
 80092f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092f4:	d007      	beq.n	8009306 <UART_Receive_IT+0x74>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	689b      	ldr	r3, [r3, #8]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d10a      	bne.n	8009314 <UART_Receive_IT+0x82>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	691b      	ldr	r3, [r3, #16]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d106      	bne.n	8009314 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	685b      	ldr	r3, [r3, #4]
 800930c:	b2da      	uxtb	r2, r3
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	701a      	strb	r2, [r3, #0]
 8009312:	e008      	b.n	8009326 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	685b      	ldr	r3, [r3, #4]
 800931a:	b2db      	uxtb	r3, r3
 800931c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009320:	b2da      	uxtb	r2, r3
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800932a:	1c5a      	adds	r2, r3, #1
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009334:	b29b      	uxth	r3, r3
 8009336:	3b01      	subs	r3, #1
 8009338:	b29b      	uxth	r3, r3
 800933a:	687a      	ldr	r2, [r7, #4]
 800933c:	4619      	mov	r1, r3
 800933e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009340:	2b00      	cmp	r3, #0
 8009342:	d136      	bne.n	80093b2 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	68da      	ldr	r2, [r3, #12]
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f022 0220 	bic.w	r2, r2, #32
 8009352:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	68da      	ldr	r2, [r3, #12]
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009362:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	695a      	ldr	r2, [r3, #20]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f022 0201 	bic.w	r2, r2, #1
 8009372:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2220      	movs	r2, #32
 8009378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009380:	2b01      	cmp	r3, #1
 8009382:	d10e      	bne.n	80093a2 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	68da      	ldr	r2, [r3, #12]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f022 0210 	bic.w	r2, r2, #16
 8009392:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009398:	4619      	mov	r1, r3
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f7ff fd62 	bl	8008e64 <HAL_UARTEx_RxEventCallback>
 80093a0:	e002      	b.n	80093a8 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f7f9 fa0c 	bl	80027c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2200      	movs	r2, #0
 80093ac:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 80093ae:	2300      	movs	r3, #0
 80093b0:	e002      	b.n	80093b8 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 80093b2:	2300      	movs	r3, #0
 80093b4:	e000      	b.n	80093b8 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 80093b6:	2302      	movs	r3, #2
  }
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	3710      	adds	r7, #16
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}

080093c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80093c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093c4:	b09f      	sub	sp, #124	; 0x7c
 80093c6:	af00      	add	r7, sp, #0
 80093c8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80093ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	691b      	ldr	r3, [r3, #16]
 80093d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80093d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093d6:	68d9      	ldr	r1, [r3, #12]
 80093d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093da:	681a      	ldr	r2, [r3, #0]
 80093dc:	ea40 0301 	orr.w	r3, r0, r1
 80093e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80093e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093e4:	689a      	ldr	r2, [r3, #8]
 80093e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093e8:	691b      	ldr	r3, [r3, #16]
 80093ea:	431a      	orrs	r2, r3
 80093ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093ee:	695b      	ldr	r3, [r3, #20]
 80093f0:	431a      	orrs	r2, r3
 80093f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093f4:	69db      	ldr	r3, [r3, #28]
 80093f6:	4313      	orrs	r3, r2
 80093f8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80093fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	68db      	ldr	r3, [r3, #12]
 8009400:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009404:	f021 010c 	bic.w	r1, r1, #12
 8009408:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800940a:	681a      	ldr	r2, [r3, #0]
 800940c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800940e:	430b      	orrs	r3, r1
 8009410:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009412:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	695b      	ldr	r3, [r3, #20]
 8009418:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800941c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800941e:	6999      	ldr	r1, [r3, #24]
 8009420:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009422:	681a      	ldr	r2, [r3, #0]
 8009424:	ea40 0301 	orr.w	r3, r0, r1
 8009428:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800942a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800942c:	681a      	ldr	r2, [r3, #0]
 800942e:	4bc5      	ldr	r3, [pc, #788]	; (8009744 <UART_SetConfig+0x384>)
 8009430:	429a      	cmp	r2, r3
 8009432:	d004      	beq.n	800943e <UART_SetConfig+0x7e>
 8009434:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009436:	681a      	ldr	r2, [r3, #0]
 8009438:	4bc3      	ldr	r3, [pc, #780]	; (8009748 <UART_SetConfig+0x388>)
 800943a:	429a      	cmp	r2, r3
 800943c:	d103      	bne.n	8009446 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800943e:	f7fd fcc9 	bl	8006dd4 <HAL_RCC_GetPCLK2Freq>
 8009442:	6778      	str	r0, [r7, #116]	; 0x74
 8009444:	e002      	b.n	800944c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009446:	f7fd fcb1 	bl	8006dac <HAL_RCC_GetPCLK1Freq>
 800944a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800944c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800944e:	69db      	ldr	r3, [r3, #28]
 8009450:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009454:	f040 80b6 	bne.w	80095c4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009458:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800945a:	461c      	mov	r4, r3
 800945c:	f04f 0500 	mov.w	r5, #0
 8009460:	4622      	mov	r2, r4
 8009462:	462b      	mov	r3, r5
 8009464:	1891      	adds	r1, r2, r2
 8009466:	6439      	str	r1, [r7, #64]	; 0x40
 8009468:	415b      	adcs	r3, r3
 800946a:	647b      	str	r3, [r7, #68]	; 0x44
 800946c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009470:	1912      	adds	r2, r2, r4
 8009472:	eb45 0303 	adc.w	r3, r5, r3
 8009476:	f04f 0000 	mov.w	r0, #0
 800947a:	f04f 0100 	mov.w	r1, #0
 800947e:	00d9      	lsls	r1, r3, #3
 8009480:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009484:	00d0      	lsls	r0, r2, #3
 8009486:	4602      	mov	r2, r0
 8009488:	460b      	mov	r3, r1
 800948a:	1911      	adds	r1, r2, r4
 800948c:	6639      	str	r1, [r7, #96]	; 0x60
 800948e:	416b      	adcs	r3, r5
 8009490:	667b      	str	r3, [r7, #100]	; 0x64
 8009492:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	461a      	mov	r2, r3
 8009498:	f04f 0300 	mov.w	r3, #0
 800949c:	1891      	adds	r1, r2, r2
 800949e:	63b9      	str	r1, [r7, #56]	; 0x38
 80094a0:	415b      	adcs	r3, r3
 80094a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80094a8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80094ac:	f7f6 feb0 	bl	8000210 <__aeabi_uldivmod>
 80094b0:	4602      	mov	r2, r0
 80094b2:	460b      	mov	r3, r1
 80094b4:	4ba5      	ldr	r3, [pc, #660]	; (800974c <UART_SetConfig+0x38c>)
 80094b6:	fba3 2302 	umull	r2, r3, r3, r2
 80094ba:	095b      	lsrs	r3, r3, #5
 80094bc:	011e      	lsls	r6, r3, #4
 80094be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094c0:	461c      	mov	r4, r3
 80094c2:	f04f 0500 	mov.w	r5, #0
 80094c6:	4622      	mov	r2, r4
 80094c8:	462b      	mov	r3, r5
 80094ca:	1891      	adds	r1, r2, r2
 80094cc:	6339      	str	r1, [r7, #48]	; 0x30
 80094ce:	415b      	adcs	r3, r3
 80094d0:	637b      	str	r3, [r7, #52]	; 0x34
 80094d2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80094d6:	1912      	adds	r2, r2, r4
 80094d8:	eb45 0303 	adc.w	r3, r5, r3
 80094dc:	f04f 0000 	mov.w	r0, #0
 80094e0:	f04f 0100 	mov.w	r1, #0
 80094e4:	00d9      	lsls	r1, r3, #3
 80094e6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80094ea:	00d0      	lsls	r0, r2, #3
 80094ec:	4602      	mov	r2, r0
 80094ee:	460b      	mov	r3, r1
 80094f0:	1911      	adds	r1, r2, r4
 80094f2:	65b9      	str	r1, [r7, #88]	; 0x58
 80094f4:	416b      	adcs	r3, r5
 80094f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80094f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094fa:	685b      	ldr	r3, [r3, #4]
 80094fc:	461a      	mov	r2, r3
 80094fe:	f04f 0300 	mov.w	r3, #0
 8009502:	1891      	adds	r1, r2, r2
 8009504:	62b9      	str	r1, [r7, #40]	; 0x28
 8009506:	415b      	adcs	r3, r3
 8009508:	62fb      	str	r3, [r7, #44]	; 0x2c
 800950a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800950e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009512:	f7f6 fe7d 	bl	8000210 <__aeabi_uldivmod>
 8009516:	4602      	mov	r2, r0
 8009518:	460b      	mov	r3, r1
 800951a:	4b8c      	ldr	r3, [pc, #560]	; (800974c <UART_SetConfig+0x38c>)
 800951c:	fba3 1302 	umull	r1, r3, r3, r2
 8009520:	095b      	lsrs	r3, r3, #5
 8009522:	2164      	movs	r1, #100	; 0x64
 8009524:	fb01 f303 	mul.w	r3, r1, r3
 8009528:	1ad3      	subs	r3, r2, r3
 800952a:	00db      	lsls	r3, r3, #3
 800952c:	3332      	adds	r3, #50	; 0x32
 800952e:	4a87      	ldr	r2, [pc, #540]	; (800974c <UART_SetConfig+0x38c>)
 8009530:	fba2 2303 	umull	r2, r3, r2, r3
 8009534:	095b      	lsrs	r3, r3, #5
 8009536:	005b      	lsls	r3, r3, #1
 8009538:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800953c:	441e      	add	r6, r3
 800953e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009540:	4618      	mov	r0, r3
 8009542:	f04f 0100 	mov.w	r1, #0
 8009546:	4602      	mov	r2, r0
 8009548:	460b      	mov	r3, r1
 800954a:	1894      	adds	r4, r2, r2
 800954c:	623c      	str	r4, [r7, #32]
 800954e:	415b      	adcs	r3, r3
 8009550:	627b      	str	r3, [r7, #36]	; 0x24
 8009552:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009556:	1812      	adds	r2, r2, r0
 8009558:	eb41 0303 	adc.w	r3, r1, r3
 800955c:	f04f 0400 	mov.w	r4, #0
 8009560:	f04f 0500 	mov.w	r5, #0
 8009564:	00dd      	lsls	r5, r3, #3
 8009566:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800956a:	00d4      	lsls	r4, r2, #3
 800956c:	4622      	mov	r2, r4
 800956e:	462b      	mov	r3, r5
 8009570:	1814      	adds	r4, r2, r0
 8009572:	653c      	str	r4, [r7, #80]	; 0x50
 8009574:	414b      	adcs	r3, r1
 8009576:	657b      	str	r3, [r7, #84]	; 0x54
 8009578:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800957a:	685b      	ldr	r3, [r3, #4]
 800957c:	461a      	mov	r2, r3
 800957e:	f04f 0300 	mov.w	r3, #0
 8009582:	1891      	adds	r1, r2, r2
 8009584:	61b9      	str	r1, [r7, #24]
 8009586:	415b      	adcs	r3, r3
 8009588:	61fb      	str	r3, [r7, #28]
 800958a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800958e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009592:	f7f6 fe3d 	bl	8000210 <__aeabi_uldivmod>
 8009596:	4602      	mov	r2, r0
 8009598:	460b      	mov	r3, r1
 800959a:	4b6c      	ldr	r3, [pc, #432]	; (800974c <UART_SetConfig+0x38c>)
 800959c:	fba3 1302 	umull	r1, r3, r3, r2
 80095a0:	095b      	lsrs	r3, r3, #5
 80095a2:	2164      	movs	r1, #100	; 0x64
 80095a4:	fb01 f303 	mul.w	r3, r1, r3
 80095a8:	1ad3      	subs	r3, r2, r3
 80095aa:	00db      	lsls	r3, r3, #3
 80095ac:	3332      	adds	r3, #50	; 0x32
 80095ae:	4a67      	ldr	r2, [pc, #412]	; (800974c <UART_SetConfig+0x38c>)
 80095b0:	fba2 2303 	umull	r2, r3, r2, r3
 80095b4:	095b      	lsrs	r3, r3, #5
 80095b6:	f003 0207 	and.w	r2, r3, #7
 80095ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	4432      	add	r2, r6
 80095c0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80095c2:	e0b9      	b.n	8009738 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80095c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80095c6:	461c      	mov	r4, r3
 80095c8:	f04f 0500 	mov.w	r5, #0
 80095cc:	4622      	mov	r2, r4
 80095ce:	462b      	mov	r3, r5
 80095d0:	1891      	adds	r1, r2, r2
 80095d2:	6139      	str	r1, [r7, #16]
 80095d4:	415b      	adcs	r3, r3
 80095d6:	617b      	str	r3, [r7, #20]
 80095d8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80095dc:	1912      	adds	r2, r2, r4
 80095de:	eb45 0303 	adc.w	r3, r5, r3
 80095e2:	f04f 0000 	mov.w	r0, #0
 80095e6:	f04f 0100 	mov.w	r1, #0
 80095ea:	00d9      	lsls	r1, r3, #3
 80095ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80095f0:	00d0      	lsls	r0, r2, #3
 80095f2:	4602      	mov	r2, r0
 80095f4:	460b      	mov	r3, r1
 80095f6:	eb12 0804 	adds.w	r8, r2, r4
 80095fa:	eb43 0905 	adc.w	r9, r3, r5
 80095fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009600:	685b      	ldr	r3, [r3, #4]
 8009602:	4618      	mov	r0, r3
 8009604:	f04f 0100 	mov.w	r1, #0
 8009608:	f04f 0200 	mov.w	r2, #0
 800960c:	f04f 0300 	mov.w	r3, #0
 8009610:	008b      	lsls	r3, r1, #2
 8009612:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009616:	0082      	lsls	r2, r0, #2
 8009618:	4640      	mov	r0, r8
 800961a:	4649      	mov	r1, r9
 800961c:	f7f6 fdf8 	bl	8000210 <__aeabi_uldivmod>
 8009620:	4602      	mov	r2, r0
 8009622:	460b      	mov	r3, r1
 8009624:	4b49      	ldr	r3, [pc, #292]	; (800974c <UART_SetConfig+0x38c>)
 8009626:	fba3 2302 	umull	r2, r3, r3, r2
 800962a:	095b      	lsrs	r3, r3, #5
 800962c:	011e      	lsls	r6, r3, #4
 800962e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009630:	4618      	mov	r0, r3
 8009632:	f04f 0100 	mov.w	r1, #0
 8009636:	4602      	mov	r2, r0
 8009638:	460b      	mov	r3, r1
 800963a:	1894      	adds	r4, r2, r2
 800963c:	60bc      	str	r4, [r7, #8]
 800963e:	415b      	adcs	r3, r3
 8009640:	60fb      	str	r3, [r7, #12]
 8009642:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009646:	1812      	adds	r2, r2, r0
 8009648:	eb41 0303 	adc.w	r3, r1, r3
 800964c:	f04f 0400 	mov.w	r4, #0
 8009650:	f04f 0500 	mov.w	r5, #0
 8009654:	00dd      	lsls	r5, r3, #3
 8009656:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800965a:	00d4      	lsls	r4, r2, #3
 800965c:	4622      	mov	r2, r4
 800965e:	462b      	mov	r3, r5
 8009660:	1814      	adds	r4, r2, r0
 8009662:	64bc      	str	r4, [r7, #72]	; 0x48
 8009664:	414b      	adcs	r3, r1
 8009666:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009668:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800966a:	685b      	ldr	r3, [r3, #4]
 800966c:	4618      	mov	r0, r3
 800966e:	f04f 0100 	mov.w	r1, #0
 8009672:	f04f 0200 	mov.w	r2, #0
 8009676:	f04f 0300 	mov.w	r3, #0
 800967a:	008b      	lsls	r3, r1, #2
 800967c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009680:	0082      	lsls	r2, r0, #2
 8009682:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009686:	f7f6 fdc3 	bl	8000210 <__aeabi_uldivmod>
 800968a:	4602      	mov	r2, r0
 800968c:	460b      	mov	r3, r1
 800968e:	4b2f      	ldr	r3, [pc, #188]	; (800974c <UART_SetConfig+0x38c>)
 8009690:	fba3 1302 	umull	r1, r3, r3, r2
 8009694:	095b      	lsrs	r3, r3, #5
 8009696:	2164      	movs	r1, #100	; 0x64
 8009698:	fb01 f303 	mul.w	r3, r1, r3
 800969c:	1ad3      	subs	r3, r2, r3
 800969e:	011b      	lsls	r3, r3, #4
 80096a0:	3332      	adds	r3, #50	; 0x32
 80096a2:	4a2a      	ldr	r2, [pc, #168]	; (800974c <UART_SetConfig+0x38c>)
 80096a4:	fba2 2303 	umull	r2, r3, r2, r3
 80096a8:	095b      	lsrs	r3, r3, #5
 80096aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80096ae:	441e      	add	r6, r3
 80096b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80096b2:	4618      	mov	r0, r3
 80096b4:	f04f 0100 	mov.w	r1, #0
 80096b8:	4602      	mov	r2, r0
 80096ba:	460b      	mov	r3, r1
 80096bc:	1894      	adds	r4, r2, r2
 80096be:	603c      	str	r4, [r7, #0]
 80096c0:	415b      	adcs	r3, r3
 80096c2:	607b      	str	r3, [r7, #4]
 80096c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096c8:	1812      	adds	r2, r2, r0
 80096ca:	eb41 0303 	adc.w	r3, r1, r3
 80096ce:	f04f 0400 	mov.w	r4, #0
 80096d2:	f04f 0500 	mov.w	r5, #0
 80096d6:	00dd      	lsls	r5, r3, #3
 80096d8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80096dc:	00d4      	lsls	r4, r2, #3
 80096de:	4622      	mov	r2, r4
 80096e0:	462b      	mov	r3, r5
 80096e2:	eb12 0a00 	adds.w	sl, r2, r0
 80096e6:	eb43 0b01 	adc.w	fp, r3, r1
 80096ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096ec:	685b      	ldr	r3, [r3, #4]
 80096ee:	4618      	mov	r0, r3
 80096f0:	f04f 0100 	mov.w	r1, #0
 80096f4:	f04f 0200 	mov.w	r2, #0
 80096f8:	f04f 0300 	mov.w	r3, #0
 80096fc:	008b      	lsls	r3, r1, #2
 80096fe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009702:	0082      	lsls	r2, r0, #2
 8009704:	4650      	mov	r0, sl
 8009706:	4659      	mov	r1, fp
 8009708:	f7f6 fd82 	bl	8000210 <__aeabi_uldivmod>
 800970c:	4602      	mov	r2, r0
 800970e:	460b      	mov	r3, r1
 8009710:	4b0e      	ldr	r3, [pc, #56]	; (800974c <UART_SetConfig+0x38c>)
 8009712:	fba3 1302 	umull	r1, r3, r3, r2
 8009716:	095b      	lsrs	r3, r3, #5
 8009718:	2164      	movs	r1, #100	; 0x64
 800971a:	fb01 f303 	mul.w	r3, r1, r3
 800971e:	1ad3      	subs	r3, r2, r3
 8009720:	011b      	lsls	r3, r3, #4
 8009722:	3332      	adds	r3, #50	; 0x32
 8009724:	4a09      	ldr	r2, [pc, #36]	; (800974c <UART_SetConfig+0x38c>)
 8009726:	fba2 2303 	umull	r2, r3, r2, r3
 800972a:	095b      	lsrs	r3, r3, #5
 800972c:	f003 020f 	and.w	r2, r3, #15
 8009730:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	4432      	add	r2, r6
 8009736:	609a      	str	r2, [r3, #8]
}
 8009738:	bf00      	nop
 800973a:	377c      	adds	r7, #124	; 0x7c
 800973c:	46bd      	mov	sp, r7
 800973e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009742:	bf00      	nop
 8009744:	40011000 	.word	0x40011000
 8009748:	40011400 	.word	0x40011400
 800974c:	51eb851f 	.word	0x51eb851f

08009750 <__read_flags>:


/*
 * Reads the flag status register and returns the value of the 8-bits register
 */
uint8_t __read_flags() {
 8009750:	b580      	push	{r7, lr}
 8009752:	b090      	sub	sp, #64	; 0x40
 8009754:	af00      	add	r7, sp, #0
	Command cmd = get_default_command();
 8009756:	f107 0308 	add.w	r3, r7, #8
 800975a:	4618      	mov	r0, r3
 800975c:	f000 f988 	bl	8009a70 <get_default_command>
	with_data(&cmd, 1);
 8009760:	f107 0308 	add.w	r3, r7, #8
 8009764:	2101      	movs	r1, #1
 8009766:	4618      	mov	r0, r3
 8009768:	f000 f9b8 	bl	8009adc <with_data>

	if(!qspi_run(&cmd, READ_FLAG_STATUS_REGISTER)) {
 800976c:	f107 0308 	add.w	r3, r7, #8
 8009770:	2170      	movs	r1, #112	; 0x70
 8009772:	4618      	mov	r0, r3
 8009774:	f000 f9c4 	bl	8009b00 <qspi_run>

	}

	uint8_t flags;

	if(!qspi_receive(&flags)) {
 8009778:	1dfb      	adds	r3, r7, #7
 800977a:	4618      	mov	r0, r3
 800977c:	f000 fa28 	bl	8009bd0 <qspi_receive>

	}

	return flags;
 8009780:	79fb      	ldrb	r3, [r7, #7]
}
 8009782:	4618      	mov	r0, r3
 8009784:	3740      	adds	r7, #64	; 0x40
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}

0800978a <__write_enable_latch>:

/*
 * Enables the write latch.
 * This function must be called before each PROGRAM or ERASE operation.
 */
bool __write_enable_latch() {
 800978a:	b5b0      	push	{r4, r5, r7, lr}
 800978c:	b09c      	sub	sp, #112	; 0x70
 800978e:	af00      	add	r7, sp, #0
	Command cmd = get_default_command();
 8009790:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009794:	4618      	mov	r0, r3
 8009796:	f000 f96b 	bl	8009a70 <get_default_command>

	if(qspi_run(&cmd, WRITE_ENABLE_LATCH)) {
 800979a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800979e:	2106      	movs	r1, #6
 80097a0:	4618      	mov	r0, r3
 80097a2:	f000 f9ad 	bl	8009b00 <qspi_run>
 80097a6:	4603      	mov	r3, r0
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d022      	beq.n	80097f2 <__write_enable_latch+0x68>
		cmd = get_default_command();
 80097ac:	463b      	mov	r3, r7
 80097ae:	4618      	mov	r0, r3
 80097b0:	f000 f95e 	bl	8009a70 <get_default_command>
 80097b4:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80097b8:	463d      	mov	r5, r7
 80097ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80097bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80097be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80097c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80097c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80097c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80097c6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80097ca:	e884 0003 	stmia.w	r4, {r0, r1}

		with_data(&cmd, 1);
 80097ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80097d2:	2101      	movs	r1, #1
 80097d4:	4618      	mov	r0, r3
 80097d6:	f000 f981 	bl	8009adc <with_data>

		if(qspi_poll(&cmd, READ_STATUS_REGISTER, 1, true)) {
 80097da:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80097de:	2301      	movs	r3, #1
 80097e0:	2201      	movs	r2, #1
 80097e2:	2105      	movs	r1, #5
 80097e4:	f000 f9a8 	bl	8009b38 <qspi_poll>
 80097e8:	4603      	mov	r3, r0
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d001      	beq.n	80097f2 <__write_enable_latch+0x68>
			return true;
 80097ee:	2301      	movs	r3, #1
 80097f0:	e000      	b.n	80097f4 <__write_enable_latch+0x6a>
		}
	}

	return false;
 80097f2:	2300      	movs	r3, #0
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	3770      	adds	r7, #112	; 0x70
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bdb0      	pop	{r4, r5, r7, pc}

080097fc <__write_disable_latch>:

/*
 * Call this function to prevent data corruption when a hardware fault (e.g. protection fault) occurs.
 * Please refer to the documentation for details.
 */
bool __write_disable_latch() {
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b08e      	sub	sp, #56	; 0x38
 8009800:	af00      	add	r7, sp, #0
	Command cmd = get_default_command();
 8009802:	463b      	mov	r3, r7
 8009804:	4618      	mov	r0, r3
 8009806:	f000 f933 	bl	8009a70 <get_default_command>
	return qspi_run(&cmd, WRITE_ENABLE_LATCH);
 800980a:	463b      	mov	r3, r7
 800980c:	2106      	movs	r1, #6
 800980e:	4618      	mov	r0, r3
 8009810:	f000 f976 	bl	8009b00 <qspi_run>
 8009814:	4603      	mov	r3, r0
}
 8009816:	4618      	mov	r0, r3
 8009818:	3738      	adds	r7, #56	; 0x38
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}

0800981e <flash_init>:

/*
 * Initialises the flash driver
 */
void flash_init() {
 800981e:	b580      	push	{r7, lr}
 8009820:	b090      	sub	sp, #64	; 0x40
 8009822:	af00      	add	r7, sp, #0
	uint8_t configuration = 0b00011011; // 1 Dummy cycle
 8009824:	231b      	movs	r3, #27
 8009826:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	Command cmd = get_default_command();
 800982a:	1d3b      	adds	r3, r7, #4
 800982c:	4618      	mov	r0, r3
 800982e:	f000 f91f 	bl	8009a70 <get_default_command>
	with_data(&cmd, 1);
 8009832:	1d3b      	adds	r3, r7, #4
 8009834:	2101      	movs	r1, #1
 8009836:	4618      	mov	r0, r3
 8009838:	f000 f950 	bl	8009adc <with_data>

	__write_enable_latch();
 800983c:	f7ff ffa5 	bl	800978a <__write_enable_latch>

	if(!qspi_run(&cmd, 0x81)) { // Write volatile configuration register
 8009840:	1d3b      	adds	r3, r7, #4
 8009842:	2181      	movs	r1, #129	; 0x81
 8009844:	4618      	mov	r0, r3
 8009846:	f000 f95b 	bl	8009b00 <qspi_run>

	}

	if(!qspi_transmit(&configuration)) {
 800984a:	f107 033f 	add.w	r3, r7, #63	; 0x3f
 800984e:	4618      	mov	r0, r3
 8009850:	f000 f9a8 	bl	8009ba4 <qspi_transmit>

	}

	if(!qspi_poll(&cmd, READ_FLAG_STATUS_REGISTER, 7, true)) {
 8009854:	1d38      	adds	r0, r7, #4
 8009856:	2301      	movs	r3, #1
 8009858:	2207      	movs	r2, #7
 800985a:	2170      	movs	r1, #112	; 0x70
 800985c:	f000 f96c 	bl	8009b38 <qspi_poll>

	}
}
 8009860:	bf00      	nop
 8009862:	3740      	adds	r7, #64	; 0x40
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}

08009868 <flash_read>:
 * Test providers:
 * 	 - read_ut.c
 *
 */

void flash_read(uint32_t address, uint8_t* buffer, uint32_t length) {
 8009868:	b580      	push	{r7, lr}
 800986a:	b084      	sub	sp, #16
 800986c:	af00      	add	r7, sp, #0
 800986e:	60f8      	str	r0, [r7, #12]
 8009870:	60b9      	str	r1, [r7, #8]
 8009872:	607a      	str	r2, [r7, #4]
	while(QUADSPI->SR & QUADSPI_SR_BUSY);
 8009874:	bf00      	nop
 8009876:	4b12      	ldr	r3, [pc, #72]	; (80098c0 <flash_read+0x58>)
 8009878:	689b      	ldr	r3, [r3, #8]
 800987a:	f003 0320 	and.w	r3, r3, #32
 800987e:	2b00      	cmp	r3, #0
 8009880:	d1f9      	bne.n	8009876 <flash_read+0xe>
	QUADSPI->CCR = (uint32_t) (FREAD_SINGLE) | (0b00000001 << 24) | (0b00000100 << 16) | (0b00100101 << 8);
 8009882:	4b0f      	ldr	r3, [pc, #60]	; (80098c0 <flash_read+0x58>)
 8009884:	4a0f      	ldr	r2, [pc, #60]	; (80098c4 <flash_read+0x5c>)
 8009886:	615a      	str	r2, [r3, #20]
	while(QUADSPI->SR & QUADSPI_SR_BUSY);
 8009888:	bf00      	nop
 800988a:	4b0d      	ldr	r3, [pc, #52]	; (80098c0 <flash_read+0x58>)
 800988c:	689b      	ldr	r3, [r3, #8]
 800988e:	f003 0320 	and.w	r3, r3, #32
 8009892:	2b00      	cmp	r3, #0
 8009894:	d1f9      	bne.n	800988a <flash_read+0x22>
	QUADSPI->AR = address;
 8009896:	4a0a      	ldr	r2, [pc, #40]	; (80098c0 <flash_read+0x58>)
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	6193      	str	r3, [r2, #24]
	while(QUADSPI->SR & QUADSPI_SR_BUSY);
 800989c:	bf00      	nop
 800989e:	4b08      	ldr	r3, [pc, #32]	; (80098c0 <flash_read+0x58>)
 80098a0:	689b      	ldr	r3, [r3, #8]
 80098a2:	f003 0320 	and.w	r3, r3, #32
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d1f9      	bne.n	800989e <flash_read+0x36>
	QUADSPI->DLR = length;
 80098aa:	4a05      	ldr	r2, [pc, #20]	; (80098c0 <flash_read+0x58>)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6113      	str	r3, [r2, #16]

	if(!qspi_receive(buffer)) {
 80098b0:	68b8      	ldr	r0, [r7, #8]
 80098b2:	f000 f98d 	bl	8009bd0 <qspi_receive>

	}
}
 80098b6:	bf00      	nop
 80098b8:	3710      	adds	r7, #16
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}
 80098be:	bf00      	nop
 80098c0:	a0001000 	.word	0xa0001000
 80098c4:	0104250b 	.word	0x0104250b

080098c8 <__flash_write_page>:
 * Test providers:
 * 	 - write_ut.c
 *
 */

void __flash_write_page(uint32_t address, uint8_t* buffer, uint32_t length) {
 80098c8:	b5b0      	push	{r4, r5, r7, lr}
 80098ca:	b0a2      	sub	sp, #136	; 0x88
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6478      	str	r0, [r7, #68]	; 0x44
 80098d0:	6439      	str	r1, [r7, #64]	; 0x40
 80098d2:	63fa      	str	r2, [r7, #60]	; 0x3c
	__write_enable_latch();
 80098d4:	f7ff ff59 	bl	800978a <__write_enable_latch>

	Command cmd = get_default_command();
 80098d8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80098dc:	4618      	mov	r0, r3
 80098de:	f000 f8c7 	bl	8009a70 <get_default_command>

	with_address(&cmd, address);
 80098e2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80098e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80098e8:	4618      	mov	r0, r3
 80098ea:	f000 f8e1 	bl	8009ab0 <with_address>
	with_data(&cmd, length);
 80098ee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80098f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80098f4:	4618      	mov	r0, r3
 80098f6:	f000 f8f1 	bl	8009adc <with_data>

	if(!qspi_run(&cmd, WRITE_SINGLE)) {
 80098fa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80098fe:	2102      	movs	r1, #2
 8009900:	4618      	mov	r0, r3
 8009902:	f000 f8fd 	bl	8009b00 <qspi_run>

	}

	if(!qspi_transmit(buffer)) {
 8009906:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009908:	f000 f94c 	bl	8009ba4 <qspi_transmit>

	/*
	 * Checks if the controller is ready to proceed to the next command
	 */

	cmd = get_default_command();
 800990c:	463b      	mov	r3, r7
 800990e:	4618      	mov	r0, r3
 8009910:	f000 f8ae 	bl	8009a70 <get_default_command>
 8009914:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8009918:	463d      	mov	r5, r7
 800991a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800991c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800991e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009920:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009922:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009924:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009926:	e895 0003 	ldmia.w	r5, {r0, r1}
 800992a:	e884 0003 	stmia.w	r4, {r0, r1}
	with_data(&cmd, 1);
 800992e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009932:	2101      	movs	r1, #1
 8009934:	4618      	mov	r0, r3
 8009936:	f000 f8d1 	bl	8009adc <with_data>

	if(!qspi_poll(&cmd, READ_FLAG_STATUS_REGISTER, 7, true)) {
 800993a:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 800993e:	2301      	movs	r3, #1
 8009940:	2207      	movs	r2, #7
 8009942:	2170      	movs	r1, #112	; 0x70
 8009944:	f000 f8f8 	bl	8009b38 <qspi_poll>

	}

	uint8_t flags = __read_flags();
 8009948:	f7ff ff02 	bl	8009750 <__read_flags>
 800994c:	4603      	mov	r3, r0
 800994e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	// Checks if the protection fault flag is set
	if(flags & (1 << 4)) {
 8009952:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8009956:	f003 0310 	and.w	r3, r3, #16
 800995a:	2b00      	cmp	r3, #0
 800995c:	d001      	beq.n	8009962 <__flash_write_page+0x9a>
		__write_disable_latch(); // Manually reset the latch
 800995e:	f7ff ff4d 	bl	80097fc <__write_disable_latch>


	}
}
 8009962:	bf00      	nop
 8009964:	3788      	adds	r7, #136	; 0x88
 8009966:	46bd      	mov	sp, r7
 8009968:	bdb0      	pop	{r4, r5, r7, pc}

0800996a <flash_write>:

void flash_write(uint32_t address, uint8_t* buffer, uint32_t length) {
 800996a:	b580      	push	{r7, lr}
 800996c:	b086      	sub	sp, #24
 800996e:	af00      	add	r7, sp, #0
 8009970:	60f8      	str	r0, [r7, #12]
 8009972:	60b9      	str	r1, [r7, #8]
 8009974:	607a      	str	r2, [r7, #4]
	uint32_t internal_address = address % PAGE_SIZE;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	b2db      	uxtb	r3, r3
 800997a:	617b      	str	r3, [r7, #20]

	while(internal_address + length > PAGE_SIZE) {
 800997c:	e016      	b.n	80099ac <flash_write+0x42>
		uint32_t write_length = PAGE_SIZE - internal_address;
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8009984:	613b      	str	r3, [r7, #16]

		__flash_write_page(address, buffer, write_length);
 8009986:	693a      	ldr	r2, [r7, #16]
 8009988:	68b9      	ldr	r1, [r7, #8]
 800998a:	68f8      	ldr	r0, [r7, #12]
 800998c:	f7ff ff9c 	bl	80098c8 <__flash_write_page>
		buffer += write_length;
 8009990:	68ba      	ldr	r2, [r7, #8]
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	4413      	add	r3, r2
 8009996:	60bb      	str	r3, [r7, #8]
		address += write_length;
 8009998:	68fa      	ldr	r2, [r7, #12]
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	4413      	add	r3, r2
 800999e:	60fb      	str	r3, [r7, #12]
		length -= write_length;
 80099a0:	687a      	ldr	r2, [r7, #4]
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	1ad3      	subs	r3, r2, r3
 80099a6:	607b      	str	r3, [r7, #4]

		internal_address = 0;
 80099a8:	2300      	movs	r3, #0
 80099aa:	617b      	str	r3, [r7, #20]
	while(internal_address + length > PAGE_SIZE) {
 80099ac:	697a      	ldr	r2, [r7, #20]
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	4413      	add	r3, r2
 80099b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099b6:	d8e2      	bhi.n	800997e <flash_write+0x14>
	}

	__flash_write_page(address, buffer, length);
 80099b8:	687a      	ldr	r2, [r7, #4]
 80099ba:	68b9      	ldr	r1, [r7, #8]
 80099bc:	68f8      	ldr	r0, [r7, #12]
 80099be:	f7ff ff83 	bl	80098c8 <__flash_write_page>
}
 80099c2:	bf00      	nop
 80099c4:	3718      	adds	r7, #24
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}

080099ca <__flash_erase>:


   }
}

void __flash_erase(uint32_t instruction, uint32_t address) {
 80099ca:	b5b0      	push	{r4, r5, r7, lr}
 80099cc:	b0a0      	sub	sp, #128	; 0x80
 80099ce:	af00      	add	r7, sp, #0
 80099d0:	63f8      	str	r0, [r7, #60]	; 0x3c
 80099d2:	63b9      	str	r1, [r7, #56]	; 0x38

	__write_enable_latch();
 80099d4:	f7ff fed9 	bl	800978a <__write_enable_latch>


	Command cmd = get_default_command();
 80099d8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80099dc:	4618      	mov	r0, r3
 80099de:	f000 f847 	bl	8009a70 <get_default_command>
	with_address(&cmd, address);
 80099e2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80099e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80099e8:	4618      	mov	r0, r3
 80099ea:	f000 f861 	bl	8009ab0 <with_address>


	if(!qspi_run(&cmd, instruction)) {
 80099ee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80099f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80099f4:	4618      	mov	r0, r3
 80099f6:	f000 f883 	bl	8009b00 <qspi_run>
	}

	/*
	 * Checks if the controller is ready to proceed to the next command
	 */
	cmd = get_default_command();
 80099fa:	463b      	mov	r3, r7
 80099fc:	4618      	mov	r0, r3
 80099fe:	f000 f837 	bl	8009a70 <get_default_command>
 8009a02:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8009a06:	463d      	mov	r5, r7
 8009a08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009a0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009a0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009a0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009a10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009a12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009a14:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009a18:	e884 0003 	stmia.w	r4, {r0, r1}
	with_data(&cmd, 1);
 8009a1c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009a20:	2101      	movs	r1, #1
 8009a22:	4618      	mov	r0, r3
 8009a24:	f000 f85a 	bl	8009adc <with_data>

	if(!qspi_poll(&cmd, READ_FLAG_STATUS_REGISTER, 7, true)) {
 8009a28:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	2207      	movs	r2, #7
 8009a30:	2170      	movs	r1, #112	; 0x70
 8009a32:	f000 f881 	bl	8009b38 <qspi_poll>
	}

	/*
	 * Checks if the protection fault flag is set
	 */
	uint8_t flags = __read_flags();
 8009a36:	f7ff fe8b 	bl	8009750 <__read_flags>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	if(flags & (1 << 5)) {
 8009a40:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009a44:	f003 0320 	and.w	r3, r3, #32
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d001      	beq.n	8009a50 <__flash_erase+0x86>
		__write_disable_latch(); // Manually reset the latch
 8009a4c:	f7ff fed6 	bl	80097fc <__write_disable_latch>


	}
}
 8009a50:	bf00      	nop
 8009a52:	3780      	adds	r7, #128	; 0x80
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bdb0      	pop	{r4, r5, r7, pc}

08009a58 <flash_erase_subsector>:

/*
 * Erases the whole sub-sector represented by the provided address.
 * The address may be any of those within the sub-sector.
 */
void flash_erase_subsector(uint32_t address) {
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b082      	sub	sp, #8
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
	__flash_erase(ERASE_SUBSECTOR, address);
 8009a60:	6879      	ldr	r1, [r7, #4]
 8009a62:	2020      	movs	r0, #32
 8009a64:	f7ff ffb1 	bl	80099ca <__flash_erase>
}
 8009a68:	bf00      	nop
 8009a6a:	3708      	adds	r7, #8
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}

08009a70 <get_default_command>:
#include "io_driver.h"




Command get_default_command() {
 8009a70:	b5b0      	push	{r4, r5, r7, lr}
 8009a72:	b090      	sub	sp, #64	; 0x40
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
	Command command = {
 8009a78:	f107 0308 	add.w	r3, r7, #8
 8009a7c:	2238      	movs	r2, #56	; 0x38
 8009a7e:	2100      	movs	r1, #0
 8009a80:	4618      	mov	r0, r3
 8009a82:	f002 f93b 	bl	800bcfc <memset>
 8009a86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a8a:	623b      	str	r3, [r7, #32]
			.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY,
			.SIOOMode = QSPI_SIOO_INST_EVERY_CMD
		}
	};

	return command;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	461d      	mov	r5, r3
 8009a90:	f107 0408 	add.w	r4, r7, #8
 8009a94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009a96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009a98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009a9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009a9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009a9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009aa0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009aa4:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	3740      	adds	r7, #64	; 0x40
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bdb0      	pop	{r4, r5, r7, pc}

08009ab0 <with_address>:

/*
 * The two following functions enable the programmer to build a QSPI command very easily.
 */
void with_address(Command* cmd, uint32_t address) {
 8009ab0:	b480      	push	{r7}
 8009ab2:	b083      	sub	sp, #12
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	6039      	str	r1, [r7, #0]
	cmd->qspi_command.AddressMode = QSPI_ADDRESS_1_LINE;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009ac0:	61da      	str	r2, [r3, #28]
	cmd->qspi_command.AddressSize = QSPI_ADDRESS_24_BITS;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009ac8:	60da      	str	r2, [r3, #12]
	cmd->qspi_command.Address = address;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	683a      	ldr	r2, [r7, #0]
 8009ace:	605a      	str	r2, [r3, #4]
}
 8009ad0:	bf00      	nop
 8009ad2:	370c      	adds	r7, #12
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ada:	4770      	bx	lr

08009adc <with_data>:

void with_data(Command* cmd, uint32_t length) {
 8009adc:	b480      	push	{r7}
 8009ade:	b083      	sub	sp, #12
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
 8009ae4:	6039      	str	r1, [r7, #0]
	cmd->qspi_command.DataMode = QSPI_DATA_1_LINE;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009aec:	625a      	str	r2, [r3, #36]	; 0x24
	cmd->qspi_command.NbData = length;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	683a      	ldr	r2, [r7, #0]
 8009af2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009af4:	bf00      	nop
 8009af6:	370c      	adds	r7, #12
 8009af8:	46bd      	mov	sp, r7
 8009afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afe:	4770      	bx	lr

08009b00 <qspi_run>:


/*
 * Higher-level abstraction layer for the QSPI interface.
 */
bool qspi_run(Command* cmd, uint32_t instruction) {
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b082      	sub	sp, #8
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	6039      	str	r1, [r7, #0]
	cmd->qspi_command.Instruction = instruction;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	683a      	ldr	r2, [r7, #0]
 8009b0e:	601a      	str	r2, [r3, #0]
	return HAL_QSPI_Command(&hqspi, &(cmd->qspi_command), IO_TIMEOUT) == HAL_OK;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8009b16:	4619      	mov	r1, r3
 8009b18:	4806      	ldr	r0, [pc, #24]	; (8009b34 <qspi_run+0x34>)
 8009b1a:	f7fc fb2f 	bl	800617c <HAL_QSPI_Command>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	bf0c      	ite	eq
 8009b24:	2301      	moveq	r3, #1
 8009b26:	2300      	movne	r3, #0
 8009b28:	b2db      	uxtb	r3, r3
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3708      	adds	r7, #8
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}
 8009b32:	bf00      	nop
 8009b34:	20007c08 	.word	0x20007c08

08009b38 <qspi_poll>:

bool qspi_poll(Command* cmd, uint32_t instruction, uint8_t bit, bool value) {
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b08a      	sub	sp, #40	; 0x28
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	60f8      	str	r0, [r7, #12]
 8009b40:	60b9      	str	r1, [r7, #8]
 8009b42:	4611      	mov	r1, r2
 8009b44:	461a      	mov	r2, r3
 8009b46:	460b      	mov	r3, r1
 8009b48:	71fb      	strb	r3, [r7, #7]
 8009b4a:	4613      	mov	r3, r2
 8009b4c:	71bb      	strb	r3, [r7, #6]
	QSPI_AutoPollingTypeDef poller;

	poller.MatchMode = QSPI_MATCH_MODE_AND;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	623b      	str	r3, [r7, #32]
	poller.StatusBytesSize = 1;
 8009b52:	2301      	movs	r3, #1
 8009b54:	61fb      	str	r3, [r7, #28]
	poller.Interval = 0x10;
 8009b56:	2310      	movs	r3, #16
 8009b58:	61bb      	str	r3, [r7, #24]
	poller.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8009b5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009b5e:	627b      	str	r3, [r7, #36]	; 0x24
	poller.Match = value << bit;
 8009b60:	79ba      	ldrb	r2, [r7, #6]
 8009b62:	79fb      	ldrb	r3, [r7, #7]
 8009b64:	fa02 f303 	lsl.w	r3, r2, r3
 8009b68:	613b      	str	r3, [r7, #16]
	poller.Mask = 1 << bit;
 8009b6a:	79fb      	ldrb	r3, [r7, #7]
 8009b6c:	2201      	movs	r2, #1
 8009b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8009b72:	617b      	str	r3, [r7, #20]

	cmd->qspi_command.Instruction = instruction;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	68ba      	ldr	r2, [r7, #8]
 8009b78:	601a      	str	r2, [r3, #0]

	return HAL_QSPI_AutoPolling(&hqspi, &(cmd->qspi_command), &poller, IO_TIMEOUT) == HAL_OK;
 8009b7a:	68f9      	ldr	r1, [r7, #12]
 8009b7c:	f107 0210 	add.w	r2, r7, #16
 8009b80:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8009b84:	4806      	ldr	r0, [pc, #24]	; (8009ba0 <qspi_poll+0x68>)
 8009b86:	f7fc fc90 	bl	80064aa <HAL_QSPI_AutoPolling>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	bf0c      	ite	eq
 8009b90:	2301      	moveq	r3, #1
 8009b92:	2300      	movne	r3, #0
 8009b94:	b2db      	uxtb	r3, r3
}
 8009b96:	4618      	mov	r0, r3
 8009b98:	3728      	adds	r7, #40	; 0x28
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}
 8009b9e:	bf00      	nop
 8009ba0:	20007c08 	.word	0x20007c08

08009ba4 <qspi_transmit>:

bool qspi_transmit(uint8_t* buffer) {
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b082      	sub	sp, #8
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
	return HAL_QSPI_Transmit(&hqspi, buffer, IO_TIMEOUT) == HAL_OK;
 8009bac:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8009bb0:	6879      	ldr	r1, [r7, #4]
 8009bb2:	4806      	ldr	r0, [pc, #24]	; (8009bcc <qspi_transmit+0x28>)
 8009bb4:	f7fc fb40 	bl	8006238 <HAL_QSPI_Transmit>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	bf0c      	ite	eq
 8009bbe:	2301      	moveq	r3, #1
 8009bc0:	2300      	movne	r3, #0
 8009bc2:	b2db      	uxtb	r3, r3
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	3708      	adds	r7, #8
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}
 8009bcc:	20007c08 	.word	0x20007c08

08009bd0 <qspi_receive>:

bool qspi_receive(uint8_t* buffer) {
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b082      	sub	sp, #8
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
	return HAL_QSPI_Receive(&hqspi, buffer, IO_TIMEOUT) == HAL_OK;
 8009bd8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8009bdc:	6879      	ldr	r1, [r7, #4]
 8009bde:	4806      	ldr	r0, [pc, #24]	; (8009bf8 <qspi_receive+0x28>)
 8009be0:	f7fc fbc1 	bl	8006366 <HAL_QSPI_Receive>
 8009be4:	4603      	mov	r3, r0
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	bf0c      	ite	eq
 8009bea:	2301      	moveq	r3, #1
 8009bec:	2300      	movne	r3, #0
 8009bee:	b2db      	uxtb	r3, r3
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	3708      	adds	r7, #8
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}
 8009bf8:	20007c08 	.word	0x20007c08

08009bfc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b085      	sub	sp, #20
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	4603      	mov	r3, r0
 8009c04:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009c06:	2300      	movs	r3, #0
 8009c08:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009c0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009c0e:	2b84      	cmp	r3, #132	; 0x84
 8009c10:	d005      	beq.n	8009c1e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009c12:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	4413      	add	r3, r2
 8009c1a:	3303      	adds	r3, #3
 8009c1c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3714      	adds	r7, #20
 8009c24:	46bd      	mov	sp, r7
 8009c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2a:	4770      	bx	lr

08009c2c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009c30:	f000 ffba 	bl	800aba8 <vTaskStartScheduler>
  
  return osOK;
 8009c34:	2300      	movs	r3, #0
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	bd80      	pop	{r7, pc}

08009c3a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009c3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c3c:	b089      	sub	sp, #36	; 0x24
 8009c3e:	af04      	add	r7, sp, #16
 8009c40:	6078      	str	r0, [r7, #4]
 8009c42:	6039      	str	r1, [r7, #0]
      return NULL;
    } 
  }
#elif( configSUPPORT_STATIC_ALLOCATION == 1 )

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	685c      	ldr	r4, [r3, #4]
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681d      	ldr	r5, [r3, #0]
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	691e      	ldr	r6, [r3, #16]
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009c56:	4618      	mov	r0, r3
 8009c58:	f7ff ffd0 	bl	8009bfc <makeFreeRtosPriority>
 8009c5c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	695b      	ldr	r3, [r3, #20]
 8009c62:	687a      	ldr	r2, [r7, #4]
 8009c64:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009c66:	9202      	str	r2, [sp, #8]
 8009c68:	9301      	str	r3, [sp, #4]
 8009c6a:	9100      	str	r1, [sp, #0]
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	4632      	mov	r2, r6
 8009c70:	4629      	mov	r1, r5
 8009c72:	4620      	mov	r0, r4
 8009c74:	f000 fd98 	bl	800a7a8 <xTaskCreateStatic>
 8009c78:	60f8      	str	r0, [r7, #12]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3714      	adds	r7, #20
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009c84 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b084      	sub	sp, #16
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d001      	beq.n	8009c9a <osDelay+0x16>
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	e000      	b.n	8009c9c <osDelay+0x18>
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f000 ff4f 	bl	800ab40 <vTaskDelay>
  
  return osOK;
 8009ca2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3710      	adds	r7, #16
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}

08009cac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009cac:	b480      	push	{r7}
 8009cae:	b083      	sub	sp, #12
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f103 0208 	add.w	r2, r3, #8
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009cc4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f103 0208 	add.w	r2, r3, #8
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f103 0208 	add.w	r2, r3, #8
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009ce0:	bf00      	nop
 8009ce2:	370c      	adds	r7, #12
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr

08009cec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009cec:	b480      	push	{r7}
 8009cee:	b083      	sub	sp, #12
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009cfa:	bf00      	nop
 8009cfc:	370c      	adds	r7, #12
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d04:	4770      	bx	lr

08009d06 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009d06:	b480      	push	{r7}
 8009d08:	b085      	sub	sp, #20
 8009d0a:	af00      	add	r7, sp, #0
 8009d0c:	6078      	str	r0, [r7, #4]
 8009d0e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	685b      	ldr	r3, [r3, #4]
 8009d14:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	68fa      	ldr	r2, [r7, #12]
 8009d1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	689a      	ldr	r2, [r3, #8]
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	689b      	ldr	r3, [r3, #8]
 8009d28:	683a      	ldr	r2, [r7, #0]
 8009d2a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	683a      	ldr	r2, [r7, #0]
 8009d30:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	687a      	ldr	r2, [r7, #4]
 8009d36:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	1c5a      	adds	r2, r3, #1
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	601a      	str	r2, [r3, #0]
}
 8009d42:	bf00      	nop
 8009d44:	3714      	adds	r7, #20
 8009d46:	46bd      	mov	sp, r7
 8009d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4c:	4770      	bx	lr

08009d4e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009d4e:	b480      	push	{r7}
 8009d50:	b085      	sub	sp, #20
 8009d52:	af00      	add	r7, sp, #0
 8009d54:	6078      	str	r0, [r7, #4]
 8009d56:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d64:	d103      	bne.n	8009d6e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	691b      	ldr	r3, [r3, #16]
 8009d6a:	60fb      	str	r3, [r7, #12]
 8009d6c:	e00c      	b.n	8009d88 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	3308      	adds	r3, #8
 8009d72:	60fb      	str	r3, [r7, #12]
 8009d74:	e002      	b.n	8009d7c <vListInsert+0x2e>
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	685b      	ldr	r3, [r3, #4]
 8009d7a:	60fb      	str	r3, [r7, #12]
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	685b      	ldr	r3, [r3, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	68ba      	ldr	r2, [r7, #8]
 8009d84:	429a      	cmp	r2, r3
 8009d86:	d2f6      	bcs.n	8009d76 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	685a      	ldr	r2, [r3, #4]
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	683a      	ldr	r2, [r7, #0]
 8009d96:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	68fa      	ldr	r2, [r7, #12]
 8009d9c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	683a      	ldr	r2, [r7, #0]
 8009da2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	687a      	ldr	r2, [r7, #4]
 8009da8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	1c5a      	adds	r2, r3, #1
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	601a      	str	r2, [r3, #0]
}
 8009db4:	bf00      	nop
 8009db6:	3714      	adds	r7, #20
 8009db8:	46bd      	mov	sp, r7
 8009dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbe:	4770      	bx	lr

08009dc0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b085      	sub	sp, #20
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	691b      	ldr	r3, [r3, #16]
 8009dcc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	685b      	ldr	r3, [r3, #4]
 8009dd2:	687a      	ldr	r2, [r7, #4]
 8009dd4:	6892      	ldr	r2, [r2, #8]
 8009dd6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	689b      	ldr	r3, [r3, #8]
 8009ddc:	687a      	ldr	r2, [r7, #4]
 8009dde:	6852      	ldr	r2, [r2, #4]
 8009de0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	685b      	ldr	r3, [r3, #4]
 8009de6:	687a      	ldr	r2, [r7, #4]
 8009de8:	429a      	cmp	r2, r3
 8009dea:	d103      	bne.n	8009df4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	689a      	ldr	r2, [r3, #8]
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2200      	movs	r2, #0
 8009df8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	1e5a      	subs	r2, r3, #1
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	681b      	ldr	r3, [r3, #0]
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3714      	adds	r7, #20
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e12:	4770      	bx	lr

08009e14 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b084      	sub	sp, #16
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
 8009e1c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d10a      	bne.n	8009e3e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e2c:	f383 8811 	msr	BASEPRI, r3
 8009e30:	f3bf 8f6f 	isb	sy
 8009e34:	f3bf 8f4f 	dsb	sy
 8009e38:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009e3a:	bf00      	nop
 8009e3c:	e7fe      	b.n	8009e3c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009e3e:	f001 fe09 	bl	800ba54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681a      	ldr	r2, [r3, #0]
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e4a:	68f9      	ldr	r1, [r7, #12]
 8009e4c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009e4e:	fb01 f303 	mul.w	r3, r1, r3
 8009e52:	441a      	add	r2, r3
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681a      	ldr	r2, [r3, #0]
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681a      	ldr	r2, [r3, #0]
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e6e:	3b01      	subs	r3, #1
 8009e70:	68f9      	ldr	r1, [r7, #12]
 8009e72:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009e74:	fb01 f303 	mul.w	r3, r1, r3
 8009e78:	441a      	add	r2, r3
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	22ff      	movs	r2, #255	; 0xff
 8009e82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	22ff      	movs	r2, #255	; 0xff
 8009e8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d114      	bne.n	8009ebe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	691b      	ldr	r3, [r3, #16]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d01a      	beq.n	8009ed2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	3310      	adds	r3, #16
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f001 f8ef 	bl	800b084 <xTaskRemoveFromEventList>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d012      	beq.n	8009ed2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009eac:	4b0c      	ldr	r3, [pc, #48]	; (8009ee0 <xQueueGenericReset+0xcc>)
 8009eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009eb2:	601a      	str	r2, [r3, #0]
 8009eb4:	f3bf 8f4f 	dsb	sy
 8009eb8:	f3bf 8f6f 	isb	sy
 8009ebc:	e009      	b.n	8009ed2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	3310      	adds	r3, #16
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f7ff fef2 	bl	8009cac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	3324      	adds	r3, #36	; 0x24
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f7ff feed 	bl	8009cac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009ed2:	f001 fdef 	bl	800bab4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009ed6:	2301      	movs	r3, #1
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	3710      	adds	r7, #16
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}
 8009ee0:	e000ed04 	.word	0xe000ed04

08009ee4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b08e      	sub	sp, #56	; 0x38
 8009ee8:	af02      	add	r7, sp, #8
 8009eea:	60f8      	str	r0, [r7, #12]
 8009eec:	60b9      	str	r1, [r7, #8]
 8009eee:	607a      	str	r2, [r7, #4]
 8009ef0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d10a      	bne.n	8009f0e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009efc:	f383 8811 	msr	BASEPRI, r3
 8009f00:	f3bf 8f6f 	isb	sy
 8009f04:	f3bf 8f4f 	dsb	sy
 8009f08:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009f0a:	bf00      	nop
 8009f0c:	e7fe      	b.n	8009f0c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d10a      	bne.n	8009f2a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f18:	f383 8811 	msr	BASEPRI, r3
 8009f1c:	f3bf 8f6f 	isb	sy
 8009f20:	f3bf 8f4f 	dsb	sy
 8009f24:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009f26:	bf00      	nop
 8009f28:	e7fe      	b.n	8009f28 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d002      	beq.n	8009f36 <xQueueGenericCreateStatic+0x52>
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d001      	beq.n	8009f3a <xQueueGenericCreateStatic+0x56>
 8009f36:	2301      	movs	r3, #1
 8009f38:	e000      	b.n	8009f3c <xQueueGenericCreateStatic+0x58>
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d10a      	bne.n	8009f56 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f44:	f383 8811 	msr	BASEPRI, r3
 8009f48:	f3bf 8f6f 	isb	sy
 8009f4c:	f3bf 8f4f 	dsb	sy
 8009f50:	623b      	str	r3, [r7, #32]
}
 8009f52:	bf00      	nop
 8009f54:	e7fe      	b.n	8009f54 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d102      	bne.n	8009f62 <xQueueGenericCreateStatic+0x7e>
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d101      	bne.n	8009f66 <xQueueGenericCreateStatic+0x82>
 8009f62:	2301      	movs	r3, #1
 8009f64:	e000      	b.n	8009f68 <xQueueGenericCreateStatic+0x84>
 8009f66:	2300      	movs	r3, #0
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d10a      	bne.n	8009f82 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f70:	f383 8811 	msr	BASEPRI, r3
 8009f74:	f3bf 8f6f 	isb	sy
 8009f78:	f3bf 8f4f 	dsb	sy
 8009f7c:	61fb      	str	r3, [r7, #28]
}
 8009f7e:	bf00      	nop
 8009f80:	e7fe      	b.n	8009f80 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009f82:	2348      	movs	r3, #72	; 0x48
 8009f84:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	2b48      	cmp	r3, #72	; 0x48
 8009f8a:	d00a      	beq.n	8009fa2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f90:	f383 8811 	msr	BASEPRI, r3
 8009f94:	f3bf 8f6f 	isb	sy
 8009f98:	f3bf 8f4f 	dsb	sy
 8009f9c:	61bb      	str	r3, [r7, #24]
}
 8009f9e:	bf00      	nop
 8009fa0:	e7fe      	b.n	8009fa0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009fa2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d009      	beq.n	8009fc2 <xQueueGenericCreateStatic+0xde>
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009fae:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fb4:	9300      	str	r3, [sp, #0]
 8009fb6:	4613      	mov	r3, r2
 8009fb8:	687a      	ldr	r2, [r7, #4]
 8009fba:	68b9      	ldr	r1, [r7, #8]
 8009fbc:	68f8      	ldr	r0, [r7, #12]
 8009fbe:	f000 f805 	bl	8009fcc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	3730      	adds	r7, #48	; 0x30
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bd80      	pop	{r7, pc}

08009fcc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b084      	sub	sp, #16
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	60f8      	str	r0, [r7, #12]
 8009fd4:	60b9      	str	r1, [r7, #8]
 8009fd6:	607a      	str	r2, [r7, #4]
 8009fd8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d103      	bne.n	8009fe8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009fe0:	69bb      	ldr	r3, [r7, #24]
 8009fe2:	69ba      	ldr	r2, [r7, #24]
 8009fe4:	601a      	str	r2, [r3, #0]
 8009fe6:	e002      	b.n	8009fee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009fe8:	69bb      	ldr	r3, [r7, #24]
 8009fea:	687a      	ldr	r2, [r7, #4]
 8009fec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009fee:	69bb      	ldr	r3, [r7, #24]
 8009ff0:	68fa      	ldr	r2, [r7, #12]
 8009ff2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009ff4:	69bb      	ldr	r3, [r7, #24]
 8009ff6:	68ba      	ldr	r2, [r7, #8]
 8009ff8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009ffa:	2101      	movs	r1, #1
 8009ffc:	69b8      	ldr	r0, [r7, #24]
 8009ffe:	f7ff ff09 	bl	8009e14 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a002:	bf00      	nop
 800a004:	3710      	adds	r7, #16
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}

0800a00a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a00a:	b580      	push	{r7, lr}
 800a00c:	b082      	sub	sp, #8
 800a00e:	af00      	add	r7, sp, #0
 800a010:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d00e      	beq.n	800a036 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2200      	movs	r2, #0
 800a01c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2200      	movs	r2, #0
 800a022:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2200      	movs	r2, #0
 800a028:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a02a:	2300      	movs	r3, #0
 800a02c:	2200      	movs	r2, #0
 800a02e:	2100      	movs	r1, #0
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	f000 f81f 	bl	800a074 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a036:	bf00      	nop
 800a038:	3708      	adds	r7, #8
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}

0800a03e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a03e:	b580      	push	{r7, lr}
 800a040:	b088      	sub	sp, #32
 800a042:	af02      	add	r7, sp, #8
 800a044:	4603      	mov	r3, r0
 800a046:	6039      	str	r1, [r7, #0]
 800a048:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a04a:	2301      	movs	r3, #1
 800a04c:	617b      	str	r3, [r7, #20]
 800a04e:	2300      	movs	r3, #0
 800a050:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a052:	79fb      	ldrb	r3, [r7, #7]
 800a054:	9300      	str	r3, [sp, #0]
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	2200      	movs	r2, #0
 800a05a:	6939      	ldr	r1, [r7, #16]
 800a05c:	6978      	ldr	r0, [r7, #20]
 800a05e:	f7ff ff41 	bl	8009ee4 <xQueueGenericCreateStatic>
 800a062:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a064:	68f8      	ldr	r0, [r7, #12]
 800a066:	f7ff ffd0 	bl	800a00a <prvInitialiseMutex>

		return xNewQueue;
 800a06a:	68fb      	ldr	r3, [r7, #12]
	}
 800a06c:	4618      	mov	r0, r3
 800a06e:	3718      	adds	r7, #24
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}

0800a074 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b08e      	sub	sp, #56	; 0x38
 800a078:	af00      	add	r7, sp, #0
 800a07a:	60f8      	str	r0, [r7, #12]
 800a07c:	60b9      	str	r1, [r7, #8]
 800a07e:	607a      	str	r2, [r7, #4]
 800a080:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a082:	2300      	movs	r3, #0
 800a084:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a08a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d10a      	bne.n	800a0a6 <xQueueGenericSend+0x32>
	__asm volatile
 800a090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a094:	f383 8811 	msr	BASEPRI, r3
 800a098:	f3bf 8f6f 	isb	sy
 800a09c:	f3bf 8f4f 	dsb	sy
 800a0a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a0a2:	bf00      	nop
 800a0a4:	e7fe      	b.n	800a0a4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d103      	bne.n	800a0b4 <xQueueGenericSend+0x40>
 800a0ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d101      	bne.n	800a0b8 <xQueueGenericSend+0x44>
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	e000      	b.n	800a0ba <xQueueGenericSend+0x46>
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d10a      	bne.n	800a0d4 <xQueueGenericSend+0x60>
	__asm volatile
 800a0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c2:	f383 8811 	msr	BASEPRI, r3
 800a0c6:	f3bf 8f6f 	isb	sy
 800a0ca:	f3bf 8f4f 	dsb	sy
 800a0ce:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a0d0:	bf00      	nop
 800a0d2:	e7fe      	b.n	800a0d2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	2b02      	cmp	r3, #2
 800a0d8:	d103      	bne.n	800a0e2 <xQueueGenericSend+0x6e>
 800a0da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0de:	2b01      	cmp	r3, #1
 800a0e0:	d101      	bne.n	800a0e6 <xQueueGenericSend+0x72>
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	e000      	b.n	800a0e8 <xQueueGenericSend+0x74>
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d10a      	bne.n	800a102 <xQueueGenericSend+0x8e>
	__asm volatile
 800a0ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f0:	f383 8811 	msr	BASEPRI, r3
 800a0f4:	f3bf 8f6f 	isb	sy
 800a0f8:	f3bf 8f4f 	dsb	sy
 800a0fc:	623b      	str	r3, [r7, #32]
}
 800a0fe:	bf00      	nop
 800a100:	e7fe      	b.n	800a100 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a102:	f001 f955 	bl	800b3b0 <xTaskGetSchedulerState>
 800a106:	4603      	mov	r3, r0
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d102      	bne.n	800a112 <xQueueGenericSend+0x9e>
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d101      	bne.n	800a116 <xQueueGenericSend+0xa2>
 800a112:	2301      	movs	r3, #1
 800a114:	e000      	b.n	800a118 <xQueueGenericSend+0xa4>
 800a116:	2300      	movs	r3, #0
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d10a      	bne.n	800a132 <xQueueGenericSend+0xbe>
	__asm volatile
 800a11c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a120:	f383 8811 	msr	BASEPRI, r3
 800a124:	f3bf 8f6f 	isb	sy
 800a128:	f3bf 8f4f 	dsb	sy
 800a12c:	61fb      	str	r3, [r7, #28]
}
 800a12e:	bf00      	nop
 800a130:	e7fe      	b.n	800a130 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a132:	f001 fc8f 	bl	800ba54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a138:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a13a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a13c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a13e:	429a      	cmp	r2, r3
 800a140:	d302      	bcc.n	800a148 <xQueueGenericSend+0xd4>
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	2b02      	cmp	r3, #2
 800a146:	d129      	bne.n	800a19c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a148:	683a      	ldr	r2, [r7, #0]
 800a14a:	68b9      	ldr	r1, [r7, #8]
 800a14c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a14e:	f000 fa41 	bl	800a5d4 <prvCopyDataToQueue>
 800a152:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d010      	beq.n	800a17e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a15e:	3324      	adds	r3, #36	; 0x24
 800a160:	4618      	mov	r0, r3
 800a162:	f000 ff8f 	bl	800b084 <xTaskRemoveFromEventList>
 800a166:	4603      	mov	r3, r0
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d013      	beq.n	800a194 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a16c:	4b3f      	ldr	r3, [pc, #252]	; (800a26c <xQueueGenericSend+0x1f8>)
 800a16e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a172:	601a      	str	r2, [r3, #0]
 800a174:	f3bf 8f4f 	dsb	sy
 800a178:	f3bf 8f6f 	isb	sy
 800a17c:	e00a      	b.n	800a194 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a17e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a180:	2b00      	cmp	r3, #0
 800a182:	d007      	beq.n	800a194 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a184:	4b39      	ldr	r3, [pc, #228]	; (800a26c <xQueueGenericSend+0x1f8>)
 800a186:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a18a:	601a      	str	r2, [r3, #0]
 800a18c:	f3bf 8f4f 	dsb	sy
 800a190:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a194:	f001 fc8e 	bl	800bab4 <vPortExitCritical>
				return pdPASS;
 800a198:	2301      	movs	r3, #1
 800a19a:	e063      	b.n	800a264 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d103      	bne.n	800a1aa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a1a2:	f001 fc87 	bl	800bab4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	e05c      	b.n	800a264 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a1aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d106      	bne.n	800a1be <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a1b0:	f107 0314 	add.w	r3, r7, #20
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f000 ffc7 	bl	800b148 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a1be:	f001 fc79 	bl	800bab4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a1c2:	f000 fd53 	bl	800ac6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a1c6:	f001 fc45 	bl	800ba54 <vPortEnterCritical>
 800a1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a1d0:	b25b      	sxtb	r3, r3
 800a1d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a1d6:	d103      	bne.n	800a1e0 <xQueueGenericSend+0x16c>
 800a1d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1da:	2200      	movs	r2, #0
 800a1dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a1e6:	b25b      	sxtb	r3, r3
 800a1e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a1ec:	d103      	bne.n	800a1f6 <xQueueGenericSend+0x182>
 800a1ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a1f6:	f001 fc5d 	bl	800bab4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a1fa:	1d3a      	adds	r2, r7, #4
 800a1fc:	f107 0314 	add.w	r3, r7, #20
 800a200:	4611      	mov	r1, r2
 800a202:	4618      	mov	r0, r3
 800a204:	f000 ffb6 	bl	800b174 <xTaskCheckForTimeOut>
 800a208:	4603      	mov	r3, r0
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d124      	bne.n	800a258 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a20e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a210:	f000 fab2 	bl	800a778 <prvIsQueueFull>
 800a214:	4603      	mov	r3, r0
 800a216:	2b00      	cmp	r3, #0
 800a218:	d018      	beq.n	800a24c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a21a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a21c:	3310      	adds	r3, #16
 800a21e:	687a      	ldr	r2, [r7, #4]
 800a220:	4611      	mov	r1, r2
 800a222:	4618      	mov	r0, r3
 800a224:	f000 ff0a 	bl	800b03c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a228:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a22a:	f000 fa3d 	bl	800a6a8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a22e:	f000 fd2b 	bl	800ac88 <xTaskResumeAll>
 800a232:	4603      	mov	r3, r0
 800a234:	2b00      	cmp	r3, #0
 800a236:	f47f af7c 	bne.w	800a132 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a23a:	4b0c      	ldr	r3, [pc, #48]	; (800a26c <xQueueGenericSend+0x1f8>)
 800a23c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a240:	601a      	str	r2, [r3, #0]
 800a242:	f3bf 8f4f 	dsb	sy
 800a246:	f3bf 8f6f 	isb	sy
 800a24a:	e772      	b.n	800a132 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a24c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a24e:	f000 fa2b 	bl	800a6a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a252:	f000 fd19 	bl	800ac88 <xTaskResumeAll>
 800a256:	e76c      	b.n	800a132 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a258:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a25a:	f000 fa25 	bl	800a6a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a25e:	f000 fd13 	bl	800ac88 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a262:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a264:	4618      	mov	r0, r3
 800a266:	3738      	adds	r7, #56	; 0x38
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}
 800a26c:	e000ed04 	.word	0xe000ed04

0800a270 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b08e      	sub	sp, #56	; 0x38
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
 800a278:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a280:	2b00      	cmp	r3, #0
 800a282:	d10a      	bne.n	800a29a <xQueueGiveFromISR+0x2a>
	__asm volatile
 800a284:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a288:	f383 8811 	msr	BASEPRI, r3
 800a28c:	f3bf 8f6f 	isb	sy
 800a290:	f3bf 8f4f 	dsb	sy
 800a294:	623b      	str	r3, [r7, #32]
}
 800a296:	bf00      	nop
 800a298:	e7fe      	b.n	800a298 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a29a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a29c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d00a      	beq.n	800a2b8 <xQueueGiveFromISR+0x48>
	__asm volatile
 800a2a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2a6:	f383 8811 	msr	BASEPRI, r3
 800a2aa:	f3bf 8f6f 	isb	sy
 800a2ae:	f3bf 8f4f 	dsb	sy
 800a2b2:	61fb      	str	r3, [r7, #28]
}
 800a2b4:	bf00      	nop
 800a2b6:	e7fe      	b.n	800a2b6 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a2b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d103      	bne.n	800a2c8 <xQueueGiveFromISR+0x58>
 800a2c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c2:	689b      	ldr	r3, [r3, #8]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d101      	bne.n	800a2cc <xQueueGiveFromISR+0x5c>
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	e000      	b.n	800a2ce <xQueueGiveFromISR+0x5e>
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d10a      	bne.n	800a2e8 <xQueueGiveFromISR+0x78>
	__asm volatile
 800a2d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d6:	f383 8811 	msr	BASEPRI, r3
 800a2da:	f3bf 8f6f 	isb	sy
 800a2de:	f3bf 8f4f 	dsb	sy
 800a2e2:	61bb      	str	r3, [r7, #24]
}
 800a2e4:	bf00      	nop
 800a2e6:	e7fe      	b.n	800a2e6 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a2e8:	f001 fc96 	bl	800bc18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a2ec:	f3ef 8211 	mrs	r2, BASEPRI
 800a2f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f4:	f383 8811 	msr	BASEPRI, r3
 800a2f8:	f3bf 8f6f 	isb	sy
 800a2fc:	f3bf 8f4f 	dsb	sy
 800a300:	617a      	str	r2, [r7, #20]
 800a302:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a304:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a306:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a30a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a30c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a30e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a312:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a314:	429a      	cmp	r2, r3
 800a316:	d22b      	bcs.n	800a370 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a31a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a31e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a324:	1c5a      	adds	r2, r3, #1
 800a326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a328:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a32a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a32e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a332:	d112      	bne.n	800a35a <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d016      	beq.n	800a36a <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a33c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a33e:	3324      	adds	r3, #36	; 0x24
 800a340:	4618      	mov	r0, r3
 800a342:	f000 fe9f 	bl	800b084 <xTaskRemoveFromEventList>
 800a346:	4603      	mov	r3, r0
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d00e      	beq.n	800a36a <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d00b      	beq.n	800a36a <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	2201      	movs	r2, #1
 800a356:	601a      	str	r2, [r3, #0]
 800a358:	e007      	b.n	800a36a <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a35a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a35e:	3301      	adds	r3, #1
 800a360:	b2db      	uxtb	r3, r3
 800a362:	b25a      	sxtb	r2, r3
 800a364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a366:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a36a:	2301      	movs	r3, #1
 800a36c:	637b      	str	r3, [r7, #52]	; 0x34
 800a36e:	e001      	b.n	800a374 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a370:	2300      	movs	r3, #0
 800a372:	637b      	str	r3, [r7, #52]	; 0x34
 800a374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a376:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a37e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a382:	4618      	mov	r0, r3
 800a384:	3738      	adds	r7, #56	; 0x38
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}
	...

0800a38c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b08e      	sub	sp, #56	; 0x38
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
 800a394:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a396:	2300      	movs	r3, #0
 800a398:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d10a      	bne.n	800a3be <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a3a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ac:	f383 8811 	msr	BASEPRI, r3
 800a3b0:	f3bf 8f6f 	isb	sy
 800a3b4:	f3bf 8f4f 	dsb	sy
 800a3b8:	623b      	str	r3, [r7, #32]
}
 800a3ba:	bf00      	nop
 800a3bc:	e7fe      	b.n	800a3bc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a3be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d00a      	beq.n	800a3dc <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a3c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ca:	f383 8811 	msr	BASEPRI, r3
 800a3ce:	f3bf 8f6f 	isb	sy
 800a3d2:	f3bf 8f4f 	dsb	sy
 800a3d6:	61fb      	str	r3, [r7, #28]
}
 800a3d8:	bf00      	nop
 800a3da:	e7fe      	b.n	800a3da <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a3dc:	f000 ffe8 	bl	800b3b0 <xTaskGetSchedulerState>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d102      	bne.n	800a3ec <xQueueSemaphoreTake+0x60>
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d101      	bne.n	800a3f0 <xQueueSemaphoreTake+0x64>
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	e000      	b.n	800a3f2 <xQueueSemaphoreTake+0x66>
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d10a      	bne.n	800a40c <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a3f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3fa:	f383 8811 	msr	BASEPRI, r3
 800a3fe:	f3bf 8f6f 	isb	sy
 800a402:	f3bf 8f4f 	dsb	sy
 800a406:	61bb      	str	r3, [r7, #24]
}
 800a408:	bf00      	nop
 800a40a:	e7fe      	b.n	800a40a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a40c:	f001 fb22 	bl	800ba54 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a414:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d024      	beq.n	800a466 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a41e:	1e5a      	subs	r2, r3, #1
 800a420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a422:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d104      	bne.n	800a436 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a42c:	f001 f968 	bl	800b700 <pvTaskIncrementMutexHeldCount>
 800a430:	4602      	mov	r2, r0
 800a432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a434:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a438:	691b      	ldr	r3, [r3, #16]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d00f      	beq.n	800a45e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a43e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a440:	3310      	adds	r3, #16
 800a442:	4618      	mov	r0, r3
 800a444:	f000 fe1e 	bl	800b084 <xTaskRemoveFromEventList>
 800a448:	4603      	mov	r3, r0
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d007      	beq.n	800a45e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a44e:	4b54      	ldr	r3, [pc, #336]	; (800a5a0 <xQueueSemaphoreTake+0x214>)
 800a450:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a454:	601a      	str	r2, [r3, #0]
 800a456:	f3bf 8f4f 	dsb	sy
 800a45a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a45e:	f001 fb29 	bl	800bab4 <vPortExitCritical>
				return pdPASS;
 800a462:	2301      	movs	r3, #1
 800a464:	e097      	b.n	800a596 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d111      	bne.n	800a490 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a46c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d00a      	beq.n	800a488 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a472:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a476:	f383 8811 	msr	BASEPRI, r3
 800a47a:	f3bf 8f6f 	isb	sy
 800a47e:	f3bf 8f4f 	dsb	sy
 800a482:	617b      	str	r3, [r7, #20]
}
 800a484:	bf00      	nop
 800a486:	e7fe      	b.n	800a486 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a488:	f001 fb14 	bl	800bab4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a48c:	2300      	movs	r3, #0
 800a48e:	e082      	b.n	800a596 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a492:	2b00      	cmp	r3, #0
 800a494:	d106      	bne.n	800a4a4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a496:	f107 030c 	add.w	r3, r7, #12
 800a49a:	4618      	mov	r0, r3
 800a49c:	f000 fe54 	bl	800b148 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a4a4:	f001 fb06 	bl	800bab4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a4a8:	f000 fbe0 	bl	800ac6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a4ac:	f001 fad2 	bl	800ba54 <vPortEnterCritical>
 800a4b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a4b6:	b25b      	sxtb	r3, r3
 800a4b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a4bc:	d103      	bne.n	800a4c6 <xQueueSemaphoreTake+0x13a>
 800a4be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a4c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a4cc:	b25b      	sxtb	r3, r3
 800a4ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a4d2:	d103      	bne.n	800a4dc <xQueueSemaphoreTake+0x150>
 800a4d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a4dc:	f001 faea 	bl	800bab4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a4e0:	463a      	mov	r2, r7
 800a4e2:	f107 030c 	add.w	r3, r7, #12
 800a4e6:	4611      	mov	r1, r2
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	f000 fe43 	bl	800b174 <xTaskCheckForTimeOut>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d132      	bne.n	800a55a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a4f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a4f6:	f000 f929 	bl	800a74c <prvIsQueueEmpty>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d026      	beq.n	800a54e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d109      	bne.n	800a51c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a508:	f001 faa4 	bl	800ba54 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a50c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a50e:	689b      	ldr	r3, [r3, #8]
 800a510:	4618      	mov	r0, r3
 800a512:	f000 ff6b 	bl	800b3ec <xTaskPriorityInherit>
 800a516:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a518:	f001 facc 	bl	800bab4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a51c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a51e:	3324      	adds	r3, #36	; 0x24
 800a520:	683a      	ldr	r2, [r7, #0]
 800a522:	4611      	mov	r1, r2
 800a524:	4618      	mov	r0, r3
 800a526:	f000 fd89 	bl	800b03c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a52a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a52c:	f000 f8bc 	bl	800a6a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a530:	f000 fbaa 	bl	800ac88 <xTaskResumeAll>
 800a534:	4603      	mov	r3, r0
 800a536:	2b00      	cmp	r3, #0
 800a538:	f47f af68 	bne.w	800a40c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a53c:	4b18      	ldr	r3, [pc, #96]	; (800a5a0 <xQueueSemaphoreTake+0x214>)
 800a53e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a542:	601a      	str	r2, [r3, #0]
 800a544:	f3bf 8f4f 	dsb	sy
 800a548:	f3bf 8f6f 	isb	sy
 800a54c:	e75e      	b.n	800a40c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a54e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a550:	f000 f8aa 	bl	800a6a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a554:	f000 fb98 	bl	800ac88 <xTaskResumeAll>
 800a558:	e758      	b.n	800a40c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a55a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a55c:	f000 f8a4 	bl	800a6a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a560:	f000 fb92 	bl	800ac88 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a564:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a566:	f000 f8f1 	bl	800a74c <prvIsQueueEmpty>
 800a56a:	4603      	mov	r3, r0
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	f43f af4d 	beq.w	800a40c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a574:	2b00      	cmp	r3, #0
 800a576:	d00d      	beq.n	800a594 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a578:	f001 fa6c 	bl	800ba54 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a57c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a57e:	f000 f811 	bl	800a5a4 <prvGetDisinheritPriorityAfterTimeout>
 800a582:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a586:	689b      	ldr	r3, [r3, #8]
 800a588:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a58a:	4618      	mov	r0, r3
 800a58c:	f001 f82a 	bl	800b5e4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a590:	f001 fa90 	bl	800bab4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a594:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a596:	4618      	mov	r0, r3
 800a598:	3738      	adds	r7, #56	; 0x38
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}
 800a59e:	bf00      	nop
 800a5a0:	e000ed04 	.word	0xe000ed04

0800a5a4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b085      	sub	sp, #20
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d006      	beq.n	800a5c2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f1c3 0307 	rsb	r3, r3, #7
 800a5be:	60fb      	str	r3, [r7, #12]
 800a5c0:	e001      	b.n	800a5c6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
	}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	3714      	adds	r7, #20
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d2:	4770      	bx	lr

0800a5d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b086      	sub	sp, #24
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	60f8      	str	r0, [r7, #12]
 800a5dc:	60b9      	str	r1, [r7, #8]
 800a5de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5e8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d10d      	bne.n	800a60e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d14d      	bne.n	800a696 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	689b      	ldr	r3, [r3, #8]
 800a5fe:	4618      	mov	r0, r3
 800a600:	f000 ff6a 	bl	800b4d8 <xTaskPriorityDisinherit>
 800a604:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	2200      	movs	r2, #0
 800a60a:	609a      	str	r2, [r3, #8]
 800a60c:	e043      	b.n	800a696 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d119      	bne.n	800a648 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	6858      	ldr	r0, [r3, #4]
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a61c:	461a      	mov	r2, r3
 800a61e:	68b9      	ldr	r1, [r7, #8]
 800a620:	f001 fb5e 	bl	800bce0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	685a      	ldr	r2, [r3, #4]
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a62c:	441a      	add	r2, r3
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	685a      	ldr	r2, [r3, #4]
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	689b      	ldr	r3, [r3, #8]
 800a63a:	429a      	cmp	r2, r3
 800a63c:	d32b      	bcc.n	800a696 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	681a      	ldr	r2, [r3, #0]
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	605a      	str	r2, [r3, #4]
 800a646:	e026      	b.n	800a696 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	68d8      	ldr	r0, [r3, #12]
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a650:	461a      	mov	r2, r3
 800a652:	68b9      	ldr	r1, [r7, #8]
 800a654:	f001 fb44 	bl	800bce0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	68da      	ldr	r2, [r3, #12]
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a660:	425b      	negs	r3, r3
 800a662:	441a      	add	r2, r3
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	68da      	ldr	r2, [r3, #12]
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	429a      	cmp	r2, r3
 800a672:	d207      	bcs.n	800a684 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	689a      	ldr	r2, [r3, #8]
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a67c:	425b      	negs	r3, r3
 800a67e:	441a      	add	r2, r3
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2b02      	cmp	r3, #2
 800a688:	d105      	bne.n	800a696 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a68a:	693b      	ldr	r3, [r7, #16]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d002      	beq.n	800a696 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a690:	693b      	ldr	r3, [r7, #16]
 800a692:	3b01      	subs	r3, #1
 800a694:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a696:	693b      	ldr	r3, [r7, #16]
 800a698:	1c5a      	adds	r2, r3, #1
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a69e:	697b      	ldr	r3, [r7, #20]
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	3718      	adds	r7, #24
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}

0800a6a8 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b084      	sub	sp, #16
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a6b0:	f001 f9d0 	bl	800ba54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a6ba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a6bc:	e011      	b.n	800a6e2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d012      	beq.n	800a6ec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	3324      	adds	r3, #36	; 0x24
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f000 fcda 	bl	800b084 <xTaskRemoveFromEventList>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d001      	beq.n	800a6da <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a6d6:	f000 fdaf 	bl	800b238 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a6da:	7bfb      	ldrb	r3, [r7, #15]
 800a6dc:	3b01      	subs	r3, #1
 800a6de:	b2db      	uxtb	r3, r3
 800a6e0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a6e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	dce9      	bgt.n	800a6be <prvUnlockQueue+0x16>
 800a6ea:	e000      	b.n	800a6ee <prvUnlockQueue+0x46>
					break;
 800a6ec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	22ff      	movs	r2, #255	; 0xff
 800a6f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a6f6:	f001 f9dd 	bl	800bab4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a6fa:	f001 f9ab 	bl	800ba54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a704:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a706:	e011      	b.n	800a72c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	691b      	ldr	r3, [r3, #16]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d012      	beq.n	800a736 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	3310      	adds	r3, #16
 800a714:	4618      	mov	r0, r3
 800a716:	f000 fcb5 	bl	800b084 <xTaskRemoveFromEventList>
 800a71a:	4603      	mov	r3, r0
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d001      	beq.n	800a724 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a720:	f000 fd8a 	bl	800b238 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a724:	7bbb      	ldrb	r3, [r7, #14]
 800a726:	3b01      	subs	r3, #1
 800a728:	b2db      	uxtb	r3, r3
 800a72a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a72c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a730:	2b00      	cmp	r3, #0
 800a732:	dce9      	bgt.n	800a708 <prvUnlockQueue+0x60>
 800a734:	e000      	b.n	800a738 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a736:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	22ff      	movs	r2, #255	; 0xff
 800a73c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a740:	f001 f9b8 	bl	800bab4 <vPortExitCritical>
}
 800a744:	bf00      	nop
 800a746:	3710      	adds	r7, #16
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}

0800a74c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b084      	sub	sp, #16
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a754:	f001 f97e 	bl	800ba54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d102      	bne.n	800a766 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a760:	2301      	movs	r3, #1
 800a762:	60fb      	str	r3, [r7, #12]
 800a764:	e001      	b.n	800a76a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a766:	2300      	movs	r3, #0
 800a768:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a76a:	f001 f9a3 	bl	800bab4 <vPortExitCritical>

	return xReturn;
 800a76e:	68fb      	ldr	r3, [r7, #12]
}
 800a770:	4618      	mov	r0, r3
 800a772:	3710      	adds	r7, #16
 800a774:	46bd      	mov	sp, r7
 800a776:	bd80      	pop	{r7, pc}

0800a778 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b084      	sub	sp, #16
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a780:	f001 f968 	bl	800ba54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a78c:	429a      	cmp	r2, r3
 800a78e:	d102      	bne.n	800a796 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a790:	2301      	movs	r3, #1
 800a792:	60fb      	str	r3, [r7, #12]
 800a794:	e001      	b.n	800a79a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a796:	2300      	movs	r3, #0
 800a798:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a79a:	f001 f98b 	bl	800bab4 <vPortExitCritical>

	return xReturn;
 800a79e:	68fb      	ldr	r3, [r7, #12]
}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	3710      	adds	r7, #16
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bd80      	pop	{r7, pc}

0800a7a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b08e      	sub	sp, #56	; 0x38
 800a7ac:	af04      	add	r7, sp, #16
 800a7ae:	60f8      	str	r0, [r7, #12]
 800a7b0:	60b9      	str	r1, [r7, #8]
 800a7b2:	607a      	str	r2, [r7, #4]
 800a7b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a7b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d10a      	bne.n	800a7d2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a7bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7c0:	f383 8811 	msr	BASEPRI, r3
 800a7c4:	f3bf 8f6f 	isb	sy
 800a7c8:	f3bf 8f4f 	dsb	sy
 800a7cc:	623b      	str	r3, [r7, #32]
}
 800a7ce:	bf00      	nop
 800a7d0:	e7fe      	b.n	800a7d0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a7d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d10a      	bne.n	800a7ee <xTaskCreateStatic+0x46>
	__asm volatile
 800a7d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7dc:	f383 8811 	msr	BASEPRI, r3
 800a7e0:	f3bf 8f6f 	isb	sy
 800a7e4:	f3bf 8f4f 	dsb	sy
 800a7e8:	61fb      	str	r3, [r7, #28]
}
 800a7ea:	bf00      	nop
 800a7ec:	e7fe      	b.n	800a7ec <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a7ee:	2358      	movs	r3, #88	; 0x58
 800a7f0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a7f2:	693b      	ldr	r3, [r7, #16]
 800a7f4:	2b58      	cmp	r3, #88	; 0x58
 800a7f6:	d00a      	beq.n	800a80e <xTaskCreateStatic+0x66>
	__asm volatile
 800a7f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7fc:	f383 8811 	msr	BASEPRI, r3
 800a800:	f3bf 8f6f 	isb	sy
 800a804:	f3bf 8f4f 	dsb	sy
 800a808:	61bb      	str	r3, [r7, #24]
}
 800a80a:	bf00      	nop
 800a80c:	e7fe      	b.n	800a80c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a80e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a812:	2b00      	cmp	r3, #0
 800a814:	d01a      	beq.n	800a84c <xTaskCreateStatic+0xa4>
 800a816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d017      	beq.n	800a84c <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a81c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a81e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a822:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a824:	631a      	str	r2, [r3, #48]	; 0x30
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a826:	2300      	movs	r3, #0
 800a828:	9303      	str	r3, [sp, #12]
 800a82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a82c:	9302      	str	r3, [sp, #8]
 800a82e:	f107 0314 	add.w	r3, r7, #20
 800a832:	9301      	str	r3, [sp, #4]
 800a834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a836:	9300      	str	r3, [sp, #0]
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	687a      	ldr	r2, [r7, #4]
 800a83c:	68b9      	ldr	r1, [r7, #8]
 800a83e:	68f8      	ldr	r0, [r7, #12]
 800a840:	f000 f80b 	bl	800a85a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a844:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a846:	f000 f893 	bl	800a970 <prvAddNewTaskToReadyList>
 800a84a:	e001      	b.n	800a850 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800a84c:	2300      	movs	r3, #0
 800a84e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a850:	697b      	ldr	r3, [r7, #20]
	}
 800a852:	4618      	mov	r0, r3
 800a854:	3728      	adds	r7, #40	; 0x28
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}

0800a85a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a85a:	b580      	push	{r7, lr}
 800a85c:	b088      	sub	sp, #32
 800a85e:	af00      	add	r7, sp, #0
 800a860:	60f8      	str	r0, [r7, #12]
 800a862:	60b9      	str	r1, [r7, #8]
 800a864:	607a      	str	r2, [r7, #4]
 800a866:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a86a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a872:	3b01      	subs	r3, #1
 800a874:	009b      	lsls	r3, r3, #2
 800a876:	4413      	add	r3, r2
 800a878:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a87a:	69bb      	ldr	r3, [r7, #24]
 800a87c:	f023 0307 	bic.w	r3, r3, #7
 800a880:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a882:	69bb      	ldr	r3, [r7, #24]
 800a884:	f003 0307 	and.w	r3, r3, #7
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d00a      	beq.n	800a8a2 <prvInitialiseNewTask+0x48>
	__asm volatile
 800a88c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a890:	f383 8811 	msr	BASEPRI, r3
 800a894:	f3bf 8f6f 	isb	sy
 800a898:	f3bf 8f4f 	dsb	sy
 800a89c:	617b      	str	r3, [r7, #20]
}
 800a89e:	bf00      	nop
 800a8a0:	e7fe      	b.n	800a8a0 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d01f      	beq.n	800a8e8 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	61fb      	str	r3, [r7, #28]
 800a8ac:	e012      	b.n	800a8d4 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a8ae:	68ba      	ldr	r2, [r7, #8]
 800a8b0:	69fb      	ldr	r3, [r7, #28]
 800a8b2:	4413      	add	r3, r2
 800a8b4:	7819      	ldrb	r1, [r3, #0]
 800a8b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8b8:	69fb      	ldr	r3, [r7, #28]
 800a8ba:	4413      	add	r3, r2
 800a8bc:	3334      	adds	r3, #52	; 0x34
 800a8be:	460a      	mov	r2, r1
 800a8c0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a8c2:	68ba      	ldr	r2, [r7, #8]
 800a8c4:	69fb      	ldr	r3, [r7, #28]
 800a8c6:	4413      	add	r3, r2
 800a8c8:	781b      	ldrb	r3, [r3, #0]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d006      	beq.n	800a8dc <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a8ce:	69fb      	ldr	r3, [r7, #28]
 800a8d0:	3301      	adds	r3, #1
 800a8d2:	61fb      	str	r3, [r7, #28]
 800a8d4:	69fb      	ldr	r3, [r7, #28]
 800a8d6:	2b0f      	cmp	r3, #15
 800a8d8:	d9e9      	bls.n	800a8ae <prvInitialiseNewTask+0x54>
 800a8da:	e000      	b.n	800a8de <prvInitialiseNewTask+0x84>
			{
				break;
 800a8dc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a8e6:	e003      	b.n	800a8f0 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a8e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a8f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8f2:	2b06      	cmp	r3, #6
 800a8f4:	d901      	bls.n	800a8fa <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a8f6:	2306      	movs	r3, #6
 800a8f8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a8fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a8fe:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a902:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a904:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a908:	2200      	movs	r2, #0
 800a90a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a90c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a90e:	3304      	adds	r3, #4
 800a910:	4618      	mov	r0, r3
 800a912:	f7ff f9eb 	bl	8009cec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a918:	3318      	adds	r3, #24
 800a91a:	4618      	mov	r0, r3
 800a91c:	f7ff f9e6 	bl	8009cec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a922:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a924:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a928:	f1c3 0207 	rsb	r2, r3, #7
 800a92c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a92e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a932:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a934:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800a936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a938:	2200      	movs	r2, #0
 800a93a:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a93c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a93e:	2200      	movs	r2, #0
 800a940:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a944:	2200      	movs	r2, #0
 800a946:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a94a:	683a      	ldr	r2, [r7, #0]
 800a94c:	68f9      	ldr	r1, [r7, #12]
 800a94e:	69b8      	ldr	r0, [r7, #24]
 800a950:	f000 ff50 	bl	800b7f4 <pxPortInitialiseStack>
 800a954:	4602      	mov	r2, r0
 800a956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a958:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a95a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d002      	beq.n	800a966 <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a962:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a964:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a966:	bf00      	nop
 800a968:	3720      	adds	r7, #32
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}
	...

0800a970 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b082      	sub	sp, #8
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a978:	f001 f86c 	bl	800ba54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a97c:	4b2a      	ldr	r3, [pc, #168]	; (800aa28 <prvAddNewTaskToReadyList+0xb8>)
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	3301      	adds	r3, #1
 800a982:	4a29      	ldr	r2, [pc, #164]	; (800aa28 <prvAddNewTaskToReadyList+0xb8>)
 800a984:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a986:	4b29      	ldr	r3, [pc, #164]	; (800aa2c <prvAddNewTaskToReadyList+0xbc>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d109      	bne.n	800a9a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a98e:	4a27      	ldr	r2, [pc, #156]	; (800aa2c <prvAddNewTaskToReadyList+0xbc>)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a994:	4b24      	ldr	r3, [pc, #144]	; (800aa28 <prvAddNewTaskToReadyList+0xb8>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	2b01      	cmp	r3, #1
 800a99a:	d110      	bne.n	800a9be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a99c:	f000 fc70 	bl	800b280 <prvInitialiseTaskLists>
 800a9a0:	e00d      	b.n	800a9be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a9a2:	4b23      	ldr	r3, [pc, #140]	; (800aa30 <prvAddNewTaskToReadyList+0xc0>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d109      	bne.n	800a9be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a9aa:	4b20      	ldr	r3, [pc, #128]	; (800aa2c <prvAddNewTaskToReadyList+0xbc>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9b4:	429a      	cmp	r2, r3
 800a9b6:	d802      	bhi.n	800a9be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a9b8:	4a1c      	ldr	r2, [pc, #112]	; (800aa2c <prvAddNewTaskToReadyList+0xbc>)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a9be:	4b1d      	ldr	r3, [pc, #116]	; (800aa34 <prvAddNewTaskToReadyList+0xc4>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	3301      	adds	r3, #1
 800a9c4:	4a1b      	ldr	r2, [pc, #108]	; (800aa34 <prvAddNewTaskToReadyList+0xc4>)
 800a9c6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9cc:	2201      	movs	r2, #1
 800a9ce:	409a      	lsls	r2, r3
 800a9d0:	4b19      	ldr	r3, [pc, #100]	; (800aa38 <prvAddNewTaskToReadyList+0xc8>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	4313      	orrs	r3, r2
 800a9d6:	4a18      	ldr	r2, [pc, #96]	; (800aa38 <prvAddNewTaskToReadyList+0xc8>)
 800a9d8:	6013      	str	r3, [r2, #0]
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9de:	4613      	mov	r3, r2
 800a9e0:	009b      	lsls	r3, r3, #2
 800a9e2:	4413      	add	r3, r2
 800a9e4:	009b      	lsls	r3, r3, #2
 800a9e6:	4a15      	ldr	r2, [pc, #84]	; (800aa3c <prvAddNewTaskToReadyList+0xcc>)
 800a9e8:	441a      	add	r2, r3
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	3304      	adds	r3, #4
 800a9ee:	4619      	mov	r1, r3
 800a9f0:	4610      	mov	r0, r2
 800a9f2:	f7ff f988 	bl	8009d06 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a9f6:	f001 f85d 	bl	800bab4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a9fa:	4b0d      	ldr	r3, [pc, #52]	; (800aa30 <prvAddNewTaskToReadyList+0xc0>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d00e      	beq.n	800aa20 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800aa02:	4b0a      	ldr	r3, [pc, #40]	; (800aa2c <prvAddNewTaskToReadyList+0xbc>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa0c:	429a      	cmp	r2, r3
 800aa0e:	d207      	bcs.n	800aa20 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800aa10:	4b0b      	ldr	r3, [pc, #44]	; (800aa40 <prvAddNewTaskToReadyList+0xd0>)
 800aa12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa16:	601a      	str	r2, [r3, #0]
 800aa18:	f3bf 8f4f 	dsb	sy
 800aa1c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa20:	bf00      	nop
 800aa22:	3708      	adds	r7, #8
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bd80      	pop	{r7, pc}
 800aa28:	200074f8 	.word	0x200074f8
 800aa2c:	200073f8 	.word	0x200073f8
 800aa30:	20007504 	.word	0x20007504
 800aa34:	20007514 	.word	0x20007514
 800aa38:	20007500 	.word	0x20007500
 800aa3c:	200073fc 	.word	0x200073fc
 800aa40:	e000ed04 	.word	0xe000ed04

0800aa44 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b08a      	sub	sp, #40	; 0x28
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
 800aa4c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800aa4e:	2300      	movs	r3, #0
 800aa50:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d10a      	bne.n	800aa6e <vTaskDelayUntil+0x2a>
	__asm volatile
 800aa58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa5c:	f383 8811 	msr	BASEPRI, r3
 800aa60:	f3bf 8f6f 	isb	sy
 800aa64:	f3bf 8f4f 	dsb	sy
 800aa68:	617b      	str	r3, [r7, #20]
}
 800aa6a:	bf00      	nop
 800aa6c:	e7fe      	b.n	800aa6c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d10a      	bne.n	800aa8a <vTaskDelayUntil+0x46>
	__asm volatile
 800aa74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa78:	f383 8811 	msr	BASEPRI, r3
 800aa7c:	f3bf 8f6f 	isb	sy
 800aa80:	f3bf 8f4f 	dsb	sy
 800aa84:	613b      	str	r3, [r7, #16]
}
 800aa86:	bf00      	nop
 800aa88:	e7fe      	b.n	800aa88 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800aa8a:	4b2a      	ldr	r3, [pc, #168]	; (800ab34 <vTaskDelayUntil+0xf0>)
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d00a      	beq.n	800aaa8 <vTaskDelayUntil+0x64>
	__asm volatile
 800aa92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa96:	f383 8811 	msr	BASEPRI, r3
 800aa9a:	f3bf 8f6f 	isb	sy
 800aa9e:	f3bf 8f4f 	dsb	sy
 800aaa2:	60fb      	str	r3, [r7, #12]
}
 800aaa4:	bf00      	nop
 800aaa6:	e7fe      	b.n	800aaa6 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800aaa8:	f000 f8e0 	bl	800ac6c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800aaac:	4b22      	ldr	r3, [pc, #136]	; (800ab38 <vTaskDelayUntil+0xf4>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	683a      	ldr	r2, [r7, #0]
 800aab8:	4413      	add	r3, r2
 800aaba:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	6a3a      	ldr	r2, [r7, #32]
 800aac2:	429a      	cmp	r2, r3
 800aac4:	d20b      	bcs.n	800aade <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	69fa      	ldr	r2, [r7, #28]
 800aacc:	429a      	cmp	r2, r3
 800aace:	d211      	bcs.n	800aaf4 <vTaskDelayUntil+0xb0>
 800aad0:	69fa      	ldr	r2, [r7, #28]
 800aad2:	6a3b      	ldr	r3, [r7, #32]
 800aad4:	429a      	cmp	r2, r3
 800aad6:	d90d      	bls.n	800aaf4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800aad8:	2301      	movs	r3, #1
 800aada:	627b      	str	r3, [r7, #36]	; 0x24
 800aadc:	e00a      	b.n	800aaf4 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	69fa      	ldr	r2, [r7, #28]
 800aae4:	429a      	cmp	r2, r3
 800aae6:	d303      	bcc.n	800aaf0 <vTaskDelayUntil+0xac>
 800aae8:	69fa      	ldr	r2, [r7, #28]
 800aaea:	6a3b      	ldr	r3, [r7, #32]
 800aaec:	429a      	cmp	r2, r3
 800aaee:	d901      	bls.n	800aaf4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	69fa      	ldr	r2, [r7, #28]
 800aaf8:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800aafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d006      	beq.n	800ab0e <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800ab00:	69fa      	ldr	r2, [r7, #28]
 800ab02:	6a3b      	ldr	r3, [r7, #32]
 800ab04:	1ad3      	subs	r3, r2, r3
 800ab06:	2100      	movs	r1, #0
 800ab08:	4618      	mov	r0, r3
 800ab0a:	f000 fe0d 	bl	800b728 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800ab0e:	f000 f8bb 	bl	800ac88 <xTaskResumeAll>
 800ab12:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ab14:	69bb      	ldr	r3, [r7, #24]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d107      	bne.n	800ab2a <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800ab1a:	4b08      	ldr	r3, [pc, #32]	; (800ab3c <vTaskDelayUntil+0xf8>)
 800ab1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab20:	601a      	str	r2, [r3, #0]
 800ab22:	f3bf 8f4f 	dsb	sy
 800ab26:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ab2a:	bf00      	nop
 800ab2c:	3728      	adds	r7, #40	; 0x28
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bd80      	pop	{r7, pc}
 800ab32:	bf00      	nop
 800ab34:	20007520 	.word	0x20007520
 800ab38:	200074fc 	.word	0x200074fc
 800ab3c:	e000ed04 	.word	0xe000ed04

0800ab40 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b084      	sub	sp, #16
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ab48:	2300      	movs	r3, #0
 800ab4a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d017      	beq.n	800ab82 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ab52:	4b13      	ldr	r3, [pc, #76]	; (800aba0 <vTaskDelay+0x60>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d00a      	beq.n	800ab70 <vTaskDelay+0x30>
	__asm volatile
 800ab5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab5e:	f383 8811 	msr	BASEPRI, r3
 800ab62:	f3bf 8f6f 	isb	sy
 800ab66:	f3bf 8f4f 	dsb	sy
 800ab6a:	60bb      	str	r3, [r7, #8]
}
 800ab6c:	bf00      	nop
 800ab6e:	e7fe      	b.n	800ab6e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ab70:	f000 f87c 	bl	800ac6c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ab74:	2100      	movs	r1, #0
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f000 fdd6 	bl	800b728 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ab7c:	f000 f884 	bl	800ac88 <xTaskResumeAll>
 800ab80:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d107      	bne.n	800ab98 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ab88:	4b06      	ldr	r3, [pc, #24]	; (800aba4 <vTaskDelay+0x64>)
 800ab8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab8e:	601a      	str	r2, [r3, #0]
 800ab90:	f3bf 8f4f 	dsb	sy
 800ab94:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ab98:	bf00      	nop
 800ab9a:	3710      	adds	r7, #16
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}
 800aba0:	20007520 	.word	0x20007520
 800aba4:	e000ed04 	.word	0xe000ed04

0800aba8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b08a      	sub	sp, #40	; 0x28
 800abac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800abae:	2300      	movs	r3, #0
 800abb0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800abb2:	2300      	movs	r3, #0
 800abb4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800abb6:	463a      	mov	r2, r7
 800abb8:	1d39      	adds	r1, r7, #4
 800abba:	f107 0308 	add.w	r3, r7, #8
 800abbe:	4618      	mov	r0, r3
 800abc0:	f7f8 f9e6 	bl	8002f90 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800abc4:	6839      	ldr	r1, [r7, #0]
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	68ba      	ldr	r2, [r7, #8]
 800abca:	9202      	str	r2, [sp, #8]
 800abcc:	9301      	str	r3, [sp, #4]
 800abce:	2300      	movs	r3, #0
 800abd0:	9300      	str	r3, [sp, #0]
 800abd2:	2300      	movs	r3, #0
 800abd4:	460a      	mov	r2, r1
 800abd6:	491f      	ldr	r1, [pc, #124]	; (800ac54 <vTaskStartScheduler+0xac>)
 800abd8:	481f      	ldr	r0, [pc, #124]	; (800ac58 <vTaskStartScheduler+0xb0>)
 800abda:	f7ff fde5 	bl	800a7a8 <xTaskCreateStatic>
 800abde:	4603      	mov	r3, r0
 800abe0:	4a1e      	ldr	r2, [pc, #120]	; (800ac5c <vTaskStartScheduler+0xb4>)
 800abe2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800abe4:	4b1d      	ldr	r3, [pc, #116]	; (800ac5c <vTaskStartScheduler+0xb4>)
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d002      	beq.n	800abf2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800abec:	2301      	movs	r3, #1
 800abee:	617b      	str	r3, [r7, #20]
 800abf0:	e001      	b.n	800abf6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800abf2:	2300      	movs	r3, #0
 800abf4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800abf6:	697b      	ldr	r3, [r7, #20]
 800abf8:	2b01      	cmp	r3, #1
 800abfa:	d118      	bne.n	800ac2e <vTaskStartScheduler+0x86>
	__asm volatile
 800abfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac00:	f383 8811 	msr	BASEPRI, r3
 800ac04:	f3bf 8f6f 	isb	sy
 800ac08:	f3bf 8f4f 	dsb	sy
 800ac0c:	613b      	str	r3, [r7, #16]
}
 800ac0e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ac10:	4b13      	ldr	r3, [pc, #76]	; (800ac60 <vTaskStartScheduler+0xb8>)
 800ac12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ac16:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ac18:	4b12      	ldr	r3, [pc, #72]	; (800ac64 <vTaskStartScheduler+0xbc>)
 800ac1a:	2201      	movs	r2, #1
 800ac1c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ac1e:	4b12      	ldr	r3, [pc, #72]	; (800ac68 <vTaskStartScheduler+0xc0>)
 800ac20:	2200      	movs	r2, #0
 800ac22:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800ac24:	f7f8 f99c 	bl	8002f60 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ac28:	f000 fe72 	bl	800b910 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ac2c:	e00e      	b.n	800ac4c <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ac2e:	697b      	ldr	r3, [r7, #20]
 800ac30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac34:	d10a      	bne.n	800ac4c <vTaskStartScheduler+0xa4>
	__asm volatile
 800ac36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac3a:	f383 8811 	msr	BASEPRI, r3
 800ac3e:	f3bf 8f6f 	isb	sy
 800ac42:	f3bf 8f4f 	dsb	sy
 800ac46:	60fb      	str	r3, [r7, #12]
}
 800ac48:	bf00      	nop
 800ac4a:	e7fe      	b.n	800ac4a <vTaskStartScheduler+0xa2>
}
 800ac4c:	bf00      	nop
 800ac4e:	3718      	adds	r7, #24
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}
 800ac54:	0800bd70 	.word	0x0800bd70
 800ac58:	0800b251 	.word	0x0800b251
 800ac5c:	2000751c 	.word	0x2000751c
 800ac60:	20007518 	.word	0x20007518
 800ac64:	20007504 	.word	0x20007504
 800ac68:	200074fc 	.word	0x200074fc

0800ac6c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ac70:	4b04      	ldr	r3, [pc, #16]	; (800ac84 <vTaskSuspendAll+0x18>)
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	3301      	adds	r3, #1
 800ac76:	4a03      	ldr	r2, [pc, #12]	; (800ac84 <vTaskSuspendAll+0x18>)
 800ac78:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ac7a:	bf00      	nop
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac82:	4770      	bx	lr
 800ac84:	20007520 	.word	0x20007520

0800ac88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b084      	sub	sp, #16
 800ac8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ac8e:	2300      	movs	r3, #0
 800ac90:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ac92:	2300      	movs	r3, #0
 800ac94:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ac96:	4b41      	ldr	r3, [pc, #260]	; (800ad9c <xTaskResumeAll+0x114>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d10a      	bne.n	800acb4 <xTaskResumeAll+0x2c>
	__asm volatile
 800ac9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aca2:	f383 8811 	msr	BASEPRI, r3
 800aca6:	f3bf 8f6f 	isb	sy
 800acaa:	f3bf 8f4f 	dsb	sy
 800acae:	603b      	str	r3, [r7, #0]
}
 800acb0:	bf00      	nop
 800acb2:	e7fe      	b.n	800acb2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800acb4:	f000 fece 	bl	800ba54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800acb8:	4b38      	ldr	r3, [pc, #224]	; (800ad9c <xTaskResumeAll+0x114>)
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	3b01      	subs	r3, #1
 800acbe:	4a37      	ldr	r2, [pc, #220]	; (800ad9c <xTaskResumeAll+0x114>)
 800acc0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800acc2:	4b36      	ldr	r3, [pc, #216]	; (800ad9c <xTaskResumeAll+0x114>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d161      	bne.n	800ad8e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800acca:	4b35      	ldr	r3, [pc, #212]	; (800ada0 <xTaskResumeAll+0x118>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d05d      	beq.n	800ad8e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800acd2:	e02e      	b.n	800ad32 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800acd4:	4b33      	ldr	r3, [pc, #204]	; (800ada4 <xTaskResumeAll+0x11c>)
 800acd6:	68db      	ldr	r3, [r3, #12]
 800acd8:	68db      	ldr	r3, [r3, #12]
 800acda:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	3318      	adds	r3, #24
 800ace0:	4618      	mov	r0, r3
 800ace2:	f7ff f86d 	bl	8009dc0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	3304      	adds	r3, #4
 800acea:	4618      	mov	r0, r3
 800acec:	f7ff f868 	bl	8009dc0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acf4:	2201      	movs	r2, #1
 800acf6:	409a      	lsls	r2, r3
 800acf8:	4b2b      	ldr	r3, [pc, #172]	; (800ada8 <xTaskResumeAll+0x120>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	4313      	orrs	r3, r2
 800acfe:	4a2a      	ldr	r2, [pc, #168]	; (800ada8 <xTaskResumeAll+0x120>)
 800ad00:	6013      	str	r3, [r2, #0]
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad06:	4613      	mov	r3, r2
 800ad08:	009b      	lsls	r3, r3, #2
 800ad0a:	4413      	add	r3, r2
 800ad0c:	009b      	lsls	r3, r3, #2
 800ad0e:	4a27      	ldr	r2, [pc, #156]	; (800adac <xTaskResumeAll+0x124>)
 800ad10:	441a      	add	r2, r3
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	3304      	adds	r3, #4
 800ad16:	4619      	mov	r1, r3
 800ad18:	4610      	mov	r0, r2
 800ad1a:	f7fe fff4 	bl	8009d06 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad22:	4b23      	ldr	r3, [pc, #140]	; (800adb0 <xTaskResumeAll+0x128>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad28:	429a      	cmp	r2, r3
 800ad2a:	d302      	bcc.n	800ad32 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800ad2c:	4b21      	ldr	r3, [pc, #132]	; (800adb4 <xTaskResumeAll+0x12c>)
 800ad2e:	2201      	movs	r2, #1
 800ad30:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ad32:	4b1c      	ldr	r3, [pc, #112]	; (800ada4 <xTaskResumeAll+0x11c>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d1cc      	bne.n	800acd4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d001      	beq.n	800ad44 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ad40:	f000 fb16 	bl	800b370 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ad44:	4b1c      	ldr	r3, [pc, #112]	; (800adb8 <xTaskResumeAll+0x130>)
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d010      	beq.n	800ad72 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ad50:	f000 f846 	bl	800ade0 <xTaskIncrementTick>
 800ad54:	4603      	mov	r3, r0
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d002      	beq.n	800ad60 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800ad5a:	4b16      	ldr	r3, [pc, #88]	; (800adb4 <xTaskResumeAll+0x12c>)
 800ad5c:	2201      	movs	r2, #1
 800ad5e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	3b01      	subs	r3, #1
 800ad64:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d1f1      	bne.n	800ad50 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800ad6c:	4b12      	ldr	r3, [pc, #72]	; (800adb8 <xTaskResumeAll+0x130>)
 800ad6e:	2200      	movs	r2, #0
 800ad70:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ad72:	4b10      	ldr	r3, [pc, #64]	; (800adb4 <xTaskResumeAll+0x12c>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d009      	beq.n	800ad8e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ad7a:	2301      	movs	r3, #1
 800ad7c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ad7e:	4b0f      	ldr	r3, [pc, #60]	; (800adbc <xTaskResumeAll+0x134>)
 800ad80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad84:	601a      	str	r2, [r3, #0]
 800ad86:	f3bf 8f4f 	dsb	sy
 800ad8a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ad8e:	f000 fe91 	bl	800bab4 <vPortExitCritical>

	return xAlreadyYielded;
 800ad92:	68bb      	ldr	r3, [r7, #8]
}
 800ad94:	4618      	mov	r0, r3
 800ad96:	3710      	adds	r7, #16
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd80      	pop	{r7, pc}
 800ad9c:	20007520 	.word	0x20007520
 800ada0:	200074f8 	.word	0x200074f8
 800ada4:	200074b8 	.word	0x200074b8
 800ada8:	20007500 	.word	0x20007500
 800adac:	200073fc 	.word	0x200073fc
 800adb0:	200073f8 	.word	0x200073f8
 800adb4:	2000750c 	.word	0x2000750c
 800adb8:	20007508 	.word	0x20007508
 800adbc:	e000ed04 	.word	0xe000ed04

0800adc0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800adc0:	b480      	push	{r7}
 800adc2:	b083      	sub	sp, #12
 800adc4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800adc6:	4b05      	ldr	r3, [pc, #20]	; (800addc <xTaskGetTickCount+0x1c>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800adcc:	687b      	ldr	r3, [r7, #4]
}
 800adce:	4618      	mov	r0, r3
 800add0:	370c      	adds	r7, #12
 800add2:	46bd      	mov	sp, r7
 800add4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add8:	4770      	bx	lr
 800adda:	bf00      	nop
 800addc:	200074fc 	.word	0x200074fc

0800ade0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b086      	sub	sp, #24
 800ade4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ade6:	2300      	movs	r3, #0
 800ade8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800adea:	4b4e      	ldr	r3, [pc, #312]	; (800af24 <xTaskIncrementTick+0x144>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	f040 808e 	bne.w	800af10 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800adf4:	4b4c      	ldr	r3, [pc, #304]	; (800af28 <xTaskIncrementTick+0x148>)
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	3301      	adds	r3, #1
 800adfa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800adfc:	4a4a      	ldr	r2, [pc, #296]	; (800af28 <xTaskIncrementTick+0x148>)
 800adfe:	693b      	ldr	r3, [r7, #16]
 800ae00:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ae02:	693b      	ldr	r3, [r7, #16]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d120      	bne.n	800ae4a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ae08:	4b48      	ldr	r3, [pc, #288]	; (800af2c <xTaskIncrementTick+0x14c>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d00a      	beq.n	800ae28 <xTaskIncrementTick+0x48>
	__asm volatile
 800ae12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae16:	f383 8811 	msr	BASEPRI, r3
 800ae1a:	f3bf 8f6f 	isb	sy
 800ae1e:	f3bf 8f4f 	dsb	sy
 800ae22:	603b      	str	r3, [r7, #0]
}
 800ae24:	bf00      	nop
 800ae26:	e7fe      	b.n	800ae26 <xTaskIncrementTick+0x46>
 800ae28:	4b40      	ldr	r3, [pc, #256]	; (800af2c <xTaskIncrementTick+0x14c>)
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	60fb      	str	r3, [r7, #12]
 800ae2e:	4b40      	ldr	r3, [pc, #256]	; (800af30 <xTaskIncrementTick+0x150>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	4a3e      	ldr	r2, [pc, #248]	; (800af2c <xTaskIncrementTick+0x14c>)
 800ae34:	6013      	str	r3, [r2, #0]
 800ae36:	4a3e      	ldr	r2, [pc, #248]	; (800af30 <xTaskIncrementTick+0x150>)
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	6013      	str	r3, [r2, #0]
 800ae3c:	4b3d      	ldr	r3, [pc, #244]	; (800af34 <xTaskIncrementTick+0x154>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	3301      	adds	r3, #1
 800ae42:	4a3c      	ldr	r2, [pc, #240]	; (800af34 <xTaskIncrementTick+0x154>)
 800ae44:	6013      	str	r3, [r2, #0]
 800ae46:	f000 fa93 	bl	800b370 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ae4a:	4b3b      	ldr	r3, [pc, #236]	; (800af38 <xTaskIncrementTick+0x158>)
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	693a      	ldr	r2, [r7, #16]
 800ae50:	429a      	cmp	r2, r3
 800ae52:	d348      	bcc.n	800aee6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ae54:	4b35      	ldr	r3, [pc, #212]	; (800af2c <xTaskIncrementTick+0x14c>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d104      	bne.n	800ae68 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae5e:	4b36      	ldr	r3, [pc, #216]	; (800af38 <xTaskIncrementTick+0x158>)
 800ae60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ae64:	601a      	str	r2, [r3, #0]
					break;
 800ae66:	e03e      	b.n	800aee6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae68:	4b30      	ldr	r3, [pc, #192]	; (800af2c <xTaskIncrementTick+0x14c>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	68db      	ldr	r3, [r3, #12]
 800ae6e:	68db      	ldr	r3, [r3, #12]
 800ae70:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	685b      	ldr	r3, [r3, #4]
 800ae76:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ae78:	693a      	ldr	r2, [r7, #16]
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	429a      	cmp	r2, r3
 800ae7e:	d203      	bcs.n	800ae88 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ae80:	4a2d      	ldr	r2, [pc, #180]	; (800af38 <xTaskIncrementTick+0x158>)
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ae86:	e02e      	b.n	800aee6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ae88:	68bb      	ldr	r3, [r7, #8]
 800ae8a:	3304      	adds	r3, #4
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f7fe ff97 	bl	8009dc0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ae92:	68bb      	ldr	r3, [r7, #8]
 800ae94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d004      	beq.n	800aea4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ae9a:	68bb      	ldr	r3, [r7, #8]
 800ae9c:	3318      	adds	r3, #24
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f7fe ff8e 	bl	8009dc0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aea8:	2201      	movs	r2, #1
 800aeaa:	409a      	lsls	r2, r3
 800aeac:	4b23      	ldr	r3, [pc, #140]	; (800af3c <xTaskIncrementTick+0x15c>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	4313      	orrs	r3, r2
 800aeb2:	4a22      	ldr	r2, [pc, #136]	; (800af3c <xTaskIncrementTick+0x15c>)
 800aeb4:	6013      	str	r3, [r2, #0]
 800aeb6:	68bb      	ldr	r3, [r7, #8]
 800aeb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aeba:	4613      	mov	r3, r2
 800aebc:	009b      	lsls	r3, r3, #2
 800aebe:	4413      	add	r3, r2
 800aec0:	009b      	lsls	r3, r3, #2
 800aec2:	4a1f      	ldr	r2, [pc, #124]	; (800af40 <xTaskIncrementTick+0x160>)
 800aec4:	441a      	add	r2, r3
 800aec6:	68bb      	ldr	r3, [r7, #8]
 800aec8:	3304      	adds	r3, #4
 800aeca:	4619      	mov	r1, r3
 800aecc:	4610      	mov	r0, r2
 800aece:	f7fe ff1a 	bl	8009d06 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aed6:	4b1b      	ldr	r3, [pc, #108]	; (800af44 <xTaskIncrementTick+0x164>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aedc:	429a      	cmp	r2, r3
 800aede:	d3b9      	bcc.n	800ae54 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800aee0:	2301      	movs	r3, #1
 800aee2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aee4:	e7b6      	b.n	800ae54 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800aee6:	4b17      	ldr	r3, [pc, #92]	; (800af44 <xTaskIncrementTick+0x164>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aeec:	4914      	ldr	r1, [pc, #80]	; (800af40 <xTaskIncrementTick+0x160>)
 800aeee:	4613      	mov	r3, r2
 800aef0:	009b      	lsls	r3, r3, #2
 800aef2:	4413      	add	r3, r2
 800aef4:	009b      	lsls	r3, r3, #2
 800aef6:	440b      	add	r3, r1
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	2b01      	cmp	r3, #1
 800aefc:	d901      	bls.n	800af02 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800aefe:	2301      	movs	r3, #1
 800af00:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800af02:	4b11      	ldr	r3, [pc, #68]	; (800af48 <xTaskIncrementTick+0x168>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d007      	beq.n	800af1a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800af0a:	2301      	movs	r3, #1
 800af0c:	617b      	str	r3, [r7, #20]
 800af0e:	e004      	b.n	800af1a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800af10:	4b0e      	ldr	r3, [pc, #56]	; (800af4c <xTaskIncrementTick+0x16c>)
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	3301      	adds	r3, #1
 800af16:	4a0d      	ldr	r2, [pc, #52]	; (800af4c <xTaskIncrementTick+0x16c>)
 800af18:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800af1a:	697b      	ldr	r3, [r7, #20]
}
 800af1c:	4618      	mov	r0, r3
 800af1e:	3718      	adds	r7, #24
 800af20:	46bd      	mov	sp, r7
 800af22:	bd80      	pop	{r7, pc}
 800af24:	20007520 	.word	0x20007520
 800af28:	200074fc 	.word	0x200074fc
 800af2c:	200074b0 	.word	0x200074b0
 800af30:	200074b4 	.word	0x200074b4
 800af34:	20007510 	.word	0x20007510
 800af38:	20007518 	.word	0x20007518
 800af3c:	20007500 	.word	0x20007500
 800af40:	200073fc 	.word	0x200073fc
 800af44:	200073f8 	.word	0x200073f8
 800af48:	2000750c 	.word	0x2000750c
 800af4c:	20007508 	.word	0x20007508

0800af50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b086      	sub	sp, #24
 800af54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800af56:	4b32      	ldr	r3, [pc, #200]	; (800b020 <vTaskSwitchContext+0xd0>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d003      	beq.n	800af66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800af5e:	4b31      	ldr	r3, [pc, #196]	; (800b024 <vTaskSwitchContext+0xd4>)
 800af60:	2201      	movs	r2, #1
 800af62:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800af64:	e058      	b.n	800b018 <vTaskSwitchContext+0xc8>
		xYieldPending = pdFALSE;
 800af66:	4b2f      	ldr	r3, [pc, #188]	; (800b024 <vTaskSwitchContext+0xd4>)
 800af68:	2200      	movs	r2, #0
 800af6a:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800af6c:	f7f8 f804 	bl	8002f78 <getRunTimeCounterValue>
 800af70:	4603      	mov	r3, r0
 800af72:	4a2d      	ldr	r2, [pc, #180]	; (800b028 <vTaskSwitchContext+0xd8>)
 800af74:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800af76:	4b2c      	ldr	r3, [pc, #176]	; (800b028 <vTaskSwitchContext+0xd8>)
 800af78:	681a      	ldr	r2, [r3, #0]
 800af7a:	4b2c      	ldr	r3, [pc, #176]	; (800b02c <vTaskSwitchContext+0xdc>)
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	429a      	cmp	r2, r3
 800af80:	d909      	bls.n	800af96 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800af82:	4b2b      	ldr	r3, [pc, #172]	; (800b030 <vTaskSwitchContext+0xe0>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800af88:	4a27      	ldr	r2, [pc, #156]	; (800b028 <vTaskSwitchContext+0xd8>)
 800af8a:	6810      	ldr	r0, [r2, #0]
 800af8c:	4a27      	ldr	r2, [pc, #156]	; (800b02c <vTaskSwitchContext+0xdc>)
 800af8e:	6812      	ldr	r2, [r2, #0]
 800af90:	1a82      	subs	r2, r0, r2
 800af92:	440a      	add	r2, r1
 800af94:	64da      	str	r2, [r3, #76]	; 0x4c
			ulTaskSwitchedInTime = ulTotalRunTime;
 800af96:	4b24      	ldr	r3, [pc, #144]	; (800b028 <vTaskSwitchContext+0xd8>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	4a24      	ldr	r2, [pc, #144]	; (800b02c <vTaskSwitchContext+0xdc>)
 800af9c:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af9e:	4b25      	ldr	r3, [pc, #148]	; (800b034 <vTaskSwitchContext+0xe4>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	fab3 f383 	clz	r3, r3
 800afaa:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800afac:	7afb      	ldrb	r3, [r7, #11]
 800afae:	f1c3 031f 	rsb	r3, r3, #31
 800afb2:	617b      	str	r3, [r7, #20]
 800afb4:	4920      	ldr	r1, [pc, #128]	; (800b038 <vTaskSwitchContext+0xe8>)
 800afb6:	697a      	ldr	r2, [r7, #20]
 800afb8:	4613      	mov	r3, r2
 800afba:	009b      	lsls	r3, r3, #2
 800afbc:	4413      	add	r3, r2
 800afbe:	009b      	lsls	r3, r3, #2
 800afc0:	440b      	add	r3, r1
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d10a      	bne.n	800afde <vTaskSwitchContext+0x8e>
	__asm volatile
 800afc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afcc:	f383 8811 	msr	BASEPRI, r3
 800afd0:	f3bf 8f6f 	isb	sy
 800afd4:	f3bf 8f4f 	dsb	sy
 800afd8:	607b      	str	r3, [r7, #4]
}
 800afda:	bf00      	nop
 800afdc:	e7fe      	b.n	800afdc <vTaskSwitchContext+0x8c>
 800afde:	697a      	ldr	r2, [r7, #20]
 800afe0:	4613      	mov	r3, r2
 800afe2:	009b      	lsls	r3, r3, #2
 800afe4:	4413      	add	r3, r2
 800afe6:	009b      	lsls	r3, r3, #2
 800afe8:	4a13      	ldr	r2, [pc, #76]	; (800b038 <vTaskSwitchContext+0xe8>)
 800afea:	4413      	add	r3, r2
 800afec:	613b      	str	r3, [r7, #16]
 800afee:	693b      	ldr	r3, [r7, #16]
 800aff0:	685b      	ldr	r3, [r3, #4]
 800aff2:	685a      	ldr	r2, [r3, #4]
 800aff4:	693b      	ldr	r3, [r7, #16]
 800aff6:	605a      	str	r2, [r3, #4]
 800aff8:	693b      	ldr	r3, [r7, #16]
 800affa:	685a      	ldr	r2, [r3, #4]
 800affc:	693b      	ldr	r3, [r7, #16]
 800affe:	3308      	adds	r3, #8
 800b000:	429a      	cmp	r2, r3
 800b002:	d104      	bne.n	800b00e <vTaskSwitchContext+0xbe>
 800b004:	693b      	ldr	r3, [r7, #16]
 800b006:	685b      	ldr	r3, [r3, #4]
 800b008:	685a      	ldr	r2, [r3, #4]
 800b00a:	693b      	ldr	r3, [r7, #16]
 800b00c:	605a      	str	r2, [r3, #4]
 800b00e:	693b      	ldr	r3, [r7, #16]
 800b010:	685b      	ldr	r3, [r3, #4]
 800b012:	68db      	ldr	r3, [r3, #12]
 800b014:	4a06      	ldr	r2, [pc, #24]	; (800b030 <vTaskSwitchContext+0xe0>)
 800b016:	6013      	str	r3, [r2, #0]
}
 800b018:	bf00      	nop
 800b01a:	3718      	adds	r7, #24
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}
 800b020:	20007520 	.word	0x20007520
 800b024:	2000750c 	.word	0x2000750c
 800b028:	20007528 	.word	0x20007528
 800b02c:	20007524 	.word	0x20007524
 800b030:	200073f8 	.word	0x200073f8
 800b034:	20007500 	.word	0x20007500
 800b038:	200073fc 	.word	0x200073fc

0800b03c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b084      	sub	sp, #16
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
 800b044:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d10a      	bne.n	800b062 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b04c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b050:	f383 8811 	msr	BASEPRI, r3
 800b054:	f3bf 8f6f 	isb	sy
 800b058:	f3bf 8f4f 	dsb	sy
 800b05c:	60fb      	str	r3, [r7, #12]
}
 800b05e:	bf00      	nop
 800b060:	e7fe      	b.n	800b060 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b062:	4b07      	ldr	r3, [pc, #28]	; (800b080 <vTaskPlaceOnEventList+0x44>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	3318      	adds	r3, #24
 800b068:	4619      	mov	r1, r3
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f7fe fe6f 	bl	8009d4e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b070:	2101      	movs	r1, #1
 800b072:	6838      	ldr	r0, [r7, #0]
 800b074:	f000 fb58 	bl	800b728 <prvAddCurrentTaskToDelayedList>
}
 800b078:	bf00      	nop
 800b07a:	3710      	adds	r7, #16
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}
 800b080:	200073f8 	.word	0x200073f8

0800b084 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b086      	sub	sp, #24
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	68db      	ldr	r3, [r3, #12]
 800b090:	68db      	ldr	r3, [r3, #12]
 800b092:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b094:	693b      	ldr	r3, [r7, #16]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d10a      	bne.n	800b0b0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b09a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b09e:	f383 8811 	msr	BASEPRI, r3
 800b0a2:	f3bf 8f6f 	isb	sy
 800b0a6:	f3bf 8f4f 	dsb	sy
 800b0aa:	60fb      	str	r3, [r7, #12]
}
 800b0ac:	bf00      	nop
 800b0ae:	e7fe      	b.n	800b0ae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b0b0:	693b      	ldr	r3, [r7, #16]
 800b0b2:	3318      	adds	r3, #24
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	f7fe fe83 	bl	8009dc0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b0ba:	4b1d      	ldr	r3, [pc, #116]	; (800b130 <xTaskRemoveFromEventList+0xac>)
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d11c      	bne.n	800b0fc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b0c2:	693b      	ldr	r3, [r7, #16]
 800b0c4:	3304      	adds	r3, #4
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	f7fe fe7a 	bl	8009dc0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b0cc:	693b      	ldr	r3, [r7, #16]
 800b0ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0d0:	2201      	movs	r2, #1
 800b0d2:	409a      	lsls	r2, r3
 800b0d4:	4b17      	ldr	r3, [pc, #92]	; (800b134 <xTaskRemoveFromEventList+0xb0>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	4313      	orrs	r3, r2
 800b0da:	4a16      	ldr	r2, [pc, #88]	; (800b134 <xTaskRemoveFromEventList+0xb0>)
 800b0dc:	6013      	str	r3, [r2, #0]
 800b0de:	693b      	ldr	r3, [r7, #16]
 800b0e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0e2:	4613      	mov	r3, r2
 800b0e4:	009b      	lsls	r3, r3, #2
 800b0e6:	4413      	add	r3, r2
 800b0e8:	009b      	lsls	r3, r3, #2
 800b0ea:	4a13      	ldr	r2, [pc, #76]	; (800b138 <xTaskRemoveFromEventList+0xb4>)
 800b0ec:	441a      	add	r2, r3
 800b0ee:	693b      	ldr	r3, [r7, #16]
 800b0f0:	3304      	adds	r3, #4
 800b0f2:	4619      	mov	r1, r3
 800b0f4:	4610      	mov	r0, r2
 800b0f6:	f7fe fe06 	bl	8009d06 <vListInsertEnd>
 800b0fa:	e005      	b.n	800b108 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b0fc:	693b      	ldr	r3, [r7, #16]
 800b0fe:	3318      	adds	r3, #24
 800b100:	4619      	mov	r1, r3
 800b102:	480e      	ldr	r0, [pc, #56]	; (800b13c <xTaskRemoveFromEventList+0xb8>)
 800b104:	f7fe fdff 	bl	8009d06 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b108:	693b      	ldr	r3, [r7, #16]
 800b10a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b10c:	4b0c      	ldr	r3, [pc, #48]	; (800b140 <xTaskRemoveFromEventList+0xbc>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b112:	429a      	cmp	r2, r3
 800b114:	d905      	bls.n	800b122 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b116:	2301      	movs	r3, #1
 800b118:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b11a:	4b0a      	ldr	r3, [pc, #40]	; (800b144 <xTaskRemoveFromEventList+0xc0>)
 800b11c:	2201      	movs	r2, #1
 800b11e:	601a      	str	r2, [r3, #0]
 800b120:	e001      	b.n	800b126 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800b122:	2300      	movs	r3, #0
 800b124:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b126:	697b      	ldr	r3, [r7, #20]
}
 800b128:	4618      	mov	r0, r3
 800b12a:	3718      	adds	r7, #24
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd80      	pop	{r7, pc}
 800b130:	20007520 	.word	0x20007520
 800b134:	20007500 	.word	0x20007500
 800b138:	200073fc 	.word	0x200073fc
 800b13c:	200074b8 	.word	0x200074b8
 800b140:	200073f8 	.word	0x200073f8
 800b144:	2000750c 	.word	0x2000750c

0800b148 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b148:	b480      	push	{r7}
 800b14a:	b083      	sub	sp, #12
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b150:	4b06      	ldr	r3, [pc, #24]	; (800b16c <vTaskInternalSetTimeOutState+0x24>)
 800b152:	681a      	ldr	r2, [r3, #0]
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b158:	4b05      	ldr	r3, [pc, #20]	; (800b170 <vTaskInternalSetTimeOutState+0x28>)
 800b15a:	681a      	ldr	r2, [r3, #0]
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	605a      	str	r2, [r3, #4]
}
 800b160:	bf00      	nop
 800b162:	370c      	adds	r7, #12
 800b164:	46bd      	mov	sp, r7
 800b166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16a:	4770      	bx	lr
 800b16c:	20007510 	.word	0x20007510
 800b170:	200074fc 	.word	0x200074fc

0800b174 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b088      	sub	sp, #32
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
 800b17c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d10a      	bne.n	800b19a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b184:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b188:	f383 8811 	msr	BASEPRI, r3
 800b18c:	f3bf 8f6f 	isb	sy
 800b190:	f3bf 8f4f 	dsb	sy
 800b194:	613b      	str	r3, [r7, #16]
}
 800b196:	bf00      	nop
 800b198:	e7fe      	b.n	800b198 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d10a      	bne.n	800b1b6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b1a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a4:	f383 8811 	msr	BASEPRI, r3
 800b1a8:	f3bf 8f6f 	isb	sy
 800b1ac:	f3bf 8f4f 	dsb	sy
 800b1b0:	60fb      	str	r3, [r7, #12]
}
 800b1b2:	bf00      	nop
 800b1b4:	e7fe      	b.n	800b1b4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b1b6:	f000 fc4d 	bl	800ba54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b1ba:	4b1d      	ldr	r3, [pc, #116]	; (800b230 <xTaskCheckForTimeOut+0xbc>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	685b      	ldr	r3, [r3, #4]
 800b1c4:	69ba      	ldr	r2, [r7, #24]
 800b1c6:	1ad3      	subs	r3, r2, r3
 800b1c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b1d2:	d102      	bne.n	800b1da <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	61fb      	str	r3, [r7, #28]
 800b1d8:	e023      	b.n	800b222 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681a      	ldr	r2, [r3, #0]
 800b1de:	4b15      	ldr	r3, [pc, #84]	; (800b234 <xTaskCheckForTimeOut+0xc0>)
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	429a      	cmp	r2, r3
 800b1e4:	d007      	beq.n	800b1f6 <xTaskCheckForTimeOut+0x82>
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	685b      	ldr	r3, [r3, #4]
 800b1ea:	69ba      	ldr	r2, [r7, #24]
 800b1ec:	429a      	cmp	r2, r3
 800b1ee:	d302      	bcc.n	800b1f6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	61fb      	str	r3, [r7, #28]
 800b1f4:	e015      	b.n	800b222 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	697a      	ldr	r2, [r7, #20]
 800b1fc:	429a      	cmp	r2, r3
 800b1fe:	d20b      	bcs.n	800b218 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	681a      	ldr	r2, [r3, #0]
 800b204:	697b      	ldr	r3, [r7, #20]
 800b206:	1ad2      	subs	r2, r2, r3
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b20c:	6878      	ldr	r0, [r7, #4]
 800b20e:	f7ff ff9b 	bl	800b148 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b212:	2300      	movs	r3, #0
 800b214:	61fb      	str	r3, [r7, #28]
 800b216:	e004      	b.n	800b222 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	2200      	movs	r2, #0
 800b21c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b21e:	2301      	movs	r3, #1
 800b220:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b222:	f000 fc47 	bl	800bab4 <vPortExitCritical>

	return xReturn;
 800b226:	69fb      	ldr	r3, [r7, #28]
}
 800b228:	4618      	mov	r0, r3
 800b22a:	3720      	adds	r7, #32
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd80      	pop	{r7, pc}
 800b230:	200074fc 	.word	0x200074fc
 800b234:	20007510 	.word	0x20007510

0800b238 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b238:	b480      	push	{r7}
 800b23a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b23c:	4b03      	ldr	r3, [pc, #12]	; (800b24c <vTaskMissedYield+0x14>)
 800b23e:	2201      	movs	r2, #1
 800b240:	601a      	str	r2, [r3, #0]
}
 800b242:	bf00      	nop
 800b244:	46bd      	mov	sp, r7
 800b246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24a:	4770      	bx	lr
 800b24c:	2000750c 	.word	0x2000750c

0800b250 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b082      	sub	sp, #8
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b258:	f000 f852 	bl	800b300 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b25c:	4b06      	ldr	r3, [pc, #24]	; (800b278 <prvIdleTask+0x28>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	2b01      	cmp	r3, #1
 800b262:	d9f9      	bls.n	800b258 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b264:	4b05      	ldr	r3, [pc, #20]	; (800b27c <prvIdleTask+0x2c>)
 800b266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b26a:	601a      	str	r2, [r3, #0]
 800b26c:	f3bf 8f4f 	dsb	sy
 800b270:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b274:	e7f0      	b.n	800b258 <prvIdleTask+0x8>
 800b276:	bf00      	nop
 800b278:	200073fc 	.word	0x200073fc
 800b27c:	e000ed04 	.word	0xe000ed04

0800b280 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b082      	sub	sp, #8
 800b284:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b286:	2300      	movs	r3, #0
 800b288:	607b      	str	r3, [r7, #4]
 800b28a:	e00c      	b.n	800b2a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b28c:	687a      	ldr	r2, [r7, #4]
 800b28e:	4613      	mov	r3, r2
 800b290:	009b      	lsls	r3, r3, #2
 800b292:	4413      	add	r3, r2
 800b294:	009b      	lsls	r3, r3, #2
 800b296:	4a12      	ldr	r2, [pc, #72]	; (800b2e0 <prvInitialiseTaskLists+0x60>)
 800b298:	4413      	add	r3, r2
 800b29a:	4618      	mov	r0, r3
 800b29c:	f7fe fd06 	bl	8009cac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	3301      	adds	r3, #1
 800b2a4:	607b      	str	r3, [r7, #4]
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	2b06      	cmp	r3, #6
 800b2aa:	d9ef      	bls.n	800b28c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b2ac:	480d      	ldr	r0, [pc, #52]	; (800b2e4 <prvInitialiseTaskLists+0x64>)
 800b2ae:	f7fe fcfd 	bl	8009cac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b2b2:	480d      	ldr	r0, [pc, #52]	; (800b2e8 <prvInitialiseTaskLists+0x68>)
 800b2b4:	f7fe fcfa 	bl	8009cac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b2b8:	480c      	ldr	r0, [pc, #48]	; (800b2ec <prvInitialiseTaskLists+0x6c>)
 800b2ba:	f7fe fcf7 	bl	8009cac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b2be:	480c      	ldr	r0, [pc, #48]	; (800b2f0 <prvInitialiseTaskLists+0x70>)
 800b2c0:	f7fe fcf4 	bl	8009cac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b2c4:	480b      	ldr	r0, [pc, #44]	; (800b2f4 <prvInitialiseTaskLists+0x74>)
 800b2c6:	f7fe fcf1 	bl	8009cac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b2ca:	4b0b      	ldr	r3, [pc, #44]	; (800b2f8 <prvInitialiseTaskLists+0x78>)
 800b2cc:	4a05      	ldr	r2, [pc, #20]	; (800b2e4 <prvInitialiseTaskLists+0x64>)
 800b2ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b2d0:	4b0a      	ldr	r3, [pc, #40]	; (800b2fc <prvInitialiseTaskLists+0x7c>)
 800b2d2:	4a05      	ldr	r2, [pc, #20]	; (800b2e8 <prvInitialiseTaskLists+0x68>)
 800b2d4:	601a      	str	r2, [r3, #0]
}
 800b2d6:	bf00      	nop
 800b2d8:	3708      	adds	r7, #8
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd80      	pop	{r7, pc}
 800b2de:	bf00      	nop
 800b2e0:	200073fc 	.word	0x200073fc
 800b2e4:	20007488 	.word	0x20007488
 800b2e8:	2000749c 	.word	0x2000749c
 800b2ec:	200074b8 	.word	0x200074b8
 800b2f0:	200074cc 	.word	0x200074cc
 800b2f4:	200074e4 	.word	0x200074e4
 800b2f8:	200074b0 	.word	0x200074b0
 800b2fc:	200074b4 	.word	0x200074b4

0800b300 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b082      	sub	sp, #8
 800b304:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b306:	e019      	b.n	800b33c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b308:	f000 fba4 	bl	800ba54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b30c:	4b10      	ldr	r3, [pc, #64]	; (800b350 <prvCheckTasksWaitingTermination+0x50>)
 800b30e:	68db      	ldr	r3, [r3, #12]
 800b310:	68db      	ldr	r3, [r3, #12]
 800b312:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	3304      	adds	r3, #4
 800b318:	4618      	mov	r0, r3
 800b31a:	f7fe fd51 	bl	8009dc0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b31e:	4b0d      	ldr	r3, [pc, #52]	; (800b354 <prvCheckTasksWaitingTermination+0x54>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	3b01      	subs	r3, #1
 800b324:	4a0b      	ldr	r2, [pc, #44]	; (800b354 <prvCheckTasksWaitingTermination+0x54>)
 800b326:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b328:	4b0b      	ldr	r3, [pc, #44]	; (800b358 <prvCheckTasksWaitingTermination+0x58>)
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	3b01      	subs	r3, #1
 800b32e:	4a0a      	ldr	r2, [pc, #40]	; (800b358 <prvCheckTasksWaitingTermination+0x58>)
 800b330:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b332:	f000 fbbf 	bl	800bab4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f000 f810 	bl	800b35c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b33c:	4b06      	ldr	r3, [pc, #24]	; (800b358 <prvCheckTasksWaitingTermination+0x58>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d1e1      	bne.n	800b308 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b344:	bf00      	nop
 800b346:	bf00      	nop
 800b348:	3708      	adds	r7, #8
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd80      	pop	{r7, pc}
 800b34e:	bf00      	nop
 800b350:	200074cc 	.word	0x200074cc
 800b354:	200074f8 	.word	0x200074f8
 800b358:	200074e0 	.word	0x200074e0

0800b35c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b35c:	b480      	push	{r7}
 800b35e:	b083      	sub	sp, #12
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b364:	bf00      	nop
 800b366:	370c      	adds	r7, #12
 800b368:	46bd      	mov	sp, r7
 800b36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36e:	4770      	bx	lr

0800b370 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b370:	b480      	push	{r7}
 800b372:	b083      	sub	sp, #12
 800b374:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b376:	4b0c      	ldr	r3, [pc, #48]	; (800b3a8 <prvResetNextTaskUnblockTime+0x38>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d104      	bne.n	800b38a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b380:	4b0a      	ldr	r3, [pc, #40]	; (800b3ac <prvResetNextTaskUnblockTime+0x3c>)
 800b382:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b386:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b388:	e008      	b.n	800b39c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b38a:	4b07      	ldr	r3, [pc, #28]	; (800b3a8 <prvResetNextTaskUnblockTime+0x38>)
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	68db      	ldr	r3, [r3, #12]
 800b390:	68db      	ldr	r3, [r3, #12]
 800b392:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	685b      	ldr	r3, [r3, #4]
 800b398:	4a04      	ldr	r2, [pc, #16]	; (800b3ac <prvResetNextTaskUnblockTime+0x3c>)
 800b39a:	6013      	str	r3, [r2, #0]
}
 800b39c:	bf00      	nop
 800b39e:	370c      	adds	r7, #12
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a6:	4770      	bx	lr
 800b3a8:	200074b0 	.word	0x200074b0
 800b3ac:	20007518 	.word	0x20007518

0800b3b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b3b0:	b480      	push	{r7}
 800b3b2:	b083      	sub	sp, #12
 800b3b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b3b6:	4b0b      	ldr	r3, [pc, #44]	; (800b3e4 <xTaskGetSchedulerState+0x34>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d102      	bne.n	800b3c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b3be:	2301      	movs	r3, #1
 800b3c0:	607b      	str	r3, [r7, #4]
 800b3c2:	e008      	b.n	800b3d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b3c4:	4b08      	ldr	r3, [pc, #32]	; (800b3e8 <xTaskGetSchedulerState+0x38>)
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d102      	bne.n	800b3d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b3cc:	2302      	movs	r3, #2
 800b3ce:	607b      	str	r3, [r7, #4]
 800b3d0:	e001      	b.n	800b3d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b3d6:	687b      	ldr	r3, [r7, #4]
	}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	370c      	adds	r7, #12
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e2:	4770      	bx	lr
 800b3e4:	20007504 	.word	0x20007504
 800b3e8:	20007520 	.word	0x20007520

0800b3ec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b084      	sub	sp, #16
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d05e      	beq.n	800b4c0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b402:	68bb      	ldr	r3, [r7, #8]
 800b404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b406:	4b31      	ldr	r3, [pc, #196]	; (800b4cc <xTaskPriorityInherit+0xe0>)
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b40c:	429a      	cmp	r2, r3
 800b40e:	d24e      	bcs.n	800b4ae <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b410:	68bb      	ldr	r3, [r7, #8]
 800b412:	699b      	ldr	r3, [r3, #24]
 800b414:	2b00      	cmp	r3, #0
 800b416:	db06      	blt.n	800b426 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b418:	4b2c      	ldr	r3, [pc, #176]	; (800b4cc <xTaskPriorityInherit+0xe0>)
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b41e:	f1c3 0207 	rsb	r2, r3, #7
 800b422:	68bb      	ldr	r3, [r7, #8]
 800b424:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b426:	68bb      	ldr	r3, [r7, #8]
 800b428:	6959      	ldr	r1, [r3, #20]
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b42e:	4613      	mov	r3, r2
 800b430:	009b      	lsls	r3, r3, #2
 800b432:	4413      	add	r3, r2
 800b434:	009b      	lsls	r3, r3, #2
 800b436:	4a26      	ldr	r2, [pc, #152]	; (800b4d0 <xTaskPriorityInherit+0xe4>)
 800b438:	4413      	add	r3, r2
 800b43a:	4299      	cmp	r1, r3
 800b43c:	d12f      	bne.n	800b49e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	3304      	adds	r3, #4
 800b442:	4618      	mov	r0, r3
 800b444:	f7fe fcbc 	bl	8009dc0 <uxListRemove>
 800b448:	4603      	mov	r3, r0
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d10a      	bne.n	800b464 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b452:	2201      	movs	r2, #1
 800b454:	fa02 f303 	lsl.w	r3, r2, r3
 800b458:	43da      	mvns	r2, r3
 800b45a:	4b1e      	ldr	r3, [pc, #120]	; (800b4d4 <xTaskPriorityInherit+0xe8>)
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	4013      	ands	r3, r2
 800b460:	4a1c      	ldr	r2, [pc, #112]	; (800b4d4 <xTaskPriorityInherit+0xe8>)
 800b462:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b464:	4b19      	ldr	r3, [pc, #100]	; (800b4cc <xTaskPriorityInherit+0xe0>)
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b46a:	68bb      	ldr	r3, [r7, #8]
 800b46c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b46e:	68bb      	ldr	r3, [r7, #8]
 800b470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b472:	2201      	movs	r2, #1
 800b474:	409a      	lsls	r2, r3
 800b476:	4b17      	ldr	r3, [pc, #92]	; (800b4d4 <xTaskPriorityInherit+0xe8>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	4313      	orrs	r3, r2
 800b47c:	4a15      	ldr	r2, [pc, #84]	; (800b4d4 <xTaskPriorityInherit+0xe8>)
 800b47e:	6013      	str	r3, [r2, #0]
 800b480:	68bb      	ldr	r3, [r7, #8]
 800b482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b484:	4613      	mov	r3, r2
 800b486:	009b      	lsls	r3, r3, #2
 800b488:	4413      	add	r3, r2
 800b48a:	009b      	lsls	r3, r3, #2
 800b48c:	4a10      	ldr	r2, [pc, #64]	; (800b4d0 <xTaskPriorityInherit+0xe4>)
 800b48e:	441a      	add	r2, r3
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	3304      	adds	r3, #4
 800b494:	4619      	mov	r1, r3
 800b496:	4610      	mov	r0, r2
 800b498:	f7fe fc35 	bl	8009d06 <vListInsertEnd>
 800b49c:	e004      	b.n	800b4a8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b49e:	4b0b      	ldr	r3, [pc, #44]	; (800b4cc <xTaskPriorityInherit+0xe0>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b4a8:	2301      	movs	r3, #1
 800b4aa:	60fb      	str	r3, [r7, #12]
 800b4ac:	e008      	b.n	800b4c0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b4b2:	4b06      	ldr	r3, [pc, #24]	; (800b4cc <xTaskPriorityInherit+0xe0>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4b8:	429a      	cmp	r2, r3
 800b4ba:	d201      	bcs.n	800b4c0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b4bc:	2301      	movs	r3, #1
 800b4be:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
	}
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	3710      	adds	r7, #16
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bd80      	pop	{r7, pc}
 800b4ca:	bf00      	nop
 800b4cc:	200073f8 	.word	0x200073f8
 800b4d0:	200073fc 	.word	0x200073fc
 800b4d4:	20007500 	.word	0x20007500

0800b4d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b086      	sub	sp, #24
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d06e      	beq.n	800b5cc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b4ee:	4b3a      	ldr	r3, [pc, #232]	; (800b5d8 <xTaskPriorityDisinherit+0x100>)
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	693a      	ldr	r2, [r7, #16]
 800b4f4:	429a      	cmp	r2, r3
 800b4f6:	d00a      	beq.n	800b50e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b4f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4fc:	f383 8811 	msr	BASEPRI, r3
 800b500:	f3bf 8f6f 	isb	sy
 800b504:	f3bf 8f4f 	dsb	sy
 800b508:	60fb      	str	r3, [r7, #12]
}
 800b50a:	bf00      	nop
 800b50c:	e7fe      	b.n	800b50c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b50e:	693b      	ldr	r3, [r7, #16]
 800b510:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b512:	2b00      	cmp	r3, #0
 800b514:	d10a      	bne.n	800b52c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b51a:	f383 8811 	msr	BASEPRI, r3
 800b51e:	f3bf 8f6f 	isb	sy
 800b522:	f3bf 8f4f 	dsb	sy
 800b526:	60bb      	str	r3, [r7, #8]
}
 800b528:	bf00      	nop
 800b52a:	e7fe      	b.n	800b52a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b52c:	693b      	ldr	r3, [r7, #16]
 800b52e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b530:	1e5a      	subs	r2, r3, #1
 800b532:	693b      	ldr	r3, [r7, #16]
 800b534:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b536:	693b      	ldr	r3, [r7, #16]
 800b538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b53a:	693b      	ldr	r3, [r7, #16]
 800b53c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b53e:	429a      	cmp	r2, r3
 800b540:	d044      	beq.n	800b5cc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b542:	693b      	ldr	r3, [r7, #16]
 800b544:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b546:	2b00      	cmp	r3, #0
 800b548:	d140      	bne.n	800b5cc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b54a:	693b      	ldr	r3, [r7, #16]
 800b54c:	3304      	adds	r3, #4
 800b54e:	4618      	mov	r0, r3
 800b550:	f7fe fc36 	bl	8009dc0 <uxListRemove>
 800b554:	4603      	mov	r3, r0
 800b556:	2b00      	cmp	r3, #0
 800b558:	d115      	bne.n	800b586 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b55a:	693b      	ldr	r3, [r7, #16]
 800b55c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b55e:	491f      	ldr	r1, [pc, #124]	; (800b5dc <xTaskPriorityDisinherit+0x104>)
 800b560:	4613      	mov	r3, r2
 800b562:	009b      	lsls	r3, r3, #2
 800b564:	4413      	add	r3, r2
 800b566:	009b      	lsls	r3, r3, #2
 800b568:	440b      	add	r3, r1
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d10a      	bne.n	800b586 <xTaskPriorityDisinherit+0xae>
 800b570:	693b      	ldr	r3, [r7, #16]
 800b572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b574:	2201      	movs	r2, #1
 800b576:	fa02 f303 	lsl.w	r3, r2, r3
 800b57a:	43da      	mvns	r2, r3
 800b57c:	4b18      	ldr	r3, [pc, #96]	; (800b5e0 <xTaskPriorityDisinherit+0x108>)
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	4013      	ands	r3, r2
 800b582:	4a17      	ldr	r2, [pc, #92]	; (800b5e0 <xTaskPriorityDisinherit+0x108>)
 800b584:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b586:	693b      	ldr	r3, [r7, #16]
 800b588:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b58a:	693b      	ldr	r3, [r7, #16]
 800b58c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b592:	f1c3 0207 	rsb	r2, r3, #7
 800b596:	693b      	ldr	r3, [r7, #16]
 800b598:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b59a:	693b      	ldr	r3, [r7, #16]
 800b59c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b59e:	2201      	movs	r2, #1
 800b5a0:	409a      	lsls	r2, r3
 800b5a2:	4b0f      	ldr	r3, [pc, #60]	; (800b5e0 <xTaskPriorityDisinherit+0x108>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	4313      	orrs	r3, r2
 800b5a8:	4a0d      	ldr	r2, [pc, #52]	; (800b5e0 <xTaskPriorityDisinherit+0x108>)
 800b5aa:	6013      	str	r3, [r2, #0]
 800b5ac:	693b      	ldr	r3, [r7, #16]
 800b5ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5b0:	4613      	mov	r3, r2
 800b5b2:	009b      	lsls	r3, r3, #2
 800b5b4:	4413      	add	r3, r2
 800b5b6:	009b      	lsls	r3, r3, #2
 800b5b8:	4a08      	ldr	r2, [pc, #32]	; (800b5dc <xTaskPriorityDisinherit+0x104>)
 800b5ba:	441a      	add	r2, r3
 800b5bc:	693b      	ldr	r3, [r7, #16]
 800b5be:	3304      	adds	r3, #4
 800b5c0:	4619      	mov	r1, r3
 800b5c2:	4610      	mov	r0, r2
 800b5c4:	f7fe fb9f 	bl	8009d06 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b5c8:	2301      	movs	r3, #1
 800b5ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b5cc:	697b      	ldr	r3, [r7, #20]
	}
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	3718      	adds	r7, #24
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	bd80      	pop	{r7, pc}
 800b5d6:	bf00      	nop
 800b5d8:	200073f8 	.word	0x200073f8
 800b5dc:	200073fc 	.word	0x200073fc
 800b5e0:	20007500 	.word	0x20007500

0800b5e4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b088      	sub	sp, #32
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
 800b5ec:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b5f2:	2301      	movs	r3, #1
 800b5f4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d077      	beq.n	800b6ec <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b5fc:	69bb      	ldr	r3, [r7, #24]
 800b5fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b600:	2b00      	cmp	r3, #0
 800b602:	d10a      	bne.n	800b61a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800b604:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b608:	f383 8811 	msr	BASEPRI, r3
 800b60c:	f3bf 8f6f 	isb	sy
 800b610:	f3bf 8f4f 	dsb	sy
 800b614:	60fb      	str	r3, [r7, #12]
}
 800b616:	bf00      	nop
 800b618:	e7fe      	b.n	800b618 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b61a:	69bb      	ldr	r3, [r7, #24]
 800b61c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b61e:	683a      	ldr	r2, [r7, #0]
 800b620:	429a      	cmp	r2, r3
 800b622:	d902      	bls.n	800b62a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b624:	683b      	ldr	r3, [r7, #0]
 800b626:	61fb      	str	r3, [r7, #28]
 800b628:	e002      	b.n	800b630 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b62a:	69bb      	ldr	r3, [r7, #24]
 800b62c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b62e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b630:	69bb      	ldr	r3, [r7, #24]
 800b632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b634:	69fa      	ldr	r2, [r7, #28]
 800b636:	429a      	cmp	r2, r3
 800b638:	d058      	beq.n	800b6ec <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b63a:	69bb      	ldr	r3, [r7, #24]
 800b63c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b63e:	697a      	ldr	r2, [r7, #20]
 800b640:	429a      	cmp	r2, r3
 800b642:	d153      	bne.n	800b6ec <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b644:	4b2b      	ldr	r3, [pc, #172]	; (800b6f4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	69ba      	ldr	r2, [r7, #24]
 800b64a:	429a      	cmp	r2, r3
 800b64c:	d10a      	bne.n	800b664 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800b64e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b652:	f383 8811 	msr	BASEPRI, r3
 800b656:	f3bf 8f6f 	isb	sy
 800b65a:	f3bf 8f4f 	dsb	sy
 800b65e:	60bb      	str	r3, [r7, #8]
}
 800b660:	bf00      	nop
 800b662:	e7fe      	b.n	800b662 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b664:	69bb      	ldr	r3, [r7, #24]
 800b666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b668:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b66a:	69bb      	ldr	r3, [r7, #24]
 800b66c:	69fa      	ldr	r2, [r7, #28]
 800b66e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b670:	69bb      	ldr	r3, [r7, #24]
 800b672:	699b      	ldr	r3, [r3, #24]
 800b674:	2b00      	cmp	r3, #0
 800b676:	db04      	blt.n	800b682 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b678:	69fb      	ldr	r3, [r7, #28]
 800b67a:	f1c3 0207 	rsb	r2, r3, #7
 800b67e:	69bb      	ldr	r3, [r7, #24]
 800b680:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b682:	69bb      	ldr	r3, [r7, #24]
 800b684:	6959      	ldr	r1, [r3, #20]
 800b686:	693a      	ldr	r2, [r7, #16]
 800b688:	4613      	mov	r3, r2
 800b68a:	009b      	lsls	r3, r3, #2
 800b68c:	4413      	add	r3, r2
 800b68e:	009b      	lsls	r3, r3, #2
 800b690:	4a19      	ldr	r2, [pc, #100]	; (800b6f8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800b692:	4413      	add	r3, r2
 800b694:	4299      	cmp	r1, r3
 800b696:	d129      	bne.n	800b6ec <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b698:	69bb      	ldr	r3, [r7, #24]
 800b69a:	3304      	adds	r3, #4
 800b69c:	4618      	mov	r0, r3
 800b69e:	f7fe fb8f 	bl	8009dc0 <uxListRemove>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d10a      	bne.n	800b6be <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800b6a8:	69bb      	ldr	r3, [r7, #24]
 800b6aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6ac:	2201      	movs	r2, #1
 800b6ae:	fa02 f303 	lsl.w	r3, r2, r3
 800b6b2:	43da      	mvns	r2, r3
 800b6b4:	4b11      	ldr	r3, [pc, #68]	; (800b6fc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	4013      	ands	r3, r2
 800b6ba:	4a10      	ldr	r2, [pc, #64]	; (800b6fc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b6bc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b6be:	69bb      	ldr	r3, [r7, #24]
 800b6c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6c2:	2201      	movs	r2, #1
 800b6c4:	409a      	lsls	r2, r3
 800b6c6:	4b0d      	ldr	r3, [pc, #52]	; (800b6fc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	4313      	orrs	r3, r2
 800b6cc:	4a0b      	ldr	r2, [pc, #44]	; (800b6fc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b6ce:	6013      	str	r3, [r2, #0]
 800b6d0:	69bb      	ldr	r3, [r7, #24]
 800b6d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6d4:	4613      	mov	r3, r2
 800b6d6:	009b      	lsls	r3, r3, #2
 800b6d8:	4413      	add	r3, r2
 800b6da:	009b      	lsls	r3, r3, #2
 800b6dc:	4a06      	ldr	r2, [pc, #24]	; (800b6f8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800b6de:	441a      	add	r2, r3
 800b6e0:	69bb      	ldr	r3, [r7, #24]
 800b6e2:	3304      	adds	r3, #4
 800b6e4:	4619      	mov	r1, r3
 800b6e6:	4610      	mov	r0, r2
 800b6e8:	f7fe fb0d 	bl	8009d06 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b6ec:	bf00      	nop
 800b6ee:	3720      	adds	r7, #32
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bd80      	pop	{r7, pc}
 800b6f4:	200073f8 	.word	0x200073f8
 800b6f8:	200073fc 	.word	0x200073fc
 800b6fc:	20007500 	.word	0x20007500

0800b700 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b700:	b480      	push	{r7}
 800b702:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b704:	4b07      	ldr	r3, [pc, #28]	; (800b724 <pvTaskIncrementMutexHeldCount+0x24>)
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d004      	beq.n	800b716 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b70c:	4b05      	ldr	r3, [pc, #20]	; (800b724 <pvTaskIncrementMutexHeldCount+0x24>)
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b712:	3201      	adds	r2, #1
 800b714:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800b716:	4b03      	ldr	r3, [pc, #12]	; (800b724 <pvTaskIncrementMutexHeldCount+0x24>)
 800b718:	681b      	ldr	r3, [r3, #0]
	}
 800b71a:	4618      	mov	r0, r3
 800b71c:	46bd      	mov	sp, r7
 800b71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b722:	4770      	bx	lr
 800b724:	200073f8 	.word	0x200073f8

0800b728 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b084      	sub	sp, #16
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
 800b730:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b732:	4b29      	ldr	r3, [pc, #164]	; (800b7d8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b738:	4b28      	ldr	r3, [pc, #160]	; (800b7dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	3304      	adds	r3, #4
 800b73e:	4618      	mov	r0, r3
 800b740:	f7fe fb3e 	bl	8009dc0 <uxListRemove>
 800b744:	4603      	mov	r3, r0
 800b746:	2b00      	cmp	r3, #0
 800b748:	d10b      	bne.n	800b762 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b74a:	4b24      	ldr	r3, [pc, #144]	; (800b7dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b750:	2201      	movs	r2, #1
 800b752:	fa02 f303 	lsl.w	r3, r2, r3
 800b756:	43da      	mvns	r2, r3
 800b758:	4b21      	ldr	r3, [pc, #132]	; (800b7e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	4013      	ands	r3, r2
 800b75e:	4a20      	ldr	r2, [pc, #128]	; (800b7e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b760:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b768:	d10a      	bne.n	800b780 <prvAddCurrentTaskToDelayedList+0x58>
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d007      	beq.n	800b780 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b770:	4b1a      	ldr	r3, [pc, #104]	; (800b7dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	3304      	adds	r3, #4
 800b776:	4619      	mov	r1, r3
 800b778:	481a      	ldr	r0, [pc, #104]	; (800b7e4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b77a:	f7fe fac4 	bl	8009d06 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b77e:	e026      	b.n	800b7ce <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b780:	68fa      	ldr	r2, [r7, #12]
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	4413      	add	r3, r2
 800b786:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b788:	4b14      	ldr	r3, [pc, #80]	; (800b7dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	68ba      	ldr	r2, [r7, #8]
 800b78e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b790:	68ba      	ldr	r2, [r7, #8]
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	429a      	cmp	r2, r3
 800b796:	d209      	bcs.n	800b7ac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b798:	4b13      	ldr	r3, [pc, #76]	; (800b7e8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b79a:	681a      	ldr	r2, [r3, #0]
 800b79c:	4b0f      	ldr	r3, [pc, #60]	; (800b7dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	3304      	adds	r3, #4
 800b7a2:	4619      	mov	r1, r3
 800b7a4:	4610      	mov	r0, r2
 800b7a6:	f7fe fad2 	bl	8009d4e <vListInsert>
}
 800b7aa:	e010      	b.n	800b7ce <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b7ac:	4b0f      	ldr	r3, [pc, #60]	; (800b7ec <prvAddCurrentTaskToDelayedList+0xc4>)
 800b7ae:	681a      	ldr	r2, [r3, #0]
 800b7b0:	4b0a      	ldr	r3, [pc, #40]	; (800b7dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	3304      	adds	r3, #4
 800b7b6:	4619      	mov	r1, r3
 800b7b8:	4610      	mov	r0, r2
 800b7ba:	f7fe fac8 	bl	8009d4e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b7be:	4b0c      	ldr	r3, [pc, #48]	; (800b7f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	68ba      	ldr	r2, [r7, #8]
 800b7c4:	429a      	cmp	r2, r3
 800b7c6:	d202      	bcs.n	800b7ce <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b7c8:	4a09      	ldr	r2, [pc, #36]	; (800b7f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b7ca:	68bb      	ldr	r3, [r7, #8]
 800b7cc:	6013      	str	r3, [r2, #0]
}
 800b7ce:	bf00      	nop
 800b7d0:	3710      	adds	r7, #16
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd80      	pop	{r7, pc}
 800b7d6:	bf00      	nop
 800b7d8:	200074fc 	.word	0x200074fc
 800b7dc:	200073f8 	.word	0x200073f8
 800b7e0:	20007500 	.word	0x20007500
 800b7e4:	200074e4 	.word	0x200074e4
 800b7e8:	200074b4 	.word	0x200074b4
 800b7ec:	200074b0 	.word	0x200074b0
 800b7f0:	20007518 	.word	0x20007518

0800b7f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b7f4:	b480      	push	{r7}
 800b7f6:	b085      	sub	sp, #20
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	60f8      	str	r0, [r7, #12]
 800b7fc:	60b9      	str	r1, [r7, #8]
 800b7fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	3b04      	subs	r3, #4
 800b804:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b80c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	3b04      	subs	r3, #4
 800b812:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b814:	68bb      	ldr	r3, [r7, #8]
 800b816:	f023 0201 	bic.w	r2, r3, #1
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	3b04      	subs	r3, #4
 800b822:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b824:	4a0c      	ldr	r2, [pc, #48]	; (800b858 <pxPortInitialiseStack+0x64>)
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	3b14      	subs	r3, #20
 800b82e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b830:	687a      	ldr	r2, [r7, #4]
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	3b04      	subs	r3, #4
 800b83a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	f06f 0202 	mvn.w	r2, #2
 800b842:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	3b20      	subs	r3, #32
 800b848:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b84a:	68fb      	ldr	r3, [r7, #12]
}
 800b84c:	4618      	mov	r0, r3
 800b84e:	3714      	adds	r7, #20
 800b850:	46bd      	mov	sp, r7
 800b852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b856:	4770      	bx	lr
 800b858:	0800b85d 	.word	0x0800b85d

0800b85c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b85c:	b480      	push	{r7}
 800b85e:	b085      	sub	sp, #20
 800b860:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b862:	2300      	movs	r3, #0
 800b864:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b866:	4b12      	ldr	r3, [pc, #72]	; (800b8b0 <prvTaskExitError+0x54>)
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b86e:	d00a      	beq.n	800b886 <prvTaskExitError+0x2a>
	__asm volatile
 800b870:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b874:	f383 8811 	msr	BASEPRI, r3
 800b878:	f3bf 8f6f 	isb	sy
 800b87c:	f3bf 8f4f 	dsb	sy
 800b880:	60fb      	str	r3, [r7, #12]
}
 800b882:	bf00      	nop
 800b884:	e7fe      	b.n	800b884 <prvTaskExitError+0x28>
	__asm volatile
 800b886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b88a:	f383 8811 	msr	BASEPRI, r3
 800b88e:	f3bf 8f6f 	isb	sy
 800b892:	f3bf 8f4f 	dsb	sy
 800b896:	60bb      	str	r3, [r7, #8]
}
 800b898:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b89a:	bf00      	nop
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d0fc      	beq.n	800b89c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b8a2:	bf00      	nop
 800b8a4:	bf00      	nop
 800b8a6:	3714      	adds	r7, #20
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ae:	4770      	bx	lr
 800b8b0:	20000084 	.word	0x20000084
	...

0800b8c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b8c0:	4b07      	ldr	r3, [pc, #28]	; (800b8e0 <pxCurrentTCBConst2>)
 800b8c2:	6819      	ldr	r1, [r3, #0]
 800b8c4:	6808      	ldr	r0, [r1, #0]
 800b8c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8ca:	f380 8809 	msr	PSP, r0
 800b8ce:	f3bf 8f6f 	isb	sy
 800b8d2:	f04f 0000 	mov.w	r0, #0
 800b8d6:	f380 8811 	msr	BASEPRI, r0
 800b8da:	4770      	bx	lr
 800b8dc:	f3af 8000 	nop.w

0800b8e0 <pxCurrentTCBConst2>:
 800b8e0:	200073f8 	.word	0x200073f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b8e4:	bf00      	nop
 800b8e6:	bf00      	nop

0800b8e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b8e8:	4808      	ldr	r0, [pc, #32]	; (800b90c <prvPortStartFirstTask+0x24>)
 800b8ea:	6800      	ldr	r0, [r0, #0]
 800b8ec:	6800      	ldr	r0, [r0, #0]
 800b8ee:	f380 8808 	msr	MSP, r0
 800b8f2:	f04f 0000 	mov.w	r0, #0
 800b8f6:	f380 8814 	msr	CONTROL, r0
 800b8fa:	b662      	cpsie	i
 800b8fc:	b661      	cpsie	f
 800b8fe:	f3bf 8f4f 	dsb	sy
 800b902:	f3bf 8f6f 	isb	sy
 800b906:	df00      	svc	0
 800b908:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b90a:	bf00      	nop
 800b90c:	e000ed08 	.word	0xe000ed08

0800b910 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b086      	sub	sp, #24
 800b914:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b916:	4b46      	ldr	r3, [pc, #280]	; (800ba30 <xPortStartScheduler+0x120>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	4a46      	ldr	r2, [pc, #280]	; (800ba34 <xPortStartScheduler+0x124>)
 800b91c:	4293      	cmp	r3, r2
 800b91e:	d10a      	bne.n	800b936 <xPortStartScheduler+0x26>
	__asm volatile
 800b920:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b924:	f383 8811 	msr	BASEPRI, r3
 800b928:	f3bf 8f6f 	isb	sy
 800b92c:	f3bf 8f4f 	dsb	sy
 800b930:	613b      	str	r3, [r7, #16]
}
 800b932:	bf00      	nop
 800b934:	e7fe      	b.n	800b934 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b936:	4b3e      	ldr	r3, [pc, #248]	; (800ba30 <xPortStartScheduler+0x120>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	4a3f      	ldr	r2, [pc, #252]	; (800ba38 <xPortStartScheduler+0x128>)
 800b93c:	4293      	cmp	r3, r2
 800b93e:	d10a      	bne.n	800b956 <xPortStartScheduler+0x46>
	__asm volatile
 800b940:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b944:	f383 8811 	msr	BASEPRI, r3
 800b948:	f3bf 8f6f 	isb	sy
 800b94c:	f3bf 8f4f 	dsb	sy
 800b950:	60fb      	str	r3, [r7, #12]
}
 800b952:	bf00      	nop
 800b954:	e7fe      	b.n	800b954 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b956:	4b39      	ldr	r3, [pc, #228]	; (800ba3c <xPortStartScheduler+0x12c>)
 800b958:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b95a:	697b      	ldr	r3, [r7, #20]
 800b95c:	781b      	ldrb	r3, [r3, #0]
 800b95e:	b2db      	uxtb	r3, r3
 800b960:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b962:	697b      	ldr	r3, [r7, #20]
 800b964:	22ff      	movs	r2, #255	; 0xff
 800b966:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b968:	697b      	ldr	r3, [r7, #20]
 800b96a:	781b      	ldrb	r3, [r3, #0]
 800b96c:	b2db      	uxtb	r3, r3
 800b96e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b970:	78fb      	ldrb	r3, [r7, #3]
 800b972:	b2db      	uxtb	r3, r3
 800b974:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b978:	b2da      	uxtb	r2, r3
 800b97a:	4b31      	ldr	r3, [pc, #196]	; (800ba40 <xPortStartScheduler+0x130>)
 800b97c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b97e:	4b31      	ldr	r3, [pc, #196]	; (800ba44 <xPortStartScheduler+0x134>)
 800b980:	2207      	movs	r2, #7
 800b982:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b984:	e009      	b.n	800b99a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b986:	4b2f      	ldr	r3, [pc, #188]	; (800ba44 <xPortStartScheduler+0x134>)
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	3b01      	subs	r3, #1
 800b98c:	4a2d      	ldr	r2, [pc, #180]	; (800ba44 <xPortStartScheduler+0x134>)
 800b98e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b990:	78fb      	ldrb	r3, [r7, #3]
 800b992:	b2db      	uxtb	r3, r3
 800b994:	005b      	lsls	r3, r3, #1
 800b996:	b2db      	uxtb	r3, r3
 800b998:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b99a:	78fb      	ldrb	r3, [r7, #3]
 800b99c:	b2db      	uxtb	r3, r3
 800b99e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9a2:	2b80      	cmp	r3, #128	; 0x80
 800b9a4:	d0ef      	beq.n	800b986 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b9a6:	4b27      	ldr	r3, [pc, #156]	; (800ba44 <xPortStartScheduler+0x134>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	f1c3 0307 	rsb	r3, r3, #7
 800b9ae:	2b04      	cmp	r3, #4
 800b9b0:	d00a      	beq.n	800b9c8 <xPortStartScheduler+0xb8>
	__asm volatile
 800b9b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9b6:	f383 8811 	msr	BASEPRI, r3
 800b9ba:	f3bf 8f6f 	isb	sy
 800b9be:	f3bf 8f4f 	dsb	sy
 800b9c2:	60bb      	str	r3, [r7, #8]
}
 800b9c4:	bf00      	nop
 800b9c6:	e7fe      	b.n	800b9c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b9c8:	4b1e      	ldr	r3, [pc, #120]	; (800ba44 <xPortStartScheduler+0x134>)
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	021b      	lsls	r3, r3, #8
 800b9ce:	4a1d      	ldr	r2, [pc, #116]	; (800ba44 <xPortStartScheduler+0x134>)
 800b9d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b9d2:	4b1c      	ldr	r3, [pc, #112]	; (800ba44 <xPortStartScheduler+0x134>)
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b9da:	4a1a      	ldr	r2, [pc, #104]	; (800ba44 <xPortStartScheduler+0x134>)
 800b9dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	b2da      	uxtb	r2, r3
 800b9e2:	697b      	ldr	r3, [r7, #20]
 800b9e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b9e6:	4b18      	ldr	r3, [pc, #96]	; (800ba48 <xPortStartScheduler+0x138>)
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	4a17      	ldr	r2, [pc, #92]	; (800ba48 <xPortStartScheduler+0x138>)
 800b9ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b9f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b9f2:	4b15      	ldr	r3, [pc, #84]	; (800ba48 <xPortStartScheduler+0x138>)
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	4a14      	ldr	r2, [pc, #80]	; (800ba48 <xPortStartScheduler+0x138>)
 800b9f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b9fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b9fe:	f000 f8dd 	bl	800bbbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ba02:	4b12      	ldr	r3, [pc, #72]	; (800ba4c <xPortStartScheduler+0x13c>)
 800ba04:	2200      	movs	r2, #0
 800ba06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ba08:	f000 f8fc 	bl	800bc04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ba0c:	4b10      	ldr	r3, [pc, #64]	; (800ba50 <xPortStartScheduler+0x140>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	4a0f      	ldr	r2, [pc, #60]	; (800ba50 <xPortStartScheduler+0x140>)
 800ba12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ba16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ba18:	f7ff ff66 	bl	800b8e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ba1c:	f7ff fa98 	bl	800af50 <vTaskSwitchContext>
	prvTaskExitError();
 800ba20:	f7ff ff1c 	bl	800b85c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ba24:	2300      	movs	r3, #0
}
 800ba26:	4618      	mov	r0, r3
 800ba28:	3718      	adds	r7, #24
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	bd80      	pop	{r7, pc}
 800ba2e:	bf00      	nop
 800ba30:	e000ed00 	.word	0xe000ed00
 800ba34:	410fc271 	.word	0x410fc271
 800ba38:	410fc270 	.word	0x410fc270
 800ba3c:	e000e400 	.word	0xe000e400
 800ba40:	2000752c 	.word	0x2000752c
 800ba44:	20007530 	.word	0x20007530
 800ba48:	e000ed20 	.word	0xe000ed20
 800ba4c:	20000084 	.word	0x20000084
 800ba50:	e000ef34 	.word	0xe000ef34

0800ba54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ba54:	b480      	push	{r7}
 800ba56:	b083      	sub	sp, #12
 800ba58:	af00      	add	r7, sp, #0
	__asm volatile
 800ba5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba5e:	f383 8811 	msr	BASEPRI, r3
 800ba62:	f3bf 8f6f 	isb	sy
 800ba66:	f3bf 8f4f 	dsb	sy
 800ba6a:	607b      	str	r3, [r7, #4]
}
 800ba6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ba6e:	4b0f      	ldr	r3, [pc, #60]	; (800baac <vPortEnterCritical+0x58>)
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	3301      	adds	r3, #1
 800ba74:	4a0d      	ldr	r2, [pc, #52]	; (800baac <vPortEnterCritical+0x58>)
 800ba76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ba78:	4b0c      	ldr	r3, [pc, #48]	; (800baac <vPortEnterCritical+0x58>)
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	2b01      	cmp	r3, #1
 800ba7e:	d10f      	bne.n	800baa0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ba80:	4b0b      	ldr	r3, [pc, #44]	; (800bab0 <vPortEnterCritical+0x5c>)
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	b2db      	uxtb	r3, r3
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d00a      	beq.n	800baa0 <vPortEnterCritical+0x4c>
	__asm volatile
 800ba8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba8e:	f383 8811 	msr	BASEPRI, r3
 800ba92:	f3bf 8f6f 	isb	sy
 800ba96:	f3bf 8f4f 	dsb	sy
 800ba9a:	603b      	str	r3, [r7, #0]
}
 800ba9c:	bf00      	nop
 800ba9e:	e7fe      	b.n	800ba9e <vPortEnterCritical+0x4a>
	}
}
 800baa0:	bf00      	nop
 800baa2:	370c      	adds	r7, #12
 800baa4:	46bd      	mov	sp, r7
 800baa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baaa:	4770      	bx	lr
 800baac:	20000084 	.word	0x20000084
 800bab0:	e000ed04 	.word	0xe000ed04

0800bab4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bab4:	b480      	push	{r7}
 800bab6:	b083      	sub	sp, #12
 800bab8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800baba:	4b12      	ldr	r3, [pc, #72]	; (800bb04 <vPortExitCritical+0x50>)
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d10a      	bne.n	800bad8 <vPortExitCritical+0x24>
	__asm volatile
 800bac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bac6:	f383 8811 	msr	BASEPRI, r3
 800baca:	f3bf 8f6f 	isb	sy
 800bace:	f3bf 8f4f 	dsb	sy
 800bad2:	607b      	str	r3, [r7, #4]
}
 800bad4:	bf00      	nop
 800bad6:	e7fe      	b.n	800bad6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bad8:	4b0a      	ldr	r3, [pc, #40]	; (800bb04 <vPortExitCritical+0x50>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	3b01      	subs	r3, #1
 800bade:	4a09      	ldr	r2, [pc, #36]	; (800bb04 <vPortExitCritical+0x50>)
 800bae0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bae2:	4b08      	ldr	r3, [pc, #32]	; (800bb04 <vPortExitCritical+0x50>)
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d105      	bne.n	800baf6 <vPortExitCritical+0x42>
 800baea:	2300      	movs	r3, #0
 800baec:	603b      	str	r3, [r7, #0]
	__asm volatile
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	f383 8811 	msr	BASEPRI, r3
}
 800baf4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800baf6:	bf00      	nop
 800baf8:	370c      	adds	r7, #12
 800bafa:	46bd      	mov	sp, r7
 800bafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb00:	4770      	bx	lr
 800bb02:	bf00      	nop
 800bb04:	20000084 	.word	0x20000084
	...

0800bb10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bb10:	f3ef 8009 	mrs	r0, PSP
 800bb14:	f3bf 8f6f 	isb	sy
 800bb18:	4b15      	ldr	r3, [pc, #84]	; (800bb70 <pxCurrentTCBConst>)
 800bb1a:	681a      	ldr	r2, [r3, #0]
 800bb1c:	f01e 0f10 	tst.w	lr, #16
 800bb20:	bf08      	it	eq
 800bb22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bb26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb2a:	6010      	str	r0, [r2, #0]
 800bb2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bb30:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bb34:	f380 8811 	msr	BASEPRI, r0
 800bb38:	f3bf 8f4f 	dsb	sy
 800bb3c:	f3bf 8f6f 	isb	sy
 800bb40:	f7ff fa06 	bl	800af50 <vTaskSwitchContext>
 800bb44:	f04f 0000 	mov.w	r0, #0
 800bb48:	f380 8811 	msr	BASEPRI, r0
 800bb4c:	bc09      	pop	{r0, r3}
 800bb4e:	6819      	ldr	r1, [r3, #0]
 800bb50:	6808      	ldr	r0, [r1, #0]
 800bb52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb56:	f01e 0f10 	tst.w	lr, #16
 800bb5a:	bf08      	it	eq
 800bb5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bb60:	f380 8809 	msr	PSP, r0
 800bb64:	f3bf 8f6f 	isb	sy
 800bb68:	4770      	bx	lr
 800bb6a:	bf00      	nop
 800bb6c:	f3af 8000 	nop.w

0800bb70 <pxCurrentTCBConst>:
 800bb70:	200073f8 	.word	0x200073f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bb74:	bf00      	nop
 800bb76:	bf00      	nop

0800bb78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b082      	sub	sp, #8
 800bb7c:	af00      	add	r7, sp, #0
	__asm volatile
 800bb7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb82:	f383 8811 	msr	BASEPRI, r3
 800bb86:	f3bf 8f6f 	isb	sy
 800bb8a:	f3bf 8f4f 	dsb	sy
 800bb8e:	607b      	str	r3, [r7, #4]
}
 800bb90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bb92:	f7ff f925 	bl	800ade0 <xTaskIncrementTick>
 800bb96:	4603      	mov	r3, r0
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d003      	beq.n	800bba4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bb9c:	4b06      	ldr	r3, [pc, #24]	; (800bbb8 <SysTick_Handler+0x40>)
 800bb9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bba2:	601a      	str	r2, [r3, #0]
 800bba4:	2300      	movs	r3, #0
 800bba6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	f383 8811 	msr	BASEPRI, r3
}
 800bbae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bbb0:	bf00      	nop
 800bbb2:	3708      	adds	r7, #8
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd80      	pop	{r7, pc}
 800bbb8:	e000ed04 	.word	0xe000ed04

0800bbbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bbbc:	b480      	push	{r7}
 800bbbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bbc0:	4b0b      	ldr	r3, [pc, #44]	; (800bbf0 <vPortSetupTimerInterrupt+0x34>)
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bbc6:	4b0b      	ldr	r3, [pc, #44]	; (800bbf4 <vPortSetupTimerInterrupt+0x38>)
 800bbc8:	2200      	movs	r2, #0
 800bbca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bbcc:	4b0a      	ldr	r3, [pc, #40]	; (800bbf8 <vPortSetupTimerInterrupt+0x3c>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	4a0a      	ldr	r2, [pc, #40]	; (800bbfc <vPortSetupTimerInterrupt+0x40>)
 800bbd2:	fba2 2303 	umull	r2, r3, r2, r3
 800bbd6:	099b      	lsrs	r3, r3, #6
 800bbd8:	4a09      	ldr	r2, [pc, #36]	; (800bc00 <vPortSetupTimerInterrupt+0x44>)
 800bbda:	3b01      	subs	r3, #1
 800bbdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bbde:	4b04      	ldr	r3, [pc, #16]	; (800bbf0 <vPortSetupTimerInterrupt+0x34>)
 800bbe0:	2207      	movs	r2, #7
 800bbe2:	601a      	str	r2, [r3, #0]
}
 800bbe4:	bf00      	nop
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbec:	4770      	bx	lr
 800bbee:	bf00      	nop
 800bbf0:	e000e010 	.word	0xe000e010
 800bbf4:	e000e018 	.word	0xe000e018
 800bbf8:	20000078 	.word	0x20000078
 800bbfc:	10624dd3 	.word	0x10624dd3
 800bc00:	e000e014 	.word	0xe000e014

0800bc04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bc04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bc14 <vPortEnableVFP+0x10>
 800bc08:	6801      	ldr	r1, [r0, #0]
 800bc0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bc0e:	6001      	str	r1, [r0, #0]
 800bc10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bc12:	bf00      	nop
 800bc14:	e000ed88 	.word	0xe000ed88

0800bc18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bc18:	b480      	push	{r7}
 800bc1a:	b085      	sub	sp, #20
 800bc1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bc1e:	f3ef 8305 	mrs	r3, IPSR
 800bc22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	2b0f      	cmp	r3, #15
 800bc28:	d914      	bls.n	800bc54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bc2a:	4a17      	ldr	r2, [pc, #92]	; (800bc88 <vPortValidateInterruptPriority+0x70>)
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	4413      	add	r3, r2
 800bc30:	781b      	ldrb	r3, [r3, #0]
 800bc32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bc34:	4b15      	ldr	r3, [pc, #84]	; (800bc8c <vPortValidateInterruptPriority+0x74>)
 800bc36:	781b      	ldrb	r3, [r3, #0]
 800bc38:	7afa      	ldrb	r2, [r7, #11]
 800bc3a:	429a      	cmp	r2, r3
 800bc3c:	d20a      	bcs.n	800bc54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bc3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc42:	f383 8811 	msr	BASEPRI, r3
 800bc46:	f3bf 8f6f 	isb	sy
 800bc4a:	f3bf 8f4f 	dsb	sy
 800bc4e:	607b      	str	r3, [r7, #4]
}
 800bc50:	bf00      	nop
 800bc52:	e7fe      	b.n	800bc52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bc54:	4b0e      	ldr	r3, [pc, #56]	; (800bc90 <vPortValidateInterruptPriority+0x78>)
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bc5c:	4b0d      	ldr	r3, [pc, #52]	; (800bc94 <vPortValidateInterruptPriority+0x7c>)
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	429a      	cmp	r2, r3
 800bc62:	d90a      	bls.n	800bc7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800bc64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc68:	f383 8811 	msr	BASEPRI, r3
 800bc6c:	f3bf 8f6f 	isb	sy
 800bc70:	f3bf 8f4f 	dsb	sy
 800bc74:	603b      	str	r3, [r7, #0]
}
 800bc76:	bf00      	nop
 800bc78:	e7fe      	b.n	800bc78 <vPortValidateInterruptPriority+0x60>
	}
 800bc7a:	bf00      	nop
 800bc7c:	3714      	adds	r7, #20
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc84:	4770      	bx	lr
 800bc86:	bf00      	nop
 800bc88:	e000e3f0 	.word	0xe000e3f0
 800bc8c:	2000752c 	.word	0x2000752c
 800bc90:	e000ed0c 	.word	0xe000ed0c
 800bc94:	20007530 	.word	0x20007530

0800bc98 <__libc_init_array>:
 800bc98:	b570      	push	{r4, r5, r6, lr}
 800bc9a:	4d0d      	ldr	r5, [pc, #52]	; (800bcd0 <__libc_init_array+0x38>)
 800bc9c:	4c0d      	ldr	r4, [pc, #52]	; (800bcd4 <__libc_init_array+0x3c>)
 800bc9e:	1b64      	subs	r4, r4, r5
 800bca0:	10a4      	asrs	r4, r4, #2
 800bca2:	2600      	movs	r6, #0
 800bca4:	42a6      	cmp	r6, r4
 800bca6:	d109      	bne.n	800bcbc <__libc_init_array+0x24>
 800bca8:	4d0b      	ldr	r5, [pc, #44]	; (800bcd8 <__libc_init_array+0x40>)
 800bcaa:	4c0c      	ldr	r4, [pc, #48]	; (800bcdc <__libc_init_array+0x44>)
 800bcac:	f000 f82e 	bl	800bd0c <_init>
 800bcb0:	1b64      	subs	r4, r4, r5
 800bcb2:	10a4      	asrs	r4, r4, #2
 800bcb4:	2600      	movs	r6, #0
 800bcb6:	42a6      	cmp	r6, r4
 800bcb8:	d105      	bne.n	800bcc6 <__libc_init_array+0x2e>
 800bcba:	bd70      	pop	{r4, r5, r6, pc}
 800bcbc:	f855 3b04 	ldr.w	r3, [r5], #4
 800bcc0:	4798      	blx	r3
 800bcc2:	3601      	adds	r6, #1
 800bcc4:	e7ee      	b.n	800bca4 <__libc_init_array+0xc>
 800bcc6:	f855 3b04 	ldr.w	r3, [r5], #4
 800bcca:	4798      	blx	r3
 800bccc:	3601      	adds	r6, #1
 800bcce:	e7f2      	b.n	800bcb6 <__libc_init_array+0x1e>
 800bcd0:	0800bda8 	.word	0x0800bda8
 800bcd4:	0800bda8 	.word	0x0800bda8
 800bcd8:	0800bda8 	.word	0x0800bda8
 800bcdc:	0800bdac 	.word	0x0800bdac

0800bce0 <memcpy>:
 800bce0:	440a      	add	r2, r1
 800bce2:	4291      	cmp	r1, r2
 800bce4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800bce8:	d100      	bne.n	800bcec <memcpy+0xc>
 800bcea:	4770      	bx	lr
 800bcec:	b510      	push	{r4, lr}
 800bcee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bcf2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bcf6:	4291      	cmp	r1, r2
 800bcf8:	d1f9      	bne.n	800bcee <memcpy+0xe>
 800bcfa:	bd10      	pop	{r4, pc}

0800bcfc <memset>:
 800bcfc:	4402      	add	r2, r0
 800bcfe:	4603      	mov	r3, r0
 800bd00:	4293      	cmp	r3, r2
 800bd02:	d100      	bne.n	800bd06 <memset+0xa>
 800bd04:	4770      	bx	lr
 800bd06:	f803 1b01 	strb.w	r1, [r3], #1
 800bd0a:	e7f9      	b.n	800bd00 <memset+0x4>

0800bd0c <_init>:
 800bd0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd0e:	bf00      	nop
 800bd10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd12:	bc08      	pop	{r3}
 800bd14:	469e      	mov	lr, r3
 800bd16:	4770      	bx	lr

0800bd18 <_fini>:
 800bd18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd1a:	bf00      	nop
 800bd1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd1e:	bc08      	pop	{r3}
 800bd20:	469e      	mov	lr, r3
 800bd22:	4770      	bx	lr
