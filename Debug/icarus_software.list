
icarus_software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b224  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  0800b3f4  0800b3f4  0001b3f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b470  0800b470  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b470  0800b470  0001b470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b478  0800b478  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b478  0800b478  0001b478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b47c  0800b47c  0001b47c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800b480  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007db8  2000007c  0800b4fc  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20007e34  0800b4fc  00027e34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000272fc  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000058b9  00000000  00000000  000473a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b08  00000000  00000000  0004cc68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018c0  00000000  00000000  0004e770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000274e2  00000000  00000000  00050030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020946  00000000  00000000  00077512  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e00e5  00000000  00000000  00097e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00177f3d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e4c  00000000  00000000  00177f90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b3dc 	.word	0x0800b3dc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000080 	.word	0x20000080
 800020c:	0800b3dc 	.word	0x0800b3dc

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96e 	b.w	8000504 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468c      	mov	ip, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	f040 8083 	bne.w	8000356 <__udivmoddi4+0x116>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d947      	bls.n	80002e6 <__udivmoddi4+0xa6>
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	b142      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025c:	f1c2 0020 	rsb	r0, r2, #32
 8000260:	fa24 f000 	lsr.w	r0, r4, r0
 8000264:	4091      	lsls	r1, r2
 8000266:	4097      	lsls	r7, r2
 8000268:	ea40 0c01 	orr.w	ip, r0, r1
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbbc f6f8 	udiv	r6, ip, r8
 8000278:	fa1f fe87 	uxth.w	lr, r7
 800027c:	fb08 c116 	mls	r1, r8, r6, ip
 8000280:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000284:	fb06 f10e 	mul.w	r1, r6, lr
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000292:	f080 8119 	bcs.w	80004c8 <__udivmoddi4+0x288>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8116 	bls.w	80004c8 <__udivmoddi4+0x288>
 800029c:	3e02      	subs	r6, #2
 800029e:	443b      	add	r3, r7
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b4:	45a6      	cmp	lr, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8105 	bcs.w	80004cc <__udivmoddi4+0x28c>
 80002c2:	45a6      	cmp	lr, r4
 80002c4:	f240 8102 	bls.w	80004cc <__udivmoddi4+0x28c>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	2600      	movs	r6, #0
 80002d6:	b11d      	cbz	r5, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c5 4300 	strd	r4, r3, [r5]
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xaa>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	d150      	bne.n	8000394 <__udivmoddi4+0x154>
 80002f2:	1bcb      	subs	r3, r1, r7
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	fa1f f887 	uxth.w	r8, r7
 80002fc:	2601      	movs	r6, #1
 80002fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000302:	0c21      	lsrs	r1, r4, #16
 8000304:	fb0e 331c 	mls	r3, lr, ip, r3
 8000308:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800030c:	fb08 f30c 	mul.w	r3, r8, ip
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000314:	1879      	adds	r1, r7, r1
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0xe2>
 800031c:	428b      	cmp	r3, r1
 800031e:	f200 80e9 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 8000322:	4684      	mov	ip, r0
 8000324:	1ac9      	subs	r1, r1, r3
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000330:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x10c>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x10a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80d9 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e7bf      	b.n	80002d6 <__udivmoddi4+0x96>
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x12e>
 800035a:	2d00      	cmp	r5, #0
 800035c:	f000 80b1 	beq.w	80004c2 <__udivmoddi4+0x282>
 8000360:	2600      	movs	r6, #0
 8000362:	e9c5 0100 	strd	r0, r1, [r5]
 8000366:	4630      	mov	r0, r6
 8000368:	4631      	mov	r1, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f683 	clz	r6, r3
 8000372:	2e00      	cmp	r6, #0
 8000374:	d14a      	bne.n	800040c <__udivmoddi4+0x1cc>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0x140>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80b8 	bhi.w	80004f0 <__udivmoddi4+0x2b0>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0103 	sbc.w	r1, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	468c      	mov	ip, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0a8      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800038e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000394:	f1c2 0320 	rsb	r3, r2, #32
 8000398:	fa20 f603 	lsr.w	r6, r0, r3
 800039c:	4097      	lsls	r7, r2
 800039e:	fa01 f002 	lsl.w	r0, r1, r2
 80003a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a6:	40d9      	lsrs	r1, r3
 80003a8:	4330      	orrs	r0, r6
 80003aa:	0c03      	lsrs	r3, r0, #16
 80003ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b0:	fa1f f887 	uxth.w	r8, r7
 80003b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb06 f108 	mul.w	r1, r6, r8
 80003c0:	4299      	cmp	r1, r3
 80003c2:	fa04 f402 	lsl.w	r4, r4, r2
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x19c>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ce:	f080 808d 	bcs.w	80004ec <__udivmoddi4+0x2ac>
 80003d2:	4299      	cmp	r1, r3
 80003d4:	f240 808a 	bls.w	80004ec <__udivmoddi4+0x2ac>
 80003d8:	3e02      	subs	r6, #2
 80003da:	443b      	add	r3, r7
 80003dc:	1a5b      	subs	r3, r3, r1
 80003de:	b281      	uxth	r1, r0
 80003e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb00 f308 	mul.w	r3, r0, r8
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x1c4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003fa:	d273      	bcs.n	80004e4 <__udivmoddi4+0x2a4>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d971      	bls.n	80004e4 <__udivmoddi4+0x2a4>
 8000400:	3802      	subs	r0, #2
 8000402:	4439      	add	r1, r7
 8000404:	1acb      	subs	r3, r1, r3
 8000406:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040a:	e778      	b.n	80002fe <__udivmoddi4+0xbe>
 800040c:	f1c6 0c20 	rsb	ip, r6, #32
 8000410:	fa03 f406 	lsl.w	r4, r3, r6
 8000414:	fa22 f30c 	lsr.w	r3, r2, ip
 8000418:	431c      	orrs	r4, r3
 800041a:	fa20 f70c 	lsr.w	r7, r0, ip
 800041e:	fa01 f306 	lsl.w	r3, r1, r6
 8000422:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000426:	fa21 f10c 	lsr.w	r1, r1, ip
 800042a:	431f      	orrs	r7, r3
 800042c:	0c3b      	lsrs	r3, r7, #16
 800042e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000432:	fa1f f884 	uxth.w	r8, r4
 8000436:	fb0e 1119 	mls	r1, lr, r9, r1
 800043a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043e:	fb09 fa08 	mul.w	sl, r9, r8
 8000442:	458a      	cmp	sl, r1
 8000444:	fa02 f206 	lsl.w	r2, r2, r6
 8000448:	fa00 f306 	lsl.w	r3, r0, r6
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x220>
 800044e:	1861      	adds	r1, r4, r1
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295
 8000454:	d248      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 8000456:	458a      	cmp	sl, r1
 8000458:	d946      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4421      	add	r1, r4
 8000460:	eba1 010a 	sub.w	r1, r1, sl
 8000464:	b2bf      	uxth	r7, r7
 8000466:	fbb1 f0fe 	udiv	r0, r1, lr
 800046a:	fb0e 1110 	mls	r1, lr, r0, r1
 800046e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45b8      	cmp	r8, r7
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x24a>
 800047a:	19e7      	adds	r7, r4, r7
 800047c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000480:	d22e      	bcs.n	80004e0 <__udivmoddi4+0x2a0>
 8000482:	45b8      	cmp	r8, r7
 8000484:	d92c      	bls.n	80004e0 <__udivmoddi4+0x2a0>
 8000486:	3802      	subs	r0, #2
 8000488:	4427      	add	r7, r4
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba7 0708 	sub.w	r7, r7, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454f      	cmp	r7, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	4649      	mov	r1, r9
 800049c:	d31a      	bcc.n	80004d4 <__udivmoddi4+0x294>
 800049e:	d017      	beq.n	80004d0 <__udivmoddi4+0x290>
 80004a0:	b15d      	cbz	r5, 80004ba <__udivmoddi4+0x27a>
 80004a2:	ebb3 020e 	subs.w	r2, r3, lr
 80004a6:	eb67 0701 	sbc.w	r7, r7, r1
 80004aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ae:	40f2      	lsrs	r2, r6
 80004b0:	ea4c 0202 	orr.w	r2, ip, r2
 80004b4:	40f7      	lsrs	r7, r6
 80004b6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ba:	2600      	movs	r6, #0
 80004bc:	4631      	mov	r1, r6
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e70b      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fd      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d0:	4543      	cmp	r3, r8
 80004d2:	d2e5      	bcs.n	80004a0 <__udivmoddi4+0x260>
 80004d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d8:	eb69 0104 	sbc.w	r1, r9, r4
 80004dc:	3801      	subs	r0, #1
 80004de:	e7df      	b.n	80004a0 <__udivmoddi4+0x260>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e7d2      	b.n	800048a <__udivmoddi4+0x24a>
 80004e4:	4660      	mov	r0, ip
 80004e6:	e78d      	b.n	8000404 <__udivmoddi4+0x1c4>
 80004e8:	4681      	mov	r9, r0
 80004ea:	e7b9      	b.n	8000460 <__udivmoddi4+0x220>
 80004ec:	4666      	mov	r6, ip
 80004ee:	e775      	b.n	80003dc <__udivmoddi4+0x19c>
 80004f0:	4630      	mov	r0, r6
 80004f2:	e74a      	b.n	800038a <__udivmoddi4+0x14a>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	4439      	add	r1, r7
 80004fa:	e713      	b.n	8000324 <__udivmoddi4+0xe4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	443c      	add	r4, r7
 8000500:	e724      	b.n	800034c <__udivmoddi4+0x10c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <pointer_inc>:
volatile int32_t can_buffer_pointer_rx = 0;
volatile int32_t can_buffer_pointer_tx = 0;

uint32_t can_readFrame(void);

uint32_t pointer_inc(uint32_t val, uint32_t size) {
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	6039      	str	r1, [r7, #0]
	return (val + 1) % size;
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	3301      	adds	r3, #1
 8000516:	683a      	ldr	r2, [r7, #0]
 8000518:	fbb3 f2f2 	udiv	r2, r3, r2
 800051c:	6839      	ldr	r1, [r7, #0]
 800051e:	fb01 f202 	mul.w	r2, r1, r2
 8000522:	1a9b      	subs	r3, r3, r2
}
 8000524:	4618      	mov	r0, r3
 8000526:	370c      	adds	r7, #12
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr

08000530 <can_addMsg>:

void can_addMsg(CAN_msg msg) {
 8000530:	b590      	push	{r4, r7, lr}
 8000532:	b085      	sub	sp, #20
 8000534:	af00      	add	r7, sp, #0
 8000536:	463c      	mov	r4, r7
 8000538:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	can_buffer[can_buffer_pointer_tx] = msg;
 800053c:	4b13      	ldr	r3, [pc, #76]	; (800058c <can_addMsg+0x5c>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a13      	ldr	r2, [pc, #76]	; (8000590 <can_addMsg+0x60>)
 8000542:	011b      	lsls	r3, r3, #4
 8000544:	4413      	add	r3, r2
 8000546:	461c      	mov	r4, r3
 8000548:	463b      	mov	r3, r7
 800054a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800054c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	can_buffer_pointer_tx = pointer_inc(can_buffer_pointer_tx, CAN_BUFFER_DEPTH);
 8000550:	4b0e      	ldr	r3, [pc, #56]	; (800058c <can_addMsg+0x5c>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2140      	movs	r1, #64	; 0x40
 8000556:	4618      	mov	r0, r3
 8000558:	f7ff ffd6 	bl	8000508 <pointer_inc>
 800055c:	4603      	mov	r3, r0
 800055e:	461a      	mov	r2, r3
 8000560:	4b0a      	ldr	r3, [pc, #40]	; (800058c <can_addMsg+0x5c>)
 8000562:	601a      	str	r2, [r3, #0]

	if (can_buffer_pointer_tx == can_buffer_pointer_rx) { // indicates overflow
 8000564:	4b09      	ldr	r3, [pc, #36]	; (800058c <can_addMsg+0x5c>)
 8000566:	681a      	ldr	r2, [r3, #0]
 8000568:	4b0a      	ldr	r3, [pc, #40]	; (8000594 <can_addMsg+0x64>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	429a      	cmp	r2, r3
 800056e:	d109      	bne.n	8000584 <can_addMsg+0x54>
		can_buffer_pointer_rx = pointer_inc(can_buffer_pointer_rx, CAN_BUFFER_DEPTH); // skip one msg in the rx buffer
 8000570:	4b08      	ldr	r3, [pc, #32]	; (8000594 <can_addMsg+0x64>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	2140      	movs	r1, #64	; 0x40
 8000576:	4618      	mov	r0, r3
 8000578:	f7ff ffc6 	bl	8000508 <pointer_inc>
 800057c:	4603      	mov	r3, r0
 800057e:	461a      	mov	r2, r3
 8000580:	4b04      	ldr	r3, [pc, #16]	; (8000594 <can_addMsg+0x64>)
 8000582:	601a      	str	r2, [r3, #0]
	}
}
 8000584:	bf00      	nop
 8000586:	3714      	adds	r7, #20
 8000588:	46bd      	mov	sp, r7
 800058a:	bd90      	pop	{r4, r7, pc}
 800058c:	2000009c 	.word	0x2000009c
 8000590:	200072ec 	.word	0x200072ec
 8000594:	20000098 	.word	0x20000098

08000598 <CAN_Config>:

/*
 * Configures CAN protocol for 250kbit/s without interrupt for reading (only polling).
 */
void CAN_Config(uint32_t id)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b08c      	sub	sp, #48	; 0x30
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]

    /*##-1- Configure the CAN peripheral #######################################*/
    // Done in MX_CAN1_Init()

    /*##-2- Configure the CAN Filter ###########################################*/
    sFilterConfig.FilterBank = 0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	61fb      	str	r3, [r7, #28]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80005a4:	2300      	movs	r3, #0
 80005a6:	623b      	str	r3, [r7, #32]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80005a8:	2301      	movs	r3, #1
 80005aa:	627b      	str	r3, [r7, #36]	; 0x24
    sFilterConfig.FilterIdHigh = 0x0000;
 80005ac:	2300      	movs	r3, #0
 80005ae:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterIdLow = 0x0000;
 80005b0:	2300      	movs	r3, #0
 80005b2:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterMaskIdHigh = 0x0000;
 80005b4:	2300      	movs	r3, #0
 80005b6:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterMaskIdLow = 0x0000;
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80005bc:	2300      	movs	r3, #0
 80005be:	61bb      	str	r3, [r7, #24]
    sFilterConfig.FilterActivation = ENABLE;
 80005c0:	2301      	movs	r3, #1
 80005c2:	62bb      	str	r3, [r7, #40]	; 0x28
    sFilterConfig.SlaveStartFilterBank = 14;
 80005c4:	230e      	movs	r3, #14
 80005c6:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 80005c8:	f107 0308 	add.w	r3, r7, #8
 80005cc:	4619      	mov	r1, r3
 80005ce:	4810      	ldr	r0, [pc, #64]	; (8000610 <CAN_Config+0x78>)
 80005d0:	f003 fc44 	bl	8003e5c <HAL_CAN_ConfigFilter>
        /* Filter configuration Error */
        //      _Error_Handler(__FILE__, __LINE__);
    }

    /*##-3- Start the CAN peripheral ###########################################*/
    if (HAL_CAN_Start(&hcan1) != HAL_OK)
 80005d4:	480e      	ldr	r0, [pc, #56]	; (8000610 <CAN_Config+0x78>)
 80005d6:	f003 fd21 	bl	800401c <HAL_CAN_Start>
        /* Start Error */
        //      _Error_Handler(__FILE__, __LINE__);
    }

    /*##-4- Activate CAN RX notification #######################################*/
    if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80005da:	2102      	movs	r1, #2
 80005dc:	480c      	ldr	r0, [pc, #48]	; (8000610 <CAN_Config+0x78>)
 80005de:	f003 fe9b 	bl	8004318 <HAL_CAN_ActivateNotification>
        /* Notification Error */
    	//_Error_Handler(__FILE__, __LINE__);
    }

    /*##-5- Configure Transmission process #####################################*/
    TxHeader.StdId = id;
 80005e2:	4a0c      	ldr	r2, [pc, #48]	; (8000614 <CAN_Config+0x7c>)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	6013      	str	r3, [r2, #0]
    TxHeader.ExtId = id; // not needed
 80005e8:	4a0a      	ldr	r2, [pc, #40]	; (8000614 <CAN_Config+0x7c>)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	6053      	str	r3, [r2, #4]
    TxHeader.RTR = CAN_RTR_DATA;
 80005ee:	4b09      	ldr	r3, [pc, #36]	; (8000614 <CAN_Config+0x7c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	60da      	str	r2, [r3, #12]
    TxHeader.IDE = CAN_ID_STD;
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <CAN_Config+0x7c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	609a      	str	r2, [r3, #8]
    TxHeader.DLC = 8;
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <CAN_Config+0x7c>)
 80005fc:	2208      	movs	r2, #8
 80005fe:	611a      	str	r2, [r3, #16]
    TxHeader.TransmitGlobalTime = DISABLE;
 8000600:	4b04      	ldr	r3, [pc, #16]	; (8000614 <CAN_Config+0x7c>)
 8000602:	2200      	movs	r2, #0
 8000604:	751a      	strb	r2, [r3, #20]
}
 8000606:	bf00      	nop
 8000608:	3730      	adds	r7, #48	; 0x30
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	200076ec 	.word	0x200076ec
 8000614:	200072b8 	.word	0x200072b8

08000618 <HAL_CAN_RxFifo0MsgPendingCallback>:
    } else { // something bad happen
    	// not sure what to do
    }
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	can_readFrame();
 8000620:	f000 f858 	bl	80006d4 <can_readFrame>
	can_addMsg(can_current_msg);
 8000624:	4b03      	ldr	r3, [pc, #12]	; (8000634 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 8000626:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000628:	f7ff ff82 	bl	8000530 <can_addMsg>
}
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	2000729c 	.word	0x2000729c

08000638 <can_msgPending>:

uint32_t can_msgPending() {
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
	int32_t diff = can_buffer_pointer_tx - can_buffer_pointer_rx;
 800063e:	4b09      	ldr	r3, [pc, #36]	; (8000664 <can_msgPending+0x2c>)
 8000640:	681a      	ldr	r2, [r3, #0]
 8000642:	4b09      	ldr	r3, [pc, #36]	; (8000668 <can_msgPending+0x30>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	1ad3      	subs	r3, r2, r3
 8000648:	607b      	str	r3, [r7, #4]
	if (diff < 0) {
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	2b00      	cmp	r3, #0
 800064e:	da02      	bge.n	8000656 <can_msgPending+0x1e>
		diff += CAN_BUFFER_DEPTH;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	3340      	adds	r3, #64	; 0x40
 8000654:	607b      	str	r3, [r7, #4]
	}

	return diff;
 8000656:	687b      	ldr	r3, [r7, #4]
}
 8000658:	4618      	mov	r0, r3
 800065a:	370c      	adds	r7, #12
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr
 8000664:	2000009c 	.word	0x2000009c
 8000668:	20000098 	.word	0x20000098

0800066c <can_readBuffer>:

CAN_msg can_readBuffer() {
 800066c:	b590      	push	{r4, r7, lr}
 800066e:	b087      	sub	sp, #28
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
	CAN_msg ret = {0};
 8000674:	f107 0308 	add.w	r3, r7, #8
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]

	if (can_msgPending() > 0) {
 8000682:	f7ff ffd9 	bl	8000638 <can_msgPending>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d013      	beq.n	80006b4 <can_readBuffer+0x48>
		ret = can_buffer[can_buffer_pointer_rx];
 800068c:	4b0f      	ldr	r3, [pc, #60]	; (80006cc <can_readBuffer+0x60>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a0f      	ldr	r2, [pc, #60]	; (80006d0 <can_readBuffer+0x64>)
 8000692:	011b      	lsls	r3, r3, #4
 8000694:	4413      	add	r3, r2
 8000696:	f107 0408 	add.w	r4, r7, #8
 800069a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800069c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		can_buffer_pointer_rx = pointer_inc(can_buffer_pointer_rx, CAN_BUFFER_DEPTH);
 80006a0:	4b0a      	ldr	r3, [pc, #40]	; (80006cc <can_readBuffer+0x60>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	2140      	movs	r1, #64	; 0x40
 80006a6:	4618      	mov	r0, r3
 80006a8:	f7ff ff2e 	bl	8000508 <pointer_inc>
 80006ac:	4603      	mov	r3, r0
 80006ae:	461a      	mov	r2, r3
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <can_readBuffer+0x60>)
 80006b2:	601a      	str	r2, [r3, #0]
	} else { // no message actually pending
		// do nothing, will return the {0} CAN_msg
	}


	return ret;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	461c      	mov	r4, r3
 80006b8:	f107 0308 	add.w	r3, r7, #8
 80006bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80006c2:	6878      	ldr	r0, [r7, #4]
 80006c4:	371c      	adds	r7, #28
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd90      	pop	{r4, r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20000098 	.word	0x20000098
 80006d0:	200072ec 	.word	0x200072ec

080006d4 <can_readFrame>:
 *
 * byte 0..3 --> some uint32_t
 * byte 4    --> data_id, see CAN_communication.h
 * byte 5..7 --> timestamp
 */
uint32_t can_readFrame(void) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
    uint32_t fill_level = HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0);
 80006da:	2100      	movs	r1, #0
 80006dc:	482a      	ldr	r0, [pc, #168]	; (8000788 <can_readFrame+0xb4>)
 80006de:	f003 fdf3 	bl	80042c8 <HAL_CAN_GetRxFifoFillLevel>
 80006e2:	6078      	str	r0, [r7, #4]
    if (fill_level > 0) {
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d049      	beq.n	800077e <can_readFrame+0xaa>
        HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData);
 80006ea:	4b28      	ldr	r3, [pc, #160]	; (800078c <can_readFrame+0xb8>)
 80006ec:	4a28      	ldr	r2, [pc, #160]	; (8000790 <can_readFrame+0xbc>)
 80006ee:	2100      	movs	r1, #0
 80006f0:	4825      	ldr	r0, [pc, #148]	; (8000788 <can_readFrame+0xb4>)
 80006f2:	f003 fcd7 	bl	80040a4 <HAL_CAN_GetRxMessage>

        can_current_msg.data = 0;
 80006f6:	4b27      	ldr	r3, [pc, #156]	; (8000794 <can_readFrame+0xc0>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
        can_current_msg.data += (uint32_t) RxData[0] << 24;
 80006fc:	4b25      	ldr	r3, [pc, #148]	; (8000794 <can_readFrame+0xc0>)
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	4b22      	ldr	r3, [pc, #136]	; (800078c <can_readFrame+0xb8>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	061b      	lsls	r3, r3, #24
 8000706:	4413      	add	r3, r2
 8000708:	4a22      	ldr	r2, [pc, #136]	; (8000794 <can_readFrame+0xc0>)
 800070a:	6013      	str	r3, [r2, #0]
        can_current_msg.data += (uint32_t) RxData[1] << 16;
 800070c:	4b21      	ldr	r3, [pc, #132]	; (8000794 <can_readFrame+0xc0>)
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	4b1e      	ldr	r3, [pc, #120]	; (800078c <can_readFrame+0xb8>)
 8000712:	785b      	ldrb	r3, [r3, #1]
 8000714:	041b      	lsls	r3, r3, #16
 8000716:	4413      	add	r3, r2
 8000718:	4a1e      	ldr	r2, [pc, #120]	; (8000794 <can_readFrame+0xc0>)
 800071a:	6013      	str	r3, [r2, #0]
        can_current_msg.data += (uint32_t) RxData[2] << 8;
 800071c:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <can_readFrame+0xc0>)
 800071e:	681a      	ldr	r2, [r3, #0]
 8000720:	4b1a      	ldr	r3, [pc, #104]	; (800078c <can_readFrame+0xb8>)
 8000722:	789b      	ldrb	r3, [r3, #2]
 8000724:	021b      	lsls	r3, r3, #8
 8000726:	4413      	add	r3, r2
 8000728:	4a1a      	ldr	r2, [pc, #104]	; (8000794 <can_readFrame+0xc0>)
 800072a:	6013      	str	r3, [r2, #0]
		can_current_msg.data += (uint32_t) RxData[3] << 0;
 800072c:	4b19      	ldr	r3, [pc, #100]	; (8000794 <can_readFrame+0xc0>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a16      	ldr	r2, [pc, #88]	; (800078c <can_readFrame+0xb8>)
 8000732:	78d2      	ldrb	r2, [r2, #3]
 8000734:	4413      	add	r3, r2
 8000736:	4a17      	ldr	r2, [pc, #92]	; (8000794 <can_readFrame+0xc0>)
 8000738:	6013      	str	r3, [r2, #0]

        can_current_msg.id = RxData[4];
 800073a:	4b14      	ldr	r3, [pc, #80]	; (800078c <can_readFrame+0xb8>)
 800073c:	791a      	ldrb	r2, [r3, #4]
 800073e:	4b15      	ldr	r3, [pc, #84]	; (8000794 <can_readFrame+0xc0>)
 8000740:	711a      	strb	r2, [r3, #4]

        can_current_msg.timestamp = 0;
 8000742:	4b14      	ldr	r3, [pc, #80]	; (8000794 <can_readFrame+0xc0>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
        can_current_msg.timestamp += (uint32_t) RxData[5] << 16;
 8000748:	4b12      	ldr	r3, [pc, #72]	; (8000794 <can_readFrame+0xc0>)
 800074a:	689a      	ldr	r2, [r3, #8]
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <can_readFrame+0xb8>)
 800074e:	795b      	ldrb	r3, [r3, #5]
 8000750:	041b      	lsls	r3, r3, #16
 8000752:	4413      	add	r3, r2
 8000754:	4a0f      	ldr	r2, [pc, #60]	; (8000794 <can_readFrame+0xc0>)
 8000756:	6093      	str	r3, [r2, #8]
        can_current_msg.timestamp += (uint32_t) RxData[6] << 8;
 8000758:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <can_readFrame+0xc0>)
 800075a:	689a      	ldr	r2, [r3, #8]
 800075c:	4b0b      	ldr	r3, [pc, #44]	; (800078c <can_readFrame+0xb8>)
 800075e:	799b      	ldrb	r3, [r3, #6]
 8000760:	021b      	lsls	r3, r3, #8
 8000762:	4413      	add	r3, r2
 8000764:	4a0b      	ldr	r2, [pc, #44]	; (8000794 <can_readFrame+0xc0>)
 8000766:	6093      	str	r3, [r2, #8]
		can_current_msg.timestamp += (uint32_t) RxData[7] << 0;
 8000768:	4b0a      	ldr	r3, [pc, #40]	; (8000794 <can_readFrame+0xc0>)
 800076a:	689b      	ldr	r3, [r3, #8]
 800076c:	4a07      	ldr	r2, [pc, #28]	; (800078c <can_readFrame+0xb8>)
 800076e:	79d2      	ldrb	r2, [r2, #7]
 8000770:	4413      	add	r3, r2
 8000772:	4a08      	ldr	r2, [pc, #32]	; (8000794 <can_readFrame+0xc0>)
 8000774:	6093      	str	r3, [r2, #8]

        can_current_msg.id_CAN = RxHeader.StdId;
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <can_readFrame+0xbc>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a06      	ldr	r2, [pc, #24]	; (8000794 <can_readFrame+0xc0>)
 800077c:	60d3      	str	r3, [r2, #12]
    }
    return fill_level;
 800077e:	687b      	ldr	r3, [r7, #4]
}
 8000780:	4618      	mov	r0, r3
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	200076ec 	.word	0x200076ec
 800078c:	200072b0 	.word	0x200072b0
 8000790:	200072d0 	.word	0x200072d0
 8000794:	2000729c 	.word	0x2000729c

08000798 <can_init>:


void can_init(void) {
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	CAN_Config(CAN_ID_PROPULSION_BOARD);
 800079c:	2005      	movs	r0, #5
 800079e:	f7ff fefb 	bl	8000598 <CAN_Config>
}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
	...

080007a8 <can_send_thread>:


void can_send_thread(void * arg) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
	static TickType_t last_wake_time;
	static const TickType_t period = pdMS_TO_TICKS(CAN_HEART_BEAT);

	last_wake_time = xTaskGetTickCount();
 80007b0:	f009 fe70 	bl	800a494 <xTaskGetTickCount>
 80007b4:	4603      	mov	r3, r0
 80007b6:	4a04      	ldr	r2, [pc, #16]	; (80007c8 <can_send_thread+0x20>)
 80007b8:	6013      	str	r3, [r2, #0]

	for(;;) {

		//SEND DATA HERE

		vTaskDelayUntil( &last_wake_time, period );
 80007ba:	4b04      	ldr	r3, [pc, #16]	; (80007cc <can_send_thread+0x24>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4619      	mov	r1, r3
 80007c0:	4801      	ldr	r0, [pc, #4]	; (80007c8 <can_send_thread+0x20>)
 80007c2:	f009 fca9 	bl	800a118 <vTaskDelayUntil>
 80007c6:	e7f8      	b.n	80007ba <can_send_thread+0x12>
 80007c8:	200000a0 	.word	0x200000a0
 80007cc:	0800b448 	.word	0x0800b448

080007d0 <util_encode_u32>:
	data[0] = value;
	data[1] = value>>8;
	data[2] = 0x00;
	data[3] = 0x00;
}
static inline void util_encode_u32(uint8_t * data, uint32_t value) {
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	6039      	str	r1, [r7, #0]
	data[0] = value;
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	b2da      	uxtb	r2, r3
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	701a      	strb	r2, [r3, #0]
	data[1] = value>>8;
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	0a1a      	lsrs	r2, r3, #8
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	3301      	adds	r3, #1
 80007ea:	b2d2      	uxtb	r2, r2
 80007ec:	701a      	strb	r2, [r3, #0]
	data[2] = value>>16;
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	0c1a      	lsrs	r2, r3, #16
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	3302      	adds	r3, #2
 80007f6:	b2d2      	uxtb	r2, r2
 80007f8:	701a      	strb	r2, [r3, #0]
	data[3] = value>>24;
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	0e1a      	lsrs	r2, r3, #24
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	3303      	adds	r3, #3
 8000802:	b2d2      	uxtb	r2, r2
 8000804:	701a      	strb	r2, [r3, #0]
}
 8000806:	bf00      	nop
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr

08000812 <util_encode_i32>:
	data[0] = value;
	data[1] = value>>8;
	data[2] = 0x00;
	data[3] = 0x00;
}
static inline void util_encode_i32(uint8_t * data, int32_t value) {
 8000812:	b480      	push	{r7}
 8000814:	b083      	sub	sp, #12
 8000816:	af00      	add	r7, sp, #0
 8000818:	6078      	str	r0, [r7, #4]
 800081a:	6039      	str	r1, [r7, #0]
	data[0] = value;
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	b2da      	uxtb	r2, r3
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	701a      	strb	r2, [r3, #0]
	data[1] = value>>8;
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	121a      	asrs	r2, r3, #8
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	3301      	adds	r3, #1
 800082c:	b2d2      	uxtb	r2, r2
 800082e:	701a      	strb	r2, [r3, #0]
	data[2] = value>>16;
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	141a      	asrs	r2, r3, #16
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	3302      	adds	r3, #2
 8000838:	b2d2      	uxtb	r2, r2
 800083a:	701a      	strb	r2, [r3, #0]
	data[3] = value>>24;
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	161a      	asrs	r2, r3, #24
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	3303      	adds	r3, #3
 8000844:	b2d2      	uxtb	r2, r2
 8000846:	701a      	strb	r2, [r3, #0]
}
 8000848:	bf00      	nop
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr

08000854 <util_decode_u16>:

static inline uint8_t util_decode_u8(uint8_t * data) {
	return data[0];
}

static inline uint16_t util_decode_u16(uint8_t * data) {
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	return (uint16_t) data[0] | data[1] << 8;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	b21a      	sxth	r2, r3
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	3301      	adds	r3, #1
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	021b      	lsls	r3, r3, #8
 800086a:	b21b      	sxth	r3, r3
 800086c:	4313      	orrs	r3, r2
 800086e:	b21b      	sxth	r3, r3
 8000870:	b29b      	uxth	r3, r3
}
 8000872:	4618      	mov	r0, r3
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr

0800087e <util_decode_u32>:

static inline uint32_t util_decode_u32(uint8_t * data) {
 800087e:	b480      	push	{r7}
 8000880:	b083      	sub	sp, #12
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
	return (uint32_t) data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	461a      	mov	r2, r3
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	3301      	adds	r3, #1
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	021b      	lsls	r3, r3, #8
 8000894:	4313      	orrs	r3, r2
 8000896:	687a      	ldr	r2, [r7, #4]
 8000898:	3202      	adds	r2, #2
 800089a:	7812      	ldrb	r2, [r2, #0]
 800089c:	0412      	lsls	r2, r2, #16
 800089e:	4313      	orrs	r3, r2
 80008a0:	687a      	ldr	r2, [r7, #4]
 80008a2:	3203      	adds	r2, #3
 80008a4:	7812      	ldrb	r2, [r2, #0]
 80008a6:	0612      	lsls	r2, r2, #24
 80008a8:	4313      	orrs	r3, r2
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr

080008b6 <util_decode_i32>:

static inline int16_t util_decode_i16(uint8_t * data) {
	return (int16_t) data[0] | data[1] << 8;
}

static inline int32_t util_decode_i32(uint8_t * data) {
 80008b6:	b480      	push	{r7}
 80008b8:	b083      	sub	sp, #12
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	6078      	str	r0, [r7, #4]
	return (int32_t) data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	461a      	mov	r2, r3
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	3301      	adds	r3, #1
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	021b      	lsls	r3, r3, #8
 80008cc:	431a      	orrs	r2, r3
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	3302      	adds	r3, #2
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	041b      	lsls	r3, r3, #16
 80008d6:	431a      	orrs	r2, r3
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	3303      	adds	r3, #3
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	061b      	lsls	r3, r3, #24
 80008e0:	4313      	orrs	r3, r2
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
	...

080008f0 <cm4_global_init>:

/**********************
 *	DECLARATIONS
 **********************/

void cm4_global_init(void) {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
	cm4_busy_sem = xSemaphoreCreateMutexStatic(&cm4_busy_sem_buffer);
 80008f4:	4904      	ldr	r1, [pc, #16]	; (8000908 <cm4_global_init+0x18>)
 80008f6:	2001      	movs	r0, #1
 80008f8:	f008 ff0b 	bl	8009712 <xQueueCreateMutexStatic>
 80008fc:	4603      	mov	r3, r0
 80008fe:	4a03      	ldr	r2, [pc, #12]	; (800090c <cm4_global_init+0x1c>)
 8000900:	6013      	str	r3, [r2, #0]
}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	200000a8 	.word	0x200000a8
 800090c:	200000a4 	.word	0x200000a4

08000910 <cm4_init>:

void cm4_init(CM4_INST_t * cm4) {
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af02      	add	r7, sp, #8
 8000916:	6078      	str	r0, [r7, #4]
	static uint32_t id_counter = 0;
	cm4->id = id_counter++;
 8000918:	4b17      	ldr	r3, [pc, #92]	; (8000978 <cm4_init+0x68>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	1c5a      	adds	r2, r3, #1
 800091e:	4916      	ldr	r1, [pc, #88]	; (8000978 <cm4_init+0x68>)
 8000920:	600a      	str	r2, [r1, #0]
 8000922:	687a      	ldr	r2, [r7, #4]
 8000924:	6013      	str	r3, [r2, #0]
	cm4->garbage_counter = 0;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	f503 53a4 	add.w	r3, r3, #5248	; 0x1480
 800092c:	3304      	adds	r3, #4
 800092e:	2200      	movs	r2, #0
 8000930:	801a      	strh	r2, [r3, #0]
	cm4->rx_sem = xSemaphoreCreateBinaryStatic(&cm4->rx_sem_buffer);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8000938:	331c      	adds	r3, #28
 800093a:	2203      	movs	r2, #3
 800093c:	9200      	str	r2, [sp, #0]
 800093e:	2200      	movs	r2, #0
 8000940:	2100      	movs	r1, #0
 8000942:	2001      	movs	r0, #1
 8000944:	f008 fe38 	bl	80095b8 <xQueueGenericCreateStatic>
 8000948:	4602      	mov	r2, r0
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8000950:	3318      	adds	r3, #24
 8000952:	601a      	str	r2, [r3, #0]
	msv2_init(&cm4->msv2);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	3304      	adds	r3, #4
 8000958:	4618      	mov	r0, r3
 800095a:	f001 fa75 	bl	8001e48 <msv2_init>
	serial_init(&cm4->ser, &CM4_UART, cm4, cm4_decode_fcn);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	f503 5080 	add.w	r0, r3, #4096	; 0x1000
 8000964:	3018      	adds	r0, #24
 8000966:	4b05      	ldr	r3, [pc, #20]	; (800097c <cm4_init+0x6c>)
 8000968:	687a      	ldr	r2, [r7, #4]
 800096a:	4905      	ldr	r1, [pc, #20]	; (8000980 <cm4_init+0x70>)
 800096c:	f001 fd40 	bl	80023f0 <serial_init>


}
 8000970:	bf00      	nop
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	200000f0 	.word	0x200000f0
 800097c:	08000985 	.word	0x08000985
 8000980:	20007dec 	.word	0x20007dec

08000984 <cm4_decode_fcn>:


SERIAL_RET_t cm4_decode_fcn(void * inst, uint8_t data) {
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	460b      	mov	r3, r1
 800098e:	70fb      	strb	r3, [r7, #3]
	CM4_INST_t * cm4 = (CM4_INST_t *) inst;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	60fb      	str	r3, [r7, #12]
	MSV2_ERROR_t tmp = msv2_decode_fragment(&cm4->msv2, data);
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	3304      	adds	r3, #4
 8000998:	78fa      	ldrb	r2, [r7, #3]
 800099a:	4611      	mov	r1, r2
 800099c:	4618      	mov	r0, r3
 800099e:	f001 fb4d 	bl	800203c <msv2_decode_fragment>
 80009a2:	4603      	mov	r3, r0
 80009a4:	72fb      	strb	r3, [r7, #11]
	if(tmp == MSV2_SUCCESS || tmp == MSV2_WRONG_CRC) {
 80009a6:	7afb      	ldrb	r3, [r7, #11]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d002      	beq.n	80009b2 <cm4_decode_fcn+0x2e>
 80009ac:	7afb      	ldrb	r3, [r7, #11]
 80009ae:	2b02      	cmp	r3, #2
 80009b0:	d109      	bne.n	80009c6 <cm4_decode_fcn+0x42>
		xSemaphoreGive(cm4->rx_sem);
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 80009b8:	3318      	adds	r3, #24
 80009ba:	6818      	ldr	r0, [r3, #0]
 80009bc:	2300      	movs	r3, #0
 80009be:	2200      	movs	r2, #0
 80009c0:	2100      	movs	r1, #0
 80009c2:	f008 fec1 	bl	8009748 <xQueueGenericSend>
	}
	return tmp;
 80009c6:	7afb      	ldrb	r3, [r7, #11]
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	3710      	adds	r7, #16
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <cm4_send>:



CM4_ERROR_t cm4_send(CM4_INST_t * cm4, uint8_t cmd, uint8_t * data, uint16_t length, uint8_t ** resp_data, uint16_t * resp_len) {
 80009d0:	b590      	push	{r4, r7, lr}
 80009d2:	b087      	sub	sp, #28
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	60f8      	str	r0, [r7, #12]
 80009d8:	607a      	str	r2, [r7, #4]
 80009da:	461a      	mov	r2, r3
 80009dc:	460b      	mov	r3, r1
 80009de:	72fb      	strb	r3, [r7, #11]
 80009e0:	4613      	mov	r3, r2
 80009e2:	813b      	strh	r3, [r7, #8]
	uint16_t frame_length = msv2_create_frame(&cm4->msv2, cmd, length/2, data);
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	1d18      	adds	r0, r3, #4
 80009e8:	893b      	ldrh	r3, [r7, #8]
 80009ea:	085b      	lsrs	r3, r3, #1
 80009ec:	b29b      	uxth	r3, r3
 80009ee:	b2da      	uxtb	r2, r3
 80009f0:	7af9      	ldrb	r1, [r7, #11]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	f001 fa3c 	bl	8001e70 <msv2_create_frame>
 80009f8:	4603      	mov	r3, r0
 80009fa:	82fb      	strh	r3, [r7, #22]
	serial_send(&cm4->ser, msv2_tx_data(&cm4->msv2), frame_length);
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	f503 5480 	add.w	r4, r3, #4096	; 0x1000
 8000a02:	3418      	adds	r4, #24
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	3304      	adds	r3, #4
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f001 fc0b 	bl	8002224 <msv2_tx_data>
 8000a0e:	4601      	mov	r1, r0
 8000a10:	8afb      	ldrh	r3, [r7, #22]
 8000a12:	461a      	mov	r2, r3
 8000a14:	4620      	mov	r0, r4
 8000a16:	f001 fd2b 	bl	8002470 <serial_send>
	if(cm4->rx_sem == NULL) {
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8000a20:	3318      	adds	r3, #24
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d101      	bne.n	8000a2c <cm4_send+0x5c>
		return CM4_LOCAL_ERROR;
 8000a28:	2308      	movs	r3, #8
 8000a2a:	e050      	b.n	8000ace <cm4_send+0xfe>
	}
	if(xSemaphoreTake(cm4->rx_sem, COMM_TIMEOUT) == pdTRUE) {
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8000a32:	3318      	adds	r3, #24
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	2114      	movs	r1, #20
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f009 f811 	bl	8009a60 <xQueueSemaphoreTake>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d123      	bne.n	8000a8c <cm4_send+0xbc>
		cm4->garbage_counter = 0;
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	f503 53a4 	add.w	r3, r3, #5248	; 0x1480
 8000a4a:	3304      	adds	r3, #4
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	801a      	strh	r2, [r3, #0]
		if(cm4->msv2.rx.opcode == cmd) {
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	7a1b      	ldrb	r3, [r3, #8]
 8000a54:	7afa      	ldrb	r2, [r7, #11]
 8000a56:	429a      	cmp	r2, r3
 8000a58:	d110      	bne.n	8000a7c <cm4_send+0xac>
			if(resp_len != NULL && resp_data != NULL) {
 8000a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d00b      	beq.n	8000a78 <cm4_send+0xa8>
 8000a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d008      	beq.n	8000a78 <cm4_send+0xa8>
				*resp_len = cm4->msv2.rx.length;
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	89da      	ldrh	r2, [r3, #14]
 8000a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a6c:	801a      	strh	r2, [r3, #0]
				*resp_data = cm4->msv2.rx.data;
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	f103 0212 	add.w	r2, r3, #18
 8000a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a76:	601a      	str	r2, [r3, #0]
			}
			return CM4_SUCCESS;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	e028      	b.n	8000ace <cm4_send+0xfe>
		} else {
			if(resp_len != NULL) {
 8000a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d002      	beq.n	8000a88 <cm4_send+0xb8>
				*resp_len = 0;
 8000a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a84:	2200      	movs	r2, #0
 8000a86:	801a      	strh	r2, [r3, #0]
			}
			return CM4_REMOTE_ERROR;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	e020      	b.n	8000ace <cm4_send+0xfe>
		}
	} else {
		cm4->garbage_counter++;
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	f503 53a4 	add.w	r3, r3, #5248	; 0x1480
 8000a92:	3304      	adds	r3, #4
 8000a94:	881b      	ldrh	r3, [r3, #0]
 8000a96:	3301      	adds	r3, #1
 8000a98:	b29a      	uxth	r2, r3
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	f503 53a4 	add.w	r3, r3, #5248	; 0x1480
 8000aa0:	3304      	adds	r3, #4
 8000aa2:	801a      	strh	r2, [r3, #0]
		if(cm4->garbage_counter > GARBAGE_THRESHOLD) {
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	f503 53a4 	add.w	r3, r3, #5248	; 0x1480
 8000aaa:	3304      	adds	r3, #4
 8000aac:	881b      	ldrh	r3, [r3, #0]
 8000aae:	2b0a      	cmp	r3, #10
 8000ab0:	d90c      	bls.n	8000acc <cm4_send+0xfc>
			serial_garbage_clean(&cm4->ser);
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ab8:	3318      	adds	r3, #24
 8000aba:	4618      	mov	r0, r3
 8000abc:	f001 fcea 	bl	8002494 <serial_garbage_clean>
			cm4->garbage_counter = 0;
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	f503 53a4 	add.w	r3, r3, #5248	; 0x1480
 8000ac6:	3304      	adds	r3, #4
 8000ac8:	2200      	movs	r2, #0
 8000aca:	801a      	strh	r2, [r3, #0]
		}
		return CM4_TIMEOUT;
 8000acc:	2301      	movs	r3, #1
	}

}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	371c      	adds	r7, #28
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd90      	pop	{r4, r7, pc}

08000ad6 <cm4_ping>:

CM4_ERROR_t cm4_ping(CM4_INST_t * cm4) {
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	b086      	sub	sp, #24
 8000ada:	af02      	add	r7, sp, #8
 8000adc:	6078      	str	r0, [r7, #4]
	CM4_ERROR_t error = 0;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	73fb      	strb	r3, [r7, #15]
	uint8_t data[] = {0xc5, 0x5c};
 8000ae2:	f645 43c5 	movw	r3, #23749	; 0x5cc5
 8000ae6:	81bb      	strh	r3, [r7, #12]
	error |= cm4_send(cm4, CM4_PING, data, 2, NULL, NULL);
 8000ae8:	f107 020c 	add.w	r2, r7, #12
 8000aec:	2300      	movs	r3, #0
 8000aee:	9301      	str	r3, [sp, #4]
 8000af0:	2300      	movs	r3, #0
 8000af2:	9300      	str	r3, [sp, #0]
 8000af4:	2302      	movs	r3, #2
 8000af6:	2100      	movs	r1, #0
 8000af8:	6878      	ldr	r0, [r7, #4]
 8000afa:	f7ff ff69 	bl	80009d0 <cm4_send>
 8000afe:	4603      	mov	r3, r0
 8000b00:	461a      	mov	r2, r3
 8000b02:	7bfb      	ldrb	r3, [r7, #15]
 8000b04:	4313      	orrs	r3, r2
 8000b06:	73fb      	strb	r3, [r7, #15]

	return error;
 8000b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3710      	adds	r7, #16
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <cm4_transaction>:


CM4_ERROR_t cm4_transaction(CM4_INST_t * cm4, CM4_PAYLOAD_SENSOR_t * sens, CM4_PAYLOAD_COMMAND_t * cmd) {
 8000b12:	b580      	push	{r7, lr}
 8000b14:	b096      	sub	sp, #88	; 0x58
 8000b16:	af02      	add	r7, sp, #8
 8000b18:	60f8      	str	r0, [r7, #12]
 8000b1a:	60b9      	str	r1, [r7, #8]
 8000b1c:	607a      	str	r2, [r7, #4]
	CM4_ERROR_t error = 0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t * recv_data;
	uint16_t recv_len = 0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	uint16_t send_len = 52;
 8000b2a:	2334      	movs	r3, #52	; 0x34
 8000b2c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	uint8_t send_data[52];

	util_encode_u32(send_data, sens->timestamp);
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	f107 0310 	add.w	r3, r7, #16
 8000b38:	4611      	mov	r1, r2
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f7ff fe48 	bl	80007d0 <util_encode_u32>
	util_encode_i32(send_data+4, sens->acc_x);
 8000b40:	f107 0310 	add.w	r3, r7, #16
 8000b44:	3304      	adds	r3, #4
 8000b46:	68ba      	ldr	r2, [r7, #8]
 8000b48:	6852      	ldr	r2, [r2, #4]
 8000b4a:	4611      	mov	r1, r2
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff fe60 	bl	8000812 <util_encode_i32>
	util_encode_i32(send_data+8, sens->acc_y);
 8000b52:	f107 0310 	add.w	r3, r7, #16
 8000b56:	3308      	adds	r3, #8
 8000b58:	68ba      	ldr	r2, [r7, #8]
 8000b5a:	6892      	ldr	r2, [r2, #8]
 8000b5c:	4611      	mov	r1, r2
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff fe57 	bl	8000812 <util_encode_i32>
	util_encode_i32(send_data+12, sens->acc_z);
 8000b64:	f107 0310 	add.w	r3, r7, #16
 8000b68:	330c      	adds	r3, #12
 8000b6a:	68ba      	ldr	r2, [r7, #8]
 8000b6c:	68d2      	ldr	r2, [r2, #12]
 8000b6e:	4611      	mov	r1, r2
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff fe4e 	bl	8000812 <util_encode_i32>

	util_encode_i32(send_data+16, sens->gyro_x);
 8000b76:	f107 0310 	add.w	r3, r7, #16
 8000b7a:	3310      	adds	r3, #16
 8000b7c:	68ba      	ldr	r2, [r7, #8]
 8000b7e:	6912      	ldr	r2, [r2, #16]
 8000b80:	4611      	mov	r1, r2
 8000b82:	4618      	mov	r0, r3
 8000b84:	f7ff fe45 	bl	8000812 <util_encode_i32>
	util_encode_i32(send_data+20, sens->gyro_y);
 8000b88:	f107 0310 	add.w	r3, r7, #16
 8000b8c:	3314      	adds	r3, #20
 8000b8e:	68ba      	ldr	r2, [r7, #8]
 8000b90:	6952      	ldr	r2, [r2, #20]
 8000b92:	4611      	mov	r1, r2
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff fe3c 	bl	8000812 <util_encode_i32>
	util_encode_i32(send_data+24, sens->gyro_z);
 8000b9a:	f107 0310 	add.w	r3, r7, #16
 8000b9e:	3318      	adds	r3, #24
 8000ba0:	68ba      	ldr	r2, [r7, #8]
 8000ba2:	6992      	ldr	r2, [r2, #24]
 8000ba4:	4611      	mov	r1, r2
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f7ff fe33 	bl	8000812 <util_encode_i32>

	util_encode_i32(send_data+28, sens->baro);
 8000bac:	f107 0310 	add.w	r3, r7, #16
 8000bb0:	331c      	adds	r3, #28
 8000bb2:	68ba      	ldr	r2, [r7, #8]
 8000bb4:	69d2      	ldr	r2, [r2, #28]
 8000bb6:	4611      	mov	r1, r2
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff fe2a 	bl	8000812 <util_encode_i32>
	util_encode_i32(send_data+32, sens->cc_pressure);
 8000bbe:	f107 0310 	add.w	r3, r7, #16
 8000bc2:	3320      	adds	r3, #32
 8000bc4:	68ba      	ldr	r2, [r7, #8]
 8000bc6:	6a12      	ldr	r2, [r2, #32]
 8000bc8:	4611      	mov	r1, r2
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f7ff fe21 	bl	8000812 <util_encode_i32>

	util_encode_i32(send_data+36, sens->dynamixel[0]);
 8000bd0:	f107 0310 	add.w	r3, r7, #16
 8000bd4:	3324      	adds	r3, #36	; 0x24
 8000bd6:	68ba      	ldr	r2, [r7, #8]
 8000bd8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000bda:	4611      	mov	r1, r2
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff fe18 	bl	8000812 <util_encode_i32>
	util_encode_i32(send_data+40, sens->dynamixel[1]);
 8000be2:	f107 0310 	add.w	r3, r7, #16
 8000be6:	3328      	adds	r3, #40	; 0x28
 8000be8:	68ba      	ldr	r2, [r7, #8]
 8000bea:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000bec:	4611      	mov	r1, r2
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff fe0f 	bl	8000812 <util_encode_i32>
	util_encode_i32(send_data+44, sens->dynamixel[2]);
 8000bf4:	f107 0310 	add.w	r3, r7, #16
 8000bf8:	332c      	adds	r3, #44	; 0x2c
 8000bfa:	68ba      	ldr	r2, [r7, #8]
 8000bfc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000bfe:	4611      	mov	r1, r2
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff fe06 	bl	8000812 <util_encode_i32>
	util_encode_i32(send_data+48, sens->dynamixel[3]);
 8000c06:	f107 0310 	add.w	r3, r7, #16
 8000c0a:	3330      	adds	r3, #48	; 0x30
 8000c0c:	68ba      	ldr	r2, [r7, #8]
 8000c0e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000c10:	4611      	mov	r1, r2
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff fdfd 	bl	8000812 <util_encode_i32>

	error |= cm4_send(cm4, CM4_PAYLOAD, send_data, send_len , &recv_data, &recv_len);
 8000c18:	f8b7 104c 	ldrh.w	r1, [r7, #76]	; 0x4c
 8000c1c:	f107 0210 	add.w	r2, r7, #16
 8000c20:	f107 0346 	add.w	r3, r7, #70	; 0x46
 8000c24:	9301      	str	r3, [sp, #4]
 8000c26:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c2a:	9300      	str	r3, [sp, #0]
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	2102      	movs	r1, #2
 8000c30:	68f8      	ldr	r0, [r7, #12]
 8000c32:	f7ff fecd 	bl	80009d0 <cm4_send>
 8000c36:	4603      	mov	r3, r0
 8000c38:	461a      	mov	r2, r3
 8000c3a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if(recv_len == 50) {
 8000c44:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8000c48:	2b32      	cmp	r3, #50	; 0x32
 8000c4a:	d167      	bne.n	8000d1c <cm4_transaction+0x20a>
		cmd->timestamp = util_decode_u32(recv_data);
 8000c4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff fe15 	bl	800087e <util_decode_u32>
 8000c54:	4602      	mov	r2, r0
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	601a      	str	r2, [r3, #0]
		cmd->thrust = util_decode_i32(recv_data+4);
 8000c5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c5c:	3304      	adds	r3, #4
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff fe29 	bl	80008b6 <util_decode_i32>
 8000c64:	4602      	mov	r2, r0
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	605a      	str	r2, [r3, #4]

		cmd->dynamixel[0] = util_decode_i32(recv_data+8);
 8000c6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c6c:	3308      	adds	r3, #8
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff fe21 	bl	80008b6 <util_decode_i32>
 8000c74:	4602      	mov	r2, r0
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	609a      	str	r2, [r3, #8]
		cmd->dynamixel[1] = util_decode_i32(recv_data+12);
 8000c7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c7c:	330c      	adds	r3, #12
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff fe19 	bl	80008b6 <util_decode_i32>
 8000c84:	4602      	mov	r2, r0
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	60da      	str	r2, [r3, #12]
		cmd->dynamixel[2] = util_decode_i32(recv_data+16);
 8000c8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c8c:	3310      	adds	r3, #16
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff fe11 	bl	80008b6 <util_decode_i32>
 8000c94:	4602      	mov	r2, r0
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	611a      	str	r2, [r3, #16]
		cmd->dynamixel[3] = util_decode_i32(recv_data+20);
 8000c9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c9c:	3314      	adds	r3, #20
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff fe09 	bl	80008b6 <util_decode_i32>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	615a      	str	r2, [r3, #20]

		cmd->position[0] = util_decode_i32(recv_data+24);
 8000caa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cac:	3318      	adds	r3, #24
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff fe01 	bl	80008b6 <util_decode_i32>
 8000cb4:	4602      	mov	r2, r0
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	619a      	str	r2, [r3, #24]
		cmd->position[1] = util_decode_i32(recv_data+28);
 8000cba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cbc:	331c      	adds	r3, #28
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff fdf9 	bl	80008b6 <util_decode_i32>
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	61da      	str	r2, [r3, #28]
		cmd->position[2] = util_decode_i32(recv_data+32);
 8000cca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ccc:	3320      	adds	r3, #32
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff fdf1 	bl	80008b6 <util_decode_i32>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	621a      	str	r2, [r3, #32]

		cmd->speed[0] = util_decode_i32(recv_data+36);
 8000cda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cdc:	3324      	adds	r3, #36	; 0x24
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff fde9 	bl	80008b6 <util_decode_i32>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	625a      	str	r2, [r3, #36]	; 0x24
		cmd->speed[1] = util_decode_i32(recv_data+40);
 8000cea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cec:	3328      	adds	r3, #40	; 0x28
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff fde1 	bl	80008b6 <util_decode_i32>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	629a      	str	r2, [r3, #40]	; 0x28
		cmd->speed[2] = util_decode_i32(recv_data+44);
 8000cfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cfc:	332c      	adds	r3, #44	; 0x2c
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff fdd9 	bl	80008b6 <util_decode_i32>
 8000d04:	4602      	mov	r2, r0
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	62da      	str	r2, [r3, #44]	; 0x2c

		cmd->state = util_decode_u16(recv_data+48);
 8000d0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d0c:	3330      	adds	r3, #48	; 0x30
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff fda0 	bl	8000854 <util_decode_u16>
 8000d14:	4603      	mov	r3, r0
 8000d16:	461a      	mov	r2, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	861a      	strh	r2, [r3, #48]	; 0x30

	}

	return CM4_SUCCESS;
 8000d1c:	2300      	movs	r3, #0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3750      	adds	r7, #80	; 0x50
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <cm4_boot>:

CM4_ERROR_t cm4_boot(CM4_INST_t * cm4) {
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b082      	sub	sp, #8
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
	allow_boot();
 8000d2e:	f000 f877 	bl	8000e20 <allow_boot>
	return CM4_SUCCESS;
 8000d32:	2300      	movs	r3, #0
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <cm4_is_ready>:

CM4_ERROR_t cm4_is_ready(CM4_INST_t * cm4, uint8_t * ready) {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	6039      	str	r1, [r7, #0]
	if(ready == NULL){
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d101      	bne.n	8000d50 <cm4_is_ready+0x14>
		return CM4_LOCAL_ERROR;
 8000d4c:	2308      	movs	r3, #8
 8000d4e:	e011      	b.n	8000d74 <cm4_is_ready+0x38>
	}
	*ready = 0;
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	2200      	movs	r2, #0
 8000d54:	701a      	strb	r2, [r3, #0]
	if(is_booted()) {
 8000d56:	f000 f851 	bl	8000dfc <is_booted>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d008      	beq.n	8000d72 <cm4_is_ready+0x36>
		if(cm4_ping(cm4) == CM4_SUCCESS) {
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f7ff feb8 	bl	8000ad6 <cm4_ping>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d102      	bne.n	8000d72 <cm4_is_ready+0x36>
			*ready = 1;
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	2201      	movs	r2, #1
 8000d70:	701a      	strb	r2, [r3, #0]
		}
	}
	return CM4_SUCCESS;
 8000d72:	2300      	movs	r3, #0
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <cm4_shutdown>:

CM4_ERROR_t cm4_shutdown(CM4_INST_t * cm4) {
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af02      	add	r7, sp, #8
 8000d82:	6078      	str	r0, [r7, #4]
	//send shutdown command through uart
	uint8_t data[] = {0x00, 0x00};
 8000d84:	2300      	movs	r3, #0
 8000d86:	81bb      	strh	r3, [r7, #12]
	cm4_send(cm4, CM4_SHUTDOWN, data, 2, NULL, NULL);
 8000d88:	f107 020c 	add.w	r2, r7, #12
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	9301      	str	r3, [sp, #4]
 8000d90:	2300      	movs	r3, #0
 8000d92:	9300      	str	r3, [sp, #0]
 8000d94:	2302      	movs	r3, #2
 8000d96:	2101      	movs	r1, #1
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f7ff fe19 	bl	80009d0 <cm4_send>

	return CM4_SUCCESS;
 8000d9e:	2300      	movs	r3, #0
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3710      	adds	r7, #16
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <cm4_is_shutdown>:

CM4_ERROR_t cm4_is_shutdown(CM4_INST_t * cm4, uint8_t * shutdown) {
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	6039      	str	r1, [r7, #0]
	if(shutdown == NULL){
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d101      	bne.n	8000dbc <cm4_is_shutdown+0x14>
		return CM4_LOCAL_ERROR;
 8000db8:	2308      	movs	r3, #8
 8000dba:	e00f      	b.n	8000ddc <cm4_is_shutdown+0x34>
	}
	if(!is_booted()) {
 8000dbc:	f000 f81e 	bl	8000dfc <is_booted>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d106      	bne.n	8000dd4 <cm4_is_shutdown+0x2c>
		//check wheter the CM4 answers
		//if answers
		hold_boot();
 8000dc6:	f000 f839 	bl	8000e3c <hold_boot>
		*shutdown = 1;
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	2201      	movs	r2, #1
 8000dce:	701a      	strb	r2, [r3, #0]
		return CM4_SUCCESS;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e003      	b.n	8000ddc <cm4_is_shutdown+0x34>
	} else {
		*shutdown = 0;
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	701a      	strb	r2, [r3, #0]
		return CM4_SUCCESS;
 8000dda:	2300      	movs	r3, #0
	}
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <cm4_force_shutdown>:


CM4_ERROR_t cm4_force_shutdown(CM4_INST_t * cm4) {
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
	hold_boot();
 8000dec:	f000 f826 	bl	8000e3c <hold_boot>
	return CM4_SUCCESS;
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
	...

08000dfc <is_booted>:



static uint8_t is_booted(void) {
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
	return CM4_RUN_PG_PORT->IDR & CM4_RUN_PG_PIN ?1:0;
 8000e00:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <is_booted+0x20>)
 8000e02:	691b      	ldr	r3, [r3, #16]
 8000e04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	bf14      	ite	ne
 8000e0c:	2301      	movne	r3, #1
 8000e0e:	2300      	moveq	r3, #0
 8000e10:	b2db      	uxtb	r3, r3
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	40020400 	.word	0x40020400

08000e20 <allow_boot>:

static void allow_boot(void) {
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
	CM4_GLOBAL_EN_PORT->BSRR = CM4_GLOBAL_EN_PIN;
 8000e24:	4b04      	ldr	r3, [pc, #16]	; (8000e38 <allow_boot+0x18>)
 8000e26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e2a:	619a      	str	r2, [r3, #24]
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	40020000 	.word	0x40020000

08000e3c <hold_boot>:

static void hold_boot(void) {
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
	CM4_GLOBAL_EN_PORT->BSRR = CM4_GLOBAL_EN_PIN << 16;
 8000e40:	4b04      	ldr	r3, [pc, #16]	; (8000e54 <hold_boot+0x18>)
 8000e42:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e46:	619a      	str	r2, [r3, #24]
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	40020000 	.word	0x40020000

08000e58 <control_thread>:

/**********************
 *	DECLARATIONS
 **********************/

void control_thread(void * arg) {
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
	static TickType_t last_wake_time;
	static const TickType_t period = pdMS_TO_TICKS(CONTROL_HEART_BEAT);



	led_init();
 8000e60:	f000 ff72 	bl	8001d48 <led_init>

	init_control(&control);
 8000e64:	4814      	ldr	r0, [pc, #80]	; (8000eb8 <control_thread+0x60>)
 8000e66:	f000 f8cc 	bl	8001002 <init_control>
	servo_config(&tvc_servo);

	control.tvc_servo = &tvc_servo;
#endif

	cm4_global_init();
 8000e6a:	f7ff fd41 	bl	80008f0 <cm4_global_init>

	static CM4_INST_t cm4;

	cm4_init(&cm4);
 8000e6e:	4813      	ldr	r0, [pc, #76]	; (8000ebc <control_thread+0x64>)
 8000e70:	f7ff fd4e 	bl	8000910 <cm4_init>

	control.cm4 = &cm4;
 8000e74:	4b10      	ldr	r3, [pc, #64]	; (8000eb8 <control_thread+0x60>)
 8000e76:	4a11      	ldr	r2, [pc, #68]	; (8000ebc <control_thread+0x64>)
 8000e78:	619a      	str	r2, [r3, #24]


	init_idle(&control);
 8000e7a:	480f      	ldr	r0, [pc, #60]	; (8000eb8 <control_thread+0x60>)
 8000e7c:	f000 f8d2 	bl	8001024 <init_idle>



	last_wake_time = xTaskGetTickCount();
 8000e80:	f009 fb08 	bl	800a494 <xTaskGetTickCount>
 8000e84:	4603      	mov	r3, r0
 8000e86:	4a0e      	ldr	r2, [pc, #56]	; (8000ec0 <control_thread+0x68>)
 8000e88:	6013      	str	r3, [r2, #0]
		} else {
			servo_disable_led(control.tvc_servo, NULL);
		}
#endif

		control_update(&control);
 8000e8a:	480b      	ldr	r0, [pc, #44]	; (8000eb8 <control_thread+0x60>)
 8000e8c:	f000 f81e 	bl	8000ecc <control_update>


		if(control.state < CS_NUM && control.state >= 0) {
 8000e90:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <control_thread+0x60>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b05      	cmp	r3, #5
 8000e96:	d807      	bhi.n	8000ea8 <control_thread+0x50>
			control_fcn[control.state](&control);
 8000e98:	4b07      	ldr	r3, [pc, #28]	; (8000eb8 <control_thread+0x60>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <control_thread+0x6c>)
 8000ea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ea4:	4804      	ldr	r0, [pc, #16]	; (8000eb8 <control_thread+0x60>)
 8000ea6:	4798      	blx	r3
		}
		vTaskDelayUntil( &last_wake_time, period );
 8000ea8:	4b07      	ldr	r3, [pc, #28]	; (8000ec8 <control_thread+0x70>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4619      	mov	r1, r3
 8000eae:	4804      	ldr	r0, [pc, #16]	; (8000ec0 <control_thread+0x68>)
 8000eb0:	f009 f932 	bl	800a118 <vTaskDelayUntil>
		control_update(&control);
 8000eb4:	e7e9      	b.n	8000e8a <control_thread+0x32>
 8000eb6:	bf00      	nop
 8000eb8:	200000f4 	.word	0x200000f4
 8000ebc:	20000194 	.word	0x20000194
 8000ec0:	2000161c 	.word	0x2000161c
 8000ec4:	20000024 	.word	0x20000024
 8000ec8:	0800b44c 	.word	0x0800b44c

08000ecc <control_update>:
	}
}


static void control_update(CONTROL_INST_t * control) {
 8000ecc:	b590      	push	{r4, r7, lr}
 8000ece:	b087      	sub	sp, #28
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6178      	str	r0, [r7, #20]

	control->last_time = control->time;
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	685a      	ldr	r2, [r3, #4]
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	609a      	str	r2, [r3, #8]
	control->time = HAL_GetTick();
 8000edc:	f002 feb6 	bl	8003c4c <HAL_GetTick>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	605a      	str	r2, [r3, #4]
	control->iter++;
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	695b      	ldr	r3, [r3, #20]
 8000eea:	1c5a      	adds	r2, r3, #1
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	615a      	str	r2, [r3, #20]

	if(control->counter_active) {
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	7c1b      	ldrb	r3, [r3, #16]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d06d      	beq.n	8000fd4 <control_update+0x108>
		control->counter -= (control->time - control->last_time);
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	4619      	mov	r1, r3
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	689a      	ldr	r2, [r3, #8]
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	1ad3      	subs	r3, r2, r3
 8000f08:	440b      	add	r3, r1
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	60da      	str	r2, [r3, #12]
	}

	while(can_msgPending()) {
 8000f10:	e060      	b.n	8000fd4 <control_update+0x108>
		control->msg = can_readBuffer();
 8000f12:	697c      	ldr	r4, [r7, #20]
 8000f14:	463b      	mov	r3, r7
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff fba8 	bl	800066c <can_readBuffer>
 8000f1c:	3428      	adds	r4, #40	; 0x28
 8000f1e:	463b      	mov	r3, r7
 8000f20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f22:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

		if(control->msg.id == DATA_ID_PRESSURE){
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d105      	bne.n	8000f3c <control_update+0x70>
			control->sensor_payload.baro = (int32_t) control->msg.data;
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f34:	461a      	mov	r2, r3
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	655a      	str	r2, [r3, #84]	; 0x54
 8000f3a:	e04b      	b.n	8000fd4 <control_update+0x108>
		} else if(control->msg.id == DATA_ID_ACCELERATION_X) {
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d105      	bne.n	8000f52 <control_update+0x86>
			control->sensor_payload.acc_x = (int32_t) control->msg.data;
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f50:	e040      	b.n	8000fd4 <control_update+0x108>
		} else if(control->msg.id == DATA_ID_ACCELERATION_Y) {
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	d105      	bne.n	8000f68 <control_update+0x9c>
			control->sensor_payload.acc_y = (int32_t) control->msg.data;
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f60:	461a      	mov	r2, r3
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	641a      	str	r2, [r3, #64]	; 0x40
 8000f66:	e035      	b.n	8000fd4 <control_update+0x108>
		} else if(control->msg.id == DATA_ID_ACCELERATION_Z) {
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000f6e:	2b03      	cmp	r3, #3
 8000f70:	d105      	bne.n	8000f7e <control_update+0xb2>
			control->sensor_payload.acc_z = (int32_t) control->msg.data;
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f76:	461a      	mov	r2, r3
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	645a      	str	r2, [r3, #68]	; 0x44
 8000f7c:	e02a      	b.n	8000fd4 <control_update+0x108>
		} else if(control->msg.id == DATA_ID_GYRO_X) {
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000f84:	2b04      	cmp	r3, #4
 8000f86:	d105      	bne.n	8000f94 <control_update+0xc8>
			control->sensor_payload.gyro_x = (int32_t) control->msg.data;
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	649a      	str	r2, [r3, #72]	; 0x48
 8000f92:	e01f      	b.n	8000fd4 <control_update+0x108>
		} else if(control->msg.id == DATA_ID_GYRO_Y) {
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000f9a:	2b05      	cmp	r3, #5
 8000f9c:	d105      	bne.n	8000faa <control_update+0xde>
			control->sensor_payload.gyro_y = (int32_t) control->msg.data;
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	64da      	str	r2, [r3, #76]	; 0x4c
 8000fa8:	e014      	b.n	8000fd4 <control_update+0x108>
		} else if(control->msg.id == DATA_ID_GYRO_Z) {
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000fb0:	2b06      	cmp	r3, #6
 8000fb2:	d105      	bne.n	8000fc0 <control_update+0xf4>
			control->sensor_payload.gyro_z = (int32_t) control->msg.data;
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fb8:	461a      	mov	r2, r3
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	651a      	str	r2, [r3, #80]	; 0x50
 8000fbe:	e009      	b.n	8000fd4 <control_update+0x108>
		} else if(control->msg.id == DATA_ID_PRESS_2) {
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000fc6:	2b56      	cmp	r3, #86	; 0x56
 8000fc8:	d104      	bne.n	8000fd4 <control_update+0x108>
			control->sensor_payload.cc_pressure = (int32_t) control->msg.data;
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fce:	461a      	mov	r2, r3
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	659a      	str	r2, [r3, #88]	; 0x58
	while(can_msgPending()) {
 8000fd4:	f7ff fb30 	bl	8000638 <can_msgPending>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d199      	bne.n	8000f12 <control_update+0x46>
	servo_sync(control->tvc_servo);
#endif

	//init error if there is an issue with a motor

	if(control_sched_should_run(control, CONTROL_SCHED_ABORT)) {
 8000fde:	2101      	movs	r1, #1
 8000fe0:	6978      	ldr	r0, [r7, #20]
 8000fe2:	f000 f9f9 	bl	80013d8 <control_sched_should_run>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d006      	beq.n	8000ffa <control_update+0x12e>
		init_abort(control);
 8000fec:	6978      	ldr	r0, [r7, #20]
 8000fee:	f000 f8d0 	bl	8001192 <init_abort>
		control_sched_done(control, CONTROL_SCHED_ABORT);
 8000ff2:	2101      	movs	r1, #1
 8000ff4:	6978      	ldr	r0, [r7, #20]
 8000ff6:	f000 fa04 	bl	8001402 <control_sched_done>
	}
}
 8000ffa:	bf00      	nop
 8000ffc:	371c      	adds	r7, #28
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd90      	pop	{r4, r7, pc}

08001002 <init_control>:

static void init_control(CONTROL_INST_t * control) {
 8001002:	b480      	push	{r7}
 8001004:	b083      	sub	sp, #12
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
	control->sched = CONTROL_SCHED_NOTHING;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2200      	movs	r2, #0
 800100e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	control->counter_active = 0;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2200      	movs	r2, #0
 8001016:	741a      	strb	r2, [r3, #16]
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <init_idle>:

static void init_idle(CONTROL_INST_t * control) {
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
	control->state = CS_IDLE;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2200      	movs	r2, #0
 8001030:	701a      	strb	r2, [r3, #0]
	led_set_color(LED_GREEN);
 8001032:	2200      	movs	r2, #0
 8001034:	21ff      	movs	r1, #255	; 0xff
 8001036:	2000      	movs	r0, #0
 8001038:	f000 feaa 	bl	8001d90 <led_set_color>
	storage_disable();
 800103c:	f001 fb6a 	bl	8002714 <storage_disable>
	cm4_force_shutdown(control->cm4);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff fecd 	bl	8000de4 <cm4_force_shutdown>
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <idle>:

static void idle(CONTROL_INST_t * control) {
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
	if(control_sched_should_run(control, CONTROL_SCHED_MOVE_TVC)) {
		servo_move(control->tvc_servo, control->tvc_mov_target);
		control_sched_done(control, CONTROL_SCHED_MOVE_TVC);
	}
#endif
	if(control_sched_should_run(control, CONTROL_SCHED_BOOT)) {
 800105a:	2102      	movs	r1, #2
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f000 f9bb 	bl	80013d8 <control_sched_should_run>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d006      	beq.n	8001076 <idle+0x24>
		init_boot(control);
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f000 f808 	bl	800107e <init_boot>
		control_sched_done(control, CONTROL_SCHED_BOOT);
 800106e:	2102      	movs	r1, #2
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f000 f9c6 	bl	8001402 <control_sched_done>
	}

}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <init_boot>:

static void init_boot(CONTROL_INST_t * control) {
 800107e:	b580      	push	{r7, lr}
 8001080:	b082      	sub	sp, #8
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
	//global enable
	//to boot the rpi
	led_set_color(LED_LILA);
 8001086:	224f      	movs	r2, #79	; 0x4f
 8001088:	2103      	movs	r1, #3
 800108a:	20ff      	movs	r0, #255	; 0xff
 800108c:	f000 fe80 	bl	8001d90 <led_set_color>
	control->state = CS_BOOT;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2201      	movs	r2, #1
 8001094:	701a      	strb	r2, [r3, #0]
	cm4_boot(control->cm4);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	699b      	ldr	r3, [r3, #24]
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff fe43 	bl	8000d26 <cm4_boot>
}
 80010a0:	bf00      	nop
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <boot>:

static void boot(CONTROL_INST_t * control) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
	//wait for the cm4 to start answering with concluent status packets
	uint8_t ready = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	73fb      	strb	r3, [r7, #15]
	cm4_is_ready(control->cm4, &ready);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	f107 020f 	add.w	r2, r7, #15
 80010bc:	4611      	mov	r1, r2
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff fe3c 	bl	8000d3c <cm4_is_ready>
	if(ready) {
 80010c4:	7bfb      	ldrb	r3, [r7, #15]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d002      	beq.n	80010d0 <boot+0x28>
		init_compute(control);
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f000 f804 	bl	80010d8 <init_compute>
	}
}
 80010d0:	bf00      	nop
 80010d2:	3710      	adds	r7, #16
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <init_compute>:

static void init_compute(CONTROL_INST_t * control) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
	//start sending data to raspberry pi
	led_set_color(LED_BLUE);
 80010e0:	22ff      	movs	r2, #255	; 0xff
 80010e2:	2100      	movs	r1, #0
 80010e4:	2000      	movs	r0, #0
 80010e6:	f000 fe53 	bl	8001d90 <led_set_color>
	control->state = CS_COMPUTE;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2202      	movs	r2, #2
 80010ee:	701a      	strb	r2, [r3, #0]
}
 80010f0:	bf00      	nop
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <compute>:

static void compute(CONTROL_INST_t * control) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]

	cm4_transaction(control->cm4, &control->sensor_payload, &control->command_payload);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6998      	ldr	r0, [r3, #24]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	336c      	adds	r3, #108	; 0x6c
 800110e:	461a      	mov	r2, r3
 8001110:	f7ff fcff 	bl	8000b12 <cm4_transaction>

	if(control_sched_should_run(control, CONTROL_SCHED_SHUTDOWN)) {
 8001114:	2103      	movs	r1, #3
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f000 f95e 	bl	80013d8 <control_sched_should_run>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d006      	beq.n	8001130 <compute+0x38>
		init_shutdown(control);
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f000 f808 	bl	8001138 <init_shutdown>
		control_sched_done(control, CONTROL_SCHED_SHUTDOWN);
 8001128:	2103      	movs	r1, #3
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f000 f969 	bl	8001402 <control_sched_done>
	}
}
 8001130:	bf00      	nop
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <init_shutdown>:


static void init_shutdown(CONTROL_INST_t * control) {
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
	led_set_color(LED_ORANGE);
 8001140:	2207      	movs	r2, #7
 8001142:	210f      	movs	r1, #15
 8001144:	207f      	movs	r0, #127	; 0x7f
 8001146:	f000 fe23 	bl	8001d90 <led_set_color>
	control->state = CS_SHUTDOWN;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2203      	movs	r2, #3
 800114e:	701a      	strb	r2, [r3, #0]
	cm4_shutdown(control->cm4);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff fe11 	bl	8000d7c <cm4_shutdown>
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <shutdown>:

static void shutdown(CONTROL_INST_t * control) {
 8001162:	b580      	push	{r7, lr}
 8001164:	b084      	sub	sp, #16
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
	uint8_t shutdown = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	73fb      	strb	r3, [r7, #15]
	cm4_is_shutdown(control->cm4, &shutdown);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	699b      	ldr	r3, [r3, #24]
 8001172:	f107 020f 	add.w	r2, r7, #15
 8001176:	4611      	mov	r1, r2
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff fe15 	bl	8000da8 <cm4_is_shutdown>
	if(shutdown) {
 800117e:	7bfb      	ldrb	r3, [r7, #15]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d002      	beq.n	800118a <shutdown+0x28>
		init_idle(control);
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff ff4d 	bl	8001024 <init_idle>
	}
}
 800118a:	bf00      	nop
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <init_abort>:

static void init_abort(CONTROL_INST_t * control) {
 8001192:	b580      	push	{r7, lr}
 8001194:	b082      	sub	sp, #8
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
	led_set_color(LED_PINK);
 800119a:	227f      	movs	r2, #127	; 0x7f
 800119c:	2100      	movs	r1, #0
 800119e:	207f      	movs	r0, #127	; 0x7f
 80011a0:	f000 fdf6 	bl	8001d90 <led_set_color>
	control->shadow_state = control->state;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	781a      	ldrb	r2, [r3, #0]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	705a      	strb	r2, [r3, #1]
	control->state = CS_ABORT;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2204      	movs	r2, #4
 80011b0:	701a      	strb	r2, [r3, #0]
#if USE_DYNAMIXEL == 1
	servo_move(control->tvc_servo, 2048); //2048 is the straight position
#endif
	control->counter_active=0;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2200      	movs	r2, #0
 80011b6:	741a      	strb	r2, [r3, #16]
	storage_disable();
 80011b8:	f001 faac 	bl	8002714 <storage_disable>
	cm4_force_shutdown(control->cm4);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff fe0f 	bl	8000de4 <cm4_force_shutdown>
}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <_abort>:

static void _abort(CONTROL_INST_t * control) {
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b082      	sub	sp, #8
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
	if(control_sched_should_run(control, CONTROL_SCHED_RECOVER)) {
 80011d6:	2105      	movs	r1, #5
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f000 f8fd 	bl	80013d8 <control_sched_should_run>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d006      	beq.n	80011f2 <_abort+0x24>
		init_idle(control);
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f7ff ff1d 	bl	8001024 <init_idle>
		control_sched_done(control, CONTROL_SCHED_RECOVER);
 80011ea:	2105      	movs	r1, #5
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f000 f908 	bl	8001402 <control_sched_done>
	}
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <init_error>:

static void init_error(CONTROL_INST_t * control) {
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
	led_set_color(LED_RED);
 8001202:	2200      	movs	r2, #0
 8001204:	2100      	movs	r1, #0
 8001206:	20ff      	movs	r0, #255	; 0xff
 8001208:	f000 fdc2 	bl	8001d90 <led_set_color>
	control->state = CS_ERROR;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2205      	movs	r2, #5
 8001210:	701a      	strb	r2, [r3, #0]
	control->counter_active = 0;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2200      	movs	r2, #0
 8001216:	741a      	strb	r2, [r3, #16]
	storage_disable();
 8001218:	f001 fa7c 	bl	8002714 <storage_disable>
}
 800121c:	bf00      	nop
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <error>:

static void error(CONTROL_INST_t * control) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
	//wait for user release
	if(control_sched_should_run(control, CONTROL_SCHED_RECOVER)) {
 800122c:	2105      	movs	r1, #5
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f000 f8d2 	bl	80013d8 <control_sched_should_run>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d006      	beq.n	8001248 <error+0x24>
		init_idle(control);
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff fef2 	bl	8001024 <init_idle>
		control_sched_done(control, CONTROL_SCHED_RECOVER);
 8001240:	2105      	movs	r1, #5
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f000 f8dd 	bl	8001402 <control_sched_done>
	}
}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <control_move_tvc>:
CONTROL_STATE_t control_get_state() {
	return control.state;
}


void control_move_tvc(int32_t target) {
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
	control_sched_set(&control, CONTROL_SCHED_MOVE_TVC);
 8001258:	2104      	movs	r1, #4
 800125a:	4805      	ldr	r0, [pc, #20]	; (8001270 <control_move_tvc+0x20>)
 800125c:	f000 f8ea 	bl	8001434 <control_sched_set>
	control.tvc_mov_target = target;
 8001260:	4a03      	ldr	r2, [pc, #12]	; (8001270 <control_move_tvc+0x20>)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6213      	str	r3, [r2, #32]
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	200000f4 	.word	0x200000f4

08001274 <control_boot>:

void control_boot(void) {
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
	control_sched_set(&control, CONTROL_SCHED_BOOT);
 8001278:	2102      	movs	r1, #2
 800127a:	4802      	ldr	r0, [pc, #8]	; (8001284 <control_boot+0x10>)
 800127c:	f000 f8da 	bl	8001434 <control_sched_set>
}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}
 8001284:	200000f4 	.word	0x200000f4

08001288 <control_shutdown>:

void control_shutdown(void) {
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
	control_sched_set(&control, CONTROL_SCHED_SHUTDOWN);
 800128c:	2103      	movs	r1, #3
 800128e:	4802      	ldr	r0, [pc, #8]	; (8001298 <control_shutdown+0x10>)
 8001290:	f000 f8d0 	bl	8001434 <control_sched_set>
}
 8001294:	bf00      	nop
 8001296:	bd80      	pop	{r7, pc}
 8001298:	200000f4 	.word	0x200000f4

0800129c <control_abort>:

void control_abort() {
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
	control_sched_set(&control, CONTROL_SCHED_ABORT);
 80012a0:	2101      	movs	r1, #1
 80012a2:	4802      	ldr	r0, [pc, #8]	; (80012ac <control_abort+0x10>)
 80012a4:	f000 f8c6 	bl	8001434 <control_sched_set>
}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	200000f4 	.word	0x200000f4

080012b0 <control_recover>:

void control_recover() {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
	control_sched_set(&control, CONTROL_SCHED_RECOVER);
 80012b4:	2105      	movs	r1, #5
 80012b6:	4802      	ldr	r0, [pc, #8]	; (80012c0 <control_recover+0x10>)
 80012b8:	f000 f8bc 	bl	8001434 <control_sched_set>
}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	200000f4 	.word	0x200000f4

080012c4 <control_get_status>:

CONTROL_STATUS_t control_get_status() {
 80012c4:	b4b0      	push	{r4, r5, r7}
 80012c6:	b089      	sub	sp, #36	; 0x24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
	CONTROL_STATUS_t status = {0};
 80012cc:	f107 0308 	add.w	r3, r7, #8
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	60da      	str	r2, [r3, #12]
 80012da:	611a      	str	r2, [r3, #16]
 80012dc:	615a      	str	r2, [r3, #20]
	status.state = control.state;
 80012de:	4b17      	ldr	r3, [pc, #92]	; (800133c <control_get_status+0x78>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	723b      	strb	r3, [r7, #8]
	status.tvc_error = control.tvc_servo->error;
 80012e4:	4b15      	ldr	r3, [pc, #84]	; (800133c <control_get_status+0x78>)
 80012e6:	69db      	ldr	r3, [r3, #28]
 80012e8:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 80012ec:	3318      	adds	r3, #24
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	737b      	strb	r3, [r7, #13]
	status.tvc_psu_voltage = control.tvc_servo->psu_voltage;
 80012f2:	4b12      	ldr	r3, [pc, #72]	; (800133c <control_get_status+0x78>)
 80012f4:	69db      	ldr	r3, [r3, #28]
 80012f6:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 80012fa:	3310      	adds	r3, #16
 80012fc:	881b      	ldrh	r3, [r3, #0]
 80012fe:	817b      	strh	r3, [r7, #10]
	status.tvc_temperature = control.tvc_servo->temperature;
 8001300:	4b0e      	ldr	r3, [pc, #56]	; (800133c <control_get_status+0x78>)
 8001302:	69db      	ldr	r3, [r3, #28]
 8001304:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 8001308:	3312      	adds	r3, #18
 800130a:	f993 3000 	ldrsb.w	r3, [r3]
 800130e:	733b      	strb	r3, [r7, #12]
	status.tvc_position = control.tvc_servo->position;
 8001310:	4b0a      	ldr	r3, [pc, #40]	; (800133c <control_get_status+0x78>)
 8001312:	69db      	ldr	r3, [r3, #28]
 8001314:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 8001318:	3314      	adds	r3, #20
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	613b      	str	r3, [r7, #16]

	return status;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	461d      	mov	r5, r3
 8001322:	f107 0408 	add.w	r4, r7, #8
 8001326:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001328:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800132a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800132e:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	3724      	adds	r7, #36	; 0x24
 8001336:	46bd      	mov	sp, r7
 8001338:	bcb0      	pop	{r4, r5, r7}
 800133a:	4770      	bx	lr
 800133c:	200000f4 	.word	0x200000f4

08001340 <control_set_sens>:

void control_set_sens(CM4_PAYLOAD_SENSOR_t sens) {
 8001340:	b084      	sub	sp, #16
 8001342:	b4b0      	push	{r4, r5, r7}
 8001344:	af00      	add	r7, sp, #0
 8001346:	f107 040c 	add.w	r4, r7, #12
 800134a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	control.sensor_payload = sens;
 800134e:	4b09      	ldr	r3, [pc, #36]	; (8001374 <control_set_sens+0x34>)
 8001350:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8001354:	f107 050c 	add.w	r5, r7, #12
 8001358:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800135a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800135c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800135e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001360:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001362:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001364:	682b      	ldr	r3, [r5, #0]
 8001366:	6023      	str	r3, [r4, #0]
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	bcb0      	pop	{r4, r5, r7}
 800136e:	b004      	add	sp, #16
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	200000f4 	.word	0x200000f4

08001378 <control_get_sens>:

CM4_PAYLOAD_SENSOR_t control_get_sens(void) {
 8001378:	b4b0      	push	{r4, r5, r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
	return control.sensor_payload;
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <control_get_sens+0x2c>)
 8001384:	4615      	mov	r5, r2
 8001386:	f103 0438 	add.w	r4, r3, #56	; 0x38
 800138a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800138c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800138e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001390:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001392:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001394:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001396:	6823      	ldr	r3, [r4, #0]
 8001398:	602b      	str	r3, [r5, #0]
}
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	bcb0      	pop	{r4, r5, r7}
 80013a2:	4770      	bx	lr
 80013a4:	200000f4 	.word	0x200000f4

080013a8 <control_get_cmd>:

CM4_PAYLOAD_COMMAND_t control_get_cmd(void) {
 80013a8:	b4b0      	push	{r4, r5, r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
	return control.command_payload;
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <control_get_cmd+0x2c>)
 80013b4:	4615      	mov	r5, r2
 80013b6:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 80013ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013c6:	6823      	ldr	r3, [r4, #0]
 80013c8:	602b      	str	r3, [r5, #0]
}
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bcb0      	pop	{r4, r5, r7}
 80013d2:	4770      	bx	lr
 80013d4:	200000f4 	.word	0x200000f4

080013d8 <control_sched_should_run>:


static uint8_t control_sched_should_run(CONTROL_INST_t * control, CONTROL_SCHED_t num) {
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	460b      	mov	r3, r1
 80013e2:	70fb      	strb	r3, [r7, #3]
	return control->sched == num;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80013ea:	78fa      	ldrb	r2, [r7, #3]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	bf0c      	ite	eq
 80013f0:	2301      	moveq	r3, #1
 80013f2:	2300      	movne	r3, #0
 80013f4:	b2db      	uxtb	r3, r3
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <control_sched_done>:

static void control_sched_done(CONTROL_INST_t * control, CONTROL_SCHED_t num) {
 8001402:	b580      	push	{r7, lr}
 8001404:	b082      	sub	sp, #8
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
 800140a:	460b      	mov	r3, r1
 800140c:	70fb      	strb	r3, [r7, #3]
	if(control->sched == num) {
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001414:	78fa      	ldrb	r2, [r7, #3]
 8001416:	429a      	cmp	r2, r3
 8001418:	d104      	bne.n	8001424 <control_sched_done+0x22>
		control->sched = CONTROL_SCHED_NOTHING;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2200      	movs	r2, #0
 800141e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	} else {
		init_error(control);
	}
}
 8001422:	e002      	b.n	800142a <control_sched_done+0x28>
		init_error(control);
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f7ff fee8 	bl	80011fa <init_error>
}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <control_sched_set>:

static void control_sched_set(CONTROL_INST_t * control, CONTROL_SCHED_t num) {
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	460b      	mov	r3, r1
 800143e:	70fb      	strb	r3, [r7, #3]
	if(num == CONTROL_SCHED_ABORT) { //ABORT ALWAYS TAKES OVER
 8001440:	78fb      	ldrb	r3, [r7, #3]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d103      	bne.n	800144e <control_sched_set+0x1a>
		control->sched = num;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	78fa      	ldrb	r2, [r7, #3]
 800144a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	}
	if(control->sched == CONTROL_SCHED_NOTHING) {
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001454:	2b00      	cmp	r3, #0
 8001456:	d11c      	bne.n	8001492 <control_sched_set+0x5e>
		for(uint8_t i = 0; i < SCHED_ALLOWED_WIDTH; i++) {
 8001458:	2300      	movs	r3, #0
 800145a:	73fb      	strb	r3, [r7, #15]
 800145c:	e016      	b.n	800148c <control_sched_set+0x58>
			if(sched_allowed[control->state][i] == num) {
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	4618      	mov	r0, r3
 8001464:	7bfa      	ldrb	r2, [r7, #15]
 8001466:	490d      	ldr	r1, [pc, #52]	; (800149c <control_sched_set+0x68>)
 8001468:	4603      	mov	r3, r0
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	4403      	add	r3, r0
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	440b      	add	r3, r1
 8001472:	4413      	add	r3, r2
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	78fa      	ldrb	r2, [r7, #3]
 8001478:	429a      	cmp	r2, r3
 800147a:	d104      	bne.n	8001486 <control_sched_set+0x52>
				control->sched = num;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	78fa      	ldrb	r2, [r7, #3]
 8001480:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				return;
 8001484:	e005      	b.n	8001492 <control_sched_set+0x5e>
		for(uint8_t i = 0; i < SCHED_ALLOWED_WIDTH; i++) {
 8001486:	7bfb      	ldrb	r3, [r7, #15]
 8001488:	3301      	adds	r3, #1
 800148a:	73fb      	strb	r3, [r7, #15]
 800148c:	7bfb      	ldrb	r3, [r7, #15]
 800148e:	2b05      	cmp	r3, #5
 8001490:	d9e5      	bls.n	800145e <control_sched_set+0x2a>
			}
		}
	}
}
 8001492:	3714      	adds	r7, #20
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	20000000 	.word	0x20000000

080014a0 <util_encode_u8>:
static inline void util_encode_u8(uint8_t * data, uint8_t value) {
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	460b      	mov	r3, r1
 80014aa:	70fb      	strb	r3, [r7, #3]
	data[0] = value;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	78fa      	ldrb	r2, [r7, #3]
 80014b0:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	3301      	adds	r3, #1
 80014b6:	2200      	movs	r2, #0
 80014b8:	701a      	strb	r2, [r3, #0]
	data[2] = 0x00;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	3302      	adds	r3, #2
 80014be:	2200      	movs	r2, #0
 80014c0:	701a      	strb	r2, [r3, #0]
	data[3] = 0x00;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	3303      	adds	r3, #3
 80014c6:	2200      	movs	r2, #0
 80014c8:	701a      	strb	r2, [r3, #0]
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <util_encode_u16>:
static inline void util_encode_u16(uint8_t * data, uint16_t value) {
 80014d6:	b480      	push	{r7}
 80014d8:	b083      	sub	sp, #12
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
 80014de:	460b      	mov	r3, r1
 80014e0:	807b      	strh	r3, [r7, #2]
	data[0] = value;
 80014e2:	887b      	ldrh	r3, [r7, #2]
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	701a      	strb	r2, [r3, #0]
	data[1] = value>>8;
 80014ea:	887b      	ldrh	r3, [r7, #2]
 80014ec:	0a1b      	lsrs	r3, r3, #8
 80014ee:	b29a      	uxth	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3301      	adds	r3, #1
 80014f4:	b2d2      	uxtb	r2, r2
 80014f6:	701a      	strb	r2, [r3, #0]
	data[2] = 0x00;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3302      	adds	r3, #2
 80014fc:	2200      	movs	r2, #0
 80014fe:	701a      	strb	r2, [r3, #0]
	data[3] = 0x00;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3303      	adds	r3, #3
 8001504:	2200      	movs	r2, #0
 8001506:	701a      	strb	r2, [r3, #0]
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <util_encode_u32>:
static inline void util_encode_u32(uint8_t * data, uint32_t value) {
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
	data[0] = value;
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	b2da      	uxtb	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	701a      	strb	r2, [r3, #0]
	data[1] = value>>8;
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	0a1a      	lsrs	r2, r3, #8
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	3301      	adds	r3, #1
 800152e:	b2d2      	uxtb	r2, r2
 8001530:	701a      	strb	r2, [r3, #0]
	data[2] = value>>16;
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	0c1a      	lsrs	r2, r3, #16
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	3302      	adds	r3, #2
 800153a:	b2d2      	uxtb	r2, r2
 800153c:	701a      	strb	r2, [r3, #0]
	data[3] = value>>24;
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	0e1a      	lsrs	r2, r3, #24
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	3303      	adds	r3, #3
 8001546:	b2d2      	uxtb	r2, r2
 8001548:	701a      	strb	r2, [r3, #0]
}
 800154a:	bf00      	nop
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <util_encode_i8>:
static inline void util_encode_i8(uint8_t * data, int8_t value) {
 8001556:	b480      	push	{r7}
 8001558:	b083      	sub	sp, #12
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
 800155e:	460b      	mov	r3, r1
 8001560:	70fb      	strb	r3, [r7, #3]
	data[0] = value;
 8001562:	78fa      	ldrb	r2, [r7, #3]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	3301      	adds	r3, #1
 800156c:	2200      	movs	r2, #0
 800156e:	701a      	strb	r2, [r3, #0]
	data[2] = 0x00;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	3302      	adds	r3, #2
 8001574:	2200      	movs	r2, #0
 8001576:	701a      	strb	r2, [r3, #0]
	data[3] = 0x00;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	3303      	adds	r3, #3
 800157c:	2200      	movs	r2, #0
 800157e:	701a      	strb	r2, [r3, #0]
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <util_encode_i32>:
static inline void util_encode_i32(uint8_t * data, int32_t value) {
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
	data[0] = value;
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	b2da      	uxtb	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	701a      	strb	r2, [r3, #0]
	data[1] = value>>8;
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	121a      	asrs	r2, r3, #8
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	3301      	adds	r3, #1
 80015a6:	b2d2      	uxtb	r2, r2
 80015a8:	701a      	strb	r2, [r3, #0]
	data[2] = value>>16;
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	141a      	asrs	r2, r3, #16
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	3302      	adds	r3, #2
 80015b2:	b2d2      	uxtb	r2, r2
 80015b4:	701a      	strb	r2, [r3, #0]
	data[3] = value>>24;
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	161a      	asrs	r2, r3, #24
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	3303      	adds	r3, #3
 80015be:	b2d2      	uxtb	r2, r2
 80015c0:	701a      	strb	r2, [r3, #0]
}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr

080015ce <util_decode_u32>:
static inline uint32_t util_decode_u32(uint8_t * data) {
 80015ce:	b480      	push	{r7}
 80015d0:	b083      	sub	sp, #12
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
	return (uint32_t) data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	461a      	mov	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3301      	adds	r3, #1
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	021b      	lsls	r3, r3, #8
 80015e4:	4313      	orrs	r3, r2
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	3202      	adds	r2, #2
 80015ea:	7812      	ldrb	r2, [r2, #0]
 80015ec:	0412      	lsls	r2, r2, #16
 80015ee:	4313      	orrs	r3, r2
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	3203      	adds	r2, #3
 80015f4:	7812      	ldrb	r2, [r2, #0]
 80015f6:	0612      	lsls	r2, r2, #24
 80015f8:	4313      	orrs	r3, r2
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr

08001606 <util_decode_i32>:
static inline int32_t util_decode_i32(uint8_t * data) {
 8001606:	b480      	push	{r7}
 8001608:	b083      	sub	sp, #12
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
	return (int32_t) data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	461a      	mov	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3301      	adds	r3, #1
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	021b      	lsls	r3, r3, #8
 800161c:	431a      	orrs	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	3302      	adds	r3, #2
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	041b      	lsls	r3, r3, #16
 8001626:	431a      	orrs	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	3303      	adds	r3, #3
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	061b      	lsls	r3, r3, #24
 8001630:	4313      	orrs	r3, r2
}
 8001632:	4618      	mov	r0, r3
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
	...

08001640 <debug_decode_fcn>:
 *	DECLARATIONS
 **********************/


//Requires an instance of type debug
SERIAL_RET_t debug_decode_fcn(void * inst, uint8_t data) {
 8001640:	b590      	push	{r4, r7, lr}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	460b      	mov	r3, r1
 800164a:	70fb      	strb	r3, [r7, #3]
	static uint8_t send_data[MSV2_MAX_DATA_LEN];
	static uint16_t length = 0;
	static uint16_t bin_length = 0;
	DEBUG_INST_t * debug = (DEBUG_INST_t *) inst;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	60fb      	str	r3, [r7, #12]
	MSV2_ERROR_t tmp = msv2_decode_fragment(&debug->msv2, data);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	3304      	adds	r3, #4
 8001654:	78fa      	ldrb	r2, [r7, #3]
 8001656:	4611      	mov	r1, r2
 8001658:	4618      	mov	r0, r3
 800165a:	f000 fcef 	bl	800203c <msv2_decode_fragment>
 800165e:	4603      	mov	r3, r0
 8001660:	72fb      	strb	r3, [r7, #11]

	if(tmp == MSV2_SUCCESS) {
 8001662:	7afb      	ldrb	r3, [r7, #11]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d15e      	bne.n	8001726 <debug_decode_fcn+0xe6>
		if(debug->msv2.rx.opcode < debug_fcn_max) {
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	7a1b      	ldrb	r3, [r3, #8]
 800166c:	b29a      	uxth	r2, r3
 800166e:	4b30      	ldr	r3, [pc, #192]	; (8001730 <debug_decode_fcn+0xf0>)
 8001670:	881b      	ldrh	r3, [r3, #0]
 8001672:	429a      	cmp	r2, r3
 8001674:	d22e      	bcs.n	80016d4 <debug_decode_fcn+0x94>

			debug_fcn[debug->msv2.rx.opcode](debug->msv2.rx.data, debug->msv2.rx.length, send_data, &length);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	7a1b      	ldrb	r3, [r3, #8]
 800167a:	461a      	mov	r2, r3
 800167c:	4b2d      	ldr	r3, [pc, #180]	; (8001734 <debug_decode_fcn+0xf4>)
 800167e:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	f103 0012 	add.w	r0, r3, #18
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	89d9      	ldrh	r1, [r3, #14]
 800168c:	4b2a      	ldr	r3, [pc, #168]	; (8001738 <debug_decode_fcn+0xf8>)
 800168e:	4a2b      	ldr	r2, [pc, #172]	; (800173c <debug_decode_fcn+0xfc>)
 8001690:	47a0      	blx	r4
			//length is in words
			bin_length = msv2_create_frame(&debug->msv2, debug->msv2.rx.opcode, length/2, send_data);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	1d18      	adds	r0, r3, #4
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	7a19      	ldrb	r1, [r3, #8]
 800169a:	4b27      	ldr	r3, [pc, #156]	; (8001738 <debug_decode_fcn+0xf8>)
 800169c:	881b      	ldrh	r3, [r3, #0]
 800169e:	085b      	lsrs	r3, r3, #1
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	b2da      	uxtb	r2, r3
 80016a4:	4b25      	ldr	r3, [pc, #148]	; (800173c <debug_decode_fcn+0xfc>)
 80016a6:	f000 fbe3 	bl	8001e70 <msv2_create_frame>
 80016aa:	4603      	mov	r3, r0
 80016ac:	461a      	mov	r2, r3
 80016ae:	4b24      	ldr	r3, [pc, #144]	; (8001740 <debug_decode_fcn+0x100>)
 80016b0:	801a      	strh	r2, [r3, #0]
			serial_send(&debug->ser, msv2_tx_data(&debug->msv2), bin_length);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	f503 5480 	add.w	r4, r3, #4096	; 0x1000
 80016b8:	3418      	adds	r4, #24
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	3304      	adds	r3, #4
 80016be:	4618      	mov	r0, r3
 80016c0:	f000 fdb0 	bl	8002224 <msv2_tx_data>
 80016c4:	4601      	mov	r1, r0
 80016c6:	4b1e      	ldr	r3, [pc, #120]	; (8001740 <debug_decode_fcn+0x100>)
 80016c8:	881b      	ldrh	r3, [r3, #0]
 80016ca:	461a      	mov	r2, r3
 80016cc:	4620      	mov	r0, r4
 80016ce:	f000 fecf 	bl	8002470 <serial_send>
 80016d2:	e028      	b.n	8001726 <debug_decode_fcn+0xe6>
		} else {
			send_data[0] = CRC_ERROR_LO;
 80016d4:	4b19      	ldr	r3, [pc, #100]	; (800173c <debug_decode_fcn+0xfc>)
 80016d6:	22be      	movs	r2, #190	; 0xbe
 80016d8:	701a      	strb	r2, [r3, #0]
			send_data[1] = CRC_ERROR_HI;
 80016da:	4b18      	ldr	r3, [pc, #96]	; (800173c <debug_decode_fcn+0xfc>)
 80016dc:	22eb      	movs	r2, #235	; 0xeb
 80016de:	705a      	strb	r2, [r3, #1]
			length = 2;
 80016e0:	4b15      	ldr	r3, [pc, #84]	; (8001738 <debug_decode_fcn+0xf8>)
 80016e2:	2202      	movs	r2, #2
 80016e4:	801a      	strh	r2, [r3, #0]
			bin_length = msv2_create_frame(&debug->msv2, debug->msv2.rx.opcode, length/2, send_data);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	1d18      	adds	r0, r3, #4
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	7a19      	ldrb	r1, [r3, #8]
 80016ee:	4b12      	ldr	r3, [pc, #72]	; (8001738 <debug_decode_fcn+0xf8>)
 80016f0:	881b      	ldrh	r3, [r3, #0]
 80016f2:	085b      	lsrs	r3, r3, #1
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	b2da      	uxtb	r2, r3
 80016f8:	4b10      	ldr	r3, [pc, #64]	; (800173c <debug_decode_fcn+0xfc>)
 80016fa:	f000 fbb9 	bl	8001e70 <msv2_create_frame>
 80016fe:	4603      	mov	r3, r0
 8001700:	461a      	mov	r2, r3
 8001702:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <debug_decode_fcn+0x100>)
 8001704:	801a      	strh	r2, [r3, #0]
			serial_send(&debug->ser, msv2_tx_data(&debug->msv2), bin_length);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	f503 5480 	add.w	r4, r3, #4096	; 0x1000
 800170c:	3418      	adds	r4, #24
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	3304      	adds	r3, #4
 8001712:	4618      	mov	r0, r3
 8001714:	f000 fd86 	bl	8002224 <msv2_tx_data>
 8001718:	4601      	mov	r1, r0
 800171a:	4b09      	ldr	r3, [pc, #36]	; (8001740 <debug_decode_fcn+0x100>)
 800171c:	881b      	ldrh	r3, [r3, #0]
 800171e:	461a      	mov	r2, r3
 8001720:	4620      	mov	r0, r4
 8001722:	f000 fea5 	bl	8002470 <serial_send>
		}
	}

	return tmp;
 8001726:	7afb      	ldrb	r3, [r7, #11]
}
 8001728:	4618      	mov	r0, r3
 800172a:	3714      	adds	r7, #20
 800172c:	46bd      	mov	sp, r7
 800172e:	bd90      	pop	{r4, r7, pc}
 8001730:	20000068 	.word	0x20000068
 8001734:	2000003c 	.word	0x2000003c
 8001738:	20001820 	.word	0x20001820
 800173c:	20001620 	.word	0x20001620
 8001740:	20001822 	.word	0x20001822

08001744 <debug_init>:

void debug_init(DEBUG_INST_t * debug) {
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
	static uint32_t id_counter = 0;
	msv2_init(&debug->msv2);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3304      	adds	r3, #4
 8001750:	4618      	mov	r0, r3
 8001752:	f000 fb79 	bl	8001e48 <msv2_init>
	serial_init(&debug->ser, &DEBUG_UART, debug, debug_decode_fcn);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f503 5080 	add.w	r0, r3, #4096	; 0x1000
 800175c:	3018      	adds	r0, #24
 800175e:	4b08      	ldr	r3, [pc, #32]	; (8001780 <debug_init+0x3c>)
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	4908      	ldr	r1, [pc, #32]	; (8001784 <debug_init+0x40>)
 8001764:	f000 fe44 	bl	80023f0 <serial_init>
	debug->id = id_counter++;
 8001768:	4b07      	ldr	r3, [pc, #28]	; (8001788 <debug_init+0x44>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	1c5a      	adds	r2, r3, #1
 800176e:	4906      	ldr	r1, [pc, #24]	; (8001788 <debug_init+0x44>)
 8001770:	600a      	str	r2, [r1, #0]
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	6013      	str	r3, [r2, #0]
}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	08001641 	.word	0x08001641
 8001784:	20007be4 	.word	0x20007be4
 8001788:	20001824 	.word	0x20001824

0800178c <debug_get_status>:

static void debug_get_status(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 800178c:	b580      	push	{r7, lr}
 800178e:	b08c      	sub	sp, #48	; 0x30
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	607a      	str	r2, [r7, #4]
 8001796:	603b      	str	r3, [r7, #0]
 8001798:	460b      	mov	r3, r1
 800179a:	817b      	strh	r3, [r7, #10]
	CONTROL_STATUS_t status = control_get_status();
 800179c:	f107 0314 	add.w	r3, r7, #20
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff fd8f 	bl	80012c4 <control_get_status>
	util_encode_u16(resp, status.state);
 80017a6:	7d3b      	ldrb	r3, [r7, #20]
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	4619      	mov	r1, r3
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff fe92 	bl	80014d6 <util_encode_u16>
	util_encode_u16(resp+2, 0); //padding
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	3302      	adds	r3, #2
 80017b6:	2100      	movs	r1, #0
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff fe8c 	bl	80014d6 <util_encode_u16>
	util_encode_i32(resp+4, status.counter);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	3304      	adds	r3, #4
 80017c2:	6a3a      	ldr	r2, [r7, #32]
 80017c4:	4611      	mov	r1, r2
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff fee0 	bl	800158c <util_encode_i32>
	uint32_t memory = storage_get_used();
 80017cc:	f000 ff7e 	bl	80026cc <storage_get_used>
 80017d0:	62f8      	str	r0, [r7, #44]	; 0x2c
	util_encode_u32(resp+8, memory);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	3308      	adds	r3, #8
 80017d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff fe9b 	bl	8001514 <util_encode_u32>
	util_encode_i32(resp+12, status.tvc_position);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	330c      	adds	r3, #12
 80017e2:	69fa      	ldr	r2, [r7, #28]
 80017e4:	4611      	mov	r1, r2
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff fed0 	bl	800158c <util_encode_i32>
	util_encode_u16(resp+16, status.tvc_psu_voltage);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3310      	adds	r3, #16
 80017f0:	8afa      	ldrh	r2, [r7, #22]
 80017f2:	4611      	mov	r1, r2
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff fe6e 	bl	80014d6 <util_encode_u16>
	util_encode_u8(resp+18, status.tvc_error);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	3312      	adds	r3, #18
 80017fe:	7e7a      	ldrb	r2, [r7, #25]
 8001800:	4611      	mov	r1, r2
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff fe4c 	bl	80014a0 <util_encode_u8>
	util_encode_i8(resp+19, status.tvc_temperature);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3313      	adds	r3, #19
 800180c:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8001810:	4611      	mov	r1, r2
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff fe9f 	bl	8001556 <util_encode_i8>
	*resp_len = 20;
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	2214      	movs	r2, #20
 800181c:	801a      	strh	r2, [r3, #0]
}
 800181e:	bf00      	nop
 8001820:	3730      	adds	r7, #48	; 0x30
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <debug_boot>:

static void debug_boot(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 8001826:	b580      	push	{r7, lr}
 8001828:	b084      	sub	sp, #16
 800182a:	af00      	add	r7, sp, #0
 800182c:	60f8      	str	r0, [r7, #12]
 800182e:	607a      	str	r2, [r7, #4]
 8001830:	603b      	str	r3, [r7, #0]
 8001832:	460b      	mov	r3, r1
 8001834:	817b      	strh	r3, [r7, #10]
	control_boot();
 8001836:	f7ff fd1d 	bl	8001274 <control_boot>
	resp[0] = OK_LO;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	22c5      	movs	r2, #197	; 0xc5
 800183e:	701a      	strb	r2, [r3, #0]
	resp[1] = OK_HI;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3301      	adds	r3, #1
 8001844:	225c      	movs	r2, #92	; 0x5c
 8001846:	701a      	strb	r2, [r3, #0]
	*resp_len = 2;
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	2202      	movs	r2, #2
 800184c:	801a      	strh	r2, [r3, #0]
}
 800184e:	bf00      	nop
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <debug_shutdown>:


static void debug_shutdown(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 8001856:	b580      	push	{r7, lr}
 8001858:	b084      	sub	sp, #16
 800185a:	af00      	add	r7, sp, #0
 800185c:	60f8      	str	r0, [r7, #12]
 800185e:	607a      	str	r2, [r7, #4]
 8001860:	603b      	str	r3, [r7, #0]
 8001862:	460b      	mov	r3, r1
 8001864:	817b      	strh	r3, [r7, #10]
	control_shutdown();
 8001866:	f7ff fd0f 	bl	8001288 <control_shutdown>
	resp[0] = OK_LO;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	22c5      	movs	r2, #197	; 0xc5
 800186e:	701a      	strb	r2, [r3, #0]
	resp[1] = OK_HI;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	3301      	adds	r3, #1
 8001874:	225c      	movs	r2, #92	; 0x5c
 8001876:	701a      	strb	r2, [r3, #0]
	*resp_len = 2;
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	2202      	movs	r2, #2
 800187c:	801a      	strh	r2, [r3, #0]
}
 800187e:	bf00      	nop
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <debug_download>:

static void debug_download(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 8001886:	b580      	push	{r7, lr}
 8001888:	b086      	sub	sp, #24
 800188a:	af00      	add	r7, sp, #0
 800188c:	60f8      	str	r0, [r7, #12]
 800188e:	607a      	str	r2, [r7, #4]
 8001890:	603b      	str	r3, [r7, #0]
 8001892:	460b      	mov	r3, r1
 8001894:	817b      	strh	r3, [r7, #10]
	//downloads 5 samples at a certain location
	if(data_len == DOWNLOAD_LEN) {
 8001896:	897b      	ldrh	r3, [r7, #10]
 8001898:	2b04      	cmp	r3, #4
 800189a:	d11b      	bne.n	80018d4 <debug_download+0x4e>
		uint32_t location = util_decode_u32(data);
 800189c:	68f8      	ldr	r0, [r7, #12]
 800189e:	f7ff fe96 	bl	80015ce <util_decode_u32>
 80018a2:	6138      	str	r0, [r7, #16]
		for(uint8_t i = 0; i < 5; i++) {
 80018a4:	2300      	movs	r3, #0
 80018a6:	75fb      	strb	r3, [r7, #23]
 80018a8:	e00e      	b.n	80018c8 <debug_download+0x42>
			storage_get_sample(location+i, resp+i*32);
 80018aa:	7dfa      	ldrb	r2, [r7, #23]
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	441a      	add	r2, r3
 80018b0:	7dfb      	ldrb	r3, [r7, #23]
 80018b2:	015b      	lsls	r3, r3, #5
 80018b4:	4619      	mov	r1, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	440b      	add	r3, r1
 80018ba:	4619      	mov	r1, r3
 80018bc:	4610      	mov	r0, r2
 80018be:	f000 ff11 	bl	80026e4 <storage_get_sample>
		for(uint8_t i = 0; i < 5; i++) {
 80018c2:	7dfb      	ldrb	r3, [r7, #23]
 80018c4:	3301      	adds	r3, #1
 80018c6:	75fb      	strb	r3, [r7, #23]
 80018c8:	7dfb      	ldrb	r3, [r7, #23]
 80018ca:	2b04      	cmp	r3, #4
 80018cc:	d9ed      	bls.n	80018aa <debug_download+0x24>
		}
		*resp_len = 32*5;
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	22a0      	movs	r2, #160	; 0xa0
 80018d2:	801a      	strh	r2, [r3, #0]
	}
}
 80018d4:	bf00      	nop
 80018d6:	3718      	adds	r7, #24
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <debug_tvc_move>:

static void debug_tvc_move(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	607a      	str	r2, [r7, #4]
 80018e6:	603b      	str	r3, [r7, #0]
 80018e8:	460b      	mov	r3, r1
 80018ea:	817b      	strh	r3, [r7, #10]
	if(data_len == TVC_MOVE_LEN) {
 80018ec:	897b      	ldrh	r3, [r7, #10]
 80018ee:	2b04      	cmp	r3, #4
 80018f0:	d111      	bne.n	8001916 <debug_tvc_move+0x3a>
		int32_t target = util_decode_i32(data);
 80018f2:	68f8      	ldr	r0, [r7, #12]
 80018f4:	f7ff fe87 	bl	8001606 <util_decode_i32>
 80018f8:	6178      	str	r0, [r7, #20]
		control_move_tvc(target);
 80018fa:	6978      	ldr	r0, [r7, #20]
 80018fc:	f7ff fca8 	bl	8001250 <control_move_tvc>
		resp[0] = OK_LO;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	22c5      	movs	r2, #197	; 0xc5
 8001904:	701a      	strb	r2, [r3, #0]
		resp[1] = OK_HI;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	3301      	adds	r3, #1
 800190a:	225c      	movs	r2, #92	; 0x5c
 800190c:	701a      	strb	r2, [r3, #0]
		*resp_len = 2;
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	2202      	movs	r2, #2
 8001912:	801a      	strh	r2, [r3, #0]
	} else {
		resp[0] = ERROR_LO;
		resp[1] = ERROR_HI;
		*resp_len = 2;
	}
}
 8001914:	e009      	b.n	800192a <debug_tvc_move+0x4e>
		resp[0] = ERROR_LO;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	22ce      	movs	r2, #206	; 0xce
 800191a:	701a      	strb	r2, [r3, #0]
		resp[1] = ERROR_HI;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3301      	adds	r3, #1
 8001920:	22ec      	movs	r2, #236	; 0xec
 8001922:	701a      	strb	r2, [r3, #0]
		*resp_len = 2;
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	2202      	movs	r2, #2
 8001928:	801a      	strh	r2, [r3, #0]
}
 800192a:	bf00      	nop
 800192c:	3718      	adds	r7, #24
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <debug_abort>:

static void debug_abort(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 8001932:	b580      	push	{r7, lr}
 8001934:	b084      	sub	sp, #16
 8001936:	af00      	add	r7, sp, #0
 8001938:	60f8      	str	r0, [r7, #12]
 800193a:	607a      	str	r2, [r7, #4]
 800193c:	603b      	str	r3, [r7, #0]
 800193e:	460b      	mov	r3, r1
 8001940:	817b      	strh	r3, [r7, #10]
	control_abort();
 8001942:	f7ff fcab 	bl	800129c <control_abort>
	resp[0] = OK_LO;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	22c5      	movs	r2, #197	; 0xc5
 800194a:	701a      	strb	r2, [r3, #0]
	resp[1] = OK_HI;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	3301      	adds	r3, #1
 8001950:	225c      	movs	r2, #92	; 0x5c
 8001952:	701a      	strb	r2, [r3, #0]
	*resp_len = 2;
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	2202      	movs	r2, #2
 8001958:	801a      	strh	r2, [r3, #0]
}
 800195a:	bf00      	nop
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <debug_recover>:

static void debug_recover(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 8001962:	b580      	push	{r7, lr}
 8001964:	b084      	sub	sp, #16
 8001966:	af00      	add	r7, sp, #0
 8001968:	60f8      	str	r0, [r7, #12]
 800196a:	607a      	str	r2, [r7, #4]
 800196c:	603b      	str	r3, [r7, #0]
 800196e:	460b      	mov	r3, r1
 8001970:	817b      	strh	r3, [r7, #10]
	control_recover();
 8001972:	f7ff fc9d 	bl	80012b0 <control_recover>
	resp[0] = OK_LO;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	22c5      	movs	r2, #197	; 0xc5
 800197a:	701a      	strb	r2, [r3, #0]
	resp[1] = OK_HI;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	3301      	adds	r3, #1
 8001980:	225c      	movs	r2, #92	; 0x5c
 8001982:	701a      	strb	r2, [r3, #0]
	*resp_len = 2;
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	2202      	movs	r2, #2
 8001988:	801a      	strh	r2, [r3, #0]
}
 800198a:	bf00      	nop
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <debug_transaction>:

static void debug_transaction(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 8001992:	b5b0      	push	{r4, r5, r7, lr}
 8001994:	b0a8      	sub	sp, #160	; 0xa0
 8001996:	af0a      	add	r7, sp, #40	; 0x28
 8001998:	60f8      	str	r0, [r7, #12]
 800199a:	607a      	str	r2, [r7, #4]
 800199c:	603b      	str	r3, [r7, #0]
 800199e:	460b      	mov	r3, r1
 80019a0:	817b      	strh	r3, [r7, #10]
	if(data_len == TRANSACTION_SENS_LEN) {
 80019a2:	897b      	ldrh	r3, [r7, #10]
 80019a4:	2b20      	cmp	r3, #32
 80019a6:	f040 80a7 	bne.w	8001af8 <debug_transaction+0x166>
		CM4_PAYLOAD_SENSOR_t sens_data = {0};
 80019aa:	f107 0310 	add.w	r3, r7, #16
 80019ae:	2234      	movs	r2, #52	; 0x34
 80019b0:	2100      	movs	r1, #0
 80019b2:	4618      	mov	r0, r3
 80019b4:	f009 fd0a 	bl	800b3cc <memset>
		sens_data.acc_x = util_decode_i32(data);
 80019b8:	68f8      	ldr	r0, [r7, #12]
 80019ba:	f7ff fe24 	bl	8001606 <util_decode_i32>
 80019be:	4603      	mov	r3, r0
 80019c0:	617b      	str	r3, [r7, #20]
		sens_data.acc_y = util_decode_i32(data+4);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	3304      	adds	r3, #4
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff fe1d 	bl	8001606 <util_decode_i32>
 80019cc:	4603      	mov	r3, r0
 80019ce:	61bb      	str	r3, [r7, #24]
		sens_data.acc_z = util_decode_i32(data+8);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	3308      	adds	r3, #8
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff fe16 	bl	8001606 <util_decode_i32>
 80019da:	4603      	mov	r3, r0
 80019dc:	61fb      	str	r3, [r7, #28]

		sens_data.gyro_x = util_decode_i32(data+12);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	330c      	adds	r3, #12
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff fe0f 	bl	8001606 <util_decode_i32>
 80019e8:	4603      	mov	r3, r0
 80019ea:	623b      	str	r3, [r7, #32]
		sens_data.gyro_y = util_decode_i32(data+16);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	3310      	adds	r3, #16
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff fe08 	bl	8001606 <util_decode_i32>
 80019f6:	4603      	mov	r3, r0
 80019f8:	627b      	str	r3, [r7, #36]	; 0x24
		sens_data.gyro_z = util_decode_i32(data+20);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	3314      	adds	r3, #20
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff fe01 	bl	8001606 <util_decode_i32>
 8001a04:	4603      	mov	r3, r0
 8001a06:	62bb      	str	r3, [r7, #40]	; 0x28

		sens_data.baro = util_decode_i32(data+24);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	3318      	adds	r3, #24
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff fdfa 	bl	8001606 <util_decode_i32>
 8001a12:	4603      	mov	r3, r0
 8001a14:	62fb      	str	r3, [r7, #44]	; 0x2c
		sens_data.cc_pressure = util_decode_i32(data+28);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	331c      	adds	r3, #28
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff fdf3 	bl	8001606 <util_decode_i32>
 8001a20:	4603      	mov	r3, r0
 8001a22:	633b      	str	r3, [r7, #48]	; 0x30

		control_set_sens(sens_data);
 8001a24:	466d      	mov	r5, sp
 8001a26:	f107 0420 	add.w	r4, r7, #32
 8001a2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a32:	6823      	ldr	r3, [r4, #0]
 8001a34:	602b      	str	r3, [r5, #0]
 8001a36:	f107 0310 	add.w	r3, r7, #16
 8001a3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a3c:	f7ff fc80 	bl	8001340 <control_set_sens>

		CM4_PAYLOAD_COMMAND_t cmd_data = control_get_cmd();
 8001a40:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff fcaf 	bl	80013a8 <control_get_cmd>

		util_encode_i32(resp, cmd_data.thrust);
 8001a4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f7ff fd9c 	bl	800158c <util_encode_i32>
		util_encode_i32(resp+4, cmd_data.dynamixel[0]);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	3304      	adds	r3, #4
 8001a58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a5a:	4611      	mov	r1, r2
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff fd95 	bl	800158c <util_encode_i32>
		util_encode_i32(resp+8, cmd_data.dynamixel[1]);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	3308      	adds	r3, #8
 8001a66:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001a68:	4611      	mov	r1, r2
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff fd8e 	bl	800158c <util_encode_i32>
		util_encode_i32(resp+12, cmd_data.dynamixel[2]);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	330c      	adds	r3, #12
 8001a74:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001a76:	4611      	mov	r1, r2
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff fd87 	bl	800158c <util_encode_i32>
		util_encode_i32(resp+16, cmd_data.dynamixel[3]);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	3310      	adds	r3, #16
 8001a82:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001a84:	4611      	mov	r1, r2
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff fd80 	bl	800158c <util_encode_i32>

		util_encode_i32(resp+20, cmd_data.position[0]);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	3314      	adds	r3, #20
 8001a90:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001a92:	4611      	mov	r1, r2
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff fd79 	bl	800158c <util_encode_i32>
		util_encode_i32(resp+24, cmd_data.position[1]);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	3318      	adds	r3, #24
 8001a9e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001aa0:	4611      	mov	r1, r2
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff fd72 	bl	800158c <util_encode_i32>
		util_encode_i32(resp+28, cmd_data.position[2]);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	331c      	adds	r3, #28
 8001aac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001aae:	4611      	mov	r1, r2
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff fd6b 	bl	800158c <util_encode_i32>

		util_encode_i32(resp+32, cmd_data.speed[0]);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	3320      	adds	r3, #32
 8001aba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001abc:	4611      	mov	r1, r2
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff fd64 	bl	800158c <util_encode_i32>
		util_encode_i32(resp+36, cmd_data.speed[1]);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	3324      	adds	r3, #36	; 0x24
 8001ac8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001aca:	4611      	mov	r1, r2
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff fd5d 	bl	800158c <util_encode_i32>
		util_encode_i32(resp+40, cmd_data.speed[2]);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	3328      	adds	r3, #40	; 0x28
 8001ad6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001ad8:	4611      	mov	r1, r2
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff fd56 	bl	800158c <util_encode_i32>

		util_encode_i32(resp+44, cmd_data.state);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	332c      	adds	r3, #44	; 0x2c
 8001ae4:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8001ae8:	4611      	mov	r1, r2
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff fd4e 	bl	800158c <util_encode_i32>

		*resp_len = TRANSACTION_CMD_LEN;
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	222e      	movs	r2, #46	; 0x2e
 8001af4:	801a      	strh	r2, [r3, #0]
	} else {
		resp[0] = ERROR_LO;
		resp[1] = ERROR_HI;
		*resp_len = 2;
	}
}
 8001af6:	e009      	b.n	8001b0c <debug_transaction+0x17a>
		resp[0] = ERROR_LO;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	22ce      	movs	r2, #206	; 0xce
 8001afc:	701a      	strb	r2, [r3, #0]
		resp[1] = ERROR_HI;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	3301      	adds	r3, #1
 8001b02:	22ec      	movs	r2, #236	; 0xec
 8001b04:	701a      	strb	r2, [r3, #0]
		*resp_len = 2;
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	2202      	movs	r2, #2
 8001b0a:	801a      	strh	r2, [r3, #0]
}
 8001b0c:	bf00      	nop
 8001b0e:	3778      	adds	r7, #120	; 0x78
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bdb0      	pop	{r4, r5, r7, pc}

08001b14 <debug_sensor_write>:

static void debug_sensor_write(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 8001b14:	b5b0      	push	{r4, r5, r7, lr}
 8001b16:	b09c      	sub	sp, #112	; 0x70
 8001b18:	af0a      	add	r7, sp, #40	; 0x28
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	607a      	str	r2, [r7, #4]
 8001b1e:	603b      	str	r3, [r7, #0]
 8001b20:	460b      	mov	r3, r1
 8001b22:	817b      	strh	r3, [r7, #10]
	if(data_len == TRANSACTION_SENS_LEN) {
 8001b24:	897b      	ldrh	r3, [r7, #10]
 8001b26:	2b20      	cmp	r3, #32
 8001b28:	d14e      	bne.n	8001bc8 <debug_sensor_write+0xb4>
		CM4_PAYLOAD_SENSOR_t sens_data = {0};
 8001b2a:	f107 0314 	add.w	r3, r7, #20
 8001b2e:	2234      	movs	r2, #52	; 0x34
 8001b30:	2100      	movs	r1, #0
 8001b32:	4618      	mov	r0, r3
 8001b34:	f009 fc4a 	bl	800b3cc <memset>
		sens_data.acc_x = util_decode_i32(data);
 8001b38:	68f8      	ldr	r0, [r7, #12]
 8001b3a:	f7ff fd64 	bl	8001606 <util_decode_i32>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	61bb      	str	r3, [r7, #24]
		sens_data.acc_y = util_decode_i32(data+4);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	3304      	adds	r3, #4
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff fd5d 	bl	8001606 <util_decode_i32>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	61fb      	str	r3, [r7, #28]
		sens_data.acc_z = util_decode_i32(data+8);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	3308      	adds	r3, #8
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff fd56 	bl	8001606 <util_decode_i32>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	623b      	str	r3, [r7, #32]

		sens_data.gyro_x = util_decode_i32(data+12);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	330c      	adds	r3, #12
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff fd4f 	bl	8001606 <util_decode_i32>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	627b      	str	r3, [r7, #36]	; 0x24
		sens_data.gyro_y = util_decode_i32(data+16);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	3310      	adds	r3, #16
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff fd48 	bl	8001606 <util_decode_i32>
 8001b76:	4603      	mov	r3, r0
 8001b78:	62bb      	str	r3, [r7, #40]	; 0x28
		sens_data.gyro_z = util_decode_i32(data+20);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	3314      	adds	r3, #20
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff fd41 	bl	8001606 <util_decode_i32>
 8001b84:	4603      	mov	r3, r0
 8001b86:	62fb      	str	r3, [r7, #44]	; 0x2c

		sens_data.baro = util_decode_i32(data+24);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	3318      	adds	r3, #24
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff fd3a 	bl	8001606 <util_decode_i32>
 8001b92:	4603      	mov	r3, r0
 8001b94:	633b      	str	r3, [r7, #48]	; 0x30
		sens_data.cc_pressure = util_decode_i32(data+28);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	331c      	adds	r3, #28
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff fd33 	bl	8001606 <util_decode_i32>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	637b      	str	r3, [r7, #52]	; 0x34

		control_set_sens(sens_data);
 8001ba4:	466d      	mov	r5, sp
 8001ba6:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8001baa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bb2:	6823      	ldr	r3, [r4, #0]
 8001bb4:	602b      	str	r3, [r5, #0]
 8001bb6:	f107 0314 	add.w	r3, r7, #20
 8001bba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bbc:	f7ff fbc0 	bl	8001340 <control_set_sens>


		*resp_len = 2;
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	2202      	movs	r2, #2
 8001bc4:	801a      	strh	r2, [r3, #0]
	} else {
		resp[0] = ERROR_LO;
		resp[1] = ERROR_HI;
		*resp_len = 2;
	}
}
 8001bc6:	e009      	b.n	8001bdc <debug_sensor_write+0xc8>
		resp[0] = ERROR_LO;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	22ce      	movs	r2, #206	; 0xce
 8001bcc:	701a      	strb	r2, [r3, #0]
		resp[1] = ERROR_HI;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	22ec      	movs	r2, #236	; 0xec
 8001bd4:	701a      	strb	r2, [r3, #0]
		*resp_len = 2;
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	2202      	movs	r2, #2
 8001bda:	801a      	strh	r2, [r3, #0]
}
 8001bdc:	bf00      	nop
 8001bde:	3748      	adds	r7, #72	; 0x48
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bdb0      	pop	{r4, r5, r7, pc}

08001be4 <debug_command_read>:

static void debug_command_read(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b092      	sub	sp, #72	; 0x48
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	607a      	str	r2, [r7, #4]
 8001bee:	603b      	str	r3, [r7, #0]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	817b      	strh	r3, [r7, #10]

	CM4_PAYLOAD_COMMAND_t cmd_data = control_get_cmd();
 8001bf4:	f107 0314 	add.w	r3, r7, #20
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff fbd5 	bl	80013a8 <control_get_cmd>

	util_encode_i32(resp, cmd_data.thrust);
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	4619      	mov	r1, r3
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f7ff fcc2 	bl	800158c <util_encode_i32>
	util_encode_i32(resp+4, cmd_data.dynamixel[0]);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3304      	adds	r3, #4
 8001c0c:	69fa      	ldr	r2, [r7, #28]
 8001c0e:	4611      	mov	r1, r2
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff fcbb 	bl	800158c <util_encode_i32>
	util_encode_i32(resp+8, cmd_data.dynamixel[1]);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	3308      	adds	r3, #8
 8001c1a:	6a3a      	ldr	r2, [r7, #32]
 8001c1c:	4611      	mov	r1, r2
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff fcb4 	bl	800158c <util_encode_i32>
	util_encode_i32(resp+12, cmd_data.dynamixel[2]);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	330c      	adds	r3, #12
 8001c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c2a:	4611      	mov	r1, r2
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff fcad 	bl	800158c <util_encode_i32>
	util_encode_i32(resp+16, cmd_data.dynamixel[3]);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	3310      	adds	r3, #16
 8001c36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c38:	4611      	mov	r1, r2
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff fca6 	bl	800158c <util_encode_i32>

	util_encode_i32(resp+20, cmd_data.position[0]);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	3314      	adds	r3, #20
 8001c44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c46:	4611      	mov	r1, r2
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff fc9f 	bl	800158c <util_encode_i32>
	util_encode_i32(resp+24, cmd_data.position[1]);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	3318      	adds	r3, #24
 8001c52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c54:	4611      	mov	r1, r2
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff fc98 	bl	800158c <util_encode_i32>
	util_encode_i32(resp+28, cmd_data.position[2]);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	331c      	adds	r3, #28
 8001c60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c62:	4611      	mov	r1, r2
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff fc91 	bl	800158c <util_encode_i32>

	util_encode_i32(resp+32, cmd_data.speed[0]);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	3320      	adds	r3, #32
 8001c6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c70:	4611      	mov	r1, r2
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff fc8a 	bl	800158c <util_encode_i32>
	util_encode_i32(resp+36, cmd_data.speed[1]);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	3324      	adds	r3, #36	; 0x24
 8001c7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c7e:	4611      	mov	r1, r2
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff fc83 	bl	800158c <util_encode_i32>
	util_encode_i32(resp+40, cmd_data.speed[2]);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	3328      	adds	r3, #40	; 0x28
 8001c8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001c8c:	4611      	mov	r1, r2
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff fc7c 	bl	800158c <util_encode_i32>

	util_encode_i32(resp+44, cmd_data.state);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	332c      	adds	r3, #44	; 0x2c
 8001c98:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8001c9c:	4611      	mov	r1, r2
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff fc74 	bl	800158c <util_encode_i32>

	*resp_len = TRANSACTION_CMD_LEN;
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	222e      	movs	r2, #46	; 0x2e
 8001ca8:	801a      	strh	r2, [r3, #0]

}
 8001caa:	bf00      	nop
 8001cac:	3748      	adds	r7, #72	; 0x48
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <debug_sensor_read>:

static void debug_sensor_read(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b092      	sub	sp, #72	; 0x48
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	60f8      	str	r0, [r7, #12]
 8001cba:	607a      	str	r2, [r7, #4]
 8001cbc:	603b      	str	r3, [r7, #0]
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	817b      	strh	r3, [r7, #10]

	CM4_PAYLOAD_SENSOR_t sens_data = control_get_sens();
 8001cc2:	f107 0314 	add.w	r3, r7, #20
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff fb56 	bl	8001378 <control_get_sens>

	util_encode_i32(resp, sens_data.acc_x);
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	4619      	mov	r1, r3
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f7ff fc5b 	bl	800158c <util_encode_i32>
	util_encode_i32(resp+4, sens_data.acc_y);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	3304      	adds	r3, #4
 8001cda:	69fa      	ldr	r2, [r7, #28]
 8001cdc:	4611      	mov	r1, r2
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff fc54 	bl	800158c <util_encode_i32>
	util_encode_i32(resp+8, sens_data.acc_z);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3308      	adds	r3, #8
 8001ce8:	6a3a      	ldr	r2, [r7, #32]
 8001cea:	4611      	mov	r1, r2
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff fc4d 	bl	800158c <util_encode_i32>

	util_encode_i32(resp+12, sens_data.gyro_x);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	330c      	adds	r3, #12
 8001cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cf8:	4611      	mov	r1, r2
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff fc46 	bl	800158c <util_encode_i32>
	util_encode_i32(resp+16, sens_data.gyro_y);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3310      	adds	r3, #16
 8001d04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d06:	4611      	mov	r1, r2
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff fc3f 	bl	800158c <util_encode_i32>
	util_encode_i32(resp+20, sens_data.gyro_z);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	3314      	adds	r3, #20
 8001d12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d14:	4611      	mov	r1, r2
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff fc38 	bl	800158c <util_encode_i32>

	util_encode_i32(resp+24, sens_data.baro);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3318      	adds	r3, #24
 8001d20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d22:	4611      	mov	r1, r2
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff fc31 	bl	800158c <util_encode_i32>
	util_encode_i32(resp+28, sens_data.cc_pressure);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	331c      	adds	r3, #28
 8001d2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d30:	4611      	mov	r1, r2
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff fc2a 	bl	800158c <util_encode_i32>

	*resp_len = TRANSACTION_SENS_LEN;
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	2220      	movs	r2, #32
 8001d3c:	801a      	strh	r2, [r3, #0]

}
 8001d3e:	bf00      	nop
 8001d40:	3748      	adds	r7, #72	; 0x48
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
	...

08001d48 <led_init>:

/**********************
 *	DECLARATIONS
 **********************/

void led_init(void) {
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
	LED_TIM.Instance->ARR = LED_MAX;
 8001d4c:	4b0f      	ldr	r3, [pc, #60]	; (8001d8c <led_init+0x44>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001d54:	62da      	str	r2, [r3, #44]	; 0x2c
	LED_TIM.Instance->CCR1 = 0;
 8001d56:	4b0d      	ldr	r3, [pc, #52]	; (8001d8c <led_init+0x44>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	635a      	str	r2, [r3, #52]	; 0x34
	LED_TIM.Instance->CCR2 = 0;
 8001d5e:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <led_init+0x44>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2200      	movs	r2, #0
 8001d64:	639a      	str	r2, [r3, #56]	; 0x38
	LED_TIM.Instance->CCR3 = 0;
 8001d66:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <led_init+0x44>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIMEx_PWMN_Start(&LED_TIM, TIM_CHANNEL_1);
 8001d6e:	2100      	movs	r1, #0
 8001d70:	4806      	ldr	r0, [pc, #24]	; (8001d8c <led_init+0x44>)
 8001d72:	f005 ff17 	bl	8007ba4 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&LED_TIM, TIM_CHANNEL_2);
 8001d76:	2104      	movs	r1, #4
 8001d78:	4804      	ldr	r0, [pc, #16]	; (8001d8c <led_init+0x44>)
 8001d7a:	f005 ff13 	bl	8007ba4 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&LED_TIM, TIM_CHANNEL_3);
 8001d7e:	2108      	movs	r1, #8
 8001d80:	4802      	ldr	r0, [pc, #8]	; (8001d8c <led_init+0x44>)
 8001d82:	f005 ff0f 	bl	8007ba4 <HAL_TIMEx_PWMN_Start>
}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20007a04 	.word	0x20007a04

08001d90 <led_set_color>:

void led_set_color(uint8_t r, uint8_t g, uint8_t b) {
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	71fb      	strb	r3, [r7, #7]
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	71bb      	strb	r3, [r7, #6]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	717b      	strb	r3, [r7, #5]
	LED_TIM.Instance->CCR1 = r;
 8001da2:	4b09      	ldr	r3, [pc, #36]	; (8001dc8 <led_set_color+0x38>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	79fa      	ldrb	r2, [r7, #7]
 8001da8:	635a      	str	r2, [r3, #52]	; 0x34
	LED_TIM.Instance->CCR2 = g;
 8001daa:	4b07      	ldr	r3, [pc, #28]	; (8001dc8 <led_set_color+0x38>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	79ba      	ldrb	r2, [r7, #6]
 8001db0:	639a      	str	r2, [r3, #56]	; 0x38
	LED_TIM.Instance->CCR3 = b;
 8001db2:	4b05      	ldr	r3, [pc, #20]	; (8001dc8 <led_set_color+0x38>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	797a      	ldrb	r2, [r7, #5]
 8001db8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	20007a04 	.word	0x20007a04

08001dcc <calc_field_CRC>:

/**********************
 *	DECLARATIONS
 **********************/

uint16_t calc_field_CRC(uint16_t *p_data_array, uint16_t length) {
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	807b      	strh	r3, [r7, #2]
	uint16_t shifter, c;
	uint16_t carry;
	uint16_t crc = 0;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	81bb      	strh	r3, [r7, #12]
	while (length--) {
 8001ddc:	e028      	b.n	8001e30 <calc_field_CRC+0x64>
		shifter = 0x8000;
 8001dde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001de2:	81fb      	strh	r3, [r7, #14]
		c = *p_data_array++;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	1c9a      	adds	r2, r3, #2
 8001de8:	607a      	str	r2, [r7, #4]
 8001dea:	881b      	ldrh	r3, [r3, #0]
 8001dec:	817b      	strh	r3, [r7, #10]
		do {
			carry = crc & 0x8000;
 8001dee:	89bb      	ldrh	r3, [r7, #12]
 8001df0:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001df4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001df8:	813b      	strh	r3, [r7, #8]
			crc <<= 1;
 8001dfa:	89bb      	ldrh	r3, [r7, #12]
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	81bb      	strh	r3, [r7, #12]
			if (c & shifter) crc++;
 8001e00:	897a      	ldrh	r2, [r7, #10]
 8001e02:	89fb      	ldrh	r3, [r7, #14]
 8001e04:	4013      	ands	r3, r2
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d002      	beq.n	8001e12 <calc_field_CRC+0x46>
 8001e0c:	89bb      	ldrh	r3, [r7, #12]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	81bb      	strh	r3, [r7, #12]
			if (carry) crc ^= 0x1021;
 8001e12:	893b      	ldrh	r3, [r7, #8]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d005      	beq.n	8001e24 <calc_field_CRC+0x58>
 8001e18:	89bb      	ldrh	r3, [r7, #12]
 8001e1a:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8001e1e:	f083 0301 	eor.w	r3, r3, #1
 8001e22:	81bb      	strh	r3, [r7, #12]
			shifter >>= 1;
 8001e24:	89fb      	ldrh	r3, [r7, #14]
 8001e26:	085b      	lsrs	r3, r3, #1
 8001e28:	81fb      	strh	r3, [r7, #14]

		} while (shifter);
 8001e2a:	89fb      	ldrh	r3, [r7, #14]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1de      	bne.n	8001dee <calc_field_CRC+0x22>
	while (length--) {
 8001e30:	887b      	ldrh	r3, [r7, #2]
 8001e32:	1e5a      	subs	r2, r3, #1
 8001e34:	807a      	strh	r2, [r7, #2]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1d1      	bne.n	8001dde <calc_field_CRC+0x12>

	}
	return crc;
 8001e3a:	89bb      	ldrh	r3, [r7, #12]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <msv2_init>:

void msv2_init(MSV2_INST_t * msv2) {
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
	static uint32_t id_counter = 0;
	msv2->id = id_counter++;
 8001e50:	4b06      	ldr	r3, [pc, #24]	; (8001e6c <msv2_init+0x24>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	1c5a      	adds	r2, r3, #1
 8001e56:	4905      	ldr	r1, [pc, #20]	; (8001e6c <msv2_init+0x24>)
 8001e58:	600a      	str	r2, [r1, #0]
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	6013      	str	r3, [r2, #0]
}
 8001e5e:	bf00      	nop
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	20001828 	.word	0x20001828

08001e70 <msv2_create_frame>:

uint16_t msv2_create_frame(MSV2_INST_t * msv2, uint8_t opcode, uint8_t data_len, uint8_t * data) {
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	607b      	str	r3, [r7, #4]
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	72fb      	strb	r3, [r7, #11]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	72bb      	strb	r3, [r7, #10]
	uint16_t array_len = data_len+2; //we add 1 for the opcode and len fields and 1 for the crc
 8001e82:	7abb      	ldrb	r3, [r7, #10]
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	3302      	adds	r3, #2
 8001e88:	827b      	strh	r3, [r7, #18]
	msv2->tx.data_len = data_len;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	7aba      	ldrb	r2, [r7, #10]
 8001e8e:	f883 280f 	strb.w	r2, [r3, #2063]	; 0x80f
	msv2->tx.opcode = opcode;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	7afa      	ldrb	r2, [r7, #11]
 8001e96:	f883 280e 	strb.w	r2, [r3, #2062]	; 0x80e
	msv2->tx.data[0] = DLE;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2290      	movs	r2, #144	; 0x90
 8001e9e:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
	msv2->tx.data[1] = STX;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2202      	movs	r2, #2
 8001ea6:	f883 2813 	strb.w	r2, [r3, #2067]	; 0x813
	msv2->tx.data[2] = opcode;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	7afa      	ldrb	r2, [r7, #11]
 8001eae:	f883 2814 	strb.w	r2, [r3, #2068]	; 0x814
	msv2->tx.data[3] = data_len;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	7aba      	ldrb	r2, [r7, #10]
 8001eb6:	f883 2815 	strb.w	r2, [r3, #2069]	; 0x815
	msv2->tx.crc_data[0] = (data_len<<8) | opcode;  //header bytes inverted
 8001eba:	7abb      	ldrb	r3, [r7, #10]
 8001ebc:	021b      	lsls	r3, r3, #8
 8001ebe:	b21a      	sxth	r2, r3
 8001ec0:	7afb      	ldrb	r3, [r7, #11]
 8001ec2:	b21b      	sxth	r3, r3
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	b21b      	sxth	r3, r3
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f8a3 2c12 	strh.w	r2, [r3, #3090]	; 0xc12
	uint16_t counter=4;
 8001ed0:	2304      	movs	r3, #4
 8001ed2:	82fb      	strh	r3, [r7, #22]
	for(uint16_t i = 0; i < data_len; i++) {
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	82bb      	strh	r3, [r7, #20]
 8001ed8:	e05b      	b.n	8001f92 <msv2_create_frame+0x122>
		msv2->tx.data[counter++] = data[2*i]; //bytes in data need to be inverted before
 8001eda:	8abb      	ldrh	r3, [r7, #20]
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	461a      	mov	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	441a      	add	r2, r3
 8001ee4:	8afb      	ldrh	r3, [r7, #22]
 8001ee6:	1c59      	adds	r1, r3, #1
 8001ee8:	82f9      	strh	r1, [r7, #22]
 8001eea:	4619      	mov	r1, r3
 8001eec:	7812      	ldrb	r2, [r2, #0]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	440b      	add	r3, r1
 8001ef2:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
		if(msv2->tx.data[counter-1] == DLE) {
 8001ef6:	8afb      	ldrh	r3, [r7, #22]
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	4413      	add	r3, r2
 8001efe:	f893 3812 	ldrb.w	r3, [r3, #2066]	; 0x812
 8001f02:	2b90      	cmp	r3, #144	; 0x90
 8001f04:	d108      	bne.n	8001f18 <msv2_create_frame+0xa8>
			msv2->tx.data[counter++] = DLE;
 8001f06:	8afb      	ldrh	r3, [r7, #22]
 8001f08:	1c5a      	adds	r2, r3, #1
 8001f0a:	82fa      	strh	r2, [r7, #22]
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	4413      	add	r3, r2
 8001f12:	2290      	movs	r2, #144	; 0x90
 8001f14:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
		}
		msv2->tx.data[counter++] = data[2*i+1];
 8001f18:	8abb      	ldrh	r3, [r7, #20]
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	441a      	add	r2, r3
 8001f22:	8afb      	ldrh	r3, [r7, #22]
 8001f24:	1c59      	adds	r1, r3, #1
 8001f26:	82f9      	strh	r1, [r7, #22]
 8001f28:	4619      	mov	r1, r3
 8001f2a:	7812      	ldrb	r2, [r2, #0]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	440b      	add	r3, r1
 8001f30:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
		if(msv2->tx.data[counter-1] == DLE) {
 8001f34:	8afb      	ldrh	r3, [r7, #22]
 8001f36:	3b01      	subs	r3, #1
 8001f38:	68fa      	ldr	r2, [r7, #12]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	f893 3812 	ldrb.w	r3, [r3, #2066]	; 0x812
 8001f40:	2b90      	cmp	r3, #144	; 0x90
 8001f42:	d108      	bne.n	8001f56 <msv2_create_frame+0xe6>
			msv2->tx.data[counter++] = DLE;
 8001f44:	8afb      	ldrh	r3, [r7, #22]
 8001f46:	1c5a      	adds	r2, r3, #1
 8001f48:	82fa      	strh	r2, [r7, #22]
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	4413      	add	r3, r2
 8001f50:	2290      	movs	r2, #144	; 0x90
 8001f52:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
		}
		msv2->tx.crc_data[i+1] = (data[2*i+1]<<8) |  data[2*i];
 8001f56:	8abb      	ldrh	r3, [r7, #20]
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	4413      	add	r3, r2
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	021b      	lsls	r3, r3, #8
 8001f64:	b21a      	sxth	r2, r3
 8001f66:	8abb      	ldrh	r3, [r7, #20]
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	440b      	add	r3, r1
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	b21b      	sxth	r3, r3
 8001f74:	4313      	orrs	r3, r2
 8001f76:	b21a      	sxth	r2, r3
 8001f78:	8abb      	ldrh	r3, [r7, #20]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	b291      	uxth	r1, r2
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	f203 6304 	addw	r3, r3, #1540	; 0x604
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	4413      	add	r3, r2
 8001f88:	460a      	mov	r2, r1
 8001f8a:	815a      	strh	r2, [r3, #10]
	for(uint16_t i = 0; i < data_len; i++) {
 8001f8c:	8abb      	ldrh	r3, [r7, #20]
 8001f8e:	3301      	adds	r3, #1
 8001f90:	82bb      	strh	r3, [r7, #20]
 8001f92:	7abb      	ldrb	r3, [r7, #10]
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	8aba      	ldrh	r2, [r7, #20]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d39e      	bcc.n	8001eda <msv2_create_frame+0x6a>
	}
	msv2->tx.crc_data[array_len-1] = 0x0000;
 8001f9c:	8a7b      	ldrh	r3, [r7, #18]
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	68fa      	ldr	r2, [r7, #12]
 8001fa2:	f203 6304 	addw	r3, r3, #1540	; 0x604
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	4413      	add	r3, r2
 8001faa:	2200      	movs	r2, #0
 8001fac:	815a      	strh	r2, [r3, #10]
	uint16_t crc = calc_field_CRC(msv2->tx.crc_data, array_len);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f603 4312 	addw	r3, r3, #3090	; 0xc12
 8001fb4:	8a7a      	ldrh	r2, [r7, #18]
 8001fb6:	4611      	mov	r1, r2
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff ff07 	bl	8001dcc <calc_field_CRC>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	823b      	strh	r3, [r7, #16]
	msv2->tx.data[counter++] = crc&0xff; //crc bytes are inverted (LSB first) !!
 8001fc2:	8afb      	ldrh	r3, [r7, #22]
 8001fc4:	1c5a      	adds	r2, r3, #1
 8001fc6:	82fa      	strh	r2, [r7, #22]
 8001fc8:	4619      	mov	r1, r3
 8001fca:	8a3b      	ldrh	r3, [r7, #16]
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	440b      	add	r3, r1
 8001fd2:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
	if(msv2->tx.data[counter-1] == DLE) {
 8001fd6:	8afb      	ldrh	r3, [r7, #22]
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	4413      	add	r3, r2
 8001fde:	f893 3812 	ldrb.w	r3, [r3, #2066]	; 0x812
 8001fe2:	2b90      	cmp	r3, #144	; 0x90
 8001fe4:	d108      	bne.n	8001ff8 <msv2_create_frame+0x188>
		msv2->tx.data[counter++] = DLE;
 8001fe6:	8afb      	ldrh	r3, [r7, #22]
 8001fe8:	1c5a      	adds	r2, r3, #1
 8001fea:	82fa      	strh	r2, [r7, #22]
 8001fec:	461a      	mov	r2, r3
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	2290      	movs	r2, #144	; 0x90
 8001ff4:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
	}
	msv2->tx.data[counter++] = crc>>8;
 8001ff8:	8a3b      	ldrh	r3, [r7, #16]
 8001ffa:	0a1b      	lsrs	r3, r3, #8
 8001ffc:	b29a      	uxth	r2, r3
 8001ffe:	8afb      	ldrh	r3, [r7, #22]
 8002000:	1c59      	adds	r1, r3, #1
 8002002:	82f9      	strh	r1, [r7, #22]
 8002004:	4619      	mov	r1, r3
 8002006:	b2d2      	uxtb	r2, r2
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	440b      	add	r3, r1
 800200c:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
	if(msv2->tx.data[counter-1] == DLE) {
 8002010:	8afb      	ldrh	r3, [r7, #22]
 8002012:	3b01      	subs	r3, #1
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	4413      	add	r3, r2
 8002018:	f893 3812 	ldrb.w	r3, [r3, #2066]	; 0x812
 800201c:	2b90      	cmp	r3, #144	; 0x90
 800201e:	d108      	bne.n	8002032 <msv2_create_frame+0x1c2>
		msv2->tx.data[counter++] = DLE;
 8002020:	8afb      	ldrh	r3, [r7, #22]
 8002022:	1c5a      	adds	r2, r3, #1
 8002024:	82fa      	strh	r2, [r7, #22]
 8002026:	461a      	mov	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	4413      	add	r3, r2
 800202c:	2290      	movs	r2, #144	; 0x90
 800202e:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
	}
	return counter;
 8002032:	8afb      	ldrh	r3, [r7, #22]
}
 8002034:	4618      	mov	r0, r3
 8002036:	3718      	adds	r7, #24
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <msv2_decode_fragment>:

/*
 * 	d: received byte
 *
 */
MSV2_ERROR_t msv2_decode_fragment(MSV2_INST_t * msv2, uint8_t d) {
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	460b      	mov	r3, r1
 8002046:	70fb      	strb	r3, [r7, #3]
    //if a DLE in data is followed by STX, we start again
    if (msv2->rx.escape == 1 && d == STX) {
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	7a5b      	ldrb	r3, [r3, #9]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d10a      	bne.n	8002066 <msv2_decode_fragment+0x2a>
 8002050:	78fb      	ldrb	r3, [r7, #3]
 8002052:	2b02      	cmp	r3, #2
 8002054:	d107      	bne.n	8002066 <msv2_decode_fragment+0x2a>
    	msv2->rx.state = WAITING_OPCODE;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2202      	movs	r2, #2
 800205a:	721a      	strb	r2, [r3, #8]
    	msv2->rx.escape = 0;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	725a      	strb	r2, [r3, #9]
        return MSV2_PROGRESS;
 8002062:	2301      	movs	r3, #1
 8002064:	e0da      	b.n	800221c <msv2_decode_fragment+0x1e0>
    }

    if (msv2->rx.state == WAITING_DLE && d == DLE) {
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	7a1b      	ldrb	r3, [r3, #8]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d107      	bne.n	800207e <msv2_decode_fragment+0x42>
 800206e:	78fb      	ldrb	r3, [r7, #3]
 8002070:	2b90      	cmp	r3, #144	; 0x90
 8002072:	d104      	bne.n	800207e <msv2_decode_fragment+0x42>
    	msv2->rx.state = WAITING_STX;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	721a      	strb	r2, [r3, #8]
        return MSV2_PROGRESS;
 800207a:	2301      	movs	r3, #1
 800207c:	e0ce      	b.n	800221c <msv2_decode_fragment+0x1e0>
    }
    //escape in case a DLE is in the data
    if (d == DLE && msv2->rx.escape == 0) {
 800207e:	78fb      	ldrb	r3, [r7, #3]
 8002080:	2b90      	cmp	r3, #144	; 0x90
 8002082:	d108      	bne.n	8002096 <msv2_decode_fragment+0x5a>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	7a5b      	ldrb	r3, [r3, #9]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d104      	bne.n	8002096 <msv2_decode_fragment+0x5a>
    	msv2->rx.escape = 1;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	725a      	strb	r2, [r3, #9]
        return MSV2_PROGRESS;
 8002092:	2301      	movs	r3, #1
 8002094:	e0c2      	b.n	800221c <msv2_decode_fragment+0x1e0>
    }
    //if it is doubled, it counts as data
    if (d == DLE && msv2->rx.escape == 1) {
 8002096:	78fb      	ldrb	r3, [r7, #3]
 8002098:	2b90      	cmp	r3, #144	; 0x90
 800209a:	d106      	bne.n	80020aa <msv2_decode_fragment+0x6e>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	7a5b      	ldrb	r3, [r3, #9]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d102      	bne.n	80020aa <msv2_decode_fragment+0x6e>
    	msv2->rx.escape = 0;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	725a      	strb	r2, [r3, #9]

    }

    if (msv2->rx.state == WAITING_STX && d == STX) {
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	7a1b      	ldrb	r3, [r3, #8]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d107      	bne.n	80020c2 <msv2_decode_fragment+0x86>
 80020b2:	78fb      	ldrb	r3, [r7, #3]
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d104      	bne.n	80020c2 <msv2_decode_fragment+0x86>
    	msv2->rx.state = WAITING_OPCODE;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2202      	movs	r2, #2
 80020bc:	721a      	strb	r2, [r3, #8]
        return MSV2_PROGRESS;
 80020be:	2301      	movs	r3, #1
 80020c0:	e0ac      	b.n	800221c <msv2_decode_fragment+0x1e0>
    }

    if (msv2->rx.state == WAITING_OPCODE) {
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	7a1b      	ldrb	r3, [r3, #8]
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d107      	bne.n	80020da <msv2_decode_fragment+0x9e>
    	msv2->rx.opcode = d;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	78fa      	ldrb	r2, [r7, #3]
 80020ce:	711a      	strb	r2, [r3, #4]
    	msv2->rx.state = WAITING_LEN;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2203      	movs	r2, #3
 80020d4:	721a      	strb	r2, [r3, #8]
        return MSV2_PROGRESS;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e0a0      	b.n	800221c <msv2_decode_fragment+0x1e0>
    }

    if (msv2->rx.state == WAITING_LEN) {
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	7a1b      	ldrb	r3, [r3, #8]
 80020de:	2b03      	cmp	r3, #3
 80020e0:	d11d      	bne.n	800211e <msv2_decode_fragment+0xe2>
    	msv2->rx.data_len = d; //legth in words
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	78fa      	ldrb	r2, [r7, #3]
 80020e6:	715a      	strb	r2, [r3, #5]
    	msv2->rx.length = 2*d; //length in bytes
 80020e8:	78fb      	ldrb	r3, [r7, #3]
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	b29a      	uxth	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	815a      	strh	r2, [r3, #10]
    	msv2->rx.crc_data[0] = (msv2->rx.data_len<<8) | msv2->rx.opcode;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	795b      	ldrb	r3, [r3, #5]
 80020f8:	021b      	lsls	r3, r3, #8
 80020fa:	b21a      	sxth	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	791b      	ldrb	r3, [r3, #4]
 8002100:	b21b      	sxth	r3, r3
 8002102:	4313      	orrs	r3, r2
 8002104:	b21b      	sxth	r3, r3
 8002106:	b29a      	uxth	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
    	msv2->rx.counter = 0;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	819a      	strh	r2, [r3, #12]
    	msv2->rx.state = WAITING_DATA;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2204      	movs	r2, #4
 8002118:	721a      	strb	r2, [r3, #8]
        return MSV2_PROGRESS;
 800211a:	2301      	movs	r3, #1
 800211c:	e07e      	b.n	800221c <msv2_decode_fragment+0x1e0>
    }

    if (msv2->rx.state == WAITING_DATA) {
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	7a1b      	ldrb	r3, [r3, #8]
 8002122:	2b04      	cmp	r3, #4
 8002124:	d136      	bne.n	8002194 <msv2_decode_fragment+0x158>
    	msv2->rx.data[msv2->rx.counter] = d;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	899b      	ldrh	r3, [r3, #12]
 800212a:	461a      	mov	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4413      	add	r3, r2
 8002130:	78fa      	ldrb	r2, [r7, #3]
 8002132:	739a      	strb	r2, [r3, #14]
    	if(msv2->rx.counter & 0x01) { //LSB == '1'
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	899b      	ldrh	r3, [r3, #12]
 8002138:	f003 0301 	and.w	r3, r3, #1
 800213c:	2b00      	cmp	r3, #0
 800213e:	d018      	beq.n	8002172 <msv2_decode_fragment+0x136>
    		msv2->rx.crc_data[msv2->rx.counter/2 + 1] = (msv2->rx.data[msv2->rx.counter - 1]) |  d<<8;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	899b      	ldrh	r3, [r3, #12]
 8002144:	3b01      	subs	r3, #1
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	4413      	add	r3, r2
 800214a:	7b9b      	ldrb	r3, [r3, #14]
 800214c:	b21a      	sxth	r2, r3
 800214e:	78fb      	ldrb	r3, [r7, #3]
 8002150:	021b      	lsls	r3, r3, #8
 8002152:	b21b      	sxth	r3, r3
 8002154:	4313      	orrs	r3, r2
 8002156:	b21a      	sxth	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	899b      	ldrh	r3, [r3, #12]
 800215c:	085b      	lsrs	r3, r3, #1
 800215e:	b29b      	uxth	r3, r3
 8002160:	3301      	adds	r3, #1
 8002162:	b291      	uxth	r1, r2
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	4413      	add	r3, r2
 800216e:	460a      	mov	r2, r1
 8002170:	80da      	strh	r2, [r3, #6]
    	}
    	msv2->rx.counter += 1;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	899b      	ldrh	r3, [r3, #12]
 8002176:	3301      	adds	r3, #1
 8002178:	b29a      	uxth	r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	819a      	strh	r2, [r3, #12]
        //the length  is in WORDS, but we read BYTES
        if (msv2->rx.counter==msv2->rx.length) {
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	899a      	ldrh	r2, [r3, #12]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	895b      	ldrh	r3, [r3, #10]
 8002186:	429a      	cmp	r2, r3
 8002188:	d102      	bne.n	8002190 <msv2_decode_fragment+0x154>
        	msv2->rx.state = WAITING_CRC1;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2205      	movs	r2, #5
 800218e:	721a      	strb	r2, [r3, #8]
        }
        return MSV2_PROGRESS;
 8002190:	2301      	movs	r3, #1
 8002192:	e043      	b.n	800221c <msv2_decode_fragment+0x1e0>
    }

    if (msv2->rx.state == WAITING_CRC1) {
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	7a1b      	ldrb	r3, [r3, #8]
 8002198:	2b05      	cmp	r3, #5
 800219a:	d108      	bne.n	80021ae <msv2_decode_fragment+0x172>
    	msv2->rx.crc = d;
 800219c:	78fb      	ldrb	r3, [r7, #3]
 800219e:	b29a      	uxth	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	80da      	strh	r2, [r3, #6]
    	msv2->rx.state = WAITING_CRC2;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2206      	movs	r2, #6
 80021a8:	721a      	strb	r2, [r3, #8]
        return MSV2_PROGRESS;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e036      	b.n	800221c <msv2_decode_fragment+0x1e0>

    }

    if (msv2->rx.state == WAITING_CRC2) {
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	7a1b      	ldrb	r3, [r3, #8]
 80021b2:	2b06      	cmp	r3, #6
 80021b4:	d12e      	bne.n	8002214 <msv2_decode_fragment+0x1d8>
    	msv2->rx.crc |= d<<8;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	88db      	ldrh	r3, [r3, #6]
 80021ba:	b21a      	sxth	r2, r3
 80021bc:	78fb      	ldrb	r3, [r7, #3]
 80021be:	021b      	lsls	r3, r3, #8
 80021c0:	b21b      	sxth	r3, r3
 80021c2:	4313      	orrs	r3, r2
 80021c4:	b21b      	sxth	r3, r3
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	80da      	strh	r2, [r3, #6]
    	msv2->rx.state = WAITING_DLE;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	721a      	strb	r2, [r3, #8]
    	msv2->rx.crc_data[msv2->rx.data_len+1] = 0;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	795b      	ldrb	r3, [r3, #5]
 80021d6:	3301      	adds	r3, #1
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	4413      	add	r3, r2
 80021e2:	2200      	movs	r2, #0
 80021e4:	80da      	strh	r2, [r3, #6]
    	uint16_t crc = calc_field_CRC(msv2->rx.crc_data, msv2->rx.data_len+2);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f203 420e 	addw	r2, r3, #1038	; 0x40e
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	795b      	ldrb	r3, [r3, #5]
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	3302      	adds	r3, #2
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	4619      	mov	r1, r3
 80021f8:	4610      	mov	r0, r2
 80021fa:	f7ff fde7 	bl	8001dcc <calc_field_CRC>
 80021fe:	4603      	mov	r3, r0
 8002200:	81fb      	strh	r3, [r7, #14]
    	if(msv2->rx.crc == crc) {
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	88db      	ldrh	r3, [r3, #6]
 8002206:	89fa      	ldrh	r2, [r7, #14]
 8002208:	429a      	cmp	r2, r3
 800220a:	d101      	bne.n	8002210 <msv2_decode_fragment+0x1d4>
    		return MSV2_SUCCESS;
 800220c:	2300      	movs	r3, #0
 800220e:	e005      	b.n	800221c <msv2_decode_fragment+0x1e0>
    	} else {
    		return MSV2_WRONG_CRC;
 8002210:	2302      	movs	r3, #2
 8002212:	e003      	b.n	800221c <msv2_decode_fragment+0x1e0>
    	}
    }
    msv2->rx.state=WAITING_DLE;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	721a      	strb	r2, [r3, #8]
    return MSV2_PROGRESS;
 800221a:	2301      	movs	r3, #1
}
 800221c:	4618      	mov	r0, r3
 800221e:	3710      	adds	r7, #16
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <msv2_tx_data>:

uint8_t * msv2_rx_data(MSV2_INST_t * msv2) {
	return msv2->rx.data;
}

uint8_t * msv2_tx_data(MSV2_INST_t * msv2) {
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
	return msv2->tx.data;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f603 0312 	addw	r3, r3, #2066	; 0x812
}
 8002232:	4618      	mov	r0, r3
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr

0800223e <util_buffer_u8_init>:
static inline void util_buffer_u8_init(UTIL_BUFFER_U8_t * bfr, uint8_t * buffer, uint16_t bfr_len) {
 800223e:	b480      	push	{r7}
 8002240:	b085      	sub	sp, #20
 8002242:	af00      	add	r7, sp, #0
 8002244:	60f8      	str	r0, [r7, #12]
 8002246:	60b9      	str	r1, [r7, #8]
 8002248:	4613      	mov	r3, r2
 800224a:	80fb      	strh	r3, [r7, #6]
	bfr->c_ix = 0;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2200      	movs	r2, #0
 8002250:	801a      	strh	r2, [r3, #0]
	bfr->l_ix = 0;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2200      	movs	r2, #0
 8002256:	805a      	strh	r2, [r3, #2]
	bfr->bfr_len = bfr_len;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	88fa      	ldrh	r2, [r7, #6]
 800225c:	809a      	strh	r2, [r3, #4]
	bfr->buffer = buffer;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	68ba      	ldr	r2, [r7, #8]
 8002262:	609a      	str	r2, [r3, #8]
}
 8002264:	bf00      	nop
 8002266:	3714      	adds	r7, #20
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <util_buffer_u8_add>:
static inline void util_buffer_u8_add(UTIL_BUFFER_U8_t * bfr, uint8_t d) {
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	460b      	mov	r3, r1
 800227a:	70fb      	strb	r3, [r7, #3]
	bfr->buffer[bfr->c_ix++] = d;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689a      	ldr	r2, [r3, #8]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	881b      	ldrh	r3, [r3, #0]
 8002284:	1c59      	adds	r1, r3, #1
 8002286:	b288      	uxth	r0, r1
 8002288:	6879      	ldr	r1, [r7, #4]
 800228a:	8008      	strh	r0, [r1, #0]
 800228c:	4413      	add	r3, r2
 800228e:	78fa      	ldrb	r2, [r7, #3]
 8002290:	701a      	strb	r2, [r3, #0]
	if(bfr->c_ix == bfr->bfr_len) bfr->c_ix = 0;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	881a      	ldrh	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	889b      	ldrh	r3, [r3, #4]
 800229a:	429a      	cmp	r2, r3
 800229c:	d102      	bne.n	80022a4 <util_buffer_u8_add+0x34>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	801a      	strh	r2, [r3, #0]
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <util_buffer_u8_get>:
static inline uint8_t util_buffer_u8_get(UTIL_BUFFER_U8_t * bfr) {
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
	uint8_t tmp = bfr->buffer[bfr->l_ix++];
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689a      	ldr	r2, [r3, #8]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	885b      	ldrh	r3, [r3, #2]
 80022c0:	1c59      	adds	r1, r3, #1
 80022c2:	b288      	uxth	r0, r1
 80022c4:	6879      	ldr	r1, [r7, #4]
 80022c6:	8048      	strh	r0, [r1, #2]
 80022c8:	4413      	add	r3, r2
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	73fb      	strb	r3, [r7, #15]
	if(bfr->l_ix == bfr->bfr_len) bfr->l_ix=0;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	885a      	ldrh	r2, [r3, #2]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	889b      	ldrh	r3, [r3, #4]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d102      	bne.n	80022e0 <util_buffer_u8_get+0x30>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	805a      	strh	r2, [r3, #2]
	return tmp;
 80022e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3714      	adds	r7, #20
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <util_buffer_u8_isempty>:
static inline uint8_t util_buffer_u8_isempty(UTIL_BUFFER_U8_t * bfr) {
 80022ee:	b480      	push	{r7}
 80022f0:	b083      	sub	sp, #12
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
	return bfr->l_ix == bfr->c_ix;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	885a      	ldrh	r2, [r3, #2]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	881b      	ldrh	r3, [r3, #0]
 80022fe:	429a      	cmp	r2, r3
 8002300:	bf0c      	ite	eq
 8002302:	2301      	moveq	r3, #1
 8002304:	2300      	movne	r3, #0
 8002306:	b2db      	uxtb	r3, r3
}
 8002308:	4618      	mov	r0, r3
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <HAL_UART_RxCpltCallback>:

/*
 * UART RX ISR
 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800231c:	2300      	movs	r3, #0
 800231e:	60bb      	str	r3, [r7, #8]
	for(uint16_t i = 0; i < serial_devices_count; i++) {
 8002320:	2300      	movs	r3, #0
 8002322:	81fb      	strh	r3, [r7, #14]
 8002324:	e025      	b.n	8002372 <HAL_UART_RxCpltCallback+0x5e>
		if(serial_devices[i]->uart == huart) {
 8002326:	89fb      	ldrh	r3, [r7, #14]
 8002328:	4a1c      	ldr	r2, [pc, #112]	; (800239c <HAL_UART_RxCpltCallback+0x88>)
 800232a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	429a      	cmp	r2, r3
 8002334:	d11a      	bne.n	800236c <HAL_UART_RxCpltCallback+0x58>
			util_buffer_u8_add(&serial_devices[i]->bfr, serial_devices[i]->dma_buffer);
 8002336:	89fb      	ldrh	r3, [r7, #14]
 8002338:	4a18      	ldr	r2, [pc, #96]	; (800239c <HAL_UART_RxCpltCallback+0x88>)
 800233a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800233e:	f103 0210 	add.w	r2, r3, #16
 8002342:	89fb      	ldrh	r3, [r7, #14]
 8002344:	4915      	ldr	r1, [pc, #84]	; (800239c <HAL_UART_RxCpltCallback+0x88>)
 8002346:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800234a:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 800234e:	4619      	mov	r1, r3
 8002350:	4610      	mov	r0, r2
 8002352:	f7ff ff8d 	bl	8002270 <util_buffer_u8_add>
			xSemaphoreGiveFromISR( serial_rx_sem, &xHigherPriorityTaskWoken );
 8002356:	4b12      	ldr	r3, [pc, #72]	; (80023a0 <HAL_UART_RxCpltCallback+0x8c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f107 0208 	add.w	r2, r7, #8
 800235e:	4611      	mov	r1, r2
 8002360:	4618      	mov	r0, r3
 8002362:	f007 faef 	bl	8009944 <xQueueGiveFromISR>
			if(i==2) {
 8002366:	89fb      	ldrh	r3, [r7, #14]
 8002368:	2b02      	cmp	r3, #2
				break;
			}
			break;
 800236a:	e007      	b.n	800237c <HAL_UART_RxCpltCallback+0x68>
	for(uint16_t i = 0; i < serial_devices_count; i++) {
 800236c:	89fb      	ldrh	r3, [r7, #14]
 800236e:	3301      	adds	r3, #1
 8002370:	81fb      	strh	r3, [r7, #14]
 8002372:	4b0c      	ldr	r3, [pc, #48]	; (80023a4 <HAL_UART_RxCpltCallback+0x90>)
 8002374:	881b      	ldrh	r3, [r3, #0]
 8002376:	89fa      	ldrh	r2, [r7, #14]
 8002378:	429a      	cmp	r2, r3
 800237a:	d3d4      	bcc.n	8002326 <HAL_UART_RxCpltCallback+0x12>
		}
	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d007      	beq.n	8002392 <HAL_UART_RxCpltCallback+0x7e>
 8002382:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <HAL_UART_RxCpltCallback+0x94>)
 8002384:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	f3bf 8f4f 	dsb	sy
 800238e:	f3bf 8f6f 	isb	sy
}
 8002392:	bf00      	nop
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	2000182c 	.word	0x2000182c
 80023a0:	20001870 	.word	0x20001870
 80023a4:	2000186c 	.word	0x2000186c
 80023a8:	e000ed04 	.word	0xe000ed04

080023ac <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef * lol = huart;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	60fb      	str	r3, [r7, #12]
}
 80023b8:	bf00      	nop
 80023ba:	3714      	adds	r7, #20
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <serial_global_init>:



void serial_global_init(void) {
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af02      	add	r7, sp, #8
	serial_rx_sem = xSemaphoreCreateBinaryStatic( &serial_rx_sem_buffer );
 80023ca:	2303      	movs	r3, #3
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <serial_global_init+0x24>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	2100      	movs	r1, #0
 80023d4:	2001      	movs	r0, #1
 80023d6:	f007 f8ef 	bl	80095b8 <xQueueGenericCreateStatic>
 80023da:	4603      	mov	r3, r0
 80023dc:	4a03      	ldr	r2, [pc, #12]	; (80023ec <serial_global_init+0x28>)
 80023de:	6013      	str	r3, [r2, #0]
}
 80023e0:	bf00      	nop
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	20001874 	.word	0x20001874
 80023ec:	20001870 	.word	0x20001870

080023f0 <serial_init>:


void serial_init(SERIAL_INST_t * ser, UART_HandleTypeDef * uart, void * inst, SERIAL_RET_t (*decode_fcn)(void *, uint8_t)) {
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
 80023fc:	603b      	str	r3, [r7, #0]
	ser->id = serial_devices_count;
 80023fe:	4b1a      	ldr	r3, [pc, #104]	; (8002468 <serial_init+0x78>)
 8002400:	881b      	ldrh	r3, [r3, #0]
 8002402:	461a      	mov	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	601a      	str	r2, [r3, #0]
	ser->uart = uart;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	68ba      	ldr	r2, [r7, #8]
 800240c:	605a      	str	r2, [r3, #4]
	ser->inst = inst;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	609a      	str	r2, [r3, #8]
	ser->decode_fcn = decode_fcn;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	60da      	str	r2, [r3, #12]
	util_buffer_u8_init(&ser->bfr, ser->buffer, SERIAL_FIFO_LEN);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f103 0010 	add.w	r0, r3, #16
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	331c      	adds	r3, #28
 8002424:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002428:	4619      	mov	r1, r3
 800242a:	f7ff ff08 	bl	800223e <util_buffer_u8_init>
	if(serial_devices_count < SERIAL_MAX_INST) {
 800242e:	4b0e      	ldr	r3, [pc, #56]	; (8002468 <serial_init+0x78>)
 8002430:	881b      	ldrh	r3, [r3, #0]
 8002432:	2b0f      	cmp	r3, #15
 8002434:	d80e      	bhi.n	8002454 <serial_init+0x64>
		HAL_UART_Receive_DMA(uart, &ser->dma_buffer, 1);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 800243c:	2201      	movs	r2, #1
 800243e:	4619      	mov	r1, r3
 8002440:	68b8      	ldr	r0, [r7, #8]
 8002442:	f005 fe7f 	bl	8008144 <HAL_UART_Receive_DMA>
		serial_devices[serial_devices_count] = ser;
 8002446:	4b08      	ldr	r3, [pc, #32]	; (8002468 <serial_init+0x78>)
 8002448:	881b      	ldrh	r3, [r3, #0]
 800244a:	4619      	mov	r1, r3
 800244c:	4a07      	ldr	r2, [pc, #28]	; (800246c <serial_init+0x7c>)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	}
	serial_devices_count++;
 8002454:	4b04      	ldr	r3, [pc, #16]	; (8002468 <serial_init+0x78>)
 8002456:	881b      	ldrh	r3, [r3, #0]
 8002458:	3301      	adds	r3, #1
 800245a:	b29a      	uxth	r2, r3
 800245c:	4b02      	ldr	r3, [pc, #8]	; (8002468 <serial_init+0x78>)
 800245e:	801a      	strh	r2, [r3, #0]
}
 8002460:	bf00      	nop
 8002462:	3710      	adds	r7, #16
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	2000186c 	.word	0x2000186c
 800246c:	2000182c 	.word	0x2000182c

08002470 <serial_send>:

void serial_send(SERIAL_INST_t * ser, uint8_t * data, uint16_t length) {
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	4613      	mov	r3, r2
 800247c:	80fb      	strh	r3, [r7, #6]
	HAL_UART_Transmit_DMA(ser->uart, data, length);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	88fa      	ldrh	r2, [r7, #6]
 8002484:	68b9      	ldr	r1, [r7, #8]
 8002486:	4618      	mov	r0, r3
 8002488:	f005 fdf0 	bl	800806c <HAL_UART_Transmit_DMA>
	//HAL_UART_Transmit(ser->uart, data, length, 500);
}
 800248c:	bf00      	nop
 800248e:	3710      	adds	r7, #16
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <serial_garbage_clean>:

void serial_garbage_clean(SERIAL_INST_t * ser) {
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(ser->uart, &ser->dma_buffer, 1);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6858      	ldr	r0, [r3, #4]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 80024a6:	2201      	movs	r2, #1
 80024a8:	4619      	mov	r1, r3
 80024aa:	f005 fe4b 	bl	8008144 <HAL_UART_Receive_DMA>
}
 80024ae:	bf00      	nop
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
	...

080024b8 <serial_thread>:

void serial_thread(void * arg) {
 80024b8:	b5b0      	push	{r4, r5, r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]

	serial_global_init();
 80024c0:	f7ff ff80 	bl	80023c4 <serial_global_init>

	for(;;) {
		if( xSemaphoreTake(serial_rx_sem, 0xffff) == pdTRUE ) {
 80024c4:	4b1b      	ldr	r3, [pc, #108]	; (8002534 <serial_thread+0x7c>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80024cc:	4618      	mov	r0, r3
 80024ce:	f007 fac7 	bl	8009a60 <xQueueSemaphoreTake>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d1f5      	bne.n	80024c4 <serial_thread+0xc>
			for(uint16_t i = 0; i < serial_devices_count; i++) {
 80024d8:	2300      	movs	r3, #0
 80024da:	81fb      	strh	r3, [r7, #14]
 80024dc:	e023      	b.n	8002526 <serial_thread+0x6e>
				while(!util_buffer_u8_isempty(&serial_devices[i]->bfr)) {
					serial_devices[i]->decode_fcn(serial_devices[i]->inst, util_buffer_u8_get(&serial_devices[i]->bfr));
 80024de:	89fb      	ldrh	r3, [r7, #14]
 80024e0:	4a15      	ldr	r2, [pc, #84]	; (8002538 <serial_thread+0x80>)
 80024e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024e6:	68dc      	ldr	r4, [r3, #12]
 80024e8:	89fb      	ldrh	r3, [r7, #14]
 80024ea:	4a13      	ldr	r2, [pc, #76]	; (8002538 <serial_thread+0x80>)
 80024ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024f0:	689d      	ldr	r5, [r3, #8]
 80024f2:	89fb      	ldrh	r3, [r7, #14]
 80024f4:	4a10      	ldr	r2, [pc, #64]	; (8002538 <serial_thread+0x80>)
 80024f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024fa:	3310      	adds	r3, #16
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7ff fed7 	bl	80022b0 <util_buffer_u8_get>
 8002502:	4603      	mov	r3, r0
 8002504:	4619      	mov	r1, r3
 8002506:	4628      	mov	r0, r5
 8002508:	47a0      	blx	r4
				while(!util_buffer_u8_isempty(&serial_devices[i]->bfr)) {
 800250a:	89fb      	ldrh	r3, [r7, #14]
 800250c:	4a0a      	ldr	r2, [pc, #40]	; (8002538 <serial_thread+0x80>)
 800250e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002512:	3310      	adds	r3, #16
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff feea 	bl	80022ee <util_buffer_u8_isempty>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d0de      	beq.n	80024de <serial_thread+0x26>
			for(uint16_t i = 0; i < serial_devices_count; i++) {
 8002520:	89fb      	ldrh	r3, [r7, #14]
 8002522:	3301      	adds	r3, #1
 8002524:	81fb      	strh	r3, [r7, #14]
 8002526:	4b05      	ldr	r3, [pc, #20]	; (800253c <serial_thread+0x84>)
 8002528:	881b      	ldrh	r3, [r3, #0]
 800252a:	89fa      	ldrh	r2, [r7, #14]
 800252c:	429a      	cmp	r2, r3
 800252e:	d3ec      	bcc.n	800250a <serial_thread+0x52>
		if( xSemaphoreTake(serial_rx_sem, 0xffff) == pdTRUE ) {
 8002530:	e7c8      	b.n	80024c4 <serial_thread+0xc>
 8002532:	bf00      	nop
 8002534:	20001870 	.word	0x20001870
 8002538:	2000182c 	.word	0x2000182c
 800253c:	2000186c 	.word	0x2000186c

08002540 <storage_init>:

/**********************
 *	DECLARATIONS
 **********************/

void storage_init() {
 8002540:	b5b0      	push	{r4, r5, r7, lr}
 8002542:	b09c      	sub	sp, #112	; 0x70
 8002544:	af02      	add	r7, sp, #8
	static STORAGE_HEADER_t header;
	flash_init();
 8002546:	f006 fcd4 	bl	8008ef2 <flash_init>
	flash_read(HEADER_ADDR, (uint8_t *) &header, sizeof(STORAGE_HEADER_t));
 800254a:	2210      	movs	r2, #16
 800254c:	4936      	ldr	r1, [pc, #216]	; (8002628 <storage_init+0xe8>)
 800254e:	2000      	movs	r0, #0
 8002550:	f006 fcf4 	bl	8008f3c <flash_read>
	if(header.magic == MAGIC_NUMBER) {
 8002554:	4b34      	ldr	r3, [pc, #208]	; (8002628 <storage_init+0xe8>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a34      	ldr	r2, [pc, #208]	; (800262c <storage_init+0xec>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d149      	bne.n	80025f2 <storage_init+0xb2>
		used_subsectors = header.used;
 800255e:	4b32      	ldr	r3, [pc, #200]	; (8002628 <storage_init+0xe8>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	4a33      	ldr	r2, [pc, #204]	; (8002630 <storage_init+0xf0>)
 8002564:	6013      	str	r3, [r2, #0]
		if(used_subsectors > 1) {
 8002566:	4b32      	ldr	r3, [pc, #200]	; (8002630 <storage_init+0xf0>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d93d      	bls.n	80025ea <storage_init+0xaa>
			STORAGE_DATA_t data = {0};
 800256e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002572:	2220      	movs	r2, #32
 8002574:	2100      	movs	r1, #0
 8002576:	4618      	mov	r0, r3
 8002578:	f008 ff28 	bl	800b3cc <memset>
			STORAGE_DATA_t last_valid_data = {0};
 800257c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002580:	2220      	movs	r2, #32
 8002582:	2100      	movs	r1, #0
 8002584:	4618      	mov	r0, r3
 8002586:	f008 ff21 	bl	800b3cc <memset>
			uint32_t count = (used_subsectors-2)*SAMPLES_PER_SS;
 800258a:	4b29      	ldr	r3, [pc, #164]	; (8002630 <storage_init+0xf0>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	3b02      	subs	r3, #2
 8002590:	01db      	lsls	r3, r3, #7
 8002592:	667b      	str	r3, [r7, #100]	; 0x64
			data = read_data(count);
 8002594:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002598:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800259a:	4618      	mov	r0, r3
 800259c:	f000 f878 	bl	8002690 <read_data>
			while(data.sample_id == count){
 80025a0:	e01a      	b.n	80025d8 <storage_init+0x98>
				last_valid_data = data;
 80025a2:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80025a6:	f107 0524 	add.w	r5, r7, #36	; 0x24
 80025aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025ae:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80025b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				data = read_data(++count);
 80025b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025b8:	3301      	adds	r3, #1
 80025ba:	667b      	str	r3, [r7, #100]	; 0x64
 80025bc:	463b      	mov	r3, r7
 80025be:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80025c0:	4618      	mov	r0, r3
 80025c2:	f000 f865 	bl	8002690 <read_data>
 80025c6:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80025ca:	463d      	mov	r5, r7
 80025cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025d0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80025d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			while(data.sample_id == count){
 80025d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80025da:	461a      	mov	r2, r3
 80025dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025de:	4293      	cmp	r3, r2
 80025e0:	d0df      	beq.n	80025a2 <storage_init+0x62>
			}

			data_counter = count;
 80025e2:	4a14      	ldr	r2, [pc, #80]	; (8002634 <storage_init+0xf4>)
 80025e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025e6:	6013      	str	r3, [r2, #0]
 80025e8:	e009      	b.n	80025fe <storage_init+0xbe>
		} else {
			data_counter = 0;
 80025ea:	4b12      	ldr	r3, [pc, #72]	; (8002634 <storage_init+0xf4>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]
 80025f0:	e005      	b.n	80025fe <storage_init+0xbe>
		}
	} else {
		write_header_used(1);
 80025f2:	2001      	movs	r0, #1
 80025f4:	f000 f828 	bl	8002648 <write_header_used>
		data_counter = 0;
 80025f8:	4b0e      	ldr	r3, [pc, #56]	; (8002634 <storage_init+0xf4>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	601a      	str	r2, [r3, #0]
	}
	record_active = 0;
 80025fe:	4b0e      	ldr	r3, [pc, #56]	; (8002638 <storage_init+0xf8>)
 8002600:	2200      	movs	r2, #0
 8002602:	701a      	strb	r2, [r3, #0]
	restart_required = 0;
 8002604:	4b0d      	ldr	r3, [pc, #52]	; (800263c <storage_init+0xfc>)
 8002606:	2200      	movs	r2, #0
 8002608:	701a      	strb	r2, [r3, #0]
	storage_sem = xSemaphoreCreateBinaryStatic(&storage_sem_buffer);
 800260a:	2303      	movs	r3, #3
 800260c:	9300      	str	r3, [sp, #0]
 800260e:	4b0c      	ldr	r3, [pc, #48]	; (8002640 <storage_init+0x100>)
 8002610:	2200      	movs	r2, #0
 8002612:	2100      	movs	r1, #0
 8002614:	2001      	movs	r0, #1
 8002616:	f006 ffcf 	bl	80095b8 <xQueueGenericCreateStatic>
 800261a:	4603      	mov	r3, r0
 800261c:	4a09      	ldr	r2, [pc, #36]	; (8002644 <storage_init+0x104>)
 800261e:	6013      	str	r3, [r2, #0]
}
 8002620:	bf00      	nop
 8002622:	3768      	adds	r7, #104	; 0x68
 8002624:	46bd      	mov	sp, r7
 8002626:	bdb0      	pop	{r4, r5, r7, pc}
 8002628:	20001918 	.word	0x20001918
 800262c:	cbe0c5e6 	.word	0xcbe0c5e6
 8002630:	200018bc 	.word	0x200018bc
 8002634:	200018c0 	.word	0x200018c0
 8002638:	200018c4 	.word	0x200018c4
 800263c:	200018c5 	.word	0x200018c5
 8002640:	200018d0 	.word	0x200018d0
 8002644:	200018cc 	.word	0x200018cc

08002648 <write_header_used>:

}



static void write_header_used(uint32_t used) {
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
	static STORAGE_HEADER_t header;
	flash_read(HEADER_ADDR, (uint8_t *) &header, sizeof(STORAGE_HEADER_t));
 8002650:	2210      	movs	r2, #16
 8002652:	490c      	ldr	r1, [pc, #48]	; (8002684 <write_header_used+0x3c>)
 8002654:	2000      	movs	r0, #0
 8002656:	f006 fc71 	bl	8008f3c <flash_read>
	flash_erase_subsector(HEADER_ADDR);
 800265a:	2000      	movs	r0, #0
 800265c:	f006 fd66 	bl	800912c <flash_erase_subsector>
	header.magic = MAGIC_NUMBER;
 8002660:	4b08      	ldr	r3, [pc, #32]	; (8002684 <write_header_used+0x3c>)
 8002662:	4a09      	ldr	r2, [pc, #36]	; (8002688 <write_header_used+0x40>)
 8002664:	601a      	str	r2, [r3, #0]
	header.used = used;
 8002666:	4a07      	ldr	r2, [pc, #28]	; (8002684 <write_header_used+0x3c>)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6053      	str	r3, [r2, #4]
	flash_write(HEADER_ADDR, (uint8_t *) &header, sizeof(STORAGE_HEADER_t));
 800266c:	2210      	movs	r2, #16
 800266e:	4905      	ldr	r1, [pc, #20]	; (8002684 <write_header_used+0x3c>)
 8002670:	2000      	movs	r0, #0
 8002672:	f006 fce4 	bl	800903e <flash_write>
	used_subsectors = used;
 8002676:	4a05      	ldr	r2, [pc, #20]	; (800268c <write_header_used+0x44>)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6013      	str	r3, [r2, #0]
}
 800267c:	bf00      	nop
 800267e:	3708      	adds	r7, #8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	20001928 	.word	0x20001928
 8002688:	cbe0c5e6 	.word	0xcbe0c5e6
 800268c:	200018bc 	.word	0x200018bc

08002690 <read_data>:



static STORAGE_DATA_t read_data(uint32_t id) {
 8002690:	b5b0      	push	{r4, r5, r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
	static STORAGE_DATA_t data;
	flash_read(ADDRESS(id), (uint8_t *) &data, sizeof(STORAGE_DATA_t));
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	3380      	adds	r3, #128	; 0x80
 800269e:	015b      	lsls	r3, r3, #5
 80026a0:	2220      	movs	r2, #32
 80026a2:	4909      	ldr	r1, [pc, #36]	; (80026c8 <read_data+0x38>)
 80026a4:	4618      	mov	r0, r3
 80026a6:	f006 fc49 	bl	8008f3c <flash_read>
	return data;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a06      	ldr	r2, [pc, #24]	; (80026c8 <read_data+0x38>)
 80026ae:	461c      	mov	r4, r3
 80026b0:	4615      	mov	r5, r2
 80026b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026b6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80026ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bdb0      	pop	{r4, r5, r7, pc}
 80026c6:	bf00      	nop
 80026c8:	20001938 	.word	0x20001938

080026cc <storage_get_used>:
		flash_erase_subsector(addr);
	}
	flash_write(addr, (uint8_t *) &data, sizeof(STORAGE_DATA_t));
}

uint32_t storage_get_used() {
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
	return data_counter;
 80026d0:	4b03      	ldr	r3, [pc, #12]	; (80026e0 <storage_get_used+0x14>)
 80026d2:	681b      	ldr	r3, [r3, #0]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	200018c0 	.word	0x200018c0

080026e4 <storage_get_sample>:

void storage_get_sample(uint32_t id, void * dest) {
 80026e4:	b5b0      	push	{r4, r5, r7, lr}
 80026e6:	b08a      	sub	sp, #40	; 0x28
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6278      	str	r0, [r7, #36]	; 0x24
 80026ec:	6239      	str	r1, [r7, #32]
	*((STORAGE_DATA_t *)dest) = read_data(id);
 80026ee:	6a3c      	ldr	r4, [r7, #32]
 80026f0:	463b      	mov	r3, r7
 80026f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7ff ffcb 	bl	8002690 <read_data>
 80026fa:	4625      	mov	r5, r4
 80026fc:	463c      	mov	r4, r7
 80026fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002700:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002702:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002706:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 800270a:	bf00      	nop
 800270c:	3728      	adds	r7, #40	; 0x28
 800270e:	46bd      	mov	sp, r7
 8002710:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002714 <storage_disable>:

void storage_enable() {
	record_active = 1;
}

void storage_disable() {
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
	record_should_stop = STORAGE_AFTER_SAVE;
 8002718:	4b04      	ldr	r3, [pc, #16]	; (800272c <storage_disable+0x18>)
 800271a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800271e:	601a      	str	r2, [r3, #0]
}
 8002720:	bf00      	nop
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	200018c8 	.word	0x200018c8

08002730 <storage_thread>:
		xSemaphoreGive(storage_sem);
	}
}


void storage_thread(void * arg) {
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]



	storage_init();
 8002738:	f7ff ff02 	bl	8002540 <storage_init>




	for(;;) {
		last_time = time;
 800273c:	4b1b      	ldr	r3, [pc, #108]	; (80027ac <storage_thread+0x7c>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a1b      	ldr	r2, [pc, #108]	; (80027b0 <storage_thread+0x80>)
 8002742:	6013      	str	r3, [r2, #0]
		time = HAL_GetTick();
 8002744:	f001 fa82 	bl	8003c4c <HAL_GetTick>
 8002748:	4603      	mov	r3, r0
 800274a:	4a18      	ldr	r2, [pc, #96]	; (80027ac <storage_thread+0x7c>)
 800274c:	6013      	str	r3, [r2, #0]
		if(restart_required) {
 800274e:	4b19      	ldr	r3, [pc, #100]	; (80027b4 <storage_thread+0x84>)
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d008      	beq.n	8002768 <storage_thread+0x38>
			write_header_used(1);
 8002756:	2001      	movs	r0, #1
 8002758:	f7ff ff76 	bl	8002648 <write_header_used>
			data_counter = 0;
 800275c:	4b16      	ldr	r3, [pc, #88]	; (80027b8 <storage_thread+0x88>)
 800275e:	2200      	movs	r2, #0
 8002760:	601a      	str	r2, [r3, #0]
			restart_required = 0;
 8002762:	4b14      	ldr	r3, [pc, #80]	; (80027b4 <storage_thread+0x84>)
 8002764:	2200      	movs	r2, #0
 8002766:	701a      	strb	r2, [r3, #0]
		}
		if(record_should_stop) {
 8002768:	4b14      	ldr	r3, [pc, #80]	; (80027bc <storage_thread+0x8c>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d014      	beq.n	800279a <storage_thread+0x6a>
			record_should_stop -= time-last_time;;
 8002770:	4b0f      	ldr	r3, [pc, #60]	; (80027b0 <storage_thread+0x80>)
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	4b0d      	ldr	r3, [pc, #52]	; (80027ac <storage_thread+0x7c>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	4a10      	ldr	r2, [pc, #64]	; (80027bc <storage_thread+0x8c>)
 800277c:	6812      	ldr	r2, [r2, #0]
 800277e:	4413      	add	r3, r2
 8002780:	461a      	mov	r2, r3
 8002782:	4b0e      	ldr	r3, [pc, #56]	; (80027bc <storage_thread+0x8c>)
 8002784:	601a      	str	r2, [r3, #0]
			if(record_should_stop<=0){
 8002786:	4b0d      	ldr	r3, [pc, #52]	; (80027bc <storage_thread+0x8c>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2b00      	cmp	r3, #0
 800278c:	dc05      	bgt.n	800279a <storage_thread+0x6a>
				record_active=0;
 800278e:	4b0c      	ldr	r3, [pc, #48]	; (80027c0 <storage_thread+0x90>)
 8002790:	2200      	movs	r2, #0
 8002792:	701a      	strb	r2, [r3, #0]
				record_should_stop=0;
 8002794:	4b09      	ldr	r3, [pc, #36]	; (80027bc <storage_thread+0x8c>)
 8002796:	2200      	movs	r2, #0
 8002798:	601a      	str	r2, [r3, #0]
			}
		}
		if(xSemaphoreTake(storage_sem, 0xffff) == pdTRUE) {
 800279a:	4b0a      	ldr	r3, [pc, #40]	; (80027c4 <storage_thread+0x94>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80027a2:	4618      	mov	r0, r3
 80027a4:	f007 f95c 	bl	8009a60 <xQueueSemaphoreTake>
		last_time = time;
 80027a8:	e7c8      	b.n	800273c <storage_thread+0xc>
 80027aa:	bf00      	nop
 80027ac:	20001958 	.word	0x20001958
 80027b0:	2000195c 	.word	0x2000195c
 80027b4:	200018c5 	.word	0x200018c5
 80027b8:	200018c0 	.word	0x200018c0
 80027bc:	200018c8 	.word	0x200018c8
 80027c0:	200018c4 	.word	0x200018c4
 80027c4:	200018cc 	.word	0x200018cc

080027c8 <threads_init>:
 **********************/

/*
 * Create all the threads needed by the software
 */
void threads_init(void) {
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af04      	add	r7, sp, #16


	serial_global_init();
 80027ce:	f7ff fdf9 	bl	80023c4 <serial_global_init>
	static DEBUG_INST_t debug;
	debug_init(&debug);
 80027d2:	4824      	ldr	r0, [pc, #144]	; (8002864 <threads_init+0x9c>)
 80027d4:	f7fe ffb6 	bl	8001744 <debug_init>

	can_init();
 80027d8:	f7fd ffde 	bl	8000798 <can_init>
	/*
	 * Storage thread
	 * lowest priority
	 */

	CREATE_THREAD(storage_handle, storage, storage_thread, STORAGE_SZ, STORAGE_PRIO);
 80027dc:	4b22      	ldr	r3, [pc, #136]	; (8002868 <threads_init+0xa0>)
 80027de:	9302      	str	r3, [sp, #8]
 80027e0:	4b22      	ldr	r3, [pc, #136]	; (800286c <threads_init+0xa4>)
 80027e2:	9301      	str	r3, [sp, #4]
 80027e4:	2303      	movs	r3, #3
 80027e6:	9300      	str	r3, [sp, #0]
 80027e8:	2300      	movs	r3, #0
 80027ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027ee:	4920      	ldr	r1, [pc, #128]	; (8002870 <threads_init+0xa8>)
 80027f0:	4820      	ldr	r0, [pc, #128]	; (8002874 <threads_init+0xac>)
 80027f2:	f007 fb43 	bl	8009e7c <xTaskCreateStatic>
 80027f6:	4603      	mov	r3, r0
 80027f8:	4a1f      	ldr	r2, [pc, #124]	; (8002878 <threads_init+0xb0>)
 80027fa:	6013      	str	r3, [r2, #0]

	/*
	 *  Serial RX processing thread (Bottom half)
	 *  low priority
	 */
	CREATE_THREAD(serial_handle, serial, serial_thread, SERIAL_SZ, SERIAL_PRIO);
 80027fc:	4b1f      	ldr	r3, [pc, #124]	; (800287c <threads_init+0xb4>)
 80027fe:	9302      	str	r3, [sp, #8]
 8002800:	4b1f      	ldr	r3, [pc, #124]	; (8002880 <threads_init+0xb8>)
 8002802:	9301      	str	r3, [sp, #4]
 8002804:	2305      	movs	r3, #5
 8002806:	9300      	str	r3, [sp, #0]
 8002808:	2300      	movs	r3, #0
 800280a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800280e:	491d      	ldr	r1, [pc, #116]	; (8002884 <threads_init+0xbc>)
 8002810:	481d      	ldr	r0, [pc, #116]	; (8002888 <threads_init+0xc0>)
 8002812:	f007 fb33 	bl	8009e7c <xTaskCreateStatic>
 8002816:	4603      	mov	r3, r0
 8002818:	4a1c      	ldr	r2, [pc, #112]	; (800288c <threads_init+0xc4>)
 800281a:	6013      	str	r3, [r2, #0]

	/*
	 *  Main control thread
	 *  Highest priority
	 */
	CREATE_THREAD(control_handle, control, control_thread, CONTROL_SZ, CONTROL_PRIO);
 800281c:	4b1c      	ldr	r3, [pc, #112]	; (8002890 <threads_init+0xc8>)
 800281e:	9302      	str	r3, [sp, #8]
 8002820:	4b1c      	ldr	r3, [pc, #112]	; (8002894 <threads_init+0xcc>)
 8002822:	9301      	str	r3, [sp, #4]
 8002824:	2306      	movs	r3, #6
 8002826:	9300      	str	r3, [sp, #0]
 8002828:	2300      	movs	r3, #0
 800282a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800282e:	491a      	ldr	r1, [pc, #104]	; (8002898 <threads_init+0xd0>)
 8002830:	481a      	ldr	r0, [pc, #104]	; (800289c <threads_init+0xd4>)
 8002832:	f007 fb23 	bl	8009e7c <xTaskCreateStatic>
 8002836:	4603      	mov	r3, r0
 8002838:	4a19      	ldr	r2, [pc, #100]	; (80028a0 <threads_init+0xd8>)
 800283a:	6013      	str	r3, [r2, #0]

	/*
	 *  CAN send thread
	 *  Highest priority
	 */
	CREATE_THREAD(can_send_handle, can_send, can_send_thread, CAN_SZ, CAN_PRIO);
 800283c:	4b19      	ldr	r3, [pc, #100]	; (80028a4 <threads_init+0xdc>)
 800283e:	9302      	str	r3, [sp, #8]
 8002840:	4b19      	ldr	r3, [pc, #100]	; (80028a8 <threads_init+0xe0>)
 8002842:	9301      	str	r3, [sp, #4]
 8002844:	2303      	movs	r3, #3
 8002846:	9300      	str	r3, [sp, #0]
 8002848:	2300      	movs	r3, #0
 800284a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800284e:	4917      	ldr	r1, [pc, #92]	; (80028ac <threads_init+0xe4>)
 8002850:	4817      	ldr	r0, [pc, #92]	; (80028b0 <threads_init+0xe8>)
 8002852:	f007 fb13 	bl	8009e7c <xTaskCreateStatic>
 8002856:	4603      	mov	r3, r0
 8002858:	4a16      	ldr	r2, [pc, #88]	; (80028b4 <threads_init+0xec>)
 800285a:	6013      	str	r3, [r2, #0]



}
 800285c:	bf00      	nop
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	20001970 	.word	0x20001970
 8002868:	20003da8 	.word	0x20003da8
 800286c:	20002da8 	.word	0x20002da8
 8002870:	0800b3f4 	.word	0x0800b3f4
 8002874:	08002731 	.word	0x08002731
 8002878:	20001968 	.word	0x20001968
 800287c:	20004e00 	.word	0x20004e00
 8002880:	20003e00 	.word	0x20003e00
 8002884:	0800b3fc 	.word	0x0800b3fc
 8002888:	080024b9 	.word	0x080024b9
 800288c:	20001964 	.word	0x20001964
 8002890:	20005e58 	.word	0x20005e58
 8002894:	20004e58 	.word	0x20004e58
 8002898:	0800b404 	.word	0x0800b404
 800289c:	08000e59 	.word	0x08000e59
 80028a0:	20001960 	.word	0x20001960
 80028a4:	20006eb0 	.word	0x20006eb0
 80028a8:	20005eb0 	.word	0x20005eb0
 80028ac:	0800b40c 	.word	0x0800b40c
 80028b0:	080007a9 	.word	0x080007a9
 80028b4:	2000196c 	.word	0x2000196c

080028b8 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80028bc:	4b17      	ldr	r3, [pc, #92]	; (800291c <MX_CAN1_Init+0x64>)
 80028be:	4a18      	ldr	r2, [pc, #96]	; (8002920 <MX_CAN1_Init+0x68>)
 80028c0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 80028c2:	4b16      	ldr	r3, [pc, #88]	; (800291c <MX_CAN1_Init+0x64>)
 80028c4:	2209      	movs	r2, #9
 80028c6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80028c8:	4b14      	ldr	r3, [pc, #80]	; (800291c <MX_CAN1_Init+0x64>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80028ce:	4b13      	ldr	r3, [pc, #76]	; (800291c <MX_CAN1_Init+0x64>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 80028d4:	4b11      	ldr	r3, [pc, #68]	; (800291c <MX_CAN1_Init+0x64>)
 80028d6:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80028da:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80028dc:	4b0f      	ldr	r3, [pc, #60]	; (800291c <MX_CAN1_Init+0x64>)
 80028de:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80028e2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80028e4:	4b0d      	ldr	r3, [pc, #52]	; (800291c <MX_CAN1_Init+0x64>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80028ea:	4b0c      	ldr	r3, [pc, #48]	; (800291c <MX_CAN1_Init+0x64>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80028f0:	4b0a      	ldr	r3, [pc, #40]	; (800291c <MX_CAN1_Init+0x64>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80028f6:	4b09      	ldr	r3, [pc, #36]	; (800291c <MX_CAN1_Init+0x64>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80028fc:	4b07      	ldr	r3, [pc, #28]	; (800291c <MX_CAN1_Init+0x64>)
 80028fe:	2200      	movs	r2, #0
 8002900:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002902:	4b06      	ldr	r3, [pc, #24]	; (800291c <MX_CAN1_Init+0x64>)
 8002904:	2200      	movs	r2, #0
 8002906:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002908:	4804      	ldr	r0, [pc, #16]	; (800291c <MX_CAN1_Init+0x64>)
 800290a:	f001 f9ab 	bl	8003c64 <HAL_CAN_Init>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8002914:	f000 fa2c 	bl	8002d70 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8002918:	bf00      	nop
 800291a:	bd80      	pop	{r7, pc}
 800291c:	200076ec 	.word	0x200076ec
 8002920:	40006400 	.word	0x40006400

08002924 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b08a      	sub	sp, #40	; 0x28
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800292c:	f107 0314 	add.w	r3, r7, #20
 8002930:	2200      	movs	r2, #0
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	605a      	str	r2, [r3, #4]
 8002936:	609a      	str	r2, [r3, #8]
 8002938:	60da      	str	r2, [r3, #12]
 800293a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a2d      	ldr	r2, [pc, #180]	; (80029f8 <HAL_CAN_MspInit+0xd4>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d153      	bne.n	80029ee <HAL_CAN_MspInit+0xca>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002946:	2300      	movs	r3, #0
 8002948:	613b      	str	r3, [r7, #16]
 800294a:	4b2c      	ldr	r3, [pc, #176]	; (80029fc <HAL_CAN_MspInit+0xd8>)
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	4a2b      	ldr	r2, [pc, #172]	; (80029fc <HAL_CAN_MspInit+0xd8>)
 8002950:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002954:	6413      	str	r3, [r2, #64]	; 0x40
 8002956:	4b29      	ldr	r3, [pc, #164]	; (80029fc <HAL_CAN_MspInit+0xd8>)
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800295e:	613b      	str	r3, [r7, #16]
 8002960:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002962:	2300      	movs	r3, #0
 8002964:	60fb      	str	r3, [r7, #12]
 8002966:	4b25      	ldr	r3, [pc, #148]	; (80029fc <HAL_CAN_MspInit+0xd8>)
 8002968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296a:	4a24      	ldr	r2, [pc, #144]	; (80029fc <HAL_CAN_MspInit+0xd8>)
 800296c:	f043 0301 	orr.w	r3, r3, #1
 8002970:	6313      	str	r3, [r2, #48]	; 0x30
 8002972:	4b22      	ldr	r3, [pc, #136]	; (80029fc <HAL_CAN_MspInit+0xd8>)
 8002974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	60fb      	str	r3, [r7, #12]
 800297c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800297e:	2300      	movs	r3, #0
 8002980:	60bb      	str	r3, [r7, #8]
 8002982:	4b1e      	ldr	r3, [pc, #120]	; (80029fc <HAL_CAN_MspInit+0xd8>)
 8002984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002986:	4a1d      	ldr	r2, [pc, #116]	; (80029fc <HAL_CAN_MspInit+0xd8>)
 8002988:	f043 0302 	orr.w	r3, r3, #2
 800298c:	6313      	str	r3, [r2, #48]	; 0x30
 800298e:	4b1b      	ldr	r3, [pc, #108]	; (80029fc <HAL_CAN_MspInit+0xd8>)
 8002990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	60bb      	str	r3, [r7, #8]
 8002998:	68bb      	ldr	r3, [r7, #8]
    /**CAN1 GPIO Configuration
    PA12     ------> CAN1_TX
    PB8     ------> CAN1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800299a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800299e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a0:	2302      	movs	r3, #2
 80029a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a4:	2300      	movs	r3, #0
 80029a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a8:	2303      	movs	r3, #3
 80029aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80029ac:	2309      	movs	r3, #9
 80029ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b0:	f107 0314 	add.w	r3, r7, #20
 80029b4:	4619      	mov	r1, r3
 80029b6:	4812      	ldr	r0, [pc, #72]	; (8002a00 <HAL_CAN_MspInit+0xdc>)
 80029b8:	f002 fbe8 	bl	800518c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80029bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c2:	2302      	movs	r3, #2
 80029c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c6:	2300      	movs	r3, #0
 80029c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ca:	2303      	movs	r3, #3
 80029cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80029ce:	2309      	movs	r3, #9
 80029d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029d2:	f107 0314 	add.w	r3, r7, #20
 80029d6:	4619      	mov	r1, r3
 80029d8:	480a      	ldr	r0, [pc, #40]	; (8002a04 <HAL_CAN_MspInit+0xe0>)
 80029da:	f002 fbd7 	bl	800518c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80029de:	2200      	movs	r2, #0
 80029e0:	2105      	movs	r1, #5
 80029e2:	2014      	movs	r0, #20
 80029e4:	f001 ffa6 	bl	8004934 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80029e8:	2014      	movs	r0, #20
 80029ea:	f001 ffbf 	bl	800496c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80029ee:	bf00      	nop
 80029f0:	3728      	adds	r7, #40	; 0x28
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	40006400 	.word	0x40006400
 80029fc:	40023800 	.word	0x40023800
 8002a00:	40020000 	.word	0x40020000
 8002a04:	40020400 	.word	0x40020400

08002a08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002a0e:	2300      	movs	r3, #0
 8002a10:	607b      	str	r3, [r7, #4]
 8002a12:	4b27      	ldr	r3, [pc, #156]	; (8002ab0 <MX_DMA_Init+0xa8>)
 8002a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a16:	4a26      	ldr	r2, [pc, #152]	; (8002ab0 <MX_DMA_Init+0xa8>)
 8002a18:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a1e:	4b24      	ldr	r3, [pc, #144]	; (8002ab0 <MX_DMA_Init+0xa8>)
 8002a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a26:	607b      	str	r3, [r7, #4]
 8002a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	603b      	str	r3, [r7, #0]
 8002a2e:	4b20      	ldr	r3, [pc, #128]	; (8002ab0 <MX_DMA_Init+0xa8>)
 8002a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a32:	4a1f      	ldr	r2, [pc, #124]	; (8002ab0 <MX_DMA_Init+0xa8>)
 8002a34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a38:	6313      	str	r3, [r2, #48]	; 0x30
 8002a3a:	4b1d      	ldr	r3, [pc, #116]	; (8002ab0 <MX_DMA_Init+0xa8>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a42:	603b      	str	r3, [r7, #0]
 8002a44:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8002a46:	2200      	movs	r2, #0
 8002a48:	2105      	movs	r1, #5
 8002a4a:	200c      	movs	r0, #12
 8002a4c:	f001 ff72 	bl	8004934 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002a50:	200c      	movs	r0, #12
 8002a52:	f001 ff8b 	bl	800496c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8002a56:	2200      	movs	r2, #0
 8002a58:	2105      	movs	r1, #5
 8002a5a:	200e      	movs	r0, #14
 8002a5c:	f001 ff6a 	bl	8004934 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002a60:	200e      	movs	r0, #14
 8002a62:	f001 ff83 	bl	800496c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8002a66:	2200      	movs	r2, #0
 8002a68:	2105      	movs	r1, #5
 8002a6a:	203a      	movs	r0, #58	; 0x3a
 8002a6c:	f001 ff62 	bl	8004934 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002a70:	203a      	movs	r0, #58	; 0x3a
 8002a72:	f001 ff7b 	bl	800496c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 8002a76:	2200      	movs	r2, #0
 8002a78:	2105      	movs	r1, #5
 8002a7a:	2044      	movs	r0, #68	; 0x44
 8002a7c:	f001 ff5a 	bl	8004934 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8002a80:	2044      	movs	r0, #68	; 0x44
 8002a82:	f001 ff73 	bl	800496c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8002a86:	2200      	movs	r2, #0
 8002a88:	2105      	movs	r1, #5
 8002a8a:	2045      	movs	r0, #69	; 0x45
 8002a8c:	f001 ff52 	bl	8004934 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002a90:	2045      	movs	r0, #69	; 0x45
 8002a92:	f001 ff6b 	bl	800496c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8002a96:	2200      	movs	r2, #0
 8002a98:	2105      	movs	r1, #5
 8002a9a:	2046      	movs	r0, #70	; 0x46
 8002a9c:	f001 ff4a 	bl	8004934 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002aa0:	2046      	movs	r0, #70	; 0x46
 8002aa2:	f001 ff63 	bl	800496c <HAL_NVIC_EnableIRQ>

}
 8002aa6:	bf00      	nop
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	40023800 	.word	0x40023800

08002ab4 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
	TIM5->CR1 = 0b1;
 8002ab8:	4b03      	ldr	r3, [pc, #12]	; (8002ac8 <configureTimerForRunTimeStats+0x14>)
 8002aba:	2201      	movs	r2, #1
 8002abc:	601a      	str	r2, [r3, #0]
}
 8002abe:	bf00      	nop
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr
 8002ac8:	40000c00 	.word	0x40000c00

08002acc <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
return TIM5->CNT;
 8002ad0:	4b03      	ldr	r3, [pc, #12]	; (8002ae0 <getRunTimeCounterValue+0x14>)
 8002ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	40000c00 	.word	0x40000c00

08002ae4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	4a07      	ldr	r2, [pc, #28]	; (8002b10 <vApplicationGetIdleTaskMemory+0x2c>)
 8002af4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	4a06      	ldr	r2, [pc, #24]	; (8002b14 <vApplicationGetIdleTaskMemory+0x30>)
 8002afa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2280      	movs	r2, #128	; 0x80
 8002b00:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002b02:	bf00      	nop
 8002b04:	3714      	adds	r7, #20
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	20006f08 	.word	0x20006f08
 8002b14:	20006f60 	.word	0x20006f60

08002b18 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002b18:	b5b0      	push	{r4, r5, r7, lr}
 8002b1a:	b088      	sub	sp, #32
 8002b1c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128, defaultTaskBuffer, &defaultTaskControlBlock);
 8002b1e:	4b0a      	ldr	r3, [pc, #40]	; (8002b48 <MX_FREERTOS_Init+0x30>)
 8002b20:	1d3c      	adds	r4, r7, #4
 8002b22:	461d      	mov	r5, r3
 8002b24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b28:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002b2c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002b30:	1d3b      	adds	r3, r7, #4
 8002b32:	2100      	movs	r1, #0
 8002b34:	4618      	mov	r0, r3
 8002b36:	f006 fbea 	bl	800930e <osThreadCreate>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	4a03      	ldr	r2, [pc, #12]	; (8002b4c <MX_FREERTOS_Init+0x34>)
 8002b3e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002b40:	bf00      	nop
 8002b42:	3720      	adds	r7, #32
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bdb0      	pop	{r4, r5, r7, pc}
 8002b48:	0800b424 	.word	0x0800b424
 8002b4c:	20007714 	.word	0x20007714

08002b50 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002b58:	2001      	movs	r0, #1
 8002b5a:	f006 fbfd 	bl	8009358 <osDelay>
 8002b5e:	e7fb      	b.n	8002b58 <StartDefaultTask+0x8>

08002b60 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b088      	sub	sp, #32
 8002b64:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b66:	f107 030c 	add.w	r3, r7, #12
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	601a      	str	r2, [r3, #0]
 8002b6e:	605a      	str	r2, [r3, #4]
 8002b70:	609a      	str	r2, [r3, #8]
 8002b72:	60da      	str	r2, [r3, #12]
 8002b74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b76:	2300      	movs	r3, #0
 8002b78:	60bb      	str	r3, [r7, #8]
 8002b7a:	4b27      	ldr	r3, [pc, #156]	; (8002c18 <MX_GPIO_Init+0xb8>)
 8002b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7e:	4a26      	ldr	r2, [pc, #152]	; (8002c18 <MX_GPIO_Init+0xb8>)
 8002b80:	f043 0301 	orr.w	r3, r3, #1
 8002b84:	6313      	str	r3, [r2, #48]	; 0x30
 8002b86:	4b24      	ldr	r3, [pc, #144]	; (8002c18 <MX_GPIO_Init+0xb8>)
 8002b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	60bb      	str	r3, [r7, #8]
 8002b90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b92:	2300      	movs	r3, #0
 8002b94:	607b      	str	r3, [r7, #4]
 8002b96:	4b20      	ldr	r3, [pc, #128]	; (8002c18 <MX_GPIO_Init+0xb8>)
 8002b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9a:	4a1f      	ldr	r2, [pc, #124]	; (8002c18 <MX_GPIO_Init+0xb8>)
 8002b9c:	f043 0304 	orr.w	r3, r3, #4
 8002ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ba2:	4b1d      	ldr	r3, [pc, #116]	; (8002c18 <MX_GPIO_Init+0xb8>)
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba6:	f003 0304 	and.w	r3, r3, #4
 8002baa:	607b      	str	r3, [r7, #4]
 8002bac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bae:	2300      	movs	r3, #0
 8002bb0:	603b      	str	r3, [r7, #0]
 8002bb2:	4b19      	ldr	r3, [pc, #100]	; (8002c18 <MX_GPIO_Init+0xb8>)
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb6:	4a18      	ldr	r2, [pc, #96]	; (8002c18 <MX_GPIO_Init+0xb8>)
 8002bb8:	f043 0302 	orr.w	r3, r3, #2
 8002bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8002bbe:	4b16      	ldr	r3, [pc, #88]	; (8002c18 <MX_GPIO_Init+0xb8>)
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	603b      	str	r3, [r7, #0]
 8002bc8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GLOBAL_EN_GPIO_Port, GLOBAL_EN_Pin, GPIO_PIN_RESET);
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002bd0:	4812      	ldr	r0, [pc, #72]	; (8002c1c <MX_GPIO_Init+0xbc>)
 8002bd2:	f002 fc6f 	bl	80054b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RUN_PG_Pin;
 8002bd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be0:	2300      	movs	r3, #0
 8002be2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(RUN_PG_GPIO_Port, &GPIO_InitStruct);
 8002be4:	f107 030c 	add.w	r3, r7, #12
 8002be8:	4619      	mov	r1, r3
 8002bea:	480d      	ldr	r0, [pc, #52]	; (8002c20 <MX_GPIO_Init+0xc0>)
 8002bec:	f002 face 	bl	800518c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GLOBAL_EN_Pin;
 8002bf0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002bf4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002bf6:	2311      	movs	r3, #17
 8002bf8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GLOBAL_EN_GPIO_Port, &GPIO_InitStruct);
 8002c02:	f107 030c 	add.w	r3, r7, #12
 8002c06:	4619      	mov	r1, r3
 8002c08:	4804      	ldr	r0, [pc, #16]	; (8002c1c <MX_GPIO_Init+0xbc>)
 8002c0a:	f002 fabf 	bl	800518c <HAL_GPIO_Init>

}
 8002c0e:	bf00      	nop
 8002c10:	3720      	adds	r7, #32
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	40023800 	.word	0x40023800
 8002c1c:	40020000 	.word	0x40020000
 8002c20:	40020400 	.word	0x40020400

08002c24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c28:	f000 ffda 	bl	8003be0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c2c:	f000 f822 	bl	8002c74 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c30:	f7ff ff96 	bl	8002b60 <MX_GPIO_Init>
  MX_DMA_Init();
 8002c34:	f7ff fee8 	bl	8002a08 <MX_DMA_Init>
  MX_TIM8_Init();
 8002c38:	f000 fb68 	bl	800330c <MX_TIM8_Init>
  MX_TIM2_Init();
 8002c3c:	f000 fa7e 	bl	800313c <MX_TIM2_Init>
  MX_USART6_UART_Init();
 8002c40:	f000 fd54 	bl	80036ec <MX_USART6_UART_Init>
  MX_USART3_UART_Init();
 8002c44:	f000 fd28 	bl	8003698 <MX_USART3_UART_Init>
  MX_QUADSPI_Init();
 8002c48:	f000 f89a 	bl	8002d80 <MX_QUADSPI_Init>
  MX_TIM3_Init();
 8002c4c:	f000 fac2 	bl	80031d4 <MX_TIM3_Init>
  MX_CAN1_Init();
 8002c50:	f7ff fe32 	bl	80028b8 <MX_CAN1_Init>
  MX_USART1_UART_Init();
 8002c54:	f000 fcf6 	bl	8003644 <MX_USART1_UART_Init>
  MX_TIM5_Init();
 8002c58:	f000 fb0a 	bl	8003270 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */



  threads_init();
 8002c5c:	f7ff fdb4 	bl	80027c8 <threads_init>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8002c60:	f7ff ff5a 	bl	8002b18 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8002c64:	f006 fb4c 	bl	8009300 <osKernelStart>



  while (1)
  {
	osDelay(1000);
 8002c68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c6c:	f006 fb74 	bl	8009358 <osDelay>
 8002c70:	e7fa      	b.n	8002c68 <main+0x44>
	...

08002c74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b094      	sub	sp, #80	; 0x50
 8002c78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c7a:	f107 031c 	add.w	r3, r7, #28
 8002c7e:	2234      	movs	r2, #52	; 0x34
 8002c80:	2100      	movs	r1, #0
 8002c82:	4618      	mov	r0, r3
 8002c84:	f008 fba2 	bl	800b3cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c88:	f107 0308 	add.w	r3, r7, #8
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	605a      	str	r2, [r3, #4]
 8002c92:	609a      	str	r2, [r3, #8]
 8002c94:	60da      	str	r2, [r3, #12]
 8002c96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c98:	2300      	movs	r3, #0
 8002c9a:	607b      	str	r3, [r7, #4]
 8002c9c:	4b29      	ldr	r3, [pc, #164]	; (8002d44 <SystemClock_Config+0xd0>)
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca0:	4a28      	ldr	r2, [pc, #160]	; (8002d44 <SystemClock_Config+0xd0>)
 8002ca2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ca6:	6413      	str	r3, [r2, #64]	; 0x40
 8002ca8:	4b26      	ldr	r3, [pc, #152]	; (8002d44 <SystemClock_Config+0xd0>)
 8002caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb0:	607b      	str	r3, [r7, #4]
 8002cb2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	603b      	str	r3, [r7, #0]
 8002cb8:	4b23      	ldr	r3, [pc, #140]	; (8002d48 <SystemClock_Config+0xd4>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002cc0:	4a21      	ldr	r2, [pc, #132]	; (8002d48 <SystemClock_Config+0xd4>)
 8002cc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cc6:	6013      	str	r3, [r2, #0]
 8002cc8:	4b1f      	ldr	r3, [pc, #124]	; (8002d48 <SystemClock_Config+0xd4>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002cd0:	603b      	str	r3, [r7, #0]
 8002cd2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002cdc:	2310      	movs	r3, #16
 8002cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002ce8:	2308      	movs	r3, #8
 8002cea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002cec:	2348      	movs	r3, #72	; 0x48
 8002cee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cfc:	f107 031c 	add.w	r3, r7, #28
 8002d00:	4618      	mov	r0, r3
 8002d02:	f003 fdfb 	bl	80068fc <HAL_RCC_OscConfig>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002d0c:	f000 f830 	bl	8002d70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d10:	230f      	movs	r3, #15
 8002d12:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d14:	2302      	movs	r3, #2
 8002d16:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002d1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d20:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d22:	2300      	movs	r3, #0
 8002d24:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002d26:	f107 0308 	add.w	r3, r7, #8
 8002d2a:	2102      	movs	r1, #2
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f003 fb3d 	bl	80063ac <HAL_RCC_ClockConfig>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d001      	beq.n	8002d3c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8002d38:	f000 f81a 	bl	8002d70 <Error_Handler>
  }
}
 8002d3c:	bf00      	nop
 8002d3e:	3750      	adds	r7, #80	; 0x50
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	40023800 	.word	0x40023800
 8002d48:	40007000 	.word	0x40007000

08002d4c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a04      	ldr	r2, [pc, #16]	; (8002d6c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d101      	bne.n	8002d62 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002d5e:	f000 ff61 	bl	8003c24 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002d62:	bf00      	nop
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	40010000 	.word	0x40010000

08002d70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002d74:	bf00      	nop
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
	...

08002d80 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8002d84:	4b12      	ldr	r3, [pc, #72]	; (8002dd0 <MX_QUADSPI_Init+0x50>)
 8002d86:	4a13      	ldr	r2, [pc, #76]	; (8002dd4 <MX_QUADSPI_Init+0x54>)
 8002d88:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 100;
 8002d8a:	4b11      	ldr	r3, [pc, #68]	; (8002dd0 <MX_QUADSPI_Init+0x50>)
 8002d8c:	2264      	movs	r2, #100	; 0x64
 8002d8e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8002d90:	4b0f      	ldr	r3, [pc, #60]	; (8002dd0 <MX_QUADSPI_Init+0x50>)
 8002d92:	2201      	movs	r2, #1
 8002d94:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8002d96:	4b0e      	ldr	r3, [pc, #56]	; (8002dd0 <MX_QUADSPI_Init+0x50>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 26;
 8002d9c:	4b0c      	ldr	r3, [pc, #48]	; (8002dd0 <MX_QUADSPI_Init+0x50>)
 8002d9e:	221a      	movs	r2, #26
 8002da0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8002da2:	4b0b      	ldr	r3, [pc, #44]	; (8002dd0 <MX_QUADSPI_Init+0x50>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8002da8:	4b09      	ldr	r3, [pc, #36]	; (8002dd0 <MX_QUADSPI_Init+0x50>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8002dae:	4b08      	ldr	r3, [pc, #32]	; (8002dd0 <MX_QUADSPI_Init+0x50>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8002db4:	4b06      	ldr	r3, [pc, #24]	; (8002dd0 <MX_QUADSPI_Init+0x50>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8002dba:	4805      	ldr	r0, [pc, #20]	; (8002dd0 <MX_QUADSPI_Init+0x50>)
 8002dbc:	f002 fb94 	bl	80054e8 <HAL_QSPI_Init>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8002dc6:	f7ff ffd3 	bl	8002d70 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8002dca:	bf00      	nop
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	20007970 	.word	0x20007970
 8002dd4:	a0001000 	.word	0xa0001000

08002dd8 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b08a      	sub	sp, #40	; 0x28
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de0:	f107 0314 	add.w	r3, r7, #20
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	605a      	str	r2, [r3, #4]
 8002dea:	609a      	str	r2, [r3, #8]
 8002dec:	60da      	str	r2, [r3, #12]
 8002dee:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a34      	ldr	r2, [pc, #208]	; (8002ec8 <HAL_QSPI_MspInit+0xf0>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d162      	bne.n	8002ec0 <HAL_QSPI_MspInit+0xe8>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	613b      	str	r3, [r7, #16]
 8002dfe:	4b33      	ldr	r3, [pc, #204]	; (8002ecc <HAL_QSPI_MspInit+0xf4>)
 8002e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e02:	4a32      	ldr	r2, [pc, #200]	; (8002ecc <HAL_QSPI_MspInit+0xf4>)
 8002e04:	f043 0302 	orr.w	r3, r3, #2
 8002e08:	6393      	str	r3, [r2, #56]	; 0x38
 8002e0a:	4b30      	ldr	r3, [pc, #192]	; (8002ecc <HAL_QSPI_MspInit+0xf4>)
 8002e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	613b      	str	r3, [r7, #16]
 8002e14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e16:	2300      	movs	r3, #0
 8002e18:	60fb      	str	r3, [r7, #12]
 8002e1a:	4b2c      	ldr	r3, [pc, #176]	; (8002ecc <HAL_QSPI_MspInit+0xf4>)
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1e:	4a2b      	ldr	r2, [pc, #172]	; (8002ecc <HAL_QSPI_MspInit+0xf4>)
 8002e20:	f043 0302 	orr.w	r3, r3, #2
 8002e24:	6313      	str	r3, [r2, #48]	; 0x30
 8002e26:	4b29      	ldr	r3, [pc, #164]	; (8002ecc <HAL_QSPI_MspInit+0xf4>)
 8002e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	60fb      	str	r3, [r7, #12]
 8002e30:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e32:	2300      	movs	r3, #0
 8002e34:	60bb      	str	r3, [r7, #8]
 8002e36:	4b25      	ldr	r3, [pc, #148]	; (8002ecc <HAL_QSPI_MspInit+0xf4>)
 8002e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3a:	4a24      	ldr	r2, [pc, #144]	; (8002ecc <HAL_QSPI_MspInit+0xf4>)
 8002e3c:	f043 0304 	orr.w	r3, r3, #4
 8002e40:	6313      	str	r3, [r2, #48]	; 0x30
 8002e42:	4b22      	ldr	r3, [pc, #136]	; (8002ecc <HAL_QSPI_MspInit+0xf4>)
 8002e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e46:	f003 0304 	and.w	r3, r3, #4
 8002e4a:	60bb      	str	r3, [r7, #8]
 8002e4c:	68bb      	ldr	r3, [r7, #8]
    PB2     ------> QUADSPI_CLK
    PC9     ------> QUADSPI_BK1_IO0
    PC10     ------> QUADSPI_BK1_IO1
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002e4e:	2304      	movs	r3, #4
 8002e50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e52:	2302      	movs	r3, #2
 8002e54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e56:	2300      	movs	r3, #0
 8002e58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8002e5e:	2309      	movs	r3, #9
 8002e60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e62:	f107 0314 	add.w	r3, r7, #20
 8002e66:	4619      	mov	r1, r3
 8002e68:	4819      	ldr	r0, [pc, #100]	; (8002ed0 <HAL_QSPI_MspInit+0xf8>)
 8002e6a:	f002 f98f 	bl	800518c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002e6e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002e72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e74:	2302      	movs	r3, #2
 8002e76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8002e80:	2309      	movs	r3, #9
 8002e82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e84:	f107 0314 	add.w	r3, r7, #20
 8002e88:	4619      	mov	r1, r3
 8002e8a:	4812      	ldr	r0, [pc, #72]	; (8002ed4 <HAL_QSPI_MspInit+0xfc>)
 8002e8c:	f002 f97e 	bl	800518c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002e90:	2340      	movs	r3, #64	; 0x40
 8002e92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e94:	2302      	movs	r3, #2
 8002e96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8002ea0:	230a      	movs	r3, #10
 8002ea2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ea4:	f107 0314 	add.w	r3, r7, #20
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	4809      	ldr	r0, [pc, #36]	; (8002ed0 <HAL_QSPI_MspInit+0xf8>)
 8002eac:	f002 f96e 	bl	800518c <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 5, 0);
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	2105      	movs	r1, #5
 8002eb4:	205c      	movs	r0, #92	; 0x5c
 8002eb6:	f001 fd3d 	bl	8004934 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8002eba:	205c      	movs	r0, #92	; 0x5c
 8002ebc:	f001 fd56 	bl	800496c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8002ec0:	bf00      	nop
 8002ec2:	3728      	adds	r7, #40	; 0x28
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	a0001000 	.word	0xa0001000
 8002ecc:	40023800 	.word	0x40023800
 8002ed0:	40020400 	.word	0x40020400
 8002ed4:	40020800 	.word	0x40020800

08002ed8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ede:	2300      	movs	r3, #0
 8002ee0:	607b      	str	r3, [r7, #4]
 8002ee2:	4b12      	ldr	r3, [pc, #72]	; (8002f2c <HAL_MspInit+0x54>)
 8002ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee6:	4a11      	ldr	r2, [pc, #68]	; (8002f2c <HAL_MspInit+0x54>)
 8002ee8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002eec:	6453      	str	r3, [r2, #68]	; 0x44
 8002eee:	4b0f      	ldr	r3, [pc, #60]	; (8002f2c <HAL_MspInit+0x54>)
 8002ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ef6:	607b      	str	r3, [r7, #4]
 8002ef8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002efa:	2300      	movs	r3, #0
 8002efc:	603b      	str	r3, [r7, #0]
 8002efe:	4b0b      	ldr	r3, [pc, #44]	; (8002f2c <HAL_MspInit+0x54>)
 8002f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f02:	4a0a      	ldr	r2, [pc, #40]	; (8002f2c <HAL_MspInit+0x54>)
 8002f04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f08:	6413      	str	r3, [r2, #64]	; 0x40
 8002f0a:	4b08      	ldr	r3, [pc, #32]	; (8002f2c <HAL_MspInit+0x54>)
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f12:	603b      	str	r3, [r7, #0]
 8002f14:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002f16:	2200      	movs	r2, #0
 8002f18:	210f      	movs	r1, #15
 8002f1a:	f06f 0001 	mvn.w	r0, #1
 8002f1e:	f001 fd09 	bl	8004934 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f22:	bf00      	nop
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	40023800 	.word	0x40023800

08002f30 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b08c      	sub	sp, #48	; 0x30
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8002f40:	2200      	movs	r2, #0
 8002f42:	6879      	ldr	r1, [r7, #4]
 8002f44:	2019      	movs	r0, #25
 8002f46:	f001 fcf5 	bl	8004934 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002f4a:	2019      	movs	r0, #25
 8002f4c:	f001 fd0e 	bl	800496c <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002f50:	2300      	movs	r3, #0
 8002f52:	60fb      	str	r3, [r7, #12]
 8002f54:	4b1e      	ldr	r3, [pc, #120]	; (8002fd0 <HAL_InitTick+0xa0>)
 8002f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f58:	4a1d      	ldr	r2, [pc, #116]	; (8002fd0 <HAL_InitTick+0xa0>)
 8002f5a:	f043 0301 	orr.w	r3, r3, #1
 8002f5e:	6453      	str	r3, [r2, #68]	; 0x44
 8002f60:	4b1b      	ldr	r3, [pc, #108]	; (8002fd0 <HAL_InitTick+0xa0>)
 8002f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f64:	f003 0301 	and.w	r3, r3, #1
 8002f68:	60fb      	str	r3, [r7, #12]
 8002f6a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002f6c:	f107 0210 	add.w	r2, r7, #16
 8002f70:	f107 0314 	add.w	r3, r7, #20
 8002f74:	4611      	mov	r1, r2
 8002f76:	4618      	mov	r0, r3
 8002f78:	f003 fb32 	bl	80065e0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002f7c:	f003 fb1c 	bl	80065b8 <HAL_RCC_GetPCLK2Freq>
 8002f80:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f84:	4a13      	ldr	r2, [pc, #76]	; (8002fd4 <HAL_InitTick+0xa4>)
 8002f86:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8a:	0c9b      	lsrs	r3, r3, #18
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002f90:	4b11      	ldr	r3, [pc, #68]	; (8002fd8 <HAL_InitTick+0xa8>)
 8002f92:	4a12      	ldr	r2, [pc, #72]	; (8002fdc <HAL_InitTick+0xac>)
 8002f94:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002f96:	4b10      	ldr	r3, [pc, #64]	; (8002fd8 <HAL_InitTick+0xa8>)
 8002f98:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002f9c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002f9e:	4a0e      	ldr	r2, [pc, #56]	; (8002fd8 <HAL_InitTick+0xa8>)
 8002fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002fa4:	4b0c      	ldr	r3, [pc, #48]	; (8002fd8 <HAL_InitTick+0xa8>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002faa:	4b0b      	ldr	r3, [pc, #44]	; (8002fd8 <HAL_InitTick+0xa8>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002fb0:	4809      	ldr	r0, [pc, #36]	; (8002fd8 <HAL_InitTick+0xa8>)
 8002fb2:	f003 ff41 	bl	8006e38 <HAL_TIM_Base_Init>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d104      	bne.n	8002fc6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002fbc:	4806      	ldr	r0, [pc, #24]	; (8002fd8 <HAL_InitTick+0xa8>)
 8002fbe:	f003 ff8b 	bl	8006ed8 <HAL_TIM_Base_Start_IT>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	e000      	b.n	8002fc8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3730      	adds	r7, #48	; 0x30
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	40023800 	.word	0x40023800
 8002fd4:	431bde83 	.word	0x431bde83
 8002fd8:	200079bc 	.word	0x200079bc
 8002fdc:	40010000 	.word	0x40010000

08002fe0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002fe4:	bf00      	nop
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr

08002fee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	af00      	add	r7, sp, #0
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */

	  led_set_color(LED_WHITE);
 8002ff2:	222f      	movs	r2, #47	; 0x2f
 8002ff4:	212f      	movs	r1, #47	; 0x2f
 8002ff6:	202f      	movs	r0, #47	; 0x2f
 8002ff8:	f7fe feca 	bl	8001d90 <led_set_color>
 8002ffc:	e7f9      	b.n	8002ff2 <HardFault_Handler+0x4>

08002ffe <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ffe:	b480      	push	{r7}
 8003000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003002:	e7fe      	b.n	8003002 <MemManage_Handler+0x4>

08003004 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003008:	e7fe      	b.n	8003008 <BusFault_Handler+0x4>

0800300a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800300a:	b480      	push	{r7}
 800300c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800300e:	e7fe      	b.n	800300e <UsageFault_Handler+0x4>

08003010 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003014:	bf00      	nop
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
	...

08003020 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003024:	4802      	ldr	r0, [pc, #8]	; (8003030 <DMA1_Stream1_IRQHandler+0x10>)
 8003026:	f001 fe47 	bl	8004cb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800302a:	bf00      	nop
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	20007b84 	.word	0x20007b84

08003034 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003038:	4802      	ldr	r0, [pc, #8]	; (8003044 <DMA1_Stream3_IRQHandler+0x10>)
 800303a:	f001 fe3d 	bl	8004cb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800303e:	bf00      	nop
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	20007c28 	.word	0x20007c28

08003048 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800304c:	4802      	ldr	r0, [pc, #8]	; (8003058 <CAN1_RX0_IRQHandler+0x10>)
 800304e:	f001 f989 	bl	8004364 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003052:	bf00      	nop
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	200076ec 	.word	0x200076ec

0800305c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003060:	4802      	ldr	r0, [pc, #8]	; (800306c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003062:	f004 f802 	bl	800706a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003066:	bf00      	nop
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	200079bc 	.word	0x200079bc

08003070 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003074:	4802      	ldr	r0, [pc, #8]	; (8003080 <USART1_IRQHandler+0x10>)
 8003076:	f005 f895 	bl	80081a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800307a:	bf00      	nop
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	20007da8 	.word	0x20007da8

08003084 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003088:	4802      	ldr	r0, [pc, #8]	; (8003094 <USART3_IRQHandler+0x10>)
 800308a:	f005 f88b 	bl	80081a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800308e:	bf00      	nop
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	20007be4 	.word	0x20007be4

08003098 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 800309c:	4802      	ldr	r0, [pc, #8]	; (80030a8 <DMA2_Stream2_IRQHandler+0x10>)
 800309e:	f001 fe0b 	bl	8004cb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80030a2:	bf00      	nop
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	20007b24 	.word	0x20007b24

080030ac <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80030b0:	4802      	ldr	r0, [pc, #8]	; (80030bc <DMA2_Stream5_IRQHandler+0x10>)
 80030b2:	f001 fe01 	bl	8004cb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 80030b6:	bf00      	nop
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	20007d48 	.word	0x20007d48

080030c0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 80030c4:	4802      	ldr	r0, [pc, #8]	; (80030d0 <DMA2_Stream6_IRQHandler+0x10>)
 80030c6:	f001 fdf7 	bl	8004cb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80030ca:	bf00      	nop
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	20007ce8 	.word	0x20007ce8

080030d4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80030d8:	4802      	ldr	r0, [pc, #8]	; (80030e4 <DMA2_Stream7_IRQHandler+0x10>)
 80030da:	f001 fded 	bl	8004cb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80030de:	bf00      	nop
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	20007c88 	.word	0x20007c88

080030e8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80030ec:	4802      	ldr	r0, [pc, #8]	; (80030f8 <USART6_IRQHandler+0x10>)
 80030ee:	f005 f859 	bl	80081a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80030f2:	bf00      	nop
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	20007dec 	.word	0x20007dec

080030fc <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 8003100:	4802      	ldr	r0, [pc, #8]	; (800310c <QUADSPI_IRQHandler+0x10>)
 8003102:	f002 fa6d 	bl	80055e0 <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 8003106:	bf00      	nop
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	20007970 	.word	0x20007970

08003110 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003114:	4b08      	ldr	r3, [pc, #32]	; (8003138 <SystemInit+0x28>)
 8003116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800311a:	4a07      	ldr	r2, [pc, #28]	; (8003138 <SystemInit+0x28>)
 800311c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003120:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003124:	4b04      	ldr	r3, [pc, #16]	; (8003138 <SystemInit+0x28>)
 8003126:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800312a:	609a      	str	r2, [r3, #8]
#endif
}
 800312c:	bf00      	nop
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	e000ed00 	.word	0xe000ed00

0800313c <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003142:	f107 0308 	add.w	r3, r7, #8
 8003146:	2200      	movs	r2, #0
 8003148:	601a      	str	r2, [r3, #0]
 800314a:	605a      	str	r2, [r3, #4]
 800314c:	609a      	str	r2, [r3, #8]
 800314e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003150:	463b      	mov	r3, r7
 8003152:	2200      	movs	r2, #0
 8003154:	601a      	str	r2, [r3, #0]
 8003156:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003158:	4b1d      	ldr	r3, [pc, #116]	; (80031d0 <MX_TIM2_Init+0x94>)
 800315a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800315e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 49;
 8003160:	4b1b      	ldr	r3, [pc, #108]	; (80031d0 <MX_TIM2_Init+0x94>)
 8003162:	2231      	movs	r2, #49	; 0x31
 8003164:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8003166:	4b1a      	ldr	r3, [pc, #104]	; (80031d0 <MX_TIM2_Init+0x94>)
 8003168:	2210      	movs	r2, #16
 800316a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800316c:	4b18      	ldr	r3, [pc, #96]	; (80031d0 <MX_TIM2_Init+0x94>)
 800316e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003172:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003174:	4b16      	ldr	r3, [pc, #88]	; (80031d0 <MX_TIM2_Init+0x94>)
 8003176:	2200      	movs	r2, #0
 8003178:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800317a:	4b15      	ldr	r3, [pc, #84]	; (80031d0 <MX_TIM2_Init+0x94>)
 800317c:	2200      	movs	r2, #0
 800317e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003180:	4813      	ldr	r0, [pc, #76]	; (80031d0 <MX_TIM2_Init+0x94>)
 8003182:	f003 fe59 	bl	8006e38 <HAL_TIM_Base_Init>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d001      	beq.n	8003190 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800318c:	f7ff fdf0 	bl	8002d70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003190:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003194:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003196:	f107 0308 	add.w	r3, r7, #8
 800319a:	4619      	mov	r1, r3
 800319c:	480c      	ldr	r0, [pc, #48]	; (80031d0 <MX_TIM2_Init+0x94>)
 800319e:	f004 f92b 	bl	80073f8 <HAL_TIM_ConfigClockSource>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d001      	beq.n	80031ac <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80031a8:	f7ff fde2 	bl	8002d70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031ac:	2300      	movs	r3, #0
 80031ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031b0:	2300      	movs	r3, #0
 80031b2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80031b4:	463b      	mov	r3, r7
 80031b6:	4619      	mov	r1, r3
 80031b8:	4805      	ldr	r0, [pc, #20]	; (80031d0 <MX_TIM2_Init+0x94>)
 80031ba:	f004 fdad 	bl	8007d18 <HAL_TIMEx_MasterConfigSynchronization>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d001      	beq.n	80031c8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80031c4:	f7ff fdd4 	bl	8002d70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80031c8:	bf00      	nop
 80031ca:	3718      	adds	r7, #24
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	20007adc 	.word	0x20007adc

080031d4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031da:	f107 0308 	add.w	r3, r7, #8
 80031de:	2200      	movs	r2, #0
 80031e0:	601a      	str	r2, [r3, #0]
 80031e2:	605a      	str	r2, [r3, #4]
 80031e4:	609a      	str	r2, [r3, #8]
 80031e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031e8:	463b      	mov	r3, r7
 80031ea:	2200      	movs	r2, #0
 80031ec:	601a      	str	r2, [r3, #0]
 80031ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80031f0:	4b1d      	ldr	r3, [pc, #116]	; (8003268 <MX_TIM3_Init+0x94>)
 80031f2:	4a1e      	ldr	r2, [pc, #120]	; (800326c <MX_TIM3_Init+0x98>)
 80031f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80031f6:	4b1c      	ldr	r3, [pc, #112]	; (8003268 <MX_TIM3_Init+0x94>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031fc:	4b1a      	ldr	r3, [pc, #104]	; (8003268 <MX_TIM3_Init+0x94>)
 80031fe:	2200      	movs	r2, #0
 8003200:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1125;
 8003202:	4b19      	ldr	r3, [pc, #100]	; (8003268 <MX_TIM3_Init+0x94>)
 8003204:	f240 4265 	movw	r2, #1125	; 0x465
 8003208:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800320a:	4b17      	ldr	r3, [pc, #92]	; (8003268 <MX_TIM3_Init+0x94>)
 800320c:	2200      	movs	r2, #0
 800320e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003210:	4b15      	ldr	r3, [pc, #84]	; (8003268 <MX_TIM3_Init+0x94>)
 8003212:	2200      	movs	r2, #0
 8003214:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003216:	4814      	ldr	r0, [pc, #80]	; (8003268 <MX_TIM3_Init+0x94>)
 8003218:	f003 fe0e 	bl	8006e38 <HAL_TIM_Base_Init>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8003222:	f7ff fda5 	bl	8002d70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003226:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800322a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800322c:	f107 0308 	add.w	r3, r7, #8
 8003230:	4619      	mov	r1, r3
 8003232:	480d      	ldr	r0, [pc, #52]	; (8003268 <MX_TIM3_Init+0x94>)
 8003234:	f004 f8e0 	bl	80073f8 <HAL_TIM_ConfigClockSource>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800323e:	f7ff fd97 	bl	8002d70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003242:	2320      	movs	r3, #32
 8003244:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003246:	2300      	movs	r3, #0
 8003248:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800324a:	463b      	mov	r3, r7
 800324c:	4619      	mov	r1, r3
 800324e:	4806      	ldr	r0, [pc, #24]	; (8003268 <MX_TIM3_Init+0x94>)
 8003250:	f004 fd62 	bl	8007d18 <HAL_TIMEx_MasterConfigSynchronization>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800325a:	f7ff fd89 	bl	8002d70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800325e:	bf00      	nop
 8003260:	3718      	adds	r7, #24
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	20007a94 	.word	0x20007a94
 800326c:	40000400 	.word	0x40000400

08003270 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b086      	sub	sp, #24
 8003274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003276:	f107 0308 	add.w	r3, r7, #8
 800327a:	2200      	movs	r2, #0
 800327c:	601a      	str	r2, [r3, #0]
 800327e:	605a      	str	r2, [r3, #4]
 8003280:	609a      	str	r2, [r3, #8]
 8003282:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003284:	463b      	mov	r3, r7
 8003286:	2200      	movs	r2, #0
 8003288:	601a      	str	r2, [r3, #0]
 800328a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800328c:	4b1d      	ldr	r3, [pc, #116]	; (8003304 <MX_TIM5_Init+0x94>)
 800328e:	4a1e      	ldr	r2, [pc, #120]	; (8003308 <MX_TIM5_Init+0x98>)
 8003290:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 7199;
 8003292:	4b1c      	ldr	r3, [pc, #112]	; (8003304 <MX_TIM5_Init+0x94>)
 8003294:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8003298:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800329a:	4b1a      	ldr	r3, [pc, #104]	; (8003304 <MX_TIM5_Init+0x94>)
 800329c:	2200      	movs	r2, #0
 800329e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80032a0:	4b18      	ldr	r3, [pc, #96]	; (8003304 <MX_TIM5_Init+0x94>)
 80032a2:	f04f 32ff 	mov.w	r2, #4294967295
 80032a6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032a8:	4b16      	ldr	r3, [pc, #88]	; (8003304 <MX_TIM5_Init+0x94>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032ae:	4b15      	ldr	r3, [pc, #84]	; (8003304 <MX_TIM5_Init+0x94>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80032b4:	4813      	ldr	r0, [pc, #76]	; (8003304 <MX_TIM5_Init+0x94>)
 80032b6:	f003 fdbf 	bl	8006e38 <HAL_TIM_Base_Init>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d001      	beq.n	80032c4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80032c0:	f7ff fd56 	bl	8002d70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80032ca:	f107 0308 	add.w	r3, r7, #8
 80032ce:	4619      	mov	r1, r3
 80032d0:	480c      	ldr	r0, [pc, #48]	; (8003304 <MX_TIM5_Init+0x94>)
 80032d2:	f004 f891 	bl	80073f8 <HAL_TIM_ConfigClockSource>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80032dc:	f7ff fd48 	bl	8002d70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032e0:	2300      	movs	r3, #0
 80032e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032e4:	2300      	movs	r3, #0
 80032e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80032e8:	463b      	mov	r3, r7
 80032ea:	4619      	mov	r1, r3
 80032ec:	4805      	ldr	r0, [pc, #20]	; (8003304 <MX_TIM5_Init+0x94>)
 80032ee:	f004 fd13 	bl	8007d18 <HAL_TIMEx_MasterConfigSynchronization>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d001      	beq.n	80032fc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80032f8:	f7ff fd3a 	bl	8002d70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80032fc:	bf00      	nop
 80032fe:	3718      	adds	r7, #24
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	20007a4c 	.word	0x20007a4c
 8003308:	40000c00 	.word	0x40000c00

0800330c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b096      	sub	sp, #88	; 0x58
 8003310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003312:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003316:	2200      	movs	r2, #0
 8003318:	601a      	str	r2, [r3, #0]
 800331a:	605a      	str	r2, [r3, #4]
 800331c:	609a      	str	r2, [r3, #8]
 800331e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003320:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003324:	2200      	movs	r2, #0
 8003326:	601a      	str	r2, [r3, #0]
 8003328:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800332a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800332e:	2200      	movs	r2, #0
 8003330:	601a      	str	r2, [r3, #0]
 8003332:	605a      	str	r2, [r3, #4]
 8003334:	609a      	str	r2, [r3, #8]
 8003336:	60da      	str	r2, [r3, #12]
 8003338:	611a      	str	r2, [r3, #16]
 800333a:	615a      	str	r2, [r3, #20]
 800333c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800333e:	1d3b      	adds	r3, r7, #4
 8003340:	2220      	movs	r2, #32
 8003342:	2100      	movs	r1, #0
 8003344:	4618      	mov	r0, r3
 8003346:	f008 f841 	bl	800b3cc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800334a:	4b4b      	ldr	r3, [pc, #300]	; (8003478 <MX_TIM8_Init+0x16c>)
 800334c:	4a4b      	ldr	r2, [pc, #300]	; (800347c <MX_TIM8_Init+0x170>)
 800334e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003350:	4b49      	ldr	r3, [pc, #292]	; (8003478 <MX_TIM8_Init+0x16c>)
 8003352:	2200      	movs	r2, #0
 8003354:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003356:	4b48      	ldr	r3, [pc, #288]	; (8003478 <MX_TIM8_Init+0x16c>)
 8003358:	2200      	movs	r2, #0
 800335a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 255;
 800335c:	4b46      	ldr	r3, [pc, #280]	; (8003478 <MX_TIM8_Init+0x16c>)
 800335e:	22ff      	movs	r2, #255	; 0xff
 8003360:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003362:	4b45      	ldr	r3, [pc, #276]	; (8003478 <MX_TIM8_Init+0x16c>)
 8003364:	2200      	movs	r2, #0
 8003366:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003368:	4b43      	ldr	r3, [pc, #268]	; (8003478 <MX_TIM8_Init+0x16c>)
 800336a:	2200      	movs	r2, #0
 800336c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800336e:	4b42      	ldr	r3, [pc, #264]	; (8003478 <MX_TIM8_Init+0x16c>)
 8003370:	2200      	movs	r2, #0
 8003372:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003374:	4840      	ldr	r0, [pc, #256]	; (8003478 <MX_TIM8_Init+0x16c>)
 8003376:	f003 fd5f 	bl	8006e38 <HAL_TIM_Base_Init>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d001      	beq.n	8003384 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8003380:	f7ff fcf6 	bl	8002d70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003384:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003388:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800338a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800338e:	4619      	mov	r1, r3
 8003390:	4839      	ldr	r0, [pc, #228]	; (8003478 <MX_TIM8_Init+0x16c>)
 8003392:	f004 f831 	bl	80073f8 <HAL_TIM_ConfigClockSource>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 800339c:	f7ff fce8 	bl	8002d70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80033a0:	4835      	ldr	r0, [pc, #212]	; (8003478 <MX_TIM8_Init+0x16c>)
 80033a2:	f003 fe09 	bl	8006fb8 <HAL_TIM_PWM_Init>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d001      	beq.n	80033b0 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80033ac:	f7ff fce0 	bl	8002d70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033b0:	2300      	movs	r3, #0
 80033b2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033b4:	2300      	movs	r3, #0
 80033b6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80033b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80033bc:	4619      	mov	r1, r3
 80033be:	482e      	ldr	r0, [pc, #184]	; (8003478 <MX_TIM8_Init+0x16c>)
 80033c0:	f004 fcaa 	bl	8007d18 <HAL_TIMEx_MasterConfigSynchronization>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 80033ca:	f7ff fcd1 	bl	8002d70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80033ce:	2360      	movs	r3, #96	; 0x60
 80033d0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 128;
 80033d2:	2380      	movs	r3, #128	; 0x80
 80033d4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80033d6:	2300      	movs	r3, #0
 80033d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 80033da:	2308      	movs	r3, #8
 80033dc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80033de:	2300      	movs	r3, #0
 80033e0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80033e2:	2300      	movs	r3, #0
 80033e4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80033e6:	2300      	movs	r3, #0
 80033e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80033ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033ee:	2200      	movs	r2, #0
 80033f0:	4619      	mov	r1, r3
 80033f2:	4821      	ldr	r0, [pc, #132]	; (8003478 <MX_TIM8_Init+0x16c>)
 80033f4:	f003 ff42 	bl	800727c <HAL_TIM_PWM_ConfigChannel>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d001      	beq.n	8003402 <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 80033fe:	f7ff fcb7 	bl	8002d70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003402:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003406:	2204      	movs	r2, #4
 8003408:	4619      	mov	r1, r3
 800340a:	481b      	ldr	r0, [pc, #108]	; (8003478 <MX_TIM8_Init+0x16c>)
 800340c:	f003 ff36 	bl	800727c <HAL_TIM_PWM_ConfigChannel>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 8003416:	f7ff fcab 	bl	8002d70 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800341a:	2300      	movs	r3, #0
 800341c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800341e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003422:	2208      	movs	r2, #8
 8003424:	4619      	mov	r1, r3
 8003426:	4814      	ldr	r0, [pc, #80]	; (8003478 <MX_TIM8_Init+0x16c>)
 8003428:	f003 ff28 	bl	800727c <HAL_TIM_PWM_ConfigChannel>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d001      	beq.n	8003436 <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 8003432:	f7ff fc9d 	bl	8002d70 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003436:	2300      	movs	r3, #0
 8003438:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800343a:	2300      	movs	r3, #0
 800343c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800343e:	2300      	movs	r3, #0
 8003440:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003442:	2300      	movs	r3, #0
 8003444:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003446:	2300      	movs	r3, #0
 8003448:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800344a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800344e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003450:	2300      	movs	r3, #0
 8003452:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003454:	1d3b      	adds	r3, r7, #4
 8003456:	4619      	mov	r1, r3
 8003458:	4807      	ldr	r0, [pc, #28]	; (8003478 <MX_TIM8_Init+0x16c>)
 800345a:	f004 fcd9 	bl	8007e10 <HAL_TIMEx_ConfigBreakDeadTime>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d001      	beq.n	8003468 <MX_TIM8_Init+0x15c>
  {
    Error_Handler();
 8003464:	f7ff fc84 	bl	8002d70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003468:	4803      	ldr	r0, [pc, #12]	; (8003478 <MX_TIM8_Init+0x16c>)
 800346a:	f000 f891 	bl	8003590 <HAL_TIM_MspPostInit>

}
 800346e:	bf00      	nop
 8003470:	3758      	adds	r7, #88	; 0x58
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	20007a04 	.word	0x20007a04
 800347c:	40010400 	.word	0x40010400

08003480 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b08c      	sub	sp, #48	; 0x30
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003488:	f107 031c 	add.w	r3, r7, #28
 800348c:	2200      	movs	r2, #0
 800348e:	601a      	str	r2, [r3, #0]
 8003490:	605a      	str	r2, [r3, #4]
 8003492:	609a      	str	r2, [r3, #8]
 8003494:	60da      	str	r2, [r3, #12]
 8003496:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034a0:	d10e      	bne.n	80034c0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80034a2:	2300      	movs	r3, #0
 80034a4:	61bb      	str	r3, [r7, #24]
 80034a6:	4b35      	ldr	r3, [pc, #212]	; (800357c <HAL_TIM_Base_MspInit+0xfc>)
 80034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034aa:	4a34      	ldr	r2, [pc, #208]	; (800357c <HAL_TIM_Base_MspInit+0xfc>)
 80034ac:	f043 0301 	orr.w	r3, r3, #1
 80034b0:	6413      	str	r3, [r2, #64]	; 0x40
 80034b2:	4b32      	ldr	r3, [pc, #200]	; (800357c <HAL_TIM_Base_MspInit+0xfc>)
 80034b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	61bb      	str	r3, [r7, #24]
 80034bc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80034be:	e058      	b.n	8003572 <HAL_TIM_Base_MspInit+0xf2>
  else if(tim_baseHandle->Instance==TIM3)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a2e      	ldr	r2, [pc, #184]	; (8003580 <HAL_TIM_Base_MspInit+0x100>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d10e      	bne.n	80034e8 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80034ca:	2300      	movs	r3, #0
 80034cc:	617b      	str	r3, [r7, #20]
 80034ce:	4b2b      	ldr	r3, [pc, #172]	; (800357c <HAL_TIM_Base_MspInit+0xfc>)
 80034d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d2:	4a2a      	ldr	r2, [pc, #168]	; (800357c <HAL_TIM_Base_MspInit+0xfc>)
 80034d4:	f043 0302 	orr.w	r3, r3, #2
 80034d8:	6413      	str	r3, [r2, #64]	; 0x40
 80034da:	4b28      	ldr	r3, [pc, #160]	; (800357c <HAL_TIM_Base_MspInit+0xfc>)
 80034dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	617b      	str	r3, [r7, #20]
 80034e4:	697b      	ldr	r3, [r7, #20]
}
 80034e6:	e044      	b.n	8003572 <HAL_TIM_Base_MspInit+0xf2>
  else if(tim_baseHandle->Instance==TIM5)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a25      	ldr	r2, [pc, #148]	; (8003584 <HAL_TIM_Base_MspInit+0x104>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d12c      	bne.n	800354c <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80034f2:	2300      	movs	r3, #0
 80034f4:	613b      	str	r3, [r7, #16]
 80034f6:	4b21      	ldr	r3, [pc, #132]	; (800357c <HAL_TIM_Base_MspInit+0xfc>)
 80034f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fa:	4a20      	ldr	r2, [pc, #128]	; (800357c <HAL_TIM_Base_MspInit+0xfc>)
 80034fc:	f043 0308 	orr.w	r3, r3, #8
 8003500:	6413      	str	r3, [r2, #64]	; 0x40
 8003502:	4b1e      	ldr	r3, [pc, #120]	; (800357c <HAL_TIM_Base_MspInit+0xfc>)
 8003504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003506:	f003 0308 	and.w	r3, r3, #8
 800350a:	613b      	str	r3, [r7, #16]
 800350c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800350e:	2300      	movs	r3, #0
 8003510:	60fb      	str	r3, [r7, #12]
 8003512:	4b1a      	ldr	r3, [pc, #104]	; (800357c <HAL_TIM_Base_MspInit+0xfc>)
 8003514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003516:	4a19      	ldr	r2, [pc, #100]	; (800357c <HAL_TIM_Base_MspInit+0xfc>)
 8003518:	f043 0301 	orr.w	r3, r3, #1
 800351c:	6313      	str	r3, [r2, #48]	; 0x30
 800351e:	4b17      	ldr	r3, [pc, #92]	; (800357c <HAL_TIM_Base_MspInit+0xfc>)
 8003520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	60fb      	str	r3, [r7, #12]
 8003528:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800352a:	230f      	movs	r3, #15
 800352c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800352e:	2302      	movs	r3, #2
 8003530:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003532:	2300      	movs	r3, #0
 8003534:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003536:	2300      	movs	r3, #0
 8003538:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800353a:	2302      	movs	r3, #2
 800353c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800353e:	f107 031c 	add.w	r3, r7, #28
 8003542:	4619      	mov	r1, r3
 8003544:	4810      	ldr	r0, [pc, #64]	; (8003588 <HAL_TIM_Base_MspInit+0x108>)
 8003546:	f001 fe21 	bl	800518c <HAL_GPIO_Init>
}
 800354a:	e012      	b.n	8003572 <HAL_TIM_Base_MspInit+0xf2>
  else if(tim_baseHandle->Instance==TIM8)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a0e      	ldr	r2, [pc, #56]	; (800358c <HAL_TIM_Base_MspInit+0x10c>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d10d      	bne.n	8003572 <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003556:	2300      	movs	r3, #0
 8003558:	60bb      	str	r3, [r7, #8]
 800355a:	4b08      	ldr	r3, [pc, #32]	; (800357c <HAL_TIM_Base_MspInit+0xfc>)
 800355c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355e:	4a07      	ldr	r2, [pc, #28]	; (800357c <HAL_TIM_Base_MspInit+0xfc>)
 8003560:	f043 0302 	orr.w	r3, r3, #2
 8003564:	6453      	str	r3, [r2, #68]	; 0x44
 8003566:	4b05      	ldr	r3, [pc, #20]	; (800357c <HAL_TIM_Base_MspInit+0xfc>)
 8003568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	60bb      	str	r3, [r7, #8]
 8003570:	68bb      	ldr	r3, [r7, #8]
}
 8003572:	bf00      	nop
 8003574:	3730      	adds	r7, #48	; 0x30
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	40023800 	.word	0x40023800
 8003580:	40000400 	.word	0x40000400
 8003584:	40000c00 	.word	0x40000c00
 8003588:	40020000 	.word	0x40020000
 800358c:	40010400 	.word	0x40010400

08003590 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b08a      	sub	sp, #40	; 0x28
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003598:	f107 0314 	add.w	r3, r7, #20
 800359c:	2200      	movs	r2, #0
 800359e:	601a      	str	r2, [r3, #0]
 80035a0:	605a      	str	r2, [r3, #4]
 80035a2:	609a      	str	r2, [r3, #8]
 80035a4:	60da      	str	r2, [r3, #12]
 80035a6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a21      	ldr	r2, [pc, #132]	; (8003634 <HAL_TIM_MspPostInit+0xa4>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d13c      	bne.n	800362c <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035b2:	2300      	movs	r3, #0
 80035b4:	613b      	str	r3, [r7, #16]
 80035b6:	4b20      	ldr	r3, [pc, #128]	; (8003638 <HAL_TIM_MspPostInit+0xa8>)
 80035b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ba:	4a1f      	ldr	r2, [pc, #124]	; (8003638 <HAL_TIM_MspPostInit+0xa8>)
 80035bc:	f043 0301 	orr.w	r3, r3, #1
 80035c0:	6313      	str	r3, [r2, #48]	; 0x30
 80035c2:	4b1d      	ldr	r3, [pc, #116]	; (8003638 <HAL_TIM_MspPostInit+0xa8>)
 80035c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	613b      	str	r3, [r7, #16]
 80035cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035ce:	2300      	movs	r3, #0
 80035d0:	60fb      	str	r3, [r7, #12]
 80035d2:	4b19      	ldr	r3, [pc, #100]	; (8003638 <HAL_TIM_MspPostInit+0xa8>)
 80035d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d6:	4a18      	ldr	r2, [pc, #96]	; (8003638 <HAL_TIM_MspPostInit+0xa8>)
 80035d8:	f043 0302 	orr.w	r3, r3, #2
 80035dc:	6313      	str	r3, [r2, #48]	; 0x30
 80035de:	4b16      	ldr	r3, [pc, #88]	; (8003638 <HAL_TIM_MspPostInit+0xa8>)
 80035e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	60fb      	str	r3, [r7, #12]
 80035e8:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PA7     ------> TIM8_CH1N
    PB14     ------> TIM8_CH2N
    PB15     ------> TIM8_CH3N
    */
    GPIO_InitStruct.Pin = LED_RED_Pin;
 80035ea:	2380      	movs	r3, #128	; 0x80
 80035ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ee:	2302      	movs	r3, #2
 80035f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f2:	2300      	movs	r3, #0
 80035f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035f6:	2300      	movs	r3, #0
 80035f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80035fa:	2303      	movs	r3, #3
 80035fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80035fe:	f107 0314 	add.w	r3, r7, #20
 8003602:	4619      	mov	r1, r3
 8003604:	480d      	ldr	r0, [pc, #52]	; (800363c <HAL_TIM_MspPostInit+0xac>)
 8003606:	f001 fdc1 	bl	800518c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_BLUE_Pin;
 800360a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800360e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003610:	2302      	movs	r3, #2
 8003612:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003614:	2300      	movs	r3, #0
 8003616:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003618:	2300      	movs	r3, #0
 800361a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800361c:	2303      	movs	r3, #3
 800361e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003620:	f107 0314 	add.w	r3, r7, #20
 8003624:	4619      	mov	r1, r3
 8003626:	4806      	ldr	r0, [pc, #24]	; (8003640 <HAL_TIM_MspPostInit+0xb0>)
 8003628:	f001 fdb0 	bl	800518c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800362c:	bf00      	nop
 800362e:	3728      	adds	r7, #40	; 0x28
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	40010400 	.word	0x40010400
 8003638:	40023800 	.word	0x40023800
 800363c:	40020000 	.word	0x40020000
 8003640:	40020400 	.word	0x40020400

08003644 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003648:	4b11      	ldr	r3, [pc, #68]	; (8003690 <MX_USART1_UART_Init+0x4c>)
 800364a:	4a12      	ldr	r2, [pc, #72]	; (8003694 <MX_USART1_UART_Init+0x50>)
 800364c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800364e:	4b10      	ldr	r3, [pc, #64]	; (8003690 <MX_USART1_UART_Init+0x4c>)
 8003650:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003654:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003656:	4b0e      	ldr	r3, [pc, #56]	; (8003690 <MX_USART1_UART_Init+0x4c>)
 8003658:	2200      	movs	r2, #0
 800365a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800365c:	4b0c      	ldr	r3, [pc, #48]	; (8003690 <MX_USART1_UART_Init+0x4c>)
 800365e:	2200      	movs	r2, #0
 8003660:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003662:	4b0b      	ldr	r3, [pc, #44]	; (8003690 <MX_USART1_UART_Init+0x4c>)
 8003664:	2200      	movs	r2, #0
 8003666:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003668:	4b09      	ldr	r3, [pc, #36]	; (8003690 <MX_USART1_UART_Init+0x4c>)
 800366a:	220c      	movs	r2, #12
 800366c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800366e:	4b08      	ldr	r3, [pc, #32]	; (8003690 <MX_USART1_UART_Init+0x4c>)
 8003670:	2200      	movs	r2, #0
 8003672:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003674:	4b06      	ldr	r3, [pc, #24]	; (8003690 <MX_USART1_UART_Init+0x4c>)
 8003676:	2200      	movs	r2, #0
 8003678:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 800367a:	4805      	ldr	r0, [pc, #20]	; (8003690 <MX_USART1_UART_Init+0x4c>)
 800367c:	f004 fca0 	bl	8007fc0 <HAL_HalfDuplex_Init>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d001      	beq.n	800368a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003686:	f7ff fb73 	bl	8002d70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800368a:	bf00      	nop
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	20007da8 	.word	0x20007da8
 8003694:	40011000 	.word	0x40011000

08003698 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800369c:	4b11      	ldr	r3, [pc, #68]	; (80036e4 <MX_USART3_UART_Init+0x4c>)
 800369e:	4a12      	ldr	r2, [pc, #72]	; (80036e8 <MX_USART3_UART_Init+0x50>)
 80036a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80036a2:	4b10      	ldr	r3, [pc, #64]	; (80036e4 <MX_USART3_UART_Init+0x4c>)
 80036a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80036a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80036aa:	4b0e      	ldr	r3, [pc, #56]	; (80036e4 <MX_USART3_UART_Init+0x4c>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80036b0:	4b0c      	ldr	r3, [pc, #48]	; (80036e4 <MX_USART3_UART_Init+0x4c>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80036b6:	4b0b      	ldr	r3, [pc, #44]	; (80036e4 <MX_USART3_UART_Init+0x4c>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80036bc:	4b09      	ldr	r3, [pc, #36]	; (80036e4 <MX_USART3_UART_Init+0x4c>)
 80036be:	220c      	movs	r2, #12
 80036c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036c2:	4b08      	ldr	r3, [pc, #32]	; (80036e4 <MX_USART3_UART_Init+0x4c>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80036c8:	4b06      	ldr	r3, [pc, #24]	; (80036e4 <MX_USART3_UART_Init+0x4c>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80036ce:	4805      	ldr	r0, [pc, #20]	; (80036e4 <MX_USART3_UART_Init+0x4c>)
 80036d0:	f004 fc29 	bl	8007f26 <HAL_UART_Init>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d001      	beq.n	80036de <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80036da:	f7ff fb49 	bl	8002d70 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80036de:	bf00      	nop
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	20007be4 	.word	0x20007be4
 80036e8:	40004800 	.word	0x40004800

080036ec <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80036f0:	4b11      	ldr	r3, [pc, #68]	; (8003738 <MX_USART6_UART_Init+0x4c>)
 80036f2:	4a12      	ldr	r2, [pc, #72]	; (800373c <MX_USART6_UART_Init+0x50>)
 80036f4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80036f6:	4b10      	ldr	r3, [pc, #64]	; (8003738 <MX_USART6_UART_Init+0x4c>)
 80036f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80036fc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80036fe:	4b0e      	ldr	r3, [pc, #56]	; (8003738 <MX_USART6_UART_Init+0x4c>)
 8003700:	2200      	movs	r2, #0
 8003702:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003704:	4b0c      	ldr	r3, [pc, #48]	; (8003738 <MX_USART6_UART_Init+0x4c>)
 8003706:	2200      	movs	r2, #0
 8003708:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800370a:	4b0b      	ldr	r3, [pc, #44]	; (8003738 <MX_USART6_UART_Init+0x4c>)
 800370c:	2200      	movs	r2, #0
 800370e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003710:	4b09      	ldr	r3, [pc, #36]	; (8003738 <MX_USART6_UART_Init+0x4c>)
 8003712:	220c      	movs	r2, #12
 8003714:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003716:	4b08      	ldr	r3, [pc, #32]	; (8003738 <MX_USART6_UART_Init+0x4c>)
 8003718:	2200      	movs	r2, #0
 800371a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800371c:	4b06      	ldr	r3, [pc, #24]	; (8003738 <MX_USART6_UART_Init+0x4c>)
 800371e:	2200      	movs	r2, #0
 8003720:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003722:	4805      	ldr	r0, [pc, #20]	; (8003738 <MX_USART6_UART_Init+0x4c>)
 8003724:	f004 fbff 	bl	8007f26 <HAL_UART_Init>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d001      	beq.n	8003732 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800372e:	f7ff fb1f 	bl	8002d70 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003732:	bf00      	nop
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	20007dec 	.word	0x20007dec
 800373c:	40011400 	.word	0x40011400

08003740 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b08e      	sub	sp, #56	; 0x38
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003748:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800374c:	2200      	movs	r2, #0
 800374e:	601a      	str	r2, [r3, #0]
 8003750:	605a      	str	r2, [r3, #4]
 8003752:	609a      	str	r2, [r3, #8]
 8003754:	60da      	str	r2, [r3, #12]
 8003756:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a4b      	ldr	r2, [pc, #300]	; (800388c <HAL_UART_MspInit+0x14c>)
 800375e:	4293      	cmp	r3, r2
 8003760:	f040 80a2 	bne.w	80038a8 <HAL_UART_MspInit+0x168>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003764:	2300      	movs	r3, #0
 8003766:	623b      	str	r3, [r7, #32]
 8003768:	4b49      	ldr	r3, [pc, #292]	; (8003890 <HAL_UART_MspInit+0x150>)
 800376a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376c:	4a48      	ldr	r2, [pc, #288]	; (8003890 <HAL_UART_MspInit+0x150>)
 800376e:	f043 0310 	orr.w	r3, r3, #16
 8003772:	6453      	str	r3, [r2, #68]	; 0x44
 8003774:	4b46      	ldr	r3, [pc, #280]	; (8003890 <HAL_UART_MspInit+0x150>)
 8003776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003778:	f003 0310 	and.w	r3, r3, #16
 800377c:	623b      	str	r3, [r7, #32]
 800377e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003780:	2300      	movs	r3, #0
 8003782:	61fb      	str	r3, [r7, #28]
 8003784:	4b42      	ldr	r3, [pc, #264]	; (8003890 <HAL_UART_MspInit+0x150>)
 8003786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003788:	4a41      	ldr	r2, [pc, #260]	; (8003890 <HAL_UART_MspInit+0x150>)
 800378a:	f043 0301 	orr.w	r3, r3, #1
 800378e:	6313      	str	r3, [r2, #48]	; 0x30
 8003790:	4b3f      	ldr	r3, [pc, #252]	; (8003890 <HAL_UART_MspInit+0x150>)
 8003792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003794:	f003 0301 	and.w	r3, r3, #1
 8003798:	61fb      	str	r3, [r7, #28]
 800379a:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = SERVO_TX_Pin;
 800379c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80037a2:	2312      	movs	r3, #18
 80037a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80037a6:	2301      	movs	r3, #1
 80037a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037aa:	2303      	movs	r3, #3
 80037ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80037ae:	2307      	movs	r3, #7
 80037b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SERVO_TX_GPIO_Port, &GPIO_InitStruct);
 80037b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037b6:	4619      	mov	r1, r3
 80037b8:	4836      	ldr	r0, [pc, #216]	; (8003894 <HAL_UART_MspInit+0x154>)
 80037ba:	f001 fce7 	bl	800518c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 80037be:	4b36      	ldr	r3, [pc, #216]	; (8003898 <HAL_UART_MspInit+0x158>)
 80037c0:	4a36      	ldr	r2, [pc, #216]	; (800389c <HAL_UART_MspInit+0x15c>)
 80037c2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80037c4:	4b34      	ldr	r3, [pc, #208]	; (8003898 <HAL_UART_MspInit+0x158>)
 80037c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80037ca:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80037cc:	4b32      	ldr	r3, [pc, #200]	; (8003898 <HAL_UART_MspInit+0x158>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037d2:	4b31      	ldr	r3, [pc, #196]	; (8003898 <HAL_UART_MspInit+0x158>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80037d8:	4b2f      	ldr	r3, [pc, #188]	; (8003898 <HAL_UART_MspInit+0x158>)
 80037da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037de:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80037e0:	4b2d      	ldr	r3, [pc, #180]	; (8003898 <HAL_UART_MspInit+0x158>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80037e6:	4b2c      	ldr	r3, [pc, #176]	; (8003898 <HAL_UART_MspInit+0x158>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80037ec:	4b2a      	ldr	r3, [pc, #168]	; (8003898 <HAL_UART_MspInit+0x158>)
 80037ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037f2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80037f4:	4b28      	ldr	r3, [pc, #160]	; (8003898 <HAL_UART_MspInit+0x158>)
 80037f6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80037fa:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80037fc:	4b26      	ldr	r3, [pc, #152]	; (8003898 <HAL_UART_MspInit+0x158>)
 80037fe:	2200      	movs	r2, #0
 8003800:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003802:	4825      	ldr	r0, [pc, #148]	; (8003898 <HAL_UART_MspInit+0x158>)
 8003804:	f001 f8c0 	bl	8004988 <HAL_DMA_Init>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d001      	beq.n	8003812 <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 800380e:	f7ff faaf 	bl	8002d70 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a20      	ldr	r2, [pc, #128]	; (8003898 <HAL_UART_MspInit+0x158>)
 8003816:	639a      	str	r2, [r3, #56]	; 0x38
 8003818:	4a1f      	ldr	r2, [pc, #124]	; (8003898 <HAL_UART_MspInit+0x158>)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800381e:	4b20      	ldr	r3, [pc, #128]	; (80038a0 <HAL_UART_MspInit+0x160>)
 8003820:	4a20      	ldr	r2, [pc, #128]	; (80038a4 <HAL_UART_MspInit+0x164>)
 8003822:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8003824:	4b1e      	ldr	r3, [pc, #120]	; (80038a0 <HAL_UART_MspInit+0x160>)
 8003826:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800382a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800382c:	4b1c      	ldr	r3, [pc, #112]	; (80038a0 <HAL_UART_MspInit+0x160>)
 800382e:	2240      	movs	r2, #64	; 0x40
 8003830:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003832:	4b1b      	ldr	r3, [pc, #108]	; (80038a0 <HAL_UART_MspInit+0x160>)
 8003834:	2200      	movs	r2, #0
 8003836:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003838:	4b19      	ldr	r3, [pc, #100]	; (80038a0 <HAL_UART_MspInit+0x160>)
 800383a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800383e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003840:	4b17      	ldr	r3, [pc, #92]	; (80038a0 <HAL_UART_MspInit+0x160>)
 8003842:	2200      	movs	r2, #0
 8003844:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003846:	4b16      	ldr	r3, [pc, #88]	; (80038a0 <HAL_UART_MspInit+0x160>)
 8003848:	2200      	movs	r2, #0
 800384a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800384c:	4b14      	ldr	r3, [pc, #80]	; (80038a0 <HAL_UART_MspInit+0x160>)
 800384e:	2200      	movs	r2, #0
 8003850:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003852:	4b13      	ldr	r3, [pc, #76]	; (80038a0 <HAL_UART_MspInit+0x160>)
 8003854:	2200      	movs	r2, #0
 8003856:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003858:	4b11      	ldr	r3, [pc, #68]	; (80038a0 <HAL_UART_MspInit+0x160>)
 800385a:	2200      	movs	r2, #0
 800385c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800385e:	4810      	ldr	r0, [pc, #64]	; (80038a0 <HAL_UART_MspInit+0x160>)
 8003860:	f001 f892 	bl	8004988 <HAL_DMA_Init>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 800386a:	f7ff fa81 	bl	8002d70 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a0b      	ldr	r2, [pc, #44]	; (80038a0 <HAL_UART_MspInit+0x160>)
 8003872:	635a      	str	r2, [r3, #52]	; 0x34
 8003874:	4a0a      	ldr	r2, [pc, #40]	; (80038a0 <HAL_UART_MspInit+0x160>)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800387a:	2200      	movs	r2, #0
 800387c:	2105      	movs	r1, #5
 800387e:	2025      	movs	r0, #37	; 0x25
 8003880:	f001 f858 	bl	8004934 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003884:	2025      	movs	r0, #37	; 0x25
 8003886:	f001 f871 	bl	800496c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800388a:	e16d      	b.n	8003b68 <HAL_UART_MspInit+0x428>
 800388c:	40011000 	.word	0x40011000
 8003890:	40023800 	.word	0x40023800
 8003894:	40020000 	.word	0x40020000
 8003898:	20007d48 	.word	0x20007d48
 800389c:	40026488 	.word	0x40026488
 80038a0:	20007c88 	.word	0x20007c88
 80038a4:	400264b8 	.word	0x400264b8
  else if(uartHandle->Instance==USART3)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a5a      	ldr	r2, [pc, #360]	; (8003a18 <HAL_UART_MspInit+0x2d8>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	f040 80c2 	bne.w	8003a38 <HAL_UART_MspInit+0x2f8>
    __HAL_RCC_USART3_CLK_ENABLE();
 80038b4:	2300      	movs	r3, #0
 80038b6:	61bb      	str	r3, [r7, #24]
 80038b8:	4b58      	ldr	r3, [pc, #352]	; (8003a1c <HAL_UART_MspInit+0x2dc>)
 80038ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038bc:	4a57      	ldr	r2, [pc, #348]	; (8003a1c <HAL_UART_MspInit+0x2dc>)
 80038be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038c2:	6413      	str	r3, [r2, #64]	; 0x40
 80038c4:	4b55      	ldr	r3, [pc, #340]	; (8003a1c <HAL_UART_MspInit+0x2dc>)
 80038c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038cc:	61bb      	str	r3, [r7, #24]
 80038ce:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038d0:	2300      	movs	r3, #0
 80038d2:	617b      	str	r3, [r7, #20]
 80038d4:	4b51      	ldr	r3, [pc, #324]	; (8003a1c <HAL_UART_MspInit+0x2dc>)
 80038d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d8:	4a50      	ldr	r2, [pc, #320]	; (8003a1c <HAL_UART_MspInit+0x2dc>)
 80038da:	f043 0304 	orr.w	r3, r3, #4
 80038de:	6313      	str	r3, [r2, #48]	; 0x30
 80038e0:	4b4e      	ldr	r3, [pc, #312]	; (8003a1c <HAL_UART_MspInit+0x2dc>)
 80038e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e4:	f003 0304 	and.w	r3, r3, #4
 80038e8:	617b      	str	r3, [r7, #20]
 80038ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038ec:	2300      	movs	r3, #0
 80038ee:	613b      	str	r3, [r7, #16]
 80038f0:	4b4a      	ldr	r3, [pc, #296]	; (8003a1c <HAL_UART_MspInit+0x2dc>)
 80038f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f4:	4a49      	ldr	r2, [pc, #292]	; (8003a1c <HAL_UART_MspInit+0x2dc>)
 80038f6:	f043 0302 	orr.w	r3, r3, #2
 80038fa:	6313      	str	r3, [r2, #48]	; 0x30
 80038fc:	4b47      	ldr	r3, [pc, #284]	; (8003a1c <HAL_UART_MspInit+0x2dc>)
 80038fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	613b      	str	r3, [r7, #16]
 8003906:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = DEBUG_RX_Pin;
 8003908:	2320      	movs	r3, #32
 800390a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800390c:	2302      	movs	r3, #2
 800390e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003910:	2300      	movs	r3, #0
 8003912:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003914:	2303      	movs	r3, #3
 8003916:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003918:	2307      	movs	r3, #7
 800391a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DEBUG_RX_GPIO_Port, &GPIO_InitStruct);
 800391c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003920:	4619      	mov	r1, r3
 8003922:	483f      	ldr	r0, [pc, #252]	; (8003a20 <HAL_UART_MspInit+0x2e0>)
 8003924:	f001 fc32 	bl	800518c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DEBUG_TX_Pin;
 8003928:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800392c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800392e:	2302      	movs	r3, #2
 8003930:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003932:	2300      	movs	r3, #0
 8003934:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003936:	2303      	movs	r3, #3
 8003938:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800393a:	2307      	movs	r3, #7
 800393c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DEBUG_TX_GPIO_Port, &GPIO_InitStruct);
 800393e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003942:	4619      	mov	r1, r3
 8003944:	4837      	ldr	r0, [pc, #220]	; (8003a24 <HAL_UART_MspInit+0x2e4>)
 8003946:	f001 fc21 	bl	800518c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800394a:	4b37      	ldr	r3, [pc, #220]	; (8003a28 <HAL_UART_MspInit+0x2e8>)
 800394c:	4a37      	ldr	r2, [pc, #220]	; (8003a2c <HAL_UART_MspInit+0x2ec>)
 800394e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003950:	4b35      	ldr	r3, [pc, #212]	; (8003a28 <HAL_UART_MspInit+0x2e8>)
 8003952:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003956:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003958:	4b33      	ldr	r3, [pc, #204]	; (8003a28 <HAL_UART_MspInit+0x2e8>)
 800395a:	2200      	movs	r2, #0
 800395c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800395e:	4b32      	ldr	r3, [pc, #200]	; (8003a28 <HAL_UART_MspInit+0x2e8>)
 8003960:	2200      	movs	r2, #0
 8003962:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003964:	4b30      	ldr	r3, [pc, #192]	; (8003a28 <HAL_UART_MspInit+0x2e8>)
 8003966:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800396a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800396c:	4b2e      	ldr	r3, [pc, #184]	; (8003a28 <HAL_UART_MspInit+0x2e8>)
 800396e:	2200      	movs	r2, #0
 8003970:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003972:	4b2d      	ldr	r3, [pc, #180]	; (8003a28 <HAL_UART_MspInit+0x2e8>)
 8003974:	2200      	movs	r2, #0
 8003976:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8003978:	4b2b      	ldr	r3, [pc, #172]	; (8003a28 <HAL_UART_MspInit+0x2e8>)
 800397a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800397e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003980:	4b29      	ldr	r3, [pc, #164]	; (8003a28 <HAL_UART_MspInit+0x2e8>)
 8003982:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003986:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003988:	4b27      	ldr	r3, [pc, #156]	; (8003a28 <HAL_UART_MspInit+0x2e8>)
 800398a:	2200      	movs	r2, #0
 800398c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800398e:	4826      	ldr	r0, [pc, #152]	; (8003a28 <HAL_UART_MspInit+0x2e8>)
 8003990:	f000 fffa 	bl	8004988 <HAL_DMA_Init>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <HAL_UART_MspInit+0x25e>
      Error_Handler();
 800399a:	f7ff f9e9 	bl	8002d70 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a21      	ldr	r2, [pc, #132]	; (8003a28 <HAL_UART_MspInit+0x2e8>)
 80039a2:	639a      	str	r2, [r3, #56]	; 0x38
 80039a4:	4a20      	ldr	r2, [pc, #128]	; (8003a28 <HAL_UART_MspInit+0x2e8>)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80039aa:	4b21      	ldr	r3, [pc, #132]	; (8003a30 <HAL_UART_MspInit+0x2f0>)
 80039ac:	4a21      	ldr	r2, [pc, #132]	; (8003a34 <HAL_UART_MspInit+0x2f4>)
 80039ae:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80039b0:	4b1f      	ldr	r3, [pc, #124]	; (8003a30 <HAL_UART_MspInit+0x2f0>)
 80039b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80039b6:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80039b8:	4b1d      	ldr	r3, [pc, #116]	; (8003a30 <HAL_UART_MspInit+0x2f0>)
 80039ba:	2240      	movs	r2, #64	; 0x40
 80039bc:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80039be:	4b1c      	ldr	r3, [pc, #112]	; (8003a30 <HAL_UART_MspInit+0x2f0>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80039c4:	4b1a      	ldr	r3, [pc, #104]	; (8003a30 <HAL_UART_MspInit+0x2f0>)
 80039c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039ca:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039cc:	4b18      	ldr	r3, [pc, #96]	; (8003a30 <HAL_UART_MspInit+0x2f0>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039d2:	4b17      	ldr	r3, [pc, #92]	; (8003a30 <HAL_UART_MspInit+0x2f0>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80039d8:	4b15      	ldr	r3, [pc, #84]	; (8003a30 <HAL_UART_MspInit+0x2f0>)
 80039da:	2200      	movs	r2, #0
 80039dc:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80039de:	4b14      	ldr	r3, [pc, #80]	; (8003a30 <HAL_UART_MspInit+0x2f0>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80039e4:	4b12      	ldr	r3, [pc, #72]	; (8003a30 <HAL_UART_MspInit+0x2f0>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80039ea:	4811      	ldr	r0, [pc, #68]	; (8003a30 <HAL_UART_MspInit+0x2f0>)
 80039ec:	f000 ffcc 	bl	8004988 <HAL_DMA_Init>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d001      	beq.n	80039fa <HAL_UART_MspInit+0x2ba>
      Error_Handler();
 80039f6:	f7ff f9bb 	bl	8002d70 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a0c      	ldr	r2, [pc, #48]	; (8003a30 <HAL_UART_MspInit+0x2f0>)
 80039fe:	635a      	str	r2, [r3, #52]	; 0x34
 8003a00:	4a0b      	ldr	r2, [pc, #44]	; (8003a30 <HAL_UART_MspInit+0x2f0>)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003a06:	2200      	movs	r2, #0
 8003a08:	2105      	movs	r1, #5
 8003a0a:	2027      	movs	r0, #39	; 0x27
 8003a0c:	f000 ff92 	bl	8004934 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003a10:	2027      	movs	r0, #39	; 0x27
 8003a12:	f000 ffab 	bl	800496c <HAL_NVIC_EnableIRQ>
}
 8003a16:	e0a7      	b.n	8003b68 <HAL_UART_MspInit+0x428>
 8003a18:	40004800 	.word	0x40004800
 8003a1c:	40023800 	.word	0x40023800
 8003a20:	40020800 	.word	0x40020800
 8003a24:	40020400 	.word	0x40020400
 8003a28:	20007b84 	.word	0x20007b84
 8003a2c:	40026028 	.word	0x40026028
 8003a30:	20007c28 	.word	0x20007c28
 8003a34:	40026058 	.word	0x40026058
  else if(uartHandle->Instance==USART6)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a4c      	ldr	r2, [pc, #304]	; (8003b70 <HAL_UART_MspInit+0x430>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	f040 8092 	bne.w	8003b68 <HAL_UART_MspInit+0x428>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003a44:	2300      	movs	r3, #0
 8003a46:	60fb      	str	r3, [r7, #12]
 8003a48:	4b4a      	ldr	r3, [pc, #296]	; (8003b74 <HAL_UART_MspInit+0x434>)
 8003a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a4c:	4a49      	ldr	r2, [pc, #292]	; (8003b74 <HAL_UART_MspInit+0x434>)
 8003a4e:	f043 0320 	orr.w	r3, r3, #32
 8003a52:	6453      	str	r3, [r2, #68]	; 0x44
 8003a54:	4b47      	ldr	r3, [pc, #284]	; (8003b74 <HAL_UART_MspInit+0x434>)
 8003a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a58:	f003 0320 	and.w	r3, r3, #32
 8003a5c:	60fb      	str	r3, [r7, #12]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a60:	2300      	movs	r3, #0
 8003a62:	60bb      	str	r3, [r7, #8]
 8003a64:	4b43      	ldr	r3, [pc, #268]	; (8003b74 <HAL_UART_MspInit+0x434>)
 8003a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a68:	4a42      	ldr	r2, [pc, #264]	; (8003b74 <HAL_UART_MspInit+0x434>)
 8003a6a:	f043 0304 	orr.w	r3, r3, #4
 8003a6e:	6313      	str	r3, [r2, #48]	; 0x30
 8003a70:	4b40      	ldr	r3, [pc, #256]	; (8003b74 <HAL_UART_MspInit+0x434>)
 8003a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a74:	f003 0304 	and.w	r3, r3, #4
 8003a78:	60bb      	str	r3, [r7, #8]
 8003a7a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CM4_TX_Pin|CM4_RX_Pin;
 8003a7c:	23c0      	movs	r3, #192	; 0xc0
 8003a7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a80:	2302      	movs	r3, #2
 8003a82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a84:	2300      	movs	r3, #0
 8003a86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003a8c:	2308      	movs	r3, #8
 8003a8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a94:	4619      	mov	r1, r3
 8003a96:	4838      	ldr	r0, [pc, #224]	; (8003b78 <HAL_UART_MspInit+0x438>)
 8003a98:	f001 fb78 	bl	800518c <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream2;
 8003a9c:	4b37      	ldr	r3, [pc, #220]	; (8003b7c <HAL_UART_MspInit+0x43c>)
 8003a9e:	4a38      	ldr	r2, [pc, #224]	; (8003b80 <HAL_UART_MspInit+0x440>)
 8003aa0:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8003aa2:	4b36      	ldr	r3, [pc, #216]	; (8003b7c <HAL_UART_MspInit+0x43c>)
 8003aa4:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8003aa8:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003aaa:	4b34      	ldr	r3, [pc, #208]	; (8003b7c <HAL_UART_MspInit+0x43c>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ab0:	4b32      	ldr	r3, [pc, #200]	; (8003b7c <HAL_UART_MspInit+0x43c>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003ab6:	4b31      	ldr	r3, [pc, #196]	; (8003b7c <HAL_UART_MspInit+0x43c>)
 8003ab8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003abc:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003abe:	4b2f      	ldr	r3, [pc, #188]	; (8003b7c <HAL_UART_MspInit+0x43c>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ac4:	4b2d      	ldr	r3, [pc, #180]	; (8003b7c <HAL_UART_MspInit+0x43c>)
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8003aca:	4b2c      	ldr	r3, [pc, #176]	; (8003b7c <HAL_UART_MspInit+0x43c>)
 8003acc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ad0:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003ad2:	4b2a      	ldr	r3, [pc, #168]	; (8003b7c <HAL_UART_MspInit+0x43c>)
 8003ad4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003ad8:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ada:	4b28      	ldr	r3, [pc, #160]	; (8003b7c <HAL_UART_MspInit+0x43c>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8003ae0:	4826      	ldr	r0, [pc, #152]	; (8003b7c <HAL_UART_MspInit+0x43c>)
 8003ae2:	f000 ff51 	bl	8004988 <HAL_DMA_Init>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d001      	beq.n	8003af0 <HAL_UART_MspInit+0x3b0>
      Error_Handler();
 8003aec:	f7ff f940 	bl	8002d70 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a22      	ldr	r2, [pc, #136]	; (8003b7c <HAL_UART_MspInit+0x43c>)
 8003af4:	639a      	str	r2, [r3, #56]	; 0x38
 8003af6:	4a21      	ldr	r2, [pc, #132]	; (8003b7c <HAL_UART_MspInit+0x43c>)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8003afc:	4b21      	ldr	r3, [pc, #132]	; (8003b84 <HAL_UART_MspInit+0x444>)
 8003afe:	4a22      	ldr	r2, [pc, #136]	; (8003b88 <HAL_UART_MspInit+0x448>)
 8003b00:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8003b02:	4b20      	ldr	r3, [pc, #128]	; (8003b84 <HAL_UART_MspInit+0x444>)
 8003b04:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8003b08:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003b0a:	4b1e      	ldr	r3, [pc, #120]	; (8003b84 <HAL_UART_MspInit+0x444>)
 8003b0c:	2240      	movs	r2, #64	; 0x40
 8003b0e:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b10:	4b1c      	ldr	r3, [pc, #112]	; (8003b84 <HAL_UART_MspInit+0x444>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003b16:	4b1b      	ldr	r3, [pc, #108]	; (8003b84 <HAL_UART_MspInit+0x444>)
 8003b18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b1c:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b1e:	4b19      	ldr	r3, [pc, #100]	; (8003b84 <HAL_UART_MspInit+0x444>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b24:	4b17      	ldr	r3, [pc, #92]	; (8003b84 <HAL_UART_MspInit+0x444>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8003b2a:	4b16      	ldr	r3, [pc, #88]	; (8003b84 <HAL_UART_MspInit+0x444>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003b30:	4b14      	ldr	r3, [pc, #80]	; (8003b84 <HAL_UART_MspInit+0x444>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b36:	4b13      	ldr	r3, [pc, #76]	; (8003b84 <HAL_UART_MspInit+0x444>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8003b3c:	4811      	ldr	r0, [pc, #68]	; (8003b84 <HAL_UART_MspInit+0x444>)
 8003b3e:	f000 ff23 	bl	8004988 <HAL_DMA_Init>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d001      	beq.n	8003b4c <HAL_UART_MspInit+0x40c>
      Error_Handler();
 8003b48:	f7ff f912 	bl	8002d70 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a0d      	ldr	r2, [pc, #52]	; (8003b84 <HAL_UART_MspInit+0x444>)
 8003b50:	635a      	str	r2, [r3, #52]	; 0x34
 8003b52:	4a0c      	ldr	r2, [pc, #48]	; (8003b84 <HAL_UART_MspInit+0x444>)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8003b58:	2200      	movs	r2, #0
 8003b5a:	2105      	movs	r1, #5
 8003b5c:	2047      	movs	r0, #71	; 0x47
 8003b5e:	f000 fee9 	bl	8004934 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003b62:	2047      	movs	r0, #71	; 0x47
 8003b64:	f000 ff02 	bl	800496c <HAL_NVIC_EnableIRQ>
}
 8003b68:	bf00      	nop
 8003b6a:	3738      	adds	r7, #56	; 0x38
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	40011400 	.word	0x40011400
 8003b74:	40023800 	.word	0x40023800
 8003b78:	40020800 	.word	0x40020800
 8003b7c:	20007b24 	.word	0x20007b24
 8003b80:	40026440 	.word	0x40026440
 8003b84:	20007ce8 	.word	0x20007ce8
 8003b88:	400264a0 	.word	0x400264a0

08003b8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003b8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003bc4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003b90:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003b92:	e003      	b.n	8003b9c <LoopCopyDataInit>

08003b94 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003b94:	4b0c      	ldr	r3, [pc, #48]	; (8003bc8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003b96:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003b98:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003b9a:	3104      	adds	r1, #4

08003b9c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003b9c:	480b      	ldr	r0, [pc, #44]	; (8003bcc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003b9e:	4b0c      	ldr	r3, [pc, #48]	; (8003bd0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003ba0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003ba2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003ba4:	d3f6      	bcc.n	8003b94 <CopyDataInit>
  ldr  r2, =_sbss
 8003ba6:	4a0b      	ldr	r2, [pc, #44]	; (8003bd4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003ba8:	e002      	b.n	8003bb0 <LoopFillZerobss>

08003baa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003baa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003bac:	f842 3b04 	str.w	r3, [r2], #4

08003bb0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003bb0:	4b09      	ldr	r3, [pc, #36]	; (8003bd8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003bb2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003bb4:	d3f9      	bcc.n	8003baa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003bb6:	f7ff faab 	bl	8003110 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003bba:	f007 fbd5 	bl	800b368 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003bbe:	f7ff f831 	bl	8002c24 <main>
  bx  lr    
 8003bc2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003bc4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003bc8:	0800b480 	.word	0x0800b480
  ldr  r0, =_sdata
 8003bcc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003bd0:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8003bd4:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8003bd8:	20007e34 	.word	0x20007e34

08003bdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003bdc:	e7fe      	b.n	8003bdc <ADC_IRQHandler>
	...

08003be0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003be4:	4b0e      	ldr	r3, [pc, #56]	; (8003c20 <HAL_Init+0x40>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a0d      	ldr	r2, [pc, #52]	; (8003c20 <HAL_Init+0x40>)
 8003bea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003bf0:	4b0b      	ldr	r3, [pc, #44]	; (8003c20 <HAL_Init+0x40>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a0a      	ldr	r2, [pc, #40]	; (8003c20 <HAL_Init+0x40>)
 8003bf6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003bfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003bfc:	4b08      	ldr	r3, [pc, #32]	; (8003c20 <HAL_Init+0x40>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a07      	ldr	r2, [pc, #28]	; (8003c20 <HAL_Init+0x40>)
 8003c02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c08:	2003      	movs	r0, #3
 8003c0a:	f000 fe88 	bl	800491e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c0e:	2000      	movs	r0, #0
 8003c10:	f7ff f98e 	bl	8002f30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c14:	f7ff f960 	bl	8002ed8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	40023c00 	.word	0x40023c00

08003c24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c24:	b480      	push	{r7}
 8003c26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c28:	4b06      	ldr	r3, [pc, #24]	; (8003c44 <HAL_IncTick+0x20>)
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	4b06      	ldr	r3, [pc, #24]	; (8003c48 <HAL_IncTick+0x24>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4413      	add	r3, r2
 8003c34:	4a04      	ldr	r2, [pc, #16]	; (8003c48 <HAL_IncTick+0x24>)
 8003c36:	6013      	str	r3, [r2, #0]
}
 8003c38:	bf00      	nop
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	20000074 	.word	0x20000074
 8003c48:	20007e30 	.word	0x20007e30

08003c4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0
  return uwTick;
 8003c50:	4b03      	ldr	r3, [pc, #12]	; (8003c60 <HAL_GetTick+0x14>)
 8003c52:	681b      	ldr	r3, [r3, #0]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	20007e30 	.word	0x20007e30

08003c64 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e0ed      	b.n	8003e52 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d102      	bne.n	8003c88 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7fe fe4e 	bl	8002924 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f022 0202 	bic.w	r2, r2, #2
 8003c96:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c98:	f7ff ffd8 	bl	8003c4c <HAL_GetTick>
 8003c9c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003c9e:	e012      	b.n	8003cc6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003ca0:	f7ff ffd4 	bl	8003c4c <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	2b0a      	cmp	r3, #10
 8003cac:	d90b      	bls.n	8003cc6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2205      	movs	r2, #5
 8003cbe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e0c5      	b.n	8003e52 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1e5      	bne.n	8003ca0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f042 0201 	orr.w	r2, r2, #1
 8003ce2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ce4:	f7ff ffb2 	bl	8003c4c <HAL_GetTick>
 8003ce8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003cea:	e012      	b.n	8003d12 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003cec:	f7ff ffae 	bl	8003c4c <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b0a      	cmp	r3, #10
 8003cf8:	d90b      	bls.n	8003d12 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2205      	movs	r2, #5
 8003d0a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e09f      	b.n	8003e52 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f003 0301 	and.w	r3, r3, #1
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d0e5      	beq.n	8003cec <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	7e1b      	ldrb	r3, [r3, #24]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d108      	bne.n	8003d3a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d36:	601a      	str	r2, [r3, #0]
 8003d38:	e007      	b.n	8003d4a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d48:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	7e5b      	ldrb	r3, [r3, #25]
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d108      	bne.n	8003d64 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d60:	601a      	str	r2, [r3, #0]
 8003d62:	e007      	b.n	8003d74 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d72:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	7e9b      	ldrb	r3, [r3, #26]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d108      	bne.n	8003d8e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f042 0220 	orr.w	r2, r2, #32
 8003d8a:	601a      	str	r2, [r3, #0]
 8003d8c:	e007      	b.n	8003d9e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 0220 	bic.w	r2, r2, #32
 8003d9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	7edb      	ldrb	r3, [r3, #27]
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d108      	bne.n	8003db8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f022 0210 	bic.w	r2, r2, #16
 8003db4:	601a      	str	r2, [r3, #0]
 8003db6:	e007      	b.n	8003dc8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f042 0210 	orr.w	r2, r2, #16
 8003dc6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	7f1b      	ldrb	r3, [r3, #28]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d108      	bne.n	8003de2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f042 0208 	orr.w	r2, r2, #8
 8003dde:	601a      	str	r2, [r3, #0]
 8003de0:	e007      	b.n	8003df2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f022 0208 	bic.w	r2, r2, #8
 8003df0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	7f5b      	ldrb	r3, [r3, #29]
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d108      	bne.n	8003e0c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f042 0204 	orr.w	r2, r2, #4
 8003e08:	601a      	str	r2, [r3, #0]
 8003e0a:	e007      	b.n	8003e1c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f022 0204 	bic.w	r2, r2, #4
 8003e1a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689a      	ldr	r2, [r3, #8]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	431a      	orrs	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	431a      	orrs	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	695b      	ldr	r3, [r3, #20]
 8003e30:	ea42 0103 	orr.w	r1, r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	1e5a      	subs	r2, r3, #1
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3710      	adds	r7, #16
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
	...

08003e5c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b087      	sub	sp, #28
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e72:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003e74:	7cfb      	ldrb	r3, [r7, #19]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d003      	beq.n	8003e82 <HAL_CAN_ConfigFilter+0x26>
 8003e7a:	7cfb      	ldrb	r3, [r7, #19]
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	f040 80be 	bne.w	8003ffe <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003e82:	4b65      	ldr	r3, [pc, #404]	; (8004018 <HAL_CAN_ConfigFilter+0x1bc>)
 8003e84:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003e8c:	f043 0201 	orr.w	r2, r3, #1
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003e9c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb0:	021b      	lsls	r3, r3, #8
 8003eb2:	431a      	orrs	r2, r3
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	f003 031f 	and.w	r3, r3, #31
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	43db      	mvns	r3, r3
 8003ed4:	401a      	ands	r2, r3
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	69db      	ldr	r3, [r3, #28]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d123      	bne.n	8003f2c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	43db      	mvns	r3, r3
 8003eee:	401a      	ands	r2, r3
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003f02:	683a      	ldr	r2, [r7, #0]
 8003f04:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003f06:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	3248      	adds	r2, #72	; 0x48
 8003f0c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003f20:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003f22:	6979      	ldr	r1, [r7, #20]
 8003f24:	3348      	adds	r3, #72	; 0x48
 8003f26:	00db      	lsls	r3, r3, #3
 8003f28:	440b      	add	r3, r1
 8003f2a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	69db      	ldr	r3, [r3, #28]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d122      	bne.n	8003f7a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	431a      	orrs	r2, r3
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003f50:	683a      	ldr	r2, [r7, #0]
 8003f52:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003f54:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	3248      	adds	r2, #72	; 0x48
 8003f5a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003f6e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003f70:	6979      	ldr	r1, [r7, #20]
 8003f72:	3348      	adds	r3, #72	; 0x48
 8003f74:	00db      	lsls	r3, r3, #3
 8003f76:	440b      	add	r3, r1
 8003f78:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d109      	bne.n	8003f96 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	43db      	mvns	r3, r3
 8003f8c:	401a      	ands	r2, r3
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003f94:	e007      	b.n	8003fa6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d109      	bne.n	8003fc2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	43db      	mvns	r3, r3
 8003fb8:	401a      	ands	r2, r3
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003fc0:	e007      	b.n	8003fd2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	431a      	orrs	r2, r3
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d107      	bne.n	8003fea <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	431a      	orrs	r2, r3
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003ff0:	f023 0201 	bic.w	r2, r3, #1
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	e006      	b.n	800400c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004002:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
  }
}
 800400c:	4618      	mov	r0, r3
 800400e:	371c      	adds	r7, #28
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr
 8004018:	40006400 	.word	0x40006400

0800401c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f893 3020 	ldrb.w	r3, [r3, #32]
 800402a:	b2db      	uxtb	r3, r3
 800402c:	2b01      	cmp	r3, #1
 800402e:	d12e      	bne.n	800408e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2202      	movs	r2, #2
 8004034:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f022 0201 	bic.w	r2, r2, #1
 8004046:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004048:	f7ff fe00 	bl	8003c4c <HAL_GetTick>
 800404c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800404e:	e012      	b.n	8004076 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004050:	f7ff fdfc 	bl	8003c4c <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	2b0a      	cmp	r3, #10
 800405c:	d90b      	bls.n	8004076 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004062:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2205      	movs	r2, #5
 800406e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e012      	b.n	800409c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f003 0301 	and.w	r3, r3, #1
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1e5      	bne.n	8004050 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800408a:	2300      	movs	r3, #0
 800408c:	e006      	b.n	800409c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004092:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
  }
}
 800409c:	4618      	mov	r0, r3
 800409e:	3710      	adds	r7, #16
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80040a4:	b480      	push	{r7}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
 80040b0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040b8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80040ba:	7dfb      	ldrb	r3, [r7, #23]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d003      	beq.n	80040c8 <HAL_CAN_GetRxMessage+0x24>
 80040c0:	7dfb      	ldrb	r3, [r7, #23]
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	f040 80f3 	bne.w	80042ae <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10e      	bne.n	80040ec <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	f003 0303 	and.w	r3, r3, #3
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d116      	bne.n	800410a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e0e7      	b.n	80042bc <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	f003 0303 	and.w	r3, r3, #3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d107      	bne.n	800410a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e0d8      	b.n	80042bc <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	331b      	adds	r3, #27
 8004112:	011b      	lsls	r3, r3, #4
 8004114:	4413      	add	r3, r2
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0204 	and.w	r2, r3, #4
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d10c      	bne.n	8004142 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	331b      	adds	r3, #27
 8004130:	011b      	lsls	r3, r3, #4
 8004132:	4413      	add	r3, r2
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	0d5b      	lsrs	r3, r3, #21
 8004138:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	601a      	str	r2, [r3, #0]
 8004140:	e00b      	b.n	800415a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	331b      	adds	r3, #27
 800414a:	011b      	lsls	r3, r3, #4
 800414c:	4413      	add	r3, r2
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	08db      	lsrs	r3, r3, #3
 8004152:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	331b      	adds	r3, #27
 8004162:	011b      	lsls	r3, r3, #4
 8004164:	4413      	add	r3, r2
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0202 	and.w	r2, r3, #2
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	331b      	adds	r3, #27
 8004178:	011b      	lsls	r3, r3, #4
 800417a:	4413      	add	r3, r2
 800417c:	3304      	adds	r3, #4
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 020f 	and.w	r2, r3, #15
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	331b      	adds	r3, #27
 8004190:	011b      	lsls	r3, r3, #4
 8004192:	4413      	add	r3, r2
 8004194:	3304      	adds	r3, #4
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	0a1b      	lsrs	r3, r3, #8
 800419a:	b2da      	uxtb	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	331b      	adds	r3, #27
 80041a8:	011b      	lsls	r3, r3, #4
 80041aa:	4413      	add	r3, r2
 80041ac:	3304      	adds	r3, #4
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	0c1b      	lsrs	r3, r3, #16
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	011b      	lsls	r3, r3, #4
 80041c0:	4413      	add	r3, r2
 80041c2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	b2da      	uxtb	r2, r3
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	011b      	lsls	r3, r3, #4
 80041d6:	4413      	add	r3, r2
 80041d8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	0a1a      	lsrs	r2, r3, #8
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	3301      	adds	r3, #1
 80041e4:	b2d2      	uxtb	r2, r2
 80041e6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	011b      	lsls	r3, r3, #4
 80041f0:	4413      	add	r3, r2
 80041f2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	0c1a      	lsrs	r2, r3, #16
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	3302      	adds	r3, #2
 80041fe:	b2d2      	uxtb	r2, r2
 8004200:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	011b      	lsls	r3, r3, #4
 800420a:	4413      	add	r3, r2
 800420c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	0e1a      	lsrs	r2, r3, #24
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	3303      	adds	r3, #3
 8004218:	b2d2      	uxtb	r2, r2
 800421a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	011b      	lsls	r3, r3, #4
 8004224:	4413      	add	r3, r2
 8004226:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	3304      	adds	r3, #4
 8004230:	b2d2      	uxtb	r2, r2
 8004232:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	011b      	lsls	r3, r3, #4
 800423c:	4413      	add	r3, r2
 800423e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	0a1a      	lsrs	r2, r3, #8
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	3305      	adds	r3, #5
 800424a:	b2d2      	uxtb	r2, r2
 800424c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	011b      	lsls	r3, r3, #4
 8004256:	4413      	add	r3, r2
 8004258:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	0c1a      	lsrs	r2, r3, #16
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	3306      	adds	r3, #6
 8004264:	b2d2      	uxtb	r2, r2
 8004266:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	011b      	lsls	r3, r3, #4
 8004270:	4413      	add	r3, r2
 8004272:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	0e1a      	lsrs	r2, r3, #24
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	3307      	adds	r3, #7
 800427e:	b2d2      	uxtb	r2, r2
 8004280:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d108      	bne.n	800429a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68da      	ldr	r2, [r3, #12]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f042 0220 	orr.w	r2, r2, #32
 8004296:	60da      	str	r2, [r3, #12]
 8004298:	e007      	b.n	80042aa <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	691a      	ldr	r2, [r3, #16]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f042 0220 	orr.w	r2, r2, #32
 80042a8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80042aa:	2300      	movs	r3, #0
 80042ac:	e006      	b.n	80042bc <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
  }
}
 80042bc:	4618      	mov	r0, r3
 80042be:	371c      	adds	r7, #28
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80042d2:	2300      	movs	r3, #0
 80042d4:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042dc:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80042de:	7afb      	ldrb	r3, [r7, #11]
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d002      	beq.n	80042ea <HAL_CAN_GetRxFifoFillLevel+0x22>
 80042e4:	7afb      	ldrb	r3, [r7, #11]
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d10f      	bne.n	800430a <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d106      	bne.n	80042fe <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	f003 0303 	and.w	r3, r3, #3
 80042fa:	60fb      	str	r3, [r7, #12]
 80042fc:	e005      	b.n	800430a <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	f003 0303 	and.w	r3, r3, #3
 8004308:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 800430a:	68fb      	ldr	r3, [r7, #12]
}
 800430c:	4618      	mov	r0, r3
 800430e:	3714      	adds	r7, #20
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004318:	b480      	push	{r7}
 800431a:	b085      	sub	sp, #20
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004328:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800432a:	7bfb      	ldrb	r3, [r7, #15]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d002      	beq.n	8004336 <HAL_CAN_ActivateNotification+0x1e>
 8004330:	7bfb      	ldrb	r3, [r7, #15]
 8004332:	2b02      	cmp	r3, #2
 8004334:	d109      	bne.n	800434a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	6959      	ldr	r1, [r3, #20]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	683a      	ldr	r2, [r7, #0]
 8004342:	430a      	orrs	r2, r1
 8004344:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004346:	2300      	movs	r3, #0
 8004348:	e006      	b.n	8004358 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
  }
}
 8004358:	4618      	mov	r0, r3
 800435a:	3714      	adds	r7, #20
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b08a      	sub	sp, #40	; 0x28
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800436c:	2300      	movs	r3, #0
 800436e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80043a0:	6a3b      	ldr	r3, [r7, #32]
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d07c      	beq.n	80044a4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	f003 0301 	and.w	r3, r3, #1
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d023      	beq.n	80043fc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2201      	movs	r2, #1
 80043ba:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d003      	beq.n	80043ce <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 f983 	bl	80046d2 <HAL_CAN_TxMailbox0CompleteCallback>
 80043cc:	e016      	b.n	80043fc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	f003 0304 	and.w	r3, r3, #4
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d004      	beq.n	80043e2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80043d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80043de:	627b      	str	r3, [r7, #36]	; 0x24
 80043e0:	e00c      	b.n	80043fc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	f003 0308 	and.w	r3, r3, #8
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d004      	beq.n	80043f6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80043ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80043f2:	627b      	str	r3, [r7, #36]	; 0x24
 80043f4:	e002      	b.n	80043fc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 f989 	bl	800470e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004402:	2b00      	cmp	r3, #0
 8004404:	d024      	beq.n	8004450 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800440e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004416:	2b00      	cmp	r3, #0
 8004418:	d003      	beq.n	8004422 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 f963 	bl	80046e6 <HAL_CAN_TxMailbox1CompleteCallback>
 8004420:	e016      	b.n	8004450 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004428:	2b00      	cmp	r3, #0
 800442a:	d004      	beq.n	8004436 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800442c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004432:	627b      	str	r3, [r7, #36]	; 0x24
 8004434:	e00c      	b.n	8004450 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800443c:	2b00      	cmp	r3, #0
 800443e:	d004      	beq.n	800444a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004442:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004446:	627b      	str	r3, [r7, #36]	; 0x24
 8004448:	e002      	b.n	8004450 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 f969 	bl	8004722 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d024      	beq.n	80044a4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004462:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d003      	beq.n	8004476 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 f943 	bl	80046fa <HAL_CAN_TxMailbox2CompleteCallback>
 8004474:	e016      	b.n	80044a4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d004      	beq.n	800448a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004482:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004486:	627b      	str	r3, [r7, #36]	; 0x24
 8004488:	e00c      	b.n	80044a4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d004      	beq.n	800449e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004496:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800449a:	627b      	str	r3, [r7, #36]	; 0x24
 800449c:	e002      	b.n	80044a4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 f949 	bl	8004736 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80044a4:	6a3b      	ldr	r3, [r7, #32]
 80044a6:	f003 0308 	and.w	r3, r3, #8
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d00c      	beq.n	80044c8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	f003 0310 	and.w	r3, r3, #16
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d007      	beq.n	80044c8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80044b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044be:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2210      	movs	r2, #16
 80044c6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80044c8:	6a3b      	ldr	r3, [r7, #32]
 80044ca:	f003 0304 	and.w	r3, r3, #4
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00b      	beq.n	80044ea <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	f003 0308 	and.w	r3, r3, #8
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d006      	beq.n	80044ea <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2208      	movs	r2, #8
 80044e2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 f930 	bl	800474a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80044ea:	6a3b      	ldr	r3, [r7, #32]
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d009      	beq.n	8004508 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	f003 0303 	and.w	r3, r3, #3
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d002      	beq.n	8004508 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f7fc f888 	bl	8000618 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004508:	6a3b      	ldr	r3, [r7, #32]
 800450a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00c      	beq.n	800452c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	f003 0310 	and.w	r3, r3, #16
 8004518:	2b00      	cmp	r3, #0
 800451a:	d007      	beq.n	800452c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800451c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004522:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2210      	movs	r2, #16
 800452a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800452c:	6a3b      	ldr	r3, [r7, #32]
 800452e:	f003 0320 	and.w	r3, r3, #32
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00b      	beq.n	800454e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	f003 0308 	and.w	r3, r3, #8
 800453c:	2b00      	cmp	r3, #0
 800453e:	d006      	beq.n	800454e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2208      	movs	r2, #8
 8004546:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 f912 	bl	8004772 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800454e:	6a3b      	ldr	r3, [r7, #32]
 8004550:	f003 0310 	and.w	r3, r3, #16
 8004554:	2b00      	cmp	r3, #0
 8004556:	d009      	beq.n	800456c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	f003 0303 	and.w	r3, r3, #3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d002      	beq.n	800456c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 f8f9 	bl	800475e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800456c:	6a3b      	ldr	r3, [r7, #32]
 800456e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00b      	beq.n	800458e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	f003 0310 	and.w	r3, r3, #16
 800457c:	2b00      	cmp	r3, #0
 800457e:	d006      	beq.n	800458e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2210      	movs	r2, #16
 8004586:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f000 f8fc 	bl	8004786 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800458e:	6a3b      	ldr	r3, [r7, #32]
 8004590:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d00b      	beq.n	80045b0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	f003 0308 	and.w	r3, r3, #8
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d006      	beq.n	80045b0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2208      	movs	r2, #8
 80045a8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f8f5 	bl	800479a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80045b0:	6a3b      	ldr	r3, [r7, #32]
 80045b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d07b      	beq.n	80046b2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	f003 0304 	and.w	r3, r3, #4
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d072      	beq.n	80046aa <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80045c4:	6a3b      	ldr	r3, [r7, #32]
 80045c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d008      	beq.n	80045e0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d003      	beq.n	80045e0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80045d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045da:	f043 0301 	orr.w	r3, r3, #1
 80045de:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80045e0:	6a3b      	ldr	r3, [r7, #32]
 80045e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d008      	beq.n	80045fc <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d003      	beq.n	80045fc <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80045f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f6:	f043 0302 	orr.w	r3, r3, #2
 80045fa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80045fc:	6a3b      	ldr	r3, [r7, #32]
 80045fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004602:	2b00      	cmp	r3, #0
 8004604:	d008      	beq.n	8004618 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800460c:	2b00      	cmp	r3, #0
 800460e:	d003      	beq.n	8004618 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004612:	f043 0304 	orr.w	r3, r3, #4
 8004616:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004618:	6a3b      	ldr	r3, [r7, #32]
 800461a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800461e:	2b00      	cmp	r3, #0
 8004620:	d043      	beq.n	80046aa <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004628:	2b00      	cmp	r3, #0
 800462a:	d03e      	beq.n	80046aa <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004632:	2b60      	cmp	r3, #96	; 0x60
 8004634:	d02b      	beq.n	800468e <HAL_CAN_IRQHandler+0x32a>
 8004636:	2b60      	cmp	r3, #96	; 0x60
 8004638:	d82e      	bhi.n	8004698 <HAL_CAN_IRQHandler+0x334>
 800463a:	2b50      	cmp	r3, #80	; 0x50
 800463c:	d022      	beq.n	8004684 <HAL_CAN_IRQHandler+0x320>
 800463e:	2b50      	cmp	r3, #80	; 0x50
 8004640:	d82a      	bhi.n	8004698 <HAL_CAN_IRQHandler+0x334>
 8004642:	2b40      	cmp	r3, #64	; 0x40
 8004644:	d019      	beq.n	800467a <HAL_CAN_IRQHandler+0x316>
 8004646:	2b40      	cmp	r3, #64	; 0x40
 8004648:	d826      	bhi.n	8004698 <HAL_CAN_IRQHandler+0x334>
 800464a:	2b30      	cmp	r3, #48	; 0x30
 800464c:	d010      	beq.n	8004670 <HAL_CAN_IRQHandler+0x30c>
 800464e:	2b30      	cmp	r3, #48	; 0x30
 8004650:	d822      	bhi.n	8004698 <HAL_CAN_IRQHandler+0x334>
 8004652:	2b10      	cmp	r3, #16
 8004654:	d002      	beq.n	800465c <HAL_CAN_IRQHandler+0x2f8>
 8004656:	2b20      	cmp	r3, #32
 8004658:	d005      	beq.n	8004666 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800465a:	e01d      	b.n	8004698 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800465c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465e:	f043 0308 	orr.w	r3, r3, #8
 8004662:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004664:	e019      	b.n	800469a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004668:	f043 0310 	orr.w	r3, r3, #16
 800466c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800466e:	e014      	b.n	800469a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004672:	f043 0320 	orr.w	r3, r3, #32
 8004676:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004678:	e00f      	b.n	800469a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800467a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004680:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004682:	e00a      	b.n	800469a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800468a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800468c:	e005      	b.n	800469a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800468e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004694:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004696:	e000      	b.n	800469a <HAL_CAN_IRQHandler+0x336>
            break;
 8004698:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	699a      	ldr	r2, [r3, #24]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80046a8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2204      	movs	r2, #4
 80046b0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80046b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d008      	beq.n	80046ca <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046be:	431a      	orrs	r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 f872 	bl	80047ae <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80046ca:	bf00      	nop
 80046cc:	3728      	adds	r7, #40	; 0x28
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80046d2:	b480      	push	{r7}
 80046d4:	b083      	sub	sp, #12
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80046da:	bf00      	nop
 80046dc:	370c      	adds	r7, #12
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr

080046e6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80046e6:	b480      	push	{r7}
 80046e8:	b083      	sub	sp, #12
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80046ee:	bf00      	nop
 80046f0:	370c      	adds	r7, #12
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr

080046fa <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80046fa:	b480      	push	{r7}
 80046fc:	b083      	sub	sp, #12
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004702:	bf00      	nop
 8004704:	370c      	adds	r7, #12
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr

0800470e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800470e:	b480      	push	{r7}
 8004710:	b083      	sub	sp, #12
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004716:	bf00      	nop
 8004718:	370c      	adds	r7, #12
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr

08004722 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004722:	b480      	push	{r7}
 8004724:	b083      	sub	sp, #12
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800472a:	bf00      	nop
 800472c:	370c      	adds	r7, #12
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr

08004736 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004736:	b480      	push	{r7}
 8004738:	b083      	sub	sp, #12
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800473e:	bf00      	nop
 8004740:	370c      	adds	r7, #12
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr

0800474a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800474a:	b480      	push	{r7}
 800474c:	b083      	sub	sp, #12
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004752:	bf00      	nop
 8004754:	370c      	adds	r7, #12
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr

0800475e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800475e:	b480      	push	{r7}
 8004760:	b083      	sub	sp, #12
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004766:	bf00      	nop
 8004768:	370c      	adds	r7, #12
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr

08004772 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004772:	b480      	push	{r7}
 8004774:	b083      	sub	sp, #12
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800477a:	bf00      	nop
 800477c:	370c      	adds	r7, #12
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr

08004786 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004786:	b480      	push	{r7}
 8004788:	b083      	sub	sp, #12
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800478e:	bf00      	nop
 8004790:	370c      	adds	r7, #12
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr

0800479a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800479a:	b480      	push	{r7}
 800479c:	b083      	sub	sp, #12
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80047a2:	bf00      	nop
 80047a4:	370c      	adds	r7, #12
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80047ae:	b480      	push	{r7}
 80047b0:	b083      	sub	sp, #12
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80047b6:	bf00      	nop
 80047b8:	370c      	adds	r7, #12
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
	...

080047c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f003 0307 	and.w	r3, r3, #7
 80047d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80047d4:	4b0c      	ldr	r3, [pc, #48]	; (8004808 <__NVIC_SetPriorityGrouping+0x44>)
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047da:	68ba      	ldr	r2, [r7, #8]
 80047dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80047e0:	4013      	ands	r3, r2
 80047e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80047ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80047f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047f6:	4a04      	ldr	r2, [pc, #16]	; (8004808 <__NVIC_SetPriorityGrouping+0x44>)
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	60d3      	str	r3, [r2, #12]
}
 80047fc:	bf00      	nop
 80047fe:	3714      	adds	r7, #20
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr
 8004808:	e000ed00 	.word	0xe000ed00

0800480c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800480c:	b480      	push	{r7}
 800480e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004810:	4b04      	ldr	r3, [pc, #16]	; (8004824 <__NVIC_GetPriorityGrouping+0x18>)
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	0a1b      	lsrs	r3, r3, #8
 8004816:	f003 0307 	and.w	r3, r3, #7
}
 800481a:	4618      	mov	r0, r3
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr
 8004824:	e000ed00 	.word	0xe000ed00

08004828 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	4603      	mov	r3, r0
 8004830:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004836:	2b00      	cmp	r3, #0
 8004838:	db0b      	blt.n	8004852 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800483a:	79fb      	ldrb	r3, [r7, #7]
 800483c:	f003 021f 	and.w	r2, r3, #31
 8004840:	4907      	ldr	r1, [pc, #28]	; (8004860 <__NVIC_EnableIRQ+0x38>)
 8004842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004846:	095b      	lsrs	r3, r3, #5
 8004848:	2001      	movs	r0, #1
 800484a:	fa00 f202 	lsl.w	r2, r0, r2
 800484e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004852:	bf00      	nop
 8004854:	370c      	adds	r7, #12
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	e000e100 	.word	0xe000e100

08004864 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	4603      	mov	r3, r0
 800486c:	6039      	str	r1, [r7, #0]
 800486e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004874:	2b00      	cmp	r3, #0
 8004876:	db0a      	blt.n	800488e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	b2da      	uxtb	r2, r3
 800487c:	490c      	ldr	r1, [pc, #48]	; (80048b0 <__NVIC_SetPriority+0x4c>)
 800487e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004882:	0112      	lsls	r2, r2, #4
 8004884:	b2d2      	uxtb	r2, r2
 8004886:	440b      	add	r3, r1
 8004888:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800488c:	e00a      	b.n	80048a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	b2da      	uxtb	r2, r3
 8004892:	4908      	ldr	r1, [pc, #32]	; (80048b4 <__NVIC_SetPriority+0x50>)
 8004894:	79fb      	ldrb	r3, [r7, #7]
 8004896:	f003 030f 	and.w	r3, r3, #15
 800489a:	3b04      	subs	r3, #4
 800489c:	0112      	lsls	r2, r2, #4
 800489e:	b2d2      	uxtb	r2, r2
 80048a0:	440b      	add	r3, r1
 80048a2:	761a      	strb	r2, [r3, #24]
}
 80048a4:	bf00      	nop
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr
 80048b0:	e000e100 	.word	0xe000e100
 80048b4:	e000ed00 	.word	0xe000ed00

080048b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b089      	sub	sp, #36	; 0x24
 80048bc:	af00      	add	r7, sp, #0
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	60b9      	str	r1, [r7, #8]
 80048c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f003 0307 	and.w	r3, r3, #7
 80048ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	f1c3 0307 	rsb	r3, r3, #7
 80048d2:	2b04      	cmp	r3, #4
 80048d4:	bf28      	it	cs
 80048d6:	2304      	movcs	r3, #4
 80048d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	3304      	adds	r3, #4
 80048de:	2b06      	cmp	r3, #6
 80048e0:	d902      	bls.n	80048e8 <NVIC_EncodePriority+0x30>
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	3b03      	subs	r3, #3
 80048e6:	e000      	b.n	80048ea <NVIC_EncodePriority+0x32>
 80048e8:	2300      	movs	r3, #0
 80048ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048ec:	f04f 32ff 	mov.w	r2, #4294967295
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	fa02 f303 	lsl.w	r3, r2, r3
 80048f6:	43da      	mvns	r2, r3
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	401a      	ands	r2, r3
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004900:	f04f 31ff 	mov.w	r1, #4294967295
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	fa01 f303 	lsl.w	r3, r1, r3
 800490a:	43d9      	mvns	r1, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004910:	4313      	orrs	r3, r2
         );
}
 8004912:	4618      	mov	r0, r3
 8004914:	3724      	adds	r7, #36	; 0x24
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr

0800491e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800491e:	b580      	push	{r7, lr}
 8004920:	b082      	sub	sp, #8
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f7ff ff4c 	bl	80047c4 <__NVIC_SetPriorityGrouping>
}
 800492c:	bf00      	nop
 800492e:	3708      	adds	r7, #8
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004934:	b580      	push	{r7, lr}
 8004936:	b086      	sub	sp, #24
 8004938:	af00      	add	r7, sp, #0
 800493a:	4603      	mov	r3, r0
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	607a      	str	r2, [r7, #4]
 8004940:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004942:	2300      	movs	r3, #0
 8004944:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004946:	f7ff ff61 	bl	800480c <__NVIC_GetPriorityGrouping>
 800494a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	68b9      	ldr	r1, [r7, #8]
 8004950:	6978      	ldr	r0, [r7, #20]
 8004952:	f7ff ffb1 	bl	80048b8 <NVIC_EncodePriority>
 8004956:	4602      	mov	r2, r0
 8004958:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800495c:	4611      	mov	r1, r2
 800495e:	4618      	mov	r0, r3
 8004960:	f7ff ff80 	bl	8004864 <__NVIC_SetPriority>
}
 8004964:	bf00      	nop
 8004966:	3718      	adds	r7, #24
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
 8004972:	4603      	mov	r3, r0
 8004974:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800497a:	4618      	mov	r0, r3
 800497c:	f7ff ff54 	bl	8004828 <__NVIC_EnableIRQ>
}
 8004980:	bf00      	nop
 8004982:	3708      	adds	r7, #8
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b086      	sub	sp, #24
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004990:	2300      	movs	r3, #0
 8004992:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004994:	f7ff f95a 	bl	8003c4c <HAL_GetTick>
 8004998:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d101      	bne.n	80049a4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e099      	b.n	8004ad8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2202      	movs	r2, #2
 80049b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f022 0201 	bic.w	r2, r2, #1
 80049c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049c4:	e00f      	b.n	80049e6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80049c6:	f7ff f941 	bl	8003c4c <HAL_GetTick>
 80049ca:	4602      	mov	r2, r0
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	2b05      	cmp	r3, #5
 80049d2:	d908      	bls.n	80049e6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2220      	movs	r2, #32
 80049d8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2203      	movs	r2, #3
 80049de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e078      	b.n	8004ad8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0301 	and.w	r3, r3, #1
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d1e8      	bne.n	80049c6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80049fc:	697a      	ldr	r2, [r7, #20]
 80049fe:	4b38      	ldr	r3, [pc, #224]	; (8004ae0 <HAL_DMA_Init+0x158>)
 8004a00:	4013      	ands	r3, r2
 8004a02:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685a      	ldr	r2, [r3, #4]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a12:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	699b      	ldr	r3, [r3, #24]
 8004a24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a1b      	ldr	r3, [r3, #32]
 8004a30:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a32:	697a      	ldr	r2, [r7, #20]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3c:	2b04      	cmp	r3, #4
 8004a3e:	d107      	bne.n	8004a50 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	697a      	ldr	r2, [r7, #20]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	697a      	ldr	r2, [r7, #20]
 8004a56:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	f023 0307 	bic.w	r3, r3, #7
 8004a66:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6c:	697a      	ldr	r2, [r7, #20]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a76:	2b04      	cmp	r3, #4
 8004a78:	d117      	bne.n	8004aaa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a7e:	697a      	ldr	r2, [r7, #20]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00e      	beq.n	8004aaa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f000 fb01 	bl	8005094 <DMA_CheckFifoParam>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d008      	beq.n	8004aaa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2240      	movs	r2, #64	; 0x40
 8004a9c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e016      	b.n	8004ad8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	697a      	ldr	r2, [r7, #20]
 8004ab0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 fab8 	bl	8005028 <DMA_CalcBaseAndBitshift>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ac0:	223f      	movs	r2, #63	; 0x3f
 8004ac2:	409a      	lsls	r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004ad6:	2300      	movs	r3, #0
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3718      	adds	r7, #24
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	f010803f 	.word	0xf010803f

08004ae4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b086      	sub	sp, #24
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	607a      	str	r2, [r7, #4]
 8004af0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004af2:	2300      	movs	r3, #0
 8004af4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004afa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d101      	bne.n	8004b0a <HAL_DMA_Start_IT+0x26>
 8004b06:	2302      	movs	r3, #2
 8004b08:	e040      	b.n	8004b8c <HAL_DMA_Start_IT+0xa8>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d12f      	bne.n	8004b7e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2202      	movs	r2, #2
 8004b22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	68b9      	ldr	r1, [r7, #8]
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f000 fa4a 	bl	8004fcc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b3c:	223f      	movs	r2, #63	; 0x3f
 8004b3e:	409a      	lsls	r2, r3
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f042 0216 	orr.w	r2, r2, #22
 8004b52:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d007      	beq.n	8004b6c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f042 0208 	orr.w	r2, r2, #8
 8004b6a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f042 0201 	orr.w	r2, r2, #1
 8004b7a:	601a      	str	r2, [r3, #0]
 8004b7c:	e005      	b.n	8004b8a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004b86:	2302      	movs	r3, #2
 8004b88:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004b8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3718      	adds	r7, #24
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ba0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004ba2:	f7ff f853 	bl	8003c4c <HAL_GetTick>
 8004ba6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d008      	beq.n	8004bc6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2280      	movs	r2, #128	; 0x80
 8004bb8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e052      	b.n	8004c6c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f022 0216 	bic.w	r2, r2, #22
 8004bd4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	695a      	ldr	r2, [r3, #20]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004be4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d103      	bne.n	8004bf6 <HAL_DMA_Abort+0x62>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d007      	beq.n	8004c06 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f022 0208 	bic.w	r2, r2, #8
 8004c04:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f022 0201 	bic.w	r2, r2, #1
 8004c14:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c16:	e013      	b.n	8004c40 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c18:	f7ff f818 	bl	8003c4c <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	2b05      	cmp	r3, #5
 8004c24:	d90c      	bls.n	8004c40 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2220      	movs	r2, #32
 8004c2a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2203      	movs	r2, #3
 8004c38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e015      	b.n	8004c6c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d1e4      	bne.n	8004c18 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c52:	223f      	movs	r2, #63	; 0x3f
 8004c54:	409a      	lsls	r2, r3
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3710      	adds	r7, #16
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d004      	beq.n	8004c92 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2280      	movs	r2, #128	; 0x80
 8004c8c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e00c      	b.n	8004cac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2205      	movs	r2, #5
 8004c96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f022 0201 	bic.w	r2, r2, #1
 8004ca8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b086      	sub	sp, #24
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004cc4:	4b92      	ldr	r3, [pc, #584]	; (8004f10 <HAL_DMA_IRQHandler+0x258>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a92      	ldr	r2, [pc, #584]	; (8004f14 <HAL_DMA_IRQHandler+0x25c>)
 8004cca:	fba2 2303 	umull	r2, r3, r2, r3
 8004cce:	0a9b      	lsrs	r3, r3, #10
 8004cd0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cd6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ce2:	2208      	movs	r2, #8
 8004ce4:	409a      	lsls	r2, r3
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	4013      	ands	r3, r2
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d01a      	beq.n	8004d24 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0304 	and.w	r3, r3, #4
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d013      	beq.n	8004d24 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f022 0204 	bic.w	r2, r2, #4
 8004d0a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d10:	2208      	movs	r2, #8
 8004d12:	409a      	lsls	r2, r3
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d1c:	f043 0201 	orr.w	r2, r3, #1
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d28:	2201      	movs	r2, #1
 8004d2a:	409a      	lsls	r2, r3
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	4013      	ands	r3, r2
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d012      	beq.n	8004d5a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00b      	beq.n	8004d5a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d46:	2201      	movs	r2, #1
 8004d48:	409a      	lsls	r2, r3
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d52:	f043 0202 	orr.w	r2, r3, #2
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d5e:	2204      	movs	r2, #4
 8004d60:	409a      	lsls	r2, r3
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	4013      	ands	r3, r2
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d012      	beq.n	8004d90 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0302 	and.w	r3, r3, #2
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d00b      	beq.n	8004d90 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d7c:	2204      	movs	r2, #4
 8004d7e:	409a      	lsls	r2, r3
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d88:	f043 0204 	orr.w	r2, r3, #4
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d94:	2210      	movs	r2, #16
 8004d96:	409a      	lsls	r2, r3
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d043      	beq.n	8004e28 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0308 	and.w	r3, r3, #8
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d03c      	beq.n	8004e28 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004db2:	2210      	movs	r2, #16
 8004db4:	409a      	lsls	r2, r3
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d018      	beq.n	8004dfa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d108      	bne.n	8004de8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d024      	beq.n	8004e28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	4798      	blx	r3
 8004de6:	e01f      	b.n	8004e28 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d01b      	beq.n	8004e28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	4798      	blx	r3
 8004df8:	e016      	b.n	8004e28 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d107      	bne.n	8004e18 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f022 0208 	bic.w	r2, r2, #8
 8004e16:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d003      	beq.n	8004e28 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e2c:	2220      	movs	r2, #32
 8004e2e:	409a      	lsls	r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	4013      	ands	r3, r2
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	f000 808e 	beq.w	8004f56 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0310 	and.w	r3, r3, #16
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	f000 8086 	beq.w	8004f56 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e4e:	2220      	movs	r2, #32
 8004e50:	409a      	lsls	r2, r3
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	2b05      	cmp	r3, #5
 8004e60:	d136      	bne.n	8004ed0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f022 0216 	bic.w	r2, r2, #22
 8004e70:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	695a      	ldr	r2, [r3, #20]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e80:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d103      	bne.n	8004e92 <HAL_DMA_IRQHandler+0x1da>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d007      	beq.n	8004ea2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f022 0208 	bic.w	r2, r2, #8
 8004ea0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ea6:	223f      	movs	r2, #63	; 0x3f
 8004ea8:	409a      	lsls	r2, r3
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d07d      	beq.n	8004fc2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	4798      	blx	r3
        }
        return;
 8004ece:	e078      	b.n	8004fc2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d01c      	beq.n	8004f18 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d108      	bne.n	8004efe <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d030      	beq.n	8004f56 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	4798      	blx	r3
 8004efc:	e02b      	b.n	8004f56 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d027      	beq.n	8004f56 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	4798      	blx	r3
 8004f0e:	e022      	b.n	8004f56 <HAL_DMA_IRQHandler+0x29e>
 8004f10:	2000006c 	.word	0x2000006c
 8004f14:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d10f      	bne.n	8004f46 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f022 0210 	bic.w	r2, r2, #16
 8004f34:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2201      	movs	r2, #1
 8004f42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d003      	beq.n	8004f56 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d032      	beq.n	8004fc4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d022      	beq.n	8004fb0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2205      	movs	r2, #5
 8004f6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f022 0201 	bic.w	r2, r2, #1
 8004f80:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	3301      	adds	r3, #1
 8004f86:	60bb      	str	r3, [r7, #8]
 8004f88:	697a      	ldr	r2, [r7, #20]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d307      	bcc.n	8004f9e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0301 	and.w	r3, r3, #1
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d1f2      	bne.n	8004f82 <HAL_DMA_IRQHandler+0x2ca>
 8004f9c:	e000      	b.n	8004fa0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004f9e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d005      	beq.n	8004fc4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	4798      	blx	r3
 8004fc0:	e000      	b.n	8004fc4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004fc2:	bf00      	nop
    }
  }
}
 8004fc4:	3718      	adds	r7, #24
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop

08004fcc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	607a      	str	r2, [r7, #4]
 8004fd8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004fe8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	683a      	ldr	r2, [r7, #0]
 8004ff0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	2b40      	cmp	r3, #64	; 0x40
 8004ff8:	d108      	bne.n	800500c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68ba      	ldr	r2, [r7, #8]
 8005008:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800500a:	e007      	b.n	800501c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68ba      	ldr	r2, [r7, #8]
 8005012:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	60da      	str	r2, [r3, #12]
}
 800501c:	bf00      	nop
 800501e:	3714      	adds	r7, #20
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005028:	b480      	push	{r7}
 800502a:	b085      	sub	sp, #20
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	b2db      	uxtb	r3, r3
 8005036:	3b10      	subs	r3, #16
 8005038:	4a14      	ldr	r2, [pc, #80]	; (800508c <DMA_CalcBaseAndBitshift+0x64>)
 800503a:	fba2 2303 	umull	r2, r3, r2, r3
 800503e:	091b      	lsrs	r3, r3, #4
 8005040:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005042:	4a13      	ldr	r2, [pc, #76]	; (8005090 <DMA_CalcBaseAndBitshift+0x68>)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	4413      	add	r3, r2
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	461a      	mov	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2b03      	cmp	r3, #3
 8005054:	d909      	bls.n	800506a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800505e:	f023 0303 	bic.w	r3, r3, #3
 8005062:	1d1a      	adds	r2, r3, #4
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	659a      	str	r2, [r3, #88]	; 0x58
 8005068:	e007      	b.n	800507a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005072:	f023 0303 	bic.w	r3, r3, #3
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800507e:	4618      	mov	r0, r3
 8005080:	3714      	adds	r7, #20
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop
 800508c:	aaaaaaab 	.word	0xaaaaaaab
 8005090:	0800b468 	.word	0x0800b468

08005094 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005094:	b480      	push	{r7}
 8005096:	b085      	sub	sp, #20
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800509c:	2300      	movs	r3, #0
 800509e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d11f      	bne.n	80050ee <DMA_CheckFifoParam+0x5a>
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	2b03      	cmp	r3, #3
 80050b2:	d856      	bhi.n	8005162 <DMA_CheckFifoParam+0xce>
 80050b4:	a201      	add	r2, pc, #4	; (adr r2, 80050bc <DMA_CheckFifoParam+0x28>)
 80050b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ba:	bf00      	nop
 80050bc:	080050cd 	.word	0x080050cd
 80050c0:	080050df 	.word	0x080050df
 80050c4:	080050cd 	.word	0x080050cd
 80050c8:	08005163 	.word	0x08005163
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d046      	beq.n	8005166 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050dc:	e043      	b.n	8005166 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80050e6:	d140      	bne.n	800516a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050ec:	e03d      	b.n	800516a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	699b      	ldr	r3, [r3, #24]
 80050f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050f6:	d121      	bne.n	800513c <DMA_CheckFifoParam+0xa8>
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	2b03      	cmp	r3, #3
 80050fc:	d837      	bhi.n	800516e <DMA_CheckFifoParam+0xda>
 80050fe:	a201      	add	r2, pc, #4	; (adr r2, 8005104 <DMA_CheckFifoParam+0x70>)
 8005100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005104:	08005115 	.word	0x08005115
 8005108:	0800511b 	.word	0x0800511b
 800510c:	08005115 	.word	0x08005115
 8005110:	0800512d 	.word	0x0800512d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	73fb      	strb	r3, [r7, #15]
      break;
 8005118:	e030      	b.n	800517c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800511e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005122:	2b00      	cmp	r3, #0
 8005124:	d025      	beq.n	8005172 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800512a:	e022      	b.n	8005172 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005130:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005134:	d11f      	bne.n	8005176 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800513a:	e01c      	b.n	8005176 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	2b02      	cmp	r3, #2
 8005140:	d903      	bls.n	800514a <DMA_CheckFifoParam+0xb6>
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	2b03      	cmp	r3, #3
 8005146:	d003      	beq.n	8005150 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005148:	e018      	b.n	800517c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	73fb      	strb	r3, [r7, #15]
      break;
 800514e:	e015      	b.n	800517c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005154:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d00e      	beq.n	800517a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	73fb      	strb	r3, [r7, #15]
      break;
 8005160:	e00b      	b.n	800517a <DMA_CheckFifoParam+0xe6>
      break;
 8005162:	bf00      	nop
 8005164:	e00a      	b.n	800517c <DMA_CheckFifoParam+0xe8>
      break;
 8005166:	bf00      	nop
 8005168:	e008      	b.n	800517c <DMA_CheckFifoParam+0xe8>
      break;
 800516a:	bf00      	nop
 800516c:	e006      	b.n	800517c <DMA_CheckFifoParam+0xe8>
      break;
 800516e:	bf00      	nop
 8005170:	e004      	b.n	800517c <DMA_CheckFifoParam+0xe8>
      break;
 8005172:	bf00      	nop
 8005174:	e002      	b.n	800517c <DMA_CheckFifoParam+0xe8>
      break;   
 8005176:	bf00      	nop
 8005178:	e000      	b.n	800517c <DMA_CheckFifoParam+0xe8>
      break;
 800517a:	bf00      	nop
    }
  } 
  
  return status; 
 800517c:	7bfb      	ldrb	r3, [r7, #15]
}
 800517e:	4618      	mov	r0, r3
 8005180:	3714      	adds	r7, #20
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr
 800518a:	bf00      	nop

0800518c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800518c:	b480      	push	{r7}
 800518e:	b089      	sub	sp, #36	; 0x24
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005196:	2300      	movs	r3, #0
 8005198:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800519a:	2300      	movs	r3, #0
 800519c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800519e:	2300      	movs	r3, #0
 80051a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80051a2:	2300      	movs	r3, #0
 80051a4:	61fb      	str	r3, [r7, #28]
 80051a6:	e165      	b.n	8005474 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80051a8:	2201      	movs	r2, #1
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	fa02 f303 	lsl.w	r3, r2, r3
 80051b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	697a      	ldr	r2, [r7, #20]
 80051b8:	4013      	ands	r3, r2
 80051ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80051bc:	693a      	ldr	r2, [r7, #16]
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	f040 8154 	bne.w	800546e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	f003 0303 	and.w	r3, r3, #3
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d005      	beq.n	80051de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d130      	bne.n	8005240 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	005b      	lsls	r3, r3, #1
 80051e8:	2203      	movs	r2, #3
 80051ea:	fa02 f303 	lsl.w	r3, r2, r3
 80051ee:	43db      	mvns	r3, r3
 80051f0:	69ba      	ldr	r2, [r7, #24]
 80051f2:	4013      	ands	r3, r2
 80051f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	68da      	ldr	r2, [r3, #12]
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	005b      	lsls	r3, r3, #1
 80051fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005202:	69ba      	ldr	r2, [r7, #24]
 8005204:	4313      	orrs	r3, r2
 8005206:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	69ba      	ldr	r2, [r7, #24]
 800520c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005214:	2201      	movs	r2, #1
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	fa02 f303 	lsl.w	r3, r2, r3
 800521c:	43db      	mvns	r3, r3
 800521e:	69ba      	ldr	r2, [r7, #24]
 8005220:	4013      	ands	r3, r2
 8005222:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	091b      	lsrs	r3, r3, #4
 800522a:	f003 0201 	and.w	r2, r3, #1
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	fa02 f303 	lsl.w	r3, r2, r3
 8005234:	69ba      	ldr	r2, [r7, #24]
 8005236:	4313      	orrs	r3, r2
 8005238:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	69ba      	ldr	r2, [r7, #24]
 800523e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	f003 0303 	and.w	r3, r3, #3
 8005248:	2b03      	cmp	r3, #3
 800524a:	d017      	beq.n	800527c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	005b      	lsls	r3, r3, #1
 8005256:	2203      	movs	r2, #3
 8005258:	fa02 f303 	lsl.w	r3, r2, r3
 800525c:	43db      	mvns	r3, r3
 800525e:	69ba      	ldr	r2, [r7, #24]
 8005260:	4013      	ands	r3, r2
 8005262:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	689a      	ldr	r2, [r3, #8]
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	005b      	lsls	r3, r3, #1
 800526c:	fa02 f303 	lsl.w	r3, r2, r3
 8005270:	69ba      	ldr	r2, [r7, #24]
 8005272:	4313      	orrs	r3, r2
 8005274:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	69ba      	ldr	r2, [r7, #24]
 800527a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	f003 0303 	and.w	r3, r3, #3
 8005284:	2b02      	cmp	r3, #2
 8005286:	d123      	bne.n	80052d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	08da      	lsrs	r2, r3, #3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	3208      	adds	r2, #8
 8005290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005294:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	f003 0307 	and.w	r3, r3, #7
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	220f      	movs	r2, #15
 80052a0:	fa02 f303 	lsl.w	r3, r2, r3
 80052a4:	43db      	mvns	r3, r3
 80052a6:	69ba      	ldr	r2, [r7, #24]
 80052a8:	4013      	ands	r3, r2
 80052aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	691a      	ldr	r2, [r3, #16]
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	f003 0307 	and.w	r3, r3, #7
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	fa02 f303 	lsl.w	r3, r2, r3
 80052bc:	69ba      	ldr	r2, [r7, #24]
 80052be:	4313      	orrs	r3, r2
 80052c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	08da      	lsrs	r2, r3, #3
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	3208      	adds	r2, #8
 80052ca:	69b9      	ldr	r1, [r7, #24]
 80052cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	005b      	lsls	r3, r3, #1
 80052da:	2203      	movs	r2, #3
 80052dc:	fa02 f303 	lsl.w	r3, r2, r3
 80052e0:	43db      	mvns	r3, r3
 80052e2:	69ba      	ldr	r2, [r7, #24]
 80052e4:	4013      	ands	r3, r2
 80052e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	f003 0203 	and.w	r2, r3, #3
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	005b      	lsls	r3, r3, #1
 80052f4:	fa02 f303 	lsl.w	r3, r2, r3
 80052f8:	69ba      	ldr	r2, [r7, #24]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	69ba      	ldr	r2, [r7, #24]
 8005302:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800530c:	2b00      	cmp	r3, #0
 800530e:	f000 80ae 	beq.w	800546e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005312:	2300      	movs	r3, #0
 8005314:	60fb      	str	r3, [r7, #12]
 8005316:	4b5d      	ldr	r3, [pc, #372]	; (800548c <HAL_GPIO_Init+0x300>)
 8005318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800531a:	4a5c      	ldr	r2, [pc, #368]	; (800548c <HAL_GPIO_Init+0x300>)
 800531c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005320:	6453      	str	r3, [r2, #68]	; 0x44
 8005322:	4b5a      	ldr	r3, [pc, #360]	; (800548c <HAL_GPIO_Init+0x300>)
 8005324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800532a:	60fb      	str	r3, [r7, #12]
 800532c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800532e:	4a58      	ldr	r2, [pc, #352]	; (8005490 <HAL_GPIO_Init+0x304>)
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	089b      	lsrs	r3, r3, #2
 8005334:	3302      	adds	r3, #2
 8005336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800533a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	f003 0303 	and.w	r3, r3, #3
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	220f      	movs	r2, #15
 8005346:	fa02 f303 	lsl.w	r3, r2, r3
 800534a:	43db      	mvns	r3, r3
 800534c:	69ba      	ldr	r2, [r7, #24]
 800534e:	4013      	ands	r3, r2
 8005350:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a4f      	ldr	r2, [pc, #316]	; (8005494 <HAL_GPIO_Init+0x308>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d025      	beq.n	80053a6 <HAL_GPIO_Init+0x21a>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a4e      	ldr	r2, [pc, #312]	; (8005498 <HAL_GPIO_Init+0x30c>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d01f      	beq.n	80053a2 <HAL_GPIO_Init+0x216>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a4d      	ldr	r2, [pc, #308]	; (800549c <HAL_GPIO_Init+0x310>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d019      	beq.n	800539e <HAL_GPIO_Init+0x212>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a4c      	ldr	r2, [pc, #304]	; (80054a0 <HAL_GPIO_Init+0x314>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d013      	beq.n	800539a <HAL_GPIO_Init+0x20e>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a4b      	ldr	r2, [pc, #300]	; (80054a4 <HAL_GPIO_Init+0x318>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d00d      	beq.n	8005396 <HAL_GPIO_Init+0x20a>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a4a      	ldr	r2, [pc, #296]	; (80054a8 <HAL_GPIO_Init+0x31c>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d007      	beq.n	8005392 <HAL_GPIO_Init+0x206>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a49      	ldr	r2, [pc, #292]	; (80054ac <HAL_GPIO_Init+0x320>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d101      	bne.n	800538e <HAL_GPIO_Init+0x202>
 800538a:	2306      	movs	r3, #6
 800538c:	e00c      	b.n	80053a8 <HAL_GPIO_Init+0x21c>
 800538e:	2307      	movs	r3, #7
 8005390:	e00a      	b.n	80053a8 <HAL_GPIO_Init+0x21c>
 8005392:	2305      	movs	r3, #5
 8005394:	e008      	b.n	80053a8 <HAL_GPIO_Init+0x21c>
 8005396:	2304      	movs	r3, #4
 8005398:	e006      	b.n	80053a8 <HAL_GPIO_Init+0x21c>
 800539a:	2303      	movs	r3, #3
 800539c:	e004      	b.n	80053a8 <HAL_GPIO_Init+0x21c>
 800539e:	2302      	movs	r3, #2
 80053a0:	e002      	b.n	80053a8 <HAL_GPIO_Init+0x21c>
 80053a2:	2301      	movs	r3, #1
 80053a4:	e000      	b.n	80053a8 <HAL_GPIO_Init+0x21c>
 80053a6:	2300      	movs	r3, #0
 80053a8:	69fa      	ldr	r2, [r7, #28]
 80053aa:	f002 0203 	and.w	r2, r2, #3
 80053ae:	0092      	lsls	r2, r2, #2
 80053b0:	4093      	lsls	r3, r2
 80053b2:	69ba      	ldr	r2, [r7, #24]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80053b8:	4935      	ldr	r1, [pc, #212]	; (8005490 <HAL_GPIO_Init+0x304>)
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	089b      	lsrs	r3, r3, #2
 80053be:	3302      	adds	r3, #2
 80053c0:	69ba      	ldr	r2, [r7, #24]
 80053c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80053c6:	4b3a      	ldr	r3, [pc, #232]	; (80054b0 <HAL_GPIO_Init+0x324>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	43db      	mvns	r3, r3
 80053d0:	69ba      	ldr	r2, [r7, #24]
 80053d2:	4013      	ands	r3, r2
 80053d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d003      	beq.n	80053ea <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80053e2:	69ba      	ldr	r2, [r7, #24]
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80053ea:	4a31      	ldr	r2, [pc, #196]	; (80054b0 <HAL_GPIO_Init+0x324>)
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80053f0:	4b2f      	ldr	r3, [pc, #188]	; (80054b0 <HAL_GPIO_Init+0x324>)
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	43db      	mvns	r3, r3
 80053fa:	69ba      	ldr	r2, [r7, #24]
 80053fc:	4013      	ands	r3, r2
 80053fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d003      	beq.n	8005414 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800540c:	69ba      	ldr	r2, [r7, #24]
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	4313      	orrs	r3, r2
 8005412:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005414:	4a26      	ldr	r2, [pc, #152]	; (80054b0 <HAL_GPIO_Init+0x324>)
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800541a:	4b25      	ldr	r3, [pc, #148]	; (80054b0 <HAL_GPIO_Init+0x324>)
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	43db      	mvns	r3, r3
 8005424:	69ba      	ldr	r2, [r7, #24]
 8005426:	4013      	ands	r3, r2
 8005428:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005432:	2b00      	cmp	r3, #0
 8005434:	d003      	beq.n	800543e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005436:	69ba      	ldr	r2, [r7, #24]
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	4313      	orrs	r3, r2
 800543c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800543e:	4a1c      	ldr	r2, [pc, #112]	; (80054b0 <HAL_GPIO_Init+0x324>)
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005444:	4b1a      	ldr	r3, [pc, #104]	; (80054b0 <HAL_GPIO_Init+0x324>)
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	43db      	mvns	r3, r3
 800544e:	69ba      	ldr	r2, [r7, #24]
 8005450:	4013      	ands	r3, r2
 8005452:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800545c:	2b00      	cmp	r3, #0
 800545e:	d003      	beq.n	8005468 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005460:	69ba      	ldr	r2, [r7, #24]
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	4313      	orrs	r3, r2
 8005466:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005468:	4a11      	ldr	r2, [pc, #68]	; (80054b0 <HAL_GPIO_Init+0x324>)
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	3301      	adds	r3, #1
 8005472:	61fb      	str	r3, [r7, #28]
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	2b0f      	cmp	r3, #15
 8005478:	f67f ae96 	bls.w	80051a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800547c:	bf00      	nop
 800547e:	bf00      	nop
 8005480:	3724      	adds	r7, #36	; 0x24
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop
 800548c:	40023800 	.word	0x40023800
 8005490:	40013800 	.word	0x40013800
 8005494:	40020000 	.word	0x40020000
 8005498:	40020400 	.word	0x40020400
 800549c:	40020800 	.word	0x40020800
 80054a0:	40020c00 	.word	0x40020c00
 80054a4:	40021000 	.word	0x40021000
 80054a8:	40021400 	.word	0x40021400
 80054ac:	40021800 	.word	0x40021800
 80054b0:	40013c00 	.word	0x40013c00

080054b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	460b      	mov	r3, r1
 80054be:	807b      	strh	r3, [r7, #2]
 80054c0:	4613      	mov	r3, r2
 80054c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80054c4:	787b      	ldrb	r3, [r7, #1]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d003      	beq.n	80054d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80054ca:	887a      	ldrh	r2, [r7, #2]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80054d0:	e003      	b.n	80054da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80054d2:	887b      	ldrh	r3, [r7, #2]
 80054d4:	041a      	lsls	r2, r3, #16
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	619a      	str	r2, [r3, #24]
}
 80054da:	bf00      	nop
 80054dc:	370c      	adds	r7, #12
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
	...

080054e8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b086      	sub	sp, #24
 80054ec:	af02      	add	r7, sp, #8
 80054ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80054f0:	f7fe fbac 	bl	8003c4c <HAL_GetTick>
 80054f4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d101      	bne.n	8005500 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e069      	b.n	80055d4 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005506:	b2db      	uxtb	r3, r3
 8005508:	2b00      	cmp	r3, #0
 800550a:	d10b      	bne.n	8005524 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f7fd fc5f 	bl	8002dd8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800551a:	f241 3188 	movw	r1, #5000	; 0x1388
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 fd46 	bl	8005fb0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	3b01      	subs	r3, #1
 8005534:	021a      	lsls	r2, r3, #8
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	430a      	orrs	r2, r1
 800553c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005542:	9300      	str	r3, [sp, #0]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2200      	movs	r2, #0
 8005548:	2120      	movs	r1, #32
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 fd71 	bl	8006032 <QSPI_WaitFlagStateUntilTimeout>
 8005550:	4603      	mov	r3, r0
 8005552:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005554:	7afb      	ldrb	r3, [r7, #11]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d137      	bne.n	80055ca <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005564:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	6852      	ldr	r2, [r2, #4]
 800556c:	0611      	lsls	r1, r2, #24
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	68d2      	ldr	r2, [r2, #12]
 8005572:	4311      	orrs	r1, r2
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	69d2      	ldr	r2, [r2, #28]
 8005578:	4311      	orrs	r1, r2
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	6a12      	ldr	r2, [r2, #32]
 800557e:	4311      	orrs	r1, r2
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	6812      	ldr	r2, [r2, #0]
 8005584:	430b      	orrs	r3, r1
 8005586:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	685a      	ldr	r2, [r3, #4]
 800558e:	4b13      	ldr	r3, [pc, #76]	; (80055dc <HAL_QSPI_Init+0xf4>)
 8005590:	4013      	ands	r3, r2
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	6912      	ldr	r2, [r2, #16]
 8005596:	0411      	lsls	r1, r2, #16
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	6952      	ldr	r2, [r2, #20]
 800559c:	4311      	orrs	r1, r2
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	6992      	ldr	r2, [r2, #24]
 80055a2:	4311      	orrs	r1, r2
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	6812      	ldr	r2, [r2, #0]
 80055a8:	430b      	orrs	r3, r1
 80055aa:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f042 0201 	orr.w	r2, r2, #1
 80055ba:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2201      	movs	r2, #1
 80055c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80055d2:	7afb      	ldrb	r3, [r7, #11]
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3710      	adds	r7, #16
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	ffe0f8fe 	.word	0xffe0f8fe

080055e0 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi : QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b086      	sub	sp, #24
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	f003 0304 	and.w	r3, r3, #4
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d064      	beq.n	80056cc <HAL_QSPI_IRQHandler+0xec>
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005608:	2b00      	cmp	r3, #0
 800560a:	d05f      	beq.n	80056cc <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	3320      	adds	r3, #32
 8005612:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800561a:	b2db      	uxtb	r3, r3
 800561c:	2b12      	cmp	r3, #18
 800561e:	d125      	bne.n	800566c <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8005620:	e01c      	b.n	800565c <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005626:	2b00      	cmp	r3, #0
 8005628:	d00f      	beq.n	800564a <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562e:	781a      	ldrb	r2, [r3, #0]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005638:	1c5a      	adds	r2, r3, #1
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005642:	1e5a      	subs	r2, r3, #1
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	62da      	str	r2, [r3, #44]	; 0x2c
 8005648:	e008      	b.n	800565c <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005658:	601a      	str	r2, [r3, #0]
          break;
 800565a:	e033      	b.n	80056c4 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	f003 0304 	and.w	r3, r3, #4
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1db      	bne.n	8005622 <HAL_QSPI_IRQHandler+0x42>
 800566a:	e02b      	b.n	80056c4 <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005672:	b2db      	uxtb	r3, r3
 8005674:	2b22      	cmp	r3, #34	; 0x22
 8005676:	d125      	bne.n	80056c4 <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8005678:	e01d      	b.n	80056b6 <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800567e:	2b00      	cmp	r3, #0
 8005680:	d010      	beq.n	80056a4 <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	7812      	ldrb	r2, [r2, #0]
 800568a:	b2d2      	uxtb	r2, r2
 800568c:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005692:	1c5a      	adds	r2, r3, #1
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800569c:	1e5a      	subs	r2, r3, #1
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	639a      	str	r2, [r3, #56]	; 0x38
 80056a2:	e008      	b.n	80056b6 <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80056b2:	601a      	str	r2, [r3, #0]
          break;
 80056b4:	e006      	b.n	80056c4 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	f003 0304 	and.w	r3, r3, #4
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1da      	bne.n	800567a <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f000 fb8b 	bl	8005de0 <HAL_QSPI_FifoThresholdCallback>
 80056ca:	e142      	b.n	8005952 <HAL_QSPI_IRQHandler+0x372>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	f003 0302 	and.w	r3, r3, #2
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	f000 80b6 	beq.w	8005844 <HAL_QSPI_IRQHandler+0x264>
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056de:	2b00      	cmp	r3, #0
 80056e0:	f000 80b0 	beq.w	8005844 <HAL_QSPI_IRQHandler+0x264>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2202      	movs	r2, #2
 80056ea:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 80056fa:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005702:	b2db      	uxtb	r3, r3
 8005704:	2b12      	cmp	r3, #18
 8005706:	d123      	bne.n	8005750 <HAL_QSPI_IRQHandler+0x170>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 0304 	and.w	r3, r3, #4
 8005712:	2b00      	cmp	r3, #0
 8005714:	d011      	beq.n	800573a <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f022 0204 	bic.w	r2, r2, #4
 8005724:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f022 0201 	bic.w	r2, r2, #1
 8005738:	601a      	str	r2, [r3, #0]
      }

      /* Clear Busy bit */
      HAL_QSPI_Abort_IT(hqspi);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 fbdc 	bl	8005ef8 <HAL_QSPI_Abort_IT>

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 fb3f 	bl	8005dcc <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800574e:	e0fd      	b.n	800594c <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005756:	b2db      	uxtb	r3, r3
 8005758:	2b22      	cmp	r3, #34	; 0x22
 800575a:	d146      	bne.n	80057ea <HAL_QSPI_IRQHandler+0x20a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 0304 	and.w	r3, r3, #4
 8005766:	2b00      	cmp	r3, #0
 8005768:	d012      	beq.n	8005790 <HAL_QSPI_IRQHandler+0x1b0>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f022 0204 	bic.w	r2, r2, #4
 8005778:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f022 0201 	bic.w	r2, r2, #1
 800578c:	601a      	str	r2, [r3, #0]
 800578e:	e021      	b.n	80057d4 <HAL_QSPI_IRQHandler+0x1f4>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	3320      	adds	r3, #32
 8005796:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8005798:	e013      	b.n	80057c2 <HAL_QSPI_IRQHandler+0x1e2>
        {
          if (hqspi->RxXferCount > 0U)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d017      	beq.n	80057d2 <HAL_QSPI_IRQHandler+0x1f2>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	7812      	ldrb	r2, [r2, #0]
 80057aa:	b2d2      	uxtb	r2, r2
 80057ac:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b2:	1c5a      	adds	r2, r3, #1
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057bc:	1e5a      	subs	r2, r3, #1
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d1e4      	bne.n	800579a <HAL_QSPI_IRQHandler+0x1ba>
 80057d0:	e000      	b.n	80057d4 <HAL_QSPI_IRQHandler+0x1f4>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 80057d2:	bf00      	nop
          }
        }
      }

      /* Workaround - Extra data written in the FIFO at the end of a read transfer */
      HAL_QSPI_Abort_IT(hqspi);
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 fb8f 	bl	8005ef8 <HAL_QSPI_Abort_IT>

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2201      	movs	r2, #1
 80057de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 fae8 	bl	8005db8 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80057e8:	e0b0      	b.n	800594c <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d107      	bne.n	8005806 <HAL_QSPI_IRQHandler+0x226>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2201      	movs	r2, #1
 80057fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 fad0 	bl	8005da4 <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8005804:	e0a2      	b.n	800594c <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800580c:	b2db      	uxtb	r3, r3
 800580e:	2b08      	cmp	r3, #8
 8005810:	f040 809c 	bne.w	800594c <HAL_QSPI_IRQHandler+0x36c>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	695a      	ldr	r2, [r3, #20]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8005822:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005830:	2b00      	cmp	r3, #0
 8005832:	d103      	bne.n	800583c <HAL_QSPI_IRQHandler+0x25c>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 faab 	bl	8005d90 <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800583a:	e087      	b.n	800594c <HAL_QSPI_IRQHandler+0x36c>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 fa9d 	bl	8005d7c <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8005842:	e083      	b.n	800594c <HAL_QSPI_IRQHandler+0x36c>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	f003 0308 	and.w	r3, r3, #8
 800584a:	2b00      	cmp	r3, #0
 800584c:	d01f      	beq.n	800588e <HAL_QSPI_IRQHandler+0x2ae>
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005854:	2b00      	cmp	r3, #0
 8005856:	d01a      	beq.n	800588e <HAL_QSPI_IRQHandler+0x2ae>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2208      	movs	r2, #8
 800585e:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00b      	beq.n	8005886 <HAL_QSPI_IRQHandler+0x2a6>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800587c:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2201      	movs	r2, #1
 8005882:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 fab4 	bl	8005df4 <HAL_QSPI_StatusMatchCallback>
 800588c:	e061      	b.n	8005952 <HAL_QSPI_IRQHandler+0x372>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	f003 0301 	and.w	r3, r3, #1
 8005894:	2b00      	cmp	r3, #0
 8005896:	d047      	beq.n	8005928 <HAL_QSPI_IRQHandler+0x348>
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d042      	beq.n	8005928 <HAL_QSPI_IRQHandler+0x348>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	2201      	movs	r2, #1
 80058a8:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80058b8:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058be:	f043 0202 	orr.w	r2, r3, #2
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 0304 	and.w	r3, r3, #4
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d021      	beq.n	8005918 <HAL_QSPI_IRQHandler+0x338>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f022 0204 	bic.w	r2, r2, #4
 80058e2:	601a      	str	r2, [r3, #0]

      /* Disable the DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058e8:	4a1c      	ldr	r2, [pc, #112]	; (800595c <HAL_QSPI_IRQHandler+0x37c>)
 80058ea:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058f0:	4618      	mov	r0, r3
 80058f2:	f7ff f9bf 	bl	8004c74 <HAL_DMA_Abort_IT>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d029      	beq.n	8005950 <HAL_QSPI_IRQHandler+0x370>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005900:	f043 0204 	orr.w	r2, r3, #4
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f000 fa33 	bl	8005d7c <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005916:	e01b      	b.n	8005950 <HAL_QSPI_IRQHandler+0x370>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f000 fa2b 	bl	8005d7c <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005926:	e013      	b.n	8005950 <HAL_QSPI_IRQHandler+0x370>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	f003 0310 	and.w	r3, r3, #16
 800592e:	2b00      	cmp	r3, #0
 8005930:	d00f      	beq.n	8005952 <HAL_QSPI_IRQHandler+0x372>
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005938:	2b00      	cmp	r3, #0
 800593a:	d00a      	beq.n	8005952 <HAL_QSPI_IRQHandler+0x372>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2210      	movs	r2, #16
 8005942:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f000 fa5f 	bl	8005e08 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 800594a:	e002      	b.n	8005952 <HAL_QSPI_IRQHandler+0x372>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800594c:	bf00      	nop
 800594e:	e000      	b.n	8005952 <HAL_QSPI_IRQHandler+0x372>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005950:	bf00      	nop
}
 8005952:	bf00      	nop
 8005954:	3718      	adds	r7, #24
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	08005fcd 	.word	0x08005fcd

08005960 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b088      	sub	sp, #32
 8005964:	af02      	add	r7, sp, #8
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800596c:	f7fe f96e 	bl	8003c4c <HAL_GetTick>
 8005970:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005978:	b2db      	uxtb	r3, r3
 800597a:	2b01      	cmp	r3, #1
 800597c:	d101      	bne.n	8005982 <HAL_QSPI_Command+0x22>
 800597e:	2302      	movs	r3, #2
 8005980:	e048      	b.n	8005a14 <HAL_QSPI_Command+0xb4>
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2201      	movs	r2, #1
 8005986:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005990:	b2db      	uxtb	r3, r3
 8005992:	2b01      	cmp	r3, #1
 8005994:	d137      	bne.n	8005a06 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2200      	movs	r2, #0
 800599a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2202      	movs	r2, #2
 80059a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	9300      	str	r3, [sp, #0]
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	2200      	movs	r2, #0
 80059ac:	2120      	movs	r1, #32
 80059ae:	68f8      	ldr	r0, [r7, #12]
 80059b0:	f000 fb3f 	bl	8006032 <QSPI_WaitFlagStateUntilTimeout>
 80059b4:	4603      	mov	r3, r0
 80059b6:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80059b8:	7dfb      	ldrb	r3, [r7, #23]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d125      	bne.n	8005a0a <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80059be:	2200      	movs	r2, #0
 80059c0:	68b9      	ldr	r1, [r7, #8]
 80059c2:	68f8      	ldr	r0, [r7, #12]
 80059c4:	f000 fb6c 	bl	80060a0 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d115      	bne.n	80059fc <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	9300      	str	r3, [sp, #0]
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	2201      	movs	r2, #1
 80059d8:	2102      	movs	r1, #2
 80059da:	68f8      	ldr	r0, [r7, #12]
 80059dc:	f000 fb29 	bl	8006032 <QSPI_WaitFlagStateUntilTimeout>
 80059e0:	4603      	mov	r3, r0
 80059e2:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 80059e4:	7dfb      	ldrb	r3, [r7, #23]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d10f      	bne.n	8005a0a <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2202      	movs	r2, #2
 80059f0:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2201      	movs	r2, #1
 80059f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80059fa:	e006      	b.n	8005a0a <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a04:	e001      	b.n	8005a0a <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8005a06:	2302      	movs	r3, #2
 8005a08:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005a12:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3718      	adds	r7, #24
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b08a      	sub	sp, #40	; 0x28
 8005a20:	af02      	add	r7, sp, #8
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8005a2c:	f7fe f90e 	bl	8003c4c <HAL_GetTick>
 8005a30:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	3320      	adds	r3, #32
 8005a38:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d101      	bne.n	8005a4a <HAL_QSPI_Transmit+0x2e>
 8005a46:	2302      	movs	r3, #2
 8005a48:	e07b      	b.n	8005b42 <HAL_QSPI_Transmit+0x126>
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d16a      	bne.n	8005b34 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2200      	movs	r2, #0
 8005a62:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d05b      	beq.n	8005b22 <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2212      	movs	r2, #18
 8005a6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	1c5a      	adds	r2, r3, #1
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	1c5a      	adds	r2, r3, #1
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	68ba      	ldr	r2, [r7, #8]
 8005a8e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	695a      	ldr	r2, [r3, #20]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8005a9e:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8005aa0:	e01b      	b.n	8005ada <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	9300      	str	r3, [sp, #0]
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	2104      	movs	r1, #4
 8005aac:	68f8      	ldr	r0, [r7, #12]
 8005aae:	f000 fac0 	bl	8006032 <QSPI_WaitFlagStateUntilTimeout>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8005ab6:	7ffb      	ldrb	r3, [r7, #31]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d113      	bne.n	8005ae4 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac0:	781a      	ldrb	r2, [r3, #0]
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aca:	1c5a      	adds	r2, r3, #1
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad4:	1e5a      	subs	r2, r3, #1
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d1df      	bne.n	8005aa2 <HAL_QSPI_Transmit+0x86>
 8005ae2:	e000      	b.n	8005ae6 <HAL_QSPI_Transmit+0xca>
          break;
 8005ae4:	bf00      	nop
      }

      if (status == HAL_OK)
 8005ae6:	7ffb      	ldrb	r3, [r7, #31]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d115      	bne.n	8005b18 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	9300      	str	r3, [sp, #0]
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	2201      	movs	r2, #1
 8005af4:	2102      	movs	r1, #2
 8005af6:	68f8      	ldr	r0, [r7, #12]
 8005af8:	f000 fa9b 	bl	8006032 <QSPI_WaitFlagStateUntilTimeout>
 8005afc:	4603      	mov	r3, r0
 8005afe:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8005b00:	7ffb      	ldrb	r3, [r7, #31]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d108      	bne.n	8005b18 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2202      	movs	r2, #2
 8005b0c:	60da      	str	r2, [r3, #12]

          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 8005b0e:	68f8      	ldr	r0, [r7, #12]
 8005b10:	f000 f984 	bl	8005e1c <HAL_QSPI_Abort>
 8005b14:	4603      	mov	r3, r0
 8005b16:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b20:	e00a      	b.n	8005b38 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b26:	f043 0208 	orr.w	r2, r3, #8
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	77fb      	strb	r3, [r7, #31]
 8005b32:	e001      	b.n	8005b38 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 8005b34:	2302      	movs	r3, #2
 8005b36:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8005b40:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3720      	adds	r7, #32
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}

08005b4a <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8005b4a:	b580      	push	{r7, lr}
 8005b4c:	b08a      	sub	sp, #40	; 0x28
 8005b4e:	af02      	add	r7, sp, #8
 8005b50:	60f8      	str	r0, [r7, #12]
 8005b52:	60b9      	str	r1, [r7, #8]
 8005b54:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b56:	2300      	movs	r3, #0
 8005b58:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8005b5a:	f7fe f877 	bl	8003c4c <HAL_GetTick>
 8005b5e:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	699b      	ldr	r3, [r3, #24]
 8005b66:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	3320      	adds	r3, #32
 8005b6e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d101      	bne.n	8005b80 <HAL_QSPI_Receive+0x36>
 8005b7c:	2302      	movs	r3, #2
 8005b7e:	e082      	b.n	8005c86 <HAL_QSPI_Receive+0x13c>
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d171      	bne.n	8005c78 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2200      	movs	r2, #0
 8005b98:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d062      	beq.n	8005c66 <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2222      	movs	r2, #34	; 0x22
 8005ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	1c5a      	adds	r2, r3, #1
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	1c5a      	adds	r2, r3, #1
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	68ba      	ldr	r2, [r7, #8]
 8005bc4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	695b      	ldr	r3, [r3, #20]
 8005bcc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005bd8:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8005be2:	e01c      	b.n	8005c1e <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	9300      	str	r3, [sp, #0]
 8005be8:	69bb      	ldr	r3, [r7, #24]
 8005bea:	2201      	movs	r2, #1
 8005bec:	2106      	movs	r1, #6
 8005bee:	68f8      	ldr	r0, [r7, #12]
 8005bf0:	f000 fa1f 	bl	8006032 <QSPI_WaitFlagStateUntilTimeout>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8005bf8:	7ffb      	ldrb	r3, [r7, #31]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d114      	bne.n	8005c28 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c02:	693a      	ldr	r2, [r7, #16]
 8005c04:	7812      	ldrb	r2, [r2, #0]
 8005c06:	b2d2      	uxtb	r2, r2
 8005c08:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c0e:	1c5a      	adds	r2, r3, #1
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c18:	1e5a      	subs	r2, r3, #1
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d1de      	bne.n	8005be4 <HAL_QSPI_Receive+0x9a>
 8005c26:	e000      	b.n	8005c2a <HAL_QSPI_Receive+0xe0>
          break;
 8005c28:	bf00      	nop
      }

      if (status == HAL_OK)
 8005c2a:	7ffb      	ldrb	r3, [r7, #31]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d115      	bne.n	8005c5c <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	9300      	str	r3, [sp, #0]
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	2201      	movs	r2, #1
 8005c38:	2102      	movs	r1, #2
 8005c3a:	68f8      	ldr	r0, [r7, #12]
 8005c3c:	f000 f9f9 	bl	8006032 <QSPI_WaitFlagStateUntilTimeout>
 8005c40:	4603      	mov	r3, r0
 8005c42:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8005c44:	7ffb      	ldrb	r3, [r7, #31]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d108      	bne.n	8005c5c <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2202      	movs	r2, #2
 8005c50:	60da      	str	r2, [r3, #12]

          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 8005c52:	68f8      	ldr	r0, [r7, #12]
 8005c54:	f000 f8e2 	bl	8005e1c <HAL_QSPI_Abort>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c64:	e00a      	b.n	8005c7c <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c6a:	f043 0208 	orr.w	r2, r3, #8
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	77fb      	strb	r3, [r7, #31]
 8005c76:	e001      	b.n	8005c7c <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 8005c78:	2302      	movs	r3, #2
 8005c7a:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8005c84:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3720      	adds	r7, #32
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}

08005c8e <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8005c8e:	b580      	push	{r7, lr}
 8005c90:	b088      	sub	sp, #32
 8005c92:	af02      	add	r7, sp, #8
 8005c94:	60f8      	str	r0, [r7, #12]
 8005c96:	60b9      	str	r1, [r7, #8]
 8005c98:	607a      	str	r2, [r7, #4]
 8005c9a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005c9c:	f7fd ffd6 	bl	8003c4c <HAL_GetTick>
 8005ca0:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d101      	bne.n	8005cb2 <HAL_QSPI_AutoPolling+0x24>
 8005cae:	2302      	movs	r3, #2
 8005cb0:	e060      	b.n	8005d74 <HAL_QSPI_AutoPolling+0xe6>
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d14f      	bne.n	8005d66 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2242      	movs	r2, #66	; 0x42
 8005cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	9300      	str	r3, [sp, #0]
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	2120      	movs	r1, #32
 8005cde:	68f8      	ldr	r0, [r7, #12]
 8005ce0:	f000 f9a7 	bl	8006032 <QSPI_WaitFlagStateUntilTimeout>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8005ce8:	7dfb      	ldrb	r3, [r7, #23]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d13d      	bne.n	8005d6a <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	6812      	ldr	r2, [r2, #0]
 8005cf6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	6852      	ldr	r2, [r2, #4]
 8005d00:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	6892      	ldr	r2, [r2, #8]
 8005d0a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	691b      	ldr	r3, [r3, #16]
 8005d1a:	431a      	orrs	r2, r3
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005d24:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	68da      	ldr	r2, [r3, #12]
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8005d2e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005d32:	68b9      	ldr	r1, [r7, #8]
 8005d34:	68f8      	ldr	r0, [r7, #12]
 8005d36:	f000 f9b3 	bl	80060a0 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	9300      	str	r3, [sp, #0]
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	2201      	movs	r2, #1
 8005d42:	2108      	movs	r1, #8
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	f000 f974 	bl	8006032 <QSPI_WaitFlagStateUntilTimeout>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8005d4e:	7dfb      	ldrb	r3, [r7, #23]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d10a      	bne.n	8005d6a <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2208      	movs	r2, #8
 8005d5a:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d64:	e001      	b.n	8005d6a <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8005d66:	2302      	movs	r3, #2
 8005d68:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005d72:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3718      	adds	r7, #24
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 8005d84:	bf00      	nop
 8005d86:	370c      	adds	r7, #12
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 8005d98:	bf00      	nop
 8005d9a:	370c      	adds	r7, #12
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 8005dac:	bf00      	nop
 8005dae:	370c      	adds	r7, #12
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 8005dc0:	bf00      	nop
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b083      	sub	sp, #12
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 8005dd4:	bf00      	nop
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 8005de8:	bf00      	nop
 8005dea:	370c      	adds	r7, #12
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 8005dfc:	bf00      	nop
 8005dfe:	370c      	adds	r7, #12
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr

08005e08 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 8005e10:	bf00      	nop
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b086      	sub	sp, #24
 8005e20:	af02      	add	r7, sp, #8
 8005e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e24:	2300      	movs	r3, #0
 8005e26:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8005e28:	f7fd ff10 	bl	8003c4c <HAL_GetTick>
 8005e2c:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	f003 0302 	and.w	r3, r3, #2
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d056      	beq.n	8005eec <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f003 0304 	and.w	r3, r3, #4
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d017      	beq.n	8005e84 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f022 0204 	bic.w	r2, r2, #4
 8005e62:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f7fe fe93 	bl	8004b94 <HAL_DMA_Abort>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 8005e72:	7bfb      	ldrb	r3, [r7, #15]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d005      	beq.n	8005e84 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e7c:	f043 0204 	orr.w	r2, r3, #4
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f042 0202 	orr.w	r2, r2, #2
 8005e92:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e98:	9300      	str	r3, [sp, #0]
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	2102      	movs	r1, #2
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f000 f8c6 	bl	8006032 <QSPI_WaitFlagStateUntilTimeout>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005eaa:	7bfb      	ldrb	r3, [r7, #15]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d10e      	bne.n	8005ece <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	2202      	movs	r2, #2
 8005eb6:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ebc:	9300      	str	r3, [sp, #0]
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	2120      	movs	r1, #32
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f000 f8b4 	bl	8006032 <QSPI_WaitFlagStateUntilTimeout>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005ece:	7bfb      	ldrb	r3, [r7, #15]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d10b      	bne.n	8005eec <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	695a      	ldr	r2, [r3, #20]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8005ee2:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
  }

  return status;
 8005eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3710      	adds	r7, #16
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
	...

08005ef8 <HAL_QSPI_Abort_IT>:
* @brief  Abort the current transmission (non-blocking function)
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort_IT(QSPI_HandleTypeDef *hqspi)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f00:	2300      	movs	r3, #0
 8005f02:	73fb      	strb	r3, [r7, #15]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	f003 0302 	and.w	r3, r3, #2
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d046      	beq.n	8005fa2 <HAL_QSPI_Abort_IT+0xaa>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_ABORT;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2208      	movs	r2, #8
 8005f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable all interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_TO | QSPI_IT_SM | QSPI_IT_FT | QSPI_IT_TC | QSPI_IT_TE));
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8005f32:	601a      	str	r2, [r3, #0]

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 0304 	and.w	r3, r3, #4
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d01b      	beq.n	8005f7a <HAL_QSPI_Abort_IT+0x82>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f022 0204 	bic.w	r2, r2, #4
 8005f50:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f56:	4a15      	ldr	r2, [pc, #84]	; (8005fac <HAL_QSPI_Abort_IT+0xb4>)
 8005f58:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f7fe fe88 	bl	8004c74 <HAL_DMA_Abort_IT>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d01b      	beq.n	8005fa2 <HAL_QSPI_Abort_IT+0xaa>
      {
        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f7ff ff0c 	bl	8005d90 <HAL_QSPI_AbortCpltCallback>
 8005f78:	e013      	b.n	8005fa2 <HAL_QSPI_Abort_IT+0xaa>
      }
    }
    else
    {
      /* Clear interrupt */
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2202      	movs	r2, #2
 8005f80:	60da      	str	r2, [r3, #12]

      /* Enable the QSPI Transfer Complete Interrupt */
      __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005f90:	601a      	str	r2, [r3, #0]

      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f042 0202 	orr.w	r2, r2, #2
 8005fa0:	601a      	str	r2, [r3, #0]
    }
  }
  return status;
 8005fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3710      	adds	r7, #16
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}
 8005fac:	08005fcd 	.word	0x08005fcd

08005fb0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	683a      	ldr	r2, [r7, #0]
 8005fbe:	649a      	str	r2, [r3, #72]	; 0x48
}
 8005fc0:	bf00      	nop
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <QSPI_DMAAbortCplt>:
  * @brief  DMA QSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd8:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	2b08      	cmp	r3, #8
 8005ff0:	d114      	bne.n	800601c <QSPI_DMAAbortCplt+0x50>
  {
    /* DMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2202      	movs	r2, #2
 8005ff8:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006008:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f042 0202 	orr.w	r2, r2, #2
 8006018:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 800601a:	e006      	b.n	800602a <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 8006024:	68f8      	ldr	r0, [r7, #12]
 8006026:	f7ff fea9 	bl	8005d7c <HAL_QSPI_ErrorCallback>
}
 800602a:	bf00      	nop
 800602c:	3710      	adds	r7, #16
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}

08006032 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006032:	b580      	push	{r7, lr}
 8006034:	b084      	sub	sp, #16
 8006036:	af00      	add	r7, sp, #0
 8006038:	60f8      	str	r0, [r7, #12]
 800603a:	60b9      	str	r1, [r7, #8]
 800603c:	603b      	str	r3, [r7, #0]
 800603e:	4613      	mov	r3, r2
 8006040:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006042:	e01a      	b.n	800607a <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006044:	69bb      	ldr	r3, [r7, #24]
 8006046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800604a:	d016      	beq.n	800607a <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800604c:	f7fd fdfe 	bl	8003c4c <HAL_GetTick>
 8006050:	4602      	mov	r2, r0
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	1ad3      	subs	r3, r2, r3
 8006056:	69ba      	ldr	r2, [r7, #24]
 8006058:	429a      	cmp	r2, r3
 800605a:	d302      	bcc.n	8006062 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d10b      	bne.n	800607a <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2204      	movs	r2, #4
 8006066:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800606e:	f043 0201 	orr.w	r2, r3, #1
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	e00e      	b.n	8006098 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	689a      	ldr	r2, [r3, #8]
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	4013      	ands	r3, r2
 8006084:	2b00      	cmp	r3, #0
 8006086:	bf14      	ite	ne
 8006088:	2301      	movne	r3, #1
 800608a:	2300      	moveq	r3, #0
 800608c:	b2db      	uxtb	r3, r3
 800608e:	461a      	mov	r2, r3
 8006090:	79fb      	ldrb	r3, [r7, #7]
 8006092:	429a      	cmp	r2, r3
 8006094:	d1d6      	bne.n	8006044 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006096:	2300      	movs	r3, #0
}
 8006098:	4618      	mov	r0, r3
 800609a:	3710      	adds	r7, #16
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b085      	sub	sp, #20
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d009      	beq.n	80060c8 <QSPI_Config+0x28>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80060ba:	d005      	beq.n	80060c8 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	3a01      	subs	r2, #1
 80060c6:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	699b      	ldr	r3, [r3, #24]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	f000 80b9 	beq.w	8006244 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	6a1b      	ldr	r3, [r3, #32]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d05f      	beq.n	800619a <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68ba      	ldr	r2, [r7, #8]
 80060e0:	6892      	ldr	r2, [r2, #8]
 80060e2:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	69db      	ldr	r3, [r3, #28]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d031      	beq.n	8006150 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f4:	431a      	orrs	r2, r3
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060fa:	431a      	orrs	r2, r3
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006100:	431a      	orrs	r2, r3
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	695b      	ldr	r3, [r3, #20]
 8006106:	049b      	lsls	r3, r3, #18
 8006108:	431a      	orrs	r2, r3
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	431a      	orrs	r2, r3
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	6a1b      	ldr	r3, [r3, #32]
 8006114:	431a      	orrs	r2, r3
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	431a      	orrs	r2, r3
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	69db      	ldr	r3, [r3, #28]
 8006120:	431a      	orrs	r2, r3
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	699b      	ldr	r3, [r3, #24]
 8006126:	431a      	orrs	r2, r3
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	ea42 0103 	orr.w	r1, r2, r3
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	430a      	orrs	r2, r1
 8006138:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006140:	f000 812e 	beq.w	80063a0 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	68ba      	ldr	r2, [r7, #8]
 800614a:	6852      	ldr	r2, [r2, #4]
 800614c:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800614e:	e127      	b.n	80063a0 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006158:	431a      	orrs	r2, r3
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800615e:	431a      	orrs	r2, r3
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006164:	431a      	orrs	r2, r3
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	695b      	ldr	r3, [r3, #20]
 800616a:	049b      	lsls	r3, r3, #18
 800616c:	431a      	orrs	r2, r3
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	431a      	orrs	r2, r3
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	6a1b      	ldr	r3, [r3, #32]
 8006178:	431a      	orrs	r2, r3
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	69db      	ldr	r3, [r3, #28]
 800617e:	431a      	orrs	r2, r3
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	699b      	ldr	r3, [r3, #24]
 8006184:	431a      	orrs	r2, r3
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	ea42 0103 	orr.w	r1, r2, r3
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	430a      	orrs	r2, r1
 8006196:	615a      	str	r2, [r3, #20]
}
 8006198:	e102      	b.n	80063a0 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	69db      	ldr	r3, [r3, #28]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d02e      	beq.n	8006200 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061aa:	431a      	orrs	r2, r3
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061b0:	431a      	orrs	r2, r3
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b6:	431a      	orrs	r2, r3
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	695b      	ldr	r3, [r3, #20]
 80061bc:	049b      	lsls	r3, r3, #18
 80061be:	431a      	orrs	r2, r3
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	6a1b      	ldr	r3, [r3, #32]
 80061c4:	431a      	orrs	r2, r3
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	431a      	orrs	r2, r3
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	69db      	ldr	r3, [r3, #28]
 80061d0:	431a      	orrs	r2, r3
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	699b      	ldr	r3, [r3, #24]
 80061d6:	431a      	orrs	r2, r3
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	ea42 0103 	orr.w	r1, r2, r3
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	430a      	orrs	r2, r1
 80061e8:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80061f0:	f000 80d6 	beq.w	80063a0 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68ba      	ldr	r2, [r7, #8]
 80061fa:	6852      	ldr	r2, [r2, #4]
 80061fc:	619a      	str	r2, [r3, #24]
}
 80061fe:	e0cf      	b.n	80063a0 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006208:	431a      	orrs	r2, r3
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800620e:	431a      	orrs	r2, r3
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006214:	431a      	orrs	r2, r3
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	695b      	ldr	r3, [r3, #20]
 800621a:	049b      	lsls	r3, r3, #18
 800621c:	431a      	orrs	r2, r3
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	6a1b      	ldr	r3, [r3, #32]
 8006222:	431a      	orrs	r2, r3
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	69db      	ldr	r3, [r3, #28]
 8006228:	431a      	orrs	r2, r3
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	699b      	ldr	r3, [r3, #24]
 800622e:	431a      	orrs	r2, r3
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	ea42 0103 	orr.w	r1, r2, r3
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	430a      	orrs	r2, r1
 8006240:	615a      	str	r2, [r3, #20]
}
 8006242:	e0ad      	b.n	80063a0 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	6a1b      	ldr	r3, [r3, #32]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d058      	beq.n	80062fe <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	68ba      	ldr	r2, [r7, #8]
 8006252:	6892      	ldr	r2, [r2, #8]
 8006254:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	69db      	ldr	r3, [r3, #28]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d02d      	beq.n	80062ba <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006266:	431a      	orrs	r2, r3
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800626c:	431a      	orrs	r2, r3
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006272:	431a      	orrs	r2, r3
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	695b      	ldr	r3, [r3, #20]
 8006278:	049b      	lsls	r3, r3, #18
 800627a:	431a      	orrs	r2, r3
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	691b      	ldr	r3, [r3, #16]
 8006280:	431a      	orrs	r2, r3
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	6a1b      	ldr	r3, [r3, #32]
 8006286:	431a      	orrs	r2, r3
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	431a      	orrs	r2, r3
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	69db      	ldr	r3, [r3, #28]
 8006292:	431a      	orrs	r2, r3
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	699b      	ldr	r3, [r3, #24]
 8006298:	ea42 0103 	orr.w	r1, r2, r3
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	430a      	orrs	r2, r1
 80062a4:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80062ac:	d078      	beq.n	80063a0 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	68ba      	ldr	r2, [r7, #8]
 80062b4:	6852      	ldr	r2, [r2, #4]
 80062b6:	619a      	str	r2, [r3, #24]
}
 80062b8:	e072      	b.n	80063a0 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c2:	431a      	orrs	r2, r3
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062c8:	431a      	orrs	r2, r3
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ce:	431a      	orrs	r2, r3
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	695b      	ldr	r3, [r3, #20]
 80062d4:	049b      	lsls	r3, r3, #18
 80062d6:	431a      	orrs	r2, r3
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	691b      	ldr	r3, [r3, #16]
 80062dc:	431a      	orrs	r2, r3
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	6a1b      	ldr	r3, [r3, #32]
 80062e2:	431a      	orrs	r2, r3
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	69db      	ldr	r3, [r3, #28]
 80062e8:	431a      	orrs	r2, r3
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	699b      	ldr	r3, [r3, #24]
 80062ee:	ea42 0103 	orr.w	r1, r2, r3
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	430a      	orrs	r2, r1
 80062fa:	615a      	str	r2, [r3, #20]
}
 80062fc:	e050      	b.n	80063a0 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	69db      	ldr	r3, [r3, #28]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d02a      	beq.n	800635c <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800630e:	431a      	orrs	r2, r3
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006314:	431a      	orrs	r2, r3
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800631a:	431a      	orrs	r2, r3
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	695b      	ldr	r3, [r3, #20]
 8006320:	049b      	lsls	r3, r3, #18
 8006322:	431a      	orrs	r2, r3
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	6a1b      	ldr	r3, [r3, #32]
 8006328:	431a      	orrs	r2, r3
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	431a      	orrs	r2, r3
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	69db      	ldr	r3, [r3, #28]
 8006334:	431a      	orrs	r2, r3
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	699b      	ldr	r3, [r3, #24]
 800633a:	ea42 0103 	orr.w	r1, r2, r3
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	430a      	orrs	r2, r1
 8006346:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800634e:	d027      	beq.n	80063a0 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	68ba      	ldr	r2, [r7, #8]
 8006356:	6852      	ldr	r2, [r2, #4]
 8006358:	619a      	str	r2, [r3, #24]
}
 800635a:	e021      	b.n	80063a0 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006360:	2b00      	cmp	r3, #0
 8006362:	d01d      	beq.n	80063a0 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800636c:	431a      	orrs	r2, r3
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006372:	431a      	orrs	r2, r3
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006378:	431a      	orrs	r2, r3
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	695b      	ldr	r3, [r3, #20]
 800637e:	049b      	lsls	r3, r3, #18
 8006380:	431a      	orrs	r2, r3
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	6a1b      	ldr	r3, [r3, #32]
 8006386:	431a      	orrs	r2, r3
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	69db      	ldr	r3, [r3, #28]
 800638c:	431a      	orrs	r2, r3
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	699b      	ldr	r3, [r3, #24]
 8006392:	ea42 0103 	orr.w	r1, r2, r3
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	430a      	orrs	r2, r1
 800639e:	615a      	str	r2, [r3, #20]
}
 80063a0:	bf00      	nop
 80063a2:	3714      	adds	r7, #20
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d101      	bne.n	80063c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	e0cc      	b.n	800655a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80063c0:	4b68      	ldr	r3, [pc, #416]	; (8006564 <HAL_RCC_ClockConfig+0x1b8>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 030f 	and.w	r3, r3, #15
 80063c8:	683a      	ldr	r2, [r7, #0]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d90c      	bls.n	80063e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063ce:	4b65      	ldr	r3, [pc, #404]	; (8006564 <HAL_RCC_ClockConfig+0x1b8>)
 80063d0:	683a      	ldr	r2, [r7, #0]
 80063d2:	b2d2      	uxtb	r2, r2
 80063d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063d6:	4b63      	ldr	r3, [pc, #396]	; (8006564 <HAL_RCC_ClockConfig+0x1b8>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f003 030f 	and.w	r3, r3, #15
 80063de:	683a      	ldr	r2, [r7, #0]
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d001      	beq.n	80063e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	e0b8      	b.n	800655a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f003 0302 	and.w	r3, r3, #2
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d020      	beq.n	8006436 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f003 0304 	and.w	r3, r3, #4
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d005      	beq.n	800640c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006400:	4b59      	ldr	r3, [pc, #356]	; (8006568 <HAL_RCC_ClockConfig+0x1bc>)
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	4a58      	ldr	r2, [pc, #352]	; (8006568 <HAL_RCC_ClockConfig+0x1bc>)
 8006406:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800640a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 0308 	and.w	r3, r3, #8
 8006414:	2b00      	cmp	r3, #0
 8006416:	d005      	beq.n	8006424 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006418:	4b53      	ldr	r3, [pc, #332]	; (8006568 <HAL_RCC_ClockConfig+0x1bc>)
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	4a52      	ldr	r2, [pc, #328]	; (8006568 <HAL_RCC_ClockConfig+0x1bc>)
 800641e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006422:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006424:	4b50      	ldr	r3, [pc, #320]	; (8006568 <HAL_RCC_ClockConfig+0x1bc>)
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	494d      	ldr	r1, [pc, #308]	; (8006568 <HAL_RCC_ClockConfig+0x1bc>)
 8006432:	4313      	orrs	r3, r2
 8006434:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f003 0301 	and.w	r3, r3, #1
 800643e:	2b00      	cmp	r3, #0
 8006440:	d044      	beq.n	80064cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	2b01      	cmp	r3, #1
 8006448:	d107      	bne.n	800645a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800644a:	4b47      	ldr	r3, [pc, #284]	; (8006568 <HAL_RCC_ClockConfig+0x1bc>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006452:	2b00      	cmp	r3, #0
 8006454:	d119      	bne.n	800648a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	e07f      	b.n	800655a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	2b02      	cmp	r3, #2
 8006460:	d003      	beq.n	800646a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006466:	2b03      	cmp	r3, #3
 8006468:	d107      	bne.n	800647a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800646a:	4b3f      	ldr	r3, [pc, #252]	; (8006568 <HAL_RCC_ClockConfig+0x1bc>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006472:	2b00      	cmp	r3, #0
 8006474:	d109      	bne.n	800648a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e06f      	b.n	800655a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800647a:	4b3b      	ldr	r3, [pc, #236]	; (8006568 <HAL_RCC_ClockConfig+0x1bc>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f003 0302 	and.w	r3, r3, #2
 8006482:	2b00      	cmp	r3, #0
 8006484:	d101      	bne.n	800648a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	e067      	b.n	800655a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800648a:	4b37      	ldr	r3, [pc, #220]	; (8006568 <HAL_RCC_ClockConfig+0x1bc>)
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	f023 0203 	bic.w	r2, r3, #3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	4934      	ldr	r1, [pc, #208]	; (8006568 <HAL_RCC_ClockConfig+0x1bc>)
 8006498:	4313      	orrs	r3, r2
 800649a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800649c:	f7fd fbd6 	bl	8003c4c <HAL_GetTick>
 80064a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064a2:	e00a      	b.n	80064ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064a4:	f7fd fbd2 	bl	8003c4c <HAL_GetTick>
 80064a8:	4602      	mov	r2, r0
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	1ad3      	subs	r3, r2, r3
 80064ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d901      	bls.n	80064ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80064b6:	2303      	movs	r3, #3
 80064b8:	e04f      	b.n	800655a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064ba:	4b2b      	ldr	r3, [pc, #172]	; (8006568 <HAL_RCC_ClockConfig+0x1bc>)
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	f003 020c 	and.w	r2, r3, #12
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d1eb      	bne.n	80064a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80064cc:	4b25      	ldr	r3, [pc, #148]	; (8006564 <HAL_RCC_ClockConfig+0x1b8>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f003 030f 	and.w	r3, r3, #15
 80064d4:	683a      	ldr	r2, [r7, #0]
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d20c      	bcs.n	80064f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064da:	4b22      	ldr	r3, [pc, #136]	; (8006564 <HAL_RCC_ClockConfig+0x1b8>)
 80064dc:	683a      	ldr	r2, [r7, #0]
 80064de:	b2d2      	uxtb	r2, r2
 80064e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064e2:	4b20      	ldr	r3, [pc, #128]	; (8006564 <HAL_RCC_ClockConfig+0x1b8>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 030f 	and.w	r3, r3, #15
 80064ea:	683a      	ldr	r2, [r7, #0]
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d001      	beq.n	80064f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	e032      	b.n	800655a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f003 0304 	and.w	r3, r3, #4
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d008      	beq.n	8006512 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006500:	4b19      	ldr	r3, [pc, #100]	; (8006568 <HAL_RCC_ClockConfig+0x1bc>)
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	4916      	ldr	r1, [pc, #88]	; (8006568 <HAL_RCC_ClockConfig+0x1bc>)
 800650e:	4313      	orrs	r3, r2
 8006510:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 0308 	and.w	r3, r3, #8
 800651a:	2b00      	cmp	r3, #0
 800651c:	d009      	beq.n	8006532 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800651e:	4b12      	ldr	r3, [pc, #72]	; (8006568 <HAL_RCC_ClockConfig+0x1bc>)
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	00db      	lsls	r3, r3, #3
 800652c:	490e      	ldr	r1, [pc, #56]	; (8006568 <HAL_RCC_ClockConfig+0x1bc>)
 800652e:	4313      	orrs	r3, r2
 8006530:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006532:	f000 f887 	bl	8006644 <HAL_RCC_GetSysClockFreq>
 8006536:	4602      	mov	r2, r0
 8006538:	4b0b      	ldr	r3, [pc, #44]	; (8006568 <HAL_RCC_ClockConfig+0x1bc>)
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	091b      	lsrs	r3, r3, #4
 800653e:	f003 030f 	and.w	r3, r3, #15
 8006542:	490a      	ldr	r1, [pc, #40]	; (800656c <HAL_RCC_ClockConfig+0x1c0>)
 8006544:	5ccb      	ldrb	r3, [r1, r3]
 8006546:	fa22 f303 	lsr.w	r3, r2, r3
 800654a:	4a09      	ldr	r2, [pc, #36]	; (8006570 <HAL_RCC_ClockConfig+0x1c4>)
 800654c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800654e:	4b09      	ldr	r3, [pc, #36]	; (8006574 <HAL_RCC_ClockConfig+0x1c8>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4618      	mov	r0, r3
 8006554:	f7fc fcec 	bl	8002f30 <HAL_InitTick>

  return HAL_OK;
 8006558:	2300      	movs	r3, #0
}
 800655a:	4618      	mov	r0, r3
 800655c:	3710      	adds	r7, #16
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
 8006562:	bf00      	nop
 8006564:	40023c00 	.word	0x40023c00
 8006568:	40023800 	.word	0x40023800
 800656c:	0800b450 	.word	0x0800b450
 8006570:	2000006c 	.word	0x2000006c
 8006574:	20000070 	.word	0x20000070

08006578 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006578:	b480      	push	{r7}
 800657a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800657c:	4b03      	ldr	r3, [pc, #12]	; (800658c <HAL_RCC_GetHCLKFreq+0x14>)
 800657e:	681b      	ldr	r3, [r3, #0]
}
 8006580:	4618      	mov	r0, r3
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr
 800658a:	bf00      	nop
 800658c:	2000006c 	.word	0x2000006c

08006590 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006594:	f7ff fff0 	bl	8006578 <HAL_RCC_GetHCLKFreq>
 8006598:	4602      	mov	r2, r0
 800659a:	4b05      	ldr	r3, [pc, #20]	; (80065b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	0a9b      	lsrs	r3, r3, #10
 80065a0:	f003 0307 	and.w	r3, r3, #7
 80065a4:	4903      	ldr	r1, [pc, #12]	; (80065b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80065a6:	5ccb      	ldrb	r3, [r1, r3]
 80065a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	bd80      	pop	{r7, pc}
 80065b0:	40023800 	.word	0x40023800
 80065b4:	0800b460 	.word	0x0800b460

080065b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80065bc:	f7ff ffdc 	bl	8006578 <HAL_RCC_GetHCLKFreq>
 80065c0:	4602      	mov	r2, r0
 80065c2:	4b05      	ldr	r3, [pc, #20]	; (80065d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	0b5b      	lsrs	r3, r3, #13
 80065c8:	f003 0307 	and.w	r3, r3, #7
 80065cc:	4903      	ldr	r1, [pc, #12]	; (80065dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80065ce:	5ccb      	ldrb	r3, [r1, r3]
 80065d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	bd80      	pop	{r7, pc}
 80065d8:	40023800 	.word	0x40023800
 80065dc:	0800b460 	.word	0x0800b460

080065e0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	220f      	movs	r2, #15
 80065ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80065f0:	4b12      	ldr	r3, [pc, #72]	; (800663c <HAL_RCC_GetClockConfig+0x5c>)
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	f003 0203 	and.w	r2, r3, #3
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80065fc:	4b0f      	ldr	r3, [pc, #60]	; (800663c <HAL_RCC_GetClockConfig+0x5c>)
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006608:	4b0c      	ldr	r3, [pc, #48]	; (800663c <HAL_RCC_GetClockConfig+0x5c>)
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006614:	4b09      	ldr	r3, [pc, #36]	; (800663c <HAL_RCC_GetClockConfig+0x5c>)
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	08db      	lsrs	r3, r3, #3
 800661a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006622:	4b07      	ldr	r3, [pc, #28]	; (8006640 <HAL_RCC_GetClockConfig+0x60>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f003 020f 	and.w	r2, r3, #15
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	601a      	str	r2, [r3, #0]
}
 800662e:	bf00      	nop
 8006630:	370c      	adds	r7, #12
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr
 800663a:	bf00      	nop
 800663c:	40023800 	.word	0x40023800
 8006640:	40023c00 	.word	0x40023c00

08006644 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006644:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006648:	b087      	sub	sp, #28
 800664a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800664c:	2600      	movs	r6, #0
 800664e:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 8006650:	2600      	movs	r6, #0
 8006652:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 8006654:	2600      	movs	r6, #0
 8006656:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 8006658:	2600      	movs	r6, #0
 800665a:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800665c:	2600      	movs	r6, #0
 800665e:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006660:	4ea3      	ldr	r6, [pc, #652]	; (80068f0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8006662:	68b6      	ldr	r6, [r6, #8]
 8006664:	f006 060c 	and.w	r6, r6, #12
 8006668:	2e0c      	cmp	r6, #12
 800666a:	f200 8137 	bhi.w	80068dc <HAL_RCC_GetSysClockFreq+0x298>
 800666e:	f20f 0c08 	addw	ip, pc, #8
 8006672:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 8006676:	bf00      	nop
 8006678:	080066ad 	.word	0x080066ad
 800667c:	080068dd 	.word	0x080068dd
 8006680:	080068dd 	.word	0x080068dd
 8006684:	080068dd 	.word	0x080068dd
 8006688:	080066b3 	.word	0x080066b3
 800668c:	080068dd 	.word	0x080068dd
 8006690:	080068dd 	.word	0x080068dd
 8006694:	080068dd 	.word	0x080068dd
 8006698:	080066b9 	.word	0x080066b9
 800669c:	080068dd 	.word	0x080068dd
 80066a0:	080068dd 	.word	0x080068dd
 80066a4:	080068dd 	.word	0x080068dd
 80066a8:	080067cf 	.word	0x080067cf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80066ac:	4b91      	ldr	r3, [pc, #580]	; (80068f4 <HAL_RCC_GetSysClockFreq+0x2b0>)
 80066ae:	613b      	str	r3, [r7, #16]
       break;
 80066b0:	e117      	b.n	80068e2 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80066b2:	4b91      	ldr	r3, [pc, #580]	; (80068f8 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80066b4:	613b      	str	r3, [r7, #16]
      break;
 80066b6:	e114      	b.n	80068e2 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80066b8:	4b8d      	ldr	r3, [pc, #564]	; (80068f0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80066c0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80066c2:	4b8b      	ldr	r3, [pc, #556]	; (80068f0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d024      	beq.n	8006718 <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066ce:	4b88      	ldr	r3, [pc, #544]	; (80068f0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	099b      	lsrs	r3, r3, #6
 80066d4:	461a      	mov	r2, r3
 80066d6:	f04f 0300 	mov.w	r3, #0
 80066da:	f240 14ff 	movw	r4, #511	; 0x1ff
 80066de:	f04f 0500 	mov.w	r5, #0
 80066e2:	ea02 0004 	and.w	r0, r2, r4
 80066e6:	ea03 0105 	and.w	r1, r3, r5
 80066ea:	4b83      	ldr	r3, [pc, #524]	; (80068f8 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80066ec:	fb03 f201 	mul.w	r2, r3, r1
 80066f0:	2300      	movs	r3, #0
 80066f2:	fb03 f300 	mul.w	r3, r3, r0
 80066f6:	4413      	add	r3, r2
 80066f8:	4a7f      	ldr	r2, [pc, #508]	; (80068f8 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80066fa:	fba0 0102 	umull	r0, r1, r0, r2
 80066fe:	440b      	add	r3, r1
 8006700:	4619      	mov	r1, r3
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	461a      	mov	r2, r3
 8006706:	f04f 0300 	mov.w	r3, #0
 800670a:	f7f9 fd81 	bl	8000210 <__aeabi_uldivmod>
 800670e:	4602      	mov	r2, r0
 8006710:	460b      	mov	r3, r1
 8006712:	4613      	mov	r3, r2
 8006714:	617b      	str	r3, [r7, #20]
 8006716:	e04c      	b.n	80067b2 <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006718:	4b75      	ldr	r3, [pc, #468]	; (80068f0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	099b      	lsrs	r3, r3, #6
 800671e:	461a      	mov	r2, r3
 8006720:	f04f 0300 	mov.w	r3, #0
 8006724:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006728:	f04f 0100 	mov.w	r1, #0
 800672c:	ea02 0800 	and.w	r8, r2, r0
 8006730:	ea03 0901 	and.w	r9, r3, r1
 8006734:	4640      	mov	r0, r8
 8006736:	4649      	mov	r1, r9
 8006738:	f04f 0200 	mov.w	r2, #0
 800673c:	f04f 0300 	mov.w	r3, #0
 8006740:	014b      	lsls	r3, r1, #5
 8006742:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006746:	0142      	lsls	r2, r0, #5
 8006748:	4610      	mov	r0, r2
 800674a:	4619      	mov	r1, r3
 800674c:	ebb0 0008 	subs.w	r0, r0, r8
 8006750:	eb61 0109 	sbc.w	r1, r1, r9
 8006754:	f04f 0200 	mov.w	r2, #0
 8006758:	f04f 0300 	mov.w	r3, #0
 800675c:	018b      	lsls	r3, r1, #6
 800675e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006762:	0182      	lsls	r2, r0, #6
 8006764:	1a12      	subs	r2, r2, r0
 8006766:	eb63 0301 	sbc.w	r3, r3, r1
 800676a:	f04f 0000 	mov.w	r0, #0
 800676e:	f04f 0100 	mov.w	r1, #0
 8006772:	00d9      	lsls	r1, r3, #3
 8006774:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006778:	00d0      	lsls	r0, r2, #3
 800677a:	4602      	mov	r2, r0
 800677c:	460b      	mov	r3, r1
 800677e:	eb12 0208 	adds.w	r2, r2, r8
 8006782:	eb43 0309 	adc.w	r3, r3, r9
 8006786:	f04f 0000 	mov.w	r0, #0
 800678a:	f04f 0100 	mov.w	r1, #0
 800678e:	0299      	lsls	r1, r3, #10
 8006790:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006794:	0290      	lsls	r0, r2, #10
 8006796:	4602      	mov	r2, r0
 8006798:	460b      	mov	r3, r1
 800679a:	4610      	mov	r0, r2
 800679c:	4619      	mov	r1, r3
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	461a      	mov	r2, r3
 80067a2:	f04f 0300 	mov.w	r3, #0
 80067a6:	f7f9 fd33 	bl	8000210 <__aeabi_uldivmod>
 80067aa:	4602      	mov	r2, r0
 80067ac:	460b      	mov	r3, r1
 80067ae:	4613      	mov	r3, r2
 80067b0:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80067b2:	4b4f      	ldr	r3, [pc, #316]	; (80068f0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	0c1b      	lsrs	r3, r3, #16
 80067b8:	f003 0303 	and.w	r3, r3, #3
 80067bc:	3301      	adds	r3, #1
 80067be:	005b      	lsls	r3, r3, #1
 80067c0:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80067c2:	697a      	ldr	r2, [r7, #20]
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80067ca:	613b      	str	r3, [r7, #16]
      break;
 80067cc:	e089      	b.n	80068e2 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80067ce:	4948      	ldr	r1, [pc, #288]	; (80068f0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80067d0:	6849      	ldr	r1, [r1, #4]
 80067d2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80067d6:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80067d8:	4945      	ldr	r1, [pc, #276]	; (80068f0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80067da:	6849      	ldr	r1, [r1, #4]
 80067dc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80067e0:	2900      	cmp	r1, #0
 80067e2:	d024      	beq.n	800682e <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067e4:	4942      	ldr	r1, [pc, #264]	; (80068f0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80067e6:	6849      	ldr	r1, [r1, #4]
 80067e8:	0989      	lsrs	r1, r1, #6
 80067ea:	4608      	mov	r0, r1
 80067ec:	f04f 0100 	mov.w	r1, #0
 80067f0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80067f4:	f04f 0500 	mov.w	r5, #0
 80067f8:	ea00 0204 	and.w	r2, r0, r4
 80067fc:	ea01 0305 	and.w	r3, r1, r5
 8006800:	493d      	ldr	r1, [pc, #244]	; (80068f8 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8006802:	fb01 f003 	mul.w	r0, r1, r3
 8006806:	2100      	movs	r1, #0
 8006808:	fb01 f102 	mul.w	r1, r1, r2
 800680c:	1844      	adds	r4, r0, r1
 800680e:	493a      	ldr	r1, [pc, #232]	; (80068f8 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8006810:	fba2 0101 	umull	r0, r1, r2, r1
 8006814:	1863      	adds	r3, r4, r1
 8006816:	4619      	mov	r1, r3
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	461a      	mov	r2, r3
 800681c:	f04f 0300 	mov.w	r3, #0
 8006820:	f7f9 fcf6 	bl	8000210 <__aeabi_uldivmod>
 8006824:	4602      	mov	r2, r0
 8006826:	460b      	mov	r3, r1
 8006828:	4613      	mov	r3, r2
 800682a:	617b      	str	r3, [r7, #20]
 800682c:	e04a      	b.n	80068c4 <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800682e:	4b30      	ldr	r3, [pc, #192]	; (80068f0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	099b      	lsrs	r3, r3, #6
 8006834:	461a      	mov	r2, r3
 8006836:	f04f 0300 	mov.w	r3, #0
 800683a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800683e:	f04f 0100 	mov.w	r1, #0
 8006842:	ea02 0400 	and.w	r4, r2, r0
 8006846:	ea03 0501 	and.w	r5, r3, r1
 800684a:	4620      	mov	r0, r4
 800684c:	4629      	mov	r1, r5
 800684e:	f04f 0200 	mov.w	r2, #0
 8006852:	f04f 0300 	mov.w	r3, #0
 8006856:	014b      	lsls	r3, r1, #5
 8006858:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800685c:	0142      	lsls	r2, r0, #5
 800685e:	4610      	mov	r0, r2
 8006860:	4619      	mov	r1, r3
 8006862:	1b00      	subs	r0, r0, r4
 8006864:	eb61 0105 	sbc.w	r1, r1, r5
 8006868:	f04f 0200 	mov.w	r2, #0
 800686c:	f04f 0300 	mov.w	r3, #0
 8006870:	018b      	lsls	r3, r1, #6
 8006872:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006876:	0182      	lsls	r2, r0, #6
 8006878:	1a12      	subs	r2, r2, r0
 800687a:	eb63 0301 	sbc.w	r3, r3, r1
 800687e:	f04f 0000 	mov.w	r0, #0
 8006882:	f04f 0100 	mov.w	r1, #0
 8006886:	00d9      	lsls	r1, r3, #3
 8006888:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800688c:	00d0      	lsls	r0, r2, #3
 800688e:	4602      	mov	r2, r0
 8006890:	460b      	mov	r3, r1
 8006892:	1912      	adds	r2, r2, r4
 8006894:	eb45 0303 	adc.w	r3, r5, r3
 8006898:	f04f 0000 	mov.w	r0, #0
 800689c:	f04f 0100 	mov.w	r1, #0
 80068a0:	0299      	lsls	r1, r3, #10
 80068a2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80068a6:	0290      	lsls	r0, r2, #10
 80068a8:	4602      	mov	r2, r0
 80068aa:	460b      	mov	r3, r1
 80068ac:	4610      	mov	r0, r2
 80068ae:	4619      	mov	r1, r3
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	461a      	mov	r2, r3
 80068b4:	f04f 0300 	mov.w	r3, #0
 80068b8:	f7f9 fcaa 	bl	8000210 <__aeabi_uldivmod>
 80068bc:	4602      	mov	r2, r0
 80068be:	460b      	mov	r3, r1
 80068c0:	4613      	mov	r3, r2
 80068c2:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80068c4:	4b0a      	ldr	r3, [pc, #40]	; (80068f0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	0f1b      	lsrs	r3, r3, #28
 80068ca:	f003 0307 	and.w	r3, r3, #7
 80068ce:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80068d0:	697a      	ldr	r2, [r7, #20]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80068d8:	613b      	str	r3, [r7, #16]
      break;
 80068da:	e002      	b.n	80068e2 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80068dc:	4b05      	ldr	r3, [pc, #20]	; (80068f4 <HAL_RCC_GetSysClockFreq+0x2b0>)
 80068de:	613b      	str	r3, [r7, #16]
      break;
 80068e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80068e2:	693b      	ldr	r3, [r7, #16]
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	371c      	adds	r7, #28
 80068e8:	46bd      	mov	sp, r7
 80068ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80068ee:	bf00      	nop
 80068f0:	40023800 	.word	0x40023800
 80068f4:	00f42400 	.word	0x00f42400
 80068f8:	017d7840 	.word	0x017d7840

080068fc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b086      	sub	sp, #24
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d101      	bne.n	800690e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e28d      	b.n	8006e2a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f003 0301 	and.w	r3, r3, #1
 8006916:	2b00      	cmp	r3, #0
 8006918:	f000 8083 	beq.w	8006a22 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800691c:	4b94      	ldr	r3, [pc, #592]	; (8006b70 <HAL_RCC_OscConfig+0x274>)
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	f003 030c 	and.w	r3, r3, #12
 8006924:	2b04      	cmp	r3, #4
 8006926:	d019      	beq.n	800695c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006928:	4b91      	ldr	r3, [pc, #580]	; (8006b70 <HAL_RCC_OscConfig+0x274>)
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006930:	2b08      	cmp	r3, #8
 8006932:	d106      	bne.n	8006942 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006934:	4b8e      	ldr	r3, [pc, #568]	; (8006b70 <HAL_RCC_OscConfig+0x274>)
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800693c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006940:	d00c      	beq.n	800695c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006942:	4b8b      	ldr	r3, [pc, #556]	; (8006b70 <HAL_RCC_OscConfig+0x274>)
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800694a:	2b0c      	cmp	r3, #12
 800694c:	d112      	bne.n	8006974 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800694e:	4b88      	ldr	r3, [pc, #544]	; (8006b70 <HAL_RCC_OscConfig+0x274>)
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006956:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800695a:	d10b      	bne.n	8006974 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800695c:	4b84      	ldr	r3, [pc, #528]	; (8006b70 <HAL_RCC_OscConfig+0x274>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006964:	2b00      	cmp	r3, #0
 8006966:	d05b      	beq.n	8006a20 <HAL_RCC_OscConfig+0x124>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d157      	bne.n	8006a20 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	e25a      	b.n	8006e2a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800697c:	d106      	bne.n	800698c <HAL_RCC_OscConfig+0x90>
 800697e:	4b7c      	ldr	r3, [pc, #496]	; (8006b70 <HAL_RCC_OscConfig+0x274>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a7b      	ldr	r2, [pc, #492]	; (8006b70 <HAL_RCC_OscConfig+0x274>)
 8006984:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006988:	6013      	str	r3, [r2, #0]
 800698a:	e01d      	b.n	80069c8 <HAL_RCC_OscConfig+0xcc>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006994:	d10c      	bne.n	80069b0 <HAL_RCC_OscConfig+0xb4>
 8006996:	4b76      	ldr	r3, [pc, #472]	; (8006b70 <HAL_RCC_OscConfig+0x274>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a75      	ldr	r2, [pc, #468]	; (8006b70 <HAL_RCC_OscConfig+0x274>)
 800699c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80069a0:	6013      	str	r3, [r2, #0]
 80069a2:	4b73      	ldr	r3, [pc, #460]	; (8006b70 <HAL_RCC_OscConfig+0x274>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a72      	ldr	r2, [pc, #456]	; (8006b70 <HAL_RCC_OscConfig+0x274>)
 80069a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069ac:	6013      	str	r3, [r2, #0]
 80069ae:	e00b      	b.n	80069c8 <HAL_RCC_OscConfig+0xcc>
 80069b0:	4b6f      	ldr	r3, [pc, #444]	; (8006b70 <HAL_RCC_OscConfig+0x274>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a6e      	ldr	r2, [pc, #440]	; (8006b70 <HAL_RCC_OscConfig+0x274>)
 80069b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069ba:	6013      	str	r3, [r2, #0]
 80069bc:	4b6c      	ldr	r3, [pc, #432]	; (8006b70 <HAL_RCC_OscConfig+0x274>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a6b      	ldr	r2, [pc, #428]	; (8006b70 <HAL_RCC_OscConfig+0x274>)
 80069c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d013      	beq.n	80069f8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069d0:	f7fd f93c 	bl	8003c4c <HAL_GetTick>
 80069d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069d6:	e008      	b.n	80069ea <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80069d8:	f7fd f938 	bl	8003c4c <HAL_GetTick>
 80069dc:	4602      	mov	r2, r0
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	1ad3      	subs	r3, r2, r3
 80069e2:	2b64      	cmp	r3, #100	; 0x64
 80069e4:	d901      	bls.n	80069ea <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80069e6:	2303      	movs	r3, #3
 80069e8:	e21f      	b.n	8006e2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069ea:	4b61      	ldr	r3, [pc, #388]	; (8006b70 <HAL_RCC_OscConfig+0x274>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d0f0      	beq.n	80069d8 <HAL_RCC_OscConfig+0xdc>
 80069f6:	e014      	b.n	8006a22 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069f8:	f7fd f928 	bl	8003c4c <HAL_GetTick>
 80069fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069fe:	e008      	b.n	8006a12 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a00:	f7fd f924 	bl	8003c4c <HAL_GetTick>
 8006a04:	4602      	mov	r2, r0
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	1ad3      	subs	r3, r2, r3
 8006a0a:	2b64      	cmp	r3, #100	; 0x64
 8006a0c:	d901      	bls.n	8006a12 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006a0e:	2303      	movs	r3, #3
 8006a10:	e20b      	b.n	8006e2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a12:	4b57      	ldr	r3, [pc, #348]	; (8006b70 <HAL_RCC_OscConfig+0x274>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d1f0      	bne.n	8006a00 <HAL_RCC_OscConfig+0x104>
 8006a1e:	e000      	b.n	8006a22 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f003 0302 	and.w	r3, r3, #2
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d06f      	beq.n	8006b0e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006a2e:	4b50      	ldr	r3, [pc, #320]	; (8006b70 <HAL_RCC_OscConfig+0x274>)
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	f003 030c 	and.w	r3, r3, #12
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d017      	beq.n	8006a6a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006a3a:	4b4d      	ldr	r3, [pc, #308]	; (8006b70 <HAL_RCC_OscConfig+0x274>)
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006a42:	2b08      	cmp	r3, #8
 8006a44:	d105      	bne.n	8006a52 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006a46:	4b4a      	ldr	r3, [pc, #296]	; (8006b70 <HAL_RCC_OscConfig+0x274>)
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d00b      	beq.n	8006a6a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a52:	4b47      	ldr	r3, [pc, #284]	; (8006b70 <HAL_RCC_OscConfig+0x274>)
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006a5a:	2b0c      	cmp	r3, #12
 8006a5c:	d11c      	bne.n	8006a98 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a5e:	4b44      	ldr	r3, [pc, #272]	; (8006b70 <HAL_RCC_OscConfig+0x274>)
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d116      	bne.n	8006a98 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a6a:	4b41      	ldr	r3, [pc, #260]	; (8006b70 <HAL_RCC_OscConfig+0x274>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f003 0302 	and.w	r3, r3, #2
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d005      	beq.n	8006a82 <HAL_RCC_OscConfig+0x186>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d001      	beq.n	8006a82 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e1d3      	b.n	8006e2a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a82:	4b3b      	ldr	r3, [pc, #236]	; (8006b70 <HAL_RCC_OscConfig+0x274>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	00db      	lsls	r3, r3, #3
 8006a90:	4937      	ldr	r1, [pc, #220]	; (8006b70 <HAL_RCC_OscConfig+0x274>)
 8006a92:	4313      	orrs	r3, r2
 8006a94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a96:	e03a      	b.n	8006b0e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d020      	beq.n	8006ae2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006aa0:	4b34      	ldr	r3, [pc, #208]	; (8006b74 <HAL_RCC_OscConfig+0x278>)
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aa6:	f7fd f8d1 	bl	8003c4c <HAL_GetTick>
 8006aaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006aac:	e008      	b.n	8006ac0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006aae:	f7fd f8cd 	bl	8003c4c <HAL_GetTick>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	1ad3      	subs	r3, r2, r3
 8006ab8:	2b02      	cmp	r3, #2
 8006aba:	d901      	bls.n	8006ac0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006abc:	2303      	movs	r3, #3
 8006abe:	e1b4      	b.n	8006e2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ac0:	4b2b      	ldr	r3, [pc, #172]	; (8006b70 <HAL_RCC_OscConfig+0x274>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f003 0302 	and.w	r3, r3, #2
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d0f0      	beq.n	8006aae <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006acc:	4b28      	ldr	r3, [pc, #160]	; (8006b70 <HAL_RCC_OscConfig+0x274>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	691b      	ldr	r3, [r3, #16]
 8006ad8:	00db      	lsls	r3, r3, #3
 8006ada:	4925      	ldr	r1, [pc, #148]	; (8006b70 <HAL_RCC_OscConfig+0x274>)
 8006adc:	4313      	orrs	r3, r2
 8006ade:	600b      	str	r3, [r1, #0]
 8006ae0:	e015      	b.n	8006b0e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ae2:	4b24      	ldr	r3, [pc, #144]	; (8006b74 <HAL_RCC_OscConfig+0x278>)
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ae8:	f7fd f8b0 	bl	8003c4c <HAL_GetTick>
 8006aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006aee:	e008      	b.n	8006b02 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006af0:	f7fd f8ac 	bl	8003c4c <HAL_GetTick>
 8006af4:	4602      	mov	r2, r0
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	1ad3      	subs	r3, r2, r3
 8006afa:	2b02      	cmp	r3, #2
 8006afc:	d901      	bls.n	8006b02 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006afe:	2303      	movs	r3, #3
 8006b00:	e193      	b.n	8006e2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b02:	4b1b      	ldr	r3, [pc, #108]	; (8006b70 <HAL_RCC_OscConfig+0x274>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f003 0302 	and.w	r3, r3, #2
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d1f0      	bne.n	8006af0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f003 0308 	and.w	r3, r3, #8
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d036      	beq.n	8006b88 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	695b      	ldr	r3, [r3, #20]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d016      	beq.n	8006b50 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b22:	4b15      	ldr	r3, [pc, #84]	; (8006b78 <HAL_RCC_OscConfig+0x27c>)
 8006b24:	2201      	movs	r2, #1
 8006b26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b28:	f7fd f890 	bl	8003c4c <HAL_GetTick>
 8006b2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b2e:	e008      	b.n	8006b42 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b30:	f7fd f88c 	bl	8003c4c <HAL_GetTick>
 8006b34:	4602      	mov	r2, r0
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	1ad3      	subs	r3, r2, r3
 8006b3a:	2b02      	cmp	r3, #2
 8006b3c:	d901      	bls.n	8006b42 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006b3e:	2303      	movs	r3, #3
 8006b40:	e173      	b.n	8006e2a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b42:	4b0b      	ldr	r3, [pc, #44]	; (8006b70 <HAL_RCC_OscConfig+0x274>)
 8006b44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b46:	f003 0302 	and.w	r3, r3, #2
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d0f0      	beq.n	8006b30 <HAL_RCC_OscConfig+0x234>
 8006b4e:	e01b      	b.n	8006b88 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b50:	4b09      	ldr	r3, [pc, #36]	; (8006b78 <HAL_RCC_OscConfig+0x27c>)
 8006b52:	2200      	movs	r2, #0
 8006b54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b56:	f7fd f879 	bl	8003c4c <HAL_GetTick>
 8006b5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b5c:	e00e      	b.n	8006b7c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b5e:	f7fd f875 	bl	8003c4c <HAL_GetTick>
 8006b62:	4602      	mov	r2, r0
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	1ad3      	subs	r3, r2, r3
 8006b68:	2b02      	cmp	r3, #2
 8006b6a:	d907      	bls.n	8006b7c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006b6c:	2303      	movs	r3, #3
 8006b6e:	e15c      	b.n	8006e2a <HAL_RCC_OscConfig+0x52e>
 8006b70:	40023800 	.word	0x40023800
 8006b74:	42470000 	.word	0x42470000
 8006b78:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b7c:	4b8a      	ldr	r3, [pc, #552]	; (8006da8 <HAL_RCC_OscConfig+0x4ac>)
 8006b7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b80:	f003 0302 	and.w	r3, r3, #2
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d1ea      	bne.n	8006b5e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f003 0304 	and.w	r3, r3, #4
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	f000 8097 	beq.w	8006cc4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b96:	2300      	movs	r3, #0
 8006b98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b9a:	4b83      	ldr	r3, [pc, #524]	; (8006da8 <HAL_RCC_OscConfig+0x4ac>)
 8006b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d10f      	bne.n	8006bc6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	60bb      	str	r3, [r7, #8]
 8006baa:	4b7f      	ldr	r3, [pc, #508]	; (8006da8 <HAL_RCC_OscConfig+0x4ac>)
 8006bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bae:	4a7e      	ldr	r2, [pc, #504]	; (8006da8 <HAL_RCC_OscConfig+0x4ac>)
 8006bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8006bb6:	4b7c      	ldr	r3, [pc, #496]	; (8006da8 <HAL_RCC_OscConfig+0x4ac>)
 8006bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bbe:	60bb      	str	r3, [r7, #8]
 8006bc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bc6:	4b79      	ldr	r3, [pc, #484]	; (8006dac <HAL_RCC_OscConfig+0x4b0>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d118      	bne.n	8006c04 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006bd2:	4b76      	ldr	r3, [pc, #472]	; (8006dac <HAL_RCC_OscConfig+0x4b0>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a75      	ldr	r2, [pc, #468]	; (8006dac <HAL_RCC_OscConfig+0x4b0>)
 8006bd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006bde:	f7fd f835 	bl	8003c4c <HAL_GetTick>
 8006be2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006be4:	e008      	b.n	8006bf8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006be6:	f7fd f831 	bl	8003c4c <HAL_GetTick>
 8006bea:	4602      	mov	r2, r0
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	1ad3      	subs	r3, r2, r3
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d901      	bls.n	8006bf8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006bf4:	2303      	movs	r3, #3
 8006bf6:	e118      	b.n	8006e2a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bf8:	4b6c      	ldr	r3, [pc, #432]	; (8006dac <HAL_RCC_OscConfig+0x4b0>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d0f0      	beq.n	8006be6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d106      	bne.n	8006c1a <HAL_RCC_OscConfig+0x31e>
 8006c0c:	4b66      	ldr	r3, [pc, #408]	; (8006da8 <HAL_RCC_OscConfig+0x4ac>)
 8006c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c10:	4a65      	ldr	r2, [pc, #404]	; (8006da8 <HAL_RCC_OscConfig+0x4ac>)
 8006c12:	f043 0301 	orr.w	r3, r3, #1
 8006c16:	6713      	str	r3, [r2, #112]	; 0x70
 8006c18:	e01c      	b.n	8006c54 <HAL_RCC_OscConfig+0x358>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	2b05      	cmp	r3, #5
 8006c20:	d10c      	bne.n	8006c3c <HAL_RCC_OscConfig+0x340>
 8006c22:	4b61      	ldr	r3, [pc, #388]	; (8006da8 <HAL_RCC_OscConfig+0x4ac>)
 8006c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c26:	4a60      	ldr	r2, [pc, #384]	; (8006da8 <HAL_RCC_OscConfig+0x4ac>)
 8006c28:	f043 0304 	orr.w	r3, r3, #4
 8006c2c:	6713      	str	r3, [r2, #112]	; 0x70
 8006c2e:	4b5e      	ldr	r3, [pc, #376]	; (8006da8 <HAL_RCC_OscConfig+0x4ac>)
 8006c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c32:	4a5d      	ldr	r2, [pc, #372]	; (8006da8 <HAL_RCC_OscConfig+0x4ac>)
 8006c34:	f043 0301 	orr.w	r3, r3, #1
 8006c38:	6713      	str	r3, [r2, #112]	; 0x70
 8006c3a:	e00b      	b.n	8006c54 <HAL_RCC_OscConfig+0x358>
 8006c3c:	4b5a      	ldr	r3, [pc, #360]	; (8006da8 <HAL_RCC_OscConfig+0x4ac>)
 8006c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c40:	4a59      	ldr	r2, [pc, #356]	; (8006da8 <HAL_RCC_OscConfig+0x4ac>)
 8006c42:	f023 0301 	bic.w	r3, r3, #1
 8006c46:	6713      	str	r3, [r2, #112]	; 0x70
 8006c48:	4b57      	ldr	r3, [pc, #348]	; (8006da8 <HAL_RCC_OscConfig+0x4ac>)
 8006c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c4c:	4a56      	ldr	r2, [pc, #344]	; (8006da8 <HAL_RCC_OscConfig+0x4ac>)
 8006c4e:	f023 0304 	bic.w	r3, r3, #4
 8006c52:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d015      	beq.n	8006c88 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c5c:	f7fc fff6 	bl	8003c4c <HAL_GetTick>
 8006c60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c62:	e00a      	b.n	8006c7a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c64:	f7fc fff2 	bl	8003c4c <HAL_GetTick>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	1ad3      	subs	r3, r2, r3
 8006c6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d901      	bls.n	8006c7a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006c76:	2303      	movs	r3, #3
 8006c78:	e0d7      	b.n	8006e2a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c7a:	4b4b      	ldr	r3, [pc, #300]	; (8006da8 <HAL_RCC_OscConfig+0x4ac>)
 8006c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c7e:	f003 0302 	and.w	r3, r3, #2
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d0ee      	beq.n	8006c64 <HAL_RCC_OscConfig+0x368>
 8006c86:	e014      	b.n	8006cb2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c88:	f7fc ffe0 	bl	8003c4c <HAL_GetTick>
 8006c8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c8e:	e00a      	b.n	8006ca6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c90:	f7fc ffdc 	bl	8003c4c <HAL_GetTick>
 8006c94:	4602      	mov	r2, r0
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	1ad3      	subs	r3, r2, r3
 8006c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d901      	bls.n	8006ca6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006ca2:	2303      	movs	r3, #3
 8006ca4:	e0c1      	b.n	8006e2a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ca6:	4b40      	ldr	r3, [pc, #256]	; (8006da8 <HAL_RCC_OscConfig+0x4ac>)
 8006ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006caa:	f003 0302 	and.w	r3, r3, #2
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d1ee      	bne.n	8006c90 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006cb2:	7dfb      	ldrb	r3, [r7, #23]
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d105      	bne.n	8006cc4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006cb8:	4b3b      	ldr	r3, [pc, #236]	; (8006da8 <HAL_RCC_OscConfig+0x4ac>)
 8006cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cbc:	4a3a      	ldr	r2, [pc, #232]	; (8006da8 <HAL_RCC_OscConfig+0x4ac>)
 8006cbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006cc2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	699b      	ldr	r3, [r3, #24]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	f000 80ad 	beq.w	8006e28 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006cce:	4b36      	ldr	r3, [pc, #216]	; (8006da8 <HAL_RCC_OscConfig+0x4ac>)
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	f003 030c 	and.w	r3, r3, #12
 8006cd6:	2b08      	cmp	r3, #8
 8006cd8:	d060      	beq.n	8006d9c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	699b      	ldr	r3, [r3, #24]
 8006cde:	2b02      	cmp	r3, #2
 8006ce0:	d145      	bne.n	8006d6e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ce2:	4b33      	ldr	r3, [pc, #204]	; (8006db0 <HAL_RCC_OscConfig+0x4b4>)
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ce8:	f7fc ffb0 	bl	8003c4c <HAL_GetTick>
 8006cec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cee:	e008      	b.n	8006d02 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cf0:	f7fc ffac 	bl	8003c4c <HAL_GetTick>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	2b02      	cmp	r3, #2
 8006cfc:	d901      	bls.n	8006d02 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006cfe:	2303      	movs	r3, #3
 8006d00:	e093      	b.n	8006e2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d02:	4b29      	ldr	r3, [pc, #164]	; (8006da8 <HAL_RCC_OscConfig+0x4ac>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d1f0      	bne.n	8006cf0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	69da      	ldr	r2, [r3, #28]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6a1b      	ldr	r3, [r3, #32]
 8006d16:	431a      	orrs	r2, r3
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d1c:	019b      	lsls	r3, r3, #6
 8006d1e:	431a      	orrs	r2, r3
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d24:	085b      	lsrs	r3, r3, #1
 8006d26:	3b01      	subs	r3, #1
 8006d28:	041b      	lsls	r3, r3, #16
 8006d2a:	431a      	orrs	r2, r3
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d30:	061b      	lsls	r3, r3, #24
 8006d32:	431a      	orrs	r2, r3
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d38:	071b      	lsls	r3, r3, #28
 8006d3a:	491b      	ldr	r1, [pc, #108]	; (8006da8 <HAL_RCC_OscConfig+0x4ac>)
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d40:	4b1b      	ldr	r3, [pc, #108]	; (8006db0 <HAL_RCC_OscConfig+0x4b4>)
 8006d42:	2201      	movs	r2, #1
 8006d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d46:	f7fc ff81 	bl	8003c4c <HAL_GetTick>
 8006d4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d4c:	e008      	b.n	8006d60 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d4e:	f7fc ff7d 	bl	8003c4c <HAL_GetTick>
 8006d52:	4602      	mov	r2, r0
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	1ad3      	subs	r3, r2, r3
 8006d58:	2b02      	cmp	r3, #2
 8006d5a:	d901      	bls.n	8006d60 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	e064      	b.n	8006e2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d60:	4b11      	ldr	r3, [pc, #68]	; (8006da8 <HAL_RCC_OscConfig+0x4ac>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d0f0      	beq.n	8006d4e <HAL_RCC_OscConfig+0x452>
 8006d6c:	e05c      	b.n	8006e28 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d6e:	4b10      	ldr	r3, [pc, #64]	; (8006db0 <HAL_RCC_OscConfig+0x4b4>)
 8006d70:	2200      	movs	r2, #0
 8006d72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d74:	f7fc ff6a 	bl	8003c4c <HAL_GetTick>
 8006d78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d7a:	e008      	b.n	8006d8e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d7c:	f7fc ff66 	bl	8003c4c <HAL_GetTick>
 8006d80:	4602      	mov	r2, r0
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	1ad3      	subs	r3, r2, r3
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	d901      	bls.n	8006d8e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006d8a:	2303      	movs	r3, #3
 8006d8c:	e04d      	b.n	8006e2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d8e:	4b06      	ldr	r3, [pc, #24]	; (8006da8 <HAL_RCC_OscConfig+0x4ac>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d1f0      	bne.n	8006d7c <HAL_RCC_OscConfig+0x480>
 8006d9a:	e045      	b.n	8006e28 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	699b      	ldr	r3, [r3, #24]
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d107      	bne.n	8006db4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	e040      	b.n	8006e2a <HAL_RCC_OscConfig+0x52e>
 8006da8:	40023800 	.word	0x40023800
 8006dac:	40007000 	.word	0x40007000
 8006db0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006db4:	4b1f      	ldr	r3, [pc, #124]	; (8006e34 <HAL_RCC_OscConfig+0x538>)
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	699b      	ldr	r3, [r3, #24]
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d030      	beq.n	8006e24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d129      	bne.n	8006e24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d122      	bne.n	8006e24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006dde:	68fa      	ldr	r2, [r7, #12]
 8006de0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006de4:	4013      	ands	r3, r2
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006dea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d119      	bne.n	8006e24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dfa:	085b      	lsrs	r3, r3, #1
 8006dfc:	3b01      	subs	r3, #1
 8006dfe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d10f      	bne.n	8006e24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d107      	bne.n	8006e24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e1e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d001      	beq.n	8006e28 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	e000      	b.n	8006e2a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006e28:	2300      	movs	r3, #0
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3718      	adds	r7, #24
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	40023800 	.word	0x40023800

08006e38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b082      	sub	sp, #8
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d101      	bne.n	8006e4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	e041      	b.n	8006ece <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d106      	bne.n	8006e64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f7fc fb0e 	bl	8003480 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2202      	movs	r2, #2
 8006e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	3304      	adds	r3, #4
 8006e74:	4619      	mov	r1, r3
 8006e76:	4610      	mov	r0, r2
 8006e78:	f000 fbaa 	bl	80075d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2201      	movs	r2, #1
 8006e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2201      	movs	r2, #1
 8006e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2201      	movs	r2, #1
 8006eb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ecc:	2300      	movs	r3, #0
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3708      	adds	r7, #8
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
	...

08006ed8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b085      	sub	sp, #20
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d001      	beq.n	8006ef0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006eec:	2301      	movs	r3, #1
 8006eee:	e04e      	b.n	8006f8e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2202      	movs	r2, #2
 8006ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	68da      	ldr	r2, [r3, #12]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f042 0201 	orr.w	r2, r2, #1
 8006f06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a23      	ldr	r2, [pc, #140]	; (8006f9c <HAL_TIM_Base_Start_IT+0xc4>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d022      	beq.n	8006f58 <HAL_TIM_Base_Start_IT+0x80>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f1a:	d01d      	beq.n	8006f58 <HAL_TIM_Base_Start_IT+0x80>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a1f      	ldr	r2, [pc, #124]	; (8006fa0 <HAL_TIM_Base_Start_IT+0xc8>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d018      	beq.n	8006f58 <HAL_TIM_Base_Start_IT+0x80>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a1e      	ldr	r2, [pc, #120]	; (8006fa4 <HAL_TIM_Base_Start_IT+0xcc>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d013      	beq.n	8006f58 <HAL_TIM_Base_Start_IT+0x80>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a1c      	ldr	r2, [pc, #112]	; (8006fa8 <HAL_TIM_Base_Start_IT+0xd0>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d00e      	beq.n	8006f58 <HAL_TIM_Base_Start_IT+0x80>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a1b      	ldr	r2, [pc, #108]	; (8006fac <HAL_TIM_Base_Start_IT+0xd4>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d009      	beq.n	8006f58 <HAL_TIM_Base_Start_IT+0x80>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a19      	ldr	r2, [pc, #100]	; (8006fb0 <HAL_TIM_Base_Start_IT+0xd8>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d004      	beq.n	8006f58 <HAL_TIM_Base_Start_IT+0x80>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a18      	ldr	r2, [pc, #96]	; (8006fb4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d111      	bne.n	8006f7c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	f003 0307 	and.w	r3, r3, #7
 8006f62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2b06      	cmp	r3, #6
 8006f68:	d010      	beq.n	8006f8c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f042 0201 	orr.w	r2, r2, #1
 8006f78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f7a:	e007      	b.n	8006f8c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f042 0201 	orr.w	r2, r2, #1
 8006f8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f8c:	2300      	movs	r3, #0
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3714      	adds	r7, #20
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr
 8006f9a:	bf00      	nop
 8006f9c:	40010000 	.word	0x40010000
 8006fa0:	40000400 	.word	0x40000400
 8006fa4:	40000800 	.word	0x40000800
 8006fa8:	40000c00 	.word	0x40000c00
 8006fac:	40010400 	.word	0x40010400
 8006fb0:	40014000 	.word	0x40014000
 8006fb4:	40001800 	.word	0x40001800

08006fb8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b082      	sub	sp, #8
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d101      	bne.n	8006fca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e041      	b.n	800704e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fd0:	b2db      	uxtb	r3, r3
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d106      	bne.n	8006fe4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 f839 	bl	8007056 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2202      	movs	r2, #2
 8006fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	3304      	adds	r3, #4
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	4610      	mov	r0, r2
 8006ff8:	f000 faea 	bl	80075d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2201      	movs	r2, #1
 8007000:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2201      	movs	r2, #1
 8007008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2201      	movs	r2, #1
 8007010:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2201      	movs	r2, #1
 8007018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2201      	movs	r2, #1
 8007020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2201      	movs	r2, #1
 8007028:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2201      	movs	r2, #1
 8007038:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2201      	movs	r2, #1
 8007040:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2201      	movs	r2, #1
 8007048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800704c:	2300      	movs	r3, #0
}
 800704e:	4618      	mov	r0, r3
 8007050:	3708      	adds	r7, #8
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}

08007056 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007056:	b480      	push	{r7}
 8007058:	b083      	sub	sp, #12
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800705e:	bf00      	nop
 8007060:	370c      	adds	r7, #12
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr

0800706a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800706a:	b580      	push	{r7, lr}
 800706c:	b082      	sub	sp, #8
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	691b      	ldr	r3, [r3, #16]
 8007078:	f003 0302 	and.w	r3, r3, #2
 800707c:	2b02      	cmp	r3, #2
 800707e:	d122      	bne.n	80070c6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	68db      	ldr	r3, [r3, #12]
 8007086:	f003 0302 	and.w	r3, r3, #2
 800708a:	2b02      	cmp	r3, #2
 800708c:	d11b      	bne.n	80070c6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f06f 0202 	mvn.w	r2, #2
 8007096:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2201      	movs	r2, #1
 800709c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	699b      	ldr	r3, [r3, #24]
 80070a4:	f003 0303 	and.w	r3, r3, #3
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d003      	beq.n	80070b4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f000 fa71 	bl	8007594 <HAL_TIM_IC_CaptureCallback>
 80070b2:	e005      	b.n	80070c0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f000 fa63 	bl	8007580 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 fa74 	bl	80075a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	691b      	ldr	r3, [r3, #16]
 80070cc:	f003 0304 	and.w	r3, r3, #4
 80070d0:	2b04      	cmp	r3, #4
 80070d2:	d122      	bne.n	800711a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	f003 0304 	and.w	r3, r3, #4
 80070de:	2b04      	cmp	r3, #4
 80070e0:	d11b      	bne.n	800711a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f06f 0204 	mvn.w	r2, #4
 80070ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2202      	movs	r2, #2
 80070f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	699b      	ldr	r3, [r3, #24]
 80070f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d003      	beq.n	8007108 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 fa47 	bl	8007594 <HAL_TIM_IC_CaptureCallback>
 8007106:	e005      	b.n	8007114 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 fa39 	bl	8007580 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 fa4a 	bl	80075a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	691b      	ldr	r3, [r3, #16]
 8007120:	f003 0308 	and.w	r3, r3, #8
 8007124:	2b08      	cmp	r3, #8
 8007126:	d122      	bne.n	800716e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	68db      	ldr	r3, [r3, #12]
 800712e:	f003 0308 	and.w	r3, r3, #8
 8007132:	2b08      	cmp	r3, #8
 8007134:	d11b      	bne.n	800716e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f06f 0208 	mvn.w	r2, #8
 800713e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2204      	movs	r2, #4
 8007144:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	69db      	ldr	r3, [r3, #28]
 800714c:	f003 0303 	and.w	r3, r3, #3
 8007150:	2b00      	cmp	r3, #0
 8007152:	d003      	beq.n	800715c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 fa1d 	bl	8007594 <HAL_TIM_IC_CaptureCallback>
 800715a:	e005      	b.n	8007168 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 fa0f 	bl	8007580 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 fa20 	bl	80075a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	691b      	ldr	r3, [r3, #16]
 8007174:	f003 0310 	and.w	r3, r3, #16
 8007178:	2b10      	cmp	r3, #16
 800717a:	d122      	bne.n	80071c2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	68db      	ldr	r3, [r3, #12]
 8007182:	f003 0310 	and.w	r3, r3, #16
 8007186:	2b10      	cmp	r3, #16
 8007188:	d11b      	bne.n	80071c2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f06f 0210 	mvn.w	r2, #16
 8007192:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2208      	movs	r2, #8
 8007198:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	69db      	ldr	r3, [r3, #28]
 80071a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d003      	beq.n	80071b0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 f9f3 	bl	8007594 <HAL_TIM_IC_CaptureCallback>
 80071ae:	e005      	b.n	80071bc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 f9e5 	bl	8007580 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 f9f6 	bl	80075a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2200      	movs	r2, #0
 80071c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	691b      	ldr	r3, [r3, #16]
 80071c8:	f003 0301 	and.w	r3, r3, #1
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d10e      	bne.n	80071ee <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	68db      	ldr	r3, [r3, #12]
 80071d6:	f003 0301 	and.w	r3, r3, #1
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d107      	bne.n	80071ee <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f06f 0201 	mvn.w	r2, #1
 80071e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f7fb fdaf 	bl	8002d4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	691b      	ldr	r3, [r3, #16]
 80071f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071f8:	2b80      	cmp	r3, #128	; 0x80
 80071fa:	d10e      	bne.n	800721a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	68db      	ldr	r3, [r3, #12]
 8007202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007206:	2b80      	cmp	r3, #128	; 0x80
 8007208:	d107      	bne.n	800721a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007212:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 fe57 	bl	8007ec8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	691b      	ldr	r3, [r3, #16]
 8007220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007224:	2b40      	cmp	r3, #64	; 0x40
 8007226:	d10e      	bne.n	8007246 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	68db      	ldr	r3, [r3, #12]
 800722e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007232:	2b40      	cmp	r3, #64	; 0x40
 8007234:	d107      	bne.n	8007246 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800723e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 f9bb 	bl	80075bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	691b      	ldr	r3, [r3, #16]
 800724c:	f003 0320 	and.w	r3, r3, #32
 8007250:	2b20      	cmp	r3, #32
 8007252:	d10e      	bne.n	8007272 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	68db      	ldr	r3, [r3, #12]
 800725a:	f003 0320 	and.w	r3, r3, #32
 800725e:	2b20      	cmp	r3, #32
 8007260:	d107      	bne.n	8007272 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f06f 0220 	mvn.w	r2, #32
 800726a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 fe21 	bl	8007eb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007272:	bf00      	nop
 8007274:	3708      	adds	r7, #8
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
	...

0800727c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af00      	add	r7, sp, #0
 8007282:	60f8      	str	r0, [r7, #12]
 8007284:	60b9      	str	r1, [r7, #8]
 8007286:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800728e:	2b01      	cmp	r3, #1
 8007290:	d101      	bne.n	8007296 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007292:	2302      	movs	r3, #2
 8007294:	e0ac      	b.n	80073f0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2201      	movs	r2, #1
 800729a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2b0c      	cmp	r3, #12
 80072a2:	f200 809f 	bhi.w	80073e4 <HAL_TIM_PWM_ConfigChannel+0x168>
 80072a6:	a201      	add	r2, pc, #4	; (adr r2, 80072ac <HAL_TIM_PWM_ConfigChannel+0x30>)
 80072a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ac:	080072e1 	.word	0x080072e1
 80072b0:	080073e5 	.word	0x080073e5
 80072b4:	080073e5 	.word	0x080073e5
 80072b8:	080073e5 	.word	0x080073e5
 80072bc:	08007321 	.word	0x08007321
 80072c0:	080073e5 	.word	0x080073e5
 80072c4:	080073e5 	.word	0x080073e5
 80072c8:	080073e5 	.word	0x080073e5
 80072cc:	08007363 	.word	0x08007363
 80072d0:	080073e5 	.word	0x080073e5
 80072d4:	080073e5 	.word	0x080073e5
 80072d8:	080073e5 	.word	0x080073e5
 80072dc:	080073a3 	.word	0x080073a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	68b9      	ldr	r1, [r7, #8]
 80072e6:	4618      	mov	r0, r3
 80072e8:	f000 fa12 	bl	8007710 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	699a      	ldr	r2, [r3, #24]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f042 0208 	orr.w	r2, r2, #8
 80072fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	699a      	ldr	r2, [r3, #24]
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f022 0204 	bic.w	r2, r2, #4
 800730a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	6999      	ldr	r1, [r3, #24]
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	691a      	ldr	r2, [r3, #16]
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	430a      	orrs	r2, r1
 800731c:	619a      	str	r2, [r3, #24]
      break;
 800731e:	e062      	b.n	80073e6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	68b9      	ldr	r1, [r7, #8]
 8007326:	4618      	mov	r0, r3
 8007328:	f000 fa62 	bl	80077f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	699a      	ldr	r2, [r3, #24]
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800733a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	699a      	ldr	r2, [r3, #24]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800734a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	6999      	ldr	r1, [r3, #24]
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	691b      	ldr	r3, [r3, #16]
 8007356:	021a      	lsls	r2, r3, #8
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	430a      	orrs	r2, r1
 800735e:	619a      	str	r2, [r3, #24]
      break;
 8007360:	e041      	b.n	80073e6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	68b9      	ldr	r1, [r7, #8]
 8007368:	4618      	mov	r0, r3
 800736a:	f000 fab7 	bl	80078dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	69da      	ldr	r2, [r3, #28]
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f042 0208 	orr.w	r2, r2, #8
 800737c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	69da      	ldr	r2, [r3, #28]
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f022 0204 	bic.w	r2, r2, #4
 800738c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	69d9      	ldr	r1, [r3, #28]
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	691a      	ldr	r2, [r3, #16]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	430a      	orrs	r2, r1
 800739e:	61da      	str	r2, [r3, #28]
      break;
 80073a0:	e021      	b.n	80073e6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	68b9      	ldr	r1, [r7, #8]
 80073a8:	4618      	mov	r0, r3
 80073aa:	f000 fb0b 	bl	80079c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	69da      	ldr	r2, [r3, #28]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	69da      	ldr	r2, [r3, #28]
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	69d9      	ldr	r1, [r3, #28]
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	691b      	ldr	r3, [r3, #16]
 80073d8:	021a      	lsls	r2, r3, #8
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	430a      	orrs	r2, r1
 80073e0:	61da      	str	r2, [r3, #28]
      break;
 80073e2:	e000      	b.n	80073e6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80073e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2200      	movs	r2, #0
 80073ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073ee:	2300      	movs	r3, #0
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3710      	adds	r7, #16
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b084      	sub	sp, #16
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007408:	2b01      	cmp	r3, #1
 800740a:	d101      	bne.n	8007410 <HAL_TIM_ConfigClockSource+0x18>
 800740c:	2302      	movs	r3, #2
 800740e:	e0b3      	b.n	8007578 <HAL_TIM_ConfigClockSource+0x180>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2201      	movs	r2, #1
 8007414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2202      	movs	r2, #2
 800741c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800742e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007436:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	68fa      	ldr	r2, [r7, #12]
 800743e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007448:	d03e      	beq.n	80074c8 <HAL_TIM_ConfigClockSource+0xd0>
 800744a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800744e:	f200 8087 	bhi.w	8007560 <HAL_TIM_ConfigClockSource+0x168>
 8007452:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007456:	f000 8085 	beq.w	8007564 <HAL_TIM_ConfigClockSource+0x16c>
 800745a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800745e:	d87f      	bhi.n	8007560 <HAL_TIM_ConfigClockSource+0x168>
 8007460:	2b70      	cmp	r3, #112	; 0x70
 8007462:	d01a      	beq.n	800749a <HAL_TIM_ConfigClockSource+0xa2>
 8007464:	2b70      	cmp	r3, #112	; 0x70
 8007466:	d87b      	bhi.n	8007560 <HAL_TIM_ConfigClockSource+0x168>
 8007468:	2b60      	cmp	r3, #96	; 0x60
 800746a:	d050      	beq.n	800750e <HAL_TIM_ConfigClockSource+0x116>
 800746c:	2b60      	cmp	r3, #96	; 0x60
 800746e:	d877      	bhi.n	8007560 <HAL_TIM_ConfigClockSource+0x168>
 8007470:	2b50      	cmp	r3, #80	; 0x50
 8007472:	d03c      	beq.n	80074ee <HAL_TIM_ConfigClockSource+0xf6>
 8007474:	2b50      	cmp	r3, #80	; 0x50
 8007476:	d873      	bhi.n	8007560 <HAL_TIM_ConfigClockSource+0x168>
 8007478:	2b40      	cmp	r3, #64	; 0x40
 800747a:	d058      	beq.n	800752e <HAL_TIM_ConfigClockSource+0x136>
 800747c:	2b40      	cmp	r3, #64	; 0x40
 800747e:	d86f      	bhi.n	8007560 <HAL_TIM_ConfigClockSource+0x168>
 8007480:	2b30      	cmp	r3, #48	; 0x30
 8007482:	d064      	beq.n	800754e <HAL_TIM_ConfigClockSource+0x156>
 8007484:	2b30      	cmp	r3, #48	; 0x30
 8007486:	d86b      	bhi.n	8007560 <HAL_TIM_ConfigClockSource+0x168>
 8007488:	2b20      	cmp	r3, #32
 800748a:	d060      	beq.n	800754e <HAL_TIM_ConfigClockSource+0x156>
 800748c:	2b20      	cmp	r3, #32
 800748e:	d867      	bhi.n	8007560 <HAL_TIM_ConfigClockSource+0x168>
 8007490:	2b00      	cmp	r3, #0
 8007492:	d05c      	beq.n	800754e <HAL_TIM_ConfigClockSource+0x156>
 8007494:	2b10      	cmp	r3, #16
 8007496:	d05a      	beq.n	800754e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007498:	e062      	b.n	8007560 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6818      	ldr	r0, [r3, #0]
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	6899      	ldr	r1, [r3, #8]
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	685a      	ldr	r2, [r3, #4]
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	f000 fb5b 	bl	8007b64 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	689b      	ldr	r3, [r3, #8]
 80074b4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80074bc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	68fa      	ldr	r2, [r7, #12]
 80074c4:	609a      	str	r2, [r3, #8]
      break;
 80074c6:	e04e      	b.n	8007566 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6818      	ldr	r0, [r3, #0]
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	6899      	ldr	r1, [r3, #8]
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	685a      	ldr	r2, [r3, #4]
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	68db      	ldr	r3, [r3, #12]
 80074d8:	f000 fb44 	bl	8007b64 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	689a      	ldr	r2, [r3, #8]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80074ea:	609a      	str	r2, [r3, #8]
      break;
 80074ec:	e03b      	b.n	8007566 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6818      	ldr	r0, [r3, #0]
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	6859      	ldr	r1, [r3, #4]
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	68db      	ldr	r3, [r3, #12]
 80074fa:	461a      	mov	r2, r3
 80074fc:	f000 fab8 	bl	8007a70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	2150      	movs	r1, #80	; 0x50
 8007506:	4618      	mov	r0, r3
 8007508:	f000 fb11 	bl	8007b2e <TIM_ITRx_SetConfig>
      break;
 800750c:	e02b      	b.n	8007566 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6818      	ldr	r0, [r3, #0]
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	6859      	ldr	r1, [r3, #4]
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	68db      	ldr	r3, [r3, #12]
 800751a:	461a      	mov	r2, r3
 800751c:	f000 fad7 	bl	8007ace <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2160      	movs	r1, #96	; 0x60
 8007526:	4618      	mov	r0, r3
 8007528:	f000 fb01 	bl	8007b2e <TIM_ITRx_SetConfig>
      break;
 800752c:	e01b      	b.n	8007566 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6818      	ldr	r0, [r3, #0]
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	6859      	ldr	r1, [r3, #4]
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	68db      	ldr	r3, [r3, #12]
 800753a:	461a      	mov	r2, r3
 800753c:	f000 fa98 	bl	8007a70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	2140      	movs	r1, #64	; 0x40
 8007546:	4618      	mov	r0, r3
 8007548:	f000 faf1 	bl	8007b2e <TIM_ITRx_SetConfig>
      break;
 800754c:	e00b      	b.n	8007566 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4619      	mov	r1, r3
 8007558:	4610      	mov	r0, r2
 800755a:	f000 fae8 	bl	8007b2e <TIM_ITRx_SetConfig>
        break;
 800755e:	e002      	b.n	8007566 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007560:	bf00      	nop
 8007562:	e000      	b.n	8007566 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007564:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2201      	movs	r2, #1
 800756a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007576:	2300      	movs	r3, #0
}
 8007578:	4618      	mov	r0, r3
 800757a:	3710      	adds	r7, #16
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007580:	b480      	push	{r7}
 8007582:	b083      	sub	sp, #12
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007588:	bf00      	nop
 800758a:	370c      	adds	r7, #12
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr

08007594 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007594:	b480      	push	{r7}
 8007596:	b083      	sub	sp, #12
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800759c:	bf00      	nop
 800759e:	370c      	adds	r7, #12
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr

080075a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b083      	sub	sp, #12
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80075b0:	bf00      	nop
 80075b2:	370c      	adds	r7, #12
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr

080075bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80075bc:	b480      	push	{r7}
 80075be:	b083      	sub	sp, #12
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80075c4:	bf00      	nop
 80075c6:	370c      	adds	r7, #12
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr

080075d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b085      	sub	sp, #20
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	4a40      	ldr	r2, [pc, #256]	; (80076e4 <TIM_Base_SetConfig+0x114>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d013      	beq.n	8007610 <TIM_Base_SetConfig+0x40>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075ee:	d00f      	beq.n	8007610 <TIM_Base_SetConfig+0x40>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	4a3d      	ldr	r2, [pc, #244]	; (80076e8 <TIM_Base_SetConfig+0x118>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d00b      	beq.n	8007610 <TIM_Base_SetConfig+0x40>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	4a3c      	ldr	r2, [pc, #240]	; (80076ec <TIM_Base_SetConfig+0x11c>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d007      	beq.n	8007610 <TIM_Base_SetConfig+0x40>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	4a3b      	ldr	r2, [pc, #236]	; (80076f0 <TIM_Base_SetConfig+0x120>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d003      	beq.n	8007610 <TIM_Base_SetConfig+0x40>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	4a3a      	ldr	r2, [pc, #232]	; (80076f4 <TIM_Base_SetConfig+0x124>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d108      	bne.n	8007622 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007616:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	68fa      	ldr	r2, [r7, #12]
 800761e:	4313      	orrs	r3, r2
 8007620:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	4a2f      	ldr	r2, [pc, #188]	; (80076e4 <TIM_Base_SetConfig+0x114>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d02b      	beq.n	8007682 <TIM_Base_SetConfig+0xb2>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007630:	d027      	beq.n	8007682 <TIM_Base_SetConfig+0xb2>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	4a2c      	ldr	r2, [pc, #176]	; (80076e8 <TIM_Base_SetConfig+0x118>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d023      	beq.n	8007682 <TIM_Base_SetConfig+0xb2>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	4a2b      	ldr	r2, [pc, #172]	; (80076ec <TIM_Base_SetConfig+0x11c>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d01f      	beq.n	8007682 <TIM_Base_SetConfig+0xb2>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	4a2a      	ldr	r2, [pc, #168]	; (80076f0 <TIM_Base_SetConfig+0x120>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d01b      	beq.n	8007682 <TIM_Base_SetConfig+0xb2>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	4a29      	ldr	r2, [pc, #164]	; (80076f4 <TIM_Base_SetConfig+0x124>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d017      	beq.n	8007682 <TIM_Base_SetConfig+0xb2>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	4a28      	ldr	r2, [pc, #160]	; (80076f8 <TIM_Base_SetConfig+0x128>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d013      	beq.n	8007682 <TIM_Base_SetConfig+0xb2>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	4a27      	ldr	r2, [pc, #156]	; (80076fc <TIM_Base_SetConfig+0x12c>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d00f      	beq.n	8007682 <TIM_Base_SetConfig+0xb2>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	4a26      	ldr	r2, [pc, #152]	; (8007700 <TIM_Base_SetConfig+0x130>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d00b      	beq.n	8007682 <TIM_Base_SetConfig+0xb2>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	4a25      	ldr	r2, [pc, #148]	; (8007704 <TIM_Base_SetConfig+0x134>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d007      	beq.n	8007682 <TIM_Base_SetConfig+0xb2>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	4a24      	ldr	r2, [pc, #144]	; (8007708 <TIM_Base_SetConfig+0x138>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d003      	beq.n	8007682 <TIM_Base_SetConfig+0xb2>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	4a23      	ldr	r2, [pc, #140]	; (800770c <TIM_Base_SetConfig+0x13c>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d108      	bne.n	8007694 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007688:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	68db      	ldr	r3, [r3, #12]
 800768e:	68fa      	ldr	r2, [r7, #12]
 8007690:	4313      	orrs	r3, r2
 8007692:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	695b      	ldr	r3, [r3, #20]
 800769e:	4313      	orrs	r3, r2
 80076a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	68fa      	ldr	r2, [r7, #12]
 80076a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	689a      	ldr	r2, [r3, #8]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	681a      	ldr	r2, [r3, #0]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	4a0a      	ldr	r2, [pc, #40]	; (80076e4 <TIM_Base_SetConfig+0x114>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d003      	beq.n	80076c8 <TIM_Base_SetConfig+0xf8>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	4a0c      	ldr	r2, [pc, #48]	; (80076f4 <TIM_Base_SetConfig+0x124>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d103      	bne.n	80076d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	691a      	ldr	r2, [r3, #16]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2201      	movs	r2, #1
 80076d4:	615a      	str	r2, [r3, #20]
}
 80076d6:	bf00      	nop
 80076d8:	3714      	adds	r7, #20
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr
 80076e2:	bf00      	nop
 80076e4:	40010000 	.word	0x40010000
 80076e8:	40000400 	.word	0x40000400
 80076ec:	40000800 	.word	0x40000800
 80076f0:	40000c00 	.word	0x40000c00
 80076f4:	40010400 	.word	0x40010400
 80076f8:	40014000 	.word	0x40014000
 80076fc:	40014400 	.word	0x40014400
 8007700:	40014800 	.word	0x40014800
 8007704:	40001800 	.word	0x40001800
 8007708:	40001c00 	.word	0x40001c00
 800770c:	40002000 	.word	0x40002000

08007710 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007710:	b480      	push	{r7}
 8007712:	b087      	sub	sp, #28
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6a1b      	ldr	r3, [r3, #32]
 800771e:	f023 0201 	bic.w	r2, r3, #1
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6a1b      	ldr	r3, [r3, #32]
 800772a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	699b      	ldr	r3, [r3, #24]
 8007736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800773e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f023 0303 	bic.w	r3, r3, #3
 8007746:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	68fa      	ldr	r2, [r7, #12]
 800774e:	4313      	orrs	r3, r2
 8007750:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	f023 0302 	bic.w	r3, r3, #2
 8007758:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	689b      	ldr	r3, [r3, #8]
 800775e:	697a      	ldr	r2, [r7, #20]
 8007760:	4313      	orrs	r3, r2
 8007762:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	4a20      	ldr	r2, [pc, #128]	; (80077e8 <TIM_OC1_SetConfig+0xd8>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d003      	beq.n	8007774 <TIM_OC1_SetConfig+0x64>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	4a1f      	ldr	r2, [pc, #124]	; (80077ec <TIM_OC1_SetConfig+0xdc>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d10c      	bne.n	800778e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	f023 0308 	bic.w	r3, r3, #8
 800777a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	68db      	ldr	r3, [r3, #12]
 8007780:	697a      	ldr	r2, [r7, #20]
 8007782:	4313      	orrs	r3, r2
 8007784:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	f023 0304 	bic.w	r3, r3, #4
 800778c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	4a15      	ldr	r2, [pc, #84]	; (80077e8 <TIM_OC1_SetConfig+0xd8>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d003      	beq.n	800779e <TIM_OC1_SetConfig+0x8e>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	4a14      	ldr	r2, [pc, #80]	; (80077ec <TIM_OC1_SetConfig+0xdc>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d111      	bne.n	80077c2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80077ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	695b      	ldr	r3, [r3, #20]
 80077b2:	693a      	ldr	r2, [r7, #16]
 80077b4:	4313      	orrs	r3, r2
 80077b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	699b      	ldr	r3, [r3, #24]
 80077bc:	693a      	ldr	r2, [r7, #16]
 80077be:	4313      	orrs	r3, r2
 80077c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	693a      	ldr	r2, [r7, #16]
 80077c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	68fa      	ldr	r2, [r7, #12]
 80077cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	685a      	ldr	r2, [r3, #4]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	697a      	ldr	r2, [r7, #20]
 80077da:	621a      	str	r2, [r3, #32]
}
 80077dc:	bf00      	nop
 80077de:	371c      	adds	r7, #28
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr
 80077e8:	40010000 	.word	0x40010000
 80077ec:	40010400 	.word	0x40010400

080077f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b087      	sub	sp, #28
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6a1b      	ldr	r3, [r3, #32]
 80077fe:	f023 0210 	bic.w	r2, r3, #16
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6a1b      	ldr	r3, [r3, #32]
 800780a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	699b      	ldr	r3, [r3, #24]
 8007816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800781e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007826:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	021b      	lsls	r3, r3, #8
 800782e:	68fa      	ldr	r2, [r7, #12]
 8007830:	4313      	orrs	r3, r2
 8007832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	f023 0320 	bic.w	r3, r3, #32
 800783a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	011b      	lsls	r3, r3, #4
 8007842:	697a      	ldr	r2, [r7, #20]
 8007844:	4313      	orrs	r3, r2
 8007846:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	4a22      	ldr	r2, [pc, #136]	; (80078d4 <TIM_OC2_SetConfig+0xe4>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d003      	beq.n	8007858 <TIM_OC2_SetConfig+0x68>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	4a21      	ldr	r2, [pc, #132]	; (80078d8 <TIM_OC2_SetConfig+0xe8>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d10d      	bne.n	8007874 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800785e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	68db      	ldr	r3, [r3, #12]
 8007864:	011b      	lsls	r3, r3, #4
 8007866:	697a      	ldr	r2, [r7, #20]
 8007868:	4313      	orrs	r3, r2
 800786a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007872:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	4a17      	ldr	r2, [pc, #92]	; (80078d4 <TIM_OC2_SetConfig+0xe4>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d003      	beq.n	8007884 <TIM_OC2_SetConfig+0x94>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	4a16      	ldr	r2, [pc, #88]	; (80078d8 <TIM_OC2_SetConfig+0xe8>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d113      	bne.n	80078ac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800788a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007892:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	695b      	ldr	r3, [r3, #20]
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	693a      	ldr	r2, [r7, #16]
 800789c:	4313      	orrs	r3, r2
 800789e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	699b      	ldr	r3, [r3, #24]
 80078a4:	009b      	lsls	r3, r3, #2
 80078a6:	693a      	ldr	r2, [r7, #16]
 80078a8:	4313      	orrs	r3, r2
 80078aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	693a      	ldr	r2, [r7, #16]
 80078b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	68fa      	ldr	r2, [r7, #12]
 80078b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	685a      	ldr	r2, [r3, #4]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	697a      	ldr	r2, [r7, #20]
 80078c4:	621a      	str	r2, [r3, #32]
}
 80078c6:	bf00      	nop
 80078c8:	371c      	adds	r7, #28
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr
 80078d2:	bf00      	nop
 80078d4:	40010000 	.word	0x40010000
 80078d8:	40010400 	.word	0x40010400

080078dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078dc:	b480      	push	{r7}
 80078de:	b087      	sub	sp, #28
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6a1b      	ldr	r3, [r3, #32]
 80078ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6a1b      	ldr	r3, [r3, #32]
 80078f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	69db      	ldr	r3, [r3, #28]
 8007902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800790a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f023 0303 	bic.w	r3, r3, #3
 8007912:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	68fa      	ldr	r2, [r7, #12]
 800791a:	4313      	orrs	r3, r2
 800791c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007924:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	021b      	lsls	r3, r3, #8
 800792c:	697a      	ldr	r2, [r7, #20]
 800792e:	4313      	orrs	r3, r2
 8007930:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	4a21      	ldr	r2, [pc, #132]	; (80079bc <TIM_OC3_SetConfig+0xe0>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d003      	beq.n	8007942 <TIM_OC3_SetConfig+0x66>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4a20      	ldr	r2, [pc, #128]	; (80079c0 <TIM_OC3_SetConfig+0xe4>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d10d      	bne.n	800795e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007948:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	68db      	ldr	r3, [r3, #12]
 800794e:	021b      	lsls	r3, r3, #8
 8007950:	697a      	ldr	r2, [r7, #20]
 8007952:	4313      	orrs	r3, r2
 8007954:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800795c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	4a16      	ldr	r2, [pc, #88]	; (80079bc <TIM_OC3_SetConfig+0xe0>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d003      	beq.n	800796e <TIM_OC3_SetConfig+0x92>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	4a15      	ldr	r2, [pc, #84]	; (80079c0 <TIM_OC3_SetConfig+0xe4>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d113      	bne.n	8007996 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007974:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800797c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	695b      	ldr	r3, [r3, #20]
 8007982:	011b      	lsls	r3, r3, #4
 8007984:	693a      	ldr	r2, [r7, #16]
 8007986:	4313      	orrs	r3, r2
 8007988:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	699b      	ldr	r3, [r3, #24]
 800798e:	011b      	lsls	r3, r3, #4
 8007990:	693a      	ldr	r2, [r7, #16]
 8007992:	4313      	orrs	r3, r2
 8007994:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	693a      	ldr	r2, [r7, #16]
 800799a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	68fa      	ldr	r2, [r7, #12]
 80079a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	685a      	ldr	r2, [r3, #4]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	697a      	ldr	r2, [r7, #20]
 80079ae:	621a      	str	r2, [r3, #32]
}
 80079b0:	bf00      	nop
 80079b2:	371c      	adds	r7, #28
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr
 80079bc:	40010000 	.word	0x40010000
 80079c0:	40010400 	.word	0x40010400

080079c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b087      	sub	sp, #28
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6a1b      	ldr	r3, [r3, #32]
 80079d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6a1b      	ldr	r3, [r3, #32]
 80079de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	69db      	ldr	r3, [r3, #28]
 80079ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	021b      	lsls	r3, r3, #8
 8007a02:	68fa      	ldr	r2, [r7, #12]
 8007a04:	4313      	orrs	r3, r2
 8007a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	031b      	lsls	r3, r3, #12
 8007a16:	693a      	ldr	r2, [r7, #16]
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	4a12      	ldr	r2, [pc, #72]	; (8007a68 <TIM_OC4_SetConfig+0xa4>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d003      	beq.n	8007a2c <TIM_OC4_SetConfig+0x68>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	4a11      	ldr	r2, [pc, #68]	; (8007a6c <TIM_OC4_SetConfig+0xa8>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d109      	bne.n	8007a40 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	695b      	ldr	r3, [r3, #20]
 8007a38:	019b      	lsls	r3, r3, #6
 8007a3a:	697a      	ldr	r2, [r7, #20]
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	697a      	ldr	r2, [r7, #20]
 8007a44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	68fa      	ldr	r2, [r7, #12]
 8007a4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	685a      	ldr	r2, [r3, #4]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	693a      	ldr	r2, [r7, #16]
 8007a58:	621a      	str	r2, [r3, #32]
}
 8007a5a:	bf00      	nop
 8007a5c:	371c      	adds	r7, #28
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a64:	4770      	bx	lr
 8007a66:	bf00      	nop
 8007a68:	40010000 	.word	0x40010000
 8007a6c:	40010400 	.word	0x40010400

08007a70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b087      	sub	sp, #28
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	60f8      	str	r0, [r7, #12]
 8007a78:	60b9      	str	r1, [r7, #8]
 8007a7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	6a1b      	ldr	r3, [r3, #32]
 8007a80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	6a1b      	ldr	r3, [r3, #32]
 8007a86:	f023 0201 	bic.w	r2, r3, #1
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	699b      	ldr	r3, [r3, #24]
 8007a92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	011b      	lsls	r3, r3, #4
 8007aa0:	693a      	ldr	r2, [r7, #16]
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	f023 030a 	bic.w	r3, r3, #10
 8007aac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007aae:	697a      	ldr	r2, [r7, #20]
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	693a      	ldr	r2, [r7, #16]
 8007aba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	697a      	ldr	r2, [r7, #20]
 8007ac0:	621a      	str	r2, [r3, #32]
}
 8007ac2:	bf00      	nop
 8007ac4:	371c      	adds	r7, #28
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007acc:	4770      	bx	lr

08007ace <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ace:	b480      	push	{r7}
 8007ad0:	b087      	sub	sp, #28
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	60f8      	str	r0, [r7, #12]
 8007ad6:	60b9      	str	r1, [r7, #8]
 8007ad8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	6a1b      	ldr	r3, [r3, #32]
 8007ade:	f023 0210 	bic.w	r2, r3, #16
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	699b      	ldr	r3, [r3, #24]
 8007aea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	6a1b      	ldr	r3, [r3, #32]
 8007af0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007af8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	031b      	lsls	r3, r3, #12
 8007afe:	697a      	ldr	r2, [r7, #20]
 8007b00:	4313      	orrs	r3, r2
 8007b02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b0a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	011b      	lsls	r3, r3, #4
 8007b10:	693a      	ldr	r2, [r7, #16]
 8007b12:	4313      	orrs	r3, r2
 8007b14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	697a      	ldr	r2, [r7, #20]
 8007b1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	693a      	ldr	r2, [r7, #16]
 8007b20:	621a      	str	r2, [r3, #32]
}
 8007b22:	bf00      	nop
 8007b24:	371c      	adds	r7, #28
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr

08007b2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007b2e:	b480      	push	{r7}
 8007b30:	b085      	sub	sp, #20
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
 8007b36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007b46:	683a      	ldr	r2, [r7, #0]
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	f043 0307 	orr.w	r3, r3, #7
 8007b50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	68fa      	ldr	r2, [r7, #12]
 8007b56:	609a      	str	r2, [r3, #8]
}
 8007b58:	bf00      	nop
 8007b5a:	3714      	adds	r7, #20
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b62:	4770      	bx	lr

08007b64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b087      	sub	sp, #28
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	60f8      	str	r0, [r7, #12]
 8007b6c:	60b9      	str	r1, [r7, #8]
 8007b6e:	607a      	str	r2, [r7, #4]
 8007b70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	021a      	lsls	r2, r3, #8
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	431a      	orrs	r2, r3
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	697a      	ldr	r2, [r7, #20]
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	697a      	ldr	r2, [r7, #20]
 8007b96:	609a      	str	r2, [r3, #8]
}
 8007b98:	bf00      	nop
 8007b9a:	371c      	adds	r7, #28
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr

08007ba4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b084      	sub	sp, #16
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d109      	bne.n	8007bc8 <HAL_TIMEx_PWMN_Start+0x24>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007bba:	b2db      	uxtb	r3, r3
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	bf14      	ite	ne
 8007bc0:	2301      	movne	r3, #1
 8007bc2:	2300      	moveq	r3, #0
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	e022      	b.n	8007c0e <HAL_TIMEx_PWMN_Start+0x6a>
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	2b04      	cmp	r3, #4
 8007bcc:	d109      	bne.n	8007be2 <HAL_TIMEx_PWMN_Start+0x3e>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	2b01      	cmp	r3, #1
 8007bd8:	bf14      	ite	ne
 8007bda:	2301      	movne	r3, #1
 8007bdc:	2300      	moveq	r3, #0
 8007bde:	b2db      	uxtb	r3, r3
 8007be0:	e015      	b.n	8007c0e <HAL_TIMEx_PWMN_Start+0x6a>
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	2b08      	cmp	r3, #8
 8007be6:	d109      	bne.n	8007bfc <HAL_TIMEx_PWMN_Start+0x58>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	bf14      	ite	ne
 8007bf4:	2301      	movne	r3, #1
 8007bf6:	2300      	moveq	r3, #0
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	e008      	b.n	8007c0e <HAL_TIMEx_PWMN_Start+0x6a>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c02:	b2db      	uxtb	r3, r3
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	bf14      	ite	ne
 8007c08:	2301      	movne	r3, #1
 8007c0a:	2300      	moveq	r3, #0
 8007c0c:	b2db      	uxtb	r3, r3
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d001      	beq.n	8007c16 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8007c12:	2301      	movs	r3, #1
 8007c14:	e06d      	b.n	8007cf2 <HAL_TIMEx_PWMN_Start+0x14e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d104      	bne.n	8007c26 <HAL_TIMEx_PWMN_Start+0x82>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2202      	movs	r2, #2
 8007c20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c24:	e013      	b.n	8007c4e <HAL_TIMEx_PWMN_Start+0xaa>
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	2b04      	cmp	r3, #4
 8007c2a:	d104      	bne.n	8007c36 <HAL_TIMEx_PWMN_Start+0x92>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2202      	movs	r2, #2
 8007c30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007c34:	e00b      	b.n	8007c4e <HAL_TIMEx_PWMN_Start+0xaa>
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	2b08      	cmp	r3, #8
 8007c3a:	d104      	bne.n	8007c46 <HAL_TIMEx_PWMN_Start+0xa2>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2202      	movs	r2, #2
 8007c40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c44:	e003      	b.n	8007c4e <HAL_TIMEx_PWMN_Start+0xaa>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2202      	movs	r2, #2
 8007c4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	2204      	movs	r2, #4
 8007c54:	6839      	ldr	r1, [r7, #0]
 8007c56:	4618      	mov	r0, r3
 8007c58:	f000 f940 	bl	8007edc <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c6a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a22      	ldr	r2, [pc, #136]	; (8007cfc <HAL_TIMEx_PWMN_Start+0x158>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d022      	beq.n	8007cbc <HAL_TIMEx_PWMN_Start+0x118>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c7e:	d01d      	beq.n	8007cbc <HAL_TIMEx_PWMN_Start+0x118>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a1e      	ldr	r2, [pc, #120]	; (8007d00 <HAL_TIMEx_PWMN_Start+0x15c>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d018      	beq.n	8007cbc <HAL_TIMEx_PWMN_Start+0x118>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a1d      	ldr	r2, [pc, #116]	; (8007d04 <HAL_TIMEx_PWMN_Start+0x160>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d013      	beq.n	8007cbc <HAL_TIMEx_PWMN_Start+0x118>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a1b      	ldr	r2, [pc, #108]	; (8007d08 <HAL_TIMEx_PWMN_Start+0x164>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d00e      	beq.n	8007cbc <HAL_TIMEx_PWMN_Start+0x118>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a1a      	ldr	r2, [pc, #104]	; (8007d0c <HAL_TIMEx_PWMN_Start+0x168>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d009      	beq.n	8007cbc <HAL_TIMEx_PWMN_Start+0x118>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a18      	ldr	r2, [pc, #96]	; (8007d10 <HAL_TIMEx_PWMN_Start+0x16c>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d004      	beq.n	8007cbc <HAL_TIMEx_PWMN_Start+0x118>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a17      	ldr	r2, [pc, #92]	; (8007d14 <HAL_TIMEx_PWMN_Start+0x170>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d111      	bne.n	8007ce0 <HAL_TIMEx_PWMN_Start+0x13c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	f003 0307 	and.w	r3, r3, #7
 8007cc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2b06      	cmp	r3, #6
 8007ccc:	d010      	beq.n	8007cf0 <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f042 0201 	orr.w	r2, r2, #1
 8007cdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cde:	e007      	b.n	8007cf0 <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	681a      	ldr	r2, [r3, #0]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f042 0201 	orr.w	r2, r2, #1
 8007cee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007cf0:	2300      	movs	r3, #0
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3710      	adds	r7, #16
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
 8007cfa:	bf00      	nop
 8007cfc:	40010000 	.word	0x40010000
 8007d00:	40000400 	.word	0x40000400
 8007d04:	40000800 	.word	0x40000800
 8007d08:	40000c00 	.word	0x40000c00
 8007d0c:	40010400 	.word	0x40010400
 8007d10:	40014000 	.word	0x40014000
 8007d14:	40001800 	.word	0x40001800

08007d18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b085      	sub	sp, #20
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	d101      	bne.n	8007d30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d2c:	2302      	movs	r3, #2
 8007d2e:	e05a      	b.n	8007de6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2201      	movs	r2, #1
 8007d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2202      	movs	r2, #2
 8007d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	689b      	ldr	r3, [r3, #8]
 8007d4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	68fa      	ldr	r2, [r7, #12]
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	68fa      	ldr	r2, [r7, #12]
 8007d68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a21      	ldr	r2, [pc, #132]	; (8007df4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d022      	beq.n	8007dba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d7c:	d01d      	beq.n	8007dba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a1d      	ldr	r2, [pc, #116]	; (8007df8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d018      	beq.n	8007dba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a1b      	ldr	r2, [pc, #108]	; (8007dfc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d013      	beq.n	8007dba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a1a      	ldr	r2, [pc, #104]	; (8007e00 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d00e      	beq.n	8007dba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a18      	ldr	r2, [pc, #96]	; (8007e04 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d009      	beq.n	8007dba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a17      	ldr	r2, [pc, #92]	; (8007e08 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d004      	beq.n	8007dba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a15      	ldr	r2, [pc, #84]	; (8007e0c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d10c      	bne.n	8007dd4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007dc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	68ba      	ldr	r2, [r7, #8]
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	68ba      	ldr	r2, [r7, #8]
 8007dd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2200      	movs	r2, #0
 8007de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007de4:	2300      	movs	r3, #0
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3714      	adds	r7, #20
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr
 8007df2:	bf00      	nop
 8007df4:	40010000 	.word	0x40010000
 8007df8:	40000400 	.word	0x40000400
 8007dfc:	40000800 	.word	0x40000800
 8007e00:	40000c00 	.word	0x40000c00
 8007e04:	40010400 	.word	0x40010400
 8007e08:	40014000 	.word	0x40014000
 8007e0c:	40001800 	.word	0x40001800

08007e10 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b085      	sub	sp, #20
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d101      	bne.n	8007e2c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007e28:	2302      	movs	r3, #2
 8007e2a:	e03d      	b.n	8007ea8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2201      	movs	r2, #1
 8007e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	68db      	ldr	r3, [r3, #12]
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	689b      	ldr	r3, [r3, #8]
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	691b      	ldr	r3, [r3, #16]
 8007e76:	4313      	orrs	r3, r2
 8007e78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	695b      	ldr	r3, [r3, #20]
 8007e84:	4313      	orrs	r3, r2
 8007e86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	69db      	ldr	r3, [r3, #28]
 8007e92:	4313      	orrs	r3, r2
 8007e94:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	68fa      	ldr	r2, [r7, #12]
 8007e9c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ea6:	2300      	movs	r3, #0
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3714      	adds	r7, #20
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr

08007eb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b083      	sub	sp, #12
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ebc:	bf00      	nop
 8007ebe:	370c      	adds	r7, #12
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b083      	sub	sp, #12
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ed0:	bf00      	nop
 8007ed2:	370c      	adds	r7, #12
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr

08007edc <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b087      	sub	sp, #28
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	60f8      	str	r0, [r7, #12]
 8007ee4:	60b9      	str	r1, [r7, #8]
 8007ee6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	f003 031f 	and.w	r3, r3, #31
 8007eee:	2204      	movs	r2, #4
 8007ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ef4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	6a1a      	ldr	r2, [r3, #32]
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	43db      	mvns	r3, r3
 8007efe:	401a      	ands	r2, r3
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	6a1a      	ldr	r2, [r3, #32]
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	f003 031f 	and.w	r3, r3, #31
 8007f0e:	6879      	ldr	r1, [r7, #4]
 8007f10:	fa01 f303 	lsl.w	r3, r1, r3
 8007f14:	431a      	orrs	r2, r3
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	621a      	str	r2, [r3, #32]
}
 8007f1a:	bf00      	nop
 8007f1c:	371c      	adds	r7, #28
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f24:	4770      	bx	lr

08007f26 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f26:	b580      	push	{r7, lr}
 8007f28:	b082      	sub	sp, #8
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d101      	bne.n	8007f38 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f34:	2301      	movs	r3, #1
 8007f36:	e03f      	b.n	8007fb8 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f3e:	b2db      	uxtb	r3, r3
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d106      	bne.n	8007f52 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2200      	movs	r2, #0
 8007f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f7fb fbf7 	bl	8003740 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2224      	movs	r2, #36	; 0x24
 8007f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	68da      	ldr	r2, [r3, #12]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f68:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 fd92 	bl	8008a94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	691a      	ldr	r2, [r3, #16]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007f7e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	695a      	ldr	r2, [r3, #20]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007f8e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	68da      	ldr	r2, [r3, #12]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f9e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2220      	movs	r2, #32
 8007faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2220      	movs	r2, #32
 8007fb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007fb6:	2300      	movs	r3, #0
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3708      	adds	r7, #8
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b082      	sub	sp, #8
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d101      	bne.n	8007fd2 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	e047      	b.n	8008062 <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d106      	bne.n	8007fec <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f7fb fbaa 	bl	8003740 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2224      	movs	r2, #36	; 0x24
 8007ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	68da      	ldr	r2, [r3, #12]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008002:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f000 fd45 	bl	8008a94 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	691a      	ldr	r2, [r3, #16]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008018:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	695a      	ldr	r2, [r3, #20]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8008028:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	695a      	ldr	r2, [r3, #20]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f042 0208 	orr.w	r2, r2, #8
 8008038:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	68da      	ldr	r2, [r3, #12]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008048:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2200      	movs	r2, #0
 800804e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2220      	movs	r2, #32
 8008054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2220      	movs	r2, #32
 800805c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008060:	2300      	movs	r3, #0
}
 8008062:	4618      	mov	r0, r3
 8008064:	3708      	adds	r7, #8
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
	...

0800806c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b086      	sub	sp, #24
 8008070:	af00      	add	r7, sp, #0
 8008072:	60f8      	str	r0, [r7, #12]
 8008074:	60b9      	str	r1, [r7, #8]
 8008076:	4613      	mov	r3, r2
 8008078:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008080:	b2db      	uxtb	r3, r3
 8008082:	2b20      	cmp	r3, #32
 8008084:	d153      	bne.n	800812e <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d002      	beq.n	8008092 <HAL_UART_Transmit_DMA+0x26>
 800808c:	88fb      	ldrh	r3, [r7, #6]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d101      	bne.n	8008096 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	e04c      	b.n	8008130 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800809c:	2b01      	cmp	r3, #1
 800809e:	d101      	bne.n	80080a4 <HAL_UART_Transmit_DMA+0x38>
 80080a0:	2302      	movs	r3, #2
 80080a2:	e045      	b.n	8008130 <HAL_UART_Transmit_DMA+0xc4>
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2201      	movs	r2, #1
 80080a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80080ac:	68ba      	ldr	r2, [r7, #8]
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	88fa      	ldrh	r2, [r7, #6]
 80080b6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	88fa      	ldrh	r2, [r7, #6]
 80080bc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2200      	movs	r2, #0
 80080c2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2221      	movs	r2, #33	; 0x21
 80080c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080d0:	4a19      	ldr	r2, [pc, #100]	; (8008138 <HAL_UART_Transmit_DMA+0xcc>)
 80080d2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080d8:	4a18      	ldr	r2, [pc, #96]	; (800813c <HAL_UART_Transmit_DMA+0xd0>)
 80080da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080e0:	4a17      	ldr	r2, [pc, #92]	; (8008140 <HAL_UART_Transmit_DMA+0xd4>)
 80080e2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080e8:	2200      	movs	r2, #0
 80080ea:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80080ec:	f107 0308 	add.w	r3, r7, #8
 80080f0:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	6819      	ldr	r1, [r3, #0]
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	3304      	adds	r3, #4
 8008100:	461a      	mov	r2, r3
 8008102:	88fb      	ldrh	r3, [r7, #6]
 8008104:	f7fc fcee 	bl	8004ae4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008110:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2200      	movs	r2, #0
 8008116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	695a      	ldr	r2, [r3, #20]
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008128:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800812a:	2300      	movs	r3, #0
 800812c:	e000      	b.n	8008130 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800812e:	2302      	movs	r3, #2
  }
}
 8008130:	4618      	mov	r0, r3
 8008132:	3718      	adds	r7, #24
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}
 8008138:	08008551 	.word	0x08008551
 800813c:	080085a3 	.word	0x080085a3
 8008140:	0800868b 	.word	0x0800868b

08008144 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b084      	sub	sp, #16
 8008148:	af00      	add	r7, sp, #0
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	60b9      	str	r1, [r7, #8]
 800814e:	4613      	mov	r3, r2
 8008150:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008158:	b2db      	uxtb	r3, r3
 800815a:	2b20      	cmp	r3, #32
 800815c:	d11d      	bne.n	800819a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d002      	beq.n	800816a <HAL_UART_Receive_DMA+0x26>
 8008164:	88fb      	ldrh	r3, [r7, #6]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d101      	bne.n	800816e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800816a:	2301      	movs	r3, #1
 800816c:	e016      	b.n	800819c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008174:	2b01      	cmp	r3, #1
 8008176:	d101      	bne.n	800817c <HAL_UART_Receive_DMA+0x38>
 8008178:	2302      	movs	r3, #2
 800817a:	e00f      	b.n	800819c <HAL_UART_Receive_DMA+0x58>
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2201      	movs	r2, #1
 8008180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2200      	movs	r2, #0
 8008188:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 800818a:	88fb      	ldrh	r3, [r7, #6]
 800818c:	461a      	mov	r2, r3
 800818e:	68b9      	ldr	r1, [r7, #8]
 8008190:	68f8      	ldr	r0, [r7, #12]
 8008192:	f000 fac5 	bl	8008720 <UART_Start_Receive_DMA>
 8008196:	4603      	mov	r3, r0
 8008198:	e000      	b.n	800819c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800819a:	2302      	movs	r3, #2
  }
}
 800819c:	4618      	mov	r0, r3
 800819e:	3710      	adds	r7, #16
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b08a      	sub	sp, #40	; 0x28
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	68db      	ldr	r3, [r3, #12]
 80081ba:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	695b      	ldr	r3, [r3, #20]
 80081c2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80081c4:	2300      	movs	r3, #0
 80081c6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80081c8:	2300      	movs	r3, #0
 80081ca:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80081cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ce:	f003 030f 	and.w	r3, r3, #15
 80081d2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80081d4:	69bb      	ldr	r3, [r7, #24]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d10d      	bne.n	80081f6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80081da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081dc:	f003 0320 	and.w	r3, r3, #32
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d008      	beq.n	80081f6 <HAL_UART_IRQHandler+0x52>
 80081e4:	6a3b      	ldr	r3, [r7, #32]
 80081e6:	f003 0320 	and.w	r3, r3, #32
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d003      	beq.n	80081f6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 fbb9 	bl	8008966 <UART_Receive_IT>
      return;
 80081f4:	e17c      	b.n	80084f0 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80081f6:	69bb      	ldr	r3, [r7, #24]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	f000 80b1 	beq.w	8008360 <HAL_UART_IRQHandler+0x1bc>
 80081fe:	69fb      	ldr	r3, [r7, #28]
 8008200:	f003 0301 	and.w	r3, r3, #1
 8008204:	2b00      	cmp	r3, #0
 8008206:	d105      	bne.n	8008214 <HAL_UART_IRQHandler+0x70>
 8008208:	6a3b      	ldr	r3, [r7, #32]
 800820a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800820e:	2b00      	cmp	r3, #0
 8008210:	f000 80a6 	beq.w	8008360 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008216:	f003 0301 	and.w	r3, r3, #1
 800821a:	2b00      	cmp	r3, #0
 800821c:	d00a      	beq.n	8008234 <HAL_UART_IRQHandler+0x90>
 800821e:	6a3b      	ldr	r3, [r7, #32]
 8008220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008224:	2b00      	cmp	r3, #0
 8008226:	d005      	beq.n	8008234 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800822c:	f043 0201 	orr.w	r2, r3, #1
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008236:	f003 0304 	and.w	r3, r3, #4
 800823a:	2b00      	cmp	r3, #0
 800823c:	d00a      	beq.n	8008254 <HAL_UART_IRQHandler+0xb0>
 800823e:	69fb      	ldr	r3, [r7, #28]
 8008240:	f003 0301 	and.w	r3, r3, #1
 8008244:	2b00      	cmp	r3, #0
 8008246:	d005      	beq.n	8008254 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800824c:	f043 0202 	orr.w	r2, r3, #2
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008256:	f003 0302 	and.w	r3, r3, #2
 800825a:	2b00      	cmp	r3, #0
 800825c:	d00a      	beq.n	8008274 <HAL_UART_IRQHandler+0xd0>
 800825e:	69fb      	ldr	r3, [r7, #28]
 8008260:	f003 0301 	and.w	r3, r3, #1
 8008264:	2b00      	cmp	r3, #0
 8008266:	d005      	beq.n	8008274 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800826c:	f043 0204 	orr.w	r2, r3, #4
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008276:	f003 0308 	and.w	r3, r3, #8
 800827a:	2b00      	cmp	r3, #0
 800827c:	d00f      	beq.n	800829e <HAL_UART_IRQHandler+0xfa>
 800827e:	6a3b      	ldr	r3, [r7, #32]
 8008280:	f003 0320 	and.w	r3, r3, #32
 8008284:	2b00      	cmp	r3, #0
 8008286:	d104      	bne.n	8008292 <HAL_UART_IRQHandler+0xee>
 8008288:	69fb      	ldr	r3, [r7, #28]
 800828a:	f003 0301 	and.w	r3, r3, #1
 800828e:	2b00      	cmp	r3, #0
 8008290:	d005      	beq.n	800829e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008296:	f043 0208 	orr.w	r2, r3, #8
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	f000 811f 	beq.w	80084e6 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80082a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082aa:	f003 0320 	and.w	r3, r3, #32
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d007      	beq.n	80082c2 <HAL_UART_IRQHandler+0x11e>
 80082b2:	6a3b      	ldr	r3, [r7, #32]
 80082b4:	f003 0320 	and.w	r3, r3, #32
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d002      	beq.n	80082c2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 fb52 	bl	8008966 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	695b      	ldr	r3, [r3, #20]
 80082c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082cc:	2b40      	cmp	r3, #64	; 0x40
 80082ce:	bf0c      	ite	eq
 80082d0:	2301      	moveq	r3, #1
 80082d2:	2300      	movne	r3, #0
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082dc:	f003 0308 	and.w	r3, r3, #8
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d102      	bne.n	80082ea <HAL_UART_IRQHandler+0x146>
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d031      	beq.n	800834e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f000 fa92 	bl	8008814 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	695b      	ldr	r3, [r3, #20]
 80082f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082fa:	2b40      	cmp	r3, #64	; 0x40
 80082fc:	d123      	bne.n	8008346 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	695a      	ldr	r2, [r3, #20]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800830c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008312:	2b00      	cmp	r3, #0
 8008314:	d013      	beq.n	800833e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800831a:	4a77      	ldr	r2, [pc, #476]	; (80084f8 <HAL_UART_IRQHandler+0x354>)
 800831c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008322:	4618      	mov	r0, r3
 8008324:	f7fc fca6 	bl	8004c74 <HAL_DMA_Abort_IT>
 8008328:	4603      	mov	r3, r0
 800832a:	2b00      	cmp	r3, #0
 800832c:	d016      	beq.n	800835c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008332:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008338:	4610      	mov	r0, r2
 800833a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800833c:	e00e      	b.n	800835c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f7fa f834 	bl	80023ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008344:	e00a      	b.n	800835c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f7fa f830 	bl	80023ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800834c:	e006      	b.n	800835c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f7fa f82c 	bl	80023ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2200      	movs	r2, #0
 8008358:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800835a:	e0c4      	b.n	80084e6 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800835c:	bf00      	nop
    return;
 800835e:	e0c2      	b.n	80084e6 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008364:	2b01      	cmp	r3, #1
 8008366:	f040 80a2 	bne.w	80084ae <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800836a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836c:	f003 0310 	and.w	r3, r3, #16
 8008370:	2b00      	cmp	r3, #0
 8008372:	f000 809c 	beq.w	80084ae <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8008376:	6a3b      	ldr	r3, [r7, #32]
 8008378:	f003 0310 	and.w	r3, r3, #16
 800837c:	2b00      	cmp	r3, #0
 800837e:	f000 8096 	beq.w	80084ae <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008382:	2300      	movs	r3, #0
 8008384:	60fb      	str	r3, [r7, #12]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	60fb      	str	r3, [r7, #12]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	60fb      	str	r3, [r7, #12]
 8008396:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	695b      	ldr	r3, [r3, #20]
 800839e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083a2:	2b40      	cmp	r3, #64	; 0x40
 80083a4:	d14f      	bne.n	8008446 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80083b0:	8a3b      	ldrh	r3, [r7, #16]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	f000 8099 	beq.w	80084ea <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80083bc:	8a3a      	ldrh	r2, [r7, #16]
 80083be:	429a      	cmp	r2, r3
 80083c0:	f080 8093 	bcs.w	80084ea <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	8a3a      	ldrh	r2, [r7, #16]
 80083c8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ce:	69db      	ldr	r3, [r3, #28]
 80083d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083d4:	d02b      	beq.n	800842e <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	68da      	ldr	r2, [r3, #12]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80083e4:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	695a      	ldr	r2, [r3, #20]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f022 0201 	bic.w	r2, r2, #1
 80083f4:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	695a      	ldr	r2, [r3, #20]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008404:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2220      	movs	r2, #32
 800840a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2200      	movs	r2, #0
 8008412:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	68da      	ldr	r2, [r3, #12]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f022 0210 	bic.w	r2, r2, #16
 8008422:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008428:	4618      	mov	r0, r3
 800842a:	f7fc fbb3 	bl	8004b94 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008436:	b29b      	uxth	r3, r3
 8008438:	1ad3      	subs	r3, r2, r3
 800843a:	b29b      	uxth	r3, r3
 800843c:	4619      	mov	r1, r3
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 f87a 	bl	8008538 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008444:	e051      	b.n	80084ea <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800844e:	b29b      	uxth	r3, r3
 8008450:	1ad3      	subs	r3, r2, r3
 8008452:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008458:	b29b      	uxth	r3, r3
 800845a:	2b00      	cmp	r3, #0
 800845c:	d047      	beq.n	80084ee <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800845e:	8a7b      	ldrh	r3, [r7, #18]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d044      	beq.n	80084ee <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	68da      	ldr	r2, [r3, #12]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008472:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	695a      	ldr	r2, [r3, #20]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f022 0201 	bic.w	r2, r2, #1
 8008482:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2220      	movs	r2, #32
 8008488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2200      	movs	r2, #0
 8008490:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	68da      	ldr	r2, [r3, #12]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f022 0210 	bic.w	r2, r2, #16
 80084a0:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80084a2:	8a7b      	ldrh	r3, [r7, #18]
 80084a4:	4619      	mov	r1, r3
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 f846 	bl	8008538 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80084ac:	e01f      	b.n	80084ee <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80084ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d008      	beq.n	80084ca <HAL_UART_IRQHandler+0x326>
 80084b8:	6a3b      	ldr	r3, [r7, #32]
 80084ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d003      	beq.n	80084ca <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 f9e7 	bl	8008896 <UART_Transmit_IT>
    return;
 80084c8:	e012      	b.n	80084f0 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80084ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d00d      	beq.n	80084f0 <HAL_UART_IRQHandler+0x34c>
 80084d4:	6a3b      	ldr	r3, [r7, #32]
 80084d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d008      	beq.n	80084f0 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 fa29 	bl	8008936 <UART_EndTransmit_IT>
    return;
 80084e4:	e004      	b.n	80084f0 <HAL_UART_IRQHandler+0x34c>
    return;
 80084e6:	bf00      	nop
 80084e8:	e002      	b.n	80084f0 <HAL_UART_IRQHandler+0x34c>
      return;
 80084ea:	bf00      	nop
 80084ec:	e000      	b.n	80084f0 <HAL_UART_IRQHandler+0x34c>
      return;
 80084ee:	bf00      	nop
  }
}
 80084f0:	3728      	adds	r7, #40	; 0x28
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
 80084f6:	bf00      	nop
 80084f8:	0800886f 	.word	0x0800886f

080084fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b083      	sub	sp, #12
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008504:	bf00      	nop
 8008506:	370c      	adds	r7, #12
 8008508:	46bd      	mov	sp, r7
 800850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850e:	4770      	bx	lr

08008510 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008510:	b480      	push	{r7}
 8008512:	b083      	sub	sp, #12
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008518:	bf00      	nop
 800851a:	370c      	adds	r7, #12
 800851c:	46bd      	mov	sp, r7
 800851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008522:	4770      	bx	lr

08008524 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008524:	b480      	push	{r7}
 8008526:	b083      	sub	sp, #12
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800852c:	bf00      	nop
 800852e:	370c      	adds	r7, #12
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr

08008538 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008538:	b480      	push	{r7}
 800853a:	b083      	sub	sp, #12
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	460b      	mov	r3, r1
 8008542:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008544:	bf00      	nop
 8008546:	370c      	adds	r7, #12
 8008548:	46bd      	mov	sp, r7
 800854a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854e:	4770      	bx	lr

08008550 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b084      	sub	sp, #16
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800855c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008568:	2b00      	cmp	r3, #0
 800856a:	d113      	bne.n	8008594 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2200      	movs	r2, #0
 8008570:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	695a      	ldr	r2, [r3, #20]
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008580:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	68da      	ldr	r2, [r3, #12]
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008590:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008592:	e002      	b.n	800859a <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8008594:	68f8      	ldr	r0, [r7, #12]
 8008596:	f7ff ffb1 	bl	80084fc <HAL_UART_TxCpltCallback>
}
 800859a:	bf00      	nop
 800859c:	3710      	adds	r7, #16
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}

080085a2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80085a2:	b580      	push	{r7, lr}
 80085a4:	b084      	sub	sp, #16
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ae:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80085b0:	68f8      	ldr	r0, [r7, #12]
 80085b2:	f7ff ffad 	bl	8008510 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085b6:	bf00      	nop
 80085b8:	3710      	adds	r7, #16
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}

080085be <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80085be:	b580      	push	{r7, lr}
 80085c0:	b084      	sub	sp, #16
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ca:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d12a      	bne.n	8008630 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	2200      	movs	r2, #0
 80085de:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	68da      	ldr	r2, [r3, #12]
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80085ee:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	695a      	ldr	r2, [r3, #20]
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f022 0201 	bic.w	r2, r2, #1
 80085fe:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	695a      	ldr	r2, [r3, #20]
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800860e:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	2220      	movs	r2, #32
 8008614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800861c:	2b01      	cmp	r3, #1
 800861e:	d107      	bne.n	8008630 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	68da      	ldr	r2, [r3, #12]
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f022 0210 	bic.w	r2, r2, #16
 800862e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008634:	2b01      	cmp	r3, #1
 8008636:	d106      	bne.n	8008646 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800863c:	4619      	mov	r1, r3
 800863e:	68f8      	ldr	r0, [r7, #12]
 8008640:	f7ff ff7a 	bl	8008538 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008644:	e002      	b.n	800864c <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8008646:	68f8      	ldr	r0, [r7, #12]
 8008648:	f7f9 fe64 	bl	8002314 <HAL_UART_RxCpltCallback>
}
 800864c:	bf00      	nop
 800864e:	3710      	adds	r7, #16
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b084      	sub	sp, #16
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008660:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008666:	2b01      	cmp	r3, #1
 8008668:	d108      	bne.n	800867c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800866e:	085b      	lsrs	r3, r3, #1
 8008670:	b29b      	uxth	r3, r3
 8008672:	4619      	mov	r1, r3
 8008674:	68f8      	ldr	r0, [r7, #12]
 8008676:	f7ff ff5f 	bl	8008538 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800867a:	e002      	b.n	8008682 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800867c:	68f8      	ldr	r0, [r7, #12]
 800867e:	f7ff ff51 	bl	8008524 <HAL_UART_RxHalfCpltCallback>
}
 8008682:	bf00      	nop
 8008684:	3710      	adds	r7, #16
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}

0800868a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800868a:	b580      	push	{r7, lr}
 800868c:	b084      	sub	sp, #16
 800868e:	af00      	add	r7, sp, #0
 8008690:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008692:	2300      	movs	r3, #0
 8008694:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800869a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	695b      	ldr	r3, [r3, #20]
 80086a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086a6:	2b80      	cmp	r3, #128	; 0x80
 80086a8:	bf0c      	ite	eq
 80086aa:	2301      	moveq	r3, #1
 80086ac:	2300      	movne	r3, #0
 80086ae:	b2db      	uxtb	r3, r3
 80086b0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086b8:	b2db      	uxtb	r3, r3
 80086ba:	2b21      	cmp	r3, #33	; 0x21
 80086bc:	d108      	bne.n	80086d0 <UART_DMAError+0x46>
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d005      	beq.n	80086d0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	2200      	movs	r2, #0
 80086c8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80086ca:	68b8      	ldr	r0, [r7, #8]
 80086cc:	f000 f88c 	bl	80087e8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	695b      	ldr	r3, [r3, #20]
 80086d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086da:	2b40      	cmp	r3, #64	; 0x40
 80086dc:	bf0c      	ite	eq
 80086de:	2301      	moveq	r3, #1
 80086e0:	2300      	movne	r3, #0
 80086e2:	b2db      	uxtb	r3, r3
 80086e4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80086ec:	b2db      	uxtb	r3, r3
 80086ee:	2b22      	cmp	r3, #34	; 0x22
 80086f0:	d108      	bne.n	8008704 <UART_DMAError+0x7a>
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d005      	beq.n	8008704 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	2200      	movs	r2, #0
 80086fc:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80086fe:	68b8      	ldr	r0, [r7, #8]
 8008700:	f000 f888 	bl	8008814 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008708:	f043 0210 	orr.w	r2, r3, #16
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008710:	68b8      	ldr	r0, [r7, #8]
 8008712:	f7f9 fe4b 	bl	80023ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008716:	bf00      	nop
 8008718:	3710      	adds	r7, #16
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
	...

08008720 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b086      	sub	sp, #24
 8008724:	af00      	add	r7, sp, #0
 8008726:	60f8      	str	r0, [r7, #12]
 8008728:	60b9      	str	r1, [r7, #8]
 800872a:	4613      	mov	r3, r2
 800872c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800872e:	68ba      	ldr	r2, [r7, #8]
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	88fa      	ldrh	r2, [r7, #6]
 8008738:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2200      	movs	r2, #0
 800873e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2222      	movs	r2, #34	; 0x22
 8008744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800874c:	4a23      	ldr	r2, [pc, #140]	; (80087dc <UART_Start_Receive_DMA+0xbc>)
 800874e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008754:	4a22      	ldr	r2, [pc, #136]	; (80087e0 <UART_Start_Receive_DMA+0xc0>)
 8008756:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800875c:	4a21      	ldr	r2, [pc, #132]	; (80087e4 <UART_Start_Receive_DMA+0xc4>)
 800875e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008764:	2200      	movs	r2, #0
 8008766:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008768:	f107 0308 	add.w	r3, r7, #8
 800876c:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	3304      	adds	r3, #4
 8008778:	4619      	mov	r1, r3
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	681a      	ldr	r2, [r3, #0]
 800877e:	88fb      	ldrh	r3, [r7, #6]
 8008780:	f7fc f9b0 	bl	8004ae4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008784:	2300      	movs	r3, #0
 8008786:	613b      	str	r3, [r7, #16]
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	613b      	str	r3, [r7, #16]
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	613b      	str	r3, [r7, #16]
 8008798:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2200      	movs	r2, #0
 800879e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	68da      	ldr	r2, [r3, #12]
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80087b0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	695a      	ldr	r2, [r3, #20]
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f042 0201 	orr.w	r2, r2, #1
 80087c0:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	695a      	ldr	r2, [r3, #20]
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80087d0:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80087d2:	2300      	movs	r3, #0
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3718      	adds	r7, #24
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}
 80087dc:	080085bf 	.word	0x080085bf
 80087e0:	08008655 	.word	0x08008655
 80087e4:	0800868b 	.word	0x0800868b

080087e8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b083      	sub	sp, #12
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	68da      	ldr	r2, [r3, #12]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80087fe:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2220      	movs	r2, #32
 8008804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008808:	bf00      	nop
 800880a:	370c      	adds	r7, #12
 800880c:	46bd      	mov	sp, r7
 800880e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008812:	4770      	bx	lr

08008814 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008814:	b480      	push	{r7}
 8008816:	b083      	sub	sp, #12
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	68da      	ldr	r2, [r3, #12]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800882a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	695a      	ldr	r2, [r3, #20]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f022 0201 	bic.w	r2, r2, #1
 800883a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008840:	2b01      	cmp	r3, #1
 8008842:	d107      	bne.n	8008854 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	68da      	ldr	r2, [r3, #12]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f022 0210 	bic.w	r2, r2, #16
 8008852:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2220      	movs	r2, #32
 8008858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2200      	movs	r2, #0
 8008860:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008862:	bf00      	nop
 8008864:	370c      	adds	r7, #12
 8008866:	46bd      	mov	sp, r7
 8008868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886c:	4770      	bx	lr

0800886e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800886e:	b580      	push	{r7, lr}
 8008870:	b084      	sub	sp, #16
 8008872:	af00      	add	r7, sp, #0
 8008874:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800887a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2200      	movs	r2, #0
 8008880:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2200      	movs	r2, #0
 8008886:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008888:	68f8      	ldr	r0, [r7, #12]
 800888a:	f7f9 fd8f 	bl	80023ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800888e:	bf00      	nop
 8008890:	3710      	adds	r7, #16
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}

08008896 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008896:	b480      	push	{r7}
 8008898:	b085      	sub	sp, #20
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088a4:	b2db      	uxtb	r3, r3
 80088a6:	2b21      	cmp	r3, #33	; 0x21
 80088a8:	d13e      	bne.n	8008928 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	689b      	ldr	r3, [r3, #8]
 80088ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088b2:	d114      	bne.n	80088de <UART_Transmit_IT+0x48>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	691b      	ldr	r3, [r3, #16]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d110      	bne.n	80088de <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6a1b      	ldr	r3, [r3, #32]
 80088c0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	881b      	ldrh	r3, [r3, #0]
 80088c6:	461a      	mov	r2, r3
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80088d0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6a1b      	ldr	r3, [r3, #32]
 80088d6:	1c9a      	adds	r2, r3, #2
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	621a      	str	r2, [r3, #32]
 80088dc:	e008      	b.n	80088f0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6a1b      	ldr	r3, [r3, #32]
 80088e2:	1c59      	adds	r1, r3, #1
 80088e4:	687a      	ldr	r2, [r7, #4]
 80088e6:	6211      	str	r1, [r2, #32]
 80088e8:	781a      	ldrb	r2, [r3, #0]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	3b01      	subs	r3, #1
 80088f8:	b29b      	uxth	r3, r3
 80088fa:	687a      	ldr	r2, [r7, #4]
 80088fc:	4619      	mov	r1, r3
 80088fe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008900:	2b00      	cmp	r3, #0
 8008902:	d10f      	bne.n	8008924 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	68da      	ldr	r2, [r3, #12]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008912:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	68da      	ldr	r2, [r3, #12]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008922:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008924:	2300      	movs	r3, #0
 8008926:	e000      	b.n	800892a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008928:	2302      	movs	r3, #2
  }
}
 800892a:	4618      	mov	r0, r3
 800892c:	3714      	adds	r7, #20
 800892e:	46bd      	mov	sp, r7
 8008930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008934:	4770      	bx	lr

08008936 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008936:	b580      	push	{r7, lr}
 8008938:	b082      	sub	sp, #8
 800893a:	af00      	add	r7, sp, #0
 800893c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	68da      	ldr	r2, [r3, #12]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800894c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2220      	movs	r2, #32
 8008952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f7ff fdd0 	bl	80084fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800895c:	2300      	movs	r3, #0
}
 800895e:	4618      	mov	r0, r3
 8008960:	3708      	adds	r7, #8
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}

08008966 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008966:	b580      	push	{r7, lr}
 8008968:	b084      	sub	sp, #16
 800896a:	af00      	add	r7, sp, #0
 800896c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008974:	b2db      	uxtb	r3, r3
 8008976:	2b22      	cmp	r3, #34	; 0x22
 8008978:	f040 8087 	bne.w	8008a8a <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	689b      	ldr	r3, [r3, #8]
 8008980:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008984:	d117      	bne.n	80089b6 <UART_Receive_IT+0x50>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	691b      	ldr	r3, [r3, #16]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d113      	bne.n	80089b6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800898e:	2300      	movs	r3, #0
 8008990:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008996:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	685b      	ldr	r3, [r3, #4]
 800899e:	b29b      	uxth	r3, r3
 80089a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089a4:	b29a      	uxth	r2, r3
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ae:	1c9a      	adds	r2, r3, #2
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	629a      	str	r2, [r3, #40]	; 0x28
 80089b4:	e026      	b.n	8008a04 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ba:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80089bc:	2300      	movs	r3, #0
 80089be:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	689b      	ldr	r3, [r3, #8]
 80089c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089c8:	d007      	beq.n	80089da <UART_Receive_IT+0x74>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	689b      	ldr	r3, [r3, #8]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d10a      	bne.n	80089e8 <UART_Receive_IT+0x82>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	691b      	ldr	r3, [r3, #16]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d106      	bne.n	80089e8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	b2da      	uxtb	r2, r3
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	701a      	strb	r2, [r3, #0]
 80089e6:	e008      	b.n	80089fa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	b2db      	uxtb	r3, r3
 80089f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089f4:	b2da      	uxtb	r2, r3
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089fe:	1c5a      	adds	r2, r3, #1
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	3b01      	subs	r3, #1
 8008a0c:	b29b      	uxth	r3, r3
 8008a0e:	687a      	ldr	r2, [r7, #4]
 8008a10:	4619      	mov	r1, r3
 8008a12:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d136      	bne.n	8008a86 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	68da      	ldr	r2, [r3, #12]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f022 0220 	bic.w	r2, r2, #32
 8008a26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	68da      	ldr	r2, [r3, #12]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008a36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	695a      	ldr	r2, [r3, #20]
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f022 0201 	bic.w	r2, r2, #1
 8008a46:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2220      	movs	r2, #32
 8008a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a54:	2b01      	cmp	r3, #1
 8008a56:	d10e      	bne.n	8008a76 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	68da      	ldr	r2, [r3, #12]
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f022 0210 	bic.w	r2, r2, #16
 8008a66:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008a6c:	4619      	mov	r1, r3
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f7ff fd62 	bl	8008538 <HAL_UARTEx_RxEventCallback>
 8008a74:	e002      	b.n	8008a7c <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f7f9 fc4c 	bl	8002314 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8008a82:	2300      	movs	r3, #0
 8008a84:	e002      	b.n	8008a8c <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8008a86:	2300      	movs	r3, #0
 8008a88:	e000      	b.n	8008a8c <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8008a8a:	2302      	movs	r3, #2
  }
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3710      	adds	r7, #16
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}

08008a94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a98:	b09f      	sub	sp, #124	; 0x7c
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	691b      	ldr	r3, [r3, #16]
 8008aa4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008aa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008aaa:	68d9      	ldr	r1, [r3, #12]
 8008aac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008aae:	681a      	ldr	r2, [r3, #0]
 8008ab0:	ea40 0301 	orr.w	r3, r0, r1
 8008ab4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008ab6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ab8:	689a      	ldr	r2, [r3, #8]
 8008aba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008abc:	691b      	ldr	r3, [r3, #16]
 8008abe:	431a      	orrs	r2, r3
 8008ac0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ac2:	695b      	ldr	r3, [r3, #20]
 8008ac4:	431a      	orrs	r2, r3
 8008ac6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ac8:	69db      	ldr	r3, [r3, #28]
 8008aca:	4313      	orrs	r3, r2
 8008acc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008ace:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	68db      	ldr	r3, [r3, #12]
 8008ad4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008ad8:	f021 010c 	bic.w	r1, r1, #12
 8008adc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ade:	681a      	ldr	r2, [r3, #0]
 8008ae0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ae2:	430b      	orrs	r3, r1
 8008ae4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008ae6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	695b      	ldr	r3, [r3, #20]
 8008aec:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008af0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008af2:	6999      	ldr	r1, [r3, #24]
 8008af4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008af6:	681a      	ldr	r2, [r3, #0]
 8008af8:	ea40 0301 	orr.w	r3, r0, r1
 8008afc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008afe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b00:	681a      	ldr	r2, [r3, #0]
 8008b02:	4bc5      	ldr	r3, [pc, #788]	; (8008e18 <UART_SetConfig+0x384>)
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d004      	beq.n	8008b12 <UART_SetConfig+0x7e>
 8008b08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b0a:	681a      	ldr	r2, [r3, #0]
 8008b0c:	4bc3      	ldr	r3, [pc, #780]	; (8008e1c <UART_SetConfig+0x388>)
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	d103      	bne.n	8008b1a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008b12:	f7fd fd51 	bl	80065b8 <HAL_RCC_GetPCLK2Freq>
 8008b16:	6778      	str	r0, [r7, #116]	; 0x74
 8008b18:	e002      	b.n	8008b20 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008b1a:	f7fd fd39 	bl	8006590 <HAL_RCC_GetPCLK1Freq>
 8008b1e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b22:	69db      	ldr	r3, [r3, #28]
 8008b24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b28:	f040 80b6 	bne.w	8008c98 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008b2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b2e:	461c      	mov	r4, r3
 8008b30:	f04f 0500 	mov.w	r5, #0
 8008b34:	4622      	mov	r2, r4
 8008b36:	462b      	mov	r3, r5
 8008b38:	1891      	adds	r1, r2, r2
 8008b3a:	6439      	str	r1, [r7, #64]	; 0x40
 8008b3c:	415b      	adcs	r3, r3
 8008b3e:	647b      	str	r3, [r7, #68]	; 0x44
 8008b40:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008b44:	1912      	adds	r2, r2, r4
 8008b46:	eb45 0303 	adc.w	r3, r5, r3
 8008b4a:	f04f 0000 	mov.w	r0, #0
 8008b4e:	f04f 0100 	mov.w	r1, #0
 8008b52:	00d9      	lsls	r1, r3, #3
 8008b54:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008b58:	00d0      	lsls	r0, r2, #3
 8008b5a:	4602      	mov	r2, r0
 8008b5c:	460b      	mov	r3, r1
 8008b5e:	1911      	adds	r1, r2, r4
 8008b60:	6639      	str	r1, [r7, #96]	; 0x60
 8008b62:	416b      	adcs	r3, r5
 8008b64:	667b      	str	r3, [r7, #100]	; 0x64
 8008b66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	f04f 0300 	mov.w	r3, #0
 8008b70:	1891      	adds	r1, r2, r2
 8008b72:	63b9      	str	r1, [r7, #56]	; 0x38
 8008b74:	415b      	adcs	r3, r3
 8008b76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b78:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008b7c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008b80:	f7f7 fb46 	bl	8000210 <__aeabi_uldivmod>
 8008b84:	4602      	mov	r2, r0
 8008b86:	460b      	mov	r3, r1
 8008b88:	4ba5      	ldr	r3, [pc, #660]	; (8008e20 <UART_SetConfig+0x38c>)
 8008b8a:	fba3 2302 	umull	r2, r3, r3, r2
 8008b8e:	095b      	lsrs	r3, r3, #5
 8008b90:	011e      	lsls	r6, r3, #4
 8008b92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b94:	461c      	mov	r4, r3
 8008b96:	f04f 0500 	mov.w	r5, #0
 8008b9a:	4622      	mov	r2, r4
 8008b9c:	462b      	mov	r3, r5
 8008b9e:	1891      	adds	r1, r2, r2
 8008ba0:	6339      	str	r1, [r7, #48]	; 0x30
 8008ba2:	415b      	adcs	r3, r3
 8008ba4:	637b      	str	r3, [r7, #52]	; 0x34
 8008ba6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008baa:	1912      	adds	r2, r2, r4
 8008bac:	eb45 0303 	adc.w	r3, r5, r3
 8008bb0:	f04f 0000 	mov.w	r0, #0
 8008bb4:	f04f 0100 	mov.w	r1, #0
 8008bb8:	00d9      	lsls	r1, r3, #3
 8008bba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008bbe:	00d0      	lsls	r0, r2, #3
 8008bc0:	4602      	mov	r2, r0
 8008bc2:	460b      	mov	r3, r1
 8008bc4:	1911      	adds	r1, r2, r4
 8008bc6:	65b9      	str	r1, [r7, #88]	; 0x58
 8008bc8:	416b      	adcs	r3, r5
 8008bca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008bcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bce:	685b      	ldr	r3, [r3, #4]
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	f04f 0300 	mov.w	r3, #0
 8008bd6:	1891      	adds	r1, r2, r2
 8008bd8:	62b9      	str	r1, [r7, #40]	; 0x28
 8008bda:	415b      	adcs	r3, r3
 8008bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bde:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008be2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008be6:	f7f7 fb13 	bl	8000210 <__aeabi_uldivmod>
 8008bea:	4602      	mov	r2, r0
 8008bec:	460b      	mov	r3, r1
 8008bee:	4b8c      	ldr	r3, [pc, #560]	; (8008e20 <UART_SetConfig+0x38c>)
 8008bf0:	fba3 1302 	umull	r1, r3, r3, r2
 8008bf4:	095b      	lsrs	r3, r3, #5
 8008bf6:	2164      	movs	r1, #100	; 0x64
 8008bf8:	fb01 f303 	mul.w	r3, r1, r3
 8008bfc:	1ad3      	subs	r3, r2, r3
 8008bfe:	00db      	lsls	r3, r3, #3
 8008c00:	3332      	adds	r3, #50	; 0x32
 8008c02:	4a87      	ldr	r2, [pc, #540]	; (8008e20 <UART_SetConfig+0x38c>)
 8008c04:	fba2 2303 	umull	r2, r3, r2, r3
 8008c08:	095b      	lsrs	r3, r3, #5
 8008c0a:	005b      	lsls	r3, r3, #1
 8008c0c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008c10:	441e      	add	r6, r3
 8008c12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c14:	4618      	mov	r0, r3
 8008c16:	f04f 0100 	mov.w	r1, #0
 8008c1a:	4602      	mov	r2, r0
 8008c1c:	460b      	mov	r3, r1
 8008c1e:	1894      	adds	r4, r2, r2
 8008c20:	623c      	str	r4, [r7, #32]
 8008c22:	415b      	adcs	r3, r3
 8008c24:	627b      	str	r3, [r7, #36]	; 0x24
 8008c26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008c2a:	1812      	adds	r2, r2, r0
 8008c2c:	eb41 0303 	adc.w	r3, r1, r3
 8008c30:	f04f 0400 	mov.w	r4, #0
 8008c34:	f04f 0500 	mov.w	r5, #0
 8008c38:	00dd      	lsls	r5, r3, #3
 8008c3a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008c3e:	00d4      	lsls	r4, r2, #3
 8008c40:	4622      	mov	r2, r4
 8008c42:	462b      	mov	r3, r5
 8008c44:	1814      	adds	r4, r2, r0
 8008c46:	653c      	str	r4, [r7, #80]	; 0x50
 8008c48:	414b      	adcs	r3, r1
 8008c4a:	657b      	str	r3, [r7, #84]	; 0x54
 8008c4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	461a      	mov	r2, r3
 8008c52:	f04f 0300 	mov.w	r3, #0
 8008c56:	1891      	adds	r1, r2, r2
 8008c58:	61b9      	str	r1, [r7, #24]
 8008c5a:	415b      	adcs	r3, r3
 8008c5c:	61fb      	str	r3, [r7, #28]
 8008c5e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008c62:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008c66:	f7f7 fad3 	bl	8000210 <__aeabi_uldivmod>
 8008c6a:	4602      	mov	r2, r0
 8008c6c:	460b      	mov	r3, r1
 8008c6e:	4b6c      	ldr	r3, [pc, #432]	; (8008e20 <UART_SetConfig+0x38c>)
 8008c70:	fba3 1302 	umull	r1, r3, r3, r2
 8008c74:	095b      	lsrs	r3, r3, #5
 8008c76:	2164      	movs	r1, #100	; 0x64
 8008c78:	fb01 f303 	mul.w	r3, r1, r3
 8008c7c:	1ad3      	subs	r3, r2, r3
 8008c7e:	00db      	lsls	r3, r3, #3
 8008c80:	3332      	adds	r3, #50	; 0x32
 8008c82:	4a67      	ldr	r2, [pc, #412]	; (8008e20 <UART_SetConfig+0x38c>)
 8008c84:	fba2 2303 	umull	r2, r3, r2, r3
 8008c88:	095b      	lsrs	r3, r3, #5
 8008c8a:	f003 0207 	and.w	r2, r3, #7
 8008c8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4432      	add	r2, r6
 8008c94:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008c96:	e0b9      	b.n	8008e0c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008c98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c9a:	461c      	mov	r4, r3
 8008c9c:	f04f 0500 	mov.w	r5, #0
 8008ca0:	4622      	mov	r2, r4
 8008ca2:	462b      	mov	r3, r5
 8008ca4:	1891      	adds	r1, r2, r2
 8008ca6:	6139      	str	r1, [r7, #16]
 8008ca8:	415b      	adcs	r3, r3
 8008caa:	617b      	str	r3, [r7, #20]
 8008cac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008cb0:	1912      	adds	r2, r2, r4
 8008cb2:	eb45 0303 	adc.w	r3, r5, r3
 8008cb6:	f04f 0000 	mov.w	r0, #0
 8008cba:	f04f 0100 	mov.w	r1, #0
 8008cbe:	00d9      	lsls	r1, r3, #3
 8008cc0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008cc4:	00d0      	lsls	r0, r2, #3
 8008cc6:	4602      	mov	r2, r0
 8008cc8:	460b      	mov	r3, r1
 8008cca:	eb12 0804 	adds.w	r8, r2, r4
 8008cce:	eb43 0905 	adc.w	r9, r3, r5
 8008cd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f04f 0100 	mov.w	r1, #0
 8008cdc:	f04f 0200 	mov.w	r2, #0
 8008ce0:	f04f 0300 	mov.w	r3, #0
 8008ce4:	008b      	lsls	r3, r1, #2
 8008ce6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008cea:	0082      	lsls	r2, r0, #2
 8008cec:	4640      	mov	r0, r8
 8008cee:	4649      	mov	r1, r9
 8008cf0:	f7f7 fa8e 	bl	8000210 <__aeabi_uldivmod>
 8008cf4:	4602      	mov	r2, r0
 8008cf6:	460b      	mov	r3, r1
 8008cf8:	4b49      	ldr	r3, [pc, #292]	; (8008e20 <UART_SetConfig+0x38c>)
 8008cfa:	fba3 2302 	umull	r2, r3, r3, r2
 8008cfe:	095b      	lsrs	r3, r3, #5
 8008d00:	011e      	lsls	r6, r3, #4
 8008d02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d04:	4618      	mov	r0, r3
 8008d06:	f04f 0100 	mov.w	r1, #0
 8008d0a:	4602      	mov	r2, r0
 8008d0c:	460b      	mov	r3, r1
 8008d0e:	1894      	adds	r4, r2, r2
 8008d10:	60bc      	str	r4, [r7, #8]
 8008d12:	415b      	adcs	r3, r3
 8008d14:	60fb      	str	r3, [r7, #12]
 8008d16:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008d1a:	1812      	adds	r2, r2, r0
 8008d1c:	eb41 0303 	adc.w	r3, r1, r3
 8008d20:	f04f 0400 	mov.w	r4, #0
 8008d24:	f04f 0500 	mov.w	r5, #0
 8008d28:	00dd      	lsls	r5, r3, #3
 8008d2a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008d2e:	00d4      	lsls	r4, r2, #3
 8008d30:	4622      	mov	r2, r4
 8008d32:	462b      	mov	r3, r5
 8008d34:	1814      	adds	r4, r2, r0
 8008d36:	64bc      	str	r4, [r7, #72]	; 0x48
 8008d38:	414b      	adcs	r3, r1
 8008d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	4618      	mov	r0, r3
 8008d42:	f04f 0100 	mov.w	r1, #0
 8008d46:	f04f 0200 	mov.w	r2, #0
 8008d4a:	f04f 0300 	mov.w	r3, #0
 8008d4e:	008b      	lsls	r3, r1, #2
 8008d50:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008d54:	0082      	lsls	r2, r0, #2
 8008d56:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008d5a:	f7f7 fa59 	bl	8000210 <__aeabi_uldivmod>
 8008d5e:	4602      	mov	r2, r0
 8008d60:	460b      	mov	r3, r1
 8008d62:	4b2f      	ldr	r3, [pc, #188]	; (8008e20 <UART_SetConfig+0x38c>)
 8008d64:	fba3 1302 	umull	r1, r3, r3, r2
 8008d68:	095b      	lsrs	r3, r3, #5
 8008d6a:	2164      	movs	r1, #100	; 0x64
 8008d6c:	fb01 f303 	mul.w	r3, r1, r3
 8008d70:	1ad3      	subs	r3, r2, r3
 8008d72:	011b      	lsls	r3, r3, #4
 8008d74:	3332      	adds	r3, #50	; 0x32
 8008d76:	4a2a      	ldr	r2, [pc, #168]	; (8008e20 <UART_SetConfig+0x38c>)
 8008d78:	fba2 2303 	umull	r2, r3, r2, r3
 8008d7c:	095b      	lsrs	r3, r3, #5
 8008d7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d82:	441e      	add	r6, r3
 8008d84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d86:	4618      	mov	r0, r3
 8008d88:	f04f 0100 	mov.w	r1, #0
 8008d8c:	4602      	mov	r2, r0
 8008d8e:	460b      	mov	r3, r1
 8008d90:	1894      	adds	r4, r2, r2
 8008d92:	603c      	str	r4, [r7, #0]
 8008d94:	415b      	adcs	r3, r3
 8008d96:	607b      	str	r3, [r7, #4]
 8008d98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d9c:	1812      	adds	r2, r2, r0
 8008d9e:	eb41 0303 	adc.w	r3, r1, r3
 8008da2:	f04f 0400 	mov.w	r4, #0
 8008da6:	f04f 0500 	mov.w	r5, #0
 8008daa:	00dd      	lsls	r5, r3, #3
 8008dac:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008db0:	00d4      	lsls	r4, r2, #3
 8008db2:	4622      	mov	r2, r4
 8008db4:	462b      	mov	r3, r5
 8008db6:	eb12 0a00 	adds.w	sl, r2, r0
 8008dba:	eb43 0b01 	adc.w	fp, r3, r1
 8008dbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f04f 0100 	mov.w	r1, #0
 8008dc8:	f04f 0200 	mov.w	r2, #0
 8008dcc:	f04f 0300 	mov.w	r3, #0
 8008dd0:	008b      	lsls	r3, r1, #2
 8008dd2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008dd6:	0082      	lsls	r2, r0, #2
 8008dd8:	4650      	mov	r0, sl
 8008dda:	4659      	mov	r1, fp
 8008ddc:	f7f7 fa18 	bl	8000210 <__aeabi_uldivmod>
 8008de0:	4602      	mov	r2, r0
 8008de2:	460b      	mov	r3, r1
 8008de4:	4b0e      	ldr	r3, [pc, #56]	; (8008e20 <UART_SetConfig+0x38c>)
 8008de6:	fba3 1302 	umull	r1, r3, r3, r2
 8008dea:	095b      	lsrs	r3, r3, #5
 8008dec:	2164      	movs	r1, #100	; 0x64
 8008dee:	fb01 f303 	mul.w	r3, r1, r3
 8008df2:	1ad3      	subs	r3, r2, r3
 8008df4:	011b      	lsls	r3, r3, #4
 8008df6:	3332      	adds	r3, #50	; 0x32
 8008df8:	4a09      	ldr	r2, [pc, #36]	; (8008e20 <UART_SetConfig+0x38c>)
 8008dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8008dfe:	095b      	lsrs	r3, r3, #5
 8008e00:	f003 020f 	and.w	r2, r3, #15
 8008e04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4432      	add	r2, r6
 8008e0a:	609a      	str	r2, [r3, #8]
}
 8008e0c:	bf00      	nop
 8008e0e:	377c      	adds	r7, #124	; 0x7c
 8008e10:	46bd      	mov	sp, r7
 8008e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e16:	bf00      	nop
 8008e18:	40011000 	.word	0x40011000
 8008e1c:	40011400 	.word	0x40011400
 8008e20:	51eb851f 	.word	0x51eb851f

08008e24 <__read_flags>:


/*
 * Reads the flag status register and returns the value of the 8-bits register
 */
uint8_t __read_flags() {
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b090      	sub	sp, #64	; 0x40
 8008e28:	af00      	add	r7, sp, #0
	Command cmd = get_default_command();
 8008e2a:	f107 0308 	add.w	r3, r7, #8
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f000 f988 	bl	8009144 <get_default_command>
	with_data(&cmd, 1);
 8008e34:	f107 0308 	add.w	r3, r7, #8
 8008e38:	2101      	movs	r1, #1
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f000 f9b8 	bl	80091b0 <with_data>

	if(!qspi_run(&cmd, READ_FLAG_STATUS_REGISTER)) {
 8008e40:	f107 0308 	add.w	r3, r7, #8
 8008e44:	2170      	movs	r1, #112	; 0x70
 8008e46:	4618      	mov	r0, r3
 8008e48:	f000 f9c4 	bl	80091d4 <qspi_run>

	}

	uint8_t flags;

	if(!qspi_receive(&flags)) {
 8008e4c:	1dfb      	adds	r3, r7, #7
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f000 fa28 	bl	80092a4 <qspi_receive>

	}

	return flags;
 8008e54:	79fb      	ldrb	r3, [r7, #7]
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3740      	adds	r7, #64	; 0x40
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}

08008e5e <__write_enable_latch>:

/*
 * Enables the write latch.
 * This function must be called before each PROGRAM or ERASE operation.
 */
bool __write_enable_latch() {
 8008e5e:	b5b0      	push	{r4, r5, r7, lr}
 8008e60:	b09c      	sub	sp, #112	; 0x70
 8008e62:	af00      	add	r7, sp, #0
	Command cmd = get_default_command();
 8008e64:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f000 f96b 	bl	8009144 <get_default_command>

	if(qspi_run(&cmd, WRITE_ENABLE_LATCH)) {
 8008e6e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008e72:	2106      	movs	r1, #6
 8008e74:	4618      	mov	r0, r3
 8008e76:	f000 f9ad 	bl	80091d4 <qspi_run>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d022      	beq.n	8008ec6 <__write_enable_latch+0x68>
		cmd = get_default_command();
 8008e80:	463b      	mov	r3, r7
 8008e82:	4618      	mov	r0, r3
 8008e84:	f000 f95e 	bl	8009144 <get_default_command>
 8008e88:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8008e8c:	463d      	mov	r5, r7
 8008e8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008e90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008e92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008e94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008e96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008e98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008e9a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008e9e:	e884 0003 	stmia.w	r4, {r0, r1}

		with_data(&cmd, 1);
 8008ea2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008ea6:	2101      	movs	r1, #1
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f000 f981 	bl	80091b0 <with_data>

		if(qspi_poll(&cmd, READ_STATUS_REGISTER, 1, true)) {
 8008eae:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	2201      	movs	r2, #1
 8008eb6:	2105      	movs	r1, #5
 8008eb8:	f000 f9a8 	bl	800920c <qspi_poll>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d001      	beq.n	8008ec6 <__write_enable_latch+0x68>
			return true;
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	e000      	b.n	8008ec8 <__write_enable_latch+0x6a>
		}
	}

	return false;
 8008ec6:	2300      	movs	r3, #0
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3770      	adds	r7, #112	; 0x70
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bdb0      	pop	{r4, r5, r7, pc}

08008ed0 <__write_disable_latch>:

/*
 * Call this function to prevent data corruption when a hardware fault (e.g. protection fault) occurs.
 * Please refer to the documentation for details.
 */
bool __write_disable_latch() {
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b08e      	sub	sp, #56	; 0x38
 8008ed4:	af00      	add	r7, sp, #0
	Command cmd = get_default_command();
 8008ed6:	463b      	mov	r3, r7
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f000 f933 	bl	8009144 <get_default_command>
	return qspi_run(&cmd, WRITE_ENABLE_LATCH);
 8008ede:	463b      	mov	r3, r7
 8008ee0:	2106      	movs	r1, #6
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f000 f976 	bl	80091d4 <qspi_run>
 8008ee8:	4603      	mov	r3, r0
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	3738      	adds	r7, #56	; 0x38
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}

08008ef2 <flash_init>:

/*
 * Initialises the flash driver
 */
void flash_init() {
 8008ef2:	b580      	push	{r7, lr}
 8008ef4:	b090      	sub	sp, #64	; 0x40
 8008ef6:	af00      	add	r7, sp, #0
	uint8_t configuration = 0b00011011; // 1 Dummy cycle
 8008ef8:	231b      	movs	r3, #27
 8008efa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	Command cmd = get_default_command();
 8008efe:	1d3b      	adds	r3, r7, #4
 8008f00:	4618      	mov	r0, r3
 8008f02:	f000 f91f 	bl	8009144 <get_default_command>
	with_data(&cmd, 1);
 8008f06:	1d3b      	adds	r3, r7, #4
 8008f08:	2101      	movs	r1, #1
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f000 f950 	bl	80091b0 <with_data>

	__write_enable_latch();
 8008f10:	f7ff ffa5 	bl	8008e5e <__write_enable_latch>

	if(!qspi_run(&cmd, 0x81)) { // Write volatile configuration register
 8008f14:	1d3b      	adds	r3, r7, #4
 8008f16:	2181      	movs	r1, #129	; 0x81
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f000 f95b 	bl	80091d4 <qspi_run>

	}

	if(!qspi_transmit(&configuration)) {
 8008f1e:	f107 033f 	add.w	r3, r7, #63	; 0x3f
 8008f22:	4618      	mov	r0, r3
 8008f24:	f000 f9a8 	bl	8009278 <qspi_transmit>

	}

	if(!qspi_poll(&cmd, READ_FLAG_STATUS_REGISTER, 7, true)) {
 8008f28:	1d38      	adds	r0, r7, #4
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	2207      	movs	r2, #7
 8008f2e:	2170      	movs	r1, #112	; 0x70
 8008f30:	f000 f96c 	bl	800920c <qspi_poll>

	}
}
 8008f34:	bf00      	nop
 8008f36:	3740      	adds	r7, #64	; 0x40
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}

08008f3c <flash_read>:
 * Test providers:
 * 	 - read_ut.c
 *
 */

void flash_read(uint32_t address, uint8_t* buffer, uint32_t length) {
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b084      	sub	sp, #16
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	60f8      	str	r0, [r7, #12]
 8008f44:	60b9      	str	r1, [r7, #8]
 8008f46:	607a      	str	r2, [r7, #4]
	while(QUADSPI->SR & QUADSPI_SR_BUSY);
 8008f48:	bf00      	nop
 8008f4a:	4b12      	ldr	r3, [pc, #72]	; (8008f94 <flash_read+0x58>)
 8008f4c:	689b      	ldr	r3, [r3, #8]
 8008f4e:	f003 0320 	and.w	r3, r3, #32
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d1f9      	bne.n	8008f4a <flash_read+0xe>
	QUADSPI->CCR = (uint32_t) (FREAD_SINGLE) | (0b00000001 << 24) | (0b00000100 << 16) | (0b00100101 << 8);
 8008f56:	4b0f      	ldr	r3, [pc, #60]	; (8008f94 <flash_read+0x58>)
 8008f58:	4a0f      	ldr	r2, [pc, #60]	; (8008f98 <flash_read+0x5c>)
 8008f5a:	615a      	str	r2, [r3, #20]
	while(QUADSPI->SR & QUADSPI_SR_BUSY);
 8008f5c:	bf00      	nop
 8008f5e:	4b0d      	ldr	r3, [pc, #52]	; (8008f94 <flash_read+0x58>)
 8008f60:	689b      	ldr	r3, [r3, #8]
 8008f62:	f003 0320 	and.w	r3, r3, #32
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d1f9      	bne.n	8008f5e <flash_read+0x22>
	QUADSPI->AR = address;
 8008f6a:	4a0a      	ldr	r2, [pc, #40]	; (8008f94 <flash_read+0x58>)
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	6193      	str	r3, [r2, #24]
	while(QUADSPI->SR & QUADSPI_SR_BUSY);
 8008f70:	bf00      	nop
 8008f72:	4b08      	ldr	r3, [pc, #32]	; (8008f94 <flash_read+0x58>)
 8008f74:	689b      	ldr	r3, [r3, #8]
 8008f76:	f003 0320 	and.w	r3, r3, #32
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d1f9      	bne.n	8008f72 <flash_read+0x36>
	QUADSPI->DLR = length;
 8008f7e:	4a05      	ldr	r2, [pc, #20]	; (8008f94 <flash_read+0x58>)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6113      	str	r3, [r2, #16]

	if(!qspi_receive(buffer)) {
 8008f84:	68b8      	ldr	r0, [r7, #8]
 8008f86:	f000 f98d 	bl	80092a4 <qspi_receive>

	}
}
 8008f8a:	bf00      	nop
 8008f8c:	3710      	adds	r7, #16
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}
 8008f92:	bf00      	nop
 8008f94:	a0001000 	.word	0xa0001000
 8008f98:	0104250b 	.word	0x0104250b

08008f9c <__flash_write_page>:
 * Test providers:
 * 	 - write_ut.c
 *
 */

void __flash_write_page(uint32_t address, uint8_t* buffer, uint32_t length) {
 8008f9c:	b5b0      	push	{r4, r5, r7, lr}
 8008f9e:	b0a2      	sub	sp, #136	; 0x88
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6478      	str	r0, [r7, #68]	; 0x44
 8008fa4:	6439      	str	r1, [r7, #64]	; 0x40
 8008fa6:	63fa      	str	r2, [r7, #60]	; 0x3c
	__write_enable_latch();
 8008fa8:	f7ff ff59 	bl	8008e5e <__write_enable_latch>

	Command cmd = get_default_command();
 8008fac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f000 f8c7 	bl	8009144 <get_default_command>

	with_address(&cmd, address);
 8008fb6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008fba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	f000 f8e1 	bl	8009184 <with_address>
	with_data(&cmd, length);
 8008fc2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008fc6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f000 f8f1 	bl	80091b0 <with_data>

	if(!qspi_run(&cmd, WRITE_SINGLE)) {
 8008fce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008fd2:	2102      	movs	r1, #2
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f000 f8fd 	bl	80091d4 <qspi_run>

	}

	if(!qspi_transmit(buffer)) {
 8008fda:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008fdc:	f000 f94c 	bl	8009278 <qspi_transmit>

	/*
	 * Checks if the controller is ready to proceed to the next command
	 */

	cmd = get_default_command();
 8008fe0:	463b      	mov	r3, r7
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f000 f8ae 	bl	8009144 <get_default_command>
 8008fe8:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8008fec:	463d      	mov	r5, r7
 8008fee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008ff0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008ff2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008ff4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008ff6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008ff8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008ffa:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008ffe:	e884 0003 	stmia.w	r4, {r0, r1}
	with_data(&cmd, 1);
 8009002:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009006:	2101      	movs	r1, #1
 8009008:	4618      	mov	r0, r3
 800900a:	f000 f8d1 	bl	80091b0 <with_data>

	if(!qspi_poll(&cmd, READ_FLAG_STATUS_REGISTER, 7, true)) {
 800900e:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8009012:	2301      	movs	r3, #1
 8009014:	2207      	movs	r2, #7
 8009016:	2170      	movs	r1, #112	; 0x70
 8009018:	f000 f8f8 	bl	800920c <qspi_poll>

	}

	uint8_t flags = __read_flags();
 800901c:	f7ff ff02 	bl	8008e24 <__read_flags>
 8009020:	4603      	mov	r3, r0
 8009022:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	// Checks if the protection fault flag is set
	if(flags & (1 << 4)) {
 8009026:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800902a:	f003 0310 	and.w	r3, r3, #16
 800902e:	2b00      	cmp	r3, #0
 8009030:	d001      	beq.n	8009036 <__flash_write_page+0x9a>
		__write_disable_latch(); // Manually reset the latch
 8009032:	f7ff ff4d 	bl	8008ed0 <__write_disable_latch>


	}
}
 8009036:	bf00      	nop
 8009038:	3788      	adds	r7, #136	; 0x88
 800903a:	46bd      	mov	sp, r7
 800903c:	bdb0      	pop	{r4, r5, r7, pc}

0800903e <flash_write>:

void flash_write(uint32_t address, uint8_t* buffer, uint32_t length) {
 800903e:	b580      	push	{r7, lr}
 8009040:	b086      	sub	sp, #24
 8009042:	af00      	add	r7, sp, #0
 8009044:	60f8      	str	r0, [r7, #12]
 8009046:	60b9      	str	r1, [r7, #8]
 8009048:	607a      	str	r2, [r7, #4]
	uint32_t internal_address = address % PAGE_SIZE;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	b2db      	uxtb	r3, r3
 800904e:	617b      	str	r3, [r7, #20]

	while(internal_address + length > PAGE_SIZE) {
 8009050:	e016      	b.n	8009080 <flash_write+0x42>
		uint32_t write_length = PAGE_SIZE - internal_address;
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8009058:	613b      	str	r3, [r7, #16]

		__flash_write_page(address, buffer, write_length);
 800905a:	693a      	ldr	r2, [r7, #16]
 800905c:	68b9      	ldr	r1, [r7, #8]
 800905e:	68f8      	ldr	r0, [r7, #12]
 8009060:	f7ff ff9c 	bl	8008f9c <__flash_write_page>
		buffer += write_length;
 8009064:	68ba      	ldr	r2, [r7, #8]
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	4413      	add	r3, r2
 800906a:	60bb      	str	r3, [r7, #8]
		address += write_length;
 800906c:	68fa      	ldr	r2, [r7, #12]
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	4413      	add	r3, r2
 8009072:	60fb      	str	r3, [r7, #12]
		length -= write_length;
 8009074:	687a      	ldr	r2, [r7, #4]
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	1ad3      	subs	r3, r2, r3
 800907a:	607b      	str	r3, [r7, #4]

		internal_address = 0;
 800907c:	2300      	movs	r3, #0
 800907e:	617b      	str	r3, [r7, #20]
	while(internal_address + length > PAGE_SIZE) {
 8009080:	697a      	ldr	r2, [r7, #20]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	4413      	add	r3, r2
 8009086:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800908a:	d8e2      	bhi.n	8009052 <flash_write+0x14>
	}

	__flash_write_page(address, buffer, length);
 800908c:	687a      	ldr	r2, [r7, #4]
 800908e:	68b9      	ldr	r1, [r7, #8]
 8009090:	68f8      	ldr	r0, [r7, #12]
 8009092:	f7ff ff83 	bl	8008f9c <__flash_write_page>
}
 8009096:	bf00      	nop
 8009098:	3718      	adds	r7, #24
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}

0800909e <__flash_erase>:


   }
}

void __flash_erase(uint32_t instruction, uint32_t address) {
 800909e:	b5b0      	push	{r4, r5, r7, lr}
 80090a0:	b0a0      	sub	sp, #128	; 0x80
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	63f8      	str	r0, [r7, #60]	; 0x3c
 80090a6:	63b9      	str	r1, [r7, #56]	; 0x38

	__write_enable_latch();
 80090a8:	f7ff fed9 	bl	8008e5e <__write_enable_latch>


	Command cmd = get_default_command();
 80090ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80090b0:	4618      	mov	r0, r3
 80090b2:	f000 f847 	bl	8009144 <get_default_command>
	with_address(&cmd, address);
 80090b6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80090ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80090bc:	4618      	mov	r0, r3
 80090be:	f000 f861 	bl	8009184 <with_address>


	if(!qspi_run(&cmd, instruction)) {
 80090c2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80090c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80090c8:	4618      	mov	r0, r3
 80090ca:	f000 f883 	bl	80091d4 <qspi_run>
	}

	/*
	 * Checks if the controller is ready to proceed to the next command
	 */
	cmd = get_default_command();
 80090ce:	463b      	mov	r3, r7
 80090d0:	4618      	mov	r0, r3
 80090d2:	f000 f837 	bl	8009144 <get_default_command>
 80090d6:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80090da:	463d      	mov	r5, r7
 80090dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80090de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80090e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80090e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80090e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80090e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80090e8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80090ec:	e884 0003 	stmia.w	r4, {r0, r1}
	with_data(&cmd, 1);
 80090f0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80090f4:	2101      	movs	r1, #1
 80090f6:	4618      	mov	r0, r3
 80090f8:	f000 f85a 	bl	80091b0 <with_data>

	if(!qspi_poll(&cmd, READ_FLAG_STATUS_REGISTER, 7, true)) {
 80090fc:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8009100:	2301      	movs	r3, #1
 8009102:	2207      	movs	r2, #7
 8009104:	2170      	movs	r1, #112	; 0x70
 8009106:	f000 f881 	bl	800920c <qspi_poll>
	}

	/*
	 * Checks if the protection fault flag is set
	 */
	uint8_t flags = __read_flags();
 800910a:	f7ff fe8b 	bl	8008e24 <__read_flags>
 800910e:	4603      	mov	r3, r0
 8009110:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	if(flags & (1 << 5)) {
 8009114:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009118:	f003 0320 	and.w	r3, r3, #32
 800911c:	2b00      	cmp	r3, #0
 800911e:	d001      	beq.n	8009124 <__flash_erase+0x86>
		__write_disable_latch(); // Manually reset the latch
 8009120:	f7ff fed6 	bl	8008ed0 <__write_disable_latch>


	}
}
 8009124:	bf00      	nop
 8009126:	3780      	adds	r7, #128	; 0x80
 8009128:	46bd      	mov	sp, r7
 800912a:	bdb0      	pop	{r4, r5, r7, pc}

0800912c <flash_erase_subsector>:

/*
 * Erases the whole sub-sector represented by the provided address.
 * The address may be any of those within the sub-sector.
 */
void flash_erase_subsector(uint32_t address) {
 800912c:	b580      	push	{r7, lr}
 800912e:	b082      	sub	sp, #8
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
	__flash_erase(ERASE_SUBSECTOR, address);
 8009134:	6879      	ldr	r1, [r7, #4]
 8009136:	2020      	movs	r0, #32
 8009138:	f7ff ffb1 	bl	800909e <__flash_erase>
}
 800913c:	bf00      	nop
 800913e:	3708      	adds	r7, #8
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}

08009144 <get_default_command>:
#include "io_driver.h"




Command get_default_command() {
 8009144:	b5b0      	push	{r4, r5, r7, lr}
 8009146:	b090      	sub	sp, #64	; 0x40
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
	Command command = {
 800914c:	f107 0308 	add.w	r3, r7, #8
 8009150:	2238      	movs	r2, #56	; 0x38
 8009152:	2100      	movs	r1, #0
 8009154:	4618      	mov	r0, r3
 8009156:	f002 f939 	bl	800b3cc <memset>
 800915a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800915e:	623b      	str	r3, [r7, #32]
			.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY,
			.SIOOMode = QSPI_SIOO_INST_EVERY_CMD
		}
	};

	return command;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	461d      	mov	r5, r3
 8009164:	f107 0408 	add.w	r4, r7, #8
 8009168:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800916a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800916c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800916e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009170:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009172:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009174:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009178:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	3740      	adds	r7, #64	; 0x40
 8009180:	46bd      	mov	sp, r7
 8009182:	bdb0      	pop	{r4, r5, r7, pc}

08009184 <with_address>:

/*
 * The two following functions enable the programmer to build a QSPI command very easily.
 */
void with_address(Command* cmd, uint32_t address) {
 8009184:	b480      	push	{r7}
 8009186:	b083      	sub	sp, #12
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
 800918c:	6039      	str	r1, [r7, #0]
	cmd->qspi_command.AddressMode = QSPI_ADDRESS_1_LINE;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009194:	61da      	str	r2, [r3, #28]
	cmd->qspi_command.AddressSize = QSPI_ADDRESS_24_BITS;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800919c:	60da      	str	r2, [r3, #12]
	cmd->qspi_command.Address = address;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	683a      	ldr	r2, [r7, #0]
 80091a2:	605a      	str	r2, [r3, #4]
}
 80091a4:	bf00      	nop
 80091a6:	370c      	adds	r7, #12
 80091a8:	46bd      	mov	sp, r7
 80091aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ae:	4770      	bx	lr

080091b0 <with_data>:

void with_data(Command* cmd, uint32_t length) {
 80091b0:	b480      	push	{r7}
 80091b2:	b083      	sub	sp, #12
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
 80091b8:	6039      	str	r1, [r7, #0]
	cmd->qspi_command.DataMode = QSPI_DATA_1_LINE;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80091c0:	625a      	str	r2, [r3, #36]	; 0x24
	cmd->qspi_command.NbData = length;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	683a      	ldr	r2, [r7, #0]
 80091c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80091c8:	bf00      	nop
 80091ca:	370c      	adds	r7, #12
 80091cc:	46bd      	mov	sp, r7
 80091ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d2:	4770      	bx	lr

080091d4 <qspi_run>:


/*
 * Higher-level abstraction layer for the QSPI interface.
 */
bool qspi_run(Command* cmd, uint32_t instruction) {
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b082      	sub	sp, #8
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	6039      	str	r1, [r7, #0]
	cmd->qspi_command.Instruction = instruction;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	683a      	ldr	r2, [r7, #0]
 80091e2:	601a      	str	r2, [r3, #0]
	return HAL_QSPI_Command(&hqspi, &(cmd->qspi_command), IO_TIMEOUT) == HAL_OK;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80091ea:	4619      	mov	r1, r3
 80091ec:	4806      	ldr	r0, [pc, #24]	; (8009208 <qspi_run+0x34>)
 80091ee:	f7fc fbb7 	bl	8005960 <HAL_QSPI_Command>
 80091f2:	4603      	mov	r3, r0
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	bf0c      	ite	eq
 80091f8:	2301      	moveq	r3, #1
 80091fa:	2300      	movne	r3, #0
 80091fc:	b2db      	uxtb	r3, r3
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3708      	adds	r7, #8
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}
 8009206:	bf00      	nop
 8009208:	20007970 	.word	0x20007970

0800920c <qspi_poll>:

bool qspi_poll(Command* cmd, uint32_t instruction, uint8_t bit, bool value) {
 800920c:	b580      	push	{r7, lr}
 800920e:	b08a      	sub	sp, #40	; 0x28
 8009210:	af00      	add	r7, sp, #0
 8009212:	60f8      	str	r0, [r7, #12]
 8009214:	60b9      	str	r1, [r7, #8]
 8009216:	4611      	mov	r1, r2
 8009218:	461a      	mov	r2, r3
 800921a:	460b      	mov	r3, r1
 800921c:	71fb      	strb	r3, [r7, #7]
 800921e:	4613      	mov	r3, r2
 8009220:	71bb      	strb	r3, [r7, #6]
	QSPI_AutoPollingTypeDef poller;

	poller.MatchMode = QSPI_MATCH_MODE_AND;
 8009222:	2300      	movs	r3, #0
 8009224:	623b      	str	r3, [r7, #32]
	poller.StatusBytesSize = 1;
 8009226:	2301      	movs	r3, #1
 8009228:	61fb      	str	r3, [r7, #28]
	poller.Interval = 0x10;
 800922a:	2310      	movs	r3, #16
 800922c:	61bb      	str	r3, [r7, #24]
	poller.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 800922e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009232:	627b      	str	r3, [r7, #36]	; 0x24
	poller.Match = value << bit;
 8009234:	79ba      	ldrb	r2, [r7, #6]
 8009236:	79fb      	ldrb	r3, [r7, #7]
 8009238:	fa02 f303 	lsl.w	r3, r2, r3
 800923c:	613b      	str	r3, [r7, #16]
	poller.Mask = 1 << bit;
 800923e:	79fb      	ldrb	r3, [r7, #7]
 8009240:	2201      	movs	r2, #1
 8009242:	fa02 f303 	lsl.w	r3, r2, r3
 8009246:	617b      	str	r3, [r7, #20]

	cmd->qspi_command.Instruction = instruction;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	68ba      	ldr	r2, [r7, #8]
 800924c:	601a      	str	r2, [r3, #0]

	return HAL_QSPI_AutoPolling(&hqspi, &(cmd->qspi_command), &poller, IO_TIMEOUT) == HAL_OK;
 800924e:	68f9      	ldr	r1, [r7, #12]
 8009250:	f107 0210 	add.w	r2, r7, #16
 8009254:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8009258:	4806      	ldr	r0, [pc, #24]	; (8009274 <qspi_poll+0x68>)
 800925a:	f7fc fd18 	bl	8005c8e <HAL_QSPI_AutoPolling>
 800925e:	4603      	mov	r3, r0
 8009260:	2b00      	cmp	r3, #0
 8009262:	bf0c      	ite	eq
 8009264:	2301      	moveq	r3, #1
 8009266:	2300      	movne	r3, #0
 8009268:	b2db      	uxtb	r3, r3
}
 800926a:	4618      	mov	r0, r3
 800926c:	3728      	adds	r7, #40	; 0x28
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}
 8009272:	bf00      	nop
 8009274:	20007970 	.word	0x20007970

08009278 <qspi_transmit>:

bool qspi_transmit(uint8_t* buffer) {
 8009278:	b580      	push	{r7, lr}
 800927a:	b082      	sub	sp, #8
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
	return HAL_QSPI_Transmit(&hqspi, buffer, IO_TIMEOUT) == HAL_OK;
 8009280:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8009284:	6879      	ldr	r1, [r7, #4]
 8009286:	4806      	ldr	r0, [pc, #24]	; (80092a0 <qspi_transmit+0x28>)
 8009288:	f7fc fbc8 	bl	8005a1c <HAL_QSPI_Transmit>
 800928c:	4603      	mov	r3, r0
 800928e:	2b00      	cmp	r3, #0
 8009290:	bf0c      	ite	eq
 8009292:	2301      	moveq	r3, #1
 8009294:	2300      	movne	r3, #0
 8009296:	b2db      	uxtb	r3, r3
}
 8009298:	4618      	mov	r0, r3
 800929a:	3708      	adds	r7, #8
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}
 80092a0:	20007970 	.word	0x20007970

080092a4 <qspi_receive>:

bool qspi_receive(uint8_t* buffer) {
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b082      	sub	sp, #8
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
	return HAL_QSPI_Receive(&hqspi, buffer, IO_TIMEOUT) == HAL_OK;
 80092ac:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80092b0:	6879      	ldr	r1, [r7, #4]
 80092b2:	4806      	ldr	r0, [pc, #24]	; (80092cc <qspi_receive+0x28>)
 80092b4:	f7fc fc49 	bl	8005b4a <HAL_QSPI_Receive>
 80092b8:	4603      	mov	r3, r0
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	bf0c      	ite	eq
 80092be:	2301      	moveq	r3, #1
 80092c0:	2300      	movne	r3, #0
 80092c2:	b2db      	uxtb	r3, r3
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	3708      	adds	r7, #8
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}
 80092cc:	20007970 	.word	0x20007970

080092d0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b085      	sub	sp, #20
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	4603      	mov	r3, r0
 80092d8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80092da:	2300      	movs	r3, #0
 80092dc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80092de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80092e2:	2b84      	cmp	r3, #132	; 0x84
 80092e4:	d005      	beq.n	80092f2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80092e6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	4413      	add	r3, r2
 80092ee:	3303      	adds	r3, #3
 80092f0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80092f2:	68fb      	ldr	r3, [r7, #12]
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3714      	adds	r7, #20
 80092f8:	46bd      	mov	sp, r7
 80092fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fe:	4770      	bx	lr

08009300 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009304:	f000 ffba 	bl	800a27c <vTaskStartScheduler>
  
  return osOK;
 8009308:	2300      	movs	r3, #0
}
 800930a:	4618      	mov	r0, r3
 800930c:	bd80      	pop	{r7, pc}

0800930e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800930e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009310:	b089      	sub	sp, #36	; 0x24
 8009312:	af04      	add	r7, sp, #16
 8009314:	6078      	str	r0, [r7, #4]
 8009316:	6039      	str	r1, [r7, #0]
      return NULL;
    } 
  }
#elif( configSUPPORT_STATIC_ALLOCATION == 1 )

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	685c      	ldr	r4, [r3, #4]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681d      	ldr	r5, [r3, #0]
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	691e      	ldr	r6, [r3, #16]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800932a:	4618      	mov	r0, r3
 800932c:	f7ff ffd0 	bl	80092d0 <makeFreeRtosPriority>
 8009330:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	695b      	ldr	r3, [r3, #20]
 8009336:	687a      	ldr	r2, [r7, #4]
 8009338:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800933a:	9202      	str	r2, [sp, #8]
 800933c:	9301      	str	r3, [sp, #4]
 800933e:	9100      	str	r1, [sp, #0]
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	4632      	mov	r2, r6
 8009344:	4629      	mov	r1, r5
 8009346:	4620      	mov	r0, r4
 8009348:	f000 fd98 	bl	8009e7c <xTaskCreateStatic>
 800934c:	60f8      	str	r0, [r7, #12]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800934e:	68fb      	ldr	r3, [r7, #12]
}
 8009350:	4618      	mov	r0, r3
 8009352:	3714      	adds	r7, #20
 8009354:	46bd      	mov	sp, r7
 8009356:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009358 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b084      	sub	sp, #16
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d001      	beq.n	800936e <osDelay+0x16>
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	e000      	b.n	8009370 <osDelay+0x18>
 800936e:	2301      	movs	r3, #1
 8009370:	4618      	mov	r0, r3
 8009372:	f000 ff4f 	bl	800a214 <vTaskDelay>
  
  return osOK;
 8009376:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009378:	4618      	mov	r0, r3
 800937a:	3710      	adds	r7, #16
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}

08009380 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009380:	b480      	push	{r7}
 8009382:	b083      	sub	sp, #12
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f103 0208 	add.w	r2, r3, #8
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f04f 32ff 	mov.w	r2, #4294967295
 8009398:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f103 0208 	add.w	r2, r3, #8
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f103 0208 	add.w	r2, r3, #8
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2200      	movs	r2, #0
 80093b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80093b4:	bf00      	nop
 80093b6:	370c      	adds	r7, #12
 80093b8:	46bd      	mov	sp, r7
 80093ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093be:	4770      	bx	lr

080093c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80093c0:	b480      	push	{r7}
 80093c2:	b083      	sub	sp, #12
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2200      	movs	r2, #0
 80093cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80093ce:	bf00      	nop
 80093d0:	370c      	adds	r7, #12
 80093d2:	46bd      	mov	sp, r7
 80093d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d8:	4770      	bx	lr

080093da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80093da:	b480      	push	{r7}
 80093dc:	b085      	sub	sp, #20
 80093de:	af00      	add	r7, sp, #0
 80093e0:	6078      	str	r0, [r7, #4]
 80093e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	685b      	ldr	r3, [r3, #4]
 80093e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	68fa      	ldr	r2, [r7, #12]
 80093ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	689a      	ldr	r2, [r3, #8]
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	689b      	ldr	r3, [r3, #8]
 80093fc:	683a      	ldr	r2, [r7, #0]
 80093fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	683a      	ldr	r2, [r7, #0]
 8009404:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	687a      	ldr	r2, [r7, #4]
 800940a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	1c5a      	adds	r2, r3, #1
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	601a      	str	r2, [r3, #0]
}
 8009416:	bf00      	nop
 8009418:	3714      	adds	r7, #20
 800941a:	46bd      	mov	sp, r7
 800941c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009420:	4770      	bx	lr

08009422 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009422:	b480      	push	{r7}
 8009424:	b085      	sub	sp, #20
 8009426:	af00      	add	r7, sp, #0
 8009428:	6078      	str	r0, [r7, #4]
 800942a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009438:	d103      	bne.n	8009442 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	691b      	ldr	r3, [r3, #16]
 800943e:	60fb      	str	r3, [r7, #12]
 8009440:	e00c      	b.n	800945c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	3308      	adds	r3, #8
 8009446:	60fb      	str	r3, [r7, #12]
 8009448:	e002      	b.n	8009450 <vListInsert+0x2e>
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	685b      	ldr	r3, [r3, #4]
 800944e:	60fb      	str	r3, [r7, #12]
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	685b      	ldr	r3, [r3, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	68ba      	ldr	r2, [r7, #8]
 8009458:	429a      	cmp	r2, r3
 800945a:	d2f6      	bcs.n	800944a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	685a      	ldr	r2, [r3, #4]
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	685b      	ldr	r3, [r3, #4]
 8009468:	683a      	ldr	r2, [r7, #0]
 800946a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	68fa      	ldr	r2, [r7, #12]
 8009470:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	683a      	ldr	r2, [r7, #0]
 8009476:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	687a      	ldr	r2, [r7, #4]
 800947c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	1c5a      	adds	r2, r3, #1
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	601a      	str	r2, [r3, #0]
}
 8009488:	bf00      	nop
 800948a:	3714      	adds	r7, #20
 800948c:	46bd      	mov	sp, r7
 800948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009492:	4770      	bx	lr

08009494 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009494:	b480      	push	{r7}
 8009496:	b085      	sub	sp, #20
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	691b      	ldr	r3, [r3, #16]
 80094a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	685b      	ldr	r3, [r3, #4]
 80094a6:	687a      	ldr	r2, [r7, #4]
 80094a8:	6892      	ldr	r2, [r2, #8]
 80094aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	689b      	ldr	r3, [r3, #8]
 80094b0:	687a      	ldr	r2, [r7, #4]
 80094b2:	6852      	ldr	r2, [r2, #4]
 80094b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	685b      	ldr	r3, [r3, #4]
 80094ba:	687a      	ldr	r2, [r7, #4]
 80094bc:	429a      	cmp	r2, r3
 80094be:	d103      	bne.n	80094c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	689a      	ldr	r2, [r3, #8]
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2200      	movs	r2, #0
 80094cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	1e5a      	subs	r2, r3, #1
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
}
 80094dc:	4618      	mov	r0, r3
 80094de:	3714      	adds	r7, #20
 80094e0:	46bd      	mov	sp, r7
 80094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e6:	4770      	bx	lr

080094e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b084      	sub	sp, #16
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
 80094f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d10a      	bne.n	8009512 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80094fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009500:	f383 8811 	msr	BASEPRI, r3
 8009504:	f3bf 8f6f 	isb	sy
 8009508:	f3bf 8f4f 	dsb	sy
 800950c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800950e:	bf00      	nop
 8009510:	e7fe      	b.n	8009510 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009512:	f001 fe07 	bl	800b124 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681a      	ldr	r2, [r3, #0]
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800951e:	68f9      	ldr	r1, [r7, #12]
 8009520:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009522:	fb01 f303 	mul.w	r3, r1, r3
 8009526:	441a      	add	r2, r3
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	2200      	movs	r2, #0
 8009530:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681a      	ldr	r2, [r3, #0]
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681a      	ldr	r2, [r3, #0]
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009542:	3b01      	subs	r3, #1
 8009544:	68f9      	ldr	r1, [r7, #12]
 8009546:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009548:	fb01 f303 	mul.w	r3, r1, r3
 800954c:	441a      	add	r2, r3
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	22ff      	movs	r2, #255	; 0xff
 8009556:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	22ff      	movs	r2, #255	; 0xff
 800955e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d114      	bne.n	8009592 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	691b      	ldr	r3, [r3, #16]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d01a      	beq.n	80095a6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	3310      	adds	r3, #16
 8009574:	4618      	mov	r0, r3
 8009576:	f001 f8ef 	bl	800a758 <xTaskRemoveFromEventList>
 800957a:	4603      	mov	r3, r0
 800957c:	2b00      	cmp	r3, #0
 800957e:	d012      	beq.n	80095a6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009580:	4b0c      	ldr	r3, [pc, #48]	; (80095b4 <xQueueGenericReset+0xcc>)
 8009582:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009586:	601a      	str	r2, [r3, #0]
 8009588:	f3bf 8f4f 	dsb	sy
 800958c:	f3bf 8f6f 	isb	sy
 8009590:	e009      	b.n	80095a6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	3310      	adds	r3, #16
 8009596:	4618      	mov	r0, r3
 8009598:	f7ff fef2 	bl	8009380 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	3324      	adds	r3, #36	; 0x24
 80095a0:	4618      	mov	r0, r3
 80095a2:	f7ff feed 	bl	8009380 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80095a6:	f001 fded 	bl	800b184 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80095aa:	2301      	movs	r3, #1
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3710      	adds	r7, #16
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}
 80095b4:	e000ed04 	.word	0xe000ed04

080095b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b08e      	sub	sp, #56	; 0x38
 80095bc:	af02      	add	r7, sp, #8
 80095be:	60f8      	str	r0, [r7, #12]
 80095c0:	60b9      	str	r1, [r7, #8]
 80095c2:	607a      	str	r2, [r7, #4]
 80095c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d10a      	bne.n	80095e2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80095cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d0:	f383 8811 	msr	BASEPRI, r3
 80095d4:	f3bf 8f6f 	isb	sy
 80095d8:	f3bf 8f4f 	dsb	sy
 80095dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80095de:	bf00      	nop
 80095e0:	e7fe      	b.n	80095e0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d10a      	bne.n	80095fe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80095e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ec:	f383 8811 	msr	BASEPRI, r3
 80095f0:	f3bf 8f6f 	isb	sy
 80095f4:	f3bf 8f4f 	dsb	sy
 80095f8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80095fa:	bf00      	nop
 80095fc:	e7fe      	b.n	80095fc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d002      	beq.n	800960a <xQueueGenericCreateStatic+0x52>
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d001      	beq.n	800960e <xQueueGenericCreateStatic+0x56>
 800960a:	2301      	movs	r3, #1
 800960c:	e000      	b.n	8009610 <xQueueGenericCreateStatic+0x58>
 800960e:	2300      	movs	r3, #0
 8009610:	2b00      	cmp	r3, #0
 8009612:	d10a      	bne.n	800962a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009618:	f383 8811 	msr	BASEPRI, r3
 800961c:	f3bf 8f6f 	isb	sy
 8009620:	f3bf 8f4f 	dsb	sy
 8009624:	623b      	str	r3, [r7, #32]
}
 8009626:	bf00      	nop
 8009628:	e7fe      	b.n	8009628 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d102      	bne.n	8009636 <xQueueGenericCreateStatic+0x7e>
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d101      	bne.n	800963a <xQueueGenericCreateStatic+0x82>
 8009636:	2301      	movs	r3, #1
 8009638:	e000      	b.n	800963c <xQueueGenericCreateStatic+0x84>
 800963a:	2300      	movs	r3, #0
 800963c:	2b00      	cmp	r3, #0
 800963e:	d10a      	bne.n	8009656 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009644:	f383 8811 	msr	BASEPRI, r3
 8009648:	f3bf 8f6f 	isb	sy
 800964c:	f3bf 8f4f 	dsb	sy
 8009650:	61fb      	str	r3, [r7, #28]
}
 8009652:	bf00      	nop
 8009654:	e7fe      	b.n	8009654 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009656:	2348      	movs	r3, #72	; 0x48
 8009658:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800965a:	697b      	ldr	r3, [r7, #20]
 800965c:	2b48      	cmp	r3, #72	; 0x48
 800965e:	d00a      	beq.n	8009676 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009664:	f383 8811 	msr	BASEPRI, r3
 8009668:	f3bf 8f6f 	isb	sy
 800966c:	f3bf 8f4f 	dsb	sy
 8009670:	61bb      	str	r3, [r7, #24]
}
 8009672:	bf00      	nop
 8009674:	e7fe      	b.n	8009674 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009676:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800967c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800967e:	2b00      	cmp	r3, #0
 8009680:	d009      	beq.n	8009696 <xQueueGenericCreateStatic+0xde>
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009682:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009688:	9300      	str	r3, [sp, #0]
 800968a:	4613      	mov	r3, r2
 800968c:	687a      	ldr	r2, [r7, #4]
 800968e:	68b9      	ldr	r1, [r7, #8]
 8009690:	68f8      	ldr	r0, [r7, #12]
 8009692:	f000 f805 	bl	80096a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009698:	4618      	mov	r0, r3
 800969a:	3730      	adds	r7, #48	; 0x30
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}

080096a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b084      	sub	sp, #16
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	60f8      	str	r0, [r7, #12]
 80096a8:	60b9      	str	r1, [r7, #8]
 80096aa:	607a      	str	r2, [r7, #4]
 80096ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d103      	bne.n	80096bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80096b4:	69bb      	ldr	r3, [r7, #24]
 80096b6:	69ba      	ldr	r2, [r7, #24]
 80096b8:	601a      	str	r2, [r3, #0]
 80096ba:	e002      	b.n	80096c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80096bc:	69bb      	ldr	r3, [r7, #24]
 80096be:	687a      	ldr	r2, [r7, #4]
 80096c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80096c2:	69bb      	ldr	r3, [r7, #24]
 80096c4:	68fa      	ldr	r2, [r7, #12]
 80096c6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80096c8:	69bb      	ldr	r3, [r7, #24]
 80096ca:	68ba      	ldr	r2, [r7, #8]
 80096cc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80096ce:	2101      	movs	r1, #1
 80096d0:	69b8      	ldr	r0, [r7, #24]
 80096d2:	f7ff ff09 	bl	80094e8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80096d6:	bf00      	nop
 80096d8:	3710      	adds	r7, #16
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}

080096de <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80096de:	b580      	push	{r7, lr}
 80096e0:	b082      	sub	sp, #8
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d00e      	beq.n	800970a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2200      	movs	r2, #0
 80096f0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2200      	movs	r2, #0
 80096f6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2200      	movs	r2, #0
 80096fc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80096fe:	2300      	movs	r3, #0
 8009700:	2200      	movs	r2, #0
 8009702:	2100      	movs	r1, #0
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f000 f81f 	bl	8009748 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800970a:	bf00      	nop
 800970c:	3708      	adds	r7, #8
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}

08009712 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8009712:	b580      	push	{r7, lr}
 8009714:	b088      	sub	sp, #32
 8009716:	af02      	add	r7, sp, #8
 8009718:	4603      	mov	r3, r0
 800971a:	6039      	str	r1, [r7, #0]
 800971c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800971e:	2301      	movs	r3, #1
 8009720:	617b      	str	r3, [r7, #20]
 8009722:	2300      	movs	r3, #0
 8009724:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009726:	79fb      	ldrb	r3, [r7, #7]
 8009728:	9300      	str	r3, [sp, #0]
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	2200      	movs	r2, #0
 800972e:	6939      	ldr	r1, [r7, #16]
 8009730:	6978      	ldr	r0, [r7, #20]
 8009732:	f7ff ff41 	bl	80095b8 <xQueueGenericCreateStatic>
 8009736:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009738:	68f8      	ldr	r0, [r7, #12]
 800973a:	f7ff ffd0 	bl	80096de <prvInitialiseMutex>

		return xNewQueue;
 800973e:	68fb      	ldr	r3, [r7, #12]
	}
 8009740:	4618      	mov	r0, r3
 8009742:	3718      	adds	r7, #24
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}

08009748 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b08e      	sub	sp, #56	; 0x38
 800974c:	af00      	add	r7, sp, #0
 800974e:	60f8      	str	r0, [r7, #12]
 8009750:	60b9      	str	r1, [r7, #8]
 8009752:	607a      	str	r2, [r7, #4]
 8009754:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009756:	2300      	movs	r3, #0
 8009758:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800975e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009760:	2b00      	cmp	r3, #0
 8009762:	d10a      	bne.n	800977a <xQueueGenericSend+0x32>
	__asm volatile
 8009764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009768:	f383 8811 	msr	BASEPRI, r3
 800976c:	f3bf 8f6f 	isb	sy
 8009770:	f3bf 8f4f 	dsb	sy
 8009774:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009776:	bf00      	nop
 8009778:	e7fe      	b.n	8009778 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d103      	bne.n	8009788 <xQueueGenericSend+0x40>
 8009780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009784:	2b00      	cmp	r3, #0
 8009786:	d101      	bne.n	800978c <xQueueGenericSend+0x44>
 8009788:	2301      	movs	r3, #1
 800978a:	e000      	b.n	800978e <xQueueGenericSend+0x46>
 800978c:	2300      	movs	r3, #0
 800978e:	2b00      	cmp	r3, #0
 8009790:	d10a      	bne.n	80097a8 <xQueueGenericSend+0x60>
	__asm volatile
 8009792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009796:	f383 8811 	msr	BASEPRI, r3
 800979a:	f3bf 8f6f 	isb	sy
 800979e:	f3bf 8f4f 	dsb	sy
 80097a2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80097a4:	bf00      	nop
 80097a6:	e7fe      	b.n	80097a6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	2b02      	cmp	r3, #2
 80097ac:	d103      	bne.n	80097b6 <xQueueGenericSend+0x6e>
 80097ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097b2:	2b01      	cmp	r3, #1
 80097b4:	d101      	bne.n	80097ba <xQueueGenericSend+0x72>
 80097b6:	2301      	movs	r3, #1
 80097b8:	e000      	b.n	80097bc <xQueueGenericSend+0x74>
 80097ba:	2300      	movs	r3, #0
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d10a      	bne.n	80097d6 <xQueueGenericSend+0x8e>
	__asm volatile
 80097c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c4:	f383 8811 	msr	BASEPRI, r3
 80097c8:	f3bf 8f6f 	isb	sy
 80097cc:	f3bf 8f4f 	dsb	sy
 80097d0:	623b      	str	r3, [r7, #32]
}
 80097d2:	bf00      	nop
 80097d4:	e7fe      	b.n	80097d4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80097d6:	f001 f955 	bl	800aa84 <xTaskGetSchedulerState>
 80097da:	4603      	mov	r3, r0
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d102      	bne.n	80097e6 <xQueueGenericSend+0x9e>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d101      	bne.n	80097ea <xQueueGenericSend+0xa2>
 80097e6:	2301      	movs	r3, #1
 80097e8:	e000      	b.n	80097ec <xQueueGenericSend+0xa4>
 80097ea:	2300      	movs	r3, #0
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d10a      	bne.n	8009806 <xQueueGenericSend+0xbe>
	__asm volatile
 80097f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f4:	f383 8811 	msr	BASEPRI, r3
 80097f8:	f3bf 8f6f 	isb	sy
 80097fc:	f3bf 8f4f 	dsb	sy
 8009800:	61fb      	str	r3, [r7, #28]
}
 8009802:	bf00      	nop
 8009804:	e7fe      	b.n	8009804 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009806:	f001 fc8d 	bl	800b124 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800980a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800980c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800980e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009812:	429a      	cmp	r2, r3
 8009814:	d302      	bcc.n	800981c <xQueueGenericSend+0xd4>
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	2b02      	cmp	r3, #2
 800981a:	d129      	bne.n	8009870 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800981c:	683a      	ldr	r2, [r7, #0]
 800981e:	68b9      	ldr	r1, [r7, #8]
 8009820:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009822:	f000 fa41 	bl	8009ca8 <prvCopyDataToQueue>
 8009826:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800982a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800982c:	2b00      	cmp	r3, #0
 800982e:	d010      	beq.n	8009852 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009832:	3324      	adds	r3, #36	; 0x24
 8009834:	4618      	mov	r0, r3
 8009836:	f000 ff8f 	bl	800a758 <xTaskRemoveFromEventList>
 800983a:	4603      	mov	r3, r0
 800983c:	2b00      	cmp	r3, #0
 800983e:	d013      	beq.n	8009868 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009840:	4b3f      	ldr	r3, [pc, #252]	; (8009940 <xQueueGenericSend+0x1f8>)
 8009842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009846:	601a      	str	r2, [r3, #0]
 8009848:	f3bf 8f4f 	dsb	sy
 800984c:	f3bf 8f6f 	isb	sy
 8009850:	e00a      	b.n	8009868 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009854:	2b00      	cmp	r3, #0
 8009856:	d007      	beq.n	8009868 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009858:	4b39      	ldr	r3, [pc, #228]	; (8009940 <xQueueGenericSend+0x1f8>)
 800985a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800985e:	601a      	str	r2, [r3, #0]
 8009860:	f3bf 8f4f 	dsb	sy
 8009864:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009868:	f001 fc8c 	bl	800b184 <vPortExitCritical>
				return pdPASS;
 800986c:	2301      	movs	r3, #1
 800986e:	e063      	b.n	8009938 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d103      	bne.n	800987e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009876:	f001 fc85 	bl	800b184 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800987a:	2300      	movs	r3, #0
 800987c:	e05c      	b.n	8009938 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800987e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009880:	2b00      	cmp	r3, #0
 8009882:	d106      	bne.n	8009892 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009884:	f107 0314 	add.w	r3, r7, #20
 8009888:	4618      	mov	r0, r3
 800988a:	f000 ffc7 	bl	800a81c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800988e:	2301      	movs	r3, #1
 8009890:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009892:	f001 fc77 	bl	800b184 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009896:	f000 fd53 	bl	800a340 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800989a:	f001 fc43 	bl	800b124 <vPortEnterCritical>
 800989e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80098a4:	b25b      	sxtb	r3, r3
 80098a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098aa:	d103      	bne.n	80098b4 <xQueueGenericSend+0x16c>
 80098ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ae:	2200      	movs	r2, #0
 80098b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80098b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80098ba:	b25b      	sxtb	r3, r3
 80098bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098c0:	d103      	bne.n	80098ca <xQueueGenericSend+0x182>
 80098c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098c4:	2200      	movs	r2, #0
 80098c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80098ca:	f001 fc5b 	bl	800b184 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80098ce:	1d3a      	adds	r2, r7, #4
 80098d0:	f107 0314 	add.w	r3, r7, #20
 80098d4:	4611      	mov	r1, r2
 80098d6:	4618      	mov	r0, r3
 80098d8:	f000 ffb6 	bl	800a848 <xTaskCheckForTimeOut>
 80098dc:	4603      	mov	r3, r0
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d124      	bne.n	800992c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80098e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80098e4:	f000 fab2 	bl	8009e4c <prvIsQueueFull>
 80098e8:	4603      	mov	r3, r0
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d018      	beq.n	8009920 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80098ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098f0:	3310      	adds	r3, #16
 80098f2:	687a      	ldr	r2, [r7, #4]
 80098f4:	4611      	mov	r1, r2
 80098f6:	4618      	mov	r0, r3
 80098f8:	f000 ff0a 	bl	800a710 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80098fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80098fe:	f000 fa3d 	bl	8009d7c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009902:	f000 fd2b 	bl	800a35c <xTaskResumeAll>
 8009906:	4603      	mov	r3, r0
 8009908:	2b00      	cmp	r3, #0
 800990a:	f47f af7c 	bne.w	8009806 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800990e:	4b0c      	ldr	r3, [pc, #48]	; (8009940 <xQueueGenericSend+0x1f8>)
 8009910:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009914:	601a      	str	r2, [r3, #0]
 8009916:	f3bf 8f4f 	dsb	sy
 800991a:	f3bf 8f6f 	isb	sy
 800991e:	e772      	b.n	8009806 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009920:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009922:	f000 fa2b 	bl	8009d7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009926:	f000 fd19 	bl	800a35c <xTaskResumeAll>
 800992a:	e76c      	b.n	8009806 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800992c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800992e:	f000 fa25 	bl	8009d7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009932:	f000 fd13 	bl	800a35c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009936:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009938:	4618      	mov	r0, r3
 800993a:	3738      	adds	r7, #56	; 0x38
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}
 8009940:	e000ed04 	.word	0xe000ed04

08009944 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b08e      	sub	sp, #56	; 0x38
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009954:	2b00      	cmp	r3, #0
 8009956:	d10a      	bne.n	800996e <xQueueGiveFromISR+0x2a>
	__asm volatile
 8009958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800995c:	f383 8811 	msr	BASEPRI, r3
 8009960:	f3bf 8f6f 	isb	sy
 8009964:	f3bf 8f4f 	dsb	sy
 8009968:	623b      	str	r3, [r7, #32]
}
 800996a:	bf00      	nop
 800996c:	e7fe      	b.n	800996c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800996e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009972:	2b00      	cmp	r3, #0
 8009974:	d00a      	beq.n	800998c <xQueueGiveFromISR+0x48>
	__asm volatile
 8009976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800997a:	f383 8811 	msr	BASEPRI, r3
 800997e:	f3bf 8f6f 	isb	sy
 8009982:	f3bf 8f4f 	dsb	sy
 8009986:	61fb      	str	r3, [r7, #28]
}
 8009988:	bf00      	nop
 800998a:	e7fe      	b.n	800998a <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800998c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d103      	bne.n	800999c <xQueueGiveFromISR+0x58>
 8009994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009996:	689b      	ldr	r3, [r3, #8]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d101      	bne.n	80099a0 <xQueueGiveFromISR+0x5c>
 800999c:	2301      	movs	r3, #1
 800999e:	e000      	b.n	80099a2 <xQueueGiveFromISR+0x5e>
 80099a0:	2300      	movs	r3, #0
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d10a      	bne.n	80099bc <xQueueGiveFromISR+0x78>
	__asm volatile
 80099a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099aa:	f383 8811 	msr	BASEPRI, r3
 80099ae:	f3bf 8f6f 	isb	sy
 80099b2:	f3bf 8f4f 	dsb	sy
 80099b6:	61bb      	str	r3, [r7, #24]
}
 80099b8:	bf00      	nop
 80099ba:	e7fe      	b.n	80099ba <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80099bc:	f001 fc94 	bl	800b2e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80099c0:	f3ef 8211 	mrs	r2, BASEPRI
 80099c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099c8:	f383 8811 	msr	BASEPRI, r3
 80099cc:	f3bf 8f6f 	isb	sy
 80099d0:	f3bf 8f4f 	dsb	sy
 80099d4:	617a      	str	r2, [r7, #20]
 80099d6:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80099d8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80099da:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80099dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099e0:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80099e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099e8:	429a      	cmp	r2, r3
 80099ea:	d22b      	bcs.n	8009a44 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80099ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80099f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80099f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f8:	1c5a      	adds	r2, r3, #1
 80099fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099fc:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80099fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a06:	d112      	bne.n	8009a2e <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d016      	beq.n	8009a3e <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a12:	3324      	adds	r3, #36	; 0x24
 8009a14:	4618      	mov	r0, r3
 8009a16:	f000 fe9f 	bl	800a758 <xTaskRemoveFromEventList>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d00e      	beq.n	8009a3e <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d00b      	beq.n	8009a3e <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	2201      	movs	r2, #1
 8009a2a:	601a      	str	r2, [r3, #0]
 8009a2c:	e007      	b.n	8009a3e <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009a2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a32:	3301      	adds	r3, #1
 8009a34:	b2db      	uxtb	r3, r3
 8009a36:	b25a      	sxtb	r2, r3
 8009a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009a3e:	2301      	movs	r3, #1
 8009a40:	637b      	str	r3, [r7, #52]	; 0x34
 8009a42:	e001      	b.n	8009a48 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009a44:	2300      	movs	r3, #0
 8009a46:	637b      	str	r3, [r7, #52]	; 0x34
 8009a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a4a:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009a52:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3738      	adds	r7, #56	; 0x38
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
	...

08009a60 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b08e      	sub	sp, #56	; 0x38
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
 8009a68:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009a72:	2300      	movs	r3, #0
 8009a74:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d10a      	bne.n	8009a92 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8009a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a80:	f383 8811 	msr	BASEPRI, r3
 8009a84:	f3bf 8f6f 	isb	sy
 8009a88:	f3bf 8f4f 	dsb	sy
 8009a8c:	623b      	str	r3, [r7, #32]
}
 8009a8e:	bf00      	nop
 8009a90:	e7fe      	b.n	8009a90 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d00a      	beq.n	8009ab0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8009a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a9e:	f383 8811 	msr	BASEPRI, r3
 8009aa2:	f3bf 8f6f 	isb	sy
 8009aa6:	f3bf 8f4f 	dsb	sy
 8009aaa:	61fb      	str	r3, [r7, #28]
}
 8009aac:	bf00      	nop
 8009aae:	e7fe      	b.n	8009aae <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009ab0:	f000 ffe8 	bl	800aa84 <xTaskGetSchedulerState>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d102      	bne.n	8009ac0 <xQueueSemaphoreTake+0x60>
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d101      	bne.n	8009ac4 <xQueueSemaphoreTake+0x64>
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	e000      	b.n	8009ac6 <xQueueSemaphoreTake+0x66>
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d10a      	bne.n	8009ae0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8009aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ace:	f383 8811 	msr	BASEPRI, r3
 8009ad2:	f3bf 8f6f 	isb	sy
 8009ad6:	f3bf 8f4f 	dsb	sy
 8009ada:	61bb      	str	r3, [r7, #24]
}
 8009adc:	bf00      	nop
 8009ade:	e7fe      	b.n	8009ade <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009ae0:	f001 fb20 	bl	800b124 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ae8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d024      	beq.n	8009b3a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009af2:	1e5a      	subs	r2, r3, #1
 8009af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009af6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d104      	bne.n	8009b0a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009b00:	f001 f968 	bl	800add4 <pvTaskIncrementMutexHeldCount>
 8009b04:	4602      	mov	r2, r0
 8009b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b08:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b0c:	691b      	ldr	r3, [r3, #16]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d00f      	beq.n	8009b32 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b14:	3310      	adds	r3, #16
 8009b16:	4618      	mov	r0, r3
 8009b18:	f000 fe1e 	bl	800a758 <xTaskRemoveFromEventList>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d007      	beq.n	8009b32 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009b22:	4b54      	ldr	r3, [pc, #336]	; (8009c74 <xQueueSemaphoreTake+0x214>)
 8009b24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b28:	601a      	str	r2, [r3, #0]
 8009b2a:	f3bf 8f4f 	dsb	sy
 8009b2e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009b32:	f001 fb27 	bl	800b184 <vPortExitCritical>
				return pdPASS;
 8009b36:	2301      	movs	r3, #1
 8009b38:	e097      	b.n	8009c6a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d111      	bne.n	8009b64 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d00a      	beq.n	8009b5c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8009b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b4a:	f383 8811 	msr	BASEPRI, r3
 8009b4e:	f3bf 8f6f 	isb	sy
 8009b52:	f3bf 8f4f 	dsb	sy
 8009b56:	617b      	str	r3, [r7, #20]
}
 8009b58:	bf00      	nop
 8009b5a:	e7fe      	b.n	8009b5a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009b5c:	f001 fb12 	bl	800b184 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009b60:	2300      	movs	r3, #0
 8009b62:	e082      	b.n	8009c6a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d106      	bne.n	8009b78 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009b6a:	f107 030c 	add.w	r3, r7, #12
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f000 fe54 	bl	800a81c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009b74:	2301      	movs	r3, #1
 8009b76:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009b78:	f001 fb04 	bl	800b184 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009b7c:	f000 fbe0 	bl	800a340 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009b80:	f001 fad0 	bl	800b124 <vPortEnterCritical>
 8009b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b8a:	b25b      	sxtb	r3, r3
 8009b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b90:	d103      	bne.n	8009b9a <xQueueSemaphoreTake+0x13a>
 8009b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b94:	2200      	movs	r2, #0
 8009b96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009ba0:	b25b      	sxtb	r3, r3
 8009ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ba6:	d103      	bne.n	8009bb0 <xQueueSemaphoreTake+0x150>
 8009ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009baa:	2200      	movs	r2, #0
 8009bac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009bb0:	f001 fae8 	bl	800b184 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009bb4:	463a      	mov	r2, r7
 8009bb6:	f107 030c 	add.w	r3, r7, #12
 8009bba:	4611      	mov	r1, r2
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	f000 fe43 	bl	800a848 <xTaskCheckForTimeOut>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d132      	bne.n	8009c2e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009bc8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009bca:	f000 f929 	bl	8009e20 <prvIsQueueEmpty>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d026      	beq.n	8009c22 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d109      	bne.n	8009bf0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8009bdc:	f001 faa2 	bl	800b124 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009be2:	689b      	ldr	r3, [r3, #8]
 8009be4:	4618      	mov	r0, r3
 8009be6:	f000 ff6b 	bl	800aac0 <xTaskPriorityInherit>
 8009bea:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009bec:	f001 faca 	bl	800b184 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bf2:	3324      	adds	r3, #36	; 0x24
 8009bf4:	683a      	ldr	r2, [r7, #0]
 8009bf6:	4611      	mov	r1, r2
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f000 fd89 	bl	800a710 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009bfe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009c00:	f000 f8bc 	bl	8009d7c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009c04:	f000 fbaa 	bl	800a35c <xTaskResumeAll>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	f47f af68 	bne.w	8009ae0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8009c10:	4b18      	ldr	r3, [pc, #96]	; (8009c74 <xQueueSemaphoreTake+0x214>)
 8009c12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c16:	601a      	str	r2, [r3, #0]
 8009c18:	f3bf 8f4f 	dsb	sy
 8009c1c:	f3bf 8f6f 	isb	sy
 8009c20:	e75e      	b.n	8009ae0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009c22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009c24:	f000 f8aa 	bl	8009d7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009c28:	f000 fb98 	bl	800a35c <xTaskResumeAll>
 8009c2c:	e758      	b.n	8009ae0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009c2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009c30:	f000 f8a4 	bl	8009d7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009c34:	f000 fb92 	bl	800a35c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009c38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009c3a:	f000 f8f1 	bl	8009e20 <prvIsQueueEmpty>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	f43f af4d 	beq.w	8009ae0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d00d      	beq.n	8009c68 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8009c4c:	f001 fa6a 	bl	800b124 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009c50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009c52:	f000 f811 	bl	8009c78 <prvGetDisinheritPriorityAfterTimeout>
 8009c56:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c5a:	689b      	ldr	r3, [r3, #8]
 8009c5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f001 f82a 	bl	800acb8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009c64:	f001 fa8e 	bl	800b184 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009c68:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3738      	adds	r7, #56	; 0x38
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}
 8009c72:	bf00      	nop
 8009c74:	e000ed04 	.word	0xe000ed04

08009c78 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009c78:	b480      	push	{r7}
 8009c7a:	b085      	sub	sp, #20
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d006      	beq.n	8009c96 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f1c3 0307 	rsb	r3, r3, #7
 8009c92:	60fb      	str	r3, [r7, #12]
 8009c94:	e001      	b.n	8009c9a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009c96:	2300      	movs	r3, #0
 8009c98:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
	}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3714      	adds	r7, #20
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca6:	4770      	bx	lr

08009ca8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b086      	sub	sp, #24
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	60f8      	str	r0, [r7, #12]
 8009cb0:	60b9      	str	r1, [r7, #8]
 8009cb2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cbc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d10d      	bne.n	8009ce2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d14d      	bne.n	8009d6a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	689b      	ldr	r3, [r3, #8]
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f000 ff6a 	bl	800abac <xTaskPriorityDisinherit>
 8009cd8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	609a      	str	r2, [r3, #8]
 8009ce0:	e043      	b.n	8009d6a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d119      	bne.n	8009d1c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	6858      	ldr	r0, [r3, #4]
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cf0:	461a      	mov	r2, r3
 8009cf2:	68b9      	ldr	r1, [r7, #8]
 8009cf4:	f001 fb5c 	bl	800b3b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	685a      	ldr	r2, [r3, #4]
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d00:	441a      	add	r2, r3
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	685a      	ldr	r2, [r3, #4]
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	689b      	ldr	r3, [r3, #8]
 8009d0e:	429a      	cmp	r2, r3
 8009d10:	d32b      	bcc.n	8009d6a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	681a      	ldr	r2, [r3, #0]
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	605a      	str	r2, [r3, #4]
 8009d1a:	e026      	b.n	8009d6a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	68d8      	ldr	r0, [r3, #12]
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d24:	461a      	mov	r2, r3
 8009d26:	68b9      	ldr	r1, [r7, #8]
 8009d28:	f001 fb42 	bl	800b3b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	68da      	ldr	r2, [r3, #12]
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d34:	425b      	negs	r3, r3
 8009d36:	441a      	add	r2, r3
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	68da      	ldr	r2, [r3, #12]
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	429a      	cmp	r2, r3
 8009d46:	d207      	bcs.n	8009d58 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	689a      	ldr	r2, [r3, #8]
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d50:	425b      	negs	r3, r3
 8009d52:	441a      	add	r2, r3
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2b02      	cmp	r3, #2
 8009d5c:	d105      	bne.n	8009d6a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d002      	beq.n	8009d6a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009d64:	693b      	ldr	r3, [r7, #16]
 8009d66:	3b01      	subs	r3, #1
 8009d68:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	1c5a      	adds	r2, r3, #1
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009d72:	697b      	ldr	r3, [r7, #20]
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3718      	adds	r7, #24
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}

08009d7c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b084      	sub	sp, #16
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009d84:	f001 f9ce 	bl	800b124 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d8e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009d90:	e011      	b.n	8009db6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d012      	beq.n	8009dc0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	3324      	adds	r3, #36	; 0x24
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f000 fcda 	bl	800a758 <xTaskRemoveFromEventList>
 8009da4:	4603      	mov	r3, r0
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d001      	beq.n	8009dae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009daa:	f000 fdaf 	bl	800a90c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009dae:	7bfb      	ldrb	r3, [r7, #15]
 8009db0:	3b01      	subs	r3, #1
 8009db2:	b2db      	uxtb	r3, r3
 8009db4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	dce9      	bgt.n	8009d92 <prvUnlockQueue+0x16>
 8009dbe:	e000      	b.n	8009dc2 <prvUnlockQueue+0x46>
					break;
 8009dc0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	22ff      	movs	r2, #255	; 0xff
 8009dc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009dca:	f001 f9db 	bl	800b184 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009dce:	f001 f9a9 	bl	800b124 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009dd8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009dda:	e011      	b.n	8009e00 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	691b      	ldr	r3, [r3, #16]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d012      	beq.n	8009e0a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	3310      	adds	r3, #16
 8009de8:	4618      	mov	r0, r3
 8009dea:	f000 fcb5 	bl	800a758 <xTaskRemoveFromEventList>
 8009dee:	4603      	mov	r3, r0
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d001      	beq.n	8009df8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009df4:	f000 fd8a 	bl	800a90c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009df8:	7bbb      	ldrb	r3, [r7, #14]
 8009dfa:	3b01      	subs	r3, #1
 8009dfc:	b2db      	uxtb	r3, r3
 8009dfe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009e00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	dce9      	bgt.n	8009ddc <prvUnlockQueue+0x60>
 8009e08:	e000      	b.n	8009e0c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009e0a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	22ff      	movs	r2, #255	; 0xff
 8009e10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009e14:	f001 f9b6 	bl	800b184 <vPortExitCritical>
}
 8009e18:	bf00      	nop
 8009e1a:	3710      	adds	r7, #16
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}

08009e20 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b084      	sub	sp, #16
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009e28:	f001 f97c 	bl	800b124 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d102      	bne.n	8009e3a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009e34:	2301      	movs	r3, #1
 8009e36:	60fb      	str	r3, [r7, #12]
 8009e38:	e001      	b.n	8009e3e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009e3e:	f001 f9a1 	bl	800b184 <vPortExitCritical>

	return xReturn;
 8009e42:	68fb      	ldr	r3, [r7, #12]
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3710      	adds	r7, #16
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}

08009e4c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b084      	sub	sp, #16
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009e54:	f001 f966 	bl	800b124 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e60:	429a      	cmp	r2, r3
 8009e62:	d102      	bne.n	8009e6a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009e64:	2301      	movs	r3, #1
 8009e66:	60fb      	str	r3, [r7, #12]
 8009e68:	e001      	b.n	8009e6e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009e6e:	f001 f989 	bl	800b184 <vPortExitCritical>

	return xReturn;
 8009e72:	68fb      	ldr	r3, [r7, #12]
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	3710      	adds	r7, #16
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}

08009e7c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b08e      	sub	sp, #56	; 0x38
 8009e80:	af04      	add	r7, sp, #16
 8009e82:	60f8      	str	r0, [r7, #12]
 8009e84:	60b9      	str	r1, [r7, #8]
 8009e86:	607a      	str	r2, [r7, #4]
 8009e88:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d10a      	bne.n	8009ea6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e94:	f383 8811 	msr	BASEPRI, r3
 8009e98:	f3bf 8f6f 	isb	sy
 8009e9c:	f3bf 8f4f 	dsb	sy
 8009ea0:	623b      	str	r3, [r7, #32]
}
 8009ea2:	bf00      	nop
 8009ea4:	e7fe      	b.n	8009ea4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d10a      	bne.n	8009ec2 <xTaskCreateStatic+0x46>
	__asm volatile
 8009eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb0:	f383 8811 	msr	BASEPRI, r3
 8009eb4:	f3bf 8f6f 	isb	sy
 8009eb8:	f3bf 8f4f 	dsb	sy
 8009ebc:	61fb      	str	r3, [r7, #28]
}
 8009ebe:	bf00      	nop
 8009ec0:	e7fe      	b.n	8009ec0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009ec2:	2358      	movs	r3, #88	; 0x58
 8009ec4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009ec6:	693b      	ldr	r3, [r7, #16]
 8009ec8:	2b58      	cmp	r3, #88	; 0x58
 8009eca:	d00a      	beq.n	8009ee2 <xTaskCreateStatic+0x66>
	__asm volatile
 8009ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ed0:	f383 8811 	msr	BASEPRI, r3
 8009ed4:	f3bf 8f6f 	isb	sy
 8009ed8:	f3bf 8f4f 	dsb	sy
 8009edc:	61bb      	str	r3, [r7, #24]
}
 8009ede:	bf00      	nop
 8009ee0:	e7fe      	b.n	8009ee0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009ee2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d01a      	beq.n	8009f20 <xTaskCreateStatic+0xa4>
 8009eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d017      	beq.n	8009f20 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ef2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ef8:	631a      	str	r2, [r3, #48]	; 0x30
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009efa:	2300      	movs	r3, #0
 8009efc:	9303      	str	r3, [sp, #12]
 8009efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f00:	9302      	str	r3, [sp, #8]
 8009f02:	f107 0314 	add.w	r3, r7, #20
 8009f06:	9301      	str	r3, [sp, #4]
 8009f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f0a:	9300      	str	r3, [sp, #0]
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	687a      	ldr	r2, [r7, #4]
 8009f10:	68b9      	ldr	r1, [r7, #8]
 8009f12:	68f8      	ldr	r0, [r7, #12]
 8009f14:	f000 f80b 	bl	8009f2e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009f18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009f1a:	f000 f893 	bl	800a044 <prvAddNewTaskToReadyList>
 8009f1e:	e001      	b.n	8009f24 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8009f20:	2300      	movs	r3, #0
 8009f22:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009f24:	697b      	ldr	r3, [r7, #20]
	}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3728      	adds	r7, #40	; 0x28
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}

08009f2e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009f2e:	b580      	push	{r7, lr}
 8009f30:	b088      	sub	sp, #32
 8009f32:	af00      	add	r7, sp, #0
 8009f34:	60f8      	str	r0, [r7, #12]
 8009f36:	60b9      	str	r1, [r7, #8]
 8009f38:	607a      	str	r2, [r7, #4]
 8009f3a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009f46:	3b01      	subs	r3, #1
 8009f48:	009b      	lsls	r3, r3, #2
 8009f4a:	4413      	add	r3, r2
 8009f4c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009f4e:	69bb      	ldr	r3, [r7, #24]
 8009f50:	f023 0307 	bic.w	r3, r3, #7
 8009f54:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009f56:	69bb      	ldr	r3, [r7, #24]
 8009f58:	f003 0307 	and.w	r3, r3, #7
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d00a      	beq.n	8009f76 <prvInitialiseNewTask+0x48>
	__asm volatile
 8009f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f64:	f383 8811 	msr	BASEPRI, r3
 8009f68:	f3bf 8f6f 	isb	sy
 8009f6c:	f3bf 8f4f 	dsb	sy
 8009f70:	617b      	str	r3, [r7, #20]
}
 8009f72:	bf00      	nop
 8009f74:	e7fe      	b.n	8009f74 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d01f      	beq.n	8009fbc <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	61fb      	str	r3, [r7, #28]
 8009f80:	e012      	b.n	8009fa8 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009f82:	68ba      	ldr	r2, [r7, #8]
 8009f84:	69fb      	ldr	r3, [r7, #28]
 8009f86:	4413      	add	r3, r2
 8009f88:	7819      	ldrb	r1, [r3, #0]
 8009f8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f8c:	69fb      	ldr	r3, [r7, #28]
 8009f8e:	4413      	add	r3, r2
 8009f90:	3334      	adds	r3, #52	; 0x34
 8009f92:	460a      	mov	r2, r1
 8009f94:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009f96:	68ba      	ldr	r2, [r7, #8]
 8009f98:	69fb      	ldr	r3, [r7, #28]
 8009f9a:	4413      	add	r3, r2
 8009f9c:	781b      	ldrb	r3, [r3, #0]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d006      	beq.n	8009fb0 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009fa2:	69fb      	ldr	r3, [r7, #28]
 8009fa4:	3301      	adds	r3, #1
 8009fa6:	61fb      	str	r3, [r7, #28]
 8009fa8:	69fb      	ldr	r3, [r7, #28]
 8009faa:	2b0f      	cmp	r3, #15
 8009fac:	d9e9      	bls.n	8009f82 <prvInitialiseNewTask+0x54>
 8009fae:	e000      	b.n	8009fb2 <prvInitialiseNewTask+0x84>
			{
				break;
 8009fb0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009fba:	e003      	b.n	8009fc4 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc6:	2b06      	cmp	r3, #6
 8009fc8:	d901      	bls.n	8009fce <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009fca:	2306      	movs	r3, #6
 8009fcc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009fd2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009fd8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fdc:	2200      	movs	r2, #0
 8009fde:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fe2:	3304      	adds	r3, #4
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f7ff f9eb 	bl	80093c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fec:	3318      	adds	r3, #24
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f7ff f9e6 	bl	80093c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ff6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ff8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ffc:	f1c3 0207 	rsb	r2, r3, #7
 800a000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a002:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a006:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a008:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800a00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a00c:	2200      	movs	r2, #0
 800a00e:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a012:	2200      	movs	r2, #0
 800a014:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a018:	2200      	movs	r2, #0
 800a01a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a01e:	683a      	ldr	r2, [r7, #0]
 800a020:	68f9      	ldr	r1, [r7, #12]
 800a022:	69b8      	ldr	r0, [r7, #24]
 800a024:	f000 ff50 	bl	800aec8 <pxPortInitialiseStack>
 800a028:	4602      	mov	r2, r0
 800a02a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a02c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a02e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a030:	2b00      	cmp	r3, #0
 800a032:	d002      	beq.n	800a03a <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a036:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a038:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a03a:	bf00      	nop
 800a03c:	3720      	adds	r7, #32
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}
	...

0800a044 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b082      	sub	sp, #8
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a04c:	f001 f86a 	bl	800b124 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a050:	4b2a      	ldr	r3, [pc, #168]	; (800a0fc <prvAddNewTaskToReadyList+0xb8>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	3301      	adds	r3, #1
 800a056:	4a29      	ldr	r2, [pc, #164]	; (800a0fc <prvAddNewTaskToReadyList+0xb8>)
 800a058:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a05a:	4b29      	ldr	r3, [pc, #164]	; (800a100 <prvAddNewTaskToReadyList+0xbc>)
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d109      	bne.n	800a076 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a062:	4a27      	ldr	r2, [pc, #156]	; (800a100 <prvAddNewTaskToReadyList+0xbc>)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a068:	4b24      	ldr	r3, [pc, #144]	; (800a0fc <prvAddNewTaskToReadyList+0xb8>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	2b01      	cmp	r3, #1
 800a06e:	d110      	bne.n	800a092 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a070:	f000 fc70 	bl	800a954 <prvInitialiseTaskLists>
 800a074:	e00d      	b.n	800a092 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a076:	4b23      	ldr	r3, [pc, #140]	; (800a104 <prvAddNewTaskToReadyList+0xc0>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d109      	bne.n	800a092 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a07e:	4b20      	ldr	r3, [pc, #128]	; (800a100 <prvAddNewTaskToReadyList+0xbc>)
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a088:	429a      	cmp	r2, r3
 800a08a:	d802      	bhi.n	800a092 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a08c:	4a1c      	ldr	r2, [pc, #112]	; (800a100 <prvAddNewTaskToReadyList+0xbc>)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a092:	4b1d      	ldr	r3, [pc, #116]	; (800a108 <prvAddNewTaskToReadyList+0xc4>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	3301      	adds	r3, #1
 800a098:	4a1b      	ldr	r2, [pc, #108]	; (800a108 <prvAddNewTaskToReadyList+0xc4>)
 800a09a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0a0:	2201      	movs	r2, #1
 800a0a2:	409a      	lsls	r2, r3
 800a0a4:	4b19      	ldr	r3, [pc, #100]	; (800a10c <prvAddNewTaskToReadyList+0xc8>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	4313      	orrs	r3, r2
 800a0aa:	4a18      	ldr	r2, [pc, #96]	; (800a10c <prvAddNewTaskToReadyList+0xc8>)
 800a0ac:	6013      	str	r3, [r2, #0]
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0b2:	4613      	mov	r3, r2
 800a0b4:	009b      	lsls	r3, r3, #2
 800a0b6:	4413      	add	r3, r2
 800a0b8:	009b      	lsls	r3, r3, #2
 800a0ba:	4a15      	ldr	r2, [pc, #84]	; (800a110 <prvAddNewTaskToReadyList+0xcc>)
 800a0bc:	441a      	add	r2, r3
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	3304      	adds	r3, #4
 800a0c2:	4619      	mov	r1, r3
 800a0c4:	4610      	mov	r0, r2
 800a0c6:	f7ff f988 	bl	80093da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a0ca:	f001 f85b 	bl	800b184 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a0ce:	4b0d      	ldr	r3, [pc, #52]	; (800a104 <prvAddNewTaskToReadyList+0xc0>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d00e      	beq.n	800a0f4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a0d6:	4b0a      	ldr	r3, [pc, #40]	; (800a100 <prvAddNewTaskToReadyList+0xbc>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0e0:	429a      	cmp	r2, r3
 800a0e2:	d207      	bcs.n	800a0f4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a0e4:	4b0b      	ldr	r3, [pc, #44]	; (800a114 <prvAddNewTaskToReadyList+0xd0>)
 800a0e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0ea:	601a      	str	r2, [r3, #0]
 800a0ec:	f3bf 8f4f 	dsb	sy
 800a0f0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a0f4:	bf00      	nop
 800a0f6:	3708      	adds	r7, #8
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd80      	pop	{r7, pc}
 800a0fc:	20007260 	.word	0x20007260
 800a100:	20007160 	.word	0x20007160
 800a104:	2000726c 	.word	0x2000726c
 800a108:	2000727c 	.word	0x2000727c
 800a10c:	20007268 	.word	0x20007268
 800a110:	20007164 	.word	0x20007164
 800a114:	e000ed04 	.word	0xe000ed04

0800a118 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b08a      	sub	sp, #40	; 0x28
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
 800a120:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800a122:	2300      	movs	r3, #0
 800a124:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d10a      	bne.n	800a142 <vTaskDelayUntil+0x2a>
	__asm volatile
 800a12c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a130:	f383 8811 	msr	BASEPRI, r3
 800a134:	f3bf 8f6f 	isb	sy
 800a138:	f3bf 8f4f 	dsb	sy
 800a13c:	617b      	str	r3, [r7, #20]
}
 800a13e:	bf00      	nop
 800a140:	e7fe      	b.n	800a140 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d10a      	bne.n	800a15e <vTaskDelayUntil+0x46>
	__asm volatile
 800a148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a14c:	f383 8811 	msr	BASEPRI, r3
 800a150:	f3bf 8f6f 	isb	sy
 800a154:	f3bf 8f4f 	dsb	sy
 800a158:	613b      	str	r3, [r7, #16]
}
 800a15a:	bf00      	nop
 800a15c:	e7fe      	b.n	800a15c <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800a15e:	4b2a      	ldr	r3, [pc, #168]	; (800a208 <vTaskDelayUntil+0xf0>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d00a      	beq.n	800a17c <vTaskDelayUntil+0x64>
	__asm volatile
 800a166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a16a:	f383 8811 	msr	BASEPRI, r3
 800a16e:	f3bf 8f6f 	isb	sy
 800a172:	f3bf 8f4f 	dsb	sy
 800a176:	60fb      	str	r3, [r7, #12]
}
 800a178:	bf00      	nop
 800a17a:	e7fe      	b.n	800a17a <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800a17c:	f000 f8e0 	bl	800a340 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800a180:	4b22      	ldr	r3, [pc, #136]	; (800a20c <vTaskDelayUntil+0xf4>)
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	683a      	ldr	r2, [r7, #0]
 800a18c:	4413      	add	r3, r2
 800a18e:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	6a3a      	ldr	r2, [r7, #32]
 800a196:	429a      	cmp	r2, r3
 800a198:	d20b      	bcs.n	800a1b2 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	69fa      	ldr	r2, [r7, #28]
 800a1a0:	429a      	cmp	r2, r3
 800a1a2:	d211      	bcs.n	800a1c8 <vTaskDelayUntil+0xb0>
 800a1a4:	69fa      	ldr	r2, [r7, #28]
 800a1a6:	6a3b      	ldr	r3, [r7, #32]
 800a1a8:	429a      	cmp	r2, r3
 800a1aa:	d90d      	bls.n	800a1c8 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800a1ac:	2301      	movs	r3, #1
 800a1ae:	627b      	str	r3, [r7, #36]	; 0x24
 800a1b0:	e00a      	b.n	800a1c8 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	69fa      	ldr	r2, [r7, #28]
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	d303      	bcc.n	800a1c4 <vTaskDelayUntil+0xac>
 800a1bc:	69fa      	ldr	r2, [r7, #28]
 800a1be:	6a3b      	ldr	r3, [r7, #32]
 800a1c0:	429a      	cmp	r2, r3
 800a1c2:	d901      	bls.n	800a1c8 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	69fa      	ldr	r2, [r7, #28]
 800a1cc:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800a1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d006      	beq.n	800a1e2 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800a1d4:	69fa      	ldr	r2, [r7, #28]
 800a1d6:	6a3b      	ldr	r3, [r7, #32]
 800a1d8:	1ad3      	subs	r3, r2, r3
 800a1da:	2100      	movs	r1, #0
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f000 fe0d 	bl	800adfc <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800a1e2:	f000 f8bb 	bl	800a35c <xTaskResumeAll>
 800a1e6:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a1e8:	69bb      	ldr	r3, [r7, #24]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d107      	bne.n	800a1fe <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800a1ee:	4b08      	ldr	r3, [pc, #32]	; (800a210 <vTaskDelayUntil+0xf8>)
 800a1f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1f4:	601a      	str	r2, [r3, #0]
 800a1f6:	f3bf 8f4f 	dsb	sy
 800a1fa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a1fe:	bf00      	nop
 800a200:	3728      	adds	r7, #40	; 0x28
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}
 800a206:	bf00      	nop
 800a208:	20007288 	.word	0x20007288
 800a20c:	20007264 	.word	0x20007264
 800a210:	e000ed04 	.word	0xe000ed04

0800a214 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a214:	b580      	push	{r7, lr}
 800a216:	b084      	sub	sp, #16
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a21c:	2300      	movs	r3, #0
 800a21e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d017      	beq.n	800a256 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a226:	4b13      	ldr	r3, [pc, #76]	; (800a274 <vTaskDelay+0x60>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d00a      	beq.n	800a244 <vTaskDelay+0x30>
	__asm volatile
 800a22e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a232:	f383 8811 	msr	BASEPRI, r3
 800a236:	f3bf 8f6f 	isb	sy
 800a23a:	f3bf 8f4f 	dsb	sy
 800a23e:	60bb      	str	r3, [r7, #8]
}
 800a240:	bf00      	nop
 800a242:	e7fe      	b.n	800a242 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a244:	f000 f87c 	bl	800a340 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a248:	2100      	movs	r1, #0
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f000 fdd6 	bl	800adfc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a250:	f000 f884 	bl	800a35c <xTaskResumeAll>
 800a254:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d107      	bne.n	800a26c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a25c:	4b06      	ldr	r3, [pc, #24]	; (800a278 <vTaskDelay+0x64>)
 800a25e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a262:	601a      	str	r2, [r3, #0]
 800a264:	f3bf 8f4f 	dsb	sy
 800a268:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a26c:	bf00      	nop
 800a26e:	3710      	adds	r7, #16
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}
 800a274:	20007288 	.word	0x20007288
 800a278:	e000ed04 	.word	0xe000ed04

0800a27c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b08a      	sub	sp, #40	; 0x28
 800a280:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a282:	2300      	movs	r3, #0
 800a284:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a286:	2300      	movs	r3, #0
 800a288:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a28a:	463a      	mov	r2, r7
 800a28c:	1d39      	adds	r1, r7, #4
 800a28e:	f107 0308 	add.w	r3, r7, #8
 800a292:	4618      	mov	r0, r3
 800a294:	f7f8 fc26 	bl	8002ae4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a298:	6839      	ldr	r1, [r7, #0]
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	68ba      	ldr	r2, [r7, #8]
 800a29e:	9202      	str	r2, [sp, #8]
 800a2a0:	9301      	str	r3, [sp, #4]
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	9300      	str	r3, [sp, #0]
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	460a      	mov	r2, r1
 800a2aa:	491f      	ldr	r1, [pc, #124]	; (800a328 <vTaskStartScheduler+0xac>)
 800a2ac:	481f      	ldr	r0, [pc, #124]	; (800a32c <vTaskStartScheduler+0xb0>)
 800a2ae:	f7ff fde5 	bl	8009e7c <xTaskCreateStatic>
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	4a1e      	ldr	r2, [pc, #120]	; (800a330 <vTaskStartScheduler+0xb4>)
 800a2b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a2b8:	4b1d      	ldr	r3, [pc, #116]	; (800a330 <vTaskStartScheduler+0xb4>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d002      	beq.n	800a2c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	617b      	str	r3, [r7, #20]
 800a2c4:	e001      	b.n	800a2ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	2b01      	cmp	r3, #1
 800a2ce:	d118      	bne.n	800a302 <vTaskStartScheduler+0x86>
	__asm volatile
 800a2d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d4:	f383 8811 	msr	BASEPRI, r3
 800a2d8:	f3bf 8f6f 	isb	sy
 800a2dc:	f3bf 8f4f 	dsb	sy
 800a2e0:	613b      	str	r3, [r7, #16]
}
 800a2e2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a2e4:	4b13      	ldr	r3, [pc, #76]	; (800a334 <vTaskStartScheduler+0xb8>)
 800a2e6:	f04f 32ff 	mov.w	r2, #4294967295
 800a2ea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a2ec:	4b12      	ldr	r3, [pc, #72]	; (800a338 <vTaskStartScheduler+0xbc>)
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a2f2:	4b12      	ldr	r3, [pc, #72]	; (800a33c <vTaskStartScheduler+0xc0>)
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800a2f8:	f7f8 fbdc 	bl	8002ab4 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a2fc:	f000 fe70 	bl	800afe0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a300:	e00e      	b.n	800a320 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a308:	d10a      	bne.n	800a320 <vTaskStartScheduler+0xa4>
	__asm volatile
 800a30a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a30e:	f383 8811 	msr	BASEPRI, r3
 800a312:	f3bf 8f6f 	isb	sy
 800a316:	f3bf 8f4f 	dsb	sy
 800a31a:	60fb      	str	r3, [r7, #12]
}
 800a31c:	bf00      	nop
 800a31e:	e7fe      	b.n	800a31e <vTaskStartScheduler+0xa2>
}
 800a320:	bf00      	nop
 800a322:	3718      	adds	r7, #24
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}
 800a328:	0800b440 	.word	0x0800b440
 800a32c:	0800a925 	.word	0x0800a925
 800a330:	20007284 	.word	0x20007284
 800a334:	20007280 	.word	0x20007280
 800a338:	2000726c 	.word	0x2000726c
 800a33c:	20007264 	.word	0x20007264

0800a340 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a340:	b480      	push	{r7}
 800a342:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a344:	4b04      	ldr	r3, [pc, #16]	; (800a358 <vTaskSuspendAll+0x18>)
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	3301      	adds	r3, #1
 800a34a:	4a03      	ldr	r2, [pc, #12]	; (800a358 <vTaskSuspendAll+0x18>)
 800a34c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a34e:	bf00      	nop
 800a350:	46bd      	mov	sp, r7
 800a352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a356:	4770      	bx	lr
 800a358:	20007288 	.word	0x20007288

0800a35c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b084      	sub	sp, #16
 800a360:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a362:	2300      	movs	r3, #0
 800a364:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a366:	2300      	movs	r3, #0
 800a368:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a36a:	4b41      	ldr	r3, [pc, #260]	; (800a470 <xTaskResumeAll+0x114>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d10a      	bne.n	800a388 <xTaskResumeAll+0x2c>
	__asm volatile
 800a372:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a376:	f383 8811 	msr	BASEPRI, r3
 800a37a:	f3bf 8f6f 	isb	sy
 800a37e:	f3bf 8f4f 	dsb	sy
 800a382:	603b      	str	r3, [r7, #0]
}
 800a384:	bf00      	nop
 800a386:	e7fe      	b.n	800a386 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a388:	f000 fecc 	bl	800b124 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a38c:	4b38      	ldr	r3, [pc, #224]	; (800a470 <xTaskResumeAll+0x114>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	3b01      	subs	r3, #1
 800a392:	4a37      	ldr	r2, [pc, #220]	; (800a470 <xTaskResumeAll+0x114>)
 800a394:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a396:	4b36      	ldr	r3, [pc, #216]	; (800a470 <xTaskResumeAll+0x114>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d161      	bne.n	800a462 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a39e:	4b35      	ldr	r3, [pc, #212]	; (800a474 <xTaskResumeAll+0x118>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d05d      	beq.n	800a462 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a3a6:	e02e      	b.n	800a406 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3a8:	4b33      	ldr	r3, [pc, #204]	; (800a478 <xTaskResumeAll+0x11c>)
 800a3aa:	68db      	ldr	r3, [r3, #12]
 800a3ac:	68db      	ldr	r3, [r3, #12]
 800a3ae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	3318      	adds	r3, #24
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f7ff f86d 	bl	8009494 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	3304      	adds	r3, #4
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f7ff f868 	bl	8009494 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3c8:	2201      	movs	r2, #1
 800a3ca:	409a      	lsls	r2, r3
 800a3cc:	4b2b      	ldr	r3, [pc, #172]	; (800a47c <xTaskResumeAll+0x120>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	4313      	orrs	r3, r2
 800a3d2:	4a2a      	ldr	r2, [pc, #168]	; (800a47c <xTaskResumeAll+0x120>)
 800a3d4:	6013      	str	r3, [r2, #0]
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3da:	4613      	mov	r3, r2
 800a3dc:	009b      	lsls	r3, r3, #2
 800a3de:	4413      	add	r3, r2
 800a3e0:	009b      	lsls	r3, r3, #2
 800a3e2:	4a27      	ldr	r2, [pc, #156]	; (800a480 <xTaskResumeAll+0x124>)
 800a3e4:	441a      	add	r2, r3
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	3304      	adds	r3, #4
 800a3ea:	4619      	mov	r1, r3
 800a3ec:	4610      	mov	r0, r2
 800a3ee:	f7fe fff4 	bl	80093da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3f6:	4b23      	ldr	r3, [pc, #140]	; (800a484 <xTaskResumeAll+0x128>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3fc:	429a      	cmp	r2, r3
 800a3fe:	d302      	bcc.n	800a406 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800a400:	4b21      	ldr	r3, [pc, #132]	; (800a488 <xTaskResumeAll+0x12c>)
 800a402:	2201      	movs	r2, #1
 800a404:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a406:	4b1c      	ldr	r3, [pc, #112]	; (800a478 <xTaskResumeAll+0x11c>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d1cc      	bne.n	800a3a8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d001      	beq.n	800a418 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a414:	f000 fb16 	bl	800aa44 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a418:	4b1c      	ldr	r3, [pc, #112]	; (800a48c <xTaskResumeAll+0x130>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d010      	beq.n	800a446 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a424:	f000 f846 	bl	800a4b4 <xTaskIncrementTick>
 800a428:	4603      	mov	r3, r0
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d002      	beq.n	800a434 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800a42e:	4b16      	ldr	r3, [pc, #88]	; (800a488 <xTaskResumeAll+0x12c>)
 800a430:	2201      	movs	r2, #1
 800a432:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	3b01      	subs	r3, #1
 800a438:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d1f1      	bne.n	800a424 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800a440:	4b12      	ldr	r3, [pc, #72]	; (800a48c <xTaskResumeAll+0x130>)
 800a442:	2200      	movs	r2, #0
 800a444:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a446:	4b10      	ldr	r3, [pc, #64]	; (800a488 <xTaskResumeAll+0x12c>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d009      	beq.n	800a462 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a44e:	2301      	movs	r3, #1
 800a450:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a452:	4b0f      	ldr	r3, [pc, #60]	; (800a490 <xTaskResumeAll+0x134>)
 800a454:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a458:	601a      	str	r2, [r3, #0]
 800a45a:	f3bf 8f4f 	dsb	sy
 800a45e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a462:	f000 fe8f 	bl	800b184 <vPortExitCritical>

	return xAlreadyYielded;
 800a466:	68bb      	ldr	r3, [r7, #8]
}
 800a468:	4618      	mov	r0, r3
 800a46a:	3710      	adds	r7, #16
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd80      	pop	{r7, pc}
 800a470:	20007288 	.word	0x20007288
 800a474:	20007260 	.word	0x20007260
 800a478:	20007220 	.word	0x20007220
 800a47c:	20007268 	.word	0x20007268
 800a480:	20007164 	.word	0x20007164
 800a484:	20007160 	.word	0x20007160
 800a488:	20007274 	.word	0x20007274
 800a48c:	20007270 	.word	0x20007270
 800a490:	e000ed04 	.word	0xe000ed04

0800a494 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a494:	b480      	push	{r7}
 800a496:	b083      	sub	sp, #12
 800a498:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a49a:	4b05      	ldr	r3, [pc, #20]	; (800a4b0 <xTaskGetTickCount+0x1c>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a4a0:	687b      	ldr	r3, [r7, #4]
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	370c      	adds	r7, #12
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ac:	4770      	bx	lr
 800a4ae:	bf00      	nop
 800a4b0:	20007264 	.word	0x20007264

0800a4b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b086      	sub	sp, #24
 800a4b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a4be:	4b4e      	ldr	r3, [pc, #312]	; (800a5f8 <xTaskIncrementTick+0x144>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	f040 808e 	bne.w	800a5e4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a4c8:	4b4c      	ldr	r3, [pc, #304]	; (800a5fc <xTaskIncrementTick+0x148>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	3301      	adds	r3, #1
 800a4ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a4d0:	4a4a      	ldr	r2, [pc, #296]	; (800a5fc <xTaskIncrementTick+0x148>)
 800a4d2:	693b      	ldr	r3, [r7, #16]
 800a4d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d120      	bne.n	800a51e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a4dc:	4b48      	ldr	r3, [pc, #288]	; (800a600 <xTaskIncrementTick+0x14c>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d00a      	beq.n	800a4fc <xTaskIncrementTick+0x48>
	__asm volatile
 800a4e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ea:	f383 8811 	msr	BASEPRI, r3
 800a4ee:	f3bf 8f6f 	isb	sy
 800a4f2:	f3bf 8f4f 	dsb	sy
 800a4f6:	603b      	str	r3, [r7, #0]
}
 800a4f8:	bf00      	nop
 800a4fa:	e7fe      	b.n	800a4fa <xTaskIncrementTick+0x46>
 800a4fc:	4b40      	ldr	r3, [pc, #256]	; (800a600 <xTaskIncrementTick+0x14c>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	60fb      	str	r3, [r7, #12]
 800a502:	4b40      	ldr	r3, [pc, #256]	; (800a604 <xTaskIncrementTick+0x150>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	4a3e      	ldr	r2, [pc, #248]	; (800a600 <xTaskIncrementTick+0x14c>)
 800a508:	6013      	str	r3, [r2, #0]
 800a50a:	4a3e      	ldr	r2, [pc, #248]	; (800a604 <xTaskIncrementTick+0x150>)
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	6013      	str	r3, [r2, #0]
 800a510:	4b3d      	ldr	r3, [pc, #244]	; (800a608 <xTaskIncrementTick+0x154>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	3301      	adds	r3, #1
 800a516:	4a3c      	ldr	r2, [pc, #240]	; (800a608 <xTaskIncrementTick+0x154>)
 800a518:	6013      	str	r3, [r2, #0]
 800a51a:	f000 fa93 	bl	800aa44 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a51e:	4b3b      	ldr	r3, [pc, #236]	; (800a60c <xTaskIncrementTick+0x158>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	693a      	ldr	r2, [r7, #16]
 800a524:	429a      	cmp	r2, r3
 800a526:	d348      	bcc.n	800a5ba <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a528:	4b35      	ldr	r3, [pc, #212]	; (800a600 <xTaskIncrementTick+0x14c>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d104      	bne.n	800a53c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a532:	4b36      	ldr	r3, [pc, #216]	; (800a60c <xTaskIncrementTick+0x158>)
 800a534:	f04f 32ff 	mov.w	r2, #4294967295
 800a538:	601a      	str	r2, [r3, #0]
					break;
 800a53a:	e03e      	b.n	800a5ba <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a53c:	4b30      	ldr	r3, [pc, #192]	; (800a600 <xTaskIncrementTick+0x14c>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	68db      	ldr	r3, [r3, #12]
 800a542:	68db      	ldr	r3, [r3, #12]
 800a544:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	685b      	ldr	r3, [r3, #4]
 800a54a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a54c:	693a      	ldr	r2, [r7, #16]
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	429a      	cmp	r2, r3
 800a552:	d203      	bcs.n	800a55c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a554:	4a2d      	ldr	r2, [pc, #180]	; (800a60c <xTaskIncrementTick+0x158>)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a55a:	e02e      	b.n	800a5ba <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	3304      	adds	r3, #4
 800a560:	4618      	mov	r0, r3
 800a562:	f7fe ff97 	bl	8009494 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d004      	beq.n	800a578 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	3318      	adds	r3, #24
 800a572:	4618      	mov	r0, r3
 800a574:	f7fe ff8e 	bl	8009494 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a57c:	2201      	movs	r2, #1
 800a57e:	409a      	lsls	r2, r3
 800a580:	4b23      	ldr	r3, [pc, #140]	; (800a610 <xTaskIncrementTick+0x15c>)
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	4313      	orrs	r3, r2
 800a586:	4a22      	ldr	r2, [pc, #136]	; (800a610 <xTaskIncrementTick+0x15c>)
 800a588:	6013      	str	r3, [r2, #0]
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a58e:	4613      	mov	r3, r2
 800a590:	009b      	lsls	r3, r3, #2
 800a592:	4413      	add	r3, r2
 800a594:	009b      	lsls	r3, r3, #2
 800a596:	4a1f      	ldr	r2, [pc, #124]	; (800a614 <xTaskIncrementTick+0x160>)
 800a598:	441a      	add	r2, r3
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	3304      	adds	r3, #4
 800a59e:	4619      	mov	r1, r3
 800a5a0:	4610      	mov	r0, r2
 800a5a2:	f7fe ff1a 	bl	80093da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5aa:	4b1b      	ldr	r3, [pc, #108]	; (800a618 <xTaskIncrementTick+0x164>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5b0:	429a      	cmp	r2, r3
 800a5b2:	d3b9      	bcc.n	800a528 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a5b8:	e7b6      	b.n	800a528 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a5ba:	4b17      	ldr	r3, [pc, #92]	; (800a618 <xTaskIncrementTick+0x164>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5c0:	4914      	ldr	r1, [pc, #80]	; (800a614 <xTaskIncrementTick+0x160>)
 800a5c2:	4613      	mov	r3, r2
 800a5c4:	009b      	lsls	r3, r3, #2
 800a5c6:	4413      	add	r3, r2
 800a5c8:	009b      	lsls	r3, r3, #2
 800a5ca:	440b      	add	r3, r1
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	2b01      	cmp	r3, #1
 800a5d0:	d901      	bls.n	800a5d6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a5d6:	4b11      	ldr	r3, [pc, #68]	; (800a61c <xTaskIncrementTick+0x168>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d007      	beq.n	800a5ee <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800a5de:	2301      	movs	r3, #1
 800a5e0:	617b      	str	r3, [r7, #20]
 800a5e2:	e004      	b.n	800a5ee <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a5e4:	4b0e      	ldr	r3, [pc, #56]	; (800a620 <xTaskIncrementTick+0x16c>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	3301      	adds	r3, #1
 800a5ea:	4a0d      	ldr	r2, [pc, #52]	; (800a620 <xTaskIncrementTick+0x16c>)
 800a5ec:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a5ee:	697b      	ldr	r3, [r7, #20]
}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	3718      	adds	r7, #24
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd80      	pop	{r7, pc}
 800a5f8:	20007288 	.word	0x20007288
 800a5fc:	20007264 	.word	0x20007264
 800a600:	20007218 	.word	0x20007218
 800a604:	2000721c 	.word	0x2000721c
 800a608:	20007278 	.word	0x20007278
 800a60c:	20007280 	.word	0x20007280
 800a610:	20007268 	.word	0x20007268
 800a614:	20007164 	.word	0x20007164
 800a618:	20007160 	.word	0x20007160
 800a61c:	20007274 	.word	0x20007274
 800a620:	20007270 	.word	0x20007270

0800a624 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b086      	sub	sp, #24
 800a628:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a62a:	4b32      	ldr	r3, [pc, #200]	; (800a6f4 <vTaskSwitchContext+0xd0>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d003      	beq.n	800a63a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a632:	4b31      	ldr	r3, [pc, #196]	; (800a6f8 <vTaskSwitchContext+0xd4>)
 800a634:	2201      	movs	r2, #1
 800a636:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a638:	e058      	b.n	800a6ec <vTaskSwitchContext+0xc8>
		xYieldPending = pdFALSE;
 800a63a:	4b2f      	ldr	r3, [pc, #188]	; (800a6f8 <vTaskSwitchContext+0xd4>)
 800a63c:	2200      	movs	r2, #0
 800a63e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800a640:	f7f8 fa44 	bl	8002acc <getRunTimeCounterValue>
 800a644:	4603      	mov	r3, r0
 800a646:	4a2d      	ldr	r2, [pc, #180]	; (800a6fc <vTaskSwitchContext+0xd8>)
 800a648:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800a64a:	4b2c      	ldr	r3, [pc, #176]	; (800a6fc <vTaskSwitchContext+0xd8>)
 800a64c:	681a      	ldr	r2, [r3, #0]
 800a64e:	4b2c      	ldr	r3, [pc, #176]	; (800a700 <vTaskSwitchContext+0xdc>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	429a      	cmp	r2, r3
 800a654:	d909      	bls.n	800a66a <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800a656:	4b2b      	ldr	r3, [pc, #172]	; (800a704 <vTaskSwitchContext+0xe0>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a65c:	4a27      	ldr	r2, [pc, #156]	; (800a6fc <vTaskSwitchContext+0xd8>)
 800a65e:	6810      	ldr	r0, [r2, #0]
 800a660:	4a27      	ldr	r2, [pc, #156]	; (800a700 <vTaskSwitchContext+0xdc>)
 800a662:	6812      	ldr	r2, [r2, #0]
 800a664:	1a82      	subs	r2, r0, r2
 800a666:	440a      	add	r2, r1
 800a668:	64da      	str	r2, [r3, #76]	; 0x4c
			ulTaskSwitchedInTime = ulTotalRunTime;
 800a66a:	4b24      	ldr	r3, [pc, #144]	; (800a6fc <vTaskSwitchContext+0xd8>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	4a24      	ldr	r2, [pc, #144]	; (800a700 <vTaskSwitchContext+0xdc>)
 800a670:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a672:	4b25      	ldr	r3, [pc, #148]	; (800a708 <vTaskSwitchContext+0xe4>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	fab3 f383 	clz	r3, r3
 800a67e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a680:	7afb      	ldrb	r3, [r7, #11]
 800a682:	f1c3 031f 	rsb	r3, r3, #31
 800a686:	617b      	str	r3, [r7, #20]
 800a688:	4920      	ldr	r1, [pc, #128]	; (800a70c <vTaskSwitchContext+0xe8>)
 800a68a:	697a      	ldr	r2, [r7, #20]
 800a68c:	4613      	mov	r3, r2
 800a68e:	009b      	lsls	r3, r3, #2
 800a690:	4413      	add	r3, r2
 800a692:	009b      	lsls	r3, r3, #2
 800a694:	440b      	add	r3, r1
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d10a      	bne.n	800a6b2 <vTaskSwitchContext+0x8e>
	__asm volatile
 800a69c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6a0:	f383 8811 	msr	BASEPRI, r3
 800a6a4:	f3bf 8f6f 	isb	sy
 800a6a8:	f3bf 8f4f 	dsb	sy
 800a6ac:	607b      	str	r3, [r7, #4]
}
 800a6ae:	bf00      	nop
 800a6b0:	e7fe      	b.n	800a6b0 <vTaskSwitchContext+0x8c>
 800a6b2:	697a      	ldr	r2, [r7, #20]
 800a6b4:	4613      	mov	r3, r2
 800a6b6:	009b      	lsls	r3, r3, #2
 800a6b8:	4413      	add	r3, r2
 800a6ba:	009b      	lsls	r3, r3, #2
 800a6bc:	4a13      	ldr	r2, [pc, #76]	; (800a70c <vTaskSwitchContext+0xe8>)
 800a6be:	4413      	add	r3, r2
 800a6c0:	613b      	str	r3, [r7, #16]
 800a6c2:	693b      	ldr	r3, [r7, #16]
 800a6c4:	685b      	ldr	r3, [r3, #4]
 800a6c6:	685a      	ldr	r2, [r3, #4]
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	605a      	str	r2, [r3, #4]
 800a6cc:	693b      	ldr	r3, [r7, #16]
 800a6ce:	685a      	ldr	r2, [r3, #4]
 800a6d0:	693b      	ldr	r3, [r7, #16]
 800a6d2:	3308      	adds	r3, #8
 800a6d4:	429a      	cmp	r2, r3
 800a6d6:	d104      	bne.n	800a6e2 <vTaskSwitchContext+0xbe>
 800a6d8:	693b      	ldr	r3, [r7, #16]
 800a6da:	685b      	ldr	r3, [r3, #4]
 800a6dc:	685a      	ldr	r2, [r3, #4]
 800a6de:	693b      	ldr	r3, [r7, #16]
 800a6e0:	605a      	str	r2, [r3, #4]
 800a6e2:	693b      	ldr	r3, [r7, #16]
 800a6e4:	685b      	ldr	r3, [r3, #4]
 800a6e6:	68db      	ldr	r3, [r3, #12]
 800a6e8:	4a06      	ldr	r2, [pc, #24]	; (800a704 <vTaskSwitchContext+0xe0>)
 800a6ea:	6013      	str	r3, [r2, #0]
}
 800a6ec:	bf00      	nop
 800a6ee:	3718      	adds	r7, #24
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}
 800a6f4:	20007288 	.word	0x20007288
 800a6f8:	20007274 	.word	0x20007274
 800a6fc:	20007290 	.word	0x20007290
 800a700:	2000728c 	.word	0x2000728c
 800a704:	20007160 	.word	0x20007160
 800a708:	20007268 	.word	0x20007268
 800a70c:	20007164 	.word	0x20007164

0800a710 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b084      	sub	sp, #16
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
 800a718:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d10a      	bne.n	800a736 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a720:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a724:	f383 8811 	msr	BASEPRI, r3
 800a728:	f3bf 8f6f 	isb	sy
 800a72c:	f3bf 8f4f 	dsb	sy
 800a730:	60fb      	str	r3, [r7, #12]
}
 800a732:	bf00      	nop
 800a734:	e7fe      	b.n	800a734 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a736:	4b07      	ldr	r3, [pc, #28]	; (800a754 <vTaskPlaceOnEventList+0x44>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	3318      	adds	r3, #24
 800a73c:	4619      	mov	r1, r3
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f7fe fe6f 	bl	8009422 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a744:	2101      	movs	r1, #1
 800a746:	6838      	ldr	r0, [r7, #0]
 800a748:	f000 fb58 	bl	800adfc <prvAddCurrentTaskToDelayedList>
}
 800a74c:	bf00      	nop
 800a74e:	3710      	adds	r7, #16
 800a750:	46bd      	mov	sp, r7
 800a752:	bd80      	pop	{r7, pc}
 800a754:	20007160 	.word	0x20007160

0800a758 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b086      	sub	sp, #24
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	68db      	ldr	r3, [r3, #12]
 800a764:	68db      	ldr	r3, [r3, #12]
 800a766:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a768:	693b      	ldr	r3, [r7, #16]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d10a      	bne.n	800a784 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a76e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a772:	f383 8811 	msr	BASEPRI, r3
 800a776:	f3bf 8f6f 	isb	sy
 800a77a:	f3bf 8f4f 	dsb	sy
 800a77e:	60fb      	str	r3, [r7, #12]
}
 800a780:	bf00      	nop
 800a782:	e7fe      	b.n	800a782 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	3318      	adds	r3, #24
 800a788:	4618      	mov	r0, r3
 800a78a:	f7fe fe83 	bl	8009494 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a78e:	4b1d      	ldr	r3, [pc, #116]	; (800a804 <xTaskRemoveFromEventList+0xac>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d11c      	bne.n	800a7d0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a796:	693b      	ldr	r3, [r7, #16]
 800a798:	3304      	adds	r3, #4
 800a79a:	4618      	mov	r0, r3
 800a79c:	f7fe fe7a 	bl	8009494 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a7a0:	693b      	ldr	r3, [r7, #16]
 800a7a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7a4:	2201      	movs	r2, #1
 800a7a6:	409a      	lsls	r2, r3
 800a7a8:	4b17      	ldr	r3, [pc, #92]	; (800a808 <xTaskRemoveFromEventList+0xb0>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	4313      	orrs	r3, r2
 800a7ae:	4a16      	ldr	r2, [pc, #88]	; (800a808 <xTaskRemoveFromEventList+0xb0>)
 800a7b0:	6013      	str	r3, [r2, #0]
 800a7b2:	693b      	ldr	r3, [r7, #16]
 800a7b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7b6:	4613      	mov	r3, r2
 800a7b8:	009b      	lsls	r3, r3, #2
 800a7ba:	4413      	add	r3, r2
 800a7bc:	009b      	lsls	r3, r3, #2
 800a7be:	4a13      	ldr	r2, [pc, #76]	; (800a80c <xTaskRemoveFromEventList+0xb4>)
 800a7c0:	441a      	add	r2, r3
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	3304      	adds	r3, #4
 800a7c6:	4619      	mov	r1, r3
 800a7c8:	4610      	mov	r0, r2
 800a7ca:	f7fe fe06 	bl	80093da <vListInsertEnd>
 800a7ce:	e005      	b.n	800a7dc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a7d0:	693b      	ldr	r3, [r7, #16]
 800a7d2:	3318      	adds	r3, #24
 800a7d4:	4619      	mov	r1, r3
 800a7d6:	480e      	ldr	r0, [pc, #56]	; (800a810 <xTaskRemoveFromEventList+0xb8>)
 800a7d8:	f7fe fdff 	bl	80093da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a7dc:	693b      	ldr	r3, [r7, #16]
 800a7de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7e0:	4b0c      	ldr	r3, [pc, #48]	; (800a814 <xTaskRemoveFromEventList+0xbc>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7e6:	429a      	cmp	r2, r3
 800a7e8:	d905      	bls.n	800a7f6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a7ea:	2301      	movs	r3, #1
 800a7ec:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a7ee:	4b0a      	ldr	r3, [pc, #40]	; (800a818 <xTaskRemoveFromEventList+0xc0>)
 800a7f0:	2201      	movs	r2, #1
 800a7f2:	601a      	str	r2, [r3, #0]
 800a7f4:	e001      	b.n	800a7fa <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a7fa:	697b      	ldr	r3, [r7, #20]
}
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	3718      	adds	r7, #24
 800a800:	46bd      	mov	sp, r7
 800a802:	bd80      	pop	{r7, pc}
 800a804:	20007288 	.word	0x20007288
 800a808:	20007268 	.word	0x20007268
 800a80c:	20007164 	.word	0x20007164
 800a810:	20007220 	.word	0x20007220
 800a814:	20007160 	.word	0x20007160
 800a818:	20007274 	.word	0x20007274

0800a81c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a81c:	b480      	push	{r7}
 800a81e:	b083      	sub	sp, #12
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a824:	4b06      	ldr	r3, [pc, #24]	; (800a840 <vTaskInternalSetTimeOutState+0x24>)
 800a826:	681a      	ldr	r2, [r3, #0]
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a82c:	4b05      	ldr	r3, [pc, #20]	; (800a844 <vTaskInternalSetTimeOutState+0x28>)
 800a82e:	681a      	ldr	r2, [r3, #0]
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	605a      	str	r2, [r3, #4]
}
 800a834:	bf00      	nop
 800a836:	370c      	adds	r7, #12
 800a838:	46bd      	mov	sp, r7
 800a83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83e:	4770      	bx	lr
 800a840:	20007278 	.word	0x20007278
 800a844:	20007264 	.word	0x20007264

0800a848 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b088      	sub	sp, #32
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
 800a850:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d10a      	bne.n	800a86e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a85c:	f383 8811 	msr	BASEPRI, r3
 800a860:	f3bf 8f6f 	isb	sy
 800a864:	f3bf 8f4f 	dsb	sy
 800a868:	613b      	str	r3, [r7, #16]
}
 800a86a:	bf00      	nop
 800a86c:	e7fe      	b.n	800a86c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d10a      	bne.n	800a88a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a874:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a878:	f383 8811 	msr	BASEPRI, r3
 800a87c:	f3bf 8f6f 	isb	sy
 800a880:	f3bf 8f4f 	dsb	sy
 800a884:	60fb      	str	r3, [r7, #12]
}
 800a886:	bf00      	nop
 800a888:	e7fe      	b.n	800a888 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a88a:	f000 fc4b 	bl	800b124 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a88e:	4b1d      	ldr	r3, [pc, #116]	; (800a904 <xTaskCheckForTimeOut+0xbc>)
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	685b      	ldr	r3, [r3, #4]
 800a898:	69ba      	ldr	r2, [r7, #24]
 800a89a:	1ad3      	subs	r3, r2, r3
 800a89c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8a6:	d102      	bne.n	800a8ae <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	61fb      	str	r3, [r7, #28]
 800a8ac:	e023      	b.n	800a8f6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681a      	ldr	r2, [r3, #0]
 800a8b2:	4b15      	ldr	r3, [pc, #84]	; (800a908 <xTaskCheckForTimeOut+0xc0>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	429a      	cmp	r2, r3
 800a8b8:	d007      	beq.n	800a8ca <xTaskCheckForTimeOut+0x82>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	685b      	ldr	r3, [r3, #4]
 800a8be:	69ba      	ldr	r2, [r7, #24]
 800a8c0:	429a      	cmp	r2, r3
 800a8c2:	d302      	bcc.n	800a8ca <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	61fb      	str	r3, [r7, #28]
 800a8c8:	e015      	b.n	800a8f6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	697a      	ldr	r2, [r7, #20]
 800a8d0:	429a      	cmp	r2, r3
 800a8d2:	d20b      	bcs.n	800a8ec <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	681a      	ldr	r2, [r3, #0]
 800a8d8:	697b      	ldr	r3, [r7, #20]
 800a8da:	1ad2      	subs	r2, r2, r3
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a8e0:	6878      	ldr	r0, [r7, #4]
 800a8e2:	f7ff ff9b 	bl	800a81c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	61fb      	str	r3, [r7, #28]
 800a8ea:	e004      	b.n	800a8f6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a8f6:	f000 fc45 	bl	800b184 <vPortExitCritical>

	return xReturn;
 800a8fa:	69fb      	ldr	r3, [r7, #28]
}
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	3720      	adds	r7, #32
 800a900:	46bd      	mov	sp, r7
 800a902:	bd80      	pop	{r7, pc}
 800a904:	20007264 	.word	0x20007264
 800a908:	20007278 	.word	0x20007278

0800a90c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a90c:	b480      	push	{r7}
 800a90e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a910:	4b03      	ldr	r3, [pc, #12]	; (800a920 <vTaskMissedYield+0x14>)
 800a912:	2201      	movs	r2, #1
 800a914:	601a      	str	r2, [r3, #0]
}
 800a916:	bf00      	nop
 800a918:	46bd      	mov	sp, r7
 800a91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91e:	4770      	bx	lr
 800a920:	20007274 	.word	0x20007274

0800a924 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b082      	sub	sp, #8
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a92c:	f000 f852 	bl	800a9d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a930:	4b06      	ldr	r3, [pc, #24]	; (800a94c <prvIdleTask+0x28>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	2b01      	cmp	r3, #1
 800a936:	d9f9      	bls.n	800a92c <prvIdleTask+0x8>
			{
				taskYIELD();
 800a938:	4b05      	ldr	r3, [pc, #20]	; (800a950 <prvIdleTask+0x2c>)
 800a93a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a93e:	601a      	str	r2, [r3, #0]
 800a940:	f3bf 8f4f 	dsb	sy
 800a944:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a948:	e7f0      	b.n	800a92c <prvIdleTask+0x8>
 800a94a:	bf00      	nop
 800a94c:	20007164 	.word	0x20007164
 800a950:	e000ed04 	.word	0xe000ed04

0800a954 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b082      	sub	sp, #8
 800a958:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a95a:	2300      	movs	r3, #0
 800a95c:	607b      	str	r3, [r7, #4]
 800a95e:	e00c      	b.n	800a97a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a960:	687a      	ldr	r2, [r7, #4]
 800a962:	4613      	mov	r3, r2
 800a964:	009b      	lsls	r3, r3, #2
 800a966:	4413      	add	r3, r2
 800a968:	009b      	lsls	r3, r3, #2
 800a96a:	4a12      	ldr	r2, [pc, #72]	; (800a9b4 <prvInitialiseTaskLists+0x60>)
 800a96c:	4413      	add	r3, r2
 800a96e:	4618      	mov	r0, r3
 800a970:	f7fe fd06 	bl	8009380 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	3301      	adds	r3, #1
 800a978:	607b      	str	r3, [r7, #4]
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2b06      	cmp	r3, #6
 800a97e:	d9ef      	bls.n	800a960 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a980:	480d      	ldr	r0, [pc, #52]	; (800a9b8 <prvInitialiseTaskLists+0x64>)
 800a982:	f7fe fcfd 	bl	8009380 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a986:	480d      	ldr	r0, [pc, #52]	; (800a9bc <prvInitialiseTaskLists+0x68>)
 800a988:	f7fe fcfa 	bl	8009380 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a98c:	480c      	ldr	r0, [pc, #48]	; (800a9c0 <prvInitialiseTaskLists+0x6c>)
 800a98e:	f7fe fcf7 	bl	8009380 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a992:	480c      	ldr	r0, [pc, #48]	; (800a9c4 <prvInitialiseTaskLists+0x70>)
 800a994:	f7fe fcf4 	bl	8009380 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a998:	480b      	ldr	r0, [pc, #44]	; (800a9c8 <prvInitialiseTaskLists+0x74>)
 800a99a:	f7fe fcf1 	bl	8009380 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a99e:	4b0b      	ldr	r3, [pc, #44]	; (800a9cc <prvInitialiseTaskLists+0x78>)
 800a9a0:	4a05      	ldr	r2, [pc, #20]	; (800a9b8 <prvInitialiseTaskLists+0x64>)
 800a9a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a9a4:	4b0a      	ldr	r3, [pc, #40]	; (800a9d0 <prvInitialiseTaskLists+0x7c>)
 800a9a6:	4a05      	ldr	r2, [pc, #20]	; (800a9bc <prvInitialiseTaskLists+0x68>)
 800a9a8:	601a      	str	r2, [r3, #0]
}
 800a9aa:	bf00      	nop
 800a9ac:	3708      	adds	r7, #8
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}
 800a9b2:	bf00      	nop
 800a9b4:	20007164 	.word	0x20007164
 800a9b8:	200071f0 	.word	0x200071f0
 800a9bc:	20007204 	.word	0x20007204
 800a9c0:	20007220 	.word	0x20007220
 800a9c4:	20007234 	.word	0x20007234
 800a9c8:	2000724c 	.word	0x2000724c
 800a9cc:	20007218 	.word	0x20007218
 800a9d0:	2000721c 	.word	0x2000721c

0800a9d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b082      	sub	sp, #8
 800a9d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a9da:	e019      	b.n	800aa10 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a9dc:	f000 fba2 	bl	800b124 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9e0:	4b10      	ldr	r3, [pc, #64]	; (800aa24 <prvCheckTasksWaitingTermination+0x50>)
 800a9e2:	68db      	ldr	r3, [r3, #12]
 800a9e4:	68db      	ldr	r3, [r3, #12]
 800a9e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	3304      	adds	r3, #4
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f7fe fd51 	bl	8009494 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a9f2:	4b0d      	ldr	r3, [pc, #52]	; (800aa28 <prvCheckTasksWaitingTermination+0x54>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	3b01      	subs	r3, #1
 800a9f8:	4a0b      	ldr	r2, [pc, #44]	; (800aa28 <prvCheckTasksWaitingTermination+0x54>)
 800a9fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a9fc:	4b0b      	ldr	r3, [pc, #44]	; (800aa2c <prvCheckTasksWaitingTermination+0x58>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	3b01      	subs	r3, #1
 800aa02:	4a0a      	ldr	r2, [pc, #40]	; (800aa2c <prvCheckTasksWaitingTermination+0x58>)
 800aa04:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800aa06:	f000 fbbd 	bl	800b184 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f000 f810 	bl	800aa30 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aa10:	4b06      	ldr	r3, [pc, #24]	; (800aa2c <prvCheckTasksWaitingTermination+0x58>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d1e1      	bne.n	800a9dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800aa18:	bf00      	nop
 800aa1a:	bf00      	nop
 800aa1c:	3708      	adds	r7, #8
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}
 800aa22:	bf00      	nop
 800aa24:	20007234 	.word	0x20007234
 800aa28:	20007260 	.word	0x20007260
 800aa2c:	20007248 	.word	0x20007248

0800aa30 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800aa30:	b480      	push	{r7}
 800aa32:	b083      	sub	sp, #12
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800aa38:	bf00      	nop
 800aa3a:	370c      	adds	r7, #12
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa42:	4770      	bx	lr

0800aa44 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800aa44:	b480      	push	{r7}
 800aa46:	b083      	sub	sp, #12
 800aa48:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa4a:	4b0c      	ldr	r3, [pc, #48]	; (800aa7c <prvResetNextTaskUnblockTime+0x38>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d104      	bne.n	800aa5e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800aa54:	4b0a      	ldr	r3, [pc, #40]	; (800aa80 <prvResetNextTaskUnblockTime+0x3c>)
 800aa56:	f04f 32ff 	mov.w	r2, #4294967295
 800aa5a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aa5c:	e008      	b.n	800aa70 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa5e:	4b07      	ldr	r3, [pc, #28]	; (800aa7c <prvResetNextTaskUnblockTime+0x38>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	68db      	ldr	r3, [r3, #12]
 800aa64:	68db      	ldr	r3, [r3, #12]
 800aa66:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	685b      	ldr	r3, [r3, #4]
 800aa6c:	4a04      	ldr	r2, [pc, #16]	; (800aa80 <prvResetNextTaskUnblockTime+0x3c>)
 800aa6e:	6013      	str	r3, [r2, #0]
}
 800aa70:	bf00      	nop
 800aa72:	370c      	adds	r7, #12
 800aa74:	46bd      	mov	sp, r7
 800aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7a:	4770      	bx	lr
 800aa7c:	20007218 	.word	0x20007218
 800aa80:	20007280 	.word	0x20007280

0800aa84 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800aa84:	b480      	push	{r7}
 800aa86:	b083      	sub	sp, #12
 800aa88:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800aa8a:	4b0b      	ldr	r3, [pc, #44]	; (800aab8 <xTaskGetSchedulerState+0x34>)
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d102      	bne.n	800aa98 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800aa92:	2301      	movs	r3, #1
 800aa94:	607b      	str	r3, [r7, #4]
 800aa96:	e008      	b.n	800aaaa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa98:	4b08      	ldr	r3, [pc, #32]	; (800aabc <xTaskGetSchedulerState+0x38>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d102      	bne.n	800aaa6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800aaa0:	2302      	movs	r3, #2
 800aaa2:	607b      	str	r3, [r7, #4]
 800aaa4:	e001      	b.n	800aaaa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800aaaa:	687b      	ldr	r3, [r7, #4]
	}
 800aaac:	4618      	mov	r0, r3
 800aaae:	370c      	adds	r7, #12
 800aab0:	46bd      	mov	sp, r7
 800aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab6:	4770      	bx	lr
 800aab8:	2000726c 	.word	0x2000726c
 800aabc:	20007288 	.word	0x20007288

0800aac0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b084      	sub	sp, #16
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800aacc:	2300      	movs	r3, #0
 800aace:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d05e      	beq.n	800ab94 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aada:	4b31      	ldr	r3, [pc, #196]	; (800aba0 <xTaskPriorityInherit+0xe0>)
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aae0:	429a      	cmp	r2, r3
 800aae2:	d24e      	bcs.n	800ab82 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	699b      	ldr	r3, [r3, #24]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	db06      	blt.n	800aafa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aaec:	4b2c      	ldr	r3, [pc, #176]	; (800aba0 <xTaskPriorityInherit+0xe0>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaf2:	f1c3 0207 	rsb	r2, r3, #7
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800aafa:	68bb      	ldr	r3, [r7, #8]
 800aafc:	6959      	ldr	r1, [r3, #20]
 800aafe:	68bb      	ldr	r3, [r7, #8]
 800ab00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab02:	4613      	mov	r3, r2
 800ab04:	009b      	lsls	r3, r3, #2
 800ab06:	4413      	add	r3, r2
 800ab08:	009b      	lsls	r3, r3, #2
 800ab0a:	4a26      	ldr	r2, [pc, #152]	; (800aba4 <xTaskPriorityInherit+0xe4>)
 800ab0c:	4413      	add	r3, r2
 800ab0e:	4299      	cmp	r1, r3
 800ab10:	d12f      	bne.n	800ab72 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab12:	68bb      	ldr	r3, [r7, #8]
 800ab14:	3304      	adds	r3, #4
 800ab16:	4618      	mov	r0, r3
 800ab18:	f7fe fcbc 	bl	8009494 <uxListRemove>
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d10a      	bne.n	800ab38 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab26:	2201      	movs	r2, #1
 800ab28:	fa02 f303 	lsl.w	r3, r2, r3
 800ab2c:	43da      	mvns	r2, r3
 800ab2e:	4b1e      	ldr	r3, [pc, #120]	; (800aba8 <xTaskPriorityInherit+0xe8>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	4013      	ands	r3, r2
 800ab34:	4a1c      	ldr	r2, [pc, #112]	; (800aba8 <xTaskPriorityInherit+0xe8>)
 800ab36:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ab38:	4b19      	ldr	r3, [pc, #100]	; (800aba0 <xTaskPriorityInherit+0xe0>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab3e:	68bb      	ldr	r3, [r7, #8]
 800ab40:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab46:	2201      	movs	r2, #1
 800ab48:	409a      	lsls	r2, r3
 800ab4a:	4b17      	ldr	r3, [pc, #92]	; (800aba8 <xTaskPriorityInherit+0xe8>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	4313      	orrs	r3, r2
 800ab50:	4a15      	ldr	r2, [pc, #84]	; (800aba8 <xTaskPriorityInherit+0xe8>)
 800ab52:	6013      	str	r3, [r2, #0]
 800ab54:	68bb      	ldr	r3, [r7, #8]
 800ab56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab58:	4613      	mov	r3, r2
 800ab5a:	009b      	lsls	r3, r3, #2
 800ab5c:	4413      	add	r3, r2
 800ab5e:	009b      	lsls	r3, r3, #2
 800ab60:	4a10      	ldr	r2, [pc, #64]	; (800aba4 <xTaskPriorityInherit+0xe4>)
 800ab62:	441a      	add	r2, r3
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	3304      	adds	r3, #4
 800ab68:	4619      	mov	r1, r3
 800ab6a:	4610      	mov	r0, r2
 800ab6c:	f7fe fc35 	bl	80093da <vListInsertEnd>
 800ab70:	e004      	b.n	800ab7c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ab72:	4b0b      	ldr	r3, [pc, #44]	; (800aba0 <xTaskPriorityInherit+0xe0>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	60fb      	str	r3, [r7, #12]
 800ab80:	e008      	b.n	800ab94 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ab82:	68bb      	ldr	r3, [r7, #8]
 800ab84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ab86:	4b06      	ldr	r3, [pc, #24]	; (800aba0 <xTaskPriorityInherit+0xe0>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab8c:	429a      	cmp	r2, r3
 800ab8e:	d201      	bcs.n	800ab94 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ab90:	2301      	movs	r3, #1
 800ab92:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ab94:	68fb      	ldr	r3, [r7, #12]
	}
 800ab96:	4618      	mov	r0, r3
 800ab98:	3710      	adds	r7, #16
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bd80      	pop	{r7, pc}
 800ab9e:	bf00      	nop
 800aba0:	20007160 	.word	0x20007160
 800aba4:	20007164 	.word	0x20007164
 800aba8:	20007268 	.word	0x20007268

0800abac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800abac:	b580      	push	{r7, lr}
 800abae:	b086      	sub	sp, #24
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800abb8:	2300      	movs	r3, #0
 800abba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d06e      	beq.n	800aca0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800abc2:	4b3a      	ldr	r3, [pc, #232]	; (800acac <xTaskPriorityDisinherit+0x100>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	693a      	ldr	r2, [r7, #16]
 800abc8:	429a      	cmp	r2, r3
 800abca:	d00a      	beq.n	800abe2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800abcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abd0:	f383 8811 	msr	BASEPRI, r3
 800abd4:	f3bf 8f6f 	isb	sy
 800abd8:	f3bf 8f4f 	dsb	sy
 800abdc:	60fb      	str	r3, [r7, #12]
}
 800abde:	bf00      	nop
 800abe0:	e7fe      	b.n	800abe0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800abe2:	693b      	ldr	r3, [r7, #16]
 800abe4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d10a      	bne.n	800ac00 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800abea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abee:	f383 8811 	msr	BASEPRI, r3
 800abf2:	f3bf 8f6f 	isb	sy
 800abf6:	f3bf 8f4f 	dsb	sy
 800abfa:	60bb      	str	r3, [r7, #8]
}
 800abfc:	bf00      	nop
 800abfe:	e7fe      	b.n	800abfe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ac00:	693b      	ldr	r3, [r7, #16]
 800ac02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac04:	1e5a      	subs	r2, r3, #1
 800ac06:	693b      	ldr	r3, [r7, #16]
 800ac08:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ac0a:	693b      	ldr	r3, [r7, #16]
 800ac0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac0e:	693b      	ldr	r3, [r7, #16]
 800ac10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac12:	429a      	cmp	r2, r3
 800ac14:	d044      	beq.n	800aca0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ac16:	693b      	ldr	r3, [r7, #16]
 800ac18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d140      	bne.n	800aca0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ac1e:	693b      	ldr	r3, [r7, #16]
 800ac20:	3304      	adds	r3, #4
 800ac22:	4618      	mov	r0, r3
 800ac24:	f7fe fc36 	bl	8009494 <uxListRemove>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d115      	bne.n	800ac5a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ac2e:	693b      	ldr	r3, [r7, #16]
 800ac30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac32:	491f      	ldr	r1, [pc, #124]	; (800acb0 <xTaskPriorityDisinherit+0x104>)
 800ac34:	4613      	mov	r3, r2
 800ac36:	009b      	lsls	r3, r3, #2
 800ac38:	4413      	add	r3, r2
 800ac3a:	009b      	lsls	r3, r3, #2
 800ac3c:	440b      	add	r3, r1
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d10a      	bne.n	800ac5a <xTaskPriorityDisinherit+0xae>
 800ac44:	693b      	ldr	r3, [r7, #16]
 800ac46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac48:	2201      	movs	r2, #1
 800ac4a:	fa02 f303 	lsl.w	r3, r2, r3
 800ac4e:	43da      	mvns	r2, r3
 800ac50:	4b18      	ldr	r3, [pc, #96]	; (800acb4 <xTaskPriorityDisinherit+0x108>)
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	4013      	ands	r3, r2
 800ac56:	4a17      	ldr	r2, [pc, #92]	; (800acb4 <xTaskPriorityDisinherit+0x108>)
 800ac58:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ac5a:	693b      	ldr	r3, [r7, #16]
 800ac5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac5e:	693b      	ldr	r3, [r7, #16]
 800ac60:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac62:	693b      	ldr	r3, [r7, #16]
 800ac64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac66:	f1c3 0207 	rsb	r2, r3, #7
 800ac6a:	693b      	ldr	r3, [r7, #16]
 800ac6c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ac6e:	693b      	ldr	r3, [r7, #16]
 800ac70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac72:	2201      	movs	r2, #1
 800ac74:	409a      	lsls	r2, r3
 800ac76:	4b0f      	ldr	r3, [pc, #60]	; (800acb4 <xTaskPriorityDisinherit+0x108>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	4313      	orrs	r3, r2
 800ac7c:	4a0d      	ldr	r2, [pc, #52]	; (800acb4 <xTaskPriorityDisinherit+0x108>)
 800ac7e:	6013      	str	r3, [r2, #0]
 800ac80:	693b      	ldr	r3, [r7, #16]
 800ac82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac84:	4613      	mov	r3, r2
 800ac86:	009b      	lsls	r3, r3, #2
 800ac88:	4413      	add	r3, r2
 800ac8a:	009b      	lsls	r3, r3, #2
 800ac8c:	4a08      	ldr	r2, [pc, #32]	; (800acb0 <xTaskPriorityDisinherit+0x104>)
 800ac8e:	441a      	add	r2, r3
 800ac90:	693b      	ldr	r3, [r7, #16]
 800ac92:	3304      	adds	r3, #4
 800ac94:	4619      	mov	r1, r3
 800ac96:	4610      	mov	r0, r2
 800ac98:	f7fe fb9f 	bl	80093da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ac9c:	2301      	movs	r3, #1
 800ac9e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aca0:	697b      	ldr	r3, [r7, #20]
	}
 800aca2:	4618      	mov	r0, r3
 800aca4:	3718      	adds	r7, #24
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}
 800acaa:	bf00      	nop
 800acac:	20007160 	.word	0x20007160
 800acb0:	20007164 	.word	0x20007164
 800acb4:	20007268 	.word	0x20007268

0800acb8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b088      	sub	sp, #32
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
 800acc0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800acc6:	2301      	movs	r3, #1
 800acc8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d077      	beq.n	800adc0 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800acd0:	69bb      	ldr	r3, [r7, #24]
 800acd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d10a      	bne.n	800acee <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800acd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acdc:	f383 8811 	msr	BASEPRI, r3
 800ace0:	f3bf 8f6f 	isb	sy
 800ace4:	f3bf 8f4f 	dsb	sy
 800ace8:	60fb      	str	r3, [r7, #12]
}
 800acea:	bf00      	nop
 800acec:	e7fe      	b.n	800acec <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800acee:	69bb      	ldr	r3, [r7, #24]
 800acf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acf2:	683a      	ldr	r2, [r7, #0]
 800acf4:	429a      	cmp	r2, r3
 800acf6:	d902      	bls.n	800acfe <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	61fb      	str	r3, [r7, #28]
 800acfc:	e002      	b.n	800ad04 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800acfe:	69bb      	ldr	r3, [r7, #24]
 800ad00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad02:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ad04:	69bb      	ldr	r3, [r7, #24]
 800ad06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad08:	69fa      	ldr	r2, [r7, #28]
 800ad0a:	429a      	cmp	r2, r3
 800ad0c:	d058      	beq.n	800adc0 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ad0e:	69bb      	ldr	r3, [r7, #24]
 800ad10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad12:	697a      	ldr	r2, [r7, #20]
 800ad14:	429a      	cmp	r2, r3
 800ad16:	d153      	bne.n	800adc0 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ad18:	4b2b      	ldr	r3, [pc, #172]	; (800adc8 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	69ba      	ldr	r2, [r7, #24]
 800ad1e:	429a      	cmp	r2, r3
 800ad20:	d10a      	bne.n	800ad38 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800ad22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad26:	f383 8811 	msr	BASEPRI, r3
 800ad2a:	f3bf 8f6f 	isb	sy
 800ad2e:	f3bf 8f4f 	dsb	sy
 800ad32:	60bb      	str	r3, [r7, #8]
}
 800ad34:	bf00      	nop
 800ad36:	e7fe      	b.n	800ad36 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ad38:	69bb      	ldr	r3, [r7, #24]
 800ad3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad3c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ad3e:	69bb      	ldr	r3, [r7, #24]
 800ad40:	69fa      	ldr	r2, [r7, #28]
 800ad42:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ad44:	69bb      	ldr	r3, [r7, #24]
 800ad46:	699b      	ldr	r3, [r3, #24]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	db04      	blt.n	800ad56 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad4c:	69fb      	ldr	r3, [r7, #28]
 800ad4e:	f1c3 0207 	rsb	r2, r3, #7
 800ad52:	69bb      	ldr	r3, [r7, #24]
 800ad54:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ad56:	69bb      	ldr	r3, [r7, #24]
 800ad58:	6959      	ldr	r1, [r3, #20]
 800ad5a:	693a      	ldr	r2, [r7, #16]
 800ad5c:	4613      	mov	r3, r2
 800ad5e:	009b      	lsls	r3, r3, #2
 800ad60:	4413      	add	r3, r2
 800ad62:	009b      	lsls	r3, r3, #2
 800ad64:	4a19      	ldr	r2, [pc, #100]	; (800adcc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800ad66:	4413      	add	r3, r2
 800ad68:	4299      	cmp	r1, r3
 800ad6a:	d129      	bne.n	800adc0 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad6c:	69bb      	ldr	r3, [r7, #24]
 800ad6e:	3304      	adds	r3, #4
 800ad70:	4618      	mov	r0, r3
 800ad72:	f7fe fb8f 	bl	8009494 <uxListRemove>
 800ad76:	4603      	mov	r3, r0
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d10a      	bne.n	800ad92 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800ad7c:	69bb      	ldr	r3, [r7, #24]
 800ad7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad80:	2201      	movs	r2, #1
 800ad82:	fa02 f303 	lsl.w	r3, r2, r3
 800ad86:	43da      	mvns	r2, r3
 800ad88:	4b11      	ldr	r3, [pc, #68]	; (800add0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	4013      	ands	r3, r2
 800ad8e:	4a10      	ldr	r2, [pc, #64]	; (800add0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ad90:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ad92:	69bb      	ldr	r3, [r7, #24]
 800ad94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad96:	2201      	movs	r2, #1
 800ad98:	409a      	lsls	r2, r3
 800ad9a:	4b0d      	ldr	r3, [pc, #52]	; (800add0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	4313      	orrs	r3, r2
 800ada0:	4a0b      	ldr	r2, [pc, #44]	; (800add0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ada2:	6013      	str	r3, [r2, #0]
 800ada4:	69bb      	ldr	r3, [r7, #24]
 800ada6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ada8:	4613      	mov	r3, r2
 800adaa:	009b      	lsls	r3, r3, #2
 800adac:	4413      	add	r3, r2
 800adae:	009b      	lsls	r3, r3, #2
 800adb0:	4a06      	ldr	r2, [pc, #24]	; (800adcc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800adb2:	441a      	add	r2, r3
 800adb4:	69bb      	ldr	r3, [r7, #24]
 800adb6:	3304      	adds	r3, #4
 800adb8:	4619      	mov	r1, r3
 800adba:	4610      	mov	r0, r2
 800adbc:	f7fe fb0d 	bl	80093da <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800adc0:	bf00      	nop
 800adc2:	3720      	adds	r7, #32
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}
 800adc8:	20007160 	.word	0x20007160
 800adcc:	20007164 	.word	0x20007164
 800add0:	20007268 	.word	0x20007268

0800add4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800add4:	b480      	push	{r7}
 800add6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800add8:	4b07      	ldr	r3, [pc, #28]	; (800adf8 <pvTaskIncrementMutexHeldCount+0x24>)
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d004      	beq.n	800adea <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ade0:	4b05      	ldr	r3, [pc, #20]	; (800adf8 <pvTaskIncrementMutexHeldCount+0x24>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ade6:	3201      	adds	r2, #1
 800ade8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800adea:	4b03      	ldr	r3, [pc, #12]	; (800adf8 <pvTaskIncrementMutexHeldCount+0x24>)
 800adec:	681b      	ldr	r3, [r3, #0]
	}
 800adee:	4618      	mov	r0, r3
 800adf0:	46bd      	mov	sp, r7
 800adf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf6:	4770      	bx	lr
 800adf8:	20007160 	.word	0x20007160

0800adfc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b084      	sub	sp, #16
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
 800ae04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ae06:	4b29      	ldr	r3, [pc, #164]	; (800aeac <prvAddCurrentTaskToDelayedList+0xb0>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae0c:	4b28      	ldr	r3, [pc, #160]	; (800aeb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	3304      	adds	r3, #4
 800ae12:	4618      	mov	r0, r3
 800ae14:	f7fe fb3e 	bl	8009494 <uxListRemove>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d10b      	bne.n	800ae36 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ae1e:	4b24      	ldr	r3, [pc, #144]	; (800aeb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae24:	2201      	movs	r2, #1
 800ae26:	fa02 f303 	lsl.w	r3, r2, r3
 800ae2a:	43da      	mvns	r2, r3
 800ae2c:	4b21      	ldr	r3, [pc, #132]	; (800aeb4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	4013      	ands	r3, r2
 800ae32:	4a20      	ldr	r2, [pc, #128]	; (800aeb4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ae34:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae3c:	d10a      	bne.n	800ae54 <prvAddCurrentTaskToDelayedList+0x58>
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d007      	beq.n	800ae54 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ae44:	4b1a      	ldr	r3, [pc, #104]	; (800aeb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	3304      	adds	r3, #4
 800ae4a:	4619      	mov	r1, r3
 800ae4c:	481a      	ldr	r0, [pc, #104]	; (800aeb8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800ae4e:	f7fe fac4 	bl	80093da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ae52:	e026      	b.n	800aea2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ae54:	68fa      	ldr	r2, [r7, #12]
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	4413      	add	r3, r2
 800ae5a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ae5c:	4b14      	ldr	r3, [pc, #80]	; (800aeb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	68ba      	ldr	r2, [r7, #8]
 800ae62:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ae64:	68ba      	ldr	r2, [r7, #8]
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	429a      	cmp	r2, r3
 800ae6a:	d209      	bcs.n	800ae80 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ae6c:	4b13      	ldr	r3, [pc, #76]	; (800aebc <prvAddCurrentTaskToDelayedList+0xc0>)
 800ae6e:	681a      	ldr	r2, [r3, #0]
 800ae70:	4b0f      	ldr	r3, [pc, #60]	; (800aeb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	3304      	adds	r3, #4
 800ae76:	4619      	mov	r1, r3
 800ae78:	4610      	mov	r0, r2
 800ae7a:	f7fe fad2 	bl	8009422 <vListInsert>
}
 800ae7e:	e010      	b.n	800aea2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ae80:	4b0f      	ldr	r3, [pc, #60]	; (800aec0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800ae82:	681a      	ldr	r2, [r3, #0]
 800ae84:	4b0a      	ldr	r3, [pc, #40]	; (800aeb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	3304      	adds	r3, #4
 800ae8a:	4619      	mov	r1, r3
 800ae8c:	4610      	mov	r0, r2
 800ae8e:	f7fe fac8 	bl	8009422 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ae92:	4b0c      	ldr	r3, [pc, #48]	; (800aec4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	68ba      	ldr	r2, [r7, #8]
 800ae98:	429a      	cmp	r2, r3
 800ae9a:	d202      	bcs.n	800aea2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ae9c:	4a09      	ldr	r2, [pc, #36]	; (800aec4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ae9e:	68bb      	ldr	r3, [r7, #8]
 800aea0:	6013      	str	r3, [r2, #0]
}
 800aea2:	bf00      	nop
 800aea4:	3710      	adds	r7, #16
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}
 800aeaa:	bf00      	nop
 800aeac:	20007264 	.word	0x20007264
 800aeb0:	20007160 	.word	0x20007160
 800aeb4:	20007268 	.word	0x20007268
 800aeb8:	2000724c 	.word	0x2000724c
 800aebc:	2000721c 	.word	0x2000721c
 800aec0:	20007218 	.word	0x20007218
 800aec4:	20007280 	.word	0x20007280

0800aec8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800aec8:	b480      	push	{r7}
 800aeca:	b085      	sub	sp, #20
 800aecc:	af00      	add	r7, sp, #0
 800aece:	60f8      	str	r0, [r7, #12]
 800aed0:	60b9      	str	r1, [r7, #8]
 800aed2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	3b04      	subs	r3, #4
 800aed8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800aee0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	3b04      	subs	r3, #4
 800aee6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800aee8:	68bb      	ldr	r3, [r7, #8]
 800aeea:	f023 0201 	bic.w	r2, r3, #1
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	3b04      	subs	r3, #4
 800aef6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800aef8:	4a0c      	ldr	r2, [pc, #48]	; (800af2c <pxPortInitialiseStack+0x64>)
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	3b14      	subs	r3, #20
 800af02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800af04:	687a      	ldr	r2, [r7, #4]
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	3b04      	subs	r3, #4
 800af0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	f06f 0202 	mvn.w	r2, #2
 800af16:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	3b20      	subs	r3, #32
 800af1c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800af1e:	68fb      	ldr	r3, [r7, #12]
}
 800af20:	4618      	mov	r0, r3
 800af22:	3714      	adds	r7, #20
 800af24:	46bd      	mov	sp, r7
 800af26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2a:	4770      	bx	lr
 800af2c:	0800af31 	.word	0x0800af31

0800af30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800af30:	b480      	push	{r7}
 800af32:	b085      	sub	sp, #20
 800af34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800af36:	2300      	movs	r3, #0
 800af38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800af3a:	4b12      	ldr	r3, [pc, #72]	; (800af84 <prvTaskExitError+0x54>)
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af42:	d00a      	beq.n	800af5a <prvTaskExitError+0x2a>
	__asm volatile
 800af44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af48:	f383 8811 	msr	BASEPRI, r3
 800af4c:	f3bf 8f6f 	isb	sy
 800af50:	f3bf 8f4f 	dsb	sy
 800af54:	60fb      	str	r3, [r7, #12]
}
 800af56:	bf00      	nop
 800af58:	e7fe      	b.n	800af58 <prvTaskExitError+0x28>
	__asm volatile
 800af5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af5e:	f383 8811 	msr	BASEPRI, r3
 800af62:	f3bf 8f6f 	isb	sy
 800af66:	f3bf 8f4f 	dsb	sy
 800af6a:	60bb      	str	r3, [r7, #8]
}
 800af6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800af6e:	bf00      	nop
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d0fc      	beq.n	800af70 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800af76:	bf00      	nop
 800af78:	bf00      	nop
 800af7a:	3714      	adds	r7, #20
 800af7c:	46bd      	mov	sp, r7
 800af7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af82:	4770      	bx	lr
 800af84:	20000078 	.word	0x20000078
	...

0800af90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800af90:	4b07      	ldr	r3, [pc, #28]	; (800afb0 <pxCurrentTCBConst2>)
 800af92:	6819      	ldr	r1, [r3, #0]
 800af94:	6808      	ldr	r0, [r1, #0]
 800af96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af9a:	f380 8809 	msr	PSP, r0
 800af9e:	f3bf 8f6f 	isb	sy
 800afa2:	f04f 0000 	mov.w	r0, #0
 800afa6:	f380 8811 	msr	BASEPRI, r0
 800afaa:	4770      	bx	lr
 800afac:	f3af 8000 	nop.w

0800afb0 <pxCurrentTCBConst2>:
 800afb0:	20007160 	.word	0x20007160
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800afb4:	bf00      	nop
 800afb6:	bf00      	nop

0800afb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800afb8:	4808      	ldr	r0, [pc, #32]	; (800afdc <prvPortStartFirstTask+0x24>)
 800afba:	6800      	ldr	r0, [r0, #0]
 800afbc:	6800      	ldr	r0, [r0, #0]
 800afbe:	f380 8808 	msr	MSP, r0
 800afc2:	f04f 0000 	mov.w	r0, #0
 800afc6:	f380 8814 	msr	CONTROL, r0
 800afca:	b662      	cpsie	i
 800afcc:	b661      	cpsie	f
 800afce:	f3bf 8f4f 	dsb	sy
 800afd2:	f3bf 8f6f 	isb	sy
 800afd6:	df00      	svc	0
 800afd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800afda:	bf00      	nop
 800afdc:	e000ed08 	.word	0xe000ed08

0800afe0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b086      	sub	sp, #24
 800afe4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800afe6:	4b46      	ldr	r3, [pc, #280]	; (800b100 <xPortStartScheduler+0x120>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	4a46      	ldr	r2, [pc, #280]	; (800b104 <xPortStartScheduler+0x124>)
 800afec:	4293      	cmp	r3, r2
 800afee:	d10a      	bne.n	800b006 <xPortStartScheduler+0x26>
	__asm volatile
 800aff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff4:	f383 8811 	msr	BASEPRI, r3
 800aff8:	f3bf 8f6f 	isb	sy
 800affc:	f3bf 8f4f 	dsb	sy
 800b000:	613b      	str	r3, [r7, #16]
}
 800b002:	bf00      	nop
 800b004:	e7fe      	b.n	800b004 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b006:	4b3e      	ldr	r3, [pc, #248]	; (800b100 <xPortStartScheduler+0x120>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	4a3f      	ldr	r2, [pc, #252]	; (800b108 <xPortStartScheduler+0x128>)
 800b00c:	4293      	cmp	r3, r2
 800b00e:	d10a      	bne.n	800b026 <xPortStartScheduler+0x46>
	__asm volatile
 800b010:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b014:	f383 8811 	msr	BASEPRI, r3
 800b018:	f3bf 8f6f 	isb	sy
 800b01c:	f3bf 8f4f 	dsb	sy
 800b020:	60fb      	str	r3, [r7, #12]
}
 800b022:	bf00      	nop
 800b024:	e7fe      	b.n	800b024 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b026:	4b39      	ldr	r3, [pc, #228]	; (800b10c <xPortStartScheduler+0x12c>)
 800b028:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b02a:	697b      	ldr	r3, [r7, #20]
 800b02c:	781b      	ldrb	r3, [r3, #0]
 800b02e:	b2db      	uxtb	r3, r3
 800b030:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b032:	697b      	ldr	r3, [r7, #20]
 800b034:	22ff      	movs	r2, #255	; 0xff
 800b036:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b038:	697b      	ldr	r3, [r7, #20]
 800b03a:	781b      	ldrb	r3, [r3, #0]
 800b03c:	b2db      	uxtb	r3, r3
 800b03e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b040:	78fb      	ldrb	r3, [r7, #3]
 800b042:	b2db      	uxtb	r3, r3
 800b044:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b048:	b2da      	uxtb	r2, r3
 800b04a:	4b31      	ldr	r3, [pc, #196]	; (800b110 <xPortStartScheduler+0x130>)
 800b04c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b04e:	4b31      	ldr	r3, [pc, #196]	; (800b114 <xPortStartScheduler+0x134>)
 800b050:	2207      	movs	r2, #7
 800b052:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b054:	e009      	b.n	800b06a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b056:	4b2f      	ldr	r3, [pc, #188]	; (800b114 <xPortStartScheduler+0x134>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	3b01      	subs	r3, #1
 800b05c:	4a2d      	ldr	r2, [pc, #180]	; (800b114 <xPortStartScheduler+0x134>)
 800b05e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b060:	78fb      	ldrb	r3, [r7, #3]
 800b062:	b2db      	uxtb	r3, r3
 800b064:	005b      	lsls	r3, r3, #1
 800b066:	b2db      	uxtb	r3, r3
 800b068:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b06a:	78fb      	ldrb	r3, [r7, #3]
 800b06c:	b2db      	uxtb	r3, r3
 800b06e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b072:	2b80      	cmp	r3, #128	; 0x80
 800b074:	d0ef      	beq.n	800b056 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b076:	4b27      	ldr	r3, [pc, #156]	; (800b114 <xPortStartScheduler+0x134>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	f1c3 0307 	rsb	r3, r3, #7
 800b07e:	2b04      	cmp	r3, #4
 800b080:	d00a      	beq.n	800b098 <xPortStartScheduler+0xb8>
	__asm volatile
 800b082:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b086:	f383 8811 	msr	BASEPRI, r3
 800b08a:	f3bf 8f6f 	isb	sy
 800b08e:	f3bf 8f4f 	dsb	sy
 800b092:	60bb      	str	r3, [r7, #8]
}
 800b094:	bf00      	nop
 800b096:	e7fe      	b.n	800b096 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b098:	4b1e      	ldr	r3, [pc, #120]	; (800b114 <xPortStartScheduler+0x134>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	021b      	lsls	r3, r3, #8
 800b09e:	4a1d      	ldr	r2, [pc, #116]	; (800b114 <xPortStartScheduler+0x134>)
 800b0a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b0a2:	4b1c      	ldr	r3, [pc, #112]	; (800b114 <xPortStartScheduler+0x134>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b0aa:	4a1a      	ldr	r2, [pc, #104]	; (800b114 <xPortStartScheduler+0x134>)
 800b0ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	b2da      	uxtb	r2, r3
 800b0b2:	697b      	ldr	r3, [r7, #20]
 800b0b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b0b6:	4b18      	ldr	r3, [pc, #96]	; (800b118 <xPortStartScheduler+0x138>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	4a17      	ldr	r2, [pc, #92]	; (800b118 <xPortStartScheduler+0x138>)
 800b0bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b0c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b0c2:	4b15      	ldr	r3, [pc, #84]	; (800b118 <xPortStartScheduler+0x138>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	4a14      	ldr	r2, [pc, #80]	; (800b118 <xPortStartScheduler+0x138>)
 800b0c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b0cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b0ce:	f000 f8dd 	bl	800b28c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b0d2:	4b12      	ldr	r3, [pc, #72]	; (800b11c <xPortStartScheduler+0x13c>)
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b0d8:	f000 f8fc 	bl	800b2d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b0dc:	4b10      	ldr	r3, [pc, #64]	; (800b120 <xPortStartScheduler+0x140>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	4a0f      	ldr	r2, [pc, #60]	; (800b120 <xPortStartScheduler+0x140>)
 800b0e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b0e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b0e8:	f7ff ff66 	bl	800afb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b0ec:	f7ff fa9a 	bl	800a624 <vTaskSwitchContext>
	prvTaskExitError();
 800b0f0:	f7ff ff1e 	bl	800af30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b0f4:	2300      	movs	r3, #0
}
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	3718      	adds	r7, #24
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}
 800b0fe:	bf00      	nop
 800b100:	e000ed00 	.word	0xe000ed00
 800b104:	410fc271 	.word	0x410fc271
 800b108:	410fc270 	.word	0x410fc270
 800b10c:	e000e400 	.word	0xe000e400
 800b110:	20007294 	.word	0x20007294
 800b114:	20007298 	.word	0x20007298
 800b118:	e000ed20 	.word	0xe000ed20
 800b11c:	20000078 	.word	0x20000078
 800b120:	e000ef34 	.word	0xe000ef34

0800b124 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b124:	b480      	push	{r7}
 800b126:	b083      	sub	sp, #12
 800b128:	af00      	add	r7, sp, #0
	__asm volatile
 800b12a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b12e:	f383 8811 	msr	BASEPRI, r3
 800b132:	f3bf 8f6f 	isb	sy
 800b136:	f3bf 8f4f 	dsb	sy
 800b13a:	607b      	str	r3, [r7, #4]
}
 800b13c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b13e:	4b0f      	ldr	r3, [pc, #60]	; (800b17c <vPortEnterCritical+0x58>)
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	3301      	adds	r3, #1
 800b144:	4a0d      	ldr	r2, [pc, #52]	; (800b17c <vPortEnterCritical+0x58>)
 800b146:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b148:	4b0c      	ldr	r3, [pc, #48]	; (800b17c <vPortEnterCritical+0x58>)
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	2b01      	cmp	r3, #1
 800b14e:	d10f      	bne.n	800b170 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b150:	4b0b      	ldr	r3, [pc, #44]	; (800b180 <vPortEnterCritical+0x5c>)
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	b2db      	uxtb	r3, r3
 800b156:	2b00      	cmp	r3, #0
 800b158:	d00a      	beq.n	800b170 <vPortEnterCritical+0x4c>
	__asm volatile
 800b15a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b15e:	f383 8811 	msr	BASEPRI, r3
 800b162:	f3bf 8f6f 	isb	sy
 800b166:	f3bf 8f4f 	dsb	sy
 800b16a:	603b      	str	r3, [r7, #0]
}
 800b16c:	bf00      	nop
 800b16e:	e7fe      	b.n	800b16e <vPortEnterCritical+0x4a>
	}
}
 800b170:	bf00      	nop
 800b172:	370c      	adds	r7, #12
 800b174:	46bd      	mov	sp, r7
 800b176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17a:	4770      	bx	lr
 800b17c:	20000078 	.word	0x20000078
 800b180:	e000ed04 	.word	0xe000ed04

0800b184 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b184:	b480      	push	{r7}
 800b186:	b083      	sub	sp, #12
 800b188:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b18a:	4b12      	ldr	r3, [pc, #72]	; (800b1d4 <vPortExitCritical+0x50>)
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d10a      	bne.n	800b1a8 <vPortExitCritical+0x24>
	__asm volatile
 800b192:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b196:	f383 8811 	msr	BASEPRI, r3
 800b19a:	f3bf 8f6f 	isb	sy
 800b19e:	f3bf 8f4f 	dsb	sy
 800b1a2:	607b      	str	r3, [r7, #4]
}
 800b1a4:	bf00      	nop
 800b1a6:	e7fe      	b.n	800b1a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b1a8:	4b0a      	ldr	r3, [pc, #40]	; (800b1d4 <vPortExitCritical+0x50>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	3b01      	subs	r3, #1
 800b1ae:	4a09      	ldr	r2, [pc, #36]	; (800b1d4 <vPortExitCritical+0x50>)
 800b1b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b1b2:	4b08      	ldr	r3, [pc, #32]	; (800b1d4 <vPortExitCritical+0x50>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d105      	bne.n	800b1c6 <vPortExitCritical+0x42>
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	f383 8811 	msr	BASEPRI, r3
}
 800b1c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b1c6:	bf00      	nop
 800b1c8:	370c      	adds	r7, #12
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d0:	4770      	bx	lr
 800b1d2:	bf00      	nop
 800b1d4:	20000078 	.word	0x20000078
	...

0800b1e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b1e0:	f3ef 8009 	mrs	r0, PSP
 800b1e4:	f3bf 8f6f 	isb	sy
 800b1e8:	4b15      	ldr	r3, [pc, #84]	; (800b240 <pxCurrentTCBConst>)
 800b1ea:	681a      	ldr	r2, [r3, #0]
 800b1ec:	f01e 0f10 	tst.w	lr, #16
 800b1f0:	bf08      	it	eq
 800b1f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b1f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1fa:	6010      	str	r0, [r2, #0]
 800b1fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b200:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b204:	f380 8811 	msr	BASEPRI, r0
 800b208:	f3bf 8f4f 	dsb	sy
 800b20c:	f3bf 8f6f 	isb	sy
 800b210:	f7ff fa08 	bl	800a624 <vTaskSwitchContext>
 800b214:	f04f 0000 	mov.w	r0, #0
 800b218:	f380 8811 	msr	BASEPRI, r0
 800b21c:	bc09      	pop	{r0, r3}
 800b21e:	6819      	ldr	r1, [r3, #0]
 800b220:	6808      	ldr	r0, [r1, #0]
 800b222:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b226:	f01e 0f10 	tst.w	lr, #16
 800b22a:	bf08      	it	eq
 800b22c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b230:	f380 8809 	msr	PSP, r0
 800b234:	f3bf 8f6f 	isb	sy
 800b238:	4770      	bx	lr
 800b23a:	bf00      	nop
 800b23c:	f3af 8000 	nop.w

0800b240 <pxCurrentTCBConst>:
 800b240:	20007160 	.word	0x20007160
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b244:	bf00      	nop
 800b246:	bf00      	nop

0800b248 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b082      	sub	sp, #8
 800b24c:	af00      	add	r7, sp, #0
	__asm volatile
 800b24e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b252:	f383 8811 	msr	BASEPRI, r3
 800b256:	f3bf 8f6f 	isb	sy
 800b25a:	f3bf 8f4f 	dsb	sy
 800b25e:	607b      	str	r3, [r7, #4]
}
 800b260:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b262:	f7ff f927 	bl	800a4b4 <xTaskIncrementTick>
 800b266:	4603      	mov	r3, r0
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d003      	beq.n	800b274 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b26c:	4b06      	ldr	r3, [pc, #24]	; (800b288 <SysTick_Handler+0x40>)
 800b26e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b272:	601a      	str	r2, [r3, #0]
 800b274:	2300      	movs	r3, #0
 800b276:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	f383 8811 	msr	BASEPRI, r3
}
 800b27e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b280:	bf00      	nop
 800b282:	3708      	adds	r7, #8
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}
 800b288:	e000ed04 	.word	0xe000ed04

0800b28c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b28c:	b480      	push	{r7}
 800b28e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b290:	4b0b      	ldr	r3, [pc, #44]	; (800b2c0 <vPortSetupTimerInterrupt+0x34>)
 800b292:	2200      	movs	r2, #0
 800b294:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b296:	4b0b      	ldr	r3, [pc, #44]	; (800b2c4 <vPortSetupTimerInterrupt+0x38>)
 800b298:	2200      	movs	r2, #0
 800b29a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b29c:	4b0a      	ldr	r3, [pc, #40]	; (800b2c8 <vPortSetupTimerInterrupt+0x3c>)
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	4a0a      	ldr	r2, [pc, #40]	; (800b2cc <vPortSetupTimerInterrupt+0x40>)
 800b2a2:	fba2 2303 	umull	r2, r3, r2, r3
 800b2a6:	099b      	lsrs	r3, r3, #6
 800b2a8:	4a09      	ldr	r2, [pc, #36]	; (800b2d0 <vPortSetupTimerInterrupt+0x44>)
 800b2aa:	3b01      	subs	r3, #1
 800b2ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b2ae:	4b04      	ldr	r3, [pc, #16]	; (800b2c0 <vPortSetupTimerInterrupt+0x34>)
 800b2b0:	2207      	movs	r2, #7
 800b2b2:	601a      	str	r2, [r3, #0]
}
 800b2b4:	bf00      	nop
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2bc:	4770      	bx	lr
 800b2be:	bf00      	nop
 800b2c0:	e000e010 	.word	0xe000e010
 800b2c4:	e000e018 	.word	0xe000e018
 800b2c8:	2000006c 	.word	0x2000006c
 800b2cc:	10624dd3 	.word	0x10624dd3
 800b2d0:	e000e014 	.word	0xe000e014

0800b2d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b2d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b2e4 <vPortEnableVFP+0x10>
 800b2d8:	6801      	ldr	r1, [r0, #0]
 800b2da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b2de:	6001      	str	r1, [r0, #0]
 800b2e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b2e2:	bf00      	nop
 800b2e4:	e000ed88 	.word	0xe000ed88

0800b2e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b2e8:	b480      	push	{r7}
 800b2ea:	b085      	sub	sp, #20
 800b2ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b2ee:	f3ef 8305 	mrs	r3, IPSR
 800b2f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	2b0f      	cmp	r3, #15
 800b2f8:	d914      	bls.n	800b324 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b2fa:	4a17      	ldr	r2, [pc, #92]	; (800b358 <vPortValidateInterruptPriority+0x70>)
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	4413      	add	r3, r2
 800b300:	781b      	ldrb	r3, [r3, #0]
 800b302:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b304:	4b15      	ldr	r3, [pc, #84]	; (800b35c <vPortValidateInterruptPriority+0x74>)
 800b306:	781b      	ldrb	r3, [r3, #0]
 800b308:	7afa      	ldrb	r2, [r7, #11]
 800b30a:	429a      	cmp	r2, r3
 800b30c:	d20a      	bcs.n	800b324 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b30e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b312:	f383 8811 	msr	BASEPRI, r3
 800b316:	f3bf 8f6f 	isb	sy
 800b31a:	f3bf 8f4f 	dsb	sy
 800b31e:	607b      	str	r3, [r7, #4]
}
 800b320:	bf00      	nop
 800b322:	e7fe      	b.n	800b322 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b324:	4b0e      	ldr	r3, [pc, #56]	; (800b360 <vPortValidateInterruptPriority+0x78>)
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b32c:	4b0d      	ldr	r3, [pc, #52]	; (800b364 <vPortValidateInterruptPriority+0x7c>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	429a      	cmp	r2, r3
 800b332:	d90a      	bls.n	800b34a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b334:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b338:	f383 8811 	msr	BASEPRI, r3
 800b33c:	f3bf 8f6f 	isb	sy
 800b340:	f3bf 8f4f 	dsb	sy
 800b344:	603b      	str	r3, [r7, #0]
}
 800b346:	bf00      	nop
 800b348:	e7fe      	b.n	800b348 <vPortValidateInterruptPriority+0x60>
	}
 800b34a:	bf00      	nop
 800b34c:	3714      	adds	r7, #20
 800b34e:	46bd      	mov	sp, r7
 800b350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b354:	4770      	bx	lr
 800b356:	bf00      	nop
 800b358:	e000e3f0 	.word	0xe000e3f0
 800b35c:	20007294 	.word	0x20007294
 800b360:	e000ed0c 	.word	0xe000ed0c
 800b364:	20007298 	.word	0x20007298

0800b368 <__libc_init_array>:
 800b368:	b570      	push	{r4, r5, r6, lr}
 800b36a:	4d0d      	ldr	r5, [pc, #52]	; (800b3a0 <__libc_init_array+0x38>)
 800b36c:	4c0d      	ldr	r4, [pc, #52]	; (800b3a4 <__libc_init_array+0x3c>)
 800b36e:	1b64      	subs	r4, r4, r5
 800b370:	10a4      	asrs	r4, r4, #2
 800b372:	2600      	movs	r6, #0
 800b374:	42a6      	cmp	r6, r4
 800b376:	d109      	bne.n	800b38c <__libc_init_array+0x24>
 800b378:	4d0b      	ldr	r5, [pc, #44]	; (800b3a8 <__libc_init_array+0x40>)
 800b37a:	4c0c      	ldr	r4, [pc, #48]	; (800b3ac <__libc_init_array+0x44>)
 800b37c:	f000 f82e 	bl	800b3dc <_init>
 800b380:	1b64      	subs	r4, r4, r5
 800b382:	10a4      	asrs	r4, r4, #2
 800b384:	2600      	movs	r6, #0
 800b386:	42a6      	cmp	r6, r4
 800b388:	d105      	bne.n	800b396 <__libc_init_array+0x2e>
 800b38a:	bd70      	pop	{r4, r5, r6, pc}
 800b38c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b390:	4798      	blx	r3
 800b392:	3601      	adds	r6, #1
 800b394:	e7ee      	b.n	800b374 <__libc_init_array+0xc>
 800b396:	f855 3b04 	ldr.w	r3, [r5], #4
 800b39a:	4798      	blx	r3
 800b39c:	3601      	adds	r6, #1
 800b39e:	e7f2      	b.n	800b386 <__libc_init_array+0x1e>
 800b3a0:	0800b478 	.word	0x0800b478
 800b3a4:	0800b478 	.word	0x0800b478
 800b3a8:	0800b478 	.word	0x0800b478
 800b3ac:	0800b47c 	.word	0x0800b47c

0800b3b0 <memcpy>:
 800b3b0:	440a      	add	r2, r1
 800b3b2:	4291      	cmp	r1, r2
 800b3b4:	f100 33ff 	add.w	r3, r0, #4294967295
 800b3b8:	d100      	bne.n	800b3bc <memcpy+0xc>
 800b3ba:	4770      	bx	lr
 800b3bc:	b510      	push	{r4, lr}
 800b3be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b3c6:	4291      	cmp	r1, r2
 800b3c8:	d1f9      	bne.n	800b3be <memcpy+0xe>
 800b3ca:	bd10      	pop	{r4, pc}

0800b3cc <memset>:
 800b3cc:	4402      	add	r2, r0
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	4293      	cmp	r3, r2
 800b3d2:	d100      	bne.n	800b3d6 <memset+0xa>
 800b3d4:	4770      	bx	lr
 800b3d6:	f803 1b01 	strb.w	r1, [r3], #1
 800b3da:	e7f9      	b.n	800b3d0 <memset+0x4>

0800b3dc <_init>:
 800b3dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3de:	bf00      	nop
 800b3e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3e2:	bc08      	pop	{r3}
 800b3e4:	469e      	mov	lr, r3
 800b3e6:	4770      	bx	lr

0800b3e8 <_fini>:
 800b3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3ea:	bf00      	nop
 800b3ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3ee:	bc08      	pop	{r3}
 800b3f0:	469e      	mov	lr, r3
 800b3f2:	4770      	bx	lr
