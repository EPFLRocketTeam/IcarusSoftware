
icarus_software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b6a4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000027c  0800b874  0800b874  0001b874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800baf0  0800baf0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800baf0  0800baf0  0001baf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800baf8  0800baf8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800baf8  0800baf8  0001baf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bafc  0800bafc  0001bafc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800bb00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009ebc  20000070  0800bb70  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20009f2c  0800bb70  00029f2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028178  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005d42  00000000  00000000  00048218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bb0  00000000  00000000  0004df60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001918  00000000  00000000  0004fb10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002798e  00000000  00000000  00051428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020708  00000000  00000000  00078db6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df3e5  00000000  00000000  000994be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001788a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007098  00000000  00000000  001788f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b85c 	.word	0x0800b85c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	0800b85c 	.word	0x0800b85c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96e 	b.w	8000504 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468c      	mov	ip, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	f040 8083 	bne.w	8000356 <__udivmoddi4+0x116>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d947      	bls.n	80002e6 <__udivmoddi4+0xa6>
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	b142      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025c:	f1c2 0020 	rsb	r0, r2, #32
 8000260:	fa24 f000 	lsr.w	r0, r4, r0
 8000264:	4091      	lsls	r1, r2
 8000266:	4097      	lsls	r7, r2
 8000268:	ea40 0c01 	orr.w	ip, r0, r1
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbbc f6f8 	udiv	r6, ip, r8
 8000278:	fa1f fe87 	uxth.w	lr, r7
 800027c:	fb08 c116 	mls	r1, r8, r6, ip
 8000280:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000284:	fb06 f10e 	mul.w	r1, r6, lr
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000292:	f080 8119 	bcs.w	80004c8 <__udivmoddi4+0x288>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8116 	bls.w	80004c8 <__udivmoddi4+0x288>
 800029c:	3e02      	subs	r6, #2
 800029e:	443b      	add	r3, r7
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b4:	45a6      	cmp	lr, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8105 	bcs.w	80004cc <__udivmoddi4+0x28c>
 80002c2:	45a6      	cmp	lr, r4
 80002c4:	f240 8102 	bls.w	80004cc <__udivmoddi4+0x28c>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	2600      	movs	r6, #0
 80002d6:	b11d      	cbz	r5, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c5 4300 	strd	r4, r3, [r5]
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xaa>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	d150      	bne.n	8000394 <__udivmoddi4+0x154>
 80002f2:	1bcb      	subs	r3, r1, r7
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	fa1f f887 	uxth.w	r8, r7
 80002fc:	2601      	movs	r6, #1
 80002fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000302:	0c21      	lsrs	r1, r4, #16
 8000304:	fb0e 331c 	mls	r3, lr, ip, r3
 8000308:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800030c:	fb08 f30c 	mul.w	r3, r8, ip
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000314:	1879      	adds	r1, r7, r1
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0xe2>
 800031c:	428b      	cmp	r3, r1
 800031e:	f200 80e9 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 8000322:	4684      	mov	ip, r0
 8000324:	1ac9      	subs	r1, r1, r3
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000330:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x10c>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x10a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80d9 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e7bf      	b.n	80002d6 <__udivmoddi4+0x96>
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x12e>
 800035a:	2d00      	cmp	r5, #0
 800035c:	f000 80b1 	beq.w	80004c2 <__udivmoddi4+0x282>
 8000360:	2600      	movs	r6, #0
 8000362:	e9c5 0100 	strd	r0, r1, [r5]
 8000366:	4630      	mov	r0, r6
 8000368:	4631      	mov	r1, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f683 	clz	r6, r3
 8000372:	2e00      	cmp	r6, #0
 8000374:	d14a      	bne.n	800040c <__udivmoddi4+0x1cc>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0x140>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80b8 	bhi.w	80004f0 <__udivmoddi4+0x2b0>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0103 	sbc.w	r1, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	468c      	mov	ip, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0a8      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800038e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000394:	f1c2 0320 	rsb	r3, r2, #32
 8000398:	fa20 f603 	lsr.w	r6, r0, r3
 800039c:	4097      	lsls	r7, r2
 800039e:	fa01 f002 	lsl.w	r0, r1, r2
 80003a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a6:	40d9      	lsrs	r1, r3
 80003a8:	4330      	orrs	r0, r6
 80003aa:	0c03      	lsrs	r3, r0, #16
 80003ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b0:	fa1f f887 	uxth.w	r8, r7
 80003b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb06 f108 	mul.w	r1, r6, r8
 80003c0:	4299      	cmp	r1, r3
 80003c2:	fa04 f402 	lsl.w	r4, r4, r2
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x19c>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ce:	f080 808d 	bcs.w	80004ec <__udivmoddi4+0x2ac>
 80003d2:	4299      	cmp	r1, r3
 80003d4:	f240 808a 	bls.w	80004ec <__udivmoddi4+0x2ac>
 80003d8:	3e02      	subs	r6, #2
 80003da:	443b      	add	r3, r7
 80003dc:	1a5b      	subs	r3, r3, r1
 80003de:	b281      	uxth	r1, r0
 80003e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb00 f308 	mul.w	r3, r0, r8
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x1c4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003fa:	d273      	bcs.n	80004e4 <__udivmoddi4+0x2a4>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d971      	bls.n	80004e4 <__udivmoddi4+0x2a4>
 8000400:	3802      	subs	r0, #2
 8000402:	4439      	add	r1, r7
 8000404:	1acb      	subs	r3, r1, r3
 8000406:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040a:	e778      	b.n	80002fe <__udivmoddi4+0xbe>
 800040c:	f1c6 0c20 	rsb	ip, r6, #32
 8000410:	fa03 f406 	lsl.w	r4, r3, r6
 8000414:	fa22 f30c 	lsr.w	r3, r2, ip
 8000418:	431c      	orrs	r4, r3
 800041a:	fa20 f70c 	lsr.w	r7, r0, ip
 800041e:	fa01 f306 	lsl.w	r3, r1, r6
 8000422:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000426:	fa21 f10c 	lsr.w	r1, r1, ip
 800042a:	431f      	orrs	r7, r3
 800042c:	0c3b      	lsrs	r3, r7, #16
 800042e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000432:	fa1f f884 	uxth.w	r8, r4
 8000436:	fb0e 1119 	mls	r1, lr, r9, r1
 800043a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043e:	fb09 fa08 	mul.w	sl, r9, r8
 8000442:	458a      	cmp	sl, r1
 8000444:	fa02 f206 	lsl.w	r2, r2, r6
 8000448:	fa00 f306 	lsl.w	r3, r0, r6
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x220>
 800044e:	1861      	adds	r1, r4, r1
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295
 8000454:	d248      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 8000456:	458a      	cmp	sl, r1
 8000458:	d946      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4421      	add	r1, r4
 8000460:	eba1 010a 	sub.w	r1, r1, sl
 8000464:	b2bf      	uxth	r7, r7
 8000466:	fbb1 f0fe 	udiv	r0, r1, lr
 800046a:	fb0e 1110 	mls	r1, lr, r0, r1
 800046e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45b8      	cmp	r8, r7
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x24a>
 800047a:	19e7      	adds	r7, r4, r7
 800047c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000480:	d22e      	bcs.n	80004e0 <__udivmoddi4+0x2a0>
 8000482:	45b8      	cmp	r8, r7
 8000484:	d92c      	bls.n	80004e0 <__udivmoddi4+0x2a0>
 8000486:	3802      	subs	r0, #2
 8000488:	4427      	add	r7, r4
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba7 0708 	sub.w	r7, r7, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454f      	cmp	r7, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	4649      	mov	r1, r9
 800049c:	d31a      	bcc.n	80004d4 <__udivmoddi4+0x294>
 800049e:	d017      	beq.n	80004d0 <__udivmoddi4+0x290>
 80004a0:	b15d      	cbz	r5, 80004ba <__udivmoddi4+0x27a>
 80004a2:	ebb3 020e 	subs.w	r2, r3, lr
 80004a6:	eb67 0701 	sbc.w	r7, r7, r1
 80004aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ae:	40f2      	lsrs	r2, r6
 80004b0:	ea4c 0202 	orr.w	r2, ip, r2
 80004b4:	40f7      	lsrs	r7, r6
 80004b6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ba:	2600      	movs	r6, #0
 80004bc:	4631      	mov	r1, r6
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e70b      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fd      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d0:	4543      	cmp	r3, r8
 80004d2:	d2e5      	bcs.n	80004a0 <__udivmoddi4+0x260>
 80004d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d8:	eb69 0104 	sbc.w	r1, r9, r4
 80004dc:	3801      	subs	r0, #1
 80004de:	e7df      	b.n	80004a0 <__udivmoddi4+0x260>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e7d2      	b.n	800048a <__udivmoddi4+0x24a>
 80004e4:	4660      	mov	r0, ip
 80004e6:	e78d      	b.n	8000404 <__udivmoddi4+0x1c4>
 80004e8:	4681      	mov	r9, r0
 80004ea:	e7b9      	b.n	8000460 <__udivmoddi4+0x220>
 80004ec:	4666      	mov	r6, ip
 80004ee:	e775      	b.n	80003dc <__udivmoddi4+0x19c>
 80004f0:	4630      	mov	r0, r6
 80004f2:	e74a      	b.n	800038a <__udivmoddi4+0x14a>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	4439      	add	r1, r7
 80004fa:	e713      	b.n	8000324 <__udivmoddi4+0xe4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	443c      	add	r4, r7
 8000500:	e724      	b.n	800034c <__udivmoddi4+0x10c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <pointer_inc>:
volatile int32_t can_buffer_pointer_rx = 0;
volatile int32_t can_buffer_pointer_tx = 0;

uint32_t can_readFrame(void);

uint32_t pointer_inc(uint32_t val, uint32_t size) {
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	6039      	str	r1, [r7, #0]
	return (val + 1) % size;
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	3301      	adds	r3, #1
 8000516:	683a      	ldr	r2, [r7, #0]
 8000518:	fbb3 f2f2 	udiv	r2, r3, r2
 800051c:	6839      	ldr	r1, [r7, #0]
 800051e:	fb01 f202 	mul.w	r2, r1, r2
 8000522:	1a9b      	subs	r3, r3, r2
}
 8000524:	4618      	mov	r0, r3
 8000526:	370c      	adds	r7, #12
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr

08000530 <can_addMsg>:

void can_addMsg(CAN_msg msg) {
 8000530:	b590      	push	{r4, r7, lr}
 8000532:	b085      	sub	sp, #20
 8000534:	af00      	add	r7, sp, #0
 8000536:	463c      	mov	r4, r7
 8000538:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	can_buffer[can_buffer_pointer_tx] = msg;
 800053c:	4b13      	ldr	r3, [pc, #76]	; (800058c <can_addMsg+0x5c>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a13      	ldr	r2, [pc, #76]	; (8000590 <can_addMsg+0x60>)
 8000542:	011b      	lsls	r3, r3, #4
 8000544:	4413      	add	r3, r2
 8000546:	461c      	mov	r4, r3
 8000548:	463b      	mov	r3, r7
 800054a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800054c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	can_buffer_pointer_tx = pointer_inc(can_buffer_pointer_tx, CAN_BUFFER_DEPTH);
 8000550:	4b0e      	ldr	r3, [pc, #56]	; (800058c <can_addMsg+0x5c>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2140      	movs	r1, #64	; 0x40
 8000556:	4618      	mov	r0, r3
 8000558:	f7ff ffd6 	bl	8000508 <pointer_inc>
 800055c:	4603      	mov	r3, r0
 800055e:	461a      	mov	r2, r3
 8000560:	4b0a      	ldr	r3, [pc, #40]	; (800058c <can_addMsg+0x5c>)
 8000562:	601a      	str	r2, [r3, #0]

	if (can_buffer_pointer_tx == can_buffer_pointer_rx) { // indicates overflow
 8000564:	4b09      	ldr	r3, [pc, #36]	; (800058c <can_addMsg+0x5c>)
 8000566:	681a      	ldr	r2, [r3, #0]
 8000568:	4b0a      	ldr	r3, [pc, #40]	; (8000594 <can_addMsg+0x64>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	429a      	cmp	r2, r3
 800056e:	d109      	bne.n	8000584 <can_addMsg+0x54>
		can_buffer_pointer_rx = pointer_inc(can_buffer_pointer_rx, CAN_BUFFER_DEPTH); // skip one msg in the rx buffer
 8000570:	4b08      	ldr	r3, [pc, #32]	; (8000594 <can_addMsg+0x64>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	2140      	movs	r1, #64	; 0x40
 8000576:	4618      	mov	r0, r3
 8000578:	f7ff ffc6 	bl	8000508 <pointer_inc>
 800057c:	4603      	mov	r3, r0
 800057e:	461a      	mov	r2, r3
 8000580:	4b04      	ldr	r3, [pc, #16]	; (8000594 <can_addMsg+0x64>)
 8000582:	601a      	str	r2, [r3, #0]
	}
}
 8000584:	bf00      	nop
 8000586:	3714      	adds	r7, #20
 8000588:	46bd      	mov	sp, r7
 800058a:	bd90      	pop	{r4, r7, pc}
 800058c:	20000090 	.word	0x20000090
 8000590:	2000945c 	.word	0x2000945c
 8000594:	2000008c 	.word	0x2000008c

08000598 <CAN_Config>:

/*
 * Configures CAN protocol for 250kbit/s without interrupt for reading (only polling).
 */
void CAN_Config(uint32_t id)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b08c      	sub	sp, #48	; 0x30
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]

    /*##-1- Configure the CAN peripheral #######################################*/
    // Done in MX_CAN1_Init()

    /*##-2- Configure the CAN Filter ###########################################*/
    sFilterConfig.FilterBank = 0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	61fb      	str	r3, [r7, #28]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80005a4:	2300      	movs	r3, #0
 80005a6:	623b      	str	r3, [r7, #32]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80005a8:	2301      	movs	r3, #1
 80005aa:	627b      	str	r3, [r7, #36]	; 0x24
    sFilterConfig.FilterIdHigh = 0x0000;
 80005ac:	2300      	movs	r3, #0
 80005ae:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterIdLow = 0x0000;
 80005b0:	2300      	movs	r3, #0
 80005b2:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterMaskIdHigh = 0x0000;
 80005b4:	2300      	movs	r3, #0
 80005b6:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterMaskIdLow = 0x0000;
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80005bc:	2300      	movs	r3, #0
 80005be:	61bb      	str	r3, [r7, #24]
    sFilterConfig.FilterActivation = ENABLE;
 80005c0:	2301      	movs	r3, #1
 80005c2:	62bb      	str	r3, [r7, #40]	; 0x28
    sFilterConfig.SlaveStartFilterBank = 14;
 80005c4:	230e      	movs	r3, #14
 80005c6:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 80005c8:	f107 0308 	add.w	r3, r7, #8
 80005cc:	4619      	mov	r1, r3
 80005ce:	4810      	ldr	r0, [pc, #64]	; (8000610 <CAN_Config+0x78>)
 80005d0:	f003 ff2a 	bl	8004428 <HAL_CAN_ConfigFilter>
        /* Filter configuration Error */
        //      _Error_Handler(__FILE__, __LINE__);
    }

    /*##-3- Start the CAN peripheral ###########################################*/
    if (HAL_CAN_Start(&hcan1) != HAL_OK)
 80005d4:	480e      	ldr	r0, [pc, #56]	; (8000610 <CAN_Config+0x78>)
 80005d6:	f004 f807 	bl	80045e8 <HAL_CAN_Start>
        /* Start Error */
        //      _Error_Handler(__FILE__, __LINE__);
    }

    /*##-4- Activate CAN RX notification #######################################*/
    if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80005da:	2102      	movs	r1, #2
 80005dc:	480c      	ldr	r0, [pc, #48]	; (8000610 <CAN_Config+0x78>)
 80005de:	f004 f981 	bl	80048e4 <HAL_CAN_ActivateNotification>
        /* Notification Error */
    	//_Error_Handler(__FILE__, __LINE__);
    }

    /*##-5- Configure Transmission process #####################################*/
    TxHeader.StdId = id;
 80005e2:	4a0c      	ldr	r2, [pc, #48]	; (8000614 <CAN_Config+0x7c>)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	6013      	str	r3, [r2, #0]
    TxHeader.ExtId = id; // not needed
 80005e8:	4a0a      	ldr	r2, [pc, #40]	; (8000614 <CAN_Config+0x7c>)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	6053      	str	r3, [r2, #4]
    TxHeader.RTR = CAN_RTR_DATA;
 80005ee:	4b09      	ldr	r3, [pc, #36]	; (8000614 <CAN_Config+0x7c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	60da      	str	r2, [r3, #12]
    TxHeader.IDE = CAN_ID_STD;
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <CAN_Config+0x7c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	609a      	str	r2, [r3, #8]
    TxHeader.DLC = 8;
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <CAN_Config+0x7c>)
 80005fc:	2208      	movs	r2, #8
 80005fe:	611a      	str	r2, [r3, #16]
    TxHeader.TransmitGlobalTime = DISABLE;
 8000600:	4b04      	ldr	r3, [pc, #16]	; (8000614 <CAN_Config+0x7c>)
 8000602:	2200      	movs	r2, #0
 8000604:	751a      	strb	r2, [r3, #20]
}
 8000606:	bf00      	nop
 8000608:	3730      	adds	r7, #48	; 0x30
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	2000985c 	.word	0x2000985c
 8000614:	20009428 	.word	0x20009428

08000618 <HAL_CAN_RxFifo0MsgPendingCallback>:
    } else { // something bad happen
    	// not sure what to do
    }
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	can_readFrame();
 8000620:	f000 f858 	bl	80006d4 <can_readFrame>
	can_addMsg(can_current_msg);
 8000624:	4b03      	ldr	r3, [pc, #12]	; (8000634 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 8000626:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000628:	f7ff ff82 	bl	8000530 <can_addMsg>
}
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	2000940c 	.word	0x2000940c

08000638 <can_msgPending>:

uint32_t can_msgPending() {
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
	int32_t diff = can_buffer_pointer_tx - can_buffer_pointer_rx;
 800063e:	4b09      	ldr	r3, [pc, #36]	; (8000664 <can_msgPending+0x2c>)
 8000640:	681a      	ldr	r2, [r3, #0]
 8000642:	4b09      	ldr	r3, [pc, #36]	; (8000668 <can_msgPending+0x30>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	1ad3      	subs	r3, r2, r3
 8000648:	607b      	str	r3, [r7, #4]
	if (diff < 0) {
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	2b00      	cmp	r3, #0
 800064e:	da02      	bge.n	8000656 <can_msgPending+0x1e>
		diff += CAN_BUFFER_DEPTH;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	3340      	adds	r3, #64	; 0x40
 8000654:	607b      	str	r3, [r7, #4]
	}

	return diff;
 8000656:	687b      	ldr	r3, [r7, #4]
}
 8000658:	4618      	mov	r0, r3
 800065a:	370c      	adds	r7, #12
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr
 8000664:	20000090 	.word	0x20000090
 8000668:	2000008c 	.word	0x2000008c

0800066c <can_readBuffer>:

CAN_msg can_readBuffer() {
 800066c:	b590      	push	{r4, r7, lr}
 800066e:	b087      	sub	sp, #28
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
	CAN_msg ret = {0};
 8000674:	f107 0308 	add.w	r3, r7, #8
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]

	if (can_msgPending() > 0) {
 8000682:	f7ff ffd9 	bl	8000638 <can_msgPending>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d013      	beq.n	80006b4 <can_readBuffer+0x48>
		ret = can_buffer[can_buffer_pointer_rx];
 800068c:	4b0f      	ldr	r3, [pc, #60]	; (80006cc <can_readBuffer+0x60>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a0f      	ldr	r2, [pc, #60]	; (80006d0 <can_readBuffer+0x64>)
 8000692:	011b      	lsls	r3, r3, #4
 8000694:	4413      	add	r3, r2
 8000696:	f107 0408 	add.w	r4, r7, #8
 800069a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800069c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		can_buffer_pointer_rx = pointer_inc(can_buffer_pointer_rx, CAN_BUFFER_DEPTH);
 80006a0:	4b0a      	ldr	r3, [pc, #40]	; (80006cc <can_readBuffer+0x60>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	2140      	movs	r1, #64	; 0x40
 80006a6:	4618      	mov	r0, r3
 80006a8:	f7ff ff2e 	bl	8000508 <pointer_inc>
 80006ac:	4603      	mov	r3, r0
 80006ae:	461a      	mov	r2, r3
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <can_readBuffer+0x60>)
 80006b2:	601a      	str	r2, [r3, #0]
	} else { // no message actually pending
		// do nothing, will return the {0} CAN_msg
	}


	return ret;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	461c      	mov	r4, r3
 80006b8:	f107 0308 	add.w	r3, r7, #8
 80006bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80006c2:	6878      	ldr	r0, [r7, #4]
 80006c4:	371c      	adds	r7, #28
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd90      	pop	{r4, r7, pc}
 80006ca:	bf00      	nop
 80006cc:	2000008c 	.word	0x2000008c
 80006d0:	2000945c 	.word	0x2000945c

080006d4 <can_readFrame>:
 *
 * byte 0..3 --> some uint32_t
 * byte 4    --> data_id, see CAN_communication.h
 * byte 5..7 --> timestamp
 */
uint32_t can_readFrame(void) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
    uint32_t fill_level = HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0);
 80006da:	2100      	movs	r1, #0
 80006dc:	482a      	ldr	r0, [pc, #168]	; (8000788 <can_readFrame+0xb4>)
 80006de:	f004 f8d9 	bl	8004894 <HAL_CAN_GetRxFifoFillLevel>
 80006e2:	6078      	str	r0, [r7, #4]
    if (fill_level > 0) {
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d049      	beq.n	800077e <can_readFrame+0xaa>
        HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData);
 80006ea:	4b28      	ldr	r3, [pc, #160]	; (800078c <can_readFrame+0xb8>)
 80006ec:	4a28      	ldr	r2, [pc, #160]	; (8000790 <can_readFrame+0xbc>)
 80006ee:	2100      	movs	r1, #0
 80006f0:	4825      	ldr	r0, [pc, #148]	; (8000788 <can_readFrame+0xb4>)
 80006f2:	f003 ffbd 	bl	8004670 <HAL_CAN_GetRxMessage>

        can_current_msg.data = 0;
 80006f6:	4b27      	ldr	r3, [pc, #156]	; (8000794 <can_readFrame+0xc0>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
        can_current_msg.data += (uint32_t) RxData[0] << 24;
 80006fc:	4b25      	ldr	r3, [pc, #148]	; (8000794 <can_readFrame+0xc0>)
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	4b22      	ldr	r3, [pc, #136]	; (800078c <can_readFrame+0xb8>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	061b      	lsls	r3, r3, #24
 8000706:	4413      	add	r3, r2
 8000708:	4a22      	ldr	r2, [pc, #136]	; (8000794 <can_readFrame+0xc0>)
 800070a:	6013      	str	r3, [r2, #0]
        can_current_msg.data += (uint32_t) RxData[1] << 16;
 800070c:	4b21      	ldr	r3, [pc, #132]	; (8000794 <can_readFrame+0xc0>)
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	4b1e      	ldr	r3, [pc, #120]	; (800078c <can_readFrame+0xb8>)
 8000712:	785b      	ldrb	r3, [r3, #1]
 8000714:	041b      	lsls	r3, r3, #16
 8000716:	4413      	add	r3, r2
 8000718:	4a1e      	ldr	r2, [pc, #120]	; (8000794 <can_readFrame+0xc0>)
 800071a:	6013      	str	r3, [r2, #0]
        can_current_msg.data += (uint32_t) RxData[2] << 8;
 800071c:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <can_readFrame+0xc0>)
 800071e:	681a      	ldr	r2, [r3, #0]
 8000720:	4b1a      	ldr	r3, [pc, #104]	; (800078c <can_readFrame+0xb8>)
 8000722:	789b      	ldrb	r3, [r3, #2]
 8000724:	021b      	lsls	r3, r3, #8
 8000726:	4413      	add	r3, r2
 8000728:	4a1a      	ldr	r2, [pc, #104]	; (8000794 <can_readFrame+0xc0>)
 800072a:	6013      	str	r3, [r2, #0]
		can_current_msg.data += (uint32_t) RxData[3] << 0;
 800072c:	4b19      	ldr	r3, [pc, #100]	; (8000794 <can_readFrame+0xc0>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a16      	ldr	r2, [pc, #88]	; (800078c <can_readFrame+0xb8>)
 8000732:	78d2      	ldrb	r2, [r2, #3]
 8000734:	4413      	add	r3, r2
 8000736:	4a17      	ldr	r2, [pc, #92]	; (8000794 <can_readFrame+0xc0>)
 8000738:	6013      	str	r3, [r2, #0]

        can_current_msg.id = RxData[4];
 800073a:	4b14      	ldr	r3, [pc, #80]	; (800078c <can_readFrame+0xb8>)
 800073c:	791a      	ldrb	r2, [r3, #4]
 800073e:	4b15      	ldr	r3, [pc, #84]	; (8000794 <can_readFrame+0xc0>)
 8000740:	711a      	strb	r2, [r3, #4]

        can_current_msg.timestamp = 0;
 8000742:	4b14      	ldr	r3, [pc, #80]	; (8000794 <can_readFrame+0xc0>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
        can_current_msg.timestamp += (uint32_t) RxData[5] << 16;
 8000748:	4b12      	ldr	r3, [pc, #72]	; (8000794 <can_readFrame+0xc0>)
 800074a:	689a      	ldr	r2, [r3, #8]
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <can_readFrame+0xb8>)
 800074e:	795b      	ldrb	r3, [r3, #5]
 8000750:	041b      	lsls	r3, r3, #16
 8000752:	4413      	add	r3, r2
 8000754:	4a0f      	ldr	r2, [pc, #60]	; (8000794 <can_readFrame+0xc0>)
 8000756:	6093      	str	r3, [r2, #8]
        can_current_msg.timestamp += (uint32_t) RxData[6] << 8;
 8000758:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <can_readFrame+0xc0>)
 800075a:	689a      	ldr	r2, [r3, #8]
 800075c:	4b0b      	ldr	r3, [pc, #44]	; (800078c <can_readFrame+0xb8>)
 800075e:	799b      	ldrb	r3, [r3, #6]
 8000760:	021b      	lsls	r3, r3, #8
 8000762:	4413      	add	r3, r2
 8000764:	4a0b      	ldr	r2, [pc, #44]	; (8000794 <can_readFrame+0xc0>)
 8000766:	6093      	str	r3, [r2, #8]
		can_current_msg.timestamp += (uint32_t) RxData[7] << 0;
 8000768:	4b0a      	ldr	r3, [pc, #40]	; (8000794 <can_readFrame+0xc0>)
 800076a:	689b      	ldr	r3, [r3, #8]
 800076c:	4a07      	ldr	r2, [pc, #28]	; (800078c <can_readFrame+0xb8>)
 800076e:	79d2      	ldrb	r2, [r2, #7]
 8000770:	4413      	add	r3, r2
 8000772:	4a08      	ldr	r2, [pc, #32]	; (8000794 <can_readFrame+0xc0>)
 8000774:	6093      	str	r3, [r2, #8]

        can_current_msg.id_CAN = RxHeader.StdId;
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <can_readFrame+0xbc>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a06      	ldr	r2, [pc, #24]	; (8000794 <can_readFrame+0xc0>)
 800077c:	60d3      	str	r3, [r2, #12]
    }
    return fill_level;
 800077e:	687b      	ldr	r3, [r7, #4]
}
 8000780:	4618      	mov	r0, r3
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	2000985c 	.word	0x2000985c
 800078c:	20009420 	.word	0x20009420
 8000790:	20009440 	.word	0x20009440
 8000794:	2000940c 	.word	0x2000940c

08000798 <can_init>:


void can_init(void) {
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	CAN_Config(CAN_ID_PROPULSION_BOARD);
 800079c:	2005      	movs	r0, #5
 800079e:	f7ff fefb 	bl	8000598 <CAN_Config>
}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
	...

080007a8 <can_send_thread>:


void can_send_thread(void * arg) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
	static TickType_t last_wake_time;
	static const TickType_t period = pdMS_TO_TICKS(CAN_HEART_BEAT);

	last_wake_time = xTaskGetTickCount();
 80007b0:	f00a f8b2 	bl	800a918 <xTaskGetTickCount>
 80007b4:	4603      	mov	r3, r0
 80007b6:	4a04      	ldr	r2, [pc, #16]	; (80007c8 <can_send_thread+0x20>)
 80007b8:	6013      	str	r3, [r2, #0]

	for(;;) {

		//SEND DATA HERE

		vTaskDelayUntil( &last_wake_time, period );
 80007ba:	4b04      	ldr	r3, [pc, #16]	; (80007cc <can_send_thread+0x24>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4619      	mov	r1, r3
 80007c0:	4801      	ldr	r0, [pc, #4]	; (80007c8 <can_send_thread+0x20>)
 80007c2:	f009 feed 	bl	800a5a0 <vTaskDelayUntil>
 80007c6:	e7f8      	b.n	80007ba <can_send_thread+0x12>
 80007c8:	20000094 	.word	0x20000094
 80007cc:	0800bac8 	.word	0x0800bac8

080007d0 <util_encode_u32>:
	data[0] = value;
	data[1] = value>>8;
	data[2] = 0x00;
	data[3] = 0x00;
}
static inline void util_encode_u32(uint8_t * data, uint32_t value) {
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	6039      	str	r1, [r7, #0]
	data[0] = value;
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	b2da      	uxtb	r2, r3
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	701a      	strb	r2, [r3, #0]
	data[1] = value>>8;
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	0a1a      	lsrs	r2, r3, #8
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	3301      	adds	r3, #1
 80007ea:	b2d2      	uxtb	r2, r2
 80007ec:	701a      	strb	r2, [r3, #0]
	data[2] = value>>16;
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	0c1a      	lsrs	r2, r3, #16
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	3302      	adds	r3, #2
 80007f6:	b2d2      	uxtb	r2, r2
 80007f8:	701a      	strb	r2, [r3, #0]
	data[3] = value>>24;
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	0e1a      	lsrs	r2, r3, #24
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	3303      	adds	r3, #3
 8000802:	b2d2      	uxtb	r2, r2
 8000804:	701a      	strb	r2, [r3, #0]
}
 8000806:	bf00      	nop
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr

08000812 <util_encode_i32>:
	data[0] = value;
	data[1] = value>>8;
	data[2] = 0x00;
	data[3] = 0x00;
}
static inline void util_encode_i32(uint8_t * data, int32_t value) {
 8000812:	b480      	push	{r7}
 8000814:	b083      	sub	sp, #12
 8000816:	af00      	add	r7, sp, #0
 8000818:	6078      	str	r0, [r7, #4]
 800081a:	6039      	str	r1, [r7, #0]
	data[0] = value;
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	b2da      	uxtb	r2, r3
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	701a      	strb	r2, [r3, #0]
	data[1] = value>>8;
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	121a      	asrs	r2, r3, #8
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	3301      	adds	r3, #1
 800082c:	b2d2      	uxtb	r2, r2
 800082e:	701a      	strb	r2, [r3, #0]
	data[2] = value>>16;
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	141a      	asrs	r2, r3, #16
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	3302      	adds	r3, #2
 8000838:	b2d2      	uxtb	r2, r2
 800083a:	701a      	strb	r2, [r3, #0]
	data[3] = value>>24;
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	161a      	asrs	r2, r3, #24
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	3303      	adds	r3, #3
 8000844:	b2d2      	uxtb	r2, r2
 8000846:	701a      	strb	r2, [r3, #0]
}
 8000848:	bf00      	nop
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr

08000854 <util_decode_u32>:

static inline uint16_t util_decode_u16(uint8_t * data) {
	return (uint16_t) data[0] | data[1] << 8;
}

static inline uint32_t util_decode_u32(uint8_t * data) {
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	return (uint32_t) data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	461a      	mov	r2, r3
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	3301      	adds	r3, #1
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	021b      	lsls	r3, r3, #8
 800086a:	4313      	orrs	r3, r2
 800086c:	687a      	ldr	r2, [r7, #4]
 800086e:	3202      	adds	r2, #2
 8000870:	7812      	ldrb	r2, [r2, #0]
 8000872:	0412      	lsls	r2, r2, #16
 8000874:	4313      	orrs	r3, r2
 8000876:	687a      	ldr	r2, [r7, #4]
 8000878:	3203      	adds	r2, #3
 800087a:	7812      	ldrb	r2, [r2, #0]
 800087c:	0612      	lsls	r2, r2, #24
 800087e:	4313      	orrs	r3, r2
}
 8000880:	4618      	mov	r0, r3
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <util_decode_i32>:

static inline int16_t util_decode_i16(uint8_t * data) {
	return (int16_t) data[0] | data[1] << 8;
}

static inline int32_t util_decode_i32(uint8_t * data) {
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
	return (int32_t) data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	461a      	mov	r2, r3
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	3301      	adds	r3, #1
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	021b      	lsls	r3, r3, #8
 80008a2:	431a      	orrs	r2, r3
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	3302      	adds	r3, #2
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	041b      	lsls	r3, r3, #16
 80008ac:	431a      	orrs	r2, r3
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	3303      	adds	r3, #3
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	061b      	lsls	r3, r3, #24
 80008b6:	4313      	orrs	r3, r2
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <cm4_global_init>:

/**********************
 *	DECLARATIONS
 **********************/

void cm4_global_init(void) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
	cm4_busy_sem = xSemaphoreCreateMutexStatic(&cm4_busy_sem_buffer);
 80008c8:	4904      	ldr	r1, [pc, #16]	; (80008dc <cm4_global_init+0x18>)
 80008ca:	2001      	movs	r0, #1
 80008cc:	f009 f969 	bl	8009ba2 <xQueueCreateMutexStatic>
 80008d0:	4603      	mov	r3, r0
 80008d2:	4a03      	ldr	r2, [pc, #12]	; (80008e0 <cm4_global_init+0x1c>)
 80008d4:	6013      	str	r3, [r2, #0]
}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	2000009c 	.word	0x2000009c
 80008e0:	20000098 	.word	0x20000098

080008e4 <cm4_init>:

void cm4_init(CM4_INST_t * cm4) {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af02      	add	r7, sp, #8
 80008ea:	6078      	str	r0, [r7, #4]
	static uint32_t id_counter = 0;
	cm4->id = id_counter++;
 80008ec:	4b17      	ldr	r3, [pc, #92]	; (800094c <cm4_init+0x68>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	1c5a      	adds	r2, r3, #1
 80008f2:	4916      	ldr	r1, [pc, #88]	; (800094c <cm4_init+0x68>)
 80008f4:	600a      	str	r2, [r1, #0]
 80008f6:	687a      	ldr	r2, [r7, #4]
 80008f8:	6013      	str	r3, [r2, #0]
	cm4->garbage_counter = 0;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	f503 53a4 	add.w	r3, r3, #5248	; 0x1480
 8000900:	3304      	adds	r3, #4
 8000902:	2200      	movs	r2, #0
 8000904:	801a      	strh	r2, [r3, #0]
	cm4->rx_sem = xSemaphoreCreateBinaryStatic(&cm4->rx_sem_buffer);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 800090c:	331c      	adds	r3, #28
 800090e:	2203      	movs	r2, #3
 8000910:	9200      	str	r2, [sp, #0]
 8000912:	2200      	movs	r2, #0
 8000914:	2100      	movs	r1, #0
 8000916:	2001      	movs	r0, #1
 8000918:	f009 f896 	bl	8009a48 <xQueueGenericCreateStatic>
 800091c:	4602      	mov	r2, r0
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8000924:	3318      	adds	r3, #24
 8000926:	601a      	str	r2, [r3, #0]
	msv2_init(&cm4->msv2);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	3304      	adds	r3, #4
 800092c:	4618      	mov	r0, r3
 800092e:	f001 fa55 	bl	8001ddc <msv2_init>
	serial_init(&cm4->ser, &CM4_UART, cm4, cm4_decode_fcn);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	f503 5080 	add.w	r0, r3, #4096	; 0x1000
 8000938:	3018      	adds	r0, #24
 800093a:	4b05      	ldr	r3, [pc, #20]	; (8000950 <cm4_init+0x6c>)
 800093c:	687a      	ldr	r2, [r7, #4]
 800093e:	4905      	ldr	r1, [pc, #20]	; (8000954 <cm4_init+0x70>)
 8000940:	f001 fd20 	bl	8002384 <serial_init>


}
 8000944:	bf00      	nop
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	200000e4 	.word	0x200000e4
 8000950:	08000959 	.word	0x08000959
 8000954:	20009ee8 	.word	0x20009ee8

08000958 <cm4_decode_fcn>:


SERIAL_RET_t cm4_decode_fcn(void * inst, uint8_t data) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	460b      	mov	r3, r1
 8000962:	70fb      	strb	r3, [r7, #3]
	CM4_INST_t * cm4 = (CM4_INST_t *) inst;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	60fb      	str	r3, [r7, #12]
	MSV2_ERROR_t tmp = msv2_decode_fragment(&cm4->msv2, data);
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	3304      	adds	r3, #4
 800096c:	78fa      	ldrb	r2, [r7, #3]
 800096e:	4611      	mov	r1, r2
 8000970:	4618      	mov	r0, r3
 8000972:	f001 fb2d 	bl	8001fd0 <msv2_decode_fragment>
 8000976:	4603      	mov	r3, r0
 8000978:	72fb      	strb	r3, [r7, #11]
	if(tmp == MSV2_SUCCESS || tmp == MSV2_WRONG_CRC) {
 800097a:	7afb      	ldrb	r3, [r7, #11]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d002      	beq.n	8000986 <cm4_decode_fcn+0x2e>
 8000980:	7afb      	ldrb	r3, [r7, #11]
 8000982:	2b02      	cmp	r3, #2
 8000984:	d109      	bne.n	800099a <cm4_decode_fcn+0x42>
		xSemaphoreGive(cm4->rx_sem);
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 800098c:	3318      	adds	r3, #24
 800098e:	6818      	ldr	r0, [r3, #0]
 8000990:	2300      	movs	r3, #0
 8000992:	2200      	movs	r2, #0
 8000994:	2100      	movs	r1, #0
 8000996:	f009 f91f 	bl	8009bd8 <xQueueGenericSend>
	}
	return tmp;
 800099a:	7afb      	ldrb	r3, [r7, #11]
}
 800099c:	4618      	mov	r0, r3
 800099e:	3710      	adds	r7, #16
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <cm4_send>:



CM4_ERROR_t cm4_send(CM4_INST_t * cm4, uint8_t cmd, uint8_t * data, uint16_t length, uint8_t ** resp_data, uint16_t * resp_len) {
 80009a4:	b590      	push	{r4, r7, lr}
 80009a6:	b087      	sub	sp, #28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	60f8      	str	r0, [r7, #12]
 80009ac:	607a      	str	r2, [r7, #4]
 80009ae:	461a      	mov	r2, r3
 80009b0:	460b      	mov	r3, r1
 80009b2:	72fb      	strb	r3, [r7, #11]
 80009b4:	4613      	mov	r3, r2
 80009b6:	813b      	strh	r3, [r7, #8]
	uint16_t frame_length = msv2_create_frame(&cm4->msv2, cmd, length/2, data);
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	1d18      	adds	r0, r3, #4
 80009bc:	893b      	ldrh	r3, [r7, #8]
 80009be:	085b      	lsrs	r3, r3, #1
 80009c0:	b29b      	uxth	r3, r3
 80009c2:	b2da      	uxtb	r2, r3
 80009c4:	7af9      	ldrb	r1, [r7, #11]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	f001 fa1c 	bl	8001e04 <msv2_create_frame>
 80009cc:	4603      	mov	r3, r0
 80009ce:	82fb      	strh	r3, [r7, #22]
	serial_send(&cm4->ser, msv2_tx_data(&cm4->msv2), frame_length);
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	f503 5480 	add.w	r4, r3, #4096	; 0x1000
 80009d6:	3418      	adds	r4, #24
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	3304      	adds	r3, #4
 80009dc:	4618      	mov	r0, r3
 80009de:	f001 fbeb 	bl	80021b8 <msv2_tx_data>
 80009e2:	4601      	mov	r1, r0
 80009e4:	8afb      	ldrh	r3, [r7, #22]
 80009e6:	461a      	mov	r2, r3
 80009e8:	4620      	mov	r0, r4
 80009ea:	f001 fd0b 	bl	8002404 <serial_send>
	if(cm4->rx_sem == NULL) {
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 80009f4:	3318      	adds	r3, #24
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d101      	bne.n	8000a00 <cm4_send+0x5c>
		return CM4_LOCAL_ERROR;
 80009fc:	2308      	movs	r3, #8
 80009fe:	e04a      	b.n	8000a96 <cm4_send+0xf2>
	}
	if(xSemaphoreTake(cm4->rx_sem, COMM_TIMEOUT) == pdTRUE) {
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8000a06:	3318      	adds	r3, #24
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	210a      	movs	r1, #10
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f009 fa6f 	bl	8009ef0 <xQueueSemaphoreTake>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d123      	bne.n	8000a60 <cm4_send+0xbc>
		cm4->garbage_counter = 0;
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	f503 53a4 	add.w	r3, r3, #5248	; 0x1480
 8000a1e:	3304      	adds	r3, #4
 8000a20:	2200      	movs	r2, #0
 8000a22:	801a      	strh	r2, [r3, #0]
		if(cm4->msv2.rx.opcode == cmd) {
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	7a1b      	ldrb	r3, [r3, #8]
 8000a28:	7afa      	ldrb	r2, [r7, #11]
 8000a2a:	429a      	cmp	r2, r3
 8000a2c:	d110      	bne.n	8000a50 <cm4_send+0xac>
			if(resp_len != NULL && resp_data != NULL) {
 8000a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d00b      	beq.n	8000a4c <cm4_send+0xa8>
 8000a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d008      	beq.n	8000a4c <cm4_send+0xa8>
				*resp_len = cm4->msv2.rx.length;
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	89da      	ldrh	r2, [r3, #14]
 8000a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a40:	801a      	strh	r2, [r3, #0]
				*resp_data = cm4->msv2.rx.data;
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	f103 0212 	add.w	r2, r3, #18
 8000a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a4a:	601a      	str	r2, [r3, #0]
			}
			return CM4_SUCCESS;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	e022      	b.n	8000a96 <cm4_send+0xf2>
		} else {
			if(resp_len != NULL) {
 8000a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d002      	beq.n	8000a5c <cm4_send+0xb8>
				*resp_len = 0;
 8000a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a58:	2200      	movs	r2, #0
 8000a5a:	801a      	strh	r2, [r3, #0]
			}
			return CM4_REMOTE_ERROR;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	e01a      	b.n	8000a96 <cm4_send+0xf2>
		}



	} else {
		cm4->garbage_counter++;
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	f503 53a4 	add.w	r3, r3, #5248	; 0x1480
 8000a66:	3304      	adds	r3, #4
 8000a68:	881b      	ldrh	r3, [r3, #0]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	b29a      	uxth	r2, r3
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	f503 53a4 	add.w	r3, r3, #5248	; 0x1480
 8000a74:	3304      	adds	r3, #4
 8000a76:	801a      	strh	r2, [r3, #0]
		if(cm4->garbage_counter > GARBAGE_THRESHOLD) {
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	f503 53a4 	add.w	r3, r3, #5248	; 0x1480
 8000a7e:	3304      	adds	r3, #4
 8000a80:	881b      	ldrh	r3, [r3, #0]
 8000a82:	2b0a      	cmp	r3, #10
 8000a84:	d906      	bls.n	8000a94 <cm4_send+0xf0>
			serial_garbage_clean(&cm4->ser);
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000a8c:	3318      	adds	r3, #24
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f001 fcca 	bl	8002428 <serial_garbage_clean>
		}
		return CM4_TIMEOUT;
 8000a94:	2301      	movs	r3, #1
	}

}
 8000a96:	4618      	mov	r0, r3
 8000a98:	371c      	adds	r7, #28
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd90      	pop	{r4, r7, pc}

08000a9e <cm4_ping>:

CM4_ERROR_t cm4_ping(CM4_INST_t * cm4) {
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	b086      	sub	sp, #24
 8000aa2:	af02      	add	r7, sp, #8
 8000aa4:	6078      	str	r0, [r7, #4]
	CM4_ERROR_t error = 0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	73fb      	strb	r3, [r7, #15]
	uint8_t data[] = {0xc5, 0x5c};
 8000aaa:	f645 43c5 	movw	r3, #23749	; 0x5cc5
 8000aae:	81bb      	strh	r3, [r7, #12]
	error |= cm4_send(cm4, CM4_PING, data, 2, NULL, NULL);
 8000ab0:	f107 020c 	add.w	r2, r7, #12
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	9301      	str	r3, [sp, #4]
 8000ab8:	2300      	movs	r3, #0
 8000aba:	9300      	str	r3, [sp, #0]
 8000abc:	2302      	movs	r3, #2
 8000abe:	2100      	movs	r1, #0
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f7ff ff6f 	bl	80009a4 <cm4_send>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	461a      	mov	r2, r3
 8000aca:	7bfb      	ldrb	r3, [r7, #15]
 8000acc:	4313      	orrs	r3, r2
 8000ace:	73fb      	strb	r3, [r7, #15]

	return error;
 8000ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3710      	adds	r7, #16
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <cm4_transaction>:


CM4_ERROR_t cm4_transaction(CM4_INST_t * cm4, CM4_PAYLOAD_SENSOR_t * sens, CM4_PAYLOAD_COMMAND_t * cmd) {
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b096      	sub	sp, #88	; 0x58
 8000ade:	af02      	add	r7, sp, #8
 8000ae0:	60f8      	str	r0, [r7, #12]
 8000ae2:	60b9      	str	r1, [r7, #8]
 8000ae4:	607a      	str	r2, [r7, #4]
	CM4_ERROR_t error = 0;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t * recv_data;
	uint16_t recv_len = 0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	uint16_t send_len = 52;
 8000af2:	2334      	movs	r3, #52	; 0x34
 8000af4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	uint8_t send_data[52];

	util_encode_u32(send_data, sens->timestamp);
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	f107 0310 	add.w	r3, r7, #16
 8000b00:	4611      	mov	r1, r2
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff fe64 	bl	80007d0 <util_encode_u32>
	util_encode_i32(send_data+4, sens->acc_x);
 8000b08:	f107 0310 	add.w	r3, r7, #16
 8000b0c:	3304      	adds	r3, #4
 8000b0e:	68ba      	ldr	r2, [r7, #8]
 8000b10:	6852      	ldr	r2, [r2, #4]
 8000b12:	4611      	mov	r1, r2
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff fe7c 	bl	8000812 <util_encode_i32>
	util_encode_i32(send_data+8, sens->acc_y);
 8000b1a:	f107 0310 	add.w	r3, r7, #16
 8000b1e:	3308      	adds	r3, #8
 8000b20:	68ba      	ldr	r2, [r7, #8]
 8000b22:	6892      	ldr	r2, [r2, #8]
 8000b24:	4611      	mov	r1, r2
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff fe73 	bl	8000812 <util_encode_i32>
	util_encode_i32(send_data+12, sens->acc_z);
 8000b2c:	f107 0310 	add.w	r3, r7, #16
 8000b30:	330c      	adds	r3, #12
 8000b32:	68ba      	ldr	r2, [r7, #8]
 8000b34:	68d2      	ldr	r2, [r2, #12]
 8000b36:	4611      	mov	r1, r2
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff fe6a 	bl	8000812 <util_encode_i32>

	util_encode_i32(send_data+16, sens->gyro_x);
 8000b3e:	f107 0310 	add.w	r3, r7, #16
 8000b42:	3310      	adds	r3, #16
 8000b44:	68ba      	ldr	r2, [r7, #8]
 8000b46:	6912      	ldr	r2, [r2, #16]
 8000b48:	4611      	mov	r1, r2
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f7ff fe61 	bl	8000812 <util_encode_i32>
	util_encode_i32(send_data+20, sens->gyro_y);
 8000b50:	f107 0310 	add.w	r3, r7, #16
 8000b54:	3314      	adds	r3, #20
 8000b56:	68ba      	ldr	r2, [r7, #8]
 8000b58:	6952      	ldr	r2, [r2, #20]
 8000b5a:	4611      	mov	r1, r2
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f7ff fe58 	bl	8000812 <util_encode_i32>
	util_encode_i32(send_data+24, sens->gyro_z);
 8000b62:	f107 0310 	add.w	r3, r7, #16
 8000b66:	3318      	adds	r3, #24
 8000b68:	68ba      	ldr	r2, [r7, #8]
 8000b6a:	6992      	ldr	r2, [r2, #24]
 8000b6c:	4611      	mov	r1, r2
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff fe4f 	bl	8000812 <util_encode_i32>

	util_encode_i32(send_data+28, sens->baro);
 8000b74:	f107 0310 	add.w	r3, r7, #16
 8000b78:	331c      	adds	r3, #28
 8000b7a:	68ba      	ldr	r2, [r7, #8]
 8000b7c:	69d2      	ldr	r2, [r2, #28]
 8000b7e:	4611      	mov	r1, r2
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff fe46 	bl	8000812 <util_encode_i32>
	util_encode_i32(send_data+32, sens->cc_pressure);
 8000b86:	f107 0310 	add.w	r3, r7, #16
 8000b8a:	3320      	adds	r3, #32
 8000b8c:	68ba      	ldr	r2, [r7, #8]
 8000b8e:	6a12      	ldr	r2, [r2, #32]
 8000b90:	4611      	mov	r1, r2
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff fe3d 	bl	8000812 <util_encode_i32>

	util_encode_i32(send_data+36, sens->dynamixel[0]);
 8000b98:	f107 0310 	add.w	r3, r7, #16
 8000b9c:	3324      	adds	r3, #36	; 0x24
 8000b9e:	68ba      	ldr	r2, [r7, #8]
 8000ba0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000ba2:	4611      	mov	r1, r2
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff fe34 	bl	8000812 <util_encode_i32>
	util_encode_i32(send_data+40, sens->dynamixel[1]);
 8000baa:	f107 0310 	add.w	r3, r7, #16
 8000bae:	3328      	adds	r3, #40	; 0x28
 8000bb0:	68ba      	ldr	r2, [r7, #8]
 8000bb2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000bb4:	4611      	mov	r1, r2
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff fe2b 	bl	8000812 <util_encode_i32>
	util_encode_i32(send_data+44, sens->dynamixel[2]);
 8000bbc:	f107 0310 	add.w	r3, r7, #16
 8000bc0:	332c      	adds	r3, #44	; 0x2c
 8000bc2:	68ba      	ldr	r2, [r7, #8]
 8000bc4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000bc6:	4611      	mov	r1, r2
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff fe22 	bl	8000812 <util_encode_i32>
	util_encode_i32(send_data+48, sens->dynamixel[3]);
 8000bce:	f107 0310 	add.w	r3, r7, #16
 8000bd2:	3330      	adds	r3, #48	; 0x30
 8000bd4:	68ba      	ldr	r2, [r7, #8]
 8000bd6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000bd8:	4611      	mov	r1, r2
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff fe19 	bl	8000812 <util_encode_i32>

	error |= cm4_send(cm4, CM4_PAYLOAD, send_data, send_len , &recv_data, &recv_len);
 8000be0:	f8b7 104c 	ldrh.w	r1, [r7, #76]	; 0x4c
 8000be4:	f107 0210 	add.w	r2, r7, #16
 8000be8:	f107 0346 	add.w	r3, r7, #70	; 0x46
 8000bec:	9301      	str	r3, [sp, #4]
 8000bee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000bf2:	9300      	str	r3, [sp, #0]
 8000bf4:	460b      	mov	r3, r1
 8000bf6:	2102      	movs	r1, #2
 8000bf8:	68f8      	ldr	r0, [r7, #12]
 8000bfa:	f7ff fed3 	bl	80009a4 <cm4_send>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	461a      	mov	r2, r3
 8000c02:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000c06:	4313      	orrs	r3, r2
 8000c08:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if(recv_len == 24) {
 8000c0c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8000c10:	2b18      	cmp	r3, #24
 8000c12:	d12e      	bne.n	8000c72 <cm4_transaction+0x198>
		cmd->timestamp = util_decode_u32(recv_data);
 8000c14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff fe1c 	bl	8000854 <util_decode_u32>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	601a      	str	r2, [r3, #0]
		cmd->thrust = util_decode_i32(recv_data+4);
 8000c22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c24:	3304      	adds	r3, #4
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff fe30 	bl	800088c <util_decode_i32>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	605a      	str	r2, [r3, #4]

		cmd->dynamixel[0] = util_decode_i32(recv_data+8);
 8000c32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c34:	3308      	adds	r3, #8
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff fe28 	bl	800088c <util_decode_i32>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	609a      	str	r2, [r3, #8]
		cmd->dynamixel[1] = util_decode_i32(recv_data+12);
 8000c42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c44:	330c      	adds	r3, #12
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff fe20 	bl	800088c <util_decode_i32>
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	60da      	str	r2, [r3, #12]
		cmd->dynamixel[2] = util_decode_i32(recv_data+16);
 8000c52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c54:	3310      	adds	r3, #16
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff fe18 	bl	800088c <util_decode_i32>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	611a      	str	r2, [r3, #16]
		cmd->dynamixel[3] = util_decode_i32(recv_data+20);
 8000c62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c64:	3314      	adds	r3, #20
 8000c66:	4618      	mov	r0, r3
 8000c68:	f7ff fe10 	bl	800088c <util_decode_i32>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	615a      	str	r2, [r3, #20]
	}

	return CM4_SUCCESS;
 8000c72:	2300      	movs	r3, #0
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3750      	adds	r7, #80	; 0x50
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <cm4_boot>:

CM4_ERROR_t cm4_boot(CM4_INST_t * cm4) {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
	allow_boot();
 8000c84:	f000 f86c 	bl	8000d60 <allow_boot>
	return CM4_SUCCESS;
 8000c88:	2300      	movs	r3, #0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <cm4_is_ready>:

CM4_ERROR_t cm4_is_ready(CM4_INST_t * cm4, uint8_t * ready) {
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b082      	sub	sp, #8
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
 8000c9a:	6039      	str	r1, [r7, #0]
	if(ready == NULL){
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d101      	bne.n	8000ca6 <cm4_is_ready+0x14>
		return CM4_LOCAL_ERROR;
 8000ca2:	2308      	movs	r3, #8
 8000ca4:	e011      	b.n	8000cca <cm4_is_ready+0x38>
	}
	*ready = 0;
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	2200      	movs	r2, #0
 8000caa:	701a      	strb	r2, [r3, #0]
	if(is_booted()) {
 8000cac:	f000 f846 	bl	8000d3c <is_booted>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d008      	beq.n	8000cc8 <cm4_is_ready+0x36>
		if(cm4_ping(cm4) == CM4_SUCCESS) {
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	f7ff fef1 	bl	8000a9e <cm4_ping>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d102      	bne.n	8000cc8 <cm4_is_ready+0x36>
			*ready = 1;
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	701a      	strb	r2, [r3, #0]
		}
	}
	return CM4_SUCCESS;
 8000cc8:	2300      	movs	r3, #0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <cm4_shutdown>:

CM4_ERROR_t cm4_shutdown(CM4_INST_t * cm4) {
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b086      	sub	sp, #24
 8000cd6:	af02      	add	r7, sp, #8
 8000cd8:	6078      	str	r0, [r7, #4]
	//send shutdown command through uart
	uint8_t data[] = {0xc8, 0x8c};
 8000cda:	f648 43c8 	movw	r3, #36040	; 0x8cc8
 8000cde:	81bb      	strh	r3, [r7, #12]
	cm4_send(cm4, CM4_SHUTDOWN, data, 2, NULL, NULL);
 8000ce0:	f107 020c 	add.w	r2, r7, #12
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	9301      	str	r3, [sp, #4]
 8000ce8:	2300      	movs	r3, #0
 8000cea:	9300      	str	r3, [sp, #0]
 8000cec:	2302      	movs	r3, #2
 8000cee:	2101      	movs	r1, #1
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f7ff fe57 	bl	80009a4 <cm4_send>

	return CM4_SUCCESS;
 8000cf6:	2300      	movs	r3, #0
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3710      	adds	r7, #16
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <cm4_is_shutdown>:

CM4_ERROR_t cm4_is_shutdown(CM4_INST_t * cm4, uint8_t * shutdown) {
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	6039      	str	r1, [r7, #0]
	if(shutdown == NULL){
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d101      	bne.n	8000d14 <cm4_is_shutdown+0x14>
		return CM4_LOCAL_ERROR;
 8000d10:	2308      	movs	r3, #8
 8000d12:	e00f      	b.n	8000d34 <cm4_is_shutdown+0x34>
	}
	if(!is_booted()) {
 8000d14:	f000 f812 	bl	8000d3c <is_booted>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d106      	bne.n	8000d2c <cm4_is_shutdown+0x2c>
		//check wheter the CM4 answers
		//if answers
		hold_boot();
 8000d1e:	f000 f82d 	bl	8000d7c <hold_boot>
		*shutdown = 1;
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	2201      	movs	r2, #1
 8000d26:	701a      	strb	r2, [r3, #0]
		return CM4_SUCCESS;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	e003      	b.n	8000d34 <cm4_is_shutdown+0x34>
	} else {
		*shutdown = 0;
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	2200      	movs	r2, #0
 8000d30:	701a      	strb	r2, [r3, #0]
		return CM4_SUCCESS;
 8000d32:	2300      	movs	r3, #0
	}
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <is_booted>:




static uint8_t is_booted(void) {
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
	return CM4_RUN_PG_PORT->IDR & CM4_RUN_PG_PIN ?1:0;
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <is_booted+0x20>)
 8000d42:	691b      	ldr	r3, [r3, #16]
 8000d44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	bf14      	ite	ne
 8000d4c:	2301      	movne	r3, #1
 8000d4e:	2300      	moveq	r3, #0
 8000d50:	b2db      	uxtb	r3, r3
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	40020400 	.word	0x40020400

08000d60 <allow_boot>:

static void allow_boot(void) {
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
	CM4_GLOBAL_EN_PORT->BSRR = CM4_GLOBAL_EN_PIN;
 8000d64:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <allow_boot+0x18>)
 8000d66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d6a:	619a      	str	r2, [r3, #24]
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	40020000 	.word	0x40020000

08000d7c <hold_boot>:

static void hold_boot(void) {
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
	CM4_GLOBAL_EN_PORT->BSRR = CM4_GLOBAL_EN_PIN << 16;
 8000d80:	4b04      	ldr	r3, [pc, #16]	; (8000d94 <hold_boot+0x18>)
 8000d82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d86:	619a      	str	r2, [r3, #24]
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	40020000 	.word	0x40020000

08000d98 <control_thread>:

/**********************
 *	DECLARATIONS
 **********************/

void control_thread(void * arg) {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
	static TickType_t last_wake_time;
	static const TickType_t period = pdMS_TO_TICKS(CONTROL_HEART_BEAT);



	led_init();
 8000da0:	f000 ff9c 	bl	8001cdc <led_init>

	init_control(&control);
 8000da4:	482e      	ldr	r0, [pc, #184]	; (8000e60 <control_thread+0xc8>)
 8000da6:	f000 f8b4 	bl	8000f12 <init_control>

	static SERVO_INST_t tvc_servo;

	servo_global_init();
 8000daa:	f001 fc53 	bl	8002654 <servo_global_init>

	servo_init(&tvc_servo, 1);
 8000dae:	2101      	movs	r1, #1
 8000db0:	482c      	ldr	r0, [pc, #176]	; (8000e64 <control_thread+0xcc>)
 8000db2:	f001 fc15 	bl	80025e0 <servo_init>

	servo_config(&tvc_servo);
 8000db6:	482b      	ldr	r0, [pc, #172]	; (8000e64 <control_thread+0xcc>)
 8000db8:	f001 fedc 	bl	8002b74 <servo_config>

	control.tvc_servo = &tvc_servo;
 8000dbc:	4b28      	ldr	r3, [pc, #160]	; (8000e60 <control_thread+0xc8>)
 8000dbe:	4a29      	ldr	r2, [pc, #164]	; (8000e64 <control_thread+0xcc>)
 8000dc0:	61da      	str	r2, [r3, #28]

	cm4_global_init();
 8000dc2:	f7ff fd7f 	bl	80008c4 <cm4_global_init>

	static CM4_INST_t cm4;

	cm4_init(&cm4);
 8000dc6:	4828      	ldr	r0, [pc, #160]	; (8000e68 <control_thread+0xd0>)
 8000dc8:	f7ff fd8c 	bl	80008e4 <cm4_init>

	control.cm4 = &cm4;
 8000dcc:	4b24      	ldr	r3, [pc, #144]	; (8000e60 <control_thread+0xc8>)
 8000dce:	4a26      	ldr	r2, [pc, #152]	; (8000e68 <control_thread+0xd0>)
 8000dd0:	619a      	str	r2, [r3, #24]


	init_idle(&control);
 8000dd2:	4823      	ldr	r0, [pc, #140]	; (8000e60 <control_thread+0xc8>)
 8000dd4:	f000 f8ae 	bl	8000f34 <init_idle>



	last_wake_time = xTaskGetTickCount();
 8000dd8:	f009 fd9e 	bl	800a918 <xTaskGetTickCount>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	4a23      	ldr	r2, [pc, #140]	; (8000e6c <control_thread+0xd4>)
 8000de0:	6013      	str	r3, [r2, #0]
	for(;;) {


		static uint8_t lol = 0;
		static uint16_t cnt = 0;
		if(cnt++ > 10) {
 8000de2:	4b23      	ldr	r3, [pc, #140]	; (8000e70 <control_thread+0xd8>)
 8000de4:	881b      	ldrh	r3, [r3, #0]
 8000de6:	1c5a      	adds	r2, r3, #1
 8000de8:	b291      	uxth	r1, r2
 8000dea:	4a21      	ldr	r2, [pc, #132]	; (8000e70 <control_thread+0xd8>)
 8000dec:	8011      	strh	r1, [r2, #0]
 8000dee:	2b0a      	cmp	r3, #10
 8000df0:	d90c      	bls.n	8000e0c <control_thread+0x74>
			lol = !lol;
 8000df2:	4b20      	ldr	r3, [pc, #128]	; (8000e74 <control_thread+0xdc>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	bf0c      	ite	eq
 8000dfa:	2301      	moveq	r3, #1
 8000dfc:	2300      	movne	r3, #0
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	461a      	mov	r2, r3
 8000e02:	4b1c      	ldr	r3, [pc, #112]	; (8000e74 <control_thread+0xdc>)
 8000e04:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 8000e06:	4b1a      	ldr	r3, [pc, #104]	; (8000e70 <control_thread+0xd8>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	801a      	strh	r2, [r3, #0]
		}

		if(lol) {
 8000e0c:	4b19      	ldr	r3, [pc, #100]	; (8000e74 <control_thread+0xdc>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d007      	beq.n	8000e24 <control_thread+0x8c>
			servo_enable_led(control.tvc_servo, NULL);
 8000e14:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <control_thread+0xc8>)
 8000e16:	69d8      	ldr	r0, [r3, #28]
 8000e18:	2300      	movs	r3, #0
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	2141      	movs	r1, #65	; 0x41
 8000e1e:	f001 fd9f 	bl	8002960 <servo_write_u8>
 8000e22:	e006      	b.n	8000e32 <control_thread+0x9a>
		} else {
			servo_disable_led(control.tvc_servo, NULL);
 8000e24:	4b0e      	ldr	r3, [pc, #56]	; (8000e60 <control_thread+0xc8>)
 8000e26:	69d8      	ldr	r0, [r3, #28]
 8000e28:	2300      	movs	r3, #0
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2141      	movs	r1, #65	; 0x41
 8000e2e:	f001 fd97 	bl	8002960 <servo_write_u8>
		}


		control_update(&control);
 8000e32:	480b      	ldr	r0, [pc, #44]	; (8000e60 <control_thread+0xc8>)
 8000e34:	f000 f824 	bl	8000e80 <control_update>


		if(control.state < CS_NUM && control.state >= 0) {
 8000e38:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <control_thread+0xc8>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	2b05      	cmp	r3, #5
 8000e3e:	d807      	bhi.n	8000e50 <control_thread+0xb8>
			control_fcn[control.state](&control);
 8000e40:	4b07      	ldr	r3, [pc, #28]	; (8000e60 <control_thread+0xc8>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	461a      	mov	r2, r3
 8000e46:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <control_thread+0xe0>)
 8000e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e4c:	4804      	ldr	r0, [pc, #16]	; (8000e60 <control_thread+0xc8>)
 8000e4e:	4798      	blx	r3
		}
		vTaskDelayUntil( &last_wake_time, period );
 8000e50:	4b0a      	ldr	r3, [pc, #40]	; (8000e7c <control_thread+0xe4>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4619      	mov	r1, r3
 8000e56:	4805      	ldr	r0, [pc, #20]	; (8000e6c <control_thread+0xd4>)
 8000e58:	f009 fba2 	bl	800a5a0 <vTaskDelayUntil>
	for(;;) {
 8000e5c:	e7c1      	b.n	8000de2 <control_thread+0x4a>
 8000e5e:	bf00      	nop
 8000e60:	200000e8 	.word	0x200000e8
 8000e64:	2000016c 	.word	0x2000016c
 8000e68:	20001208 	.word	0x20001208
 8000e6c:	20002690 	.word	0x20002690
 8000e70:	20002694 	.word	0x20002694
 8000e74:	20002696 	.word	0x20002696
 8000e78:	20000024 	.word	0x20000024
 8000e7c:	0800bacc 	.word	0x0800bacc

08000e80 <control_update>:
	}
}


static void control_update(CONTROL_INST_t * control) {
 8000e80:	b590      	push	{r4, r7, lr}
 8000e82:	b087      	sub	sp, #28
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6178      	str	r0, [r7, #20]

	control->last_time = control->time;
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	685a      	ldr	r2, [r3, #4]
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	609a      	str	r2, [r3, #8]
	control->time = HAL_GetTick();
 8000e90:	f003 f9c2 	bl	8004218 <HAL_GetTick>
 8000e94:	4602      	mov	r2, r0
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	605a      	str	r2, [r3, #4]
	control->iter++;
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	695b      	ldr	r3, [r3, #20]
 8000e9e:	1c5a      	adds	r2, r3, #1
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	615a      	str	r2, [r3, #20]

	if(control->counter_active) {
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	7c1b      	ldrb	r3, [r3, #16]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d016      	beq.n	8000eda <control_update+0x5a>
		control->counter -= (control->time - control->last_time);
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	689a      	ldr	r2, [r3, #8]
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	1ad3      	subs	r3, r2, r3
 8000ebc:	440b      	add	r3, r1
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	60da      	str	r2, [r3, #12]
	}

	while(can_msgPending()) {
 8000ec4:	e009      	b.n	8000eda <control_update+0x5a>
		control->msg = can_readBuffer();
 8000ec6:	697c      	ldr	r4, [r7, #20]
 8000ec8:	463b      	mov	r3, r7
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff fbce 	bl	800066c <can_readBuffer>
 8000ed0:	3428      	adds	r4, #40	; 0x28
 8000ed2:	463b      	mov	r3, r7
 8000ed4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ed6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	while(can_msgPending()) {
 8000eda:	f7ff fbad 	bl	8000638 <can_msgPending>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d1f0      	bne.n	8000ec6 <control_update+0x46>

		}
	}

	//read servo parameters
	servo_sync(control->tvc_servo);
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	69db      	ldr	r3, [r3, #28]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f001 fdfc 	bl	8002ae6 <servo_sync>


	//init error if there is an issue with a motor

	if(control_sched_should_run(control, CONTROL_SCHED_ABORT)) {
 8000eee:	2101      	movs	r1, #1
 8000ef0:	6978      	ldr	r0, [r7, #20]
 8000ef2:	f000 f9c1 	bl	8001278 <control_sched_should_run>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d006      	beq.n	8000f0a <control_update+0x8a>
		init_abort(control);
 8000efc:	6978      	ldr	r0, [r7, #20]
 8000efe:	f000 f8e1 	bl	80010c4 <init_abort>
		control_sched_done(control, CONTROL_SCHED_ABORT);
 8000f02:	2101      	movs	r1, #1
 8000f04:	6978      	ldr	r0, [r7, #20]
 8000f06:	f000 f9cc 	bl	80012a2 <control_sched_done>
	}
}
 8000f0a:	bf00      	nop
 8000f0c:	371c      	adds	r7, #28
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd90      	pop	{r4, r7, pc}

08000f12 <init_control>:

static void init_control(CONTROL_INST_t * control) {
 8000f12:	b480      	push	{r7}
 8000f14:	b083      	sub	sp, #12
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
	control->sched = CONTROL_SCHED_NOTHING;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	control->counter_active = 0;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2200      	movs	r2, #0
 8000f26:	741a      	strb	r2, [r3, #16]
}
 8000f28:	bf00      	nop
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <init_idle>:

static void init_idle(CONTROL_INST_t * control) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
	control->state = CS_IDLE;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	701a      	strb	r2, [r3, #0]
	led_set_color(LED_GREEN);
 8000f42:	2200      	movs	r2, #0
 8000f44:	21ff      	movs	r1, #255	; 0xff
 8000f46:	2000      	movs	r0, #0
 8000f48:	f000 feec 	bl	8001d24 <led_set_color>
	storage_disable();
 8000f4c:	f001 ff5c 	bl	8002e08 <storage_disable>
}
 8000f50:	bf00      	nop
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <idle>:

static void idle(CONTROL_INST_t * control) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
	if(control_sched_should_run(control, CONTROL_SCHED_MOVE_TVC)) {
 8000f60:	2104      	movs	r1, #4
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f000 f988 	bl	8001278 <control_sched_should_run>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d00b      	beq.n	8000f86 <idle+0x2e>
		servo_move(control->tvc_servo, control->tvc_mov_target);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	69da      	ldr	r2, [r3, #28]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6a1b      	ldr	r3, [r3, #32]
 8000f76:	4619      	mov	r1, r3
 8000f78:	4610      	mov	r0, r2
 8000f7a:	f001 fe37 	bl	8002bec <servo_move>
		control_sched_done(control, CONTROL_SCHED_MOVE_TVC);
 8000f7e:	2104      	movs	r1, #4
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f000 f98e 	bl	80012a2 <control_sched_done>
	}

	if(control_sched_should_run(control, CONTROL_SCHED_BOOT)) {
 8000f86:	2102      	movs	r1, #2
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f000 f975 	bl	8001278 <control_sched_should_run>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d006      	beq.n	8000fa2 <idle+0x4a>
		init_boot(control);
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f000 f808 	bl	8000faa <init_boot>
		control_sched_done(control, CONTROL_SCHED_BOOT);
 8000f9a:	2102      	movs	r1, #2
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f000 f980 	bl	80012a2 <control_sched_done>
	}

}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <init_boot>:

static void init_boot(CONTROL_INST_t * control) {
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b082      	sub	sp, #8
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
	//global enable
	//to boot the rpi
	led_set_color(LED_LILA);
 8000fb2:	224f      	movs	r2, #79	; 0x4f
 8000fb4:	2103      	movs	r1, #3
 8000fb6:	20ff      	movs	r0, #255	; 0xff
 8000fb8:	f000 feb4 	bl	8001d24 <led_set_color>
	control->state = CS_BOOT;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	701a      	strb	r2, [r3, #0]
	cm4_boot(control->cm4);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	699b      	ldr	r3, [r3, #24]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff fe58 	bl	8000c7c <cm4_boot>
}
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <boot>:

static void boot(CONTROL_INST_t * control) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
	//wait for the cm4 to start answering with concluent status packets
	uint8_t ready = 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	73fb      	strb	r3, [r7, #15]
	cm4_is_ready(control->cm4, &ready);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	f107 020f 	add.w	r2, r7, #15
 8000fe8:	4611      	mov	r1, r2
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff fe51 	bl	8000c92 <cm4_is_ready>
	if(ready) {
 8000ff0:	7bfb      	ldrb	r3, [r7, #15]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d002      	beq.n	8000ffc <boot+0x28>
		init_compute(control);
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f000 f804 	bl	8001004 <init_compute>
	}
}
 8000ffc:	bf00      	nop
 8000ffe:	3710      	adds	r7, #16
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <init_compute>:

static void init_compute(CONTROL_INST_t * control) {
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
	//start sending data to raspberry pi
	led_set_color(LED_BLUE);
 800100c:	22ff      	movs	r2, #255	; 0xff
 800100e:	2100      	movs	r1, #0
 8001010:	2000      	movs	r0, #0
 8001012:	f000 fe87 	bl	8001d24 <led_set_color>
	control->state = CS_COMPUTE;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2202      	movs	r2, #2
 800101a:	701a      	strb	r2, [r3, #0]
}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <compute>:

static void compute(CONTROL_INST_t * control) {
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]

	control->sensor_payload.acc_z = 41;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2229      	movs	r2, #41	; 0x29
 8001030:	645a      	str	r2, [r3, #68]	; 0x44
	cm4_transaction(control->cm4, &control->sensor_payload, &control->command_payload);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6998      	ldr	r0, [r3, #24]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	336c      	adds	r3, #108	; 0x6c
 8001040:	461a      	mov	r2, r3
 8001042:	f7ff fd4a 	bl	8000ada <cm4_transaction>

	if(control_sched_should_run(control, CONTROL_SCHED_SHUTDOWN)) {
 8001046:	2103      	movs	r1, #3
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f000 f915 	bl	8001278 <control_sched_should_run>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d006      	beq.n	8001062 <compute+0x3e>
		init_shutdown(control);
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f000 f808 	bl	800106a <init_shutdown>
		control_sched_done(control, CONTROL_SCHED_SHUTDOWN);
 800105a:	2103      	movs	r1, #3
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f000 f920 	bl	80012a2 <control_sched_done>
	}
}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <init_shutdown>:


static void init_shutdown(CONTROL_INST_t * control) {
 800106a:	b580      	push	{r7, lr}
 800106c:	b082      	sub	sp, #8
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
	led_set_color(LED_ORANGE);
 8001072:	2207      	movs	r2, #7
 8001074:	210f      	movs	r1, #15
 8001076:	207f      	movs	r0, #127	; 0x7f
 8001078:	f000 fe54 	bl	8001d24 <led_set_color>
	control->state = CS_SHUTDOWN;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2203      	movs	r2, #3
 8001080:	701a      	strb	r2, [r3, #0]
	cm4_shutdown(control->cm4);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	699b      	ldr	r3, [r3, #24]
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff fe23 	bl	8000cd2 <cm4_shutdown>
}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <shutdown>:

static void shutdown(CONTROL_INST_t * control) {
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
	uint8_t shutdown = 0;
 800109c:	2300      	movs	r3, #0
 800109e:	73fb      	strb	r3, [r7, #15]
	cm4_is_shutdown(control->cm4, &shutdown);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	699b      	ldr	r3, [r3, #24]
 80010a4:	f107 020f 	add.w	r2, r7, #15
 80010a8:	4611      	mov	r1, r2
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff fe28 	bl	8000d00 <cm4_is_shutdown>
	if(shutdown) {
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d002      	beq.n	80010bc <shutdown+0x28>
		init_idle(control);
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f7ff ff3c 	bl	8000f34 <init_idle>
	}
}
 80010bc:	bf00      	nop
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <init_abort>:

static void init_abort(CONTROL_INST_t * control) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
	led_set_color(LED_PINK);
 80010cc:	227f      	movs	r2, #127	; 0x7f
 80010ce:	2100      	movs	r1, #0
 80010d0:	207f      	movs	r0, #127	; 0x7f
 80010d2:	f000 fe27 	bl	8001d24 <led_set_color>
	control->shadow_state = control->state;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	781a      	ldrb	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	705a      	strb	r2, [r3, #1]
	control->state = CS_ABORT;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2204      	movs	r2, #4
 80010e2:	701a      	strb	r2, [r3, #0]
	servo_move(control->tvc_servo, 2048); //2048 is the straight position
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	69db      	ldr	r3, [r3, #28]
 80010e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010ec:	4618      	mov	r0, r3
 80010ee:	f001 fd7d 	bl	8002bec <servo_move>
	control->counter_active=0;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2200      	movs	r2, #0
 80010f6:	741a      	strb	r2, [r3, #16]
	storage_disable();
 80010f8:	f001 fe86 	bl	8002e08 <storage_disable>
}
 80010fc:	bf00      	nop
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <_abort>:

static void _abort(CONTROL_INST_t * control) {
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
	if(control_sched_should_run(control, CONTROL_SCHED_RECOVER)) {
 800110c:	2105      	movs	r1, #5
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f000 f8b2 	bl	8001278 <control_sched_should_run>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d006      	beq.n	8001128 <_abort+0x24>
		init_idle(control);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff ff0a 	bl	8000f34 <init_idle>
		control_sched_done(control, CONTROL_SCHED_RECOVER);
 8001120:	2105      	movs	r1, #5
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f000 f8bd 	bl	80012a2 <control_sched_done>
	}
}
 8001128:	bf00      	nop
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <init_error>:

static void init_error(CONTROL_INST_t * control) {
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
	led_set_color(LED_RED);
 8001138:	2200      	movs	r2, #0
 800113a:	2100      	movs	r1, #0
 800113c:	20ff      	movs	r0, #255	; 0xff
 800113e:	f000 fdf1 	bl	8001d24 <led_set_color>
	control->state = CS_ERROR;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2205      	movs	r2, #5
 8001146:	701a      	strb	r2, [r3, #0]
	control->counter_active = 0;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2200      	movs	r2, #0
 800114c:	741a      	strb	r2, [r3, #16]
	storage_disable();
 800114e:	f001 fe5b 	bl	8002e08 <storage_disable>
}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <error>:

static void error(CONTROL_INST_t * control) {
 800115a:	b580      	push	{r7, lr}
 800115c:	b082      	sub	sp, #8
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
	//wait for user release
	if(control_sched_should_run(control, CONTROL_SCHED_RECOVER)) {
 8001162:	2105      	movs	r1, #5
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f000 f887 	bl	8001278 <control_sched_should_run>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d006      	beq.n	800117e <error+0x24>
		init_idle(control);
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f7ff fedf 	bl	8000f34 <init_idle>
		control_sched_done(control, CONTROL_SCHED_RECOVER);
 8001176:	2105      	movs	r1, #5
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f000 f892 	bl	80012a2 <control_sched_done>
	}
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
	...

08001188 <control_move_tvc>:
CONTROL_STATE_t control_get_state() {
	return control.state;
}


void control_move_tvc(int32_t target) {
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
	control_sched_set(&control, CONTROL_SCHED_MOVE_TVC);
 8001190:	2104      	movs	r1, #4
 8001192:	4805      	ldr	r0, [pc, #20]	; (80011a8 <control_move_tvc+0x20>)
 8001194:	f000 f89e 	bl	80012d4 <control_sched_set>
	control.tvc_mov_target = target;
 8001198:	4a03      	ldr	r2, [pc, #12]	; (80011a8 <control_move_tvc+0x20>)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6213      	str	r3, [r2, #32]
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	200000e8 	.word	0x200000e8

080011ac <control_boot>:

void control_boot(void) {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
	control_sched_set(&control, CONTROL_SCHED_BOOT);
 80011b0:	2102      	movs	r1, #2
 80011b2:	4802      	ldr	r0, [pc, #8]	; (80011bc <control_boot+0x10>)
 80011b4:	f000 f88e 	bl	80012d4 <control_sched_set>
}
 80011b8:	bf00      	nop
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	200000e8 	.word	0x200000e8

080011c0 <control_shutdown>:

void control_shutdown(void) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
	control_sched_set(&control, CONTROL_SCHED_SHUTDOWN);
 80011c4:	2103      	movs	r1, #3
 80011c6:	4802      	ldr	r0, [pc, #8]	; (80011d0 <control_shutdown+0x10>)
 80011c8:	f000 f884 	bl	80012d4 <control_sched_set>
}
 80011cc:	bf00      	nop
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	200000e8 	.word	0x200000e8

080011d4 <control_abort>:

void control_abort() {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
	control_sched_set(&control, CONTROL_SCHED_ABORT);
 80011d8:	2101      	movs	r1, #1
 80011da:	4802      	ldr	r0, [pc, #8]	; (80011e4 <control_abort+0x10>)
 80011dc:	f000 f87a 	bl	80012d4 <control_sched_set>
}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	200000e8 	.word	0x200000e8

080011e8 <control_recover>:

void control_recover() {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
	control_sched_set(&control, CONTROL_SCHED_RECOVER);
 80011ec:	2105      	movs	r1, #5
 80011ee:	4802      	ldr	r0, [pc, #8]	; (80011f8 <control_recover+0x10>)
 80011f0:	f000 f870 	bl	80012d4 <control_sched_set>
}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	200000e8 	.word	0x200000e8

080011fc <control_get_status>:

CONTROL_STATUS_t control_get_status() {
 80011fc:	b4b0      	push	{r4, r5, r7}
 80011fe:	b089      	sub	sp, #36	; 0x24
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
	CONTROL_STATUS_t status = {0};
 8001204:	f107 0308 	add.w	r3, r7, #8
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
 8001214:	615a      	str	r2, [r3, #20]
	status.state = control.state;
 8001216:	4b17      	ldr	r3, [pc, #92]	; (8001274 <control_get_status+0x78>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	723b      	strb	r3, [r7, #8]
	status.tvc_error = control.tvc_servo->error;
 800121c:	4b15      	ldr	r3, [pc, #84]	; (8001274 <control_get_status+0x78>)
 800121e:	69db      	ldr	r3, [r3, #28]
 8001220:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 8001224:	3318      	adds	r3, #24
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	737b      	strb	r3, [r7, #13]
	status.tvc_psu_voltage = control.tvc_servo->psu_voltage;
 800122a:	4b12      	ldr	r3, [pc, #72]	; (8001274 <control_get_status+0x78>)
 800122c:	69db      	ldr	r3, [r3, #28]
 800122e:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 8001232:	3310      	adds	r3, #16
 8001234:	881b      	ldrh	r3, [r3, #0]
 8001236:	817b      	strh	r3, [r7, #10]
	status.tvc_temperature = control.tvc_servo->temperature;
 8001238:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <control_get_status+0x78>)
 800123a:	69db      	ldr	r3, [r3, #28]
 800123c:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 8001240:	3312      	adds	r3, #18
 8001242:	f993 3000 	ldrsb.w	r3, [r3]
 8001246:	733b      	strb	r3, [r7, #12]
	status.tvc_position = control.tvc_servo->position;
 8001248:	4b0a      	ldr	r3, [pc, #40]	; (8001274 <control_get_status+0x78>)
 800124a:	69db      	ldr	r3, [r3, #28]
 800124c:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 8001250:	3314      	adds	r3, #20
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	613b      	str	r3, [r7, #16]

	return status;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	461d      	mov	r5, r3
 800125a:	f107 0408 	add.w	r4, r7, #8
 800125e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001260:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001262:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001266:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	3724      	adds	r7, #36	; 0x24
 800126e:	46bd      	mov	sp, r7
 8001270:	bcb0      	pop	{r4, r5, r7}
 8001272:	4770      	bx	lr
 8001274:	200000e8 	.word	0x200000e8

08001278 <control_sched_should_run>:
CM4_PAYLOAD_COMMAND_t control_get_cmd(void) {
	return control.command_payload;
}


static uint8_t control_sched_should_run(CONTROL_INST_t * control, CONTROL_SCHED_t num) {
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	460b      	mov	r3, r1
 8001282:	70fb      	strb	r3, [r7, #3]
	return control->sched == num;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800128a:	78fa      	ldrb	r2, [r7, #3]
 800128c:	429a      	cmp	r2, r3
 800128e:	bf0c      	ite	eq
 8001290:	2301      	moveq	r3, #1
 8001292:	2300      	movne	r3, #0
 8001294:	b2db      	uxtb	r3, r3
}
 8001296:	4618      	mov	r0, r3
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr

080012a2 <control_sched_done>:

static void control_sched_done(CONTROL_INST_t * control, CONTROL_SCHED_t num) {
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b082      	sub	sp, #8
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
 80012aa:	460b      	mov	r3, r1
 80012ac:	70fb      	strb	r3, [r7, #3]
	if(control->sched == num) {
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80012b4:	78fa      	ldrb	r2, [r7, #3]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d104      	bne.n	80012c4 <control_sched_done+0x22>
		control->sched = CONTROL_SCHED_NOTHING;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2200      	movs	r2, #0
 80012be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	} else {
		init_error(control);
	}
}
 80012c2:	e002      	b.n	80012ca <control_sched_done+0x28>
		init_error(control);
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f7ff ff33 	bl	8001130 <init_error>
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <control_sched_set>:

static void control_sched_set(CONTROL_INST_t * control, CONTROL_SCHED_t num) {
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	460b      	mov	r3, r1
 80012de:	70fb      	strb	r3, [r7, #3]
	if(num == CONTROL_SCHED_ABORT) { //ABORT ALWAYS TAKES OVER
 80012e0:	78fb      	ldrb	r3, [r7, #3]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d103      	bne.n	80012ee <control_sched_set+0x1a>
		control->sched = num;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	78fa      	ldrb	r2, [r7, #3]
 80012ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	}
	if(control->sched == CONTROL_SCHED_NOTHING) {
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d11c      	bne.n	8001332 <control_sched_set+0x5e>
		for(uint8_t i = 0; i < SCHED_ALLOWED_WIDTH; i++) {
 80012f8:	2300      	movs	r3, #0
 80012fa:	73fb      	strb	r3, [r7, #15]
 80012fc:	e016      	b.n	800132c <control_sched_set+0x58>
			if(sched_allowed[control->state][i] == num) {
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	4618      	mov	r0, r3
 8001304:	7bfa      	ldrb	r2, [r7, #15]
 8001306:	490d      	ldr	r1, [pc, #52]	; (800133c <control_sched_set+0x68>)
 8001308:	4603      	mov	r3, r0
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	4403      	add	r3, r0
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	440b      	add	r3, r1
 8001312:	4413      	add	r3, r2
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	78fa      	ldrb	r2, [r7, #3]
 8001318:	429a      	cmp	r2, r3
 800131a:	d104      	bne.n	8001326 <control_sched_set+0x52>
				control->sched = num;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	78fa      	ldrb	r2, [r7, #3]
 8001320:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				return;
 8001324:	e005      	b.n	8001332 <control_sched_set+0x5e>
		for(uint8_t i = 0; i < SCHED_ALLOWED_WIDTH; i++) {
 8001326:	7bfb      	ldrb	r3, [r7, #15]
 8001328:	3301      	adds	r3, #1
 800132a:	73fb      	strb	r3, [r7, #15]
 800132c:	7bfb      	ldrb	r3, [r7, #15]
 800132e:	2b05      	cmp	r3, #5
 8001330:	d9e5      	bls.n	80012fe <control_sched_set+0x2a>
			}
		}
	}
}
 8001332:	3714      	adds	r7, #20
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	20000000 	.word	0x20000000

08001340 <util_encode_u8>:
static inline void util_encode_u8(uint8_t * data, uint8_t value) {
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	460b      	mov	r3, r1
 800134a:	70fb      	strb	r3, [r7, #3]
	data[0] = value;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	78fa      	ldrb	r2, [r7, #3]
 8001350:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	3301      	adds	r3, #1
 8001356:	2200      	movs	r2, #0
 8001358:	701a      	strb	r2, [r3, #0]
	data[2] = 0x00;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	3302      	adds	r3, #2
 800135e:	2200      	movs	r2, #0
 8001360:	701a      	strb	r2, [r3, #0]
	data[3] = 0x00;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	3303      	adds	r3, #3
 8001366:	2200      	movs	r2, #0
 8001368:	701a      	strb	r2, [r3, #0]
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <util_encode_u16>:
static inline void util_encode_u16(uint8_t * data, uint16_t value) {
 8001376:	b480      	push	{r7}
 8001378:	b083      	sub	sp, #12
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
 800137e:	460b      	mov	r3, r1
 8001380:	807b      	strh	r3, [r7, #2]
	data[0] = value;
 8001382:	887b      	ldrh	r3, [r7, #2]
 8001384:	b2da      	uxtb	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	701a      	strb	r2, [r3, #0]
	data[1] = value>>8;
 800138a:	887b      	ldrh	r3, [r7, #2]
 800138c:	0a1b      	lsrs	r3, r3, #8
 800138e:	b29a      	uxth	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3301      	adds	r3, #1
 8001394:	b2d2      	uxtb	r2, r2
 8001396:	701a      	strb	r2, [r3, #0]
	data[2] = 0x00;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3302      	adds	r3, #2
 800139c:	2200      	movs	r2, #0
 800139e:	701a      	strb	r2, [r3, #0]
	data[3] = 0x00;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3303      	adds	r3, #3
 80013a4:	2200      	movs	r2, #0
 80013a6:	701a      	strb	r2, [r3, #0]
}
 80013a8:	bf00      	nop
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <util_encode_u32>:
static inline void util_encode_u32(uint8_t * data, uint32_t value) {
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
	data[0] = value;
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	701a      	strb	r2, [r3, #0]
	data[1] = value>>8;
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	0a1a      	lsrs	r2, r3, #8
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	3301      	adds	r3, #1
 80013ce:	b2d2      	uxtb	r2, r2
 80013d0:	701a      	strb	r2, [r3, #0]
	data[2] = value>>16;
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	0c1a      	lsrs	r2, r3, #16
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	3302      	adds	r3, #2
 80013da:	b2d2      	uxtb	r2, r2
 80013dc:	701a      	strb	r2, [r3, #0]
	data[3] = value>>24;
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	0e1a      	lsrs	r2, r3, #24
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	3303      	adds	r3, #3
 80013e6:	b2d2      	uxtb	r2, r2
 80013e8:	701a      	strb	r2, [r3, #0]
}
 80013ea:	bf00      	nop
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr

080013f6 <util_encode_i8>:
static inline void util_encode_i8(uint8_t * data, int8_t value) {
 80013f6:	b480      	push	{r7}
 80013f8:	b083      	sub	sp, #12
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
 80013fe:	460b      	mov	r3, r1
 8001400:	70fb      	strb	r3, [r7, #3]
	data[0] = value;
 8001402:	78fa      	ldrb	r2, [r7, #3]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3301      	adds	r3, #1
 800140c:	2200      	movs	r2, #0
 800140e:	701a      	strb	r2, [r3, #0]
	data[2] = 0x00;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3302      	adds	r3, #2
 8001414:	2200      	movs	r2, #0
 8001416:	701a      	strb	r2, [r3, #0]
	data[3] = 0x00;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3303      	adds	r3, #3
 800141c:	2200      	movs	r2, #0
 800141e:	701a      	strb	r2, [r3, #0]
}
 8001420:	bf00      	nop
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <util_encode_i32>:
static inline void util_encode_i32(uint8_t * data, int32_t value) {
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
	data[0] = value;
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	b2da      	uxtb	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	701a      	strb	r2, [r3, #0]
	data[1] = value>>8;
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	121a      	asrs	r2, r3, #8
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	3301      	adds	r3, #1
 8001446:	b2d2      	uxtb	r2, r2
 8001448:	701a      	strb	r2, [r3, #0]
	data[2] = value>>16;
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	141a      	asrs	r2, r3, #16
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	3302      	adds	r3, #2
 8001452:	b2d2      	uxtb	r2, r2
 8001454:	701a      	strb	r2, [r3, #0]
	data[3] = value>>24;
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	161a      	asrs	r2, r3, #24
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	3303      	adds	r3, #3
 800145e:	b2d2      	uxtb	r2, r2
 8001460:	701a      	strb	r2, [r3, #0]
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <util_decode_u32>:
static inline uint32_t util_decode_u32(uint8_t * data) {
 800146e:	b480      	push	{r7}
 8001470:	b083      	sub	sp, #12
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
	return (uint32_t) data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	461a      	mov	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3301      	adds	r3, #1
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	021b      	lsls	r3, r3, #8
 8001484:	4313      	orrs	r3, r2
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	3202      	adds	r2, #2
 800148a:	7812      	ldrb	r2, [r2, #0]
 800148c:	0412      	lsls	r2, r2, #16
 800148e:	4313      	orrs	r3, r2
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	3203      	adds	r2, #3
 8001494:	7812      	ldrb	r2, [r2, #0]
 8001496:	0612      	lsls	r2, r2, #24
 8001498:	4313      	orrs	r3, r2
}
 800149a:	4618      	mov	r0, r3
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <util_decode_i32>:
static inline int32_t util_decode_i32(uint8_t * data) {
 80014a6:	b480      	push	{r7}
 80014a8:	b083      	sub	sp, #12
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
	return (int32_t) data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	461a      	mov	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3301      	adds	r3, #1
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	021b      	lsls	r3, r3, #8
 80014bc:	431a      	orrs	r2, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	3302      	adds	r3, #2
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	041b      	lsls	r3, r3, #16
 80014c6:	431a      	orrs	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	3303      	adds	r3, #3
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	061b      	lsls	r3, r3, #24
 80014d0:	4313      	orrs	r3, r2
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
	...

080014e0 <debug_decode_fcn>:
 *	DECLARATIONS
 **********************/


//Requires an instance of type debug
SERIAL_RET_t debug_decode_fcn(void * inst, uint8_t data) {
 80014e0:	b590      	push	{r4, r7, lr}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	460b      	mov	r3, r1
 80014ea:	70fb      	strb	r3, [r7, #3]
	static uint8_t send_data[MSV2_MAX_DATA_LEN];
	static uint16_t length = 0;
	static uint16_t bin_length = 0;
	DEBUG_INST_t * debug = (DEBUG_INST_t *) inst;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	60fb      	str	r3, [r7, #12]
	MSV2_ERROR_t tmp = msv2_decode_fragment(&debug->msv2, data);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	3304      	adds	r3, #4
 80014f4:	78fa      	ldrb	r2, [r7, #3]
 80014f6:	4611      	mov	r1, r2
 80014f8:	4618      	mov	r0, r3
 80014fa:	f000 fd69 	bl	8001fd0 <msv2_decode_fragment>
 80014fe:	4603      	mov	r3, r0
 8001500:	72fb      	strb	r3, [r7, #11]

	if(tmp == MSV2_SUCCESS) {
 8001502:	7afb      	ldrb	r3, [r7, #11]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d15e      	bne.n	80015c6 <debug_decode_fcn+0xe6>
		if(debug->msv2.rx.opcode < debug_fcn_max) {
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	7a1b      	ldrb	r3, [r3, #8]
 800150c:	b29a      	uxth	r2, r3
 800150e:	4b30      	ldr	r3, [pc, #192]	; (80015d0 <debug_decode_fcn+0xf0>)
 8001510:	881b      	ldrh	r3, [r3, #0]
 8001512:	429a      	cmp	r2, r3
 8001514:	d22e      	bcs.n	8001574 <debug_decode_fcn+0x94>

			debug_fcn[debug->msv2.rx.opcode](debug->msv2.rx.data, debug->msv2.rx.length, send_data, &length);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	7a1b      	ldrb	r3, [r3, #8]
 800151a:	461a      	mov	r2, r3
 800151c:	4b2d      	ldr	r3, [pc, #180]	; (80015d4 <debug_decode_fcn+0xf4>)
 800151e:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f103 0012 	add.w	r0, r3, #18
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	89d9      	ldrh	r1, [r3, #14]
 800152c:	4b2a      	ldr	r3, [pc, #168]	; (80015d8 <debug_decode_fcn+0xf8>)
 800152e:	4a2b      	ldr	r2, [pc, #172]	; (80015dc <debug_decode_fcn+0xfc>)
 8001530:	47a0      	blx	r4
			//length is in words
			bin_length = msv2_create_frame(&debug->msv2, debug->msv2.rx.opcode, length/2, send_data);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	1d18      	adds	r0, r3, #4
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	7a19      	ldrb	r1, [r3, #8]
 800153a:	4b27      	ldr	r3, [pc, #156]	; (80015d8 <debug_decode_fcn+0xf8>)
 800153c:	881b      	ldrh	r3, [r3, #0]
 800153e:	085b      	lsrs	r3, r3, #1
 8001540:	b29b      	uxth	r3, r3
 8001542:	b2da      	uxtb	r2, r3
 8001544:	4b25      	ldr	r3, [pc, #148]	; (80015dc <debug_decode_fcn+0xfc>)
 8001546:	f000 fc5d 	bl	8001e04 <msv2_create_frame>
 800154a:	4603      	mov	r3, r0
 800154c:	461a      	mov	r2, r3
 800154e:	4b24      	ldr	r3, [pc, #144]	; (80015e0 <debug_decode_fcn+0x100>)
 8001550:	801a      	strh	r2, [r3, #0]
			serial_send(&debug->ser, msv2_tx_data(&debug->msv2), bin_length);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	f503 5480 	add.w	r4, r3, #4096	; 0x1000
 8001558:	3418      	adds	r4, #24
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	3304      	adds	r3, #4
 800155e:	4618      	mov	r0, r3
 8001560:	f000 fe2a 	bl	80021b8 <msv2_tx_data>
 8001564:	4601      	mov	r1, r0
 8001566:	4b1e      	ldr	r3, [pc, #120]	; (80015e0 <debug_decode_fcn+0x100>)
 8001568:	881b      	ldrh	r3, [r3, #0]
 800156a:	461a      	mov	r2, r3
 800156c:	4620      	mov	r0, r4
 800156e:	f000 ff49 	bl	8002404 <serial_send>
 8001572:	e028      	b.n	80015c6 <debug_decode_fcn+0xe6>
		} else {
			send_data[0] = CRC_ERROR_LO;
 8001574:	4b19      	ldr	r3, [pc, #100]	; (80015dc <debug_decode_fcn+0xfc>)
 8001576:	22be      	movs	r2, #190	; 0xbe
 8001578:	701a      	strb	r2, [r3, #0]
			send_data[1] = CRC_ERROR_HI;
 800157a:	4b18      	ldr	r3, [pc, #96]	; (80015dc <debug_decode_fcn+0xfc>)
 800157c:	22eb      	movs	r2, #235	; 0xeb
 800157e:	705a      	strb	r2, [r3, #1]
			length = 2;
 8001580:	4b15      	ldr	r3, [pc, #84]	; (80015d8 <debug_decode_fcn+0xf8>)
 8001582:	2202      	movs	r2, #2
 8001584:	801a      	strh	r2, [r3, #0]
			bin_length = msv2_create_frame(&debug->msv2, debug->msv2.rx.opcode, length/2, send_data);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	1d18      	adds	r0, r3, #4
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	7a19      	ldrb	r1, [r3, #8]
 800158e:	4b12      	ldr	r3, [pc, #72]	; (80015d8 <debug_decode_fcn+0xf8>)
 8001590:	881b      	ldrh	r3, [r3, #0]
 8001592:	085b      	lsrs	r3, r3, #1
 8001594:	b29b      	uxth	r3, r3
 8001596:	b2da      	uxtb	r2, r3
 8001598:	4b10      	ldr	r3, [pc, #64]	; (80015dc <debug_decode_fcn+0xfc>)
 800159a:	f000 fc33 	bl	8001e04 <msv2_create_frame>
 800159e:	4603      	mov	r3, r0
 80015a0:	461a      	mov	r2, r3
 80015a2:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <debug_decode_fcn+0x100>)
 80015a4:	801a      	strh	r2, [r3, #0]
			serial_send(&debug->ser, msv2_tx_data(&debug->msv2), bin_length);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	f503 5480 	add.w	r4, r3, #4096	; 0x1000
 80015ac:	3418      	adds	r4, #24
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	3304      	adds	r3, #4
 80015b2:	4618      	mov	r0, r3
 80015b4:	f000 fe00 	bl	80021b8 <msv2_tx_data>
 80015b8:	4601      	mov	r1, r0
 80015ba:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <debug_decode_fcn+0x100>)
 80015bc:	881b      	ldrh	r3, [r3, #0]
 80015be:	461a      	mov	r2, r3
 80015c0:	4620      	mov	r0, r4
 80015c2:	f000 ff1f 	bl	8002404 <serial_send>
		}
	}

	return tmp;
 80015c6:	7afb      	ldrb	r3, [r7, #11]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3714      	adds	r7, #20
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd90      	pop	{r4, r7, pc}
 80015d0:	2000005c 	.word	0x2000005c
 80015d4:	2000003c 	.word	0x2000003c
 80015d8:	20002898 	.word	0x20002898
 80015dc:	20002698 	.word	0x20002698
 80015e0:	2000289a 	.word	0x2000289a

080015e4 <debug_init>:

void debug_init(DEBUG_INST_t * debug) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
	static uint32_t id_counter = 0;
	msv2_init(&debug->msv2);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	3304      	adds	r3, #4
 80015f0:	4618      	mov	r0, r3
 80015f2:	f000 fbf3 	bl	8001ddc <msv2_init>
	serial_init(&debug->ser, &DEBUG_UART, debug, debug_decode_fcn);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f503 5080 	add.w	r0, r3, #4096	; 0x1000
 80015fc:	3018      	adds	r0, #24
 80015fe:	4b08      	ldr	r3, [pc, #32]	; (8001620 <debug_init+0x3c>)
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	4908      	ldr	r1, [pc, #32]	; (8001624 <debug_init+0x40>)
 8001604:	f000 febe 	bl	8002384 <serial_init>
	debug->id = id_counter++;
 8001608:	4b07      	ldr	r3, [pc, #28]	; (8001628 <debug_init+0x44>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	1c5a      	adds	r2, r3, #1
 800160e:	4906      	ldr	r1, [pc, #24]	; (8001628 <debug_init+0x44>)
 8001610:	600a      	str	r2, [r1, #0]
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	6013      	str	r3, [r2, #0]
}
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	080014e1 	.word	0x080014e1
 8001624:	20009ce8 	.word	0x20009ce8
 8001628:	2000289c 	.word	0x2000289c

0800162c <debug_get_status>:

static void debug_get_status(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 800162c:	b580      	push	{r7, lr}
 800162e:	b08c      	sub	sp, #48	; 0x30
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	607a      	str	r2, [r7, #4]
 8001636:	603b      	str	r3, [r7, #0]
 8001638:	460b      	mov	r3, r1
 800163a:	817b      	strh	r3, [r7, #10]
	CONTROL_STATUS_t status = control_get_status();
 800163c:	f107 0314 	add.w	r3, r7, #20
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff fddb 	bl	80011fc <control_get_status>
	util_encode_u16(resp, status.state);
 8001646:	7d3b      	ldrb	r3, [r7, #20]
 8001648:	b29b      	uxth	r3, r3
 800164a:	4619      	mov	r1, r3
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f7ff fe92 	bl	8001376 <util_encode_u16>
	util_encode_u16(resp+2, 0); //padding
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	3302      	adds	r3, #2
 8001656:	2100      	movs	r1, #0
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff fe8c 	bl	8001376 <util_encode_u16>
	util_encode_i32(resp+4, status.counter);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	3304      	adds	r3, #4
 8001662:	6a3a      	ldr	r2, [r7, #32]
 8001664:	4611      	mov	r1, r2
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff fee0 	bl	800142c <util_encode_i32>
	uint32_t memory = storage_get_used();
 800166c:	f001 fba8 	bl	8002dc0 <storage_get_used>
 8001670:	62f8      	str	r0, [r7, #44]	; 0x2c
	util_encode_u32(resp+8, memory);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	3308      	adds	r3, #8
 8001676:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff fe9b 	bl	80013b4 <util_encode_u32>
	util_encode_i32(resp+12, status.tvc_position);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	330c      	adds	r3, #12
 8001682:	69fa      	ldr	r2, [r7, #28]
 8001684:	4611      	mov	r1, r2
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff fed0 	bl	800142c <util_encode_i32>
	util_encode_u16(resp+16, status.tvc_psu_voltage);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3310      	adds	r3, #16
 8001690:	8afa      	ldrh	r2, [r7, #22]
 8001692:	4611      	mov	r1, r2
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff fe6e 	bl	8001376 <util_encode_u16>
	util_encode_u8(resp+18, status.tvc_error);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	3312      	adds	r3, #18
 800169e:	7e7a      	ldrb	r2, [r7, #25]
 80016a0:	4611      	mov	r1, r2
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff fe4c 	bl	8001340 <util_encode_u8>
	util_encode_i8(resp+19, status.tvc_temperature);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3313      	adds	r3, #19
 80016ac:	f997 2018 	ldrsb.w	r2, [r7, #24]
 80016b0:	4611      	mov	r1, r2
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff fe9f 	bl	80013f6 <util_encode_i8>
	*resp_len = 20;
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	2214      	movs	r2, #20
 80016bc:	801a      	strh	r2, [r3, #0]
}
 80016be:	bf00      	nop
 80016c0:	3730      	adds	r7, #48	; 0x30
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <debug_boot>:

static void debug_boot(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b084      	sub	sp, #16
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	60f8      	str	r0, [r7, #12]
 80016ce:	607a      	str	r2, [r7, #4]
 80016d0:	603b      	str	r3, [r7, #0]
 80016d2:	460b      	mov	r3, r1
 80016d4:	817b      	strh	r3, [r7, #10]
	control_boot();
 80016d6:	f7ff fd69 	bl	80011ac <control_boot>
	resp[0] = OK_LO;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	22c5      	movs	r2, #197	; 0xc5
 80016de:	701a      	strb	r2, [r3, #0]
	resp[1] = OK_HI;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3301      	adds	r3, #1
 80016e4:	225c      	movs	r2, #92	; 0x5c
 80016e6:	701a      	strb	r2, [r3, #0]
	*resp_len = 2;
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	2202      	movs	r2, #2
 80016ec:	801a      	strh	r2, [r3, #0]
}
 80016ee:	bf00      	nop
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <debug_shutdown>:


static void debug_shutdown(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b084      	sub	sp, #16
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	60f8      	str	r0, [r7, #12]
 80016fe:	607a      	str	r2, [r7, #4]
 8001700:	603b      	str	r3, [r7, #0]
 8001702:	460b      	mov	r3, r1
 8001704:	817b      	strh	r3, [r7, #10]
	control_shutdown();
 8001706:	f7ff fd5b 	bl	80011c0 <control_shutdown>
	resp[0] = OK_LO;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	22c5      	movs	r2, #197	; 0xc5
 800170e:	701a      	strb	r2, [r3, #0]
	resp[1] = OK_HI;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	3301      	adds	r3, #1
 8001714:	225c      	movs	r2, #92	; 0x5c
 8001716:	701a      	strb	r2, [r3, #0]
	*resp_len = 2;
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	2202      	movs	r2, #2
 800171c:	801a      	strh	r2, [r3, #0]
}
 800171e:	bf00      	nop
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <debug_download>:

static void debug_download(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 8001726:	b580      	push	{r7, lr}
 8001728:	b086      	sub	sp, #24
 800172a:	af00      	add	r7, sp, #0
 800172c:	60f8      	str	r0, [r7, #12]
 800172e:	607a      	str	r2, [r7, #4]
 8001730:	603b      	str	r3, [r7, #0]
 8001732:	460b      	mov	r3, r1
 8001734:	817b      	strh	r3, [r7, #10]
	//downloads 5 samples at a certain location
	if(data_len == DOWNLOAD_LEN) {
 8001736:	897b      	ldrh	r3, [r7, #10]
 8001738:	2b04      	cmp	r3, #4
 800173a:	d11b      	bne.n	8001774 <debug_download+0x4e>
		uint32_t location = util_decode_u32(data);
 800173c:	68f8      	ldr	r0, [r7, #12]
 800173e:	f7ff fe96 	bl	800146e <util_decode_u32>
 8001742:	6138      	str	r0, [r7, #16]
		for(uint8_t i = 0; i < 5; i++) {
 8001744:	2300      	movs	r3, #0
 8001746:	75fb      	strb	r3, [r7, #23]
 8001748:	e00e      	b.n	8001768 <debug_download+0x42>
			storage_get_sample(location+i, resp+i*32);
 800174a:	7dfa      	ldrb	r2, [r7, #23]
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	441a      	add	r2, r3
 8001750:	7dfb      	ldrb	r3, [r7, #23]
 8001752:	015b      	lsls	r3, r3, #5
 8001754:	4619      	mov	r1, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	440b      	add	r3, r1
 800175a:	4619      	mov	r1, r3
 800175c:	4610      	mov	r0, r2
 800175e:	f001 fb3b 	bl	8002dd8 <storage_get_sample>
		for(uint8_t i = 0; i < 5; i++) {
 8001762:	7dfb      	ldrb	r3, [r7, #23]
 8001764:	3301      	adds	r3, #1
 8001766:	75fb      	strb	r3, [r7, #23]
 8001768:	7dfb      	ldrb	r3, [r7, #23]
 800176a:	2b04      	cmp	r3, #4
 800176c:	d9ed      	bls.n	800174a <debug_download+0x24>
		}
		*resp_len = 32*5;
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	22a0      	movs	r2, #160	; 0xa0
 8001772:	801a      	strh	r2, [r3, #0]
	}
}
 8001774:	bf00      	nop
 8001776:	3718      	adds	r7, #24
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <debug_tvc_move>:

static void debug_tvc_move(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	607a      	str	r2, [r7, #4]
 8001786:	603b      	str	r3, [r7, #0]
 8001788:	460b      	mov	r3, r1
 800178a:	817b      	strh	r3, [r7, #10]
	if(data_len == TVC_MOVE_LEN) {
 800178c:	897b      	ldrh	r3, [r7, #10]
 800178e:	2b04      	cmp	r3, #4
 8001790:	d111      	bne.n	80017b6 <debug_tvc_move+0x3a>
		int32_t target = util_decode_i32(data);
 8001792:	68f8      	ldr	r0, [r7, #12]
 8001794:	f7ff fe87 	bl	80014a6 <util_decode_i32>
 8001798:	6178      	str	r0, [r7, #20]
		control_move_tvc(target);
 800179a:	6978      	ldr	r0, [r7, #20]
 800179c:	f7ff fcf4 	bl	8001188 <control_move_tvc>
		resp[0] = OK_LO;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	22c5      	movs	r2, #197	; 0xc5
 80017a4:	701a      	strb	r2, [r3, #0]
		resp[1] = OK_HI;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	3301      	adds	r3, #1
 80017aa:	225c      	movs	r2, #92	; 0x5c
 80017ac:	701a      	strb	r2, [r3, #0]
		*resp_len = 2;
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	2202      	movs	r2, #2
 80017b2:	801a      	strh	r2, [r3, #0]
	} else {
		resp[0] = ERROR_LO;
		resp[1] = ERROR_HI;
		*resp_len = 2;
	}
}
 80017b4:	e009      	b.n	80017ca <debug_tvc_move+0x4e>
		resp[0] = ERROR_LO;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	22ce      	movs	r2, #206	; 0xce
 80017ba:	701a      	strb	r2, [r3, #0]
		resp[1] = ERROR_HI;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	3301      	adds	r3, #1
 80017c0:	22ec      	movs	r2, #236	; 0xec
 80017c2:	701a      	strb	r2, [r3, #0]
		*resp_len = 2;
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	2202      	movs	r2, #2
 80017c8:	801a      	strh	r2, [r3, #0]
}
 80017ca:	bf00      	nop
 80017cc:	3718      	adds	r7, #24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <debug_abort>:

static void debug_abort(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b084      	sub	sp, #16
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	60f8      	str	r0, [r7, #12]
 80017da:	607a      	str	r2, [r7, #4]
 80017dc:	603b      	str	r3, [r7, #0]
 80017de:	460b      	mov	r3, r1
 80017e0:	817b      	strh	r3, [r7, #10]
	control_abort();
 80017e2:	f7ff fcf7 	bl	80011d4 <control_abort>
	resp[0] = OK_LO;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	22c5      	movs	r2, #197	; 0xc5
 80017ea:	701a      	strb	r2, [r3, #0]
	resp[1] = OK_HI;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3301      	adds	r3, #1
 80017f0:	225c      	movs	r2, #92	; 0x5c
 80017f2:	701a      	strb	r2, [r3, #0]
	*resp_len = 2;
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	2202      	movs	r2, #2
 80017f8:	801a      	strh	r2, [r3, #0]
}
 80017fa:	bf00      	nop
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <debug_recover>:

static void debug_recover(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 8001802:	b580      	push	{r7, lr}
 8001804:	b084      	sub	sp, #16
 8001806:	af00      	add	r7, sp, #0
 8001808:	60f8      	str	r0, [r7, #12]
 800180a:	607a      	str	r2, [r7, #4]
 800180c:	603b      	str	r3, [r7, #0]
 800180e:	460b      	mov	r3, r1
 8001810:	817b      	strh	r3, [r7, #10]
	control_recover();
 8001812:	f7ff fce9 	bl	80011e8 <control_recover>
	resp[0] = OK_LO;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	22c5      	movs	r2, #197	; 0xc5
 800181a:	701a      	strb	r2, [r3, #0]
	resp[1] = OK_HI;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3301      	adds	r3, #1
 8001820:	225c      	movs	r2, #92	; 0x5c
 8001822:	701a      	strb	r2, [r3, #0]
	*resp_len = 2;
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	2202      	movs	r2, #2
 8001828:	801a      	strh	r2, [r3, #0]
}
 800182a:	bf00      	nop
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <debug_transaction>:

static void debug_transaction(uint8_t * data, uint16_t data_len, uint8_t * resp, uint16_t * resp_len) {
 8001832:	b580      	push	{r7, lr}
 8001834:	b092      	sub	sp, #72	; 0x48
 8001836:	af00      	add	r7, sp, #0
 8001838:	60f8      	str	r0, [r7, #12]
 800183a:	607a      	str	r2, [r7, #4]
 800183c:	603b      	str	r3, [r7, #0]
 800183e:	460b      	mov	r3, r1
 8001840:	817b      	strh	r3, [r7, #10]
	if(data_len == TRANSACTION_SENS_LEN) {
 8001842:	897b      	ldrh	r3, [r7, #10]
 8001844:	2b20      	cmp	r3, #32
 8001846:	d147      	bne.n	80018d8 <debug_transaction+0xa6>
		CM4_PAYLOAD_SENSOR_t sens_data = {0};
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	2234      	movs	r2, #52	; 0x34
 800184e:	2100      	movs	r1, #0
 8001850:	4618      	mov	r0, r3
 8001852:	f009 fffb 	bl	800b84c <memset>
		sens_data.acc_x = util_decode_i32(data);
 8001856:	68f8      	ldr	r0, [r7, #12]
 8001858:	f7ff fe25 	bl	80014a6 <util_decode_i32>
 800185c:	4603      	mov	r3, r0
 800185e:	61bb      	str	r3, [r7, #24]
		sens_data.acc_y = util_decode_i32(data+4);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	3304      	adds	r3, #4
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff fe1e 	bl	80014a6 <util_decode_i32>
 800186a:	4603      	mov	r3, r0
 800186c:	61fb      	str	r3, [r7, #28]
		sens_data.acc_z = util_decode_i32(data+8);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	3308      	adds	r3, #8
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff fe17 	bl	80014a6 <util_decode_i32>
 8001878:	4603      	mov	r3, r0
 800187a:	623b      	str	r3, [r7, #32]

		sens_data.gyro_x = util_decode_i32(data+12);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	330c      	adds	r3, #12
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff fe10 	bl	80014a6 <util_decode_i32>
 8001886:	4603      	mov	r3, r0
 8001888:	627b      	str	r3, [r7, #36]	; 0x24
		sens_data.gyro_y = util_decode_i32(data+16);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	3310      	adds	r3, #16
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff fe09 	bl	80014a6 <util_decode_i32>
 8001894:	4603      	mov	r3, r0
 8001896:	62bb      	str	r3, [r7, #40]	; 0x28
		sens_data.gyro_z = util_decode_i32(data+20);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	3314      	adds	r3, #20
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff fe02 	bl	80014a6 <util_decode_i32>
 80018a2:	4603      	mov	r3, r0
 80018a4:	62fb      	str	r3, [r7, #44]	; 0x2c

		sens_data.baro = util_decode_i32(data+24);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	3318      	adds	r3, #24
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff fdfb 	bl	80014a6 <util_decode_i32>
 80018b0:	4603      	mov	r3, r0
 80018b2:	633b      	str	r3, [r7, #48]	; 0x30
		sens_data.cc_pressure = util_decode_i32(data+28);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	331c      	adds	r3, #28
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff fdf4 	bl	80014a6 <util_decode_i32>
 80018be:	4603      	mov	r3, r0
 80018c0:	637b      	str	r3, [r7, #52]	; 0x34

		resp[0] = ERROR_LO;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	22ce      	movs	r2, #206	; 0xce
 80018c6:	701a      	strb	r2, [r3, #0]
		resp[1] = ERROR_HI;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3301      	adds	r3, #1
 80018cc:	22ec      	movs	r2, #236	; 0xec
 80018ce:	701a      	strb	r2, [r3, #0]
		*resp_len = 2;
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	2202      	movs	r2, #2
 80018d4:	801a      	strh	r2, [r3, #0]
	} else {
		resp[0] = ERROR_LO;
		resp[1] = ERROR_HI;
		*resp_len = 2;
	}
}
 80018d6:	e009      	b.n	80018ec <debug_transaction+0xba>
		resp[0] = ERROR_LO;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	22ce      	movs	r2, #206	; 0xce
 80018dc:	701a      	strb	r2, [r3, #0]
		resp[1] = ERROR_HI;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	3301      	adds	r3, #1
 80018e2:	22ec      	movs	r2, #236	; 0xec
 80018e4:	701a      	strb	r2, [r3, #0]
		*resp_len = 2;
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	2202      	movs	r2, #2
 80018ea:	801a      	strh	r2, [r3, #0]
}
 80018ec:	bf00      	nop
 80018ee:	3748      	adds	r7, #72	; 0x48
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <calc_crc>:

/**********************
 *	DECLARATIONS
 **********************/

static uint16_t calc_crc(uint16_t crc_accum, uint8_t * data_blk_ptr, uint16_t data_blk_size) {
 80018f4:	b580      	push	{r7, lr}
 80018f6:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	463b      	mov	r3, r7
 80018fe:	6019      	str	r1, [r3, #0]
 8001900:	4611      	mov	r1, r2
 8001902:	1dbb      	adds	r3, r7, #6
 8001904:	4602      	mov	r2, r0
 8001906:	801a      	strh	r2, [r3, #0]
 8001908:	1d3b      	adds	r3, r7, #4
 800190a:	460a      	mov	r2, r1
 800190c:	801a      	strh	r2, [r3, #0]
    unsigned short i, j;
    unsigned short crc_table[256] = {
 800190e:	f107 030c 	add.w	r3, r7, #12
 8001912:	4a1e      	ldr	r2, [pc, #120]	; (800198c <calc_crc+0x98>)
 8001914:	4618      	mov	r0, r3
 8001916:	4611      	mov	r1, r2
 8001918:	f44f 7300 	mov.w	r3, #512	; 0x200
 800191c:	461a      	mov	r2, r3
 800191e:	f009 ff87 	bl	800b830 <memcpy>
        0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261,
        0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231,
        0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202
    };

    for(j = 0; j < data_blk_size; j++)
 8001922:	2300      	movs	r3, #0
 8001924:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 8001928:	e023      	b.n	8001972 <calc_crc+0x7e>
    {
        i = ((unsigned short)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 800192a:	1dbb      	adds	r3, r7, #6
 800192c:	881b      	ldrh	r3, [r3, #0]
 800192e:	0a1b      	lsrs	r3, r3, #8
 8001930:	b29a      	uxth	r2, r3
 8001932:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8001936:	4639      	mov	r1, r7
 8001938:	6809      	ldr	r1, [r1, #0]
 800193a:	440b      	add	r3, r1
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	b29b      	uxth	r3, r3
 8001940:	4053      	eors	r3, r2
 8001942:	b29b      	uxth	r3, r3
 8001944:	b2db      	uxtb	r3, r3
 8001946:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
        crc_accum = (crc_accum << 8) ^ crc_table[i];
 800194a:	1dbb      	adds	r3, r7, #6
 800194c:	881b      	ldrh	r3, [r3, #0]
 800194e:	021b      	lsls	r3, r3, #8
 8001950:	b21a      	sxth	r2, r3
 8001952:	f8b7 120c 	ldrh.w	r1, [r7, #524]	; 0x20c
 8001956:	f107 030c 	add.w	r3, r7, #12
 800195a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800195e:	b21b      	sxth	r3, r3
 8001960:	4053      	eors	r3, r2
 8001962:	b21a      	sxth	r2, r3
 8001964:	1dbb      	adds	r3, r7, #6
 8001966:	801a      	strh	r2, [r3, #0]
    for(j = 0; j < data_blk_size; j++)
 8001968:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 800196c:	3301      	adds	r3, #1
 800196e:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 8001972:	1d3b      	adds	r3, r7, #4
 8001974:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 8001978:	881b      	ldrh	r3, [r3, #0]
 800197a:	429a      	cmp	r2, r3
 800197c:	d3d5      	bcc.n	800192a <calc_crc+0x36>
    }

    return crc_accum;
 800197e:	1dbb      	adds	r3, r7, #6
 8001980:	881b      	ldrh	r3, [r3, #0]
}
 8001982:	4618      	mov	r0, r3
 8001984:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	0800b874 	.word	0x0800b874

08001990 <dsv2_init>:


void dsv2_init(DSV2_INST_t * dsv2) {
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
	static uint32_t id_counter = 0;
	dsv2->id = id_counter++;
 8001998:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <dsv2_init+0x24>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	1c5a      	adds	r2, r3, #1
 800199e:	4905      	ldr	r1, [pc, #20]	; (80019b4 <dsv2_init+0x24>)
 80019a0:	600a      	str	r2, [r1, #0]
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	6013      	str	r3, [r2, #0]
}
 80019a6:	bf00      	nop
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	200028a0 	.word	0x200028a0

080019b8 <dsv2_create_frame>:

uint16_t dsv2_create_frame(DSV2_INST_t * dsv2, uint8_t dev_id, uint16_t data_len, uint8_t inst, uint8_t * data) {
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	4608      	mov	r0, r1
 80019c2:	4611      	mov	r1, r2
 80019c4:	461a      	mov	r2, r3
 80019c6:	4603      	mov	r3, r0
 80019c8:	70fb      	strb	r3, [r7, #3]
 80019ca:	460b      	mov	r3, r1
 80019cc:	803b      	strh	r3, [r7, #0]
 80019ce:	4613      	mov	r3, r2
 80019d0:	70bb      	strb	r3, [r7, #2]
	dsv2->tx.data[0] = H1;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	22ff      	movs	r2, #255	; 0xff
 80019d6:	f883 2818 	strb.w	r2, [r3, #2072]	; 0x818
	dsv2->tx.data[1] = H2;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	22ff      	movs	r2, #255	; 0xff
 80019de:	f883 2819 	strb.w	r2, [r3, #2073]	; 0x819
	dsv2->tx.data[2] = H3;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	22fd      	movs	r2, #253	; 0xfd
 80019e6:	f883 281a 	strb.w	r2, [r3, #2074]	; 0x81a
	dsv2->tx.data[3] = H4;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 281b 	strb.w	r2, [r3, #2075]	; 0x81b
	dsv2->tx.data[4] = dev_id;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	78fa      	ldrb	r2, [r7, #3]
 80019f6:	f883 281c 	strb.w	r2, [r3, #2076]	; 0x81c
	dsv2->tx.data[5] = (data_len+3) & 0xff;
 80019fa:	883b      	ldrh	r3, [r7, #0]
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	3303      	adds	r3, #3
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f883 281d 	strb.w	r2, [r3, #2077]	; 0x81d
	dsv2->tx.data[6] = (data_len+3)>>8;
 8001a08:	883b      	ldrh	r3, [r7, #0]
 8001a0a:	3303      	adds	r3, #3
 8001a0c:	121b      	asrs	r3, r3, #8
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f883 281e 	strb.w	r2, [r3, #2078]	; 0x81e
	dsv2->tx.data[7] = inst;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	78ba      	ldrb	r2, [r7, #2]
 8001a1a:	f883 281f 	strb.w	r2, [r3, #2079]	; 0x81f
	uint16_t counter=8;
 8001a1e:	2308      	movs	r3, #8
 8001a20:	81fb      	strh	r3, [r7, #14]
	for(uint16_t i = 0; i < data_len; i++) {
 8001a22:	2300      	movs	r3, #0
 8001a24:	81bb      	strh	r3, [r7, #12]
 8001a26:	e00e      	b.n	8001a46 <dsv2_create_frame+0x8e>
		dsv2->tx.data[counter++] = data[i];
 8001a28:	89bb      	ldrh	r3, [r7, #12]
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	441a      	add	r2, r3
 8001a2e:	89fb      	ldrh	r3, [r7, #14]
 8001a30:	1c59      	adds	r1, r3, #1
 8001a32:	81f9      	strh	r1, [r7, #14]
 8001a34:	4619      	mov	r1, r3
 8001a36:	7812      	ldrb	r2, [r2, #0]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	440b      	add	r3, r1
 8001a3c:	f883 2818 	strb.w	r2, [r3, #2072]	; 0x818
	for(uint16_t i = 0; i < data_len; i++) {
 8001a40:	89bb      	ldrh	r3, [r7, #12]
 8001a42:	3301      	adds	r3, #1
 8001a44:	81bb      	strh	r3, [r7, #12]
 8001a46:	89ba      	ldrh	r2, [r7, #12]
 8001a48:	883b      	ldrh	r3, [r7, #0]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d3ec      	bcc.n	8001a28 <dsv2_create_frame+0x70>
	}
	uint16_t crc = calc_crc(0, dsv2->tx.data, data_len + 8);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f603 0118 	addw	r1, r3, #2072	; 0x818
 8001a54:	883b      	ldrh	r3, [r7, #0]
 8001a56:	3308      	adds	r3, #8
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	2000      	movs	r0, #0
 8001a5e:	f7ff ff49 	bl	80018f4 <calc_crc>
 8001a62:	4603      	mov	r3, r0
 8001a64:	817b      	strh	r3, [r7, #10]
	dsv2->tx.data[counter++] = crc&0xff; //crc bytes are inverted (LSB first) !!
 8001a66:	89fb      	ldrh	r3, [r7, #14]
 8001a68:	1c5a      	adds	r2, r3, #1
 8001a6a:	81fa      	strh	r2, [r7, #14]
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	897b      	ldrh	r3, [r7, #10]
 8001a70:	b2da      	uxtb	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	440b      	add	r3, r1
 8001a76:	f883 2818 	strb.w	r2, [r3, #2072]	; 0x818
	dsv2->tx.data[counter++] = crc>>8;
 8001a7a:	897b      	ldrh	r3, [r7, #10]
 8001a7c:	0a1b      	lsrs	r3, r3, #8
 8001a7e:	b29a      	uxth	r2, r3
 8001a80:	89fb      	ldrh	r3, [r7, #14]
 8001a82:	1c59      	adds	r1, r3, #1
 8001a84:	81f9      	strh	r1, [r7, #14]
 8001a86:	4619      	mov	r1, r3
 8001a88:	b2d2      	uxtb	r2, r2
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	440b      	add	r3, r1
 8001a8e:	f883 2818 	strb.w	r2, [r3, #2072]	; 0x818
	return counter;
 8001a92:	89fb      	ldrh	r3, [r7, #14]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3710      	adds	r7, #16
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <dsv2_decode_fragment>:

/*
 * 	d: received byte
 *
 */
DSV2_ERROR_t dsv2_decode_fragment(DSV2_INST_t * dsv2, uint8_t d) {
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	70fb      	strb	r3, [r7, #3]
		dsv2->rx.restart_state = DSV2_WAITING_H2;
		dsv2->rx.crc_data[0] = d;
	}
	*/

    if(dsv2->rx.state == DSV2_WAITING_H1 && d == H1) {
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	7adb      	ldrb	r3, [r3, #11]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d10b      	bne.n	8001ac8 <dsv2_decode_fragment+0x2c>
 8001ab0:	78fb      	ldrb	r3, [r7, #3]
 8001ab2:	2bff      	cmp	r3, #255	; 0xff
 8001ab4:	d108      	bne.n	8001ac8 <dsv2_decode_fragment+0x2c>
    	dsv2->rx.state = DSV2_WAITING_H2;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2201      	movs	r2, #1
 8001aba:	72da      	strb	r2, [r3, #11]
    	dsv2->rx.crc_data[0] = d;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	78fa      	ldrb	r2, [r7, #3]
 8001ac0:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    	return DSV2_PROGRESS;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e0eb      	b.n	8001ca0 <dsv2_decode_fragment+0x204>
    }
    if(dsv2->rx.state == DSV2_WAITING_H2 && d == H2) {
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	7adb      	ldrb	r3, [r3, #11]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d10b      	bne.n	8001ae8 <dsv2_decode_fragment+0x4c>
 8001ad0:	78fb      	ldrb	r3, [r7, #3]
 8001ad2:	2bff      	cmp	r3, #255	; 0xff
 8001ad4:	d108      	bne.n	8001ae8 <dsv2_decode_fragment+0x4c>
		dsv2->rx.state = DSV2_WAITING_H3;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2202      	movs	r2, #2
 8001ada:	72da      	strb	r2, [r3, #11]
		dsv2->rx.crc_data[1] = d;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	78fa      	ldrb	r2, [r7, #3]
 8001ae0:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
		return DSV2_PROGRESS;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e0db      	b.n	8001ca0 <dsv2_decode_fragment+0x204>
	}
    if(dsv2->rx.state == DSV2_WAITING_H3 && d == H3) {
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	7adb      	ldrb	r3, [r3, #11]
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d10b      	bne.n	8001b08 <dsv2_decode_fragment+0x6c>
 8001af0:	78fb      	ldrb	r3, [r7, #3]
 8001af2:	2bfd      	cmp	r3, #253	; 0xfd
 8001af4:	d108      	bne.n	8001b08 <dsv2_decode_fragment+0x6c>
		dsv2->rx.state = DSV2_WAITING_H4;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2203      	movs	r2, #3
 8001afa:	72da      	strb	r2, [r3, #11]
		dsv2->rx.crc_data[2] = d;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	78fa      	ldrb	r2, [r7, #3]
 8001b00:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
		return DSV2_PROGRESS;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e0cb      	b.n	8001ca0 <dsv2_decode_fragment+0x204>
	}
    if(dsv2->rx.state == DSV2_WAITING_H4 && d == H4) {
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	7adb      	ldrb	r3, [r3, #11]
 8001b0c:	2b03      	cmp	r3, #3
 8001b0e:	d10b      	bne.n	8001b28 <dsv2_decode_fragment+0x8c>
 8001b10:	78fb      	ldrb	r3, [r7, #3]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d108      	bne.n	8001b28 <dsv2_decode_fragment+0x8c>
		dsv2->rx.state = DSV2_WAITING_ID;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2204      	movs	r2, #4
 8001b1a:	72da      	strb	r2, [r3, #11]
		dsv2->rx.crc_data[3] = d;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	78fa      	ldrb	r2, [r7, #3]
 8001b20:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
		return DSV2_PROGRESS;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e0bb      	b.n	8001ca0 <dsv2_decode_fragment+0x204>
	}
    if(dsv2->rx.state == DSV2_WAITING_ID) {
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	7adb      	ldrb	r3, [r3, #11]
 8001b2c:	2b04      	cmp	r3, #4
 8001b2e:	d10b      	bne.n	8001b48 <dsv2_decode_fragment+0xac>
		dsv2->rx.state = DSV2_WAITING_LEN1;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2205      	movs	r2, #5
 8001b34:	72da      	strb	r2, [r3, #11]
		dsv2->rx.crc_data[4] = d;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	78fa      	ldrb	r2, [r7, #3]
 8001b3a:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
		dsv2->rx.dev_id = d;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	78fa      	ldrb	r2, [r7, #3]
 8001b42:	711a      	strb	r2, [r3, #4]
		return DSV2_PROGRESS;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e0ab      	b.n	8001ca0 <dsv2_decode_fragment+0x204>
	}
    if(dsv2->rx.state == DSV2_WAITING_LEN1) {
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	7adb      	ldrb	r3, [r3, #11]
 8001b4c:	2b05      	cmp	r3, #5
 8001b4e:	d10c      	bne.n	8001b6a <dsv2_decode_fragment+0xce>
		dsv2->rx.state = DSV2_WAITING_LEN2;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2206      	movs	r2, #6
 8001b54:	72da      	strb	r2, [r3, #11]
		dsv2->rx.crc_data[5] = d;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	78fa      	ldrb	r2, [r7, #3]
 8001b5a:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
		dsv2->rx.data_len = d;
 8001b5e:	78fb      	ldrb	r3, [r7, #3]
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	80da      	strh	r2, [r3, #6]
		return DSV2_PROGRESS;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e09a      	b.n	8001ca0 <dsv2_decode_fragment+0x204>
	}
    if(dsv2->rx.state == DSV2_WAITING_LEN2) {
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	7adb      	ldrb	r3, [r3, #11]
 8001b6e:	2b06      	cmp	r3, #6
 8001b70:	d113      	bne.n	8001b9a <dsv2_decode_fragment+0xfe>
		dsv2->rx.state = DSV2_WAITING_INST;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2207      	movs	r2, #7
 8001b76:	72da      	strb	r2, [r3, #11]
		dsv2->rx.crc_data[6] = d;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	78fa      	ldrb	r2, [r7, #3]
 8001b7c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
		dsv2->rx.data_len |= d<<8;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	88db      	ldrh	r3, [r3, #6]
 8001b84:	b21a      	sxth	r2, r3
 8001b86:	78fb      	ldrb	r3, [r7, #3]
 8001b88:	021b      	lsls	r3, r3, #8
 8001b8a:	b21b      	sxth	r3, r3
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	b21b      	sxth	r3, r3
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	80da      	strh	r2, [r3, #6]
		return DSV2_PROGRESS;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e082      	b.n	8001ca0 <dsv2_decode_fragment+0x204>
	}
    if(dsv2->rx.state == DSV2_WAITING_INST) {
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	7adb      	ldrb	r3, [r3, #11]
 8001b9e:	2b07      	cmp	r3, #7
 8001ba0:	d115      	bne.n	8001bce <dsv2_decode_fragment+0x132>
		dsv2->rx.state = DSV2_WAITING_DATA;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2208      	movs	r2, #8
 8001ba6:	72da      	strb	r2, [r3, #11]
		dsv2->rx.counter = 0;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	821a      	strh	r2, [r3, #16]
		dsv2->rx.crc_data[7] = d;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	78fa      	ldrb	r2, [r7, #3]
 8001bb2:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
		dsv2->rx.inst = d;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	78fa      	ldrb	r2, [r7, #3]
 8001bba:	729a      	strb	r2, [r3, #10]
		if(dsv2->rx.inst != 85) {
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	7a9b      	ldrb	r3, [r3, #10]
 8001bc0:	2b55      	cmp	r3, #85	; 0x55
 8001bc2:	d002      	beq.n	8001bca <dsv2_decode_fragment+0x12e>
			dsv2->rx.state = DSV2_WAITING_H1;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	72da      	strb	r2, [r3, #11]
		}
		return DSV2_PROGRESS;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e068      	b.n	8001ca0 <dsv2_decode_fragment+0x204>
	}
	if(dsv2->rx.state == DSV2_WAITING_DATA) {
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	7adb      	ldrb	r3, [r3, #11]
 8001bd2:	2b08      	cmp	r3, #8
 8001bd4:	d11f      	bne.n	8001c16 <dsv2_decode_fragment+0x17a>
		dsv2->rx.crc_data[dsv2->rx.counter + 8] = d;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	8a1b      	ldrh	r3, [r3, #16]
 8001bda:	3308      	adds	r3, #8
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	4413      	add	r3, r2
 8001be0:	78fa      	ldrb	r2, [r7, #3]
 8001be2:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
		dsv2->rx.data[dsv2->rx.counter++] = d;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	8a1b      	ldrh	r3, [r3, #16]
 8001bea:	1c5a      	adds	r2, r3, #1
 8001bec:	b291      	uxth	r1, r2
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	8211      	strh	r1, [r2, #16]
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	78fa      	ldrb	r2, [r7, #3]
 8001bfa:	749a      	strb	r2, [r3, #18]
		if(dsv2->rx.counter == dsv2->rx.data_len-3) {  //DATA LENGTH CONTAINS INST, ERR AND CRC
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	8a1b      	ldrh	r3, [r3, #16]
 8001c00:	461a      	mov	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	88db      	ldrh	r3, [r3, #6]
 8001c06:	3b03      	subs	r3, #3
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d102      	bne.n	8001c12 <dsv2_decode_fragment+0x176>
			dsv2->rx.state = DSV2_WAITING_CRC1;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2209      	movs	r2, #9
 8001c10:	72da      	strb	r2, [r3, #11]
		}
		return DSV2_PROGRESS;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e044      	b.n	8001ca0 <dsv2_decode_fragment+0x204>
	}
	if(dsv2->rx.state == DSV2_WAITING_CRC1) {
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	7adb      	ldrb	r3, [r3, #11]
 8001c1a:	2b09      	cmp	r3, #9
 8001c1c:	d108      	bne.n	8001c30 <dsv2_decode_fragment+0x194>
		dsv2->rx.state = DSV2_WAITING_CRC2;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	220a      	movs	r2, #10
 8001c22:	72da      	strb	r2, [r3, #11]
		dsv2->rx.crc = d;
 8001c24:	78fb      	ldrb	r3, [r7, #3]
 8001c26:	b29a      	uxth	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	811a      	strh	r2, [r3, #8]
		return DSV2_PROGRESS;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e037      	b.n	8001ca0 <dsv2_decode_fragment+0x204>
	}
	if(dsv2->rx.state == DSV2_WAITING_CRC2) {
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	7adb      	ldrb	r3, [r3, #11]
 8001c34:	2b0a      	cmp	r3, #10
 8001c36:	d12c      	bne.n	8001c92 <dsv2_decode_fragment+0x1f6>
		dsv2->rx.state = DSV2_WAITING_H1;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	72da      	strb	r2, [r3, #11]
		dsv2->rx.crc |= d<<8;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	891b      	ldrh	r3, [r3, #8]
 8001c42:	b21a      	sxth	r2, r3
 8001c44:	78fb      	ldrb	r3, [r7, #3]
 8001c46:	021b      	lsls	r3, r3, #8
 8001c48:	b21b      	sxth	r3, r3
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	b21b      	sxth	r3, r3
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	811a      	strh	r2, [r3, #8]

		uint16_t crc = calc_crc(0, dsv2->rx.crc_data, dsv2->rx.data_len + 5);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f203 4112 	addw	r1, r3, #1042	; 0x412
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	88db      	ldrh	r3, [r3, #6]
 8001c5e:	3305      	adds	r3, #5
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	461a      	mov	r2, r3
 8001c64:	2000      	movs	r0, #0
 8001c66:	f7ff fe45 	bl	80018f4 <calc_crc>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	81fb      	strh	r3, [r7, #14]
		dsv2->rx.counter = 0;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	821a      	strh	r2, [r3, #16]

		if(dsv2->rx.inst == 85) {
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	7a9b      	ldrb	r3, [r3, #10]
 8001c78:	2b55      	cmp	r3, #85	; 0x55
 8001c7a:	d108      	bne.n	8001c8e <dsv2_decode_fragment+0x1f2>
			if(crc == dsv2->rx.crc) {
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	891b      	ldrh	r3, [r3, #8]
 8001c80:	89fa      	ldrh	r2, [r7, #14]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d101      	bne.n	8001c8a <dsv2_decode_fragment+0x1ee>
				return DSV2_SUCCESS;
 8001c86:	2300      	movs	r3, #0
 8001c88:	e00a      	b.n	8001ca0 <dsv2_decode_fragment+0x204>
			}else {
				return DSV2_WRONG_CRC;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	e008      	b.n	8001ca0 <dsv2_decode_fragment+0x204>
			}
		} else {
			return DSV2_PROGRESS;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e006      	b.n	8001ca0 <dsv2_decode_fragment+0x204>




	}
	dsv2->rx.state = DSV2_WAITING_H1;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	72da      	strb	r2, [r3, #11]
	dsv2->rx.counter = 0;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	821a      	strh	r2, [r3, #16]
	return DSV2_ERROR;
 8001c9e:	2303      	movs	r3, #3
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3710      	adds	r7, #16
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <dsv2_rx_data>:

uint8_t * dsv2_rx_data(DSV2_INST_t * dsv2) {
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
	return dsv2->rx.data;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	3312      	adds	r3, #18
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <dsv2_tx_data>:

uint8_t * dsv2_tx_data(DSV2_INST_t * dsv2) {
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
	return dsv2->tx.data;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f603 0318 	addw	r3, r3, #2072	; 0x818
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
	...

08001cdc <led_init>:

/**********************
 *	DECLARATIONS
 **********************/

void led_init(void) {
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
	LED_TIM.Instance->ARR = LED_MAX;
 8001ce0:	4b0f      	ldr	r3, [pc, #60]	; (8001d20 <led_init+0x44>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001ce8:	62da      	str	r2, [r3, #44]	; 0x2c
	LED_TIM.Instance->CCR1 = 0;
 8001cea:	4b0d      	ldr	r3, [pc, #52]	; (8001d20 <led_init+0x44>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	635a      	str	r2, [r3, #52]	; 0x34
	LED_TIM.Instance->CCR2 = 0;
 8001cf2:	4b0b      	ldr	r3, [pc, #44]	; (8001d20 <led_init+0x44>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	639a      	str	r2, [r3, #56]	; 0x38
	LED_TIM.Instance->CCR3 = 0;
 8001cfa:	4b09      	ldr	r3, [pc, #36]	; (8001d20 <led_init+0x44>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIMEx_PWMN_Start(&LED_TIM, TIM_CHANNEL_1);
 8001d02:	2100      	movs	r1, #0
 8001d04:	4806      	ldr	r0, [pc, #24]	; (8001d20 <led_init+0x44>)
 8001d06:	f006 f961 	bl	8007fcc <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&LED_TIM, TIM_CHANNEL_2);
 8001d0a:	2104      	movs	r1, #4
 8001d0c:	4804      	ldr	r0, [pc, #16]	; (8001d20 <led_init+0x44>)
 8001d0e:	f006 f95d 	bl	8007fcc <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&LED_TIM, TIM_CHANNEL_3);
 8001d12:	2108      	movs	r1, #8
 8001d14:	4802      	ldr	r0, [pc, #8]	; (8001d20 <led_init+0x44>)
 8001d16:	f006 f959 	bl	8007fcc <HAL_TIMEx_PWMN_Start>
}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20009b68 	.word	0x20009b68

08001d24 <led_set_color>:

void led_set_color(uint8_t r, uint8_t g, uint8_t b) {
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	71fb      	strb	r3, [r7, #7]
 8001d2e:	460b      	mov	r3, r1
 8001d30:	71bb      	strb	r3, [r7, #6]
 8001d32:	4613      	mov	r3, r2
 8001d34:	717b      	strb	r3, [r7, #5]
	LED_TIM.Instance->CCR1 = r;
 8001d36:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <led_set_color+0x38>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	79fa      	ldrb	r2, [r7, #7]
 8001d3c:	635a      	str	r2, [r3, #52]	; 0x34
	LED_TIM.Instance->CCR2 = g;
 8001d3e:	4b07      	ldr	r3, [pc, #28]	; (8001d5c <led_set_color+0x38>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	79ba      	ldrb	r2, [r7, #6]
 8001d44:	639a      	str	r2, [r3, #56]	; 0x38
	LED_TIM.Instance->CCR3 = b;
 8001d46:	4b05      	ldr	r3, [pc, #20]	; (8001d5c <led_set_color+0x38>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	797a      	ldrb	r2, [r7, #5]
 8001d4c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	20009b68 	.word	0x20009b68

08001d60 <calc_field_CRC>:

/**********************
 *	DECLARATIONS
 **********************/

uint16_t calc_field_CRC(uint16_t *p_data_array, uint16_t length) {
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	460b      	mov	r3, r1
 8001d6a:	807b      	strh	r3, [r7, #2]
	uint16_t shifter, c;
	uint16_t carry;
	uint16_t crc = 0;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	81bb      	strh	r3, [r7, #12]
	while (length--) {
 8001d70:	e028      	b.n	8001dc4 <calc_field_CRC+0x64>
		shifter = 0x8000;
 8001d72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d76:	81fb      	strh	r3, [r7, #14]
		c = *p_data_array++;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	1c9a      	adds	r2, r3, #2
 8001d7c:	607a      	str	r2, [r7, #4]
 8001d7e:	881b      	ldrh	r3, [r3, #0]
 8001d80:	817b      	strh	r3, [r7, #10]
		do {
			carry = crc & 0x8000;
 8001d82:	89bb      	ldrh	r3, [r7, #12]
 8001d84:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001d88:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001d8c:	813b      	strh	r3, [r7, #8]
			crc <<= 1;
 8001d8e:	89bb      	ldrh	r3, [r7, #12]
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	81bb      	strh	r3, [r7, #12]
			if (c & shifter) crc++;
 8001d94:	897a      	ldrh	r2, [r7, #10]
 8001d96:	89fb      	ldrh	r3, [r7, #14]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d002      	beq.n	8001da6 <calc_field_CRC+0x46>
 8001da0:	89bb      	ldrh	r3, [r7, #12]
 8001da2:	3301      	adds	r3, #1
 8001da4:	81bb      	strh	r3, [r7, #12]
			if (carry) crc ^= 0x1021;
 8001da6:	893b      	ldrh	r3, [r7, #8]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d005      	beq.n	8001db8 <calc_field_CRC+0x58>
 8001dac:	89bb      	ldrh	r3, [r7, #12]
 8001dae:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8001db2:	f083 0301 	eor.w	r3, r3, #1
 8001db6:	81bb      	strh	r3, [r7, #12]
			shifter >>= 1;
 8001db8:	89fb      	ldrh	r3, [r7, #14]
 8001dba:	085b      	lsrs	r3, r3, #1
 8001dbc:	81fb      	strh	r3, [r7, #14]

		} while (shifter);
 8001dbe:	89fb      	ldrh	r3, [r7, #14]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1de      	bne.n	8001d82 <calc_field_CRC+0x22>
	while (length--) {
 8001dc4:	887b      	ldrh	r3, [r7, #2]
 8001dc6:	1e5a      	subs	r2, r3, #1
 8001dc8:	807a      	strh	r2, [r7, #2]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1d1      	bne.n	8001d72 <calc_field_CRC+0x12>

	}
	return crc;
 8001dce:	89bb      	ldrh	r3, [r7, #12]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3714      	adds	r7, #20
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <msv2_init>:

void msv2_init(MSV2_INST_t * msv2) {
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
	static uint32_t id_counter = 0;
	msv2->id = id_counter++;
 8001de4:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <msv2_init+0x24>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	1c5a      	adds	r2, r3, #1
 8001dea:	4905      	ldr	r1, [pc, #20]	; (8001e00 <msv2_init+0x24>)
 8001dec:	600a      	str	r2, [r1, #0]
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	6013      	str	r3, [r2, #0]
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	200028a4 	.word	0x200028a4

08001e04 <msv2_create_frame>:

uint16_t msv2_create_frame(MSV2_INST_t * msv2, uint8_t opcode, uint8_t data_len, uint8_t * data) {
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	607b      	str	r3, [r7, #4]
 8001e0e:	460b      	mov	r3, r1
 8001e10:	72fb      	strb	r3, [r7, #11]
 8001e12:	4613      	mov	r3, r2
 8001e14:	72bb      	strb	r3, [r7, #10]
	uint16_t array_len = data_len+2; //we add 1 for the opcode and len fields and 1 for the crc
 8001e16:	7abb      	ldrb	r3, [r7, #10]
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	3302      	adds	r3, #2
 8001e1c:	827b      	strh	r3, [r7, #18]
	msv2->tx.data_len = data_len;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	7aba      	ldrb	r2, [r7, #10]
 8001e22:	f883 280f 	strb.w	r2, [r3, #2063]	; 0x80f
	msv2->tx.opcode = opcode;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	7afa      	ldrb	r2, [r7, #11]
 8001e2a:	f883 280e 	strb.w	r2, [r3, #2062]	; 0x80e
	msv2->tx.data[0] = DLE;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2290      	movs	r2, #144	; 0x90
 8001e32:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
	msv2->tx.data[1] = STX;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2202      	movs	r2, #2
 8001e3a:	f883 2813 	strb.w	r2, [r3, #2067]	; 0x813
	msv2->tx.data[2] = opcode;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	7afa      	ldrb	r2, [r7, #11]
 8001e42:	f883 2814 	strb.w	r2, [r3, #2068]	; 0x814
	msv2->tx.data[3] = data_len;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	7aba      	ldrb	r2, [r7, #10]
 8001e4a:	f883 2815 	strb.w	r2, [r3, #2069]	; 0x815
	msv2->tx.crc_data[0] = (data_len<<8) | opcode;  //header bytes inverted
 8001e4e:	7abb      	ldrb	r3, [r7, #10]
 8001e50:	021b      	lsls	r3, r3, #8
 8001e52:	b21a      	sxth	r2, r3
 8001e54:	7afb      	ldrb	r3, [r7, #11]
 8001e56:	b21b      	sxth	r3, r3
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	b21b      	sxth	r3, r3
 8001e5c:	b29a      	uxth	r2, r3
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f8a3 2c12 	strh.w	r2, [r3, #3090]	; 0xc12
	uint16_t counter=4;
 8001e64:	2304      	movs	r3, #4
 8001e66:	82fb      	strh	r3, [r7, #22]
	for(uint16_t i = 0; i < data_len; i++) {
 8001e68:	2300      	movs	r3, #0
 8001e6a:	82bb      	strh	r3, [r7, #20]
 8001e6c:	e05b      	b.n	8001f26 <msv2_create_frame+0x122>
		msv2->tx.data[counter++] = data[2*i]; //bytes in data need to be inverted before
 8001e6e:	8abb      	ldrh	r3, [r7, #20]
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	461a      	mov	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	441a      	add	r2, r3
 8001e78:	8afb      	ldrh	r3, [r7, #22]
 8001e7a:	1c59      	adds	r1, r3, #1
 8001e7c:	82f9      	strh	r1, [r7, #22]
 8001e7e:	4619      	mov	r1, r3
 8001e80:	7812      	ldrb	r2, [r2, #0]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	440b      	add	r3, r1
 8001e86:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
		if(msv2->tx.data[counter-1] == DLE) {
 8001e8a:	8afb      	ldrh	r3, [r7, #22]
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	4413      	add	r3, r2
 8001e92:	f893 3812 	ldrb.w	r3, [r3, #2066]	; 0x812
 8001e96:	2b90      	cmp	r3, #144	; 0x90
 8001e98:	d108      	bne.n	8001eac <msv2_create_frame+0xa8>
			msv2->tx.data[counter++] = DLE;
 8001e9a:	8afb      	ldrh	r3, [r7, #22]
 8001e9c:	1c5a      	adds	r2, r3, #1
 8001e9e:	82fa      	strh	r2, [r7, #22]
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	2290      	movs	r2, #144	; 0x90
 8001ea8:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
		}
		msv2->tx.data[counter++] = data[2*i+1];
 8001eac:	8abb      	ldrh	r3, [r7, #20]
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	441a      	add	r2, r3
 8001eb6:	8afb      	ldrh	r3, [r7, #22]
 8001eb8:	1c59      	adds	r1, r3, #1
 8001eba:	82f9      	strh	r1, [r7, #22]
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	7812      	ldrb	r2, [r2, #0]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	440b      	add	r3, r1
 8001ec4:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
		if(msv2->tx.data[counter-1] == DLE) {
 8001ec8:	8afb      	ldrh	r3, [r7, #22]
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	68fa      	ldr	r2, [r7, #12]
 8001ece:	4413      	add	r3, r2
 8001ed0:	f893 3812 	ldrb.w	r3, [r3, #2066]	; 0x812
 8001ed4:	2b90      	cmp	r3, #144	; 0x90
 8001ed6:	d108      	bne.n	8001eea <msv2_create_frame+0xe6>
			msv2->tx.data[counter++] = DLE;
 8001ed8:	8afb      	ldrh	r3, [r7, #22]
 8001eda:	1c5a      	adds	r2, r3, #1
 8001edc:	82fa      	strh	r2, [r7, #22]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	2290      	movs	r2, #144	; 0x90
 8001ee6:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
		}
		msv2->tx.crc_data[i+1] = (data[2*i+1]<<8) |  data[2*i];
 8001eea:	8abb      	ldrh	r3, [r7, #20]
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	3301      	adds	r3, #1
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	021b      	lsls	r3, r3, #8
 8001ef8:	b21a      	sxth	r2, r3
 8001efa:	8abb      	ldrh	r3, [r7, #20]
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	4619      	mov	r1, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	440b      	add	r3, r1
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	b21b      	sxth	r3, r3
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	b21a      	sxth	r2, r3
 8001f0c:	8abb      	ldrh	r3, [r7, #20]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	b291      	uxth	r1, r2
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	f203 6304 	addw	r3, r3, #1540	; 0x604
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	4413      	add	r3, r2
 8001f1c:	460a      	mov	r2, r1
 8001f1e:	815a      	strh	r2, [r3, #10]
	for(uint16_t i = 0; i < data_len; i++) {
 8001f20:	8abb      	ldrh	r3, [r7, #20]
 8001f22:	3301      	adds	r3, #1
 8001f24:	82bb      	strh	r3, [r7, #20]
 8001f26:	7abb      	ldrb	r3, [r7, #10]
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	8aba      	ldrh	r2, [r7, #20]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d39e      	bcc.n	8001e6e <msv2_create_frame+0x6a>
	}
	msv2->tx.crc_data[array_len-1] = 0x0000;
 8001f30:	8a7b      	ldrh	r3, [r7, #18]
 8001f32:	3b01      	subs	r3, #1
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	f203 6304 	addw	r3, r3, #1540	; 0x604
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	4413      	add	r3, r2
 8001f3e:	2200      	movs	r2, #0
 8001f40:	815a      	strh	r2, [r3, #10]
	uint16_t crc = calc_field_CRC(msv2->tx.crc_data, array_len);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	f603 4312 	addw	r3, r3, #3090	; 0xc12
 8001f48:	8a7a      	ldrh	r2, [r7, #18]
 8001f4a:	4611      	mov	r1, r2
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff ff07 	bl	8001d60 <calc_field_CRC>
 8001f52:	4603      	mov	r3, r0
 8001f54:	823b      	strh	r3, [r7, #16]
	msv2->tx.data[counter++] = crc&0xff; //crc bytes are inverted (LSB first) !!
 8001f56:	8afb      	ldrh	r3, [r7, #22]
 8001f58:	1c5a      	adds	r2, r3, #1
 8001f5a:	82fa      	strh	r2, [r7, #22]
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	8a3b      	ldrh	r3, [r7, #16]
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	440b      	add	r3, r1
 8001f66:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
	if(msv2->tx.data[counter-1] == DLE) {
 8001f6a:	8afb      	ldrh	r3, [r7, #22]
 8001f6c:	3b01      	subs	r3, #1
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	4413      	add	r3, r2
 8001f72:	f893 3812 	ldrb.w	r3, [r3, #2066]	; 0x812
 8001f76:	2b90      	cmp	r3, #144	; 0x90
 8001f78:	d108      	bne.n	8001f8c <msv2_create_frame+0x188>
		msv2->tx.data[counter++] = DLE;
 8001f7a:	8afb      	ldrh	r3, [r7, #22]
 8001f7c:	1c5a      	adds	r2, r3, #1
 8001f7e:	82fa      	strh	r2, [r7, #22]
 8001f80:	461a      	mov	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	4413      	add	r3, r2
 8001f86:	2290      	movs	r2, #144	; 0x90
 8001f88:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
	}
	msv2->tx.data[counter++] = crc>>8;
 8001f8c:	8a3b      	ldrh	r3, [r7, #16]
 8001f8e:	0a1b      	lsrs	r3, r3, #8
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	8afb      	ldrh	r3, [r7, #22]
 8001f94:	1c59      	adds	r1, r3, #1
 8001f96:	82f9      	strh	r1, [r7, #22]
 8001f98:	4619      	mov	r1, r3
 8001f9a:	b2d2      	uxtb	r2, r2
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	440b      	add	r3, r1
 8001fa0:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
	if(msv2->tx.data[counter-1] == DLE) {
 8001fa4:	8afb      	ldrh	r3, [r7, #22]
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	4413      	add	r3, r2
 8001fac:	f893 3812 	ldrb.w	r3, [r3, #2066]	; 0x812
 8001fb0:	2b90      	cmp	r3, #144	; 0x90
 8001fb2:	d108      	bne.n	8001fc6 <msv2_create_frame+0x1c2>
		msv2->tx.data[counter++] = DLE;
 8001fb4:	8afb      	ldrh	r3, [r7, #22]
 8001fb6:	1c5a      	adds	r2, r3, #1
 8001fb8:	82fa      	strh	r2, [r7, #22]
 8001fba:	461a      	mov	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	2290      	movs	r2, #144	; 0x90
 8001fc2:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
	}
	return counter;
 8001fc6:	8afb      	ldrh	r3, [r7, #22]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3718      	adds	r7, #24
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <msv2_decode_fragment>:

/*
 * 	d: received byte
 *
 */
MSV2_ERROR_t msv2_decode_fragment(MSV2_INST_t * msv2, uint8_t d) {
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	460b      	mov	r3, r1
 8001fda:	70fb      	strb	r3, [r7, #3]
    //if a DLE in data is followed by STX, we start again
    if (msv2->rx.escape == 1 && d == STX) {
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	7a5b      	ldrb	r3, [r3, #9]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d10a      	bne.n	8001ffa <msv2_decode_fragment+0x2a>
 8001fe4:	78fb      	ldrb	r3, [r7, #3]
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d107      	bne.n	8001ffa <msv2_decode_fragment+0x2a>
    	msv2->rx.state = WAITING_OPCODE;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2202      	movs	r2, #2
 8001fee:	721a      	strb	r2, [r3, #8]
    	msv2->rx.escape = 0;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	725a      	strb	r2, [r3, #9]
        return MSV2_PROGRESS;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e0da      	b.n	80021b0 <msv2_decode_fragment+0x1e0>
    }

    if (msv2->rx.state == WAITING_DLE && d == DLE) {
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	7a1b      	ldrb	r3, [r3, #8]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d107      	bne.n	8002012 <msv2_decode_fragment+0x42>
 8002002:	78fb      	ldrb	r3, [r7, #3]
 8002004:	2b90      	cmp	r3, #144	; 0x90
 8002006:	d104      	bne.n	8002012 <msv2_decode_fragment+0x42>
    	msv2->rx.state = WAITING_STX;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	721a      	strb	r2, [r3, #8]
        return MSV2_PROGRESS;
 800200e:	2301      	movs	r3, #1
 8002010:	e0ce      	b.n	80021b0 <msv2_decode_fragment+0x1e0>
    }
    //escape in case a DLE is in the data
    if (d == DLE && msv2->rx.escape == 0) {
 8002012:	78fb      	ldrb	r3, [r7, #3]
 8002014:	2b90      	cmp	r3, #144	; 0x90
 8002016:	d108      	bne.n	800202a <msv2_decode_fragment+0x5a>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	7a5b      	ldrb	r3, [r3, #9]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d104      	bne.n	800202a <msv2_decode_fragment+0x5a>
    	msv2->rx.escape = 1;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	725a      	strb	r2, [r3, #9]
        return MSV2_PROGRESS;
 8002026:	2301      	movs	r3, #1
 8002028:	e0c2      	b.n	80021b0 <msv2_decode_fragment+0x1e0>
    }
    //if it is doubled, it counts as data
    if (d == DLE && msv2->rx.escape == 1) {
 800202a:	78fb      	ldrb	r3, [r7, #3]
 800202c:	2b90      	cmp	r3, #144	; 0x90
 800202e:	d106      	bne.n	800203e <msv2_decode_fragment+0x6e>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	7a5b      	ldrb	r3, [r3, #9]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d102      	bne.n	800203e <msv2_decode_fragment+0x6e>
    	msv2->rx.escape = 0;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	725a      	strb	r2, [r3, #9]

    }

    if (msv2->rx.state == WAITING_STX && d == STX) {
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	7a1b      	ldrb	r3, [r3, #8]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d107      	bne.n	8002056 <msv2_decode_fragment+0x86>
 8002046:	78fb      	ldrb	r3, [r7, #3]
 8002048:	2b02      	cmp	r3, #2
 800204a:	d104      	bne.n	8002056 <msv2_decode_fragment+0x86>
    	msv2->rx.state = WAITING_OPCODE;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2202      	movs	r2, #2
 8002050:	721a      	strb	r2, [r3, #8]
        return MSV2_PROGRESS;
 8002052:	2301      	movs	r3, #1
 8002054:	e0ac      	b.n	80021b0 <msv2_decode_fragment+0x1e0>
    }

    if (msv2->rx.state == WAITING_OPCODE) {
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	7a1b      	ldrb	r3, [r3, #8]
 800205a:	2b02      	cmp	r3, #2
 800205c:	d107      	bne.n	800206e <msv2_decode_fragment+0x9e>
    	msv2->rx.opcode = d;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	78fa      	ldrb	r2, [r7, #3]
 8002062:	711a      	strb	r2, [r3, #4]
    	msv2->rx.state = WAITING_LEN;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2203      	movs	r2, #3
 8002068:	721a      	strb	r2, [r3, #8]
        return MSV2_PROGRESS;
 800206a:	2301      	movs	r3, #1
 800206c:	e0a0      	b.n	80021b0 <msv2_decode_fragment+0x1e0>
    }

    if (msv2->rx.state == WAITING_LEN) {
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	7a1b      	ldrb	r3, [r3, #8]
 8002072:	2b03      	cmp	r3, #3
 8002074:	d11d      	bne.n	80020b2 <msv2_decode_fragment+0xe2>
    	msv2->rx.data_len = d; //legth in words
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	78fa      	ldrb	r2, [r7, #3]
 800207a:	715a      	strb	r2, [r3, #5]
    	msv2->rx.length = 2*d; //length in bytes
 800207c:	78fb      	ldrb	r3, [r7, #3]
 800207e:	b29b      	uxth	r3, r3
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	b29a      	uxth	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	815a      	strh	r2, [r3, #10]
    	msv2->rx.crc_data[0] = (msv2->rx.data_len<<8) | msv2->rx.opcode;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	795b      	ldrb	r3, [r3, #5]
 800208c:	021b      	lsls	r3, r3, #8
 800208e:	b21a      	sxth	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	791b      	ldrb	r3, [r3, #4]
 8002094:	b21b      	sxth	r3, r3
 8002096:	4313      	orrs	r3, r2
 8002098:	b21b      	sxth	r3, r3
 800209a:	b29a      	uxth	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
    	msv2->rx.counter = 0;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	819a      	strh	r2, [r3, #12]
    	msv2->rx.state = WAITING_DATA;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2204      	movs	r2, #4
 80020ac:	721a      	strb	r2, [r3, #8]
        return MSV2_PROGRESS;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e07e      	b.n	80021b0 <msv2_decode_fragment+0x1e0>
    }

    if (msv2->rx.state == WAITING_DATA) {
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	7a1b      	ldrb	r3, [r3, #8]
 80020b6:	2b04      	cmp	r3, #4
 80020b8:	d136      	bne.n	8002128 <msv2_decode_fragment+0x158>
    	msv2->rx.data[msv2->rx.counter] = d;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	899b      	ldrh	r3, [r3, #12]
 80020be:	461a      	mov	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4413      	add	r3, r2
 80020c4:	78fa      	ldrb	r2, [r7, #3]
 80020c6:	739a      	strb	r2, [r3, #14]
    	if(msv2->rx.counter & 0x01) { //LSB == '1'
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	899b      	ldrh	r3, [r3, #12]
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d018      	beq.n	8002106 <msv2_decode_fragment+0x136>
    		msv2->rx.crc_data[msv2->rx.counter/2 + 1] = (msv2->rx.data[msv2->rx.counter - 1]) |  d<<8;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	899b      	ldrh	r3, [r3, #12]
 80020d8:	3b01      	subs	r3, #1
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	4413      	add	r3, r2
 80020de:	7b9b      	ldrb	r3, [r3, #14]
 80020e0:	b21a      	sxth	r2, r3
 80020e2:	78fb      	ldrb	r3, [r7, #3]
 80020e4:	021b      	lsls	r3, r3, #8
 80020e6:	b21b      	sxth	r3, r3
 80020e8:	4313      	orrs	r3, r2
 80020ea:	b21a      	sxth	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	899b      	ldrh	r3, [r3, #12]
 80020f0:	085b      	lsrs	r3, r3, #1
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	3301      	adds	r3, #1
 80020f6:	b291      	uxth	r1, r2
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	4413      	add	r3, r2
 8002102:	460a      	mov	r2, r1
 8002104:	80da      	strh	r2, [r3, #6]
    	}
    	msv2->rx.counter += 1;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	899b      	ldrh	r3, [r3, #12]
 800210a:	3301      	adds	r3, #1
 800210c:	b29a      	uxth	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	819a      	strh	r2, [r3, #12]
        //the length  is in WORDS, but we read BYTES
        if (msv2->rx.counter==msv2->rx.length) {
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	899a      	ldrh	r2, [r3, #12]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	895b      	ldrh	r3, [r3, #10]
 800211a:	429a      	cmp	r2, r3
 800211c:	d102      	bne.n	8002124 <msv2_decode_fragment+0x154>
        	msv2->rx.state = WAITING_CRC1;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2205      	movs	r2, #5
 8002122:	721a      	strb	r2, [r3, #8]
        }
        return MSV2_PROGRESS;
 8002124:	2301      	movs	r3, #1
 8002126:	e043      	b.n	80021b0 <msv2_decode_fragment+0x1e0>
    }

    if (msv2->rx.state == WAITING_CRC1) {
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	7a1b      	ldrb	r3, [r3, #8]
 800212c:	2b05      	cmp	r3, #5
 800212e:	d108      	bne.n	8002142 <msv2_decode_fragment+0x172>
    	msv2->rx.crc = d;
 8002130:	78fb      	ldrb	r3, [r7, #3]
 8002132:	b29a      	uxth	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	80da      	strh	r2, [r3, #6]
    	msv2->rx.state = WAITING_CRC2;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2206      	movs	r2, #6
 800213c:	721a      	strb	r2, [r3, #8]
        return MSV2_PROGRESS;
 800213e:	2301      	movs	r3, #1
 8002140:	e036      	b.n	80021b0 <msv2_decode_fragment+0x1e0>

    }

    if (msv2->rx.state == WAITING_CRC2) {
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	7a1b      	ldrb	r3, [r3, #8]
 8002146:	2b06      	cmp	r3, #6
 8002148:	d12e      	bne.n	80021a8 <msv2_decode_fragment+0x1d8>
    	msv2->rx.crc |= d<<8;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	88db      	ldrh	r3, [r3, #6]
 800214e:	b21a      	sxth	r2, r3
 8002150:	78fb      	ldrb	r3, [r7, #3]
 8002152:	021b      	lsls	r3, r3, #8
 8002154:	b21b      	sxth	r3, r3
 8002156:	4313      	orrs	r3, r2
 8002158:	b21b      	sxth	r3, r3
 800215a:	b29a      	uxth	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	80da      	strh	r2, [r3, #6]
    	msv2->rx.state = WAITING_DLE;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	721a      	strb	r2, [r3, #8]
    	msv2->rx.crc_data[msv2->rx.data_len+1] = 0;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	795b      	ldrb	r3, [r3, #5]
 800216a:	3301      	adds	r3, #1
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	4413      	add	r3, r2
 8002176:	2200      	movs	r2, #0
 8002178:	80da      	strh	r2, [r3, #6]
    	uint16_t crc = calc_field_CRC(msv2->rx.crc_data, msv2->rx.data_len+2);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f203 420e 	addw	r2, r3, #1038	; 0x40e
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	795b      	ldrb	r3, [r3, #5]
 8002184:	b29b      	uxth	r3, r3
 8002186:	3302      	adds	r3, #2
 8002188:	b29b      	uxth	r3, r3
 800218a:	4619      	mov	r1, r3
 800218c:	4610      	mov	r0, r2
 800218e:	f7ff fde7 	bl	8001d60 <calc_field_CRC>
 8002192:	4603      	mov	r3, r0
 8002194:	81fb      	strh	r3, [r7, #14]
    	if(msv2->rx.crc == crc) {
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	88db      	ldrh	r3, [r3, #6]
 800219a:	89fa      	ldrh	r2, [r7, #14]
 800219c:	429a      	cmp	r2, r3
 800219e:	d101      	bne.n	80021a4 <msv2_decode_fragment+0x1d4>
    		return MSV2_SUCCESS;
 80021a0:	2300      	movs	r3, #0
 80021a2:	e005      	b.n	80021b0 <msv2_decode_fragment+0x1e0>
    	} else {
    		return MSV2_WRONG_CRC;
 80021a4:	2302      	movs	r3, #2
 80021a6:	e003      	b.n	80021b0 <msv2_decode_fragment+0x1e0>
    	}
    }
    msv2->rx.state=WAITING_DLE;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	721a      	strb	r2, [r3, #8]
    return MSV2_PROGRESS;
 80021ae:	2301      	movs	r3, #1
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3710      	adds	r7, #16
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <msv2_tx_data>:

uint8_t * msv2_rx_data(MSV2_INST_t * msv2) {
	return msv2->rx.data;
}

uint8_t * msv2_tx_data(MSV2_INST_t * msv2) {
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
	return msv2->tx.data;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f603 0312 	addw	r3, r3, #2066	; 0x812
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr

080021d2 <util_buffer_u8_init>:
static inline void util_buffer_u8_init(UTIL_BUFFER_U8_t * bfr, uint8_t * buffer, uint16_t bfr_len) {
 80021d2:	b480      	push	{r7}
 80021d4:	b085      	sub	sp, #20
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	60f8      	str	r0, [r7, #12]
 80021da:	60b9      	str	r1, [r7, #8]
 80021dc:	4613      	mov	r3, r2
 80021de:	80fb      	strh	r3, [r7, #6]
	bfr->c_ix = 0;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2200      	movs	r2, #0
 80021e4:	801a      	strh	r2, [r3, #0]
	bfr->l_ix = 0;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2200      	movs	r2, #0
 80021ea:	805a      	strh	r2, [r3, #2]
	bfr->bfr_len = bfr_len;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	88fa      	ldrh	r2, [r7, #6]
 80021f0:	809a      	strh	r2, [r3, #4]
	bfr->buffer = buffer;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	68ba      	ldr	r2, [r7, #8]
 80021f6:	609a      	str	r2, [r3, #8]
}
 80021f8:	bf00      	nop
 80021fa:	3714      	adds	r7, #20
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <util_buffer_u8_add>:
static inline void util_buffer_u8_add(UTIL_BUFFER_U8_t * bfr, uint8_t d) {
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	460b      	mov	r3, r1
 800220e:	70fb      	strb	r3, [r7, #3]
	bfr->buffer[bfr->c_ix++] = d;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689a      	ldr	r2, [r3, #8]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	881b      	ldrh	r3, [r3, #0]
 8002218:	1c59      	adds	r1, r3, #1
 800221a:	b288      	uxth	r0, r1
 800221c:	6879      	ldr	r1, [r7, #4]
 800221e:	8008      	strh	r0, [r1, #0]
 8002220:	4413      	add	r3, r2
 8002222:	78fa      	ldrb	r2, [r7, #3]
 8002224:	701a      	strb	r2, [r3, #0]
	if(bfr->c_ix == bfr->bfr_len) bfr->c_ix = 0;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	881a      	ldrh	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	889b      	ldrh	r3, [r3, #4]
 800222e:	429a      	cmp	r2, r3
 8002230:	d102      	bne.n	8002238 <util_buffer_u8_add+0x34>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	801a      	strh	r2, [r3, #0]
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <util_buffer_u8_get>:
static inline uint8_t util_buffer_u8_get(UTIL_BUFFER_U8_t * bfr) {
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
	uint8_t tmp = bfr->buffer[bfr->l_ix++];
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689a      	ldr	r2, [r3, #8]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	885b      	ldrh	r3, [r3, #2]
 8002254:	1c59      	adds	r1, r3, #1
 8002256:	b288      	uxth	r0, r1
 8002258:	6879      	ldr	r1, [r7, #4]
 800225a:	8048      	strh	r0, [r1, #2]
 800225c:	4413      	add	r3, r2
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	73fb      	strb	r3, [r7, #15]
	if(bfr->l_ix == bfr->bfr_len) bfr->l_ix=0;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	885a      	ldrh	r2, [r3, #2]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	889b      	ldrh	r3, [r3, #4]
 800226a:	429a      	cmp	r2, r3
 800226c:	d102      	bne.n	8002274 <util_buffer_u8_get+0x30>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	805a      	strh	r2, [r3, #2]
	return tmp;
 8002274:	7bfb      	ldrb	r3, [r7, #15]
}
 8002276:	4618      	mov	r0, r3
 8002278:	3714      	adds	r7, #20
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr

08002282 <util_buffer_u8_isempty>:
static inline uint8_t util_buffer_u8_isempty(UTIL_BUFFER_U8_t * bfr) {
 8002282:	b480      	push	{r7}
 8002284:	b083      	sub	sp, #12
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
	return bfr->l_ix == bfr->c_ix;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	885a      	ldrh	r2, [r3, #2]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	881b      	ldrh	r3, [r3, #0]
 8002292:	429a      	cmp	r2, r3
 8002294:	bf0c      	ite	eq
 8002296:	2301      	moveq	r3, #1
 8002298:	2300      	movne	r3, #0
 800229a:	b2db      	uxtb	r3, r3
}
 800229c:	4618      	mov	r0, r3
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <HAL_UART_RxCpltCallback>:

/*
 * UART RX ISR
 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80022b0:	2300      	movs	r3, #0
 80022b2:	60bb      	str	r3, [r7, #8]
	for(uint16_t i = 0; i < serial_devices_count; i++) {
 80022b4:	2300      	movs	r3, #0
 80022b6:	81fb      	strh	r3, [r7, #14]
 80022b8:	e025      	b.n	8002306 <HAL_UART_RxCpltCallback+0x5e>
		if(serial_devices[i]->uart == huart) {
 80022ba:	89fb      	ldrh	r3, [r7, #14]
 80022bc:	4a1c      	ldr	r2, [pc, #112]	; (8002330 <HAL_UART_RxCpltCallback+0x88>)
 80022be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d11a      	bne.n	8002300 <HAL_UART_RxCpltCallback+0x58>
			util_buffer_u8_add(&serial_devices[i]->bfr, serial_devices[i]->dma_buffer);
 80022ca:	89fb      	ldrh	r3, [r7, #14]
 80022cc:	4a18      	ldr	r2, [pc, #96]	; (8002330 <HAL_UART_RxCpltCallback+0x88>)
 80022ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022d2:	f103 0210 	add.w	r2, r3, #16
 80022d6:	89fb      	ldrh	r3, [r7, #14]
 80022d8:	4915      	ldr	r1, [pc, #84]	; (8002330 <HAL_UART_RxCpltCallback+0x88>)
 80022da:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80022de:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 80022e2:	4619      	mov	r1, r3
 80022e4:	4610      	mov	r0, r2
 80022e6:	f7ff ff8d 	bl	8002204 <util_buffer_u8_add>
			xSemaphoreGiveFromISR( serial_rx_sem, &xHigherPriorityTaskWoken );
 80022ea:	4b12      	ldr	r3, [pc, #72]	; (8002334 <HAL_UART_RxCpltCallback+0x8c>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f107 0208 	add.w	r2, r7, #8
 80022f2:	4611      	mov	r1, r2
 80022f4:	4618      	mov	r0, r3
 80022f6:	f007 fd6d 	bl	8009dd4 <xQueueGiveFromISR>
			if(i==2) {
 80022fa:	89fb      	ldrh	r3, [r7, #14]
 80022fc:	2b02      	cmp	r3, #2
				break;
			}
			break;
 80022fe:	e007      	b.n	8002310 <HAL_UART_RxCpltCallback+0x68>
	for(uint16_t i = 0; i < serial_devices_count; i++) {
 8002300:	89fb      	ldrh	r3, [r7, #14]
 8002302:	3301      	adds	r3, #1
 8002304:	81fb      	strh	r3, [r7, #14]
 8002306:	4b0c      	ldr	r3, [pc, #48]	; (8002338 <HAL_UART_RxCpltCallback+0x90>)
 8002308:	881b      	ldrh	r3, [r3, #0]
 800230a:	89fa      	ldrh	r2, [r7, #14]
 800230c:	429a      	cmp	r2, r3
 800230e:	d3d4      	bcc.n	80022ba <HAL_UART_RxCpltCallback+0x12>
		}
	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d007      	beq.n	8002326 <HAL_UART_RxCpltCallback+0x7e>
 8002316:	4b09      	ldr	r3, [pc, #36]	; (800233c <HAL_UART_RxCpltCallback+0x94>)
 8002318:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	f3bf 8f4f 	dsb	sy
 8002322:	f3bf 8f6f 	isb	sy
}
 8002326:	bf00      	nop
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	200028a8 	.word	0x200028a8
 8002334:	200028ec 	.word	0x200028ec
 8002338:	200028e8 	.word	0x200028e8
 800233c:	e000ed04 	.word	0xe000ed04

08002340 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef * lol = huart;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	60fb      	str	r3, [r7, #12]
}
 800234c:	bf00      	nop
 800234e:	3714      	adds	r7, #20
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <serial_global_init>:



void serial_global_init(void) {
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af02      	add	r7, sp, #8
	serial_rx_sem = xSemaphoreCreateBinaryStatic( &serial_rx_sem_buffer );
 800235e:	2303      	movs	r3, #3
 8002360:	9300      	str	r3, [sp, #0]
 8002362:	4b06      	ldr	r3, [pc, #24]	; (800237c <serial_global_init+0x24>)
 8002364:	2200      	movs	r2, #0
 8002366:	2100      	movs	r1, #0
 8002368:	2001      	movs	r0, #1
 800236a:	f007 fb6d 	bl	8009a48 <xQueueGenericCreateStatic>
 800236e:	4603      	mov	r3, r0
 8002370:	4a03      	ldr	r2, [pc, #12]	; (8002380 <serial_global_init+0x28>)
 8002372:	6013      	str	r3, [r2, #0]
}
 8002374:	bf00      	nop
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	200028f0 	.word	0x200028f0
 8002380:	200028ec 	.word	0x200028ec

08002384 <serial_init>:


void serial_init(SERIAL_INST_t * ser, UART_HandleTypeDef * uart, void * inst, SERIAL_RET_t (*decode_fcn)(void *, uint8_t)) {
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
 8002390:	603b      	str	r3, [r7, #0]
	ser->id = serial_devices_count;
 8002392:	4b1a      	ldr	r3, [pc, #104]	; (80023fc <serial_init+0x78>)
 8002394:	881b      	ldrh	r3, [r3, #0]
 8002396:	461a      	mov	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	601a      	str	r2, [r3, #0]
	ser->uart = uart;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	68ba      	ldr	r2, [r7, #8]
 80023a0:	605a      	str	r2, [r3, #4]
	ser->inst = inst;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	609a      	str	r2, [r3, #8]
	ser->decode_fcn = decode_fcn;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	683a      	ldr	r2, [r7, #0]
 80023ac:	60da      	str	r2, [r3, #12]
	util_buffer_u8_init(&ser->bfr, ser->buffer, SERIAL_FIFO_LEN);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f103 0010 	add.w	r0, r3, #16
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	331c      	adds	r3, #28
 80023b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023bc:	4619      	mov	r1, r3
 80023be:	f7ff ff08 	bl	80021d2 <util_buffer_u8_init>
	if(serial_devices_count < SERIAL_MAX_INST) {
 80023c2:	4b0e      	ldr	r3, [pc, #56]	; (80023fc <serial_init+0x78>)
 80023c4:	881b      	ldrh	r3, [r3, #0]
 80023c6:	2b0f      	cmp	r3, #15
 80023c8:	d80e      	bhi.n	80023e8 <serial_init+0x64>
		HAL_UART_Receive_DMA(uart, &ser->dma_buffer, 1);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 80023d0:	2201      	movs	r2, #1
 80023d2:	4619      	mov	r1, r3
 80023d4:	68b8      	ldr	r0, [r7, #8]
 80023d6:	f006 f839 	bl	800844c <HAL_UART_Receive_DMA>
		serial_devices[serial_devices_count] = ser;
 80023da:	4b08      	ldr	r3, [pc, #32]	; (80023fc <serial_init+0x78>)
 80023dc:	881b      	ldrh	r3, [r3, #0]
 80023de:	4619      	mov	r1, r3
 80023e0:	4a07      	ldr	r2, [pc, #28]	; (8002400 <serial_init+0x7c>)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	}
	serial_devices_count++;
 80023e8:	4b04      	ldr	r3, [pc, #16]	; (80023fc <serial_init+0x78>)
 80023ea:	881b      	ldrh	r3, [r3, #0]
 80023ec:	3301      	adds	r3, #1
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	4b02      	ldr	r3, [pc, #8]	; (80023fc <serial_init+0x78>)
 80023f2:	801a      	strh	r2, [r3, #0]
}
 80023f4:	bf00      	nop
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	200028e8 	.word	0x200028e8
 8002400:	200028a8 	.word	0x200028a8

08002404 <serial_send>:

void serial_send(SERIAL_INST_t * ser, uint8_t * data, uint16_t length) {
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	4613      	mov	r3, r2
 8002410:	80fb      	strh	r3, [r7, #6]
	HAL_UART_Transmit_DMA(ser->uart, data, length);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	88fa      	ldrh	r2, [r7, #6]
 8002418:	68b9      	ldr	r1, [r7, #8]
 800241a:	4618      	mov	r0, r3
 800241c:	f005 ffaa 	bl	8008374 <HAL_UART_Transmit_DMA>
	//HAL_UART_Transmit(ser->uart, data, length, 500);
}
 8002420:	bf00      	nop
 8002422:	3710      	adds	r7, #16
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <serial_garbage_clean>:

void serial_garbage_clean(SERIAL_INST_t * ser) {
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(ser->uart, &ser->dma_buffer, 1);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6858      	ldr	r0, [r3, #4]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 800243a:	2201      	movs	r2, #1
 800243c:	4619      	mov	r1, r3
 800243e:	f006 f805 	bl	800844c <HAL_UART_Receive_DMA>
}
 8002442:	bf00      	nop
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
	...

0800244c <serial_thread>:

void serial_thread(void * arg) {
 800244c:	b5b0      	push	{r4, r5, r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]

	serial_global_init();
 8002454:	f7ff ff80 	bl	8002358 <serial_global_init>

	for(;;) {
		if( xSemaphoreTake(serial_rx_sem, 0xffff) == pdTRUE ) {
 8002458:	4b1b      	ldr	r3, [pc, #108]	; (80024c8 <serial_thread+0x7c>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002460:	4618      	mov	r0, r3
 8002462:	f007 fd45 	bl	8009ef0 <xQueueSemaphoreTake>
 8002466:	4603      	mov	r3, r0
 8002468:	2b01      	cmp	r3, #1
 800246a:	d1f5      	bne.n	8002458 <serial_thread+0xc>
			for(uint16_t i = 0; i < serial_devices_count; i++) {
 800246c:	2300      	movs	r3, #0
 800246e:	81fb      	strh	r3, [r7, #14]
 8002470:	e023      	b.n	80024ba <serial_thread+0x6e>
				while(!util_buffer_u8_isempty(&serial_devices[i]->bfr)) {
					serial_devices[i]->decode_fcn(serial_devices[i]->inst, util_buffer_u8_get(&serial_devices[i]->bfr));
 8002472:	89fb      	ldrh	r3, [r7, #14]
 8002474:	4a15      	ldr	r2, [pc, #84]	; (80024cc <serial_thread+0x80>)
 8002476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800247a:	68dc      	ldr	r4, [r3, #12]
 800247c:	89fb      	ldrh	r3, [r7, #14]
 800247e:	4a13      	ldr	r2, [pc, #76]	; (80024cc <serial_thread+0x80>)
 8002480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002484:	689d      	ldr	r5, [r3, #8]
 8002486:	89fb      	ldrh	r3, [r7, #14]
 8002488:	4a10      	ldr	r2, [pc, #64]	; (80024cc <serial_thread+0x80>)
 800248a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800248e:	3310      	adds	r3, #16
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff fed7 	bl	8002244 <util_buffer_u8_get>
 8002496:	4603      	mov	r3, r0
 8002498:	4619      	mov	r1, r3
 800249a:	4628      	mov	r0, r5
 800249c:	47a0      	blx	r4
				while(!util_buffer_u8_isempty(&serial_devices[i]->bfr)) {
 800249e:	89fb      	ldrh	r3, [r7, #14]
 80024a0:	4a0a      	ldr	r2, [pc, #40]	; (80024cc <serial_thread+0x80>)
 80024a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a6:	3310      	adds	r3, #16
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7ff feea 	bl	8002282 <util_buffer_u8_isempty>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0de      	beq.n	8002472 <serial_thread+0x26>
			for(uint16_t i = 0; i < serial_devices_count; i++) {
 80024b4:	89fb      	ldrh	r3, [r7, #14]
 80024b6:	3301      	adds	r3, #1
 80024b8:	81fb      	strh	r3, [r7, #14]
 80024ba:	4b05      	ldr	r3, [pc, #20]	; (80024d0 <serial_thread+0x84>)
 80024bc:	881b      	ldrh	r3, [r3, #0]
 80024be:	89fa      	ldrh	r2, [r7, #14]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d3ec      	bcc.n	800249e <serial_thread+0x52>
		if( xSemaphoreTake(serial_rx_sem, 0xffff) == pdTRUE ) {
 80024c4:	e7c8      	b.n	8002458 <serial_thread+0xc>
 80024c6:	bf00      	nop
 80024c8:	200028ec 	.word	0x200028ec
 80024cc:	200028a8 	.word	0x200028a8
 80024d0:	200028e8 	.word	0x200028e8

080024d4 <util_encode_u8>:
static inline void util_encode_u8(uint8_t * data, uint8_t value) {
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	460b      	mov	r3, r1
 80024de:	70fb      	strb	r3, [r7, #3]
	data[0] = value;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	78fa      	ldrb	r2, [r7, #3]
 80024e4:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	3301      	adds	r3, #1
 80024ea:	2200      	movs	r2, #0
 80024ec:	701a      	strb	r2, [r3, #0]
	data[2] = 0x00;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	3302      	adds	r3, #2
 80024f2:	2200      	movs	r2, #0
 80024f4:	701a      	strb	r2, [r3, #0]
	data[3] = 0x00;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	3303      	adds	r3, #3
 80024fa:	2200      	movs	r2, #0
 80024fc:	701a      	strb	r2, [r3, #0]
}
 80024fe:	bf00      	nop
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr

0800250a <util_encode_i32>:
static inline void util_encode_i32(uint8_t * data, int32_t value) {
 800250a:	b480      	push	{r7}
 800250c:	b083      	sub	sp, #12
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
 8002512:	6039      	str	r1, [r7, #0]
	data[0] = value;
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	b2da      	uxtb	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	701a      	strb	r2, [r3, #0]
	data[1] = value>>8;
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	121a      	asrs	r2, r3, #8
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	3301      	adds	r3, #1
 8002524:	b2d2      	uxtb	r2, r2
 8002526:	701a      	strb	r2, [r3, #0]
	data[2] = value>>16;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	141a      	asrs	r2, r3, #16
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	3302      	adds	r3, #2
 8002530:	b2d2      	uxtb	r2, r2
 8002532:	701a      	strb	r2, [r3, #0]
	data[3] = value>>24;
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	161a      	asrs	r2, r3, #24
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	3303      	adds	r3, #3
 800253c:	b2d2      	uxtb	r2, r2
 800253e:	701a      	strb	r2, [r3, #0]
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <util_decode_u8>:
static inline uint8_t util_decode_u8(uint8_t * data) {
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
	return data[0];
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	781b      	ldrb	r3, [r3, #0]
}
 8002558:	4618      	mov	r0, r3
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <util_decode_u16>:
static inline uint16_t util_decode_u16(uint8_t * data) {
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
	return (uint16_t) data[0] | data[1] << 8;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	b21a      	sxth	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	3301      	adds	r3, #1
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	021b      	lsls	r3, r3, #8
 800257a:	b21b      	sxth	r3, r3
 800257c:	4313      	orrs	r3, r2
 800257e:	b21b      	sxth	r3, r3
 8002580:	b29b      	uxth	r3, r3
}
 8002582:	4618      	mov	r0, r3
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr

0800258e <util_decode_i8>:
static inline int8_t util_decode_i8(uint8_t * data) {
 800258e:	b480      	push	{r7}
 8002590:	b083      	sub	sp, #12
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
	return data[0];
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	b25b      	sxtb	r3, r3
}
 800259c:	4618      	mov	r0, r3
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <util_decode_i32>:
static inline int32_t util_decode_i32(uint8_t * data) {
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
	return (int32_t) data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	461a      	mov	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	3301      	adds	r3, #1
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	021b      	lsls	r3, r3, #8
 80025be:	431a      	orrs	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3302      	adds	r3, #2
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	041b      	lsls	r3, r3, #16
 80025c8:	431a      	orrs	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	3303      	adds	r3, #3
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	061b      	lsls	r3, r3, #24
 80025d2:	4313      	orrs	r3, r2
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <servo_init>:
/**********************
 *	DECLARATIONS
 **********************/


void servo_init(SERVO_INST_t * servo, uint8_t dev_id) {
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af02      	add	r7, sp, #8
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	460b      	mov	r3, r1
 80025ea:	70fb      	strb	r3, [r7, #3]
	static uint32_t id_counter = 0;
	servo->id = id_counter++;
 80025ec:	4b16      	ldr	r3, [pc, #88]	; (8002648 <servo_init+0x68>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	1c5a      	adds	r2, r3, #1
 80025f2:	4915      	ldr	r1, [pc, #84]	; (8002648 <servo_init+0x68>)
 80025f4:	600a      	str	r2, [r1, #0]
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	6013      	str	r3, [r2, #0]

	servo->dev_id = dev_id;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8002600:	331c      	adds	r3, #28
 8002602:	78fa      	ldrb	r2, [r7, #3]
 8002604:	701a      	strb	r2, [r3, #0]
	servo_list[servo_count++] = servo;
 8002606:	4b11      	ldr	r3, [pc, #68]	; (800264c <servo_init+0x6c>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	1c5a      	adds	r2, r3, #1
 800260c:	b2d1      	uxtb	r1, r2
 800260e:	4a0f      	ldr	r2, [pc, #60]	; (800264c <servo_init+0x6c>)
 8002610:	7011      	strb	r1, [r2, #0]
 8002612:	4619      	mov	r1, r3
 8002614:	4a0e      	ldr	r2, [pc, #56]	; (8002650 <servo_init+0x70>)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	servo->rx_sem = xSemaphoreCreateBinaryStatic(&servo->rx_sem_buffer);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8002622:	3308      	adds	r3, #8
 8002624:	2203      	movs	r2, #3
 8002626:	9200      	str	r2, [sp, #0]
 8002628:	2200      	movs	r2, #0
 800262a:	2100      	movs	r1, #0
 800262c:	2001      	movs	r0, #1
 800262e:	f007 fa0b 	bl	8009a48 <xQueueGenericCreateStatic>
 8002632:	4602      	mov	r2, r0
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800263a:	3304      	adds	r3, #4
 800263c:	601a      	str	r2, [r3, #0]
}
 800263e:	bf00      	nop
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	20003a00 	.word	0x20003a00
 800264c:	20002978 	.word	0x20002978
 8002650:	20002938 	.word	0x20002938

08002654 <servo_global_init>:

void servo_global_init(void) {
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
	dsv2_init(&servo_dsv2);
 8002658:	4808      	ldr	r0, [pc, #32]	; (800267c <servo_global_init+0x28>)
 800265a:	f7ff f999 	bl	8001990 <dsv2_init>
	serial_init(&servo_serial, &DYNAMIXEL_UART, &servo_dsv2, servo_decode_fcn);
 800265e:	4b08      	ldr	r3, [pc, #32]	; (8002680 <servo_global_init+0x2c>)
 8002660:	4a06      	ldr	r2, [pc, #24]	; (800267c <servo_global_init+0x28>)
 8002662:	4908      	ldr	r1, [pc, #32]	; (8002684 <servo_global_init+0x30>)
 8002664:	4808      	ldr	r0, [pc, #32]	; (8002688 <servo_global_init+0x34>)
 8002666:	f7ff fe8d 	bl	8002384 <serial_init>
	servo_busy_sem = xSemaphoreCreateMutexStatic(&servo_busy_sem_buffer);
 800266a:	4908      	ldr	r1, [pc, #32]	; (800268c <servo_global_init+0x38>)
 800266c:	2001      	movs	r0, #1
 800266e:	f007 fa98 	bl	8009ba2 <xQueueCreateMutexStatic>
 8002672:	4603      	mov	r3, r0
 8002674:	4a06      	ldr	r2, [pc, #24]	; (8002690 <servo_global_init+0x3c>)
 8002676:	6013      	str	r3, [r2, #0]
}
 8002678:	bf00      	nop
 800267a:	bd80      	pop	{r7, pc}
 800267c:	20002d9c 	.word	0x20002d9c
 8002680:	08002695 	.word	0x08002695
 8002684:	20009ea8 	.word	0x20009ea8
 8002688:	2000297c 	.word	0x2000297c
 800268c:	200039b8 	.word	0x200039b8
 8002690:	200039b4 	.word	0x200039b4

08002694 <servo_decode_fcn>:

SERIAL_RET_t servo_decode_fcn(void * inst, uint8_t data) {
 8002694:	b580      	push	{r7, lr}
 8002696:	b086      	sub	sp, #24
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	460b      	mov	r3, r1
 800269e:	70fb      	strb	r3, [r7, #3]
	DSV2_INST_t * dsv2 = (DSV2_INST_t * ) inst;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	613b      	str	r3, [r7, #16]
	DSV2_ERROR_t tmp = dsv2_decode_fragment(dsv2, data);
 80026a4:	78fb      	ldrb	r3, [r7, #3]
 80026a6:	4619      	mov	r1, r3
 80026a8:	6938      	ldr	r0, [r7, #16]
 80026aa:	f7ff f9f7 	bl	8001a9c <dsv2_decode_fragment>
 80026ae:	4603      	mov	r3, r0
 80026b0:	73fb      	strb	r3, [r7, #15]
	//this should release the semaphore corresponding the the right epos board if bridged
	if(tmp == DSV2_SUCCESS || tmp == DSV2_WRONG_CRC) {
 80026b2:	7bfb      	ldrb	r3, [r7, #15]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d002      	beq.n	80026be <servo_decode_fcn+0x2a>
 80026b8:	7bfb      	ldrb	r3, [r7, #15]
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d128      	bne.n	8002710 <servo_decode_fcn+0x7c>
		if(dsv2->rx.inst == 0x55) { // ONLY HANDLE STATUS PACKETS
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	7a9b      	ldrb	r3, [r3, #10]
 80026c2:	2b55      	cmp	r3, #85	; 0x55
 80026c4:	d124      	bne.n	8002710 <servo_decode_fcn+0x7c>
			for(uint8_t i = 0; i < servo_count; i++) {
 80026c6:	2300      	movs	r3, #0
 80026c8:	75fb      	strb	r3, [r7, #23]
 80026ca:	e01c      	b.n	8002706 <servo_decode_fcn+0x72>
				if(servo_list[i]->dev_id == dsv2->rx.dev_id) {
 80026cc:	7dfb      	ldrb	r3, [r7, #23]
 80026ce:	4a13      	ldr	r2, [pc, #76]	; (800271c <servo_decode_fcn+0x88>)
 80026d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026d4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80026d8:	331c      	adds	r3, #28
 80026da:	781a      	ldrb	r2, [r3, #0]
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	791b      	ldrb	r3, [r3, #4]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d10d      	bne.n	8002700 <servo_decode_fcn+0x6c>
					xSemaphoreGive(servo_list[i]->rx_sem);
 80026e4:	7dfb      	ldrb	r3, [r7, #23]
 80026e6:	4a0d      	ldr	r2, [pc, #52]	; (800271c <servo_decode_fcn+0x88>)
 80026e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ec:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 80026f0:	3304      	adds	r3, #4
 80026f2:	6818      	ldr	r0, [r3, #0]
 80026f4:	2300      	movs	r3, #0
 80026f6:	2200      	movs	r2, #0
 80026f8:	2100      	movs	r1, #0
 80026fa:	f007 fa6d 	bl	8009bd8 <xQueueGenericSend>
					break;
 80026fe:	e007      	b.n	8002710 <servo_decode_fcn+0x7c>
			for(uint8_t i = 0; i < servo_count; i++) {
 8002700:	7dfb      	ldrb	r3, [r7, #23]
 8002702:	3301      	adds	r3, #1
 8002704:	75fb      	strb	r3, [r7, #23]
 8002706:	4b06      	ldr	r3, [pc, #24]	; (8002720 <servo_decode_fcn+0x8c>)
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	7dfa      	ldrb	r2, [r7, #23]
 800270c:	429a      	cmp	r2, r3
 800270e:	d3dd      	bcc.n	80026cc <servo_decode_fcn+0x38>
				}
			}
		}
	}
	return tmp;
 8002710:	7bfb      	ldrb	r3, [r7, #15]
}
 8002712:	4618      	mov	r0, r3
 8002714:	3718      	adds	r7, #24
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	20002938 	.word	0x20002938
 8002720:	20002978 	.word	0x20002978

08002724 <servo_read>:
/*
 * address of the object
 * length to read
 * data to read into
 */
SERVO_ERROR_t servo_read(SERVO_INST_t * servo, uint16_t address, uint16_t length, uint8_t * data, uint8_t * err) {
 8002724:	b580      	push	{r7, lr}
 8002726:	b088      	sub	sp, #32
 8002728:	af02      	add	r7, sp, #8
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	607b      	str	r3, [r7, #4]
 800272e:	460b      	mov	r3, r1
 8002730:	817b      	strh	r3, [r7, #10]
 8002732:	4613      	mov	r3, r2
 8002734:	813b      	strh	r3, [r7, #8]
	if (xSemaphoreTake(servo_busy_sem, DRIV_TIMEOUT) == pdTRUE) {
 8002736:	4b41      	ldr	r3, [pc, #260]	; (800283c <servo_read+0x118>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	21c8      	movs	r1, #200	; 0xc8
 800273c:	4618      	mov	r0, r3
 800273e:	f007 fbd7 	bl	8009ef0 <xQueueSemaphoreTake>
 8002742:	4603      	mov	r3, r0
 8002744:	2b01      	cmp	r3, #1
 8002746:	d174      	bne.n	8002832 <servo_read+0x10e>
		static uint8_t send_data[MAX_READ_LEN];
		send_data[0] = address & 0xff;
 8002748:	897b      	ldrh	r3, [r7, #10]
 800274a:	b2da      	uxtb	r2, r3
 800274c:	4b3c      	ldr	r3, [pc, #240]	; (8002840 <servo_read+0x11c>)
 800274e:	701a      	strb	r2, [r3, #0]
		send_data[1] = address>>8;
 8002750:	897b      	ldrh	r3, [r7, #10]
 8002752:	0a1b      	lsrs	r3, r3, #8
 8002754:	b29b      	uxth	r3, r3
 8002756:	b2da      	uxtb	r2, r3
 8002758:	4b39      	ldr	r3, [pc, #228]	; (8002840 <servo_read+0x11c>)
 800275a:	705a      	strb	r2, [r3, #1]
		send_data[2] = length & 0xff;
 800275c:	893b      	ldrh	r3, [r7, #8]
 800275e:	b2da      	uxtb	r2, r3
 8002760:	4b37      	ldr	r3, [pc, #220]	; (8002840 <servo_read+0x11c>)
 8002762:	709a      	strb	r2, [r3, #2]
		send_data[3] = length>>8;
 8002764:	893b      	ldrh	r3, [r7, #8]
 8002766:	0a1b      	lsrs	r3, r3, #8
 8002768:	b29b      	uxth	r3, r3
 800276a:	b2da      	uxtb	r2, r3
 800276c:	4b34      	ldr	r3, [pc, #208]	; (8002840 <servo_read+0x11c>)
 800276e:	70da      	strb	r2, [r3, #3]
		uint16_t len = dsv2_create_frame(&servo_dsv2, servo->dev_id, MAX_READ_LEN, READ_INST, send_data);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8002776:	331c      	adds	r3, #28
 8002778:	7819      	ldrb	r1, [r3, #0]
 800277a:	4b31      	ldr	r3, [pc, #196]	; (8002840 <servo_read+0x11c>)
 800277c:	9300      	str	r3, [sp, #0]
 800277e:	2302      	movs	r3, #2
 8002780:	2204      	movs	r2, #4
 8002782:	4830      	ldr	r0, [pc, #192]	; (8002844 <servo_read+0x120>)
 8002784:	f7ff f918 	bl	80019b8 <dsv2_create_frame>
 8002788:	4603      	mov	r3, r0
 800278a:	82bb      	strh	r3, [r7, #20]
		serial_send(&servo_serial, dsv2_tx_data(&servo_dsv2), len);
 800278c:	482d      	ldr	r0, [pc, #180]	; (8002844 <servo_read+0x120>)
 800278e:	f7ff fa97 	bl	8001cc0 <dsv2_tx_data>
 8002792:	4601      	mov	r1, r0
 8002794:	8abb      	ldrh	r3, [r7, #20]
 8002796:	461a      	mov	r2, r3
 8002798:	482b      	ldr	r0, [pc, #172]	; (8002848 <servo_read+0x124>)
 800279a:	f7ff fe33 	bl	8002404 <serial_send>
		if(xSemaphoreTake(servo->rx_sem, COMM_TIMEOUT) == pdTRUE) {
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 80027a4:	3304      	adds	r3, #4
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	210a      	movs	r1, #10
 80027aa:	4618      	mov	r0, r3
 80027ac:	f007 fba0 	bl	8009ef0 <xQueueSemaphoreTake>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d134      	bne.n	8002820 <servo_read+0xfc>
			uint8_t * recieved_data = dsv2_rx_data(&servo_dsv2);
 80027b6:	4823      	ldr	r0, [pc, #140]	; (8002844 <servo_read+0x120>)
 80027b8:	f7ff fa76 	bl	8001ca8 <dsv2_rx_data>
 80027bc:	6138      	str	r0, [r7, #16]
			if(err != NULL) {
 80027be:	6a3b      	ldr	r3, [r7, #32]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d003      	beq.n	80027cc <servo_read+0xa8>
				*err = recieved_data[0];
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	781a      	ldrb	r2, [r3, #0]
 80027c8:	6a3b      	ldr	r3, [r7, #32]
 80027ca:	701a      	strb	r2, [r3, #0]
			}
			for(uint8_t i = 0; i < length; i++){
 80027cc:	2300      	movs	r3, #0
 80027ce:	75fb      	strb	r3, [r7, #23]
 80027d0:	e00b      	b.n	80027ea <servo_read+0xc6>
				data[i] = recieved_data[i+1];
 80027d2:	7dfb      	ldrb	r3, [r7, #23]
 80027d4:	3301      	adds	r3, #1
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	441a      	add	r2, r3
 80027da:	7dfb      	ldrb	r3, [r7, #23]
 80027dc:	6879      	ldr	r1, [r7, #4]
 80027de:	440b      	add	r3, r1
 80027e0:	7812      	ldrb	r2, [r2, #0]
 80027e2:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 0; i < length; i++){
 80027e4:	7dfb      	ldrb	r3, [r7, #23]
 80027e6:	3301      	adds	r3, #1
 80027e8:	75fb      	strb	r3, [r7, #23]
 80027ea:	7dfb      	ldrb	r3, [r7, #23]
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	893a      	ldrh	r2, [r7, #8]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d8ee      	bhi.n	80027d2 <servo_read+0xae>
			}
			if(*err == 0) {
 80027f4:	6a3b      	ldr	r3, [r7, #32]
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d108      	bne.n	800280e <servo_read+0xea>
				xSemaphoreGive(servo_busy_sem);
 80027fc:	4b0f      	ldr	r3, [pc, #60]	; (800283c <servo_read+0x118>)
 80027fe:	6818      	ldr	r0, [r3, #0]
 8002800:	2300      	movs	r3, #0
 8002802:	2200      	movs	r2, #0
 8002804:	2100      	movs	r1, #0
 8002806:	f007 f9e7 	bl	8009bd8 <xQueueGenericSend>
				return SERVO_SUCCESS;
 800280a:	2300      	movs	r3, #0
 800280c:	e012      	b.n	8002834 <servo_read+0x110>
			} else {
				xSemaphoreGive(servo_busy_sem);
 800280e:	4b0b      	ldr	r3, [pc, #44]	; (800283c <servo_read+0x118>)
 8002810:	6818      	ldr	r0, [r3, #0]
 8002812:	2300      	movs	r3, #0
 8002814:	2200      	movs	r2, #0
 8002816:	2100      	movs	r1, #0
 8002818:	f007 f9de 	bl	8009bd8 <xQueueGenericSend>
				return SERVO_REMOTE_ERROR;
 800281c:	2302      	movs	r3, #2
 800281e:	e009      	b.n	8002834 <servo_read+0x110>
			}
		} else {
			xSemaphoreGive(servo_busy_sem);
 8002820:	4b06      	ldr	r3, [pc, #24]	; (800283c <servo_read+0x118>)
 8002822:	6818      	ldr	r0, [r3, #0]
 8002824:	2300      	movs	r3, #0
 8002826:	2200      	movs	r2, #0
 8002828:	2100      	movs	r1, #0
 800282a:	f007 f9d5 	bl	8009bd8 <xQueueGenericSend>
			return SERVO_TIMEOUT;
 800282e:	2301      	movs	r3, #1
 8002830:	e000      	b.n	8002834 <servo_read+0x110>
		}
	} else {
		return SERVO_BUSY;
 8002832:	2304      	movs	r3, #4
	}
}
 8002834:	4618      	mov	r0, r3
 8002836:	3718      	adds	r7, #24
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	200039b4 	.word	0x200039b4
 8002840:	20003a04 	.word	0x20003a04
 8002844:	20002d9c 	.word	0x20002d9c
 8002848:	2000297c 	.word	0x2000297c

0800284c <servo_write>:
/*
 * address of the object
 * length of the data to write
 * data to write
 */
SERVO_ERROR_t servo_write(SERVO_INST_t * servo, uint16_t address, uint16_t length, uint8_t * data, uint8_t * err) {
 800284c:	b580      	push	{r7, lr}
 800284e:	b088      	sub	sp, #32
 8002850:	af02      	add	r7, sp, #8
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	607b      	str	r3, [r7, #4]
 8002856:	460b      	mov	r3, r1
 8002858:	817b      	strh	r3, [r7, #10]
 800285a:	4613      	mov	r3, r2
 800285c:	813b      	strh	r3, [r7, #8]
	if (xSemaphoreTake(servo_busy_sem, DRIV_TIMEOUT) == pdTRUE) {
 800285e:	4b3c      	ldr	r3, [pc, #240]	; (8002950 <servo_write+0x104>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	21c8      	movs	r1, #200	; 0xc8
 8002864:	4618      	mov	r0, r3
 8002866:	f007 fb43 	bl	8009ef0 <xQueueSemaphoreTake>
 800286a:	4603      	mov	r3, r0
 800286c:	2b01      	cmp	r3, #1
 800286e:	d16a      	bne.n	8002946 <servo_write+0xfa>
		static uint8_t send_data[MAX_WRITE_LEN];
		send_data[0] = address & 0xff;
 8002870:	897b      	ldrh	r3, [r7, #10]
 8002872:	b2da      	uxtb	r2, r3
 8002874:	4b37      	ldr	r3, [pc, #220]	; (8002954 <servo_write+0x108>)
 8002876:	701a      	strb	r2, [r3, #0]
		send_data[1] = address>>8;
 8002878:	897b      	ldrh	r3, [r7, #10]
 800287a:	0a1b      	lsrs	r3, r3, #8
 800287c:	b29b      	uxth	r3, r3
 800287e:	b2da      	uxtb	r2, r3
 8002880:	4b34      	ldr	r3, [pc, #208]	; (8002954 <servo_write+0x108>)
 8002882:	705a      	strb	r2, [r3, #1]
		for(uint16_t i = 0; i < length; i++) {
 8002884:	2300      	movs	r3, #0
 8002886:	82fb      	strh	r3, [r7, #22]
 8002888:	e00a      	b.n	80028a0 <servo_write+0x54>
			send_data[2 + i] = data[i];
 800288a:	8afb      	ldrh	r3, [r7, #22]
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	441a      	add	r2, r3
 8002890:	8afb      	ldrh	r3, [r7, #22]
 8002892:	3302      	adds	r3, #2
 8002894:	7811      	ldrb	r1, [r2, #0]
 8002896:	4a2f      	ldr	r2, [pc, #188]	; (8002954 <servo_write+0x108>)
 8002898:	54d1      	strb	r1, [r2, r3]
		for(uint16_t i = 0; i < length; i++) {
 800289a:	8afb      	ldrh	r3, [r7, #22]
 800289c:	3301      	adds	r3, #1
 800289e:	82fb      	strh	r3, [r7, #22]
 80028a0:	8afa      	ldrh	r2, [r7, #22]
 80028a2:	893b      	ldrh	r3, [r7, #8]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d3f0      	bcc.n	800288a <servo_write+0x3e>
		}
		uint16_t len = dsv2_create_frame(&servo_dsv2, servo->dev_id, length+2, WRITE_INST, send_data);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80028ae:	331c      	adds	r3, #28
 80028b0:	7819      	ldrb	r1, [r3, #0]
 80028b2:	893b      	ldrh	r3, [r7, #8]
 80028b4:	3302      	adds	r3, #2
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	4b26      	ldr	r3, [pc, #152]	; (8002954 <servo_write+0x108>)
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	2303      	movs	r3, #3
 80028be:	4826      	ldr	r0, [pc, #152]	; (8002958 <servo_write+0x10c>)
 80028c0:	f7ff f87a 	bl	80019b8 <dsv2_create_frame>
 80028c4:	4603      	mov	r3, r0
 80028c6:	82bb      	strh	r3, [r7, #20]
		serial_send(&servo_serial, dsv2_tx_data(&servo_dsv2), len);
 80028c8:	4823      	ldr	r0, [pc, #140]	; (8002958 <servo_write+0x10c>)
 80028ca:	f7ff f9f9 	bl	8001cc0 <dsv2_tx_data>
 80028ce:	4601      	mov	r1, r0
 80028d0:	8abb      	ldrh	r3, [r7, #20]
 80028d2:	461a      	mov	r2, r3
 80028d4:	4821      	ldr	r0, [pc, #132]	; (800295c <servo_write+0x110>)
 80028d6:	f7ff fd95 	bl	8002404 <serial_send>
		if(xSemaphoreTake(servo->rx_sem, COMM_TIMEOUT) == pdTRUE) {
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 80028e0:	3304      	adds	r3, #4
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	210a      	movs	r1, #10
 80028e6:	4618      	mov	r0, r3
 80028e8:	f007 fb02 	bl	8009ef0 <xQueueSemaphoreTake>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d120      	bne.n	8002934 <servo_write+0xe8>
			uint8_t * recieved_data = dsv2_rx_data(&servo_dsv2);
 80028f2:	4819      	ldr	r0, [pc, #100]	; (8002958 <servo_write+0x10c>)
 80028f4:	f7ff f9d8 	bl	8001ca8 <dsv2_rx_data>
 80028f8:	6138      	str	r0, [r7, #16]
			if(err != NULL) {
 80028fa:	6a3b      	ldr	r3, [r7, #32]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d003      	beq.n	8002908 <servo_write+0xbc>
				*err = recieved_data[0];
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	781a      	ldrb	r2, [r3, #0]
 8002904:	6a3b      	ldr	r3, [r7, #32]
 8002906:	701a      	strb	r2, [r3, #0]
			}
			if(*err == 0) {
 8002908:	6a3b      	ldr	r3, [r7, #32]
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d108      	bne.n	8002922 <servo_write+0xd6>
				xSemaphoreGive(servo_busy_sem);
 8002910:	4b0f      	ldr	r3, [pc, #60]	; (8002950 <servo_write+0x104>)
 8002912:	6818      	ldr	r0, [r3, #0]
 8002914:	2300      	movs	r3, #0
 8002916:	2200      	movs	r2, #0
 8002918:	2100      	movs	r1, #0
 800291a:	f007 f95d 	bl	8009bd8 <xQueueGenericSend>
				return SERVO_SUCCESS;
 800291e:	2300      	movs	r3, #0
 8002920:	e012      	b.n	8002948 <servo_write+0xfc>
			} else {
				xSemaphoreGive(servo_busy_sem);
 8002922:	4b0b      	ldr	r3, [pc, #44]	; (8002950 <servo_write+0x104>)
 8002924:	6818      	ldr	r0, [r3, #0]
 8002926:	2300      	movs	r3, #0
 8002928:	2200      	movs	r2, #0
 800292a:	2100      	movs	r1, #0
 800292c:	f007 f954 	bl	8009bd8 <xQueueGenericSend>
				return SERVO_REMOTE_ERROR;
 8002930:	2302      	movs	r3, #2
 8002932:	e009      	b.n	8002948 <servo_write+0xfc>
			}
		} else {
			xSemaphoreGive(servo_busy_sem);
 8002934:	4b06      	ldr	r3, [pc, #24]	; (8002950 <servo_write+0x104>)
 8002936:	6818      	ldr	r0, [r3, #0]
 8002938:	2300      	movs	r3, #0
 800293a:	2200      	movs	r2, #0
 800293c:	2100      	movs	r1, #0
 800293e:	f007 f94b 	bl	8009bd8 <xQueueGenericSend>
			return SERVO_TIMEOUT;
 8002942:	2301      	movs	r3, #1
 8002944:	e000      	b.n	8002948 <servo_write+0xfc>
		}
	} else {
		return SERVO_BUSY;
 8002946:	2304      	movs	r3, #4
	}
}
 8002948:	4618      	mov	r0, r3
 800294a:	3718      	adds	r7, #24
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	200039b4 	.word	0x200039b4
 8002954:	20003a08 	.word	0x20003a08
 8002958:	20002d9c 	.word	0x20002d9c
 800295c:	2000297c 	.word	0x2000297c

08002960 <servo_write_u8>:
		return SERVO_BUSY;
	}
}


SERVO_ERROR_t servo_write_u8(SERVO_INST_t * servo, uint16_t address, uint8_t data, uint8_t * err) {
 8002960:	b580      	push	{r7, lr}
 8002962:	b088      	sub	sp, #32
 8002964:	af02      	add	r7, sp, #8
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	607b      	str	r3, [r7, #4]
 800296a:	460b      	mov	r3, r1
 800296c:	817b      	strh	r3, [r7, #10]
 800296e:	4613      	mov	r3, r2
 8002970:	727b      	strb	r3, [r7, #9]
	uint8_t bin_data[DATA_SIZE];
	util_encode_u8(bin_data, data);
 8002972:	7a7a      	ldrb	r2, [r7, #9]
 8002974:	f107 0314 	add.w	r3, r7, #20
 8002978:	4611      	mov	r1, r2
 800297a:	4618      	mov	r0, r3
 800297c:	f7ff fdaa 	bl	80024d4 <util_encode_u8>
	return servo_write(servo, address, 1, bin_data, err);
 8002980:	f107 0214 	add.w	r2, r7, #20
 8002984:	8979      	ldrh	r1, [r7, #10]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	9300      	str	r3, [sp, #0]
 800298a:	4613      	mov	r3, r2
 800298c:	2201      	movs	r2, #1
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f7ff ff5c 	bl	800284c <servo_write>
 8002994:	4603      	mov	r3, r0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3718      	adds	r7, #24
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <servo_write_i32>:
	uint8_t bin_data[DATA_SIZE];
	util_encode_i16(bin_data, data);
	return servo_write(servo, address, 2, bin_data, err);
}

SERVO_ERROR_t servo_write_i32(SERVO_INST_t * servo, uint16_t address, int32_t data, uint8_t * err) {
 800299e:	b580      	push	{r7, lr}
 80029a0:	b088      	sub	sp, #32
 80029a2:	af02      	add	r7, sp, #8
 80029a4:	60f8      	str	r0, [r7, #12]
 80029a6:	607a      	str	r2, [r7, #4]
 80029a8:	603b      	str	r3, [r7, #0]
 80029aa:	460b      	mov	r3, r1
 80029ac:	817b      	strh	r3, [r7, #10]
	uint8_t bin_data[DATA_SIZE];
	util_encode_i32(bin_data, data);
 80029ae:	f107 0314 	add.w	r3, r7, #20
 80029b2:	6879      	ldr	r1, [r7, #4]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff fda8 	bl	800250a <util_encode_i32>
	return servo_write(servo, address, 4, bin_data, err);
 80029ba:	f107 0214 	add.w	r2, r7, #20
 80029be:	8979      	ldrh	r1, [r7, #10]
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	9300      	str	r3, [sp, #0]
 80029c4:	4613      	mov	r3, r2
 80029c6:	2204      	movs	r2, #4
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	f7ff ff3f 	bl	800284c <servo_write>
 80029ce:	4603      	mov	r3, r0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3718      	adds	r7, #24
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <servo_read_u8>:

SERVO_ERROR_t servo_read_u8(SERVO_INST_t * servo, uint16_t address, uint8_t * data, uint8_t * err) {
 80029d8:	b580      	push	{r7, lr}
 80029da:	b088      	sub	sp, #32
 80029dc:	af02      	add	r7, sp, #8
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	607a      	str	r2, [r7, #4]
 80029e2:	603b      	str	r3, [r7, #0]
 80029e4:	460b      	mov	r3, r1
 80029e6:	817b      	strh	r3, [r7, #10]
	uint8_t bin_data[DATA_SIZE];
	SERVO_ERROR_t tmp = servo_read(servo, address, 1, bin_data, err);
 80029e8:	f107 0210 	add.w	r2, r7, #16
 80029ec:	8979      	ldrh	r1, [r7, #10]
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	9300      	str	r3, [sp, #0]
 80029f2:	4613      	mov	r3, r2
 80029f4:	2201      	movs	r2, #1
 80029f6:	68f8      	ldr	r0, [r7, #12]
 80029f8:	f7ff fe94 	bl	8002724 <servo_read>
 80029fc:	4603      	mov	r3, r0
 80029fe:	75fb      	strb	r3, [r7, #23]
	*data = util_decode_u8(bin_data);
 8002a00:	f107 0310 	add.w	r3, r7, #16
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff fda1 	bl	800254c <util_decode_u8>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	701a      	strb	r2, [r3, #0]
	return tmp;
 8002a12:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3718      	adds	r7, #24
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <servo_read_u16>:

SERVO_ERROR_t servo_read_u16(SERVO_INST_t * servo, uint16_t address, uint16_t * data, uint8_t * err) {
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b088      	sub	sp, #32
 8002a20:	af02      	add	r7, sp, #8
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	607a      	str	r2, [r7, #4]
 8002a26:	603b      	str	r3, [r7, #0]
 8002a28:	460b      	mov	r3, r1
 8002a2a:	817b      	strh	r3, [r7, #10]
	uint8_t bin_data[DATA_SIZE];
	SERVO_ERROR_t tmp = servo_read(servo, address, 2, bin_data, err);
 8002a2c:	f107 0210 	add.w	r2, r7, #16
 8002a30:	8979      	ldrh	r1, [r7, #10]
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	9300      	str	r3, [sp, #0]
 8002a36:	4613      	mov	r3, r2
 8002a38:	2202      	movs	r2, #2
 8002a3a:	68f8      	ldr	r0, [r7, #12]
 8002a3c:	f7ff fe72 	bl	8002724 <servo_read>
 8002a40:	4603      	mov	r3, r0
 8002a42:	75fb      	strb	r3, [r7, #23]
	*data = util_decode_u16(bin_data);
 8002a44:	f107 0310 	add.w	r3, r7, #16
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff fd8b 	bl	8002564 <util_decode_u16>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	461a      	mov	r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	801a      	strh	r2, [r3, #0]
	return tmp;
 8002a56:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3718      	adds	r7, #24
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <servo_read_i8>:
	SERVO_ERROR_t tmp = servo_read(servo, address, 4, bin_data, err);
	*data = util_decode_u32(bin_data);
	return tmp;
}

SERVO_ERROR_t servo_read_i8(SERVO_INST_t * servo, uint16_t address, int8_t * data, uint8_t * err) {
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b088      	sub	sp, #32
 8002a64:	af02      	add	r7, sp, #8
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	607a      	str	r2, [r7, #4]
 8002a6a:	603b      	str	r3, [r7, #0]
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	817b      	strh	r3, [r7, #10]
	uint8_t bin_data[DATA_SIZE];
	SERVO_ERROR_t tmp = servo_read(servo, address, 1, bin_data, err);
 8002a70:	f107 0210 	add.w	r2, r7, #16
 8002a74:	8979      	ldrh	r1, [r7, #10]
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	9300      	str	r3, [sp, #0]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f7ff fe50 	bl	8002724 <servo_read>
 8002a84:	4603      	mov	r3, r0
 8002a86:	75fb      	strb	r3, [r7, #23]
	*data = util_decode_i8(bin_data);
 8002a88:	f107 0310 	add.w	r3, r7, #16
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7ff fd7e 	bl	800258e <util_decode_i8>
 8002a92:	4603      	mov	r3, r0
 8002a94:	461a      	mov	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	701a      	strb	r2, [r3, #0]
	return tmp;
 8002a9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3718      	adds	r7, #24
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <servo_read_i32>:
	SERVO_ERROR_t tmp = servo_read(servo, address, 2, bin_data, err);
	*data = util_decode_i16(bin_data);
	return tmp;
}

SERVO_ERROR_t servo_read_i32(SERVO_INST_t * servo, uint16_t address, int32_t * data, uint8_t * err) {
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b088      	sub	sp, #32
 8002aa8:	af02      	add	r7, sp, #8
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	607a      	str	r2, [r7, #4]
 8002aae:	603b      	str	r3, [r7, #0]
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	817b      	strh	r3, [r7, #10]
	uint8_t bin_data[DATA_SIZE];
	SERVO_ERROR_t tmp = servo_read(servo, address, 4, bin_data, err);
 8002ab4:	f107 0210 	add.w	r2, r7, #16
 8002ab8:	8979      	ldrh	r1, [r7, #10]
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	9300      	str	r3, [sp, #0]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	2204      	movs	r2, #4
 8002ac2:	68f8      	ldr	r0, [r7, #12]
 8002ac4:	f7ff fe2e 	bl	8002724 <servo_read>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	75fb      	strb	r3, [r7, #23]
	*data = util_decode_i32(bin_data);
 8002acc:	f107 0310 	add.w	r3, r7, #16
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7ff fd69 	bl	80025a8 <util_decode_i32>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	601a      	str	r2, [r3, #0]
	return tmp;
 8002adc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3718      	adds	r7, #24
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <servo_sync>:



//HIGH LEVEL FUNCTIONS

SERVO_ERROR_t servo_sync(SERVO_INST_t * servo) {
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b084      	sub	sp, #16
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
	uint8_t err;
	SERVO_ERROR_t error = 0;
 8002aee:	2300      	movs	r3, #0
 8002af0:	73fb      	strb	r3, [r7, #15]

	error |= servo_read_u8(servo, SERVO_HARDWARE_ERROR_STATUS, &servo->error, &err);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f503 5284 	add.w	r2, r3, #4224	; 0x1080
 8002af8:	3218      	adds	r2, #24
 8002afa:	f107 030e 	add.w	r3, r7, #14
 8002afe:	2146      	movs	r1, #70	; 0x46
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f7ff ff69 	bl	80029d8 <servo_read_u8>
 8002b06:	4603      	mov	r3, r0
 8002b08:	461a      	mov	r2, r3
 8002b0a:	7bfb      	ldrb	r3, [r7, #15]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	73fb      	strb	r3, [r7, #15]

	error |= servo_read_u16(servo, SERVO_PRESENT_INPUT_VOLTAGE, &servo->psu_voltage, &err);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f503 5284 	add.w	r2, r3, #4224	; 0x1080
 8002b16:	3210      	adds	r2, #16
 8002b18:	f107 030e 	add.w	r3, r7, #14
 8002b1c:	2190      	movs	r1, #144	; 0x90
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f7ff ff7c 	bl	8002a1c <servo_read_u16>
 8002b24:	4603      	mov	r3, r0
 8002b26:	461a      	mov	r2, r3
 8002b28:	7bfb      	ldrb	r3, [r7, #15]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	73fb      	strb	r3, [r7, #15]

	error |= servo_read_i8(servo, SERVO_PRESENT_TEMPERATURE, &servo->temperature, &err);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f503 5284 	add.w	r2, r3, #4224	; 0x1080
 8002b34:	3212      	adds	r2, #18
 8002b36:	f107 030e 	add.w	r3, r7, #14
 8002b3a:	2192      	movs	r1, #146	; 0x92
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f7ff ff8f 	bl	8002a60 <servo_read_i8>
 8002b42:	4603      	mov	r3, r0
 8002b44:	461a      	mov	r2, r3
 8002b46:	7bfb      	ldrb	r3, [r7, #15]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	73fb      	strb	r3, [r7, #15]

	error |= servo_read_i32(servo, SERVO_PRESENT_POSITION, &servo->position, &err);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f503 5284 	add.w	r2, r3, #4224	; 0x1080
 8002b52:	3214      	adds	r2, #20
 8002b54:	f107 030e 	add.w	r3, r7, #14
 8002b58:	2184      	movs	r1, #132	; 0x84
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f7ff ffa2 	bl	8002aa4 <servo_read_i32>
 8002b60:	4603      	mov	r3, r0
 8002b62:	461a      	mov	r2, r3
 8002b64:	7bfb      	ldrb	r3, [r7, #15]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	73fb      	strb	r3, [r7, #15]


	return error;
 8002b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3710      	adds	r7, #16
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <servo_config>:

SERVO_ERROR_t servo_config(SERVO_INST_t * servo) {
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
	uint8_t err;
	SERVO_ERROR_t error = 0;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	73fb      	strb	r3, [r7, #15]

	error |= servo_disable_torque(servo, &err);
 8002b80:	f107 030e 	add.w	r3, r7, #14
 8002b84:	2200      	movs	r2, #0
 8002b86:	2140      	movs	r1, #64	; 0x40
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f7ff fee9 	bl	8002960 <servo_write_u8>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	461a      	mov	r2, r3
 8002b92:	7bfb      	ldrb	r3, [r7, #15]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	73fb      	strb	r3, [r7, #15]

	error |= servo_write_i32(servo, SERVO_MAX_POSITION_LIMIT, 4095, &err);
 8002b98:	f107 030e 	add.w	r3, r7, #14
 8002b9c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002ba0:	2130      	movs	r1, #48	; 0x30
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f7ff fefb 	bl	800299e <servo_write_i32>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	461a      	mov	r2, r3
 8002bac:	7bfb      	ldrb	r3, [r7, #15]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	73fb      	strb	r3, [r7, #15]

	error |= servo_write_i32(servo, SERVO_MIN_POSITION_LIMIT, 0, &err);
 8002bb2:	f107 030e 	add.w	r3, r7, #14
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	2134      	movs	r1, #52	; 0x34
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f7ff feef 	bl	800299e <servo_write_i32>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	7bfb      	ldrb	r3, [r7, #15]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	73fb      	strb	r3, [r7, #15]

	error |= servo_write_u8(servo, SERVO_OPERATING_MODE, 3, &err);
 8002bca:	f107 030e 	add.w	r3, r7, #14
 8002bce:	2203      	movs	r2, #3
 8002bd0:	210b      	movs	r1, #11
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f7ff fec4 	bl	8002960 <servo_write_u8>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	461a      	mov	r2, r3
 8002bdc:	7bfb      	ldrb	r3, [r7, #15]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	73fb      	strb	r3, [r7, #15]

	return error;
 8002be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3710      	adds	r7, #16
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <servo_move>:

SERVO_ERROR_t servo_move(SERVO_INST_t * servo, int32_t target) {
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
	uint8_t err;
	SERVO_ERROR_t error = 0;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	73fb      	strb	r3, [r7, #15]

	error |= servo_enable_torque(servo, &err);
 8002bfa:	f107 030e 	add.w	r3, r7, #14
 8002bfe:	2201      	movs	r2, #1
 8002c00:	2140      	movs	r1, #64	; 0x40
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f7ff feac 	bl	8002960 <servo_write_u8>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	7bfb      	ldrb	r3, [r7, #15]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	73fb      	strb	r3, [r7, #15]

	error |= servo_write_i32(servo, SERVO_GOAL_POSITION, target, &err);
 8002c12:	f107 030e 	add.w	r3, r7, #14
 8002c16:	683a      	ldr	r2, [r7, #0]
 8002c18:	2174      	movs	r1, #116	; 0x74
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f7ff febf 	bl	800299e <servo_write_i32>
 8002c20:	4603      	mov	r3, r0
 8002c22:	461a      	mov	r2, r3
 8002c24:	7bfb      	ldrb	r3, [r7, #15]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	73fb      	strb	r3, [r7, #15]

	return error;
 8002c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3710      	adds	r7, #16
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <storage_init>:

/**********************
 *	DECLARATIONS
 **********************/

void storage_init() {
 8002c34:	b5b0      	push	{r4, r5, r7, lr}
 8002c36:	b09c      	sub	sp, #112	; 0x70
 8002c38:	af02      	add	r7, sp, #8
	static STORAGE_HEADER_t header;
	flash_init();
 8002c3a:	f006 fba2 	bl	8009382 <flash_init>
	flash_read(HEADER_ADDR, (uint8_t *) &header, sizeof(STORAGE_HEADER_t));
 8002c3e:	2210      	movs	r2, #16
 8002c40:	4936      	ldr	r1, [pc, #216]	; (8002d1c <storage_init+0xe8>)
 8002c42:	2000      	movs	r0, #0
 8002c44:	f006 fbc2 	bl	80093cc <flash_read>
	if(header.magic == MAGIC_NUMBER) {
 8002c48:	4b34      	ldr	r3, [pc, #208]	; (8002d1c <storage_init+0xe8>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a34      	ldr	r2, [pc, #208]	; (8002d20 <storage_init+0xec>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d149      	bne.n	8002ce6 <storage_init+0xb2>
		used_subsectors = header.used;
 8002c52:	4b32      	ldr	r3, [pc, #200]	; (8002d1c <storage_init+0xe8>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	4a33      	ldr	r2, [pc, #204]	; (8002d24 <storage_init+0xf0>)
 8002c58:	6013      	str	r3, [r2, #0]
		if(used_subsectors > 1) {
 8002c5a:	4b32      	ldr	r3, [pc, #200]	; (8002d24 <storage_init+0xf0>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d93d      	bls.n	8002cde <storage_init+0xaa>
			STORAGE_DATA_t data = {0};
 8002c62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c66:	2220      	movs	r2, #32
 8002c68:	2100      	movs	r1, #0
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f008 fdee 	bl	800b84c <memset>
			STORAGE_DATA_t last_valid_data = {0};
 8002c70:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002c74:	2220      	movs	r2, #32
 8002c76:	2100      	movs	r1, #0
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f008 fde7 	bl	800b84c <memset>
			uint32_t count = (used_subsectors-2)*SAMPLES_PER_SS;
 8002c7e:	4b29      	ldr	r3, [pc, #164]	; (8002d24 <storage_init+0xf0>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	3b02      	subs	r3, #2
 8002c84:	01db      	lsls	r3, r3, #7
 8002c86:	667b      	str	r3, [r7, #100]	; 0x64
			data = read_data(count);
 8002c88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c8c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f000 f878 	bl	8002d84 <read_data>
			while(data.sample_id == count){
 8002c94:	e01a      	b.n	8002ccc <storage_init+0x98>
				last_valid_data = data;
 8002c96:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8002c9a:	f107 0524 	add.w	r5, r7, #36	; 0x24
 8002c9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ca0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ca2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002ca6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				data = read_data(++count);
 8002caa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cac:	3301      	adds	r3, #1
 8002cae:	667b      	str	r3, [r7, #100]	; 0x64
 8002cb0:	463b      	mov	r3, r7
 8002cb2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f000 f865 	bl	8002d84 <read_data>
 8002cba:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8002cbe:	463d      	mov	r5, r7
 8002cc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cc4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002cc8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			while(data.sample_id == count){
 8002ccc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002cce:	461a      	mov	r2, r3
 8002cd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d0df      	beq.n	8002c96 <storage_init+0x62>
			}

			data_counter = count;
 8002cd6:	4a14      	ldr	r2, [pc, #80]	; (8002d28 <storage_init+0xf4>)
 8002cd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cda:	6013      	str	r3, [r2, #0]
 8002cdc:	e009      	b.n	8002cf2 <storage_init+0xbe>
		} else {
			data_counter = 0;
 8002cde:	4b12      	ldr	r3, [pc, #72]	; (8002d28 <storage_init+0xf4>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	601a      	str	r2, [r3, #0]
 8002ce4:	e005      	b.n	8002cf2 <storage_init+0xbe>
		}
	} else {
		write_header_used(1);
 8002ce6:	2001      	movs	r0, #1
 8002ce8:	f000 f828 	bl	8002d3c <write_header_used>
		data_counter = 0;
 8002cec:	4b0e      	ldr	r3, [pc, #56]	; (8002d28 <storage_init+0xf4>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	601a      	str	r2, [r3, #0]
	}
	record_active = 0;
 8002cf2:	4b0e      	ldr	r3, [pc, #56]	; (8002d2c <storage_init+0xf8>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	701a      	strb	r2, [r3, #0]
	restart_required = 0;
 8002cf8:	4b0d      	ldr	r3, [pc, #52]	; (8002d30 <storage_init+0xfc>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	701a      	strb	r2, [r3, #0]
	storage_sem = xSemaphoreCreateBinaryStatic(&storage_sem_buffer);
 8002cfe:	2303      	movs	r3, #3
 8002d00:	9300      	str	r3, [sp, #0]
 8002d02:	4b0c      	ldr	r3, [pc, #48]	; (8002d34 <storage_init+0x100>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	2100      	movs	r1, #0
 8002d08:	2001      	movs	r0, #1
 8002d0a:	f006 fe9d 	bl	8009a48 <xQueueGenericCreateStatic>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	4a09      	ldr	r2, [pc, #36]	; (8002d38 <storage_init+0x104>)
 8002d12:	6013      	str	r3, [r2, #0]
}
 8002d14:	bf00      	nop
 8002d16:	3768      	adds	r7, #104	; 0x68
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bdb0      	pop	{r4, r5, r7, pc}
 8002d1c:	20003aa4 	.word	0x20003aa4
 8002d20:	cbe0c5e6 	.word	0xcbe0c5e6
 8002d24:	20003a48 	.word	0x20003a48
 8002d28:	20003a4c 	.word	0x20003a4c
 8002d2c:	20003a50 	.word	0x20003a50
 8002d30:	20003a51 	.word	0x20003a51
 8002d34:	20003a5c 	.word	0x20003a5c
 8002d38:	20003a58 	.word	0x20003a58

08002d3c <write_header_used>:

}



static void write_header_used(uint32_t used) {
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
	static STORAGE_HEADER_t header;
	flash_read(HEADER_ADDR, (uint8_t *) &header, sizeof(STORAGE_HEADER_t));
 8002d44:	2210      	movs	r2, #16
 8002d46:	490c      	ldr	r1, [pc, #48]	; (8002d78 <write_header_used+0x3c>)
 8002d48:	2000      	movs	r0, #0
 8002d4a:	f006 fb3f 	bl	80093cc <flash_read>
	flash_erase_subsector(HEADER_ADDR);
 8002d4e:	2000      	movs	r0, #0
 8002d50:	f006 fc34 	bl	80095bc <flash_erase_subsector>
	header.magic = MAGIC_NUMBER;
 8002d54:	4b08      	ldr	r3, [pc, #32]	; (8002d78 <write_header_used+0x3c>)
 8002d56:	4a09      	ldr	r2, [pc, #36]	; (8002d7c <write_header_used+0x40>)
 8002d58:	601a      	str	r2, [r3, #0]
	header.used = used;
 8002d5a:	4a07      	ldr	r2, [pc, #28]	; (8002d78 <write_header_used+0x3c>)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6053      	str	r3, [r2, #4]
	flash_write(HEADER_ADDR, (uint8_t *) &header, sizeof(STORAGE_HEADER_t));
 8002d60:	2210      	movs	r2, #16
 8002d62:	4905      	ldr	r1, [pc, #20]	; (8002d78 <write_header_used+0x3c>)
 8002d64:	2000      	movs	r0, #0
 8002d66:	f006 fbb2 	bl	80094ce <flash_write>
	used_subsectors = used;
 8002d6a:	4a05      	ldr	r2, [pc, #20]	; (8002d80 <write_header_used+0x44>)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6013      	str	r3, [r2, #0]
}
 8002d70:	bf00      	nop
 8002d72:	3708      	adds	r7, #8
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	20003ab4 	.word	0x20003ab4
 8002d7c:	cbe0c5e6 	.word	0xcbe0c5e6
 8002d80:	20003a48 	.word	0x20003a48

08002d84 <read_data>:



static STORAGE_DATA_t read_data(uint32_t id) {
 8002d84:	b5b0      	push	{r4, r5, r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
	static STORAGE_DATA_t data;
	flash_read(ADDRESS(id), (uint8_t *) &data, sizeof(STORAGE_DATA_t));
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	3380      	adds	r3, #128	; 0x80
 8002d92:	015b      	lsls	r3, r3, #5
 8002d94:	2220      	movs	r2, #32
 8002d96:	4909      	ldr	r1, [pc, #36]	; (8002dbc <read_data+0x38>)
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f006 fb17 	bl	80093cc <flash_read>
	return data;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a06      	ldr	r2, [pc, #24]	; (8002dbc <read_data+0x38>)
 8002da2:	461c      	mov	r4, r3
 8002da4:	4615      	mov	r5, r2
 8002da6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002da8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002daa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002dae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bdb0      	pop	{r4, r5, r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	20003ac4 	.word	0x20003ac4

08002dc0 <storage_get_used>:
		flash_erase_subsector(addr);
	}
	flash_write(addr, (uint8_t *) &data, sizeof(STORAGE_DATA_t));
}

uint32_t storage_get_used() {
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
	return data_counter;
 8002dc4:	4b03      	ldr	r3, [pc, #12]	; (8002dd4 <storage_get_used+0x14>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	20003a4c 	.word	0x20003a4c

08002dd8 <storage_get_sample>:

void storage_get_sample(uint32_t id, void * dest) {
 8002dd8:	b5b0      	push	{r4, r5, r7, lr}
 8002dda:	b08a      	sub	sp, #40	; 0x28
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6278      	str	r0, [r7, #36]	; 0x24
 8002de0:	6239      	str	r1, [r7, #32]
	*((STORAGE_DATA_t *)dest) = read_data(id);
 8002de2:	6a3c      	ldr	r4, [r7, #32]
 8002de4:	463b      	mov	r3, r7
 8002de6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7ff ffcb 	bl	8002d84 <read_data>
 8002dee:	4625      	mov	r5, r4
 8002df0:	463c      	mov	r4, r7
 8002df2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002df4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002df6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002dfa:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8002dfe:	bf00      	nop
 8002e00:	3728      	adds	r7, #40	; 0x28
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002e08 <storage_disable>:

void storage_enable() {
	record_active = 1;
}

void storage_disable() {
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
	record_should_stop = STORAGE_AFTER_SAVE;
 8002e0c:	4b04      	ldr	r3, [pc, #16]	; (8002e20 <storage_disable+0x18>)
 8002e0e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002e12:	601a      	str	r2, [r3, #0]
}
 8002e14:	bf00      	nop
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	20003a54 	.word	0x20003a54

08002e24 <storage_thread>:
		xSemaphoreGive(storage_sem);
	}
}


void storage_thread(void * arg) {
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]



	storage_init();
 8002e2c:	f7ff ff02 	bl	8002c34 <storage_init>




	for(;;) {
		last_time = time;
 8002e30:	4b1b      	ldr	r3, [pc, #108]	; (8002ea0 <storage_thread+0x7c>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a1b      	ldr	r2, [pc, #108]	; (8002ea4 <storage_thread+0x80>)
 8002e36:	6013      	str	r3, [r2, #0]
		time = HAL_GetTick();
 8002e38:	f001 f9ee 	bl	8004218 <HAL_GetTick>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	4a18      	ldr	r2, [pc, #96]	; (8002ea0 <storage_thread+0x7c>)
 8002e40:	6013      	str	r3, [r2, #0]
		if(restart_required) {
 8002e42:	4b19      	ldr	r3, [pc, #100]	; (8002ea8 <storage_thread+0x84>)
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d008      	beq.n	8002e5c <storage_thread+0x38>
			write_header_used(1);
 8002e4a:	2001      	movs	r0, #1
 8002e4c:	f7ff ff76 	bl	8002d3c <write_header_used>
			data_counter = 0;
 8002e50:	4b16      	ldr	r3, [pc, #88]	; (8002eac <storage_thread+0x88>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	601a      	str	r2, [r3, #0]
			restart_required = 0;
 8002e56:	4b14      	ldr	r3, [pc, #80]	; (8002ea8 <storage_thread+0x84>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	701a      	strb	r2, [r3, #0]
		}
		if(record_should_stop) {
 8002e5c:	4b14      	ldr	r3, [pc, #80]	; (8002eb0 <storage_thread+0x8c>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d014      	beq.n	8002e8e <storage_thread+0x6a>
			record_should_stop -= time-last_time;;
 8002e64:	4b0f      	ldr	r3, [pc, #60]	; (8002ea4 <storage_thread+0x80>)
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	4b0d      	ldr	r3, [pc, #52]	; (8002ea0 <storage_thread+0x7c>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	4a10      	ldr	r2, [pc, #64]	; (8002eb0 <storage_thread+0x8c>)
 8002e70:	6812      	ldr	r2, [r2, #0]
 8002e72:	4413      	add	r3, r2
 8002e74:	461a      	mov	r2, r3
 8002e76:	4b0e      	ldr	r3, [pc, #56]	; (8002eb0 <storage_thread+0x8c>)
 8002e78:	601a      	str	r2, [r3, #0]
			if(record_should_stop<=0){
 8002e7a:	4b0d      	ldr	r3, [pc, #52]	; (8002eb0 <storage_thread+0x8c>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	dc05      	bgt.n	8002e8e <storage_thread+0x6a>
				record_active=0;
 8002e82:	4b0c      	ldr	r3, [pc, #48]	; (8002eb4 <storage_thread+0x90>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	701a      	strb	r2, [r3, #0]
				record_should_stop=0;
 8002e88:	4b09      	ldr	r3, [pc, #36]	; (8002eb0 <storage_thread+0x8c>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	601a      	str	r2, [r3, #0]
			}
		}
		if(xSemaphoreTake(storage_sem, 0xffff) == pdTRUE) {
 8002e8e:	4b0a      	ldr	r3, [pc, #40]	; (8002eb8 <storage_thread+0x94>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002e96:	4618      	mov	r0, r3
 8002e98:	f007 f82a 	bl	8009ef0 <xQueueSemaphoreTake>
		last_time = time;
 8002e9c:	e7c8      	b.n	8002e30 <storage_thread+0xc>
 8002e9e:	bf00      	nop
 8002ea0:	20003ae4 	.word	0x20003ae4
 8002ea4:	20003ae8 	.word	0x20003ae8
 8002ea8:	20003a51 	.word	0x20003a51
 8002eac:	20003a4c 	.word	0x20003a4c
 8002eb0:	20003a54 	.word	0x20003a54
 8002eb4:	20003a50 	.word	0x20003a50
 8002eb8:	20003a58 	.word	0x20003a58

08002ebc <threads_init>:
 **********************/

/*
 * Create all the threads needed by the software
 */
void threads_init(void) {
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af04      	add	r7, sp, #16


	serial_global_init();
 8002ec2:	f7ff fa49 	bl	8002358 <serial_global_init>
	static DEBUG_INST_t debug;
	debug_init(&debug);
 8002ec6:	4824      	ldr	r0, [pc, #144]	; (8002f58 <threads_init+0x9c>)
 8002ec8:	f7fe fb8c 	bl	80015e4 <debug_init>

	can_init();
 8002ecc:	f7fd fc64 	bl	8000798 <can_init>
	/*
	 * Storage thread
	 * lowest priority
	 */

	CREATE_THREAD(storage_handle, storage, storage_thread, STORAGE_SZ, STORAGE_PRIO);
 8002ed0:	4b22      	ldr	r3, [pc, #136]	; (8002f5c <threads_init+0xa0>)
 8002ed2:	9302      	str	r3, [sp, #8]
 8002ed4:	4b22      	ldr	r3, [pc, #136]	; (8002f60 <threads_init+0xa4>)
 8002ed6:	9301      	str	r3, [sp, #4]
 8002ed8:	2303      	movs	r3, #3
 8002eda:	9300      	str	r3, [sp, #0]
 8002edc:	2300      	movs	r3, #0
 8002ede:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ee2:	4920      	ldr	r1, [pc, #128]	; (8002f64 <threads_init+0xa8>)
 8002ee4:	4820      	ldr	r0, [pc, #128]	; (8002f68 <threads_init+0xac>)
 8002ee6:	f007 fa11 	bl	800a30c <xTaskCreateStatic>
 8002eea:	4603      	mov	r3, r0
 8002eec:	4a1f      	ldr	r2, [pc, #124]	; (8002f6c <threads_init+0xb0>)
 8002eee:	6013      	str	r3, [r2, #0]

	/*
	 *  Serial RX processing thread (Bottom half)
	 *  low priority
	 */
	CREATE_THREAD(serial_handle, serial, serial_thread, SERIAL_SZ, SERIAL_PRIO);
 8002ef0:	4b1f      	ldr	r3, [pc, #124]	; (8002f70 <threads_init+0xb4>)
 8002ef2:	9302      	str	r3, [sp, #8]
 8002ef4:	4b1f      	ldr	r3, [pc, #124]	; (8002f74 <threads_init+0xb8>)
 8002ef6:	9301      	str	r3, [sp, #4]
 8002ef8:	2305      	movs	r3, #5
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	2300      	movs	r3, #0
 8002efe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f02:	491d      	ldr	r1, [pc, #116]	; (8002f78 <threads_init+0xbc>)
 8002f04:	481d      	ldr	r0, [pc, #116]	; (8002f7c <threads_init+0xc0>)
 8002f06:	f007 fa01 	bl	800a30c <xTaskCreateStatic>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	4a1c      	ldr	r2, [pc, #112]	; (8002f80 <threads_init+0xc4>)
 8002f0e:	6013      	str	r3, [r2, #0]

	/*
	 *  Main control thread
	 *  Highest priority
	 */
	CREATE_THREAD(control_handle, control, control_thread, CONTROL_SZ, CONTROL_PRIO);
 8002f10:	4b1c      	ldr	r3, [pc, #112]	; (8002f84 <threads_init+0xc8>)
 8002f12:	9302      	str	r3, [sp, #8]
 8002f14:	4b1c      	ldr	r3, [pc, #112]	; (8002f88 <threads_init+0xcc>)
 8002f16:	9301      	str	r3, [sp, #4]
 8002f18:	2306      	movs	r3, #6
 8002f1a:	9300      	str	r3, [sp, #0]
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f22:	491a      	ldr	r1, [pc, #104]	; (8002f8c <threads_init+0xd0>)
 8002f24:	481a      	ldr	r0, [pc, #104]	; (8002f90 <threads_init+0xd4>)
 8002f26:	f007 f9f1 	bl	800a30c <xTaskCreateStatic>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	4a19      	ldr	r2, [pc, #100]	; (8002f94 <threads_init+0xd8>)
 8002f2e:	6013      	str	r3, [r2, #0]

	/*
	 *  CAN send thread
	 *  Highest priority
	 */
	CREATE_THREAD(can_send_handle, can_send, can_send_thread, CAN_SZ, CAN_PRIO);
 8002f30:	4b19      	ldr	r3, [pc, #100]	; (8002f98 <threads_init+0xdc>)
 8002f32:	9302      	str	r3, [sp, #8]
 8002f34:	4b19      	ldr	r3, [pc, #100]	; (8002f9c <threads_init+0xe0>)
 8002f36:	9301      	str	r3, [sp, #4]
 8002f38:	2303      	movs	r3, #3
 8002f3a:	9300      	str	r3, [sp, #0]
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f42:	4917      	ldr	r1, [pc, #92]	; (8002fa0 <threads_init+0xe4>)
 8002f44:	4817      	ldr	r0, [pc, #92]	; (8002fa4 <threads_init+0xe8>)
 8002f46:	f007 f9e1 	bl	800a30c <xTaskCreateStatic>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	4a16      	ldr	r2, [pc, #88]	; (8002fa8 <threads_init+0xec>)
 8002f4e:	6013      	str	r3, [r2, #0]



}
 8002f50:	bf00      	nop
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	20003afc 	.word	0x20003afc
 8002f5c:	20005f34 	.word	0x20005f34
 8002f60:	20004f34 	.word	0x20004f34
 8002f64:	0800ba74 	.word	0x0800ba74
 8002f68:	08002e25 	.word	0x08002e25
 8002f6c:	20003af4 	.word	0x20003af4
 8002f70:	20006f88 	.word	0x20006f88
 8002f74:	20005f88 	.word	0x20005f88
 8002f78:	0800ba7c 	.word	0x0800ba7c
 8002f7c:	0800244d 	.word	0x0800244d
 8002f80:	20003af0 	.word	0x20003af0
 8002f84:	20007fdc 	.word	0x20007fdc
 8002f88:	20006fdc 	.word	0x20006fdc
 8002f8c:	0800ba84 	.word	0x0800ba84
 8002f90:	08000d99 	.word	0x08000d99
 8002f94:	20003aec 	.word	0x20003aec
 8002f98:	20009030 	.word	0x20009030
 8002f9c:	20008030 	.word	0x20008030
 8002fa0:	0800ba8c 	.word	0x0800ba8c
 8002fa4:	080007a9 	.word	0x080007a9
 8002fa8:	20003af8 	.word	0x20003af8

08002fac <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8002fb0:	4b17      	ldr	r3, [pc, #92]	; (8003010 <MX_CAN1_Init+0x64>)
 8002fb2:	4a18      	ldr	r2, [pc, #96]	; (8003014 <MX_CAN1_Init+0x68>)
 8002fb4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 8002fb6:	4b16      	ldr	r3, [pc, #88]	; (8003010 <MX_CAN1_Init+0x64>)
 8002fb8:	2209      	movs	r2, #9
 8002fba:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002fbc:	4b14      	ldr	r3, [pc, #80]	; (8003010 <MX_CAN1_Init+0x64>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002fc2:	4b13      	ldr	r3, [pc, #76]	; (8003010 <MX_CAN1_Init+0x64>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8002fc8:	4b11      	ldr	r3, [pc, #68]	; (8003010 <MX_CAN1_Init+0x64>)
 8002fca:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8002fce:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8002fd0:	4b0f      	ldr	r3, [pc, #60]	; (8003010 <MX_CAN1_Init+0x64>)
 8002fd2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002fd6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002fd8:	4b0d      	ldr	r3, [pc, #52]	; (8003010 <MX_CAN1_Init+0x64>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002fde:	4b0c      	ldr	r3, [pc, #48]	; (8003010 <MX_CAN1_Init+0x64>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002fe4:	4b0a      	ldr	r3, [pc, #40]	; (8003010 <MX_CAN1_Init+0x64>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8002fea:	4b09      	ldr	r3, [pc, #36]	; (8003010 <MX_CAN1_Init+0x64>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002ff0:	4b07      	ldr	r3, [pc, #28]	; (8003010 <MX_CAN1_Init+0x64>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002ff6:	4b06      	ldr	r3, [pc, #24]	; (8003010 <MX_CAN1_Init+0x64>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002ffc:	4804      	ldr	r0, [pc, #16]	; (8003010 <MX_CAN1_Init+0x64>)
 8002ffe:	f001 f917 	bl	8004230 <HAL_CAN_Init>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8003008:	f000 fa22 	bl	8003450 <Error_Handler>
  }

}
 800300c:	bf00      	nop
 800300e:	bd80      	pop	{r7, pc}
 8003010:	2000985c 	.word	0x2000985c
 8003014:	40006400 	.word	0x40006400

08003018 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b08a      	sub	sp, #40	; 0x28
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003020:	f107 0314 	add.w	r3, r7, #20
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	605a      	str	r2, [r3, #4]
 800302a:	609a      	str	r2, [r3, #8]
 800302c:	60da      	str	r2, [r3, #12]
 800302e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a2d      	ldr	r2, [pc, #180]	; (80030ec <HAL_CAN_MspInit+0xd4>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d153      	bne.n	80030e2 <HAL_CAN_MspInit+0xca>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800303a:	2300      	movs	r3, #0
 800303c:	613b      	str	r3, [r7, #16]
 800303e:	4b2c      	ldr	r3, [pc, #176]	; (80030f0 <HAL_CAN_MspInit+0xd8>)
 8003040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003042:	4a2b      	ldr	r2, [pc, #172]	; (80030f0 <HAL_CAN_MspInit+0xd8>)
 8003044:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003048:	6413      	str	r3, [r2, #64]	; 0x40
 800304a:	4b29      	ldr	r3, [pc, #164]	; (80030f0 <HAL_CAN_MspInit+0xd8>)
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003052:	613b      	str	r3, [r7, #16]
 8003054:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003056:	2300      	movs	r3, #0
 8003058:	60fb      	str	r3, [r7, #12]
 800305a:	4b25      	ldr	r3, [pc, #148]	; (80030f0 <HAL_CAN_MspInit+0xd8>)
 800305c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305e:	4a24      	ldr	r2, [pc, #144]	; (80030f0 <HAL_CAN_MspInit+0xd8>)
 8003060:	f043 0301 	orr.w	r3, r3, #1
 8003064:	6313      	str	r3, [r2, #48]	; 0x30
 8003066:	4b22      	ldr	r3, [pc, #136]	; (80030f0 <HAL_CAN_MspInit+0xd8>)
 8003068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	60fb      	str	r3, [r7, #12]
 8003070:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003072:	2300      	movs	r3, #0
 8003074:	60bb      	str	r3, [r7, #8]
 8003076:	4b1e      	ldr	r3, [pc, #120]	; (80030f0 <HAL_CAN_MspInit+0xd8>)
 8003078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307a:	4a1d      	ldr	r2, [pc, #116]	; (80030f0 <HAL_CAN_MspInit+0xd8>)
 800307c:	f043 0302 	orr.w	r3, r3, #2
 8003080:	6313      	str	r3, [r2, #48]	; 0x30
 8003082:	4b1b      	ldr	r3, [pc, #108]	; (80030f0 <HAL_CAN_MspInit+0xd8>)
 8003084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	60bb      	str	r3, [r7, #8]
 800308c:	68bb      	ldr	r3, [r7, #8]
    /**CAN1 GPIO Configuration
    PA12     ------> CAN1_TX
    PB8     ------> CAN1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800308e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003092:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003094:	2302      	movs	r3, #2
 8003096:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003098:	2300      	movs	r3, #0
 800309a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800309c:	2303      	movs	r3, #3
 800309e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80030a0:	2309      	movs	r3, #9
 80030a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030a4:	f107 0314 	add.w	r3, r7, #20
 80030a8:	4619      	mov	r1, r3
 80030aa:	4812      	ldr	r0, [pc, #72]	; (80030f4 <HAL_CAN_MspInit+0xdc>)
 80030ac:	f002 fb54 	bl	8005758 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80030b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030b6:	2302      	movs	r3, #2
 80030b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ba:	2300      	movs	r3, #0
 80030bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030be:	2303      	movs	r3, #3
 80030c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80030c2:	2309      	movs	r3, #9
 80030c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030c6:	f107 0314 	add.w	r3, r7, #20
 80030ca:	4619      	mov	r1, r3
 80030cc:	480a      	ldr	r0, [pc, #40]	; (80030f8 <HAL_CAN_MspInit+0xe0>)
 80030ce:	f002 fb43 	bl	8005758 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80030d2:	2200      	movs	r2, #0
 80030d4:	2105      	movs	r1, #5
 80030d6:	2014      	movs	r0, #20
 80030d8:	f001 ff12 	bl	8004f00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80030dc:	2014      	movs	r0, #20
 80030de:	f001 ff2b 	bl	8004f38 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80030e2:	bf00      	nop
 80030e4:	3728      	adds	r7, #40	; 0x28
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	40006400 	.word	0x40006400
 80030f0:	40023800 	.word	0x40023800
 80030f4:	40020000 	.word	0x40020000
 80030f8:	40020400 	.word	0x40020400

080030fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003102:	2300      	movs	r3, #0
 8003104:	607b      	str	r3, [r7, #4]
 8003106:	4b27      	ldr	r3, [pc, #156]	; (80031a4 <MX_DMA_Init+0xa8>)
 8003108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310a:	4a26      	ldr	r2, [pc, #152]	; (80031a4 <MX_DMA_Init+0xa8>)
 800310c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003110:	6313      	str	r3, [r2, #48]	; 0x30
 8003112:	4b24      	ldr	r3, [pc, #144]	; (80031a4 <MX_DMA_Init+0xa8>)
 8003114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003116:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800311a:	607b      	str	r3, [r7, #4]
 800311c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800311e:	2300      	movs	r3, #0
 8003120:	603b      	str	r3, [r7, #0]
 8003122:	4b20      	ldr	r3, [pc, #128]	; (80031a4 <MX_DMA_Init+0xa8>)
 8003124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003126:	4a1f      	ldr	r2, [pc, #124]	; (80031a4 <MX_DMA_Init+0xa8>)
 8003128:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800312c:	6313      	str	r3, [r2, #48]	; 0x30
 800312e:	4b1d      	ldr	r3, [pc, #116]	; (80031a4 <MX_DMA_Init+0xa8>)
 8003130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003132:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003136:	603b      	str	r3, [r7, #0]
 8003138:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800313a:	2200      	movs	r2, #0
 800313c:	2105      	movs	r1, #5
 800313e:	200c      	movs	r0, #12
 8003140:	f001 fede 	bl	8004f00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8003144:	200c      	movs	r0, #12
 8003146:	f001 fef7 	bl	8004f38 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800314a:	2200      	movs	r2, #0
 800314c:	2105      	movs	r1, #5
 800314e:	200e      	movs	r0, #14
 8003150:	f001 fed6 	bl	8004f00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8003154:	200e      	movs	r0, #14
 8003156:	f001 feef 	bl	8004f38 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800315a:	2200      	movs	r2, #0
 800315c:	2105      	movs	r1, #5
 800315e:	203a      	movs	r0, #58	; 0x3a
 8003160:	f001 fece 	bl	8004f00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003164:	203a      	movs	r0, #58	; 0x3a
 8003166:	f001 fee7 	bl	8004f38 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 800316a:	2200      	movs	r2, #0
 800316c:	2100      	movs	r1, #0
 800316e:	2044      	movs	r0, #68	; 0x44
 8003170:	f001 fec6 	bl	8004f00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8003174:	2044      	movs	r0, #68	; 0x44
 8003176:	f001 fedf 	bl	8004f38 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 800317a:	2200      	movs	r2, #0
 800317c:	2105      	movs	r1, #5
 800317e:	2045      	movs	r0, #69	; 0x45
 8003180:	f001 febe 	bl	8004f00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8003184:	2045      	movs	r0, #69	; 0x45
 8003186:	f001 fed7 	bl	8004f38 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 800318a:	2200      	movs	r2, #0
 800318c:	2105      	movs	r1, #5
 800318e:	2046      	movs	r0, #70	; 0x46
 8003190:	f001 feb6 	bl	8004f00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8003194:	2046      	movs	r0, #70	; 0x46
 8003196:	f001 fecf 	bl	8004f38 <HAL_NVIC_EnableIRQ>

}
 800319a:	bf00      	nop
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	40023800 	.word	0x40023800

080031a8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80031a8:	b480      	push	{r7}
 80031aa:	b085      	sub	sp, #20
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	4a07      	ldr	r2, [pc, #28]	; (80031d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80031b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	4a06      	ldr	r2, [pc, #24]	; (80031d8 <vApplicationGetIdleTaskMemory+0x30>)
 80031be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2280      	movs	r2, #128	; 0x80
 80031c4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80031c6:	bf00      	nop
 80031c8:	3714      	adds	r7, #20
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	20009084 	.word	0x20009084
 80031d8:	200090d8 	.word	0x200090d8

080031dc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80031dc:	b5b0      	push	{r4, r5, r7, lr}
 80031de:	b088      	sub	sp, #32
 80031e0:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128, defaultTaskBuffer, &defaultTaskControlBlock);
 80031e2:	4b0a      	ldr	r3, [pc, #40]	; (800320c <MX_FREERTOS_Init+0x30>)
 80031e4:	1d3c      	adds	r4, r7, #4
 80031e6:	461d      	mov	r5, r3
 80031e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80031f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80031f4:	1d3b      	adds	r3, r7, #4
 80031f6:	2100      	movs	r1, #0
 80031f8:	4618      	mov	r0, r3
 80031fa:	f006 fad0 	bl	800979e <osThreadCreate>
 80031fe:	4603      	mov	r3, r0
 8003200:	4a03      	ldr	r2, [pc, #12]	; (8003210 <MX_FREERTOS_Init+0x34>)
 8003202:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8003204:	bf00      	nop
 8003206:	3720      	adds	r7, #32
 8003208:	46bd      	mov	sp, r7
 800320a:	bdb0      	pop	{r4, r5, r7, pc}
 800320c:	0800baa4 	.word	0x0800baa4
 8003210:	20009884 	.word	0x20009884

08003214 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800321c:	2001      	movs	r0, #1
 800321e:	f006 fae3 	bl	80097e8 <osDelay>
 8003222:	e7fb      	b.n	800321c <StartDefaultTask+0x8>

08003224 <MX_GPIO_Init>:
     PA1   ------> S_TIM5_CH2
     PA2   ------> S_TIM5_CH3
     PA3   ------> S_TIM5_CH4
*/
void MX_GPIO_Init(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b088      	sub	sp, #32
 8003228:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800322a:	f107 030c 	add.w	r3, r7, #12
 800322e:	2200      	movs	r2, #0
 8003230:	601a      	str	r2, [r3, #0]
 8003232:	605a      	str	r2, [r3, #4]
 8003234:	609a      	str	r2, [r3, #8]
 8003236:	60da      	str	r2, [r3, #12]
 8003238:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800323a:	2300      	movs	r3, #0
 800323c:	60bb      	str	r3, [r7, #8]
 800323e:	4b2f      	ldr	r3, [pc, #188]	; (80032fc <MX_GPIO_Init+0xd8>)
 8003240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003242:	4a2e      	ldr	r2, [pc, #184]	; (80032fc <MX_GPIO_Init+0xd8>)
 8003244:	f043 0301 	orr.w	r3, r3, #1
 8003248:	6313      	str	r3, [r2, #48]	; 0x30
 800324a:	4b2c      	ldr	r3, [pc, #176]	; (80032fc <MX_GPIO_Init+0xd8>)
 800324c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	60bb      	str	r3, [r7, #8]
 8003254:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003256:	2300      	movs	r3, #0
 8003258:	607b      	str	r3, [r7, #4]
 800325a:	4b28      	ldr	r3, [pc, #160]	; (80032fc <MX_GPIO_Init+0xd8>)
 800325c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325e:	4a27      	ldr	r2, [pc, #156]	; (80032fc <MX_GPIO_Init+0xd8>)
 8003260:	f043 0304 	orr.w	r3, r3, #4
 8003264:	6313      	str	r3, [r2, #48]	; 0x30
 8003266:	4b25      	ldr	r3, [pc, #148]	; (80032fc <MX_GPIO_Init+0xd8>)
 8003268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326a:	f003 0304 	and.w	r3, r3, #4
 800326e:	607b      	str	r3, [r7, #4]
 8003270:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003272:	2300      	movs	r3, #0
 8003274:	603b      	str	r3, [r7, #0]
 8003276:	4b21      	ldr	r3, [pc, #132]	; (80032fc <MX_GPIO_Init+0xd8>)
 8003278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327a:	4a20      	ldr	r2, [pc, #128]	; (80032fc <MX_GPIO_Init+0xd8>)
 800327c:	f043 0302 	orr.w	r3, r3, #2
 8003280:	6313      	str	r3, [r2, #48]	; 0x30
 8003282:	4b1e      	ldr	r3, [pc, #120]	; (80032fc <MX_GPIO_Init+0xd8>)
 8003284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	603b      	str	r3, [r7, #0]
 800328c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GLOBAL_EN_GPIO_Port, GLOBAL_EN_Pin, GPIO_PIN_RESET);
 800328e:	2200      	movs	r2, #0
 8003290:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003294:	481a      	ldr	r0, [pc, #104]	; (8003300 <MX_GPIO_Init+0xdc>)
 8003296:	f002 fbf3 	bl	8005a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800329a:	230f      	movs	r3, #15
 800329c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800329e:	2302      	movs	r3, #2
 80032a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a2:	2300      	movs	r3, #0
 80032a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032a6:	2300      	movs	r3, #0
 80032a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80032aa:	2302      	movs	r3, #2
 80032ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ae:	f107 030c 	add.w	r3, r7, #12
 80032b2:	4619      	mov	r1, r3
 80032b4:	4812      	ldr	r0, [pc, #72]	; (8003300 <MX_GPIO_Init+0xdc>)
 80032b6:	f002 fa4f 	bl	8005758 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RUN_PG_Pin;
 80032ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032c0:	2300      	movs	r3, #0
 80032c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c4:	2300      	movs	r3, #0
 80032c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(RUN_PG_GPIO_Port, &GPIO_InitStruct);
 80032c8:	f107 030c 	add.w	r3, r7, #12
 80032cc:	4619      	mov	r1, r3
 80032ce:	480d      	ldr	r0, [pc, #52]	; (8003304 <MX_GPIO_Init+0xe0>)
 80032d0:	f002 fa42 	bl	8005758 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GLOBAL_EN_Pin;
 80032d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80032d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80032da:	2311      	movs	r3, #17
 80032dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032de:	2300      	movs	r3, #0
 80032e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032e2:	2300      	movs	r3, #0
 80032e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GLOBAL_EN_GPIO_Port, &GPIO_InitStruct);
 80032e6:	f107 030c 	add.w	r3, r7, #12
 80032ea:	4619      	mov	r1, r3
 80032ec:	4804      	ldr	r0, [pc, #16]	; (8003300 <MX_GPIO_Init+0xdc>)
 80032ee:	f002 fa33 	bl	8005758 <HAL_GPIO_Init>

}
 80032f2:	bf00      	nop
 80032f4:	3720      	adds	r7, #32
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	40023800 	.word	0x40023800
 8003300:	40020000 	.word	0x40020000
 8003304:	40020400 	.word	0x40020400

08003308 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800330c:	f000 ff4e 	bl	80041ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003310:	f000 f820 	bl	8003354 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003314:	f7ff ff86 	bl	8003224 <MX_GPIO_Init>
  MX_DMA_Init();
 8003318:	f7ff fef0 	bl	80030fc <MX_DMA_Init>
  MX_TIM8_Init();
 800331c:	f000 fb18 	bl	8003950 <MX_TIM8_Init>
  MX_TIM2_Init();
 8003320:	f000 fa7c 	bl	800381c <MX_TIM2_Init>
  MX_USART6_UART_Init();
 8003324:	f000 fcc8 	bl	8003cb8 <MX_USART6_UART_Init>
  MX_USART3_UART_Init();
 8003328:	f000 fc9c 	bl	8003c64 <MX_USART3_UART_Init>
  MX_QUADSPI_Init();
 800332c:	f000 f898 	bl	8003460 <MX_QUADSPI_Init>
  MX_TIM3_Init();
 8003330:	f000 fac0 	bl	80038b4 <MX_TIM3_Init>
  MX_CAN1_Init();
 8003334:	f7ff fe3a 	bl	8002fac <MX_CAN1_Init>
  MX_USART1_UART_Init();
 8003338:	f000 fc6a 	bl	8003c10 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */



  threads_init();
 800333c:	f7ff fdbe 	bl	8002ebc <threads_init>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8003340:	f7ff ff4c 	bl	80031dc <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8003344:	f006 fa24 	bl	8009790 <osKernelStart>



  while (1)
  {
	osDelay(1000);
 8003348:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800334c:	f006 fa4c 	bl	80097e8 <osDelay>
 8003350:	e7fa      	b.n	8003348 <main+0x40>
	...

08003354 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b094      	sub	sp, #80	; 0x50
 8003358:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800335a:	f107 031c 	add.w	r3, r7, #28
 800335e:	2234      	movs	r2, #52	; 0x34
 8003360:	2100      	movs	r1, #0
 8003362:	4618      	mov	r0, r3
 8003364:	f008 fa72 	bl	800b84c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003368:	f107 0308 	add.w	r3, r7, #8
 800336c:	2200      	movs	r2, #0
 800336e:	601a      	str	r2, [r3, #0]
 8003370:	605a      	str	r2, [r3, #4]
 8003372:	609a      	str	r2, [r3, #8]
 8003374:	60da      	str	r2, [r3, #12]
 8003376:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003378:	2300      	movs	r3, #0
 800337a:	607b      	str	r3, [r7, #4]
 800337c:	4b29      	ldr	r3, [pc, #164]	; (8003424 <SystemClock_Config+0xd0>)
 800337e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003380:	4a28      	ldr	r2, [pc, #160]	; (8003424 <SystemClock_Config+0xd0>)
 8003382:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003386:	6413      	str	r3, [r2, #64]	; 0x40
 8003388:	4b26      	ldr	r3, [pc, #152]	; (8003424 <SystemClock_Config+0xd0>)
 800338a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003390:	607b      	str	r3, [r7, #4]
 8003392:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003394:	2300      	movs	r3, #0
 8003396:	603b      	str	r3, [r7, #0]
 8003398:	4b23      	ldr	r3, [pc, #140]	; (8003428 <SystemClock_Config+0xd4>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80033a0:	4a21      	ldr	r2, [pc, #132]	; (8003428 <SystemClock_Config+0xd4>)
 80033a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033a6:	6013      	str	r3, [r2, #0]
 80033a8:	4b1f      	ldr	r3, [pc, #124]	; (8003428 <SystemClock_Config+0xd4>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80033b0:	603b      	str	r3, [r7, #0]
 80033b2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80033b4:	2302      	movs	r3, #2
 80033b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80033b8:	2301      	movs	r3, #1
 80033ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80033bc:	2310      	movs	r3, #16
 80033be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80033c0:	2302      	movs	r3, #2
 80033c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80033c4:	2300      	movs	r3, #0
 80033c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80033c8:	2308      	movs	r3, #8
 80033ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 80033cc:	2348      	movs	r3, #72	; 0x48
 80033ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80033d0:	2302      	movs	r3, #2
 80033d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80033d4:	2303      	movs	r3, #3
 80033d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80033d8:	2302      	movs	r3, #2
 80033da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80033dc:	f107 031c 	add.w	r3, r7, #28
 80033e0:	4618      	mov	r0, r3
 80033e2:	f003 fd71 	bl	8006ec8 <HAL_RCC_OscConfig>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d001      	beq.n	80033f0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80033ec:	f000 f830 	bl	8003450 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80033f0:	230f      	movs	r3, #15
 80033f2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80033f4:	2302      	movs	r3, #2
 80033f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80033f8:	2300      	movs	r3, #0
 80033fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80033fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003400:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003402:	2300      	movs	r3, #0
 8003404:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003406:	f107 0308 	add.w	r3, r7, #8
 800340a:	2102      	movs	r1, #2
 800340c:	4618      	mov	r0, r3
 800340e:	f003 fab3 	bl	8006978 <HAL_RCC_ClockConfig>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d001      	beq.n	800341c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8003418:	f000 f81a 	bl	8003450 <Error_Handler>
  }
}
 800341c:	bf00      	nop
 800341e:	3750      	adds	r7, #80	; 0x50
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	40023800 	.word	0x40023800
 8003428:	40007000 	.word	0x40007000

0800342c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a04      	ldr	r2, [pc, #16]	; (800344c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d101      	bne.n	8003442 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800343e:	f000 fed7 	bl	80041f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003442:	bf00      	nop
 8003444:	3708      	adds	r7, #8
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	40010000 	.word	0x40010000

08003450 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003450:	b480      	push	{r7}
 8003452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003454:	bf00      	nop
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
	...

08003460 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0

  hqspi.Instance = QUADSPI;
 8003464:	4b12      	ldr	r3, [pc, #72]	; (80034b0 <MX_QUADSPI_Init+0x50>)
 8003466:	4a13      	ldr	r2, [pc, #76]	; (80034b4 <MX_QUADSPI_Init+0x54>)
 8003468:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 100;
 800346a:	4b11      	ldr	r3, [pc, #68]	; (80034b0 <MX_QUADSPI_Init+0x50>)
 800346c:	2264      	movs	r2, #100	; 0x64
 800346e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8003470:	4b0f      	ldr	r3, [pc, #60]	; (80034b0 <MX_QUADSPI_Init+0x50>)
 8003472:	2201      	movs	r2, #1
 8003474:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8003476:	4b0e      	ldr	r3, [pc, #56]	; (80034b0 <MX_QUADSPI_Init+0x50>)
 8003478:	2200      	movs	r2, #0
 800347a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 26;
 800347c:	4b0c      	ldr	r3, [pc, #48]	; (80034b0 <MX_QUADSPI_Init+0x50>)
 800347e:	221a      	movs	r2, #26
 8003480:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8003482:	4b0b      	ldr	r3, [pc, #44]	; (80034b0 <MX_QUADSPI_Init+0x50>)
 8003484:	2200      	movs	r2, #0
 8003486:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8003488:	4b09      	ldr	r3, [pc, #36]	; (80034b0 <MX_QUADSPI_Init+0x50>)
 800348a:	2200      	movs	r2, #0
 800348c:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800348e:	4b08      	ldr	r3, [pc, #32]	; (80034b0 <MX_QUADSPI_Init+0x50>)
 8003490:	2200      	movs	r2, #0
 8003492:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8003494:	4b06      	ldr	r3, [pc, #24]	; (80034b0 <MX_QUADSPI_Init+0x50>)
 8003496:	2200      	movs	r2, #0
 8003498:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800349a:	4805      	ldr	r0, [pc, #20]	; (80034b0 <MX_QUADSPI_Init+0x50>)
 800349c:	f002 fb0a 	bl	8005ab4 <HAL_QSPI_Init>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80034a6:	f7ff ffd3 	bl	8003450 <Error_Handler>
  }

}
 80034aa:	bf00      	nop
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	20009adc 	.word	0x20009adc
 80034b4:	a0001000 	.word	0xa0001000

080034b8 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b08a      	sub	sp, #40	; 0x28
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034c0:	f107 0314 	add.w	r3, r7, #20
 80034c4:	2200      	movs	r2, #0
 80034c6:	601a      	str	r2, [r3, #0]
 80034c8:	605a      	str	r2, [r3, #4]
 80034ca:	609a      	str	r2, [r3, #8]
 80034cc:	60da      	str	r2, [r3, #12]
 80034ce:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a34      	ldr	r2, [pc, #208]	; (80035a8 <HAL_QSPI_MspInit+0xf0>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d162      	bne.n	80035a0 <HAL_QSPI_MspInit+0xe8>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80034da:	2300      	movs	r3, #0
 80034dc:	613b      	str	r3, [r7, #16]
 80034de:	4b33      	ldr	r3, [pc, #204]	; (80035ac <HAL_QSPI_MspInit+0xf4>)
 80034e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e2:	4a32      	ldr	r2, [pc, #200]	; (80035ac <HAL_QSPI_MspInit+0xf4>)
 80034e4:	f043 0302 	orr.w	r3, r3, #2
 80034e8:	6393      	str	r3, [r2, #56]	; 0x38
 80034ea:	4b30      	ldr	r3, [pc, #192]	; (80035ac <HAL_QSPI_MspInit+0xf4>)
 80034ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	613b      	str	r3, [r7, #16]
 80034f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034f6:	2300      	movs	r3, #0
 80034f8:	60fb      	str	r3, [r7, #12]
 80034fa:	4b2c      	ldr	r3, [pc, #176]	; (80035ac <HAL_QSPI_MspInit+0xf4>)
 80034fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fe:	4a2b      	ldr	r2, [pc, #172]	; (80035ac <HAL_QSPI_MspInit+0xf4>)
 8003500:	f043 0302 	orr.w	r3, r3, #2
 8003504:	6313      	str	r3, [r2, #48]	; 0x30
 8003506:	4b29      	ldr	r3, [pc, #164]	; (80035ac <HAL_QSPI_MspInit+0xf4>)
 8003508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	60fb      	str	r3, [r7, #12]
 8003510:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003512:	2300      	movs	r3, #0
 8003514:	60bb      	str	r3, [r7, #8]
 8003516:	4b25      	ldr	r3, [pc, #148]	; (80035ac <HAL_QSPI_MspInit+0xf4>)
 8003518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351a:	4a24      	ldr	r2, [pc, #144]	; (80035ac <HAL_QSPI_MspInit+0xf4>)
 800351c:	f043 0304 	orr.w	r3, r3, #4
 8003520:	6313      	str	r3, [r2, #48]	; 0x30
 8003522:	4b22      	ldr	r3, [pc, #136]	; (80035ac <HAL_QSPI_MspInit+0xf4>)
 8003524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003526:	f003 0304 	and.w	r3, r3, #4
 800352a:	60bb      	str	r3, [r7, #8]
 800352c:	68bb      	ldr	r3, [r7, #8]
    PB2     ------> QUADSPI_CLK
    PC9     ------> QUADSPI_BK1_IO0
    PC10     ------> QUADSPI_BK1_IO1
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800352e:	2304      	movs	r3, #4
 8003530:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003532:	2302      	movs	r3, #2
 8003534:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003536:	2300      	movs	r3, #0
 8003538:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800353a:	2303      	movs	r3, #3
 800353c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 800353e:	2309      	movs	r3, #9
 8003540:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003542:	f107 0314 	add.w	r3, r7, #20
 8003546:	4619      	mov	r1, r3
 8003548:	4819      	ldr	r0, [pc, #100]	; (80035b0 <HAL_QSPI_MspInit+0xf8>)
 800354a:	f002 f905 	bl	8005758 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800354e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003552:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003554:	2302      	movs	r3, #2
 8003556:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003558:	2300      	movs	r3, #0
 800355a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800355c:	2303      	movs	r3, #3
 800355e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8003560:	2309      	movs	r3, #9
 8003562:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003564:	f107 0314 	add.w	r3, r7, #20
 8003568:	4619      	mov	r1, r3
 800356a:	4812      	ldr	r0, [pc, #72]	; (80035b4 <HAL_QSPI_MspInit+0xfc>)
 800356c:	f002 f8f4 	bl	8005758 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003570:	2340      	movs	r3, #64	; 0x40
 8003572:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003574:	2302      	movs	r3, #2
 8003576:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003578:	2300      	movs	r3, #0
 800357a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800357c:	2303      	movs	r3, #3
 800357e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8003580:	230a      	movs	r3, #10
 8003582:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003584:	f107 0314 	add.w	r3, r7, #20
 8003588:	4619      	mov	r1, r3
 800358a:	4809      	ldr	r0, [pc, #36]	; (80035b0 <HAL_QSPI_MspInit+0xf8>)
 800358c:	f002 f8e4 	bl	8005758 <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 5, 0);
 8003590:	2200      	movs	r2, #0
 8003592:	2105      	movs	r1, #5
 8003594:	205c      	movs	r0, #92	; 0x5c
 8003596:	f001 fcb3 	bl	8004f00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 800359a:	205c      	movs	r0, #92	; 0x5c
 800359c:	f001 fccc 	bl	8004f38 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 80035a0:	bf00      	nop
 80035a2:	3728      	adds	r7, #40	; 0x28
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	a0001000 	.word	0xa0001000
 80035ac:	40023800 	.word	0x40023800
 80035b0:	40020400 	.word	0x40020400
 80035b4:	40020800 	.word	0x40020800

080035b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035be:	2300      	movs	r3, #0
 80035c0:	607b      	str	r3, [r7, #4]
 80035c2:	4b12      	ldr	r3, [pc, #72]	; (800360c <HAL_MspInit+0x54>)
 80035c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c6:	4a11      	ldr	r2, [pc, #68]	; (800360c <HAL_MspInit+0x54>)
 80035c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035cc:	6453      	str	r3, [r2, #68]	; 0x44
 80035ce:	4b0f      	ldr	r3, [pc, #60]	; (800360c <HAL_MspInit+0x54>)
 80035d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035d6:	607b      	str	r3, [r7, #4]
 80035d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035da:	2300      	movs	r3, #0
 80035dc:	603b      	str	r3, [r7, #0]
 80035de:	4b0b      	ldr	r3, [pc, #44]	; (800360c <HAL_MspInit+0x54>)
 80035e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e2:	4a0a      	ldr	r2, [pc, #40]	; (800360c <HAL_MspInit+0x54>)
 80035e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035e8:	6413      	str	r3, [r2, #64]	; 0x40
 80035ea:	4b08      	ldr	r3, [pc, #32]	; (800360c <HAL_MspInit+0x54>)
 80035ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f2:	603b      	str	r3, [r7, #0]
 80035f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80035f6:	2200      	movs	r2, #0
 80035f8:	210f      	movs	r1, #15
 80035fa:	f06f 0001 	mvn.w	r0, #1
 80035fe:	f001 fc7f 	bl	8004f00 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003602:	bf00      	nop
 8003604:	3708      	adds	r7, #8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	40023800 	.word	0x40023800

08003610 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b08c      	sub	sp, #48	; 0x30
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003618:	2300      	movs	r3, #0
 800361a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800361c:	2300      	movs	r3, #0
 800361e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8003620:	2200      	movs	r2, #0
 8003622:	6879      	ldr	r1, [r7, #4]
 8003624:	2019      	movs	r0, #25
 8003626:	f001 fc6b 	bl	8004f00 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800362a:	2019      	movs	r0, #25
 800362c:	f001 fc84 	bl	8004f38 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003630:	2300      	movs	r3, #0
 8003632:	60fb      	str	r3, [r7, #12]
 8003634:	4b1e      	ldr	r3, [pc, #120]	; (80036b0 <HAL_InitTick+0xa0>)
 8003636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003638:	4a1d      	ldr	r2, [pc, #116]	; (80036b0 <HAL_InitTick+0xa0>)
 800363a:	f043 0301 	orr.w	r3, r3, #1
 800363e:	6453      	str	r3, [r2, #68]	; 0x44
 8003640:	4b1b      	ldr	r3, [pc, #108]	; (80036b0 <HAL_InitTick+0xa0>)
 8003642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003644:	f003 0301 	and.w	r3, r3, #1
 8003648:	60fb      	str	r3, [r7, #12]
 800364a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800364c:	f107 0210 	add.w	r2, r7, #16
 8003650:	f107 0314 	add.w	r3, r7, #20
 8003654:	4611      	mov	r1, r2
 8003656:	4618      	mov	r0, r3
 8003658:	f003 faa8 	bl	8006bac <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800365c:	f003 fa92 	bl	8006b84 <HAL_RCC_GetPCLK2Freq>
 8003660:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003664:	4a13      	ldr	r2, [pc, #76]	; (80036b4 <HAL_InitTick+0xa4>)
 8003666:	fba2 2303 	umull	r2, r3, r2, r3
 800366a:	0c9b      	lsrs	r3, r3, #18
 800366c:	3b01      	subs	r3, #1
 800366e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003670:	4b11      	ldr	r3, [pc, #68]	; (80036b8 <HAL_InitTick+0xa8>)
 8003672:	4a12      	ldr	r2, [pc, #72]	; (80036bc <HAL_InitTick+0xac>)
 8003674:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8003676:	4b10      	ldr	r3, [pc, #64]	; (80036b8 <HAL_InitTick+0xa8>)
 8003678:	f240 32e7 	movw	r2, #999	; 0x3e7
 800367c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800367e:	4a0e      	ldr	r2, [pc, #56]	; (80036b8 <HAL_InitTick+0xa8>)
 8003680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003682:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003684:	4b0c      	ldr	r3, [pc, #48]	; (80036b8 <HAL_InitTick+0xa8>)
 8003686:	2200      	movs	r2, #0
 8003688:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800368a:	4b0b      	ldr	r3, [pc, #44]	; (80036b8 <HAL_InitTick+0xa8>)
 800368c:	2200      	movs	r2, #0
 800368e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003690:	4809      	ldr	r0, [pc, #36]	; (80036b8 <HAL_InitTick+0xa8>)
 8003692:	f003 fe73 	bl	800737c <HAL_TIM_Base_Init>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d104      	bne.n	80036a6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800369c:	4806      	ldr	r0, [pc, #24]	; (80036b8 <HAL_InitTick+0xa8>)
 800369e:	f003 fe98 	bl	80073d2 <HAL_TIM_Base_Start_IT>
 80036a2:	4603      	mov	r3, r0
 80036a4:	e000      	b.n	80036a8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3730      	adds	r7, #48	; 0x30
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	40023800 	.word	0x40023800
 80036b4:	431bde83 	.word	0x431bde83
 80036b8:	20009b28 	.word	0x20009b28
 80036bc:	40010000 	.word	0x40010000

080036c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036c0:	b480      	push	{r7}
 80036c2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80036c4:	bf00      	nop
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr

080036ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036ce:	b580      	push	{r7, lr}
 80036d0:	af00      	add	r7, sp, #0
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */

	  led_set_color(LED_WHITE);
 80036d2:	222f      	movs	r2, #47	; 0x2f
 80036d4:	212f      	movs	r1, #47	; 0x2f
 80036d6:	202f      	movs	r0, #47	; 0x2f
 80036d8:	f7fe fb24 	bl	8001d24 <led_set_color>
 80036dc:	e7f9      	b.n	80036d2 <HardFault_Handler+0x4>

080036de <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036de:	b480      	push	{r7}
 80036e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80036e2:	e7fe      	b.n	80036e2 <MemManage_Handler+0x4>

080036e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80036e4:	b480      	push	{r7}
 80036e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80036e8:	e7fe      	b.n	80036e8 <BusFault_Handler+0x4>

080036ea <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80036ea:	b480      	push	{r7}
 80036ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036ee:	e7fe      	b.n	80036ee <UsageFault_Handler+0x4>

080036f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036f0:	b480      	push	{r7}
 80036f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036f4:	bf00      	nop
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
	...

08003700 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003704:	4802      	ldr	r0, [pc, #8]	; (8003710 <DMA1_Stream1_IRQHandler+0x10>)
 8003706:	f001 fdbd 	bl	8005284 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800370a:	bf00      	nop
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	20009c88 	.word	0x20009c88

08003714 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003718:	4802      	ldr	r0, [pc, #8]	; (8003724 <DMA1_Stream3_IRQHandler+0x10>)
 800371a:	f001 fdb3 	bl	8005284 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800371e:	bf00      	nop
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	20009d28 	.word	0x20009d28

08003728 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800372c:	4802      	ldr	r0, [pc, #8]	; (8003738 <CAN1_RX0_IRQHandler+0x10>)
 800372e:	f001 f8ff 	bl	8004930 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003732:	bf00      	nop
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	2000985c 	.word	0x2000985c

0800373c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003740:	4802      	ldr	r0, [pc, #8]	; (800374c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003742:	f003 fe9f 	bl	8007484 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003746:	bf00      	nop
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	20009b28 	.word	0x20009b28

08003750 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003754:	4802      	ldr	r0, [pc, #8]	; (8003760 <USART1_IRQHandler+0x10>)
 8003756:	f004 fef9 	bl	800854c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800375a:	bf00      	nop
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	20009ea8 	.word	0x20009ea8

08003764 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003768:	4802      	ldr	r0, [pc, #8]	; (8003774 <USART3_IRQHandler+0x10>)
 800376a:	f004 feef 	bl	800854c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800376e:	bf00      	nop
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	20009ce8 	.word	0x20009ce8

08003778 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 800377c:	4802      	ldr	r0, [pc, #8]	; (8003788 <DMA2_Stream2_IRQHandler+0x10>)
 800377e:	f001 fd81 	bl	8005284 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003782:	bf00      	nop
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	20009c28 	.word	0x20009c28

0800378c <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003790:	4802      	ldr	r0, [pc, #8]	; (800379c <DMA2_Stream5_IRQHandler+0x10>)
 8003792:	f001 fd77 	bl	8005284 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8003796:	bf00      	nop
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	20009e48 	.word	0x20009e48

080037a0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 80037a4:	4802      	ldr	r0, [pc, #8]	; (80037b0 <DMA2_Stream6_IRQHandler+0x10>)
 80037a6:	f001 fd6d 	bl	8005284 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80037aa:	bf00      	nop
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	20009de8 	.word	0x20009de8

080037b4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80037b8:	4802      	ldr	r0, [pc, #8]	; (80037c4 <DMA2_Stream7_IRQHandler+0x10>)
 80037ba:	f001 fd63 	bl	8005284 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80037be:	bf00      	nop
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	20009d88 	.word	0x20009d88

080037c8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80037cc:	4802      	ldr	r0, [pc, #8]	; (80037d8 <USART6_IRQHandler+0x10>)
 80037ce:	f004 febd 	bl	800854c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80037d2:	bf00      	nop
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	20009ee8 	.word	0x20009ee8

080037dc <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 80037e0:	4802      	ldr	r0, [pc, #8]	; (80037ec <QUADSPI_IRQHandler+0x10>)
 80037e2:	f002 f9e3 	bl	8005bac <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 80037e6:	bf00      	nop
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	20009adc 	.word	0x20009adc

080037f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80037f4:	4b08      	ldr	r3, [pc, #32]	; (8003818 <SystemInit+0x28>)
 80037f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037fa:	4a07      	ldr	r2, [pc, #28]	; (8003818 <SystemInit+0x28>)
 80037fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003800:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003804:	4b04      	ldr	r3, [pc, #16]	; (8003818 <SystemInit+0x28>)
 8003806:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800380a:	609a      	str	r2, [r3, #8]
#endif
}
 800380c:	bf00      	nop
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	e000ed00 	.word	0xe000ed00

0800381c <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003822:	f107 0308 	add.w	r3, r7, #8
 8003826:	2200      	movs	r2, #0
 8003828:	601a      	str	r2, [r3, #0]
 800382a:	605a      	str	r2, [r3, #4]
 800382c:	609a      	str	r2, [r3, #8]
 800382e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003830:	463b      	mov	r3, r7
 8003832:	2200      	movs	r2, #0
 8003834:	601a      	str	r2, [r3, #0]
 8003836:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8003838:	4b1d      	ldr	r3, [pc, #116]	; (80038b0 <MX_TIM2_Init+0x94>)
 800383a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800383e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 49;
 8003840:	4b1b      	ldr	r3, [pc, #108]	; (80038b0 <MX_TIM2_Init+0x94>)
 8003842:	2231      	movs	r2, #49	; 0x31
 8003844:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8003846:	4b1a      	ldr	r3, [pc, #104]	; (80038b0 <MX_TIM2_Init+0x94>)
 8003848:	2210      	movs	r2, #16
 800384a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800384c:	4b18      	ldr	r3, [pc, #96]	; (80038b0 <MX_TIM2_Init+0x94>)
 800384e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003852:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003854:	4b16      	ldr	r3, [pc, #88]	; (80038b0 <MX_TIM2_Init+0x94>)
 8003856:	2200      	movs	r2, #0
 8003858:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800385a:	4b15      	ldr	r3, [pc, #84]	; (80038b0 <MX_TIM2_Init+0x94>)
 800385c:	2200      	movs	r2, #0
 800385e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003860:	4813      	ldr	r0, [pc, #76]	; (80038b0 <MX_TIM2_Init+0x94>)
 8003862:	f003 fd8b 	bl	800737c <HAL_TIM_Base_Init>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d001      	beq.n	8003870 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800386c:	f7ff fdf0 	bl	8003450 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003870:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003874:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003876:	f107 0308 	add.w	r3, r7, #8
 800387a:	4619      	mov	r1, r3
 800387c:	480c      	ldr	r0, [pc, #48]	; (80038b0 <MX_TIM2_Init+0x94>)
 800387e:	f003 ffcf 	bl	8007820 <HAL_TIM_ConfigClockSource>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d001      	beq.n	800388c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003888:	f7ff fde2 	bl	8003450 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800388c:	2300      	movs	r3, #0
 800388e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003890:	2300      	movs	r3, #0
 8003892:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003894:	463b      	mov	r3, r7
 8003896:	4619      	mov	r1, r3
 8003898:	4805      	ldr	r0, [pc, #20]	; (80038b0 <MX_TIM2_Init+0x94>)
 800389a:	f004 fbc1 	bl	8008020 <HAL_TIMEx_MasterConfigSynchronization>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d001      	beq.n	80038a8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80038a4:	f7ff fdd4 	bl	8003450 <Error_Handler>
  }

}
 80038a8:	bf00      	nop
 80038aa:	3718      	adds	r7, #24
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	20009be8 	.word	0x20009be8

080038b4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b086      	sub	sp, #24
 80038b8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80038ba:	f107 0308 	add.w	r3, r7, #8
 80038be:	2200      	movs	r2, #0
 80038c0:	601a      	str	r2, [r3, #0]
 80038c2:	605a      	str	r2, [r3, #4]
 80038c4:	609a      	str	r2, [r3, #8]
 80038c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038c8:	463b      	mov	r3, r7
 80038ca:	2200      	movs	r2, #0
 80038cc:	601a      	str	r2, [r3, #0]
 80038ce:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 80038d0:	4b1d      	ldr	r3, [pc, #116]	; (8003948 <MX_TIM3_Init+0x94>)
 80038d2:	4a1e      	ldr	r2, [pc, #120]	; (800394c <MX_TIM3_Init+0x98>)
 80038d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80038d6:	4b1c      	ldr	r3, [pc, #112]	; (8003948 <MX_TIM3_Init+0x94>)
 80038d8:	2200      	movs	r2, #0
 80038da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038dc:	4b1a      	ldr	r3, [pc, #104]	; (8003948 <MX_TIM3_Init+0x94>)
 80038de:	2200      	movs	r2, #0
 80038e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1125;
 80038e2:	4b19      	ldr	r3, [pc, #100]	; (8003948 <MX_TIM3_Init+0x94>)
 80038e4:	f240 4265 	movw	r2, #1125	; 0x465
 80038e8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038ea:	4b17      	ldr	r3, [pc, #92]	; (8003948 <MX_TIM3_Init+0x94>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038f0:	4b15      	ldr	r3, [pc, #84]	; (8003948 <MX_TIM3_Init+0x94>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80038f6:	4814      	ldr	r0, [pc, #80]	; (8003948 <MX_TIM3_Init+0x94>)
 80038f8:	f003 fd40 	bl	800737c <HAL_TIM_Base_Init>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8003902:	f7ff fda5 	bl	8003450 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003906:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800390a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800390c:	f107 0308 	add.w	r3, r7, #8
 8003910:	4619      	mov	r1, r3
 8003912:	480d      	ldr	r0, [pc, #52]	; (8003948 <MX_TIM3_Init+0x94>)
 8003914:	f003 ff84 	bl	8007820 <HAL_TIM_ConfigClockSource>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800391e:	f7ff fd97 	bl	8003450 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003922:	2320      	movs	r3, #32
 8003924:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003926:	2300      	movs	r3, #0
 8003928:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800392a:	463b      	mov	r3, r7
 800392c:	4619      	mov	r1, r3
 800392e:	4806      	ldr	r0, [pc, #24]	; (8003948 <MX_TIM3_Init+0x94>)
 8003930:	f004 fb76 	bl	8008020 <HAL_TIMEx_MasterConfigSynchronization>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800393a:	f7ff fd89 	bl	8003450 <Error_Handler>
  }

}
 800393e:	bf00      	nop
 8003940:	3718      	adds	r7, #24
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	20009ba8 	.word	0x20009ba8
 800394c:	40000400 	.word	0x40000400

08003950 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b096      	sub	sp, #88	; 0x58
 8003954:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003956:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800395a:	2200      	movs	r2, #0
 800395c:	601a      	str	r2, [r3, #0]
 800395e:	605a      	str	r2, [r3, #4]
 8003960:	609a      	str	r2, [r3, #8]
 8003962:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003964:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003968:	2200      	movs	r2, #0
 800396a:	601a      	str	r2, [r3, #0]
 800396c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800396e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003972:	2200      	movs	r2, #0
 8003974:	601a      	str	r2, [r3, #0]
 8003976:	605a      	str	r2, [r3, #4]
 8003978:	609a      	str	r2, [r3, #8]
 800397a:	60da      	str	r2, [r3, #12]
 800397c:	611a      	str	r2, [r3, #16]
 800397e:	615a      	str	r2, [r3, #20]
 8003980:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003982:	1d3b      	adds	r3, r7, #4
 8003984:	2220      	movs	r2, #32
 8003986:	2100      	movs	r1, #0
 8003988:	4618      	mov	r0, r3
 800398a:	f007 ff5f 	bl	800b84c <memset>

  htim8.Instance = TIM8;
 800398e:	4b4b      	ldr	r3, [pc, #300]	; (8003abc <MX_TIM8_Init+0x16c>)
 8003990:	4a4b      	ldr	r2, [pc, #300]	; (8003ac0 <MX_TIM8_Init+0x170>)
 8003992:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003994:	4b49      	ldr	r3, [pc, #292]	; (8003abc <MX_TIM8_Init+0x16c>)
 8003996:	2200      	movs	r2, #0
 8003998:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800399a:	4b48      	ldr	r3, [pc, #288]	; (8003abc <MX_TIM8_Init+0x16c>)
 800399c:	2200      	movs	r2, #0
 800399e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 255;
 80039a0:	4b46      	ldr	r3, [pc, #280]	; (8003abc <MX_TIM8_Init+0x16c>)
 80039a2:	22ff      	movs	r2, #255	; 0xff
 80039a4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039a6:	4b45      	ldr	r3, [pc, #276]	; (8003abc <MX_TIM8_Init+0x16c>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80039ac:	4b43      	ldr	r3, [pc, #268]	; (8003abc <MX_TIM8_Init+0x16c>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039b2:	4b42      	ldr	r3, [pc, #264]	; (8003abc <MX_TIM8_Init+0x16c>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80039b8:	4840      	ldr	r0, [pc, #256]	; (8003abc <MX_TIM8_Init+0x16c>)
 80039ba:	f003 fcdf 	bl	800737c <HAL_TIM_Base_Init>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d001      	beq.n	80039c8 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 80039c4:	f7ff fd44 	bl	8003450 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039cc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80039ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80039d2:	4619      	mov	r1, r3
 80039d4:	4839      	ldr	r0, [pc, #228]	; (8003abc <MX_TIM8_Init+0x16c>)
 80039d6:	f003 ff23 	bl	8007820 <HAL_TIM_ConfigClockSource>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 80039e0:	f7ff fd36 	bl	8003450 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80039e4:	4835      	ldr	r0, [pc, #212]	; (8003abc <MX_TIM8_Init+0x16c>)
 80039e6:	f003 fd18 	bl	800741a <HAL_TIM_PWM_Init>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d001      	beq.n	80039f4 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80039f0:	f7ff fd2e 	bl	8003450 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039f4:	2300      	movs	r3, #0
 80039f6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039f8:	2300      	movs	r3, #0
 80039fa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80039fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003a00:	4619      	mov	r1, r3
 8003a02:	482e      	ldr	r0, [pc, #184]	; (8003abc <MX_TIM8_Init+0x16c>)
 8003a04:	f004 fb0c 	bl	8008020 <HAL_TIMEx_MasterConfigSynchronization>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d001      	beq.n	8003a12 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8003a0e:	f7ff fd1f 	bl	8003450 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a12:	2360      	movs	r3, #96	; 0x60
 8003a14:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 128;
 8003a16:	2380      	movs	r3, #128	; 0x80
 8003a18:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8003a1e:	2308      	movs	r3, #8
 8003a20:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a22:	2300      	movs	r3, #0
 8003a24:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003a26:	2300      	movs	r3, #0
 8003a28:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a32:	2200      	movs	r2, #0
 8003a34:	4619      	mov	r1, r3
 8003a36:	4821      	ldr	r0, [pc, #132]	; (8003abc <MX_TIM8_Init+0x16c>)
 8003a38:	f003 fe2c 	bl	8007694 <HAL_TIM_PWM_ConfigChannel>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d001      	beq.n	8003a46 <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 8003a42:	f7ff fd05 	bl	8003450 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003a46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a4a:	2204      	movs	r2, #4
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	481b      	ldr	r0, [pc, #108]	; (8003abc <MX_TIM8_Init+0x16c>)
 8003a50:	f003 fe20 	bl	8007694 <HAL_TIM_PWM_ConfigChannel>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 8003a5a:	f7ff fcf9 	bl	8003450 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003a62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a66:	2208      	movs	r2, #8
 8003a68:	4619      	mov	r1, r3
 8003a6a:	4814      	ldr	r0, [pc, #80]	; (8003abc <MX_TIM8_Init+0x16c>)
 8003a6c:	f003 fe12 	bl	8007694 <HAL_TIM_PWM_ConfigChannel>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d001      	beq.n	8003a7a <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 8003a76:	f7ff fceb 	bl	8003450 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003a82:	2300      	movs	r3, #0
 8003a84:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003a86:	2300      	movs	r3, #0
 8003a88:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003a8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a92:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003a94:	2300      	movs	r3, #0
 8003a96:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003a98:	1d3b      	adds	r3, r7, #4
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	4807      	ldr	r0, [pc, #28]	; (8003abc <MX_TIM8_Init+0x16c>)
 8003a9e:	f004 fb3b 	bl	8008118 <HAL_TIMEx_ConfigBreakDeadTime>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d001      	beq.n	8003aac <MX_TIM8_Init+0x15c>
  {
    Error_Handler();
 8003aa8:	f7ff fcd2 	bl	8003450 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 8003aac:	4803      	ldr	r0, [pc, #12]	; (8003abc <MX_TIM8_Init+0x16c>)
 8003aae:	f000 f855 	bl	8003b5c <HAL_TIM_MspPostInit>

}
 8003ab2:	bf00      	nop
 8003ab4:	3758      	adds	r7, #88	; 0x58
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	20009b68 	.word	0x20009b68
 8003ac0:	40010400 	.word	0x40010400

08003ac4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b087      	sub	sp, #28
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ad4:	d10e      	bne.n	8003af4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	617b      	str	r3, [r7, #20]
 8003ada:	4b1d      	ldr	r3, [pc, #116]	; (8003b50 <HAL_TIM_Base_MspInit+0x8c>)
 8003adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ade:	4a1c      	ldr	r2, [pc, #112]	; (8003b50 <HAL_TIM_Base_MspInit+0x8c>)
 8003ae0:	f043 0301 	orr.w	r3, r3, #1
 8003ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ae6:	4b1a      	ldr	r3, [pc, #104]	; (8003b50 <HAL_TIM_Base_MspInit+0x8c>)
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	617b      	str	r3, [r7, #20]
 8003af0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8003af2:	e026      	b.n	8003b42 <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM3)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a16      	ldr	r2, [pc, #88]	; (8003b54 <HAL_TIM_Base_MspInit+0x90>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d10e      	bne.n	8003b1c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003afe:	2300      	movs	r3, #0
 8003b00:	613b      	str	r3, [r7, #16]
 8003b02:	4b13      	ldr	r3, [pc, #76]	; (8003b50 <HAL_TIM_Base_MspInit+0x8c>)
 8003b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b06:	4a12      	ldr	r2, [pc, #72]	; (8003b50 <HAL_TIM_Base_MspInit+0x8c>)
 8003b08:	f043 0302 	orr.w	r3, r3, #2
 8003b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b0e:	4b10      	ldr	r3, [pc, #64]	; (8003b50 <HAL_TIM_Base_MspInit+0x8c>)
 8003b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	613b      	str	r3, [r7, #16]
 8003b18:	693b      	ldr	r3, [r7, #16]
}
 8003b1a:	e012      	b.n	8003b42 <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM8)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a0d      	ldr	r2, [pc, #52]	; (8003b58 <HAL_TIM_Base_MspInit+0x94>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d10d      	bne.n	8003b42 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003b26:	2300      	movs	r3, #0
 8003b28:	60fb      	str	r3, [r7, #12]
 8003b2a:	4b09      	ldr	r3, [pc, #36]	; (8003b50 <HAL_TIM_Base_MspInit+0x8c>)
 8003b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b2e:	4a08      	ldr	r2, [pc, #32]	; (8003b50 <HAL_TIM_Base_MspInit+0x8c>)
 8003b30:	f043 0302 	orr.w	r3, r3, #2
 8003b34:	6453      	str	r3, [r2, #68]	; 0x44
 8003b36:	4b06      	ldr	r3, [pc, #24]	; (8003b50 <HAL_TIM_Base_MspInit+0x8c>)
 8003b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	60fb      	str	r3, [r7, #12]
 8003b40:	68fb      	ldr	r3, [r7, #12]
}
 8003b42:	bf00      	nop
 8003b44:	371c      	adds	r7, #28
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	40023800 	.word	0x40023800
 8003b54:	40000400 	.word	0x40000400
 8003b58:	40010400 	.word	0x40010400

08003b5c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b08a      	sub	sp, #40	; 0x28
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b64:	f107 0314 	add.w	r3, r7, #20
 8003b68:	2200      	movs	r2, #0
 8003b6a:	601a      	str	r2, [r3, #0]
 8003b6c:	605a      	str	r2, [r3, #4]
 8003b6e:	609a      	str	r2, [r3, #8]
 8003b70:	60da      	str	r2, [r3, #12]
 8003b72:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a21      	ldr	r2, [pc, #132]	; (8003c00 <HAL_TIM_MspPostInit+0xa4>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d13c      	bne.n	8003bf8 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b7e:	2300      	movs	r3, #0
 8003b80:	613b      	str	r3, [r7, #16]
 8003b82:	4b20      	ldr	r3, [pc, #128]	; (8003c04 <HAL_TIM_MspPostInit+0xa8>)
 8003b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b86:	4a1f      	ldr	r2, [pc, #124]	; (8003c04 <HAL_TIM_MspPostInit+0xa8>)
 8003b88:	f043 0301 	orr.w	r3, r3, #1
 8003b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b8e:	4b1d      	ldr	r3, [pc, #116]	; (8003c04 <HAL_TIM_MspPostInit+0xa8>)
 8003b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	613b      	str	r3, [r7, #16]
 8003b98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	60fb      	str	r3, [r7, #12]
 8003b9e:	4b19      	ldr	r3, [pc, #100]	; (8003c04 <HAL_TIM_MspPostInit+0xa8>)
 8003ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba2:	4a18      	ldr	r2, [pc, #96]	; (8003c04 <HAL_TIM_MspPostInit+0xa8>)
 8003ba4:	f043 0302 	orr.w	r3, r3, #2
 8003ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8003baa:	4b16      	ldr	r3, [pc, #88]	; (8003c04 <HAL_TIM_MspPostInit+0xa8>)
 8003bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	60fb      	str	r3, [r7, #12]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PA7     ------> TIM8_CH1N
    PB14     ------> TIM8_CH2N
    PB15     ------> TIM8_CH3N
    */
    GPIO_InitStruct.Pin = LED_RED_Pin;
 8003bb6:	2380      	movs	r3, #128	; 0x80
 8003bb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bba:	2302      	movs	r3, #2
 8003bbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8003bca:	f107 0314 	add.w	r3, r7, #20
 8003bce:	4619      	mov	r1, r3
 8003bd0:	480d      	ldr	r0, [pc, #52]	; (8003c08 <HAL_TIM_MspPostInit+0xac>)
 8003bd2:	f001 fdc1 	bl	8005758 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_BLUE_Pin;
 8003bd6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003bda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bdc:	2302      	movs	r3, #2
 8003bde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be0:	2300      	movs	r3, #0
 8003be2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003be4:	2300      	movs	r3, #0
 8003be6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003be8:	2303      	movs	r3, #3
 8003bea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bec:	f107 0314 	add.w	r3, r7, #20
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	4806      	ldr	r0, [pc, #24]	; (8003c0c <HAL_TIM_MspPostInit+0xb0>)
 8003bf4:	f001 fdb0 	bl	8005758 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003bf8:	bf00      	nop
 8003bfa:	3728      	adds	r7, #40	; 0x28
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	40010400 	.word	0x40010400
 8003c04:	40023800 	.word	0x40023800
 8003c08:	40020000 	.word	0x40020000
 8003c0c:	40020400 	.word	0x40020400

08003c10 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8003c14:	4b11      	ldr	r3, [pc, #68]	; (8003c5c <MX_USART1_UART_Init+0x4c>)
 8003c16:	4a12      	ldr	r2, [pc, #72]	; (8003c60 <MX_USART1_UART_Init+0x50>)
 8003c18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003c1a:	4b10      	ldr	r3, [pc, #64]	; (8003c5c <MX_USART1_UART_Init+0x4c>)
 8003c1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003c20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003c22:	4b0e      	ldr	r3, [pc, #56]	; (8003c5c <MX_USART1_UART_Init+0x4c>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003c28:	4b0c      	ldr	r3, [pc, #48]	; (8003c5c <MX_USART1_UART_Init+0x4c>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003c2e:	4b0b      	ldr	r3, [pc, #44]	; (8003c5c <MX_USART1_UART_Init+0x4c>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003c34:	4b09      	ldr	r3, [pc, #36]	; (8003c5c <MX_USART1_UART_Init+0x4c>)
 8003c36:	220c      	movs	r2, #12
 8003c38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c3a:	4b08      	ldr	r3, [pc, #32]	; (8003c5c <MX_USART1_UART_Init+0x4c>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c40:	4b06      	ldr	r3, [pc, #24]	; (8003c5c <MX_USART1_UART_Init+0x4c>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8003c46:	4805      	ldr	r0, [pc, #20]	; (8003c5c <MX_USART1_UART_Init+0x4c>)
 8003c48:	f004 fb3e 	bl	80082c8 <HAL_HalfDuplex_Init>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d001      	beq.n	8003c56 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003c52:	f7ff fbfd 	bl	8003450 <Error_Handler>
  }

}
 8003c56:	bf00      	nop
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	20009ea8 	.word	0x20009ea8
 8003c60:	40011000 	.word	0x40011000

08003c64 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8003c68:	4b11      	ldr	r3, [pc, #68]	; (8003cb0 <MX_USART3_UART_Init+0x4c>)
 8003c6a:	4a12      	ldr	r2, [pc, #72]	; (8003cb4 <MX_USART3_UART_Init+0x50>)
 8003c6c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003c6e:	4b10      	ldr	r3, [pc, #64]	; (8003cb0 <MX_USART3_UART_Init+0x4c>)
 8003c70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003c74:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003c76:	4b0e      	ldr	r3, [pc, #56]	; (8003cb0 <MX_USART3_UART_Init+0x4c>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003c7c:	4b0c      	ldr	r3, [pc, #48]	; (8003cb0 <MX_USART3_UART_Init+0x4c>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003c82:	4b0b      	ldr	r3, [pc, #44]	; (8003cb0 <MX_USART3_UART_Init+0x4c>)
 8003c84:	2200      	movs	r2, #0
 8003c86:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003c88:	4b09      	ldr	r3, [pc, #36]	; (8003cb0 <MX_USART3_UART_Init+0x4c>)
 8003c8a:	220c      	movs	r2, #12
 8003c8c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c8e:	4b08      	ldr	r3, [pc, #32]	; (8003cb0 <MX_USART3_UART_Init+0x4c>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c94:	4b06      	ldr	r3, [pc, #24]	; (8003cb0 <MX_USART3_UART_Init+0x4c>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003c9a:	4805      	ldr	r0, [pc, #20]	; (8003cb0 <MX_USART3_UART_Init+0x4c>)
 8003c9c:	f004 fac7 	bl	800822e <HAL_UART_Init>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d001      	beq.n	8003caa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003ca6:	f7ff fbd3 	bl	8003450 <Error_Handler>
  }

}
 8003caa:	bf00      	nop
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	20009ce8 	.word	0x20009ce8
 8003cb4:	40004800 	.word	0x40004800

08003cb8 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 8003cbc:	4b11      	ldr	r3, [pc, #68]	; (8003d04 <MX_USART6_UART_Init+0x4c>)
 8003cbe:	4a12      	ldr	r2, [pc, #72]	; (8003d08 <MX_USART6_UART_Init+0x50>)
 8003cc0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8003cc2:	4b10      	ldr	r3, [pc, #64]	; (8003d04 <MX_USART6_UART_Init+0x4c>)
 8003cc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003cc8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003cca:	4b0e      	ldr	r3, [pc, #56]	; (8003d04 <MX_USART6_UART_Init+0x4c>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003cd0:	4b0c      	ldr	r3, [pc, #48]	; (8003d04 <MX_USART6_UART_Init+0x4c>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003cd6:	4b0b      	ldr	r3, [pc, #44]	; (8003d04 <MX_USART6_UART_Init+0x4c>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003cdc:	4b09      	ldr	r3, [pc, #36]	; (8003d04 <MX_USART6_UART_Init+0x4c>)
 8003cde:	220c      	movs	r2, #12
 8003ce0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ce2:	4b08      	ldr	r3, [pc, #32]	; (8003d04 <MX_USART6_UART_Init+0x4c>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ce8:	4b06      	ldr	r3, [pc, #24]	; (8003d04 <MX_USART6_UART_Init+0x4c>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003cee:	4805      	ldr	r0, [pc, #20]	; (8003d04 <MX_USART6_UART_Init+0x4c>)
 8003cf0:	f004 fa9d 	bl	800822e <HAL_UART_Init>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d001      	beq.n	8003cfe <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003cfa:	f7ff fba9 	bl	8003450 <Error_Handler>
  }

}
 8003cfe:	bf00      	nop
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	20009ee8 	.word	0x20009ee8
 8003d08:	40011400 	.word	0x40011400

08003d0c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b08e      	sub	sp, #56	; 0x38
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d18:	2200      	movs	r2, #0
 8003d1a:	601a      	str	r2, [r3, #0]
 8003d1c:	605a      	str	r2, [r3, #4]
 8003d1e:	609a      	str	r2, [r3, #8]
 8003d20:	60da      	str	r2, [r3, #12]
 8003d22:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a4b      	ldr	r2, [pc, #300]	; (8003e58 <HAL_UART_MspInit+0x14c>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	f040 80a2 	bne.w	8003e74 <HAL_UART_MspInit+0x168>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003d30:	2300      	movs	r3, #0
 8003d32:	623b      	str	r3, [r7, #32]
 8003d34:	4b49      	ldr	r3, [pc, #292]	; (8003e5c <HAL_UART_MspInit+0x150>)
 8003d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d38:	4a48      	ldr	r2, [pc, #288]	; (8003e5c <HAL_UART_MspInit+0x150>)
 8003d3a:	f043 0310 	orr.w	r3, r3, #16
 8003d3e:	6453      	str	r3, [r2, #68]	; 0x44
 8003d40:	4b46      	ldr	r3, [pc, #280]	; (8003e5c <HAL_UART_MspInit+0x150>)
 8003d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d44:	f003 0310 	and.w	r3, r3, #16
 8003d48:	623b      	str	r3, [r7, #32]
 8003d4a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	61fb      	str	r3, [r7, #28]
 8003d50:	4b42      	ldr	r3, [pc, #264]	; (8003e5c <HAL_UART_MspInit+0x150>)
 8003d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d54:	4a41      	ldr	r2, [pc, #260]	; (8003e5c <HAL_UART_MspInit+0x150>)
 8003d56:	f043 0301 	orr.w	r3, r3, #1
 8003d5a:	6313      	str	r3, [r2, #48]	; 0x30
 8003d5c:	4b3f      	ldr	r3, [pc, #252]	; (8003e5c <HAL_UART_MspInit+0x150>)
 8003d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d60:	f003 0301 	and.w	r3, r3, #1
 8003d64:	61fb      	str	r3, [r7, #28]
 8003d66:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = SERVO_TX_Pin;
 8003d68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d6e:	2312      	movs	r3, #18
 8003d70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d72:	2301      	movs	r3, #1
 8003d74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d76:	2303      	movs	r3, #3
 8003d78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003d7a:	2307      	movs	r3, #7
 8003d7c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SERVO_TX_GPIO_Port, &GPIO_InitStruct);
 8003d7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d82:	4619      	mov	r1, r3
 8003d84:	4836      	ldr	r0, [pc, #216]	; (8003e60 <HAL_UART_MspInit+0x154>)
 8003d86:	f001 fce7 	bl	8005758 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 8003d8a:	4b36      	ldr	r3, [pc, #216]	; (8003e64 <HAL_UART_MspInit+0x158>)
 8003d8c:	4a36      	ldr	r2, [pc, #216]	; (8003e68 <HAL_UART_MspInit+0x15c>)
 8003d8e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003d90:	4b34      	ldr	r3, [pc, #208]	; (8003e64 <HAL_UART_MspInit+0x158>)
 8003d92:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d96:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d98:	4b32      	ldr	r3, [pc, #200]	; (8003e64 <HAL_UART_MspInit+0x158>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d9e:	4b31      	ldr	r3, [pc, #196]	; (8003e64 <HAL_UART_MspInit+0x158>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003da4:	4b2f      	ldr	r3, [pc, #188]	; (8003e64 <HAL_UART_MspInit+0x158>)
 8003da6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003daa:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003dac:	4b2d      	ldr	r3, [pc, #180]	; (8003e64 <HAL_UART_MspInit+0x158>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003db2:	4b2c      	ldr	r3, [pc, #176]	; (8003e64 <HAL_UART_MspInit+0x158>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003db8:	4b2a      	ldr	r3, [pc, #168]	; (8003e64 <HAL_UART_MspInit+0x158>)
 8003dba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003dbe:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003dc0:	4b28      	ldr	r3, [pc, #160]	; (8003e64 <HAL_UART_MspInit+0x158>)
 8003dc2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003dc6:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003dc8:	4b26      	ldr	r3, [pc, #152]	; (8003e64 <HAL_UART_MspInit+0x158>)
 8003dca:	2200      	movs	r2, #0
 8003dcc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003dce:	4825      	ldr	r0, [pc, #148]	; (8003e64 <HAL_UART_MspInit+0x158>)
 8003dd0:	f001 f8c0 	bl	8004f54 <HAL_DMA_Init>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d001      	beq.n	8003dde <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 8003dda:	f7ff fb39 	bl	8003450 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a20      	ldr	r2, [pc, #128]	; (8003e64 <HAL_UART_MspInit+0x158>)
 8003de2:	635a      	str	r2, [r3, #52]	; 0x34
 8003de4:	4a1f      	ldr	r2, [pc, #124]	; (8003e64 <HAL_UART_MspInit+0x158>)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8003dea:	4b20      	ldr	r3, [pc, #128]	; (8003e6c <HAL_UART_MspInit+0x160>)
 8003dec:	4a20      	ldr	r2, [pc, #128]	; (8003e70 <HAL_UART_MspInit+0x164>)
 8003dee:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8003df0:	4b1e      	ldr	r3, [pc, #120]	; (8003e6c <HAL_UART_MspInit+0x160>)
 8003df2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003df6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003df8:	4b1c      	ldr	r3, [pc, #112]	; (8003e6c <HAL_UART_MspInit+0x160>)
 8003dfa:	2240      	movs	r2, #64	; 0x40
 8003dfc:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003dfe:	4b1b      	ldr	r3, [pc, #108]	; (8003e6c <HAL_UART_MspInit+0x160>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003e04:	4b19      	ldr	r3, [pc, #100]	; (8003e6c <HAL_UART_MspInit+0x160>)
 8003e06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e0a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e0c:	4b17      	ldr	r3, [pc, #92]	; (8003e6c <HAL_UART_MspInit+0x160>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e12:	4b16      	ldr	r3, [pc, #88]	; (8003e6c <HAL_UART_MspInit+0x160>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003e18:	4b14      	ldr	r3, [pc, #80]	; (8003e6c <HAL_UART_MspInit+0x160>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003e1e:	4b13      	ldr	r3, [pc, #76]	; (8003e6c <HAL_UART_MspInit+0x160>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e24:	4b11      	ldr	r3, [pc, #68]	; (8003e6c <HAL_UART_MspInit+0x160>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003e2a:	4810      	ldr	r0, [pc, #64]	; (8003e6c <HAL_UART_MspInit+0x160>)
 8003e2c:	f001 f892 	bl	8004f54 <HAL_DMA_Init>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d001      	beq.n	8003e3a <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8003e36:	f7ff fb0b 	bl	8003450 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a0b      	ldr	r2, [pc, #44]	; (8003e6c <HAL_UART_MspInit+0x160>)
 8003e3e:	631a      	str	r2, [r3, #48]	; 0x30
 8003e40:	4a0a      	ldr	r2, [pc, #40]	; (8003e6c <HAL_UART_MspInit+0x160>)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003e46:	2200      	movs	r2, #0
 8003e48:	2105      	movs	r1, #5
 8003e4a:	2025      	movs	r0, #37	; 0x25
 8003e4c:	f001 f858 	bl	8004f00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003e50:	2025      	movs	r0, #37	; 0x25
 8003e52:	f001 f871 	bl	8004f38 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8003e56:	e16d      	b.n	8004134 <HAL_UART_MspInit+0x428>
 8003e58:	40011000 	.word	0x40011000
 8003e5c:	40023800 	.word	0x40023800
 8003e60:	40020000 	.word	0x40020000
 8003e64:	20009e48 	.word	0x20009e48
 8003e68:	40026488 	.word	0x40026488
 8003e6c:	20009d88 	.word	0x20009d88
 8003e70:	400264b8 	.word	0x400264b8
  else if(uartHandle->Instance==USART3)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a5a      	ldr	r2, [pc, #360]	; (8003fe4 <HAL_UART_MspInit+0x2d8>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	f040 80c2 	bne.w	8004004 <HAL_UART_MspInit+0x2f8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003e80:	2300      	movs	r3, #0
 8003e82:	61bb      	str	r3, [r7, #24]
 8003e84:	4b58      	ldr	r3, [pc, #352]	; (8003fe8 <HAL_UART_MspInit+0x2dc>)
 8003e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e88:	4a57      	ldr	r2, [pc, #348]	; (8003fe8 <HAL_UART_MspInit+0x2dc>)
 8003e8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e8e:	6413      	str	r3, [r2, #64]	; 0x40
 8003e90:	4b55      	ldr	r3, [pc, #340]	; (8003fe8 <HAL_UART_MspInit+0x2dc>)
 8003e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e98:	61bb      	str	r3, [r7, #24]
 8003e9a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	617b      	str	r3, [r7, #20]
 8003ea0:	4b51      	ldr	r3, [pc, #324]	; (8003fe8 <HAL_UART_MspInit+0x2dc>)
 8003ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea4:	4a50      	ldr	r2, [pc, #320]	; (8003fe8 <HAL_UART_MspInit+0x2dc>)
 8003ea6:	f043 0304 	orr.w	r3, r3, #4
 8003eaa:	6313      	str	r3, [r2, #48]	; 0x30
 8003eac:	4b4e      	ldr	r3, [pc, #312]	; (8003fe8 <HAL_UART_MspInit+0x2dc>)
 8003eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb0:	f003 0304 	and.w	r3, r3, #4
 8003eb4:	617b      	str	r3, [r7, #20]
 8003eb6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003eb8:	2300      	movs	r3, #0
 8003eba:	613b      	str	r3, [r7, #16]
 8003ebc:	4b4a      	ldr	r3, [pc, #296]	; (8003fe8 <HAL_UART_MspInit+0x2dc>)
 8003ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec0:	4a49      	ldr	r2, [pc, #292]	; (8003fe8 <HAL_UART_MspInit+0x2dc>)
 8003ec2:	f043 0302 	orr.w	r3, r3, #2
 8003ec6:	6313      	str	r3, [r2, #48]	; 0x30
 8003ec8:	4b47      	ldr	r3, [pc, #284]	; (8003fe8 <HAL_UART_MspInit+0x2dc>)
 8003eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ecc:	f003 0302 	and.w	r3, r3, #2
 8003ed0:	613b      	str	r3, [r7, #16]
 8003ed2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = DEBUG_RX_Pin;
 8003ed4:	2320      	movs	r3, #32
 8003ed6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ed8:	2302      	movs	r3, #2
 8003eda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003edc:	2300      	movs	r3, #0
 8003ede:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003ee4:	2307      	movs	r3, #7
 8003ee6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DEBUG_RX_GPIO_Port, &GPIO_InitStruct);
 8003ee8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003eec:	4619      	mov	r1, r3
 8003eee:	483f      	ldr	r0, [pc, #252]	; (8003fec <HAL_UART_MspInit+0x2e0>)
 8003ef0:	f001 fc32 	bl	8005758 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DEBUG_TX_Pin;
 8003ef4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ef8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003efa:	2302      	movs	r3, #2
 8003efc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003efe:	2300      	movs	r3, #0
 8003f00:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f02:	2303      	movs	r3, #3
 8003f04:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003f06:	2307      	movs	r3, #7
 8003f08:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DEBUG_TX_GPIO_Port, &GPIO_InitStruct);
 8003f0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f0e:	4619      	mov	r1, r3
 8003f10:	4837      	ldr	r0, [pc, #220]	; (8003ff0 <HAL_UART_MspInit+0x2e4>)
 8003f12:	f001 fc21 	bl	8005758 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003f16:	4b37      	ldr	r3, [pc, #220]	; (8003ff4 <HAL_UART_MspInit+0x2e8>)
 8003f18:	4a37      	ldr	r2, [pc, #220]	; (8003ff8 <HAL_UART_MspInit+0x2ec>)
 8003f1a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003f1c:	4b35      	ldr	r3, [pc, #212]	; (8003ff4 <HAL_UART_MspInit+0x2e8>)
 8003f1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003f22:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f24:	4b33      	ldr	r3, [pc, #204]	; (8003ff4 <HAL_UART_MspInit+0x2e8>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f2a:	4b32      	ldr	r3, [pc, #200]	; (8003ff4 <HAL_UART_MspInit+0x2e8>)
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003f30:	4b30      	ldr	r3, [pc, #192]	; (8003ff4 <HAL_UART_MspInit+0x2e8>)
 8003f32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f36:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f38:	4b2e      	ldr	r3, [pc, #184]	; (8003ff4 <HAL_UART_MspInit+0x2e8>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f3e:	4b2d      	ldr	r3, [pc, #180]	; (8003ff4 <HAL_UART_MspInit+0x2e8>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8003f44:	4b2b      	ldr	r3, [pc, #172]	; (8003ff4 <HAL_UART_MspInit+0x2e8>)
 8003f46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f4a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003f4c:	4b29      	ldr	r3, [pc, #164]	; (8003ff4 <HAL_UART_MspInit+0x2e8>)
 8003f4e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003f52:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f54:	4b27      	ldr	r3, [pc, #156]	; (8003ff4 <HAL_UART_MspInit+0x2e8>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003f5a:	4826      	ldr	r0, [pc, #152]	; (8003ff4 <HAL_UART_MspInit+0x2e8>)
 8003f5c:	f000 fffa 	bl	8004f54 <HAL_DMA_Init>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d001      	beq.n	8003f6a <HAL_UART_MspInit+0x25e>
      Error_Handler();
 8003f66:	f7ff fa73 	bl	8003450 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a21      	ldr	r2, [pc, #132]	; (8003ff4 <HAL_UART_MspInit+0x2e8>)
 8003f6e:	635a      	str	r2, [r3, #52]	; 0x34
 8003f70:	4a20      	ldr	r2, [pc, #128]	; (8003ff4 <HAL_UART_MspInit+0x2e8>)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8003f76:	4b21      	ldr	r3, [pc, #132]	; (8003ffc <HAL_UART_MspInit+0x2f0>)
 8003f78:	4a21      	ldr	r2, [pc, #132]	; (8004000 <HAL_UART_MspInit+0x2f4>)
 8003f7a:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8003f7c:	4b1f      	ldr	r3, [pc, #124]	; (8003ffc <HAL_UART_MspInit+0x2f0>)
 8003f7e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003f82:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003f84:	4b1d      	ldr	r3, [pc, #116]	; (8003ffc <HAL_UART_MspInit+0x2f0>)
 8003f86:	2240      	movs	r2, #64	; 0x40
 8003f88:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f8a:	4b1c      	ldr	r3, [pc, #112]	; (8003ffc <HAL_UART_MspInit+0x2f0>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003f90:	4b1a      	ldr	r3, [pc, #104]	; (8003ffc <HAL_UART_MspInit+0x2f0>)
 8003f92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f96:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f98:	4b18      	ldr	r3, [pc, #96]	; (8003ffc <HAL_UART_MspInit+0x2f0>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f9e:	4b17      	ldr	r3, [pc, #92]	; (8003ffc <HAL_UART_MspInit+0x2f0>)
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003fa4:	4b15      	ldr	r3, [pc, #84]	; (8003ffc <HAL_UART_MspInit+0x2f0>)
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003faa:	4b14      	ldr	r3, [pc, #80]	; (8003ffc <HAL_UART_MspInit+0x2f0>)
 8003fac:	2200      	movs	r2, #0
 8003fae:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003fb0:	4b12      	ldr	r3, [pc, #72]	; (8003ffc <HAL_UART_MspInit+0x2f0>)
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003fb6:	4811      	ldr	r0, [pc, #68]	; (8003ffc <HAL_UART_MspInit+0x2f0>)
 8003fb8:	f000 ffcc 	bl	8004f54 <HAL_DMA_Init>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d001      	beq.n	8003fc6 <HAL_UART_MspInit+0x2ba>
      Error_Handler();
 8003fc2:	f7ff fa45 	bl	8003450 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a0c      	ldr	r2, [pc, #48]	; (8003ffc <HAL_UART_MspInit+0x2f0>)
 8003fca:	631a      	str	r2, [r3, #48]	; 0x30
 8003fcc:	4a0b      	ldr	r2, [pc, #44]	; (8003ffc <HAL_UART_MspInit+0x2f0>)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	2105      	movs	r1, #5
 8003fd6:	2027      	movs	r0, #39	; 0x27
 8003fd8:	f000 ff92 	bl	8004f00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003fdc:	2027      	movs	r0, #39	; 0x27
 8003fde:	f000 ffab 	bl	8004f38 <HAL_NVIC_EnableIRQ>
}
 8003fe2:	e0a7      	b.n	8004134 <HAL_UART_MspInit+0x428>
 8003fe4:	40004800 	.word	0x40004800
 8003fe8:	40023800 	.word	0x40023800
 8003fec:	40020800 	.word	0x40020800
 8003ff0:	40020400 	.word	0x40020400
 8003ff4:	20009c88 	.word	0x20009c88
 8003ff8:	40026028 	.word	0x40026028
 8003ffc:	20009d28 	.word	0x20009d28
 8004000:	40026058 	.word	0x40026058
  else if(uartHandle->Instance==USART6)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a4c      	ldr	r2, [pc, #304]	; (800413c <HAL_UART_MspInit+0x430>)
 800400a:	4293      	cmp	r3, r2
 800400c:	f040 8092 	bne.w	8004134 <HAL_UART_MspInit+0x428>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004010:	2300      	movs	r3, #0
 8004012:	60fb      	str	r3, [r7, #12]
 8004014:	4b4a      	ldr	r3, [pc, #296]	; (8004140 <HAL_UART_MspInit+0x434>)
 8004016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004018:	4a49      	ldr	r2, [pc, #292]	; (8004140 <HAL_UART_MspInit+0x434>)
 800401a:	f043 0320 	orr.w	r3, r3, #32
 800401e:	6453      	str	r3, [r2, #68]	; 0x44
 8004020:	4b47      	ldr	r3, [pc, #284]	; (8004140 <HAL_UART_MspInit+0x434>)
 8004022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004024:	f003 0320 	and.w	r3, r3, #32
 8004028:	60fb      	str	r3, [r7, #12]
 800402a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800402c:	2300      	movs	r3, #0
 800402e:	60bb      	str	r3, [r7, #8]
 8004030:	4b43      	ldr	r3, [pc, #268]	; (8004140 <HAL_UART_MspInit+0x434>)
 8004032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004034:	4a42      	ldr	r2, [pc, #264]	; (8004140 <HAL_UART_MspInit+0x434>)
 8004036:	f043 0304 	orr.w	r3, r3, #4
 800403a:	6313      	str	r3, [r2, #48]	; 0x30
 800403c:	4b40      	ldr	r3, [pc, #256]	; (8004140 <HAL_UART_MspInit+0x434>)
 800403e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004040:	f003 0304 	and.w	r3, r3, #4
 8004044:	60bb      	str	r3, [r7, #8]
 8004046:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CM4_TX_Pin|CM4_RX_Pin;
 8004048:	23c0      	movs	r3, #192	; 0xc0
 800404a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800404c:	2302      	movs	r3, #2
 800404e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004050:	2300      	movs	r3, #0
 8004052:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004054:	2303      	movs	r3, #3
 8004056:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004058:	2308      	movs	r3, #8
 800405a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800405c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004060:	4619      	mov	r1, r3
 8004062:	4838      	ldr	r0, [pc, #224]	; (8004144 <HAL_UART_MspInit+0x438>)
 8004064:	f001 fb78 	bl	8005758 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream2;
 8004068:	4b37      	ldr	r3, [pc, #220]	; (8004148 <HAL_UART_MspInit+0x43c>)
 800406a:	4a38      	ldr	r2, [pc, #224]	; (800414c <HAL_UART_MspInit+0x440>)
 800406c:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800406e:	4b36      	ldr	r3, [pc, #216]	; (8004148 <HAL_UART_MspInit+0x43c>)
 8004070:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8004074:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004076:	4b34      	ldr	r3, [pc, #208]	; (8004148 <HAL_UART_MspInit+0x43c>)
 8004078:	2200      	movs	r2, #0
 800407a:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800407c:	4b32      	ldr	r3, [pc, #200]	; (8004148 <HAL_UART_MspInit+0x43c>)
 800407e:	2200      	movs	r2, #0
 8004080:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004082:	4b31      	ldr	r3, [pc, #196]	; (8004148 <HAL_UART_MspInit+0x43c>)
 8004084:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004088:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800408a:	4b2f      	ldr	r3, [pc, #188]	; (8004148 <HAL_UART_MspInit+0x43c>)
 800408c:	2200      	movs	r2, #0
 800408e:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004090:	4b2d      	ldr	r3, [pc, #180]	; (8004148 <HAL_UART_MspInit+0x43c>)
 8004092:	2200      	movs	r2, #0
 8004094:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8004096:	4b2c      	ldr	r3, [pc, #176]	; (8004148 <HAL_UART_MspInit+0x43c>)
 8004098:	f44f 7280 	mov.w	r2, #256	; 0x100
 800409c:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800409e:	4b2a      	ldr	r3, [pc, #168]	; (8004148 <HAL_UART_MspInit+0x43c>)
 80040a0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80040a4:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80040a6:	4b28      	ldr	r3, [pc, #160]	; (8004148 <HAL_UART_MspInit+0x43c>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80040ac:	4826      	ldr	r0, [pc, #152]	; (8004148 <HAL_UART_MspInit+0x43c>)
 80040ae:	f000 ff51 	bl	8004f54 <HAL_DMA_Init>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d001      	beq.n	80040bc <HAL_UART_MspInit+0x3b0>
      Error_Handler();
 80040b8:	f7ff f9ca 	bl	8003450 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a22      	ldr	r2, [pc, #136]	; (8004148 <HAL_UART_MspInit+0x43c>)
 80040c0:	635a      	str	r2, [r3, #52]	; 0x34
 80040c2:	4a21      	ldr	r2, [pc, #132]	; (8004148 <HAL_UART_MspInit+0x43c>)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 80040c8:	4b21      	ldr	r3, [pc, #132]	; (8004150 <HAL_UART_MspInit+0x444>)
 80040ca:	4a22      	ldr	r2, [pc, #136]	; (8004154 <HAL_UART_MspInit+0x448>)
 80040cc:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 80040ce:	4b20      	ldr	r3, [pc, #128]	; (8004150 <HAL_UART_MspInit+0x444>)
 80040d0:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80040d4:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80040d6:	4b1e      	ldr	r3, [pc, #120]	; (8004150 <HAL_UART_MspInit+0x444>)
 80040d8:	2240      	movs	r2, #64	; 0x40
 80040da:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80040dc:	4b1c      	ldr	r3, [pc, #112]	; (8004150 <HAL_UART_MspInit+0x444>)
 80040de:	2200      	movs	r2, #0
 80040e0:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 80040e2:	4b1b      	ldr	r3, [pc, #108]	; (8004150 <HAL_UART_MspInit+0x444>)
 80040e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80040e8:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80040ea:	4b19      	ldr	r3, [pc, #100]	; (8004150 <HAL_UART_MspInit+0x444>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80040f0:	4b17      	ldr	r3, [pc, #92]	; (8004150 <HAL_UART_MspInit+0x444>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 80040f6:	4b16      	ldr	r3, [pc, #88]	; (8004150 <HAL_UART_MspInit+0x444>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 80040fc:	4b14      	ldr	r3, [pc, #80]	; (8004150 <HAL_UART_MspInit+0x444>)
 80040fe:	2200      	movs	r2, #0
 8004100:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004102:	4b13      	ldr	r3, [pc, #76]	; (8004150 <HAL_UART_MspInit+0x444>)
 8004104:	2200      	movs	r2, #0
 8004106:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8004108:	4811      	ldr	r0, [pc, #68]	; (8004150 <HAL_UART_MspInit+0x444>)
 800410a:	f000 ff23 	bl	8004f54 <HAL_DMA_Init>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d001      	beq.n	8004118 <HAL_UART_MspInit+0x40c>
      Error_Handler();
 8004114:	f7ff f99c 	bl	8003450 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a0d      	ldr	r2, [pc, #52]	; (8004150 <HAL_UART_MspInit+0x444>)
 800411c:	631a      	str	r2, [r3, #48]	; 0x30
 800411e:	4a0c      	ldr	r2, [pc, #48]	; (8004150 <HAL_UART_MspInit+0x444>)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8004124:	2200      	movs	r2, #0
 8004126:	2105      	movs	r1, #5
 8004128:	2047      	movs	r0, #71	; 0x47
 800412a:	f000 fee9 	bl	8004f00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800412e:	2047      	movs	r0, #71	; 0x47
 8004130:	f000 ff02 	bl	8004f38 <HAL_NVIC_EnableIRQ>
}
 8004134:	bf00      	nop
 8004136:	3738      	adds	r7, #56	; 0x38
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	40011400 	.word	0x40011400
 8004140:	40023800 	.word	0x40023800
 8004144:	40020800 	.word	0x40020800
 8004148:	20009c28 	.word	0x20009c28
 800414c:	40026440 	.word	0x40026440
 8004150:	20009de8 	.word	0x20009de8
 8004154:	400264a0 	.word	0x400264a0

08004158 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004158:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004190 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800415c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800415e:	e003      	b.n	8004168 <LoopCopyDataInit>

08004160 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004160:	4b0c      	ldr	r3, [pc, #48]	; (8004194 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004162:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004164:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004166:	3104      	adds	r1, #4

08004168 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004168:	480b      	ldr	r0, [pc, #44]	; (8004198 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800416a:	4b0c      	ldr	r3, [pc, #48]	; (800419c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800416c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800416e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004170:	d3f6      	bcc.n	8004160 <CopyDataInit>
  ldr  r2, =_sbss
 8004172:	4a0b      	ldr	r2, [pc, #44]	; (80041a0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004174:	e002      	b.n	800417c <LoopFillZerobss>

08004176 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004176:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004178:	f842 3b04 	str.w	r3, [r2], #4

0800417c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800417c:	4b09      	ldr	r3, [pc, #36]	; (80041a4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800417e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004180:	d3f9      	bcc.n	8004176 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004182:	f7ff fb35 	bl	80037f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004186:	f007 fb2f 	bl	800b7e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800418a:	f7ff f8bd 	bl	8003308 <main>
  bx  lr    
 800418e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004190:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004194:	0800bb00 	.word	0x0800bb00
  ldr  r0, =_sdata
 8004198:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800419c:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80041a0:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80041a4:	20009f2c 	.word	0x20009f2c

080041a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80041a8:	e7fe      	b.n	80041a8 <ADC_IRQHandler>
	...

080041ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80041b0:	4b0e      	ldr	r3, [pc, #56]	; (80041ec <HAL_Init+0x40>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a0d      	ldr	r2, [pc, #52]	; (80041ec <HAL_Init+0x40>)
 80041b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80041bc:	4b0b      	ldr	r3, [pc, #44]	; (80041ec <HAL_Init+0x40>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a0a      	ldr	r2, [pc, #40]	; (80041ec <HAL_Init+0x40>)
 80041c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80041c8:	4b08      	ldr	r3, [pc, #32]	; (80041ec <HAL_Init+0x40>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a07      	ldr	r2, [pc, #28]	; (80041ec <HAL_Init+0x40>)
 80041ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041d4:	2003      	movs	r0, #3
 80041d6:	f000 fe88 	bl	8004eea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80041da:	2000      	movs	r0, #0
 80041dc:	f7ff fa18 	bl	8003610 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80041e0:	f7ff f9ea 	bl	80035b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	40023c00 	.word	0x40023c00

080041f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80041f0:	b480      	push	{r7}
 80041f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80041f4:	4b06      	ldr	r3, [pc, #24]	; (8004210 <HAL_IncTick+0x20>)
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	461a      	mov	r2, r3
 80041fa:	4b06      	ldr	r3, [pc, #24]	; (8004214 <HAL_IncTick+0x24>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4413      	add	r3, r2
 8004200:	4a04      	ldr	r2, [pc, #16]	; (8004214 <HAL_IncTick+0x24>)
 8004202:	6013      	str	r3, [r2, #0]
}
 8004204:	bf00      	nop
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	20000068 	.word	0x20000068
 8004214:	20009f28 	.word	0x20009f28

08004218 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004218:	b480      	push	{r7}
 800421a:	af00      	add	r7, sp, #0
  return uwTick;
 800421c:	4b03      	ldr	r3, [pc, #12]	; (800422c <HAL_GetTick+0x14>)
 800421e:	681b      	ldr	r3, [r3, #0]
}
 8004220:	4618      	mov	r0, r3
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	20009f28 	.word	0x20009f28

08004230 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e0ed      	b.n	800441e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004248:	b2db      	uxtb	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d102      	bne.n	8004254 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f7fe fee2 	bl	8003018 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f022 0202 	bic.w	r2, r2, #2
 8004262:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004264:	f7ff ffd8 	bl	8004218 <HAL_GetTick>
 8004268:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800426a:	e012      	b.n	8004292 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800426c:	f7ff ffd4 	bl	8004218 <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	2b0a      	cmp	r3, #10
 8004278:	d90b      	bls.n	8004292 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2205      	movs	r2, #5
 800428a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e0c5      	b.n	800441e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f003 0302 	and.w	r3, r3, #2
 800429c:	2b00      	cmp	r3, #0
 800429e:	d1e5      	bne.n	800426c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f042 0201 	orr.w	r2, r2, #1
 80042ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042b0:	f7ff ffb2 	bl	8004218 <HAL_GetTick>
 80042b4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80042b6:	e012      	b.n	80042de <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80042b8:	f7ff ffae 	bl	8004218 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	2b0a      	cmp	r3, #10
 80042c4:	d90b      	bls.n	80042de <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2205      	movs	r2, #5
 80042d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e09f      	b.n	800441e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	f003 0301 	and.w	r3, r3, #1
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d0e5      	beq.n	80042b8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	7e1b      	ldrb	r3, [r3, #24]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d108      	bne.n	8004306 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004302:	601a      	str	r2, [r3, #0]
 8004304:	e007      	b.n	8004316 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004314:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	7e5b      	ldrb	r3, [r3, #25]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d108      	bne.n	8004330 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800432c:	601a      	str	r2, [r3, #0]
 800432e:	e007      	b.n	8004340 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800433e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	7e9b      	ldrb	r3, [r3, #26]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d108      	bne.n	800435a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f042 0220 	orr.w	r2, r2, #32
 8004356:	601a      	str	r2, [r3, #0]
 8004358:	e007      	b.n	800436a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f022 0220 	bic.w	r2, r2, #32
 8004368:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	7edb      	ldrb	r3, [r3, #27]
 800436e:	2b01      	cmp	r3, #1
 8004370:	d108      	bne.n	8004384 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f022 0210 	bic.w	r2, r2, #16
 8004380:	601a      	str	r2, [r3, #0]
 8004382:	e007      	b.n	8004394 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f042 0210 	orr.w	r2, r2, #16
 8004392:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	7f1b      	ldrb	r3, [r3, #28]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d108      	bne.n	80043ae <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f042 0208 	orr.w	r2, r2, #8
 80043aa:	601a      	str	r2, [r3, #0]
 80043ac:	e007      	b.n	80043be <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f022 0208 	bic.w	r2, r2, #8
 80043bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	7f5b      	ldrb	r3, [r3, #29]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d108      	bne.n	80043d8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f042 0204 	orr.w	r2, r2, #4
 80043d4:	601a      	str	r2, [r3, #0]
 80043d6:	e007      	b.n	80043e8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f022 0204 	bic.w	r2, r2, #4
 80043e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	689a      	ldr	r2, [r3, #8]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	431a      	orrs	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	431a      	orrs	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	695b      	ldr	r3, [r3, #20]
 80043fc:	ea42 0103 	orr.w	r1, r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	1e5a      	subs	r2, r3, #1
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	430a      	orrs	r2, r1
 800440c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3710      	adds	r7, #16
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
	...

08004428 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004428:	b480      	push	{r7}
 800442a:	b087      	sub	sp, #28
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800443e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004440:	7cfb      	ldrb	r3, [r7, #19]
 8004442:	2b01      	cmp	r3, #1
 8004444:	d003      	beq.n	800444e <HAL_CAN_ConfigFilter+0x26>
 8004446:	7cfb      	ldrb	r3, [r7, #19]
 8004448:	2b02      	cmp	r3, #2
 800444a:	f040 80be 	bne.w	80045ca <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800444e:	4b65      	ldr	r3, [pc, #404]	; (80045e4 <HAL_CAN_ConfigFilter+0x1bc>)
 8004450:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004458:	f043 0201 	orr.w	r2, r3, #1
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004468:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447c:	021b      	lsls	r3, r3, #8
 800447e:	431a      	orrs	r2, r3
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	f003 031f 	and.w	r3, r3, #31
 800448e:	2201      	movs	r2, #1
 8004490:	fa02 f303 	lsl.w	r3, r2, r3
 8004494:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	43db      	mvns	r3, r3
 80044a0:	401a      	ands	r2, r3
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	69db      	ldr	r3, [r3, #28]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d123      	bne.n	80044f8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	43db      	mvns	r3, r3
 80044ba:	401a      	ands	r2, r3
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80044ce:	683a      	ldr	r2, [r7, #0]
 80044d0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80044d2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	3248      	adds	r2, #72	; 0x48
 80044d8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80044ec:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80044ee:	6979      	ldr	r1, [r7, #20]
 80044f0:	3348      	adds	r3, #72	; 0x48
 80044f2:	00db      	lsls	r3, r3, #3
 80044f4:	440b      	add	r3, r1
 80044f6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	69db      	ldr	r3, [r3, #28]
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d122      	bne.n	8004546 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	431a      	orrs	r2, r3
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800451c:	683a      	ldr	r2, [r7, #0]
 800451e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004520:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	3248      	adds	r2, #72	; 0x48
 8004526:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800453a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800453c:	6979      	ldr	r1, [r7, #20]
 800453e:	3348      	adds	r3, #72	; 0x48
 8004540:	00db      	lsls	r3, r3, #3
 8004542:	440b      	add	r3, r1
 8004544:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	699b      	ldr	r3, [r3, #24]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d109      	bne.n	8004562 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	43db      	mvns	r3, r3
 8004558:	401a      	ands	r2, r3
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004560:	e007      	b.n	8004572 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	431a      	orrs	r2, r3
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d109      	bne.n	800458e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	43db      	mvns	r3, r3
 8004584:	401a      	ands	r2, r3
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800458c:	e007      	b.n	800459e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	431a      	orrs	r2, r3
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d107      	bne.n	80045b6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	431a      	orrs	r2, r3
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80045bc:	f023 0201 	bic.w	r2, r3, #1
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80045c6:	2300      	movs	r3, #0
 80045c8:	e006      	b.n	80045d8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ce:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
  }
}
 80045d8:	4618      	mov	r0, r3
 80045da:	371c      	adds	r7, #28
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr
 80045e4:	40006400 	.word	0x40006400

080045e8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d12e      	bne.n	800465a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2202      	movs	r2, #2
 8004600:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f022 0201 	bic.w	r2, r2, #1
 8004612:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004614:	f7ff fe00 	bl	8004218 <HAL_GetTick>
 8004618:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800461a:	e012      	b.n	8004642 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800461c:	f7ff fdfc 	bl	8004218 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	2b0a      	cmp	r3, #10
 8004628:	d90b      	bls.n	8004642 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2205      	movs	r2, #5
 800463a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e012      	b.n	8004668 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f003 0301 	and.w	r3, r3, #1
 800464c:	2b00      	cmp	r3, #0
 800464e:	d1e5      	bne.n	800461c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004656:	2300      	movs	r3, #0
 8004658:	e006      	b.n	8004668 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
  }
}
 8004668:	4618      	mov	r0, r3
 800466a:	3710      	adds	r7, #16
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004670:	b480      	push	{r7}
 8004672:	b087      	sub	sp, #28
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]
 800467c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004684:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004686:	7dfb      	ldrb	r3, [r7, #23]
 8004688:	2b01      	cmp	r3, #1
 800468a:	d003      	beq.n	8004694 <HAL_CAN_GetRxMessage+0x24>
 800468c:	7dfb      	ldrb	r3, [r7, #23]
 800468e:	2b02      	cmp	r3, #2
 8004690:	f040 80f3 	bne.w	800487a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d10e      	bne.n	80046b8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	f003 0303 	and.w	r3, r3, #3
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d116      	bne.n	80046d6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e0e7      	b.n	8004888 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	f003 0303 	and.w	r3, r3, #3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d107      	bne.n	80046d6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e0d8      	b.n	8004888 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	331b      	adds	r3, #27
 80046de:	011b      	lsls	r3, r3, #4
 80046e0:	4413      	add	r3, r2
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0204 	and.w	r2, r3, #4
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d10c      	bne.n	800470e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	331b      	adds	r3, #27
 80046fc:	011b      	lsls	r3, r3, #4
 80046fe:	4413      	add	r3, r2
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	0d5b      	lsrs	r3, r3, #21
 8004704:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	601a      	str	r2, [r3, #0]
 800470c:	e00b      	b.n	8004726 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	331b      	adds	r3, #27
 8004716:	011b      	lsls	r3, r3, #4
 8004718:	4413      	add	r3, r2
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	08db      	lsrs	r3, r3, #3
 800471e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	331b      	adds	r3, #27
 800472e:	011b      	lsls	r3, r3, #4
 8004730:	4413      	add	r3, r2
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0202 	and.w	r2, r3, #2
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	331b      	adds	r3, #27
 8004744:	011b      	lsls	r3, r3, #4
 8004746:	4413      	add	r3, r2
 8004748:	3304      	adds	r3, #4
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 020f 	and.w	r2, r3, #15
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	331b      	adds	r3, #27
 800475c:	011b      	lsls	r3, r3, #4
 800475e:	4413      	add	r3, r2
 8004760:	3304      	adds	r3, #4
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	0a1b      	lsrs	r3, r3, #8
 8004766:	b2da      	uxtb	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	331b      	adds	r3, #27
 8004774:	011b      	lsls	r3, r3, #4
 8004776:	4413      	add	r3, r2
 8004778:	3304      	adds	r3, #4
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	0c1b      	lsrs	r3, r3, #16
 800477e:	b29a      	uxth	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	011b      	lsls	r3, r3, #4
 800478c:	4413      	add	r3, r2
 800478e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	b2da      	uxtb	r2, r3
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	011b      	lsls	r3, r3, #4
 80047a2:	4413      	add	r3, r2
 80047a4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	0a1a      	lsrs	r2, r3, #8
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	3301      	adds	r3, #1
 80047b0:	b2d2      	uxtb	r2, r2
 80047b2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	011b      	lsls	r3, r3, #4
 80047bc:	4413      	add	r3, r2
 80047be:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	0c1a      	lsrs	r2, r3, #16
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	3302      	adds	r3, #2
 80047ca:	b2d2      	uxtb	r2, r2
 80047cc:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	011b      	lsls	r3, r3, #4
 80047d6:	4413      	add	r3, r2
 80047d8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	0e1a      	lsrs	r2, r3, #24
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	3303      	adds	r3, #3
 80047e4:	b2d2      	uxtb	r2, r2
 80047e6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	011b      	lsls	r3, r3, #4
 80047f0:	4413      	add	r3, r2
 80047f2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	3304      	adds	r3, #4
 80047fc:	b2d2      	uxtb	r2, r2
 80047fe:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	011b      	lsls	r3, r3, #4
 8004808:	4413      	add	r3, r2
 800480a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	0a1a      	lsrs	r2, r3, #8
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	3305      	adds	r3, #5
 8004816:	b2d2      	uxtb	r2, r2
 8004818:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	011b      	lsls	r3, r3, #4
 8004822:	4413      	add	r3, r2
 8004824:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	0c1a      	lsrs	r2, r3, #16
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	3306      	adds	r3, #6
 8004830:	b2d2      	uxtb	r2, r2
 8004832:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	011b      	lsls	r3, r3, #4
 800483c:	4413      	add	r3, r2
 800483e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	0e1a      	lsrs	r2, r3, #24
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	3307      	adds	r3, #7
 800484a:	b2d2      	uxtb	r2, r2
 800484c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d108      	bne.n	8004866 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68da      	ldr	r2, [r3, #12]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f042 0220 	orr.w	r2, r2, #32
 8004862:	60da      	str	r2, [r3, #12]
 8004864:	e007      	b.n	8004876 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	691a      	ldr	r2, [r3, #16]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f042 0220 	orr.w	r2, r2, #32
 8004874:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004876:	2300      	movs	r3, #0
 8004878:	e006      	b.n	8004888 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
  }
}
 8004888:	4618      	mov	r0, r3
 800488a:	371c      	adds	r7, #28
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 800489e:	2300      	movs	r3, #0
 80048a0:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048a8:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80048aa:	7afb      	ldrb	r3, [r7, #11]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d002      	beq.n	80048b6 <HAL_CAN_GetRxFifoFillLevel+0x22>
 80048b0:	7afb      	ldrb	r3, [r7, #11]
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d10f      	bne.n	80048d6 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d106      	bne.n	80048ca <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	f003 0303 	and.w	r3, r3, #3
 80048c6:	60fb      	str	r3, [r7, #12]
 80048c8:	e005      	b.n	80048d6 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	f003 0303 	and.w	r3, r3, #3
 80048d4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80048d6:	68fb      	ldr	r3, [r7, #12]
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3714      	adds	r7, #20
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b085      	sub	sp, #20
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048f4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80048f6:	7bfb      	ldrb	r3, [r7, #15]
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d002      	beq.n	8004902 <HAL_CAN_ActivateNotification+0x1e>
 80048fc:	7bfb      	ldrb	r3, [r7, #15]
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d109      	bne.n	8004916 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	6959      	ldr	r1, [r3, #20]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	683a      	ldr	r2, [r7, #0]
 800490e:	430a      	orrs	r2, r1
 8004910:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004912:	2300      	movs	r3, #0
 8004914:	e006      	b.n	8004924 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
  }
}
 8004924:	4618      	mov	r0, r3
 8004926:	3714      	adds	r7, #20
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b08a      	sub	sp, #40	; 0x28
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004938:	2300      	movs	r3, #0
 800493a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	695b      	ldr	r3, [r3, #20]
 8004942:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	699b      	ldr	r3, [r3, #24]
 800496a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800496c:	6a3b      	ldr	r3, [r7, #32]
 800496e:	f003 0301 	and.w	r3, r3, #1
 8004972:	2b00      	cmp	r3, #0
 8004974:	d07c      	beq.n	8004a70 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	f003 0301 	and.w	r3, r3, #1
 800497c:	2b00      	cmp	r3, #0
 800497e:	d023      	beq.n	80049c8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2201      	movs	r2, #1
 8004986:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	f003 0302 	and.w	r3, r3, #2
 800498e:	2b00      	cmp	r3, #0
 8004990:	d003      	beq.n	800499a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 f983 	bl	8004c9e <HAL_CAN_TxMailbox0CompleteCallback>
 8004998:	e016      	b.n	80049c8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	f003 0304 	and.w	r3, r3, #4
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d004      	beq.n	80049ae <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80049a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80049aa:	627b      	str	r3, [r7, #36]	; 0x24
 80049ac:	e00c      	b.n	80049c8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	f003 0308 	and.w	r3, r3, #8
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d004      	beq.n	80049c2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80049b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80049be:	627b      	str	r3, [r7, #36]	; 0x24
 80049c0:	e002      	b.n	80049c8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 f989 	bl	8004cda <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d024      	beq.n	8004a1c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80049da:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d003      	beq.n	80049ee <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 f963 	bl	8004cb2 <HAL_CAN_TxMailbox1CompleteCallback>
 80049ec:	e016      	b.n	8004a1c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d004      	beq.n	8004a02 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80049f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80049fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004a00:	e00c      	b.n	8004a1c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d004      	beq.n	8004a16 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a12:	627b      	str	r3, [r7, #36]	; 0x24
 8004a14:	e002      	b.n	8004a1c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 f969 	bl	8004cee <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d024      	beq.n	8004a70 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004a2e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d003      	beq.n	8004a42 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 f943 	bl	8004cc6 <HAL_CAN_TxMailbox2CompleteCallback>
 8004a40:	e016      	b.n	8004a70 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d004      	beq.n	8004a56 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a52:	627b      	str	r3, [r7, #36]	; 0x24
 8004a54:	e00c      	b.n	8004a70 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d004      	beq.n	8004a6a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a66:	627b      	str	r3, [r7, #36]	; 0x24
 8004a68:	e002      	b.n	8004a70 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 f949 	bl	8004d02 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004a70:	6a3b      	ldr	r3, [r7, #32]
 8004a72:	f003 0308 	and.w	r3, r3, #8
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00c      	beq.n	8004a94 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	f003 0310 	and.w	r3, r3, #16
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d007      	beq.n	8004a94 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a8a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2210      	movs	r2, #16
 8004a92:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004a94:	6a3b      	ldr	r3, [r7, #32]
 8004a96:	f003 0304 	and.w	r3, r3, #4
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00b      	beq.n	8004ab6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	f003 0308 	and.w	r3, r3, #8
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d006      	beq.n	8004ab6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2208      	movs	r2, #8
 8004aae:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f000 f930 	bl	8004d16 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004ab6:	6a3b      	ldr	r3, [r7, #32]
 8004ab8:	f003 0302 	and.w	r3, r3, #2
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d009      	beq.n	8004ad4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	f003 0303 	and.w	r3, r3, #3
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d002      	beq.n	8004ad4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f7fb fda2 	bl	8000618 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004ad4:	6a3b      	ldr	r3, [r7, #32]
 8004ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00c      	beq.n	8004af8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	f003 0310 	and.w	r3, r3, #16
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d007      	beq.n	8004af8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004aee:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2210      	movs	r2, #16
 8004af6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004af8:	6a3b      	ldr	r3, [r7, #32]
 8004afa:	f003 0320 	and.w	r3, r3, #32
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00b      	beq.n	8004b1a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	f003 0308 	and.w	r3, r3, #8
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d006      	beq.n	8004b1a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2208      	movs	r2, #8
 8004b12:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f000 f912 	bl	8004d3e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004b1a:	6a3b      	ldr	r3, [r7, #32]
 8004b1c:	f003 0310 	and.w	r3, r3, #16
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d009      	beq.n	8004b38 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	f003 0303 	and.w	r3, r3, #3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d002      	beq.n	8004b38 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 f8f9 	bl	8004d2a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004b38:	6a3b      	ldr	r3, [r7, #32]
 8004b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00b      	beq.n	8004b5a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	f003 0310 	and.w	r3, r3, #16
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d006      	beq.n	8004b5a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2210      	movs	r2, #16
 8004b52:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f000 f8fc 	bl	8004d52 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004b5a:	6a3b      	ldr	r3, [r7, #32]
 8004b5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d00b      	beq.n	8004b7c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	f003 0308 	and.w	r3, r3, #8
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d006      	beq.n	8004b7c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2208      	movs	r2, #8
 8004b74:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 f8f5 	bl	8004d66 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004b7c:	6a3b      	ldr	r3, [r7, #32]
 8004b7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d07b      	beq.n	8004c7e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	f003 0304 	and.w	r3, r3, #4
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d072      	beq.n	8004c76 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004b90:	6a3b      	ldr	r3, [r7, #32]
 8004b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d008      	beq.n	8004bac <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d003      	beq.n	8004bac <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba6:	f043 0301 	orr.w	r3, r3, #1
 8004baa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004bac:	6a3b      	ldr	r3, [r7, #32]
 8004bae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d008      	beq.n	8004bc8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d003      	beq.n	8004bc8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc2:	f043 0302 	orr.w	r3, r3, #2
 8004bc6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004bc8:	6a3b      	ldr	r3, [r7, #32]
 8004bca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d008      	beq.n	8004be4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d003      	beq.n	8004be4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bde:	f043 0304 	orr.w	r3, r3, #4
 8004be2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004be4:	6a3b      	ldr	r3, [r7, #32]
 8004be6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d043      	beq.n	8004c76 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d03e      	beq.n	8004c76 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004bfe:	2b60      	cmp	r3, #96	; 0x60
 8004c00:	d02b      	beq.n	8004c5a <HAL_CAN_IRQHandler+0x32a>
 8004c02:	2b60      	cmp	r3, #96	; 0x60
 8004c04:	d82e      	bhi.n	8004c64 <HAL_CAN_IRQHandler+0x334>
 8004c06:	2b50      	cmp	r3, #80	; 0x50
 8004c08:	d022      	beq.n	8004c50 <HAL_CAN_IRQHandler+0x320>
 8004c0a:	2b50      	cmp	r3, #80	; 0x50
 8004c0c:	d82a      	bhi.n	8004c64 <HAL_CAN_IRQHandler+0x334>
 8004c0e:	2b40      	cmp	r3, #64	; 0x40
 8004c10:	d019      	beq.n	8004c46 <HAL_CAN_IRQHandler+0x316>
 8004c12:	2b40      	cmp	r3, #64	; 0x40
 8004c14:	d826      	bhi.n	8004c64 <HAL_CAN_IRQHandler+0x334>
 8004c16:	2b30      	cmp	r3, #48	; 0x30
 8004c18:	d010      	beq.n	8004c3c <HAL_CAN_IRQHandler+0x30c>
 8004c1a:	2b30      	cmp	r3, #48	; 0x30
 8004c1c:	d822      	bhi.n	8004c64 <HAL_CAN_IRQHandler+0x334>
 8004c1e:	2b10      	cmp	r3, #16
 8004c20:	d002      	beq.n	8004c28 <HAL_CAN_IRQHandler+0x2f8>
 8004c22:	2b20      	cmp	r3, #32
 8004c24:	d005      	beq.n	8004c32 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004c26:	e01d      	b.n	8004c64 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2a:	f043 0308 	orr.w	r3, r3, #8
 8004c2e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004c30:	e019      	b.n	8004c66 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c34:	f043 0310 	orr.w	r3, r3, #16
 8004c38:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004c3a:	e014      	b.n	8004c66 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3e:	f043 0320 	orr.w	r3, r3, #32
 8004c42:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004c44:	e00f      	b.n	8004c66 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c4c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004c4e:	e00a      	b.n	8004c66 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c56:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004c58:	e005      	b.n	8004c66 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c60:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004c62:	e000      	b.n	8004c66 <HAL_CAN_IRQHandler+0x336>
            break;
 8004c64:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	699a      	ldr	r2, [r3, #24]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004c74:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2204      	movs	r2, #4
 8004c7c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d008      	beq.n	8004c96 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8a:	431a      	orrs	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f000 f872 	bl	8004d7a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004c96:	bf00      	nop
 8004c98:	3728      	adds	r7, #40	; 0x28
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004c9e:	b480      	push	{r7}
 8004ca0:	b083      	sub	sp, #12
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004ca6:	bf00      	nop
 8004ca8:	370c      	adds	r7, #12
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr

08004cb2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004cb2:	b480      	push	{r7}
 8004cb4:	b083      	sub	sp, #12
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004cba:	bf00      	nop
 8004cbc:	370c      	adds	r7, #12
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr

08004cc6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004cc6:	b480      	push	{r7}
 8004cc8:	b083      	sub	sp, #12
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004cce:	bf00      	nop
 8004cd0:	370c      	adds	r7, #12
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr

08004cda <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004cda:	b480      	push	{r7}
 8004cdc:	b083      	sub	sp, #12
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004ce2:	bf00      	nop
 8004ce4:	370c      	adds	r7, #12
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr

08004cee <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004cee:	b480      	push	{r7}
 8004cf0:	b083      	sub	sp, #12
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004cf6:	bf00      	nop
 8004cf8:	370c      	adds	r7, #12
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr

08004d02 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004d02:	b480      	push	{r7}
 8004d04:	b083      	sub	sp, #12
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004d0a:	bf00      	nop
 8004d0c:	370c      	adds	r7, #12
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr

08004d16 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004d16:	b480      	push	{r7}
 8004d18:	b083      	sub	sp, #12
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004d1e:	bf00      	nop
 8004d20:	370c      	adds	r7, #12
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr

08004d2a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004d2a:	b480      	push	{r7}
 8004d2c:	b083      	sub	sp, #12
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004d32:	bf00      	nop
 8004d34:	370c      	adds	r7, #12
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr

08004d3e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004d3e:	b480      	push	{r7}
 8004d40:	b083      	sub	sp, #12
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004d46:	bf00      	nop
 8004d48:	370c      	adds	r7, #12
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr

08004d52 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004d52:	b480      	push	{r7}
 8004d54:	b083      	sub	sp, #12
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004d5a:	bf00      	nop
 8004d5c:	370c      	adds	r7, #12
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr

08004d66 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004d66:	b480      	push	{r7}
 8004d68:	b083      	sub	sp, #12
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004d6e:	bf00      	nop
 8004d70:	370c      	adds	r7, #12
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr

08004d7a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004d7a:	b480      	push	{r7}
 8004d7c:	b083      	sub	sp, #12
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004d82:	bf00      	nop
 8004d84:	370c      	adds	r7, #12
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
	...

08004d90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b085      	sub	sp, #20
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f003 0307 	and.w	r3, r3, #7
 8004d9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004da0:	4b0c      	ldr	r3, [pc, #48]	; (8004dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004da6:	68ba      	ldr	r2, [r7, #8]
 8004da8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004dac:	4013      	ands	r3, r2
 8004dae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004db8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004dbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004dc2:	4a04      	ldr	r2, [pc, #16]	; (8004dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	60d3      	str	r3, [r2, #12]
}
 8004dc8:	bf00      	nop
 8004dca:	3714      	adds	r7, #20
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr
 8004dd4:	e000ed00 	.word	0xe000ed00

08004dd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ddc:	4b04      	ldr	r3, [pc, #16]	; (8004df0 <__NVIC_GetPriorityGrouping+0x18>)
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	0a1b      	lsrs	r3, r3, #8
 8004de2:	f003 0307 	and.w	r3, r3, #7
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr
 8004df0:	e000ed00 	.word	0xe000ed00

08004df4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	db0b      	blt.n	8004e1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e06:	79fb      	ldrb	r3, [r7, #7]
 8004e08:	f003 021f 	and.w	r2, r3, #31
 8004e0c:	4907      	ldr	r1, [pc, #28]	; (8004e2c <__NVIC_EnableIRQ+0x38>)
 8004e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e12:	095b      	lsrs	r3, r3, #5
 8004e14:	2001      	movs	r0, #1
 8004e16:	fa00 f202 	lsl.w	r2, r0, r2
 8004e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004e1e:	bf00      	nop
 8004e20:	370c      	adds	r7, #12
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	e000e100 	.word	0xe000e100

08004e30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	4603      	mov	r3, r0
 8004e38:	6039      	str	r1, [r7, #0]
 8004e3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	db0a      	blt.n	8004e5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	b2da      	uxtb	r2, r3
 8004e48:	490c      	ldr	r1, [pc, #48]	; (8004e7c <__NVIC_SetPriority+0x4c>)
 8004e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e4e:	0112      	lsls	r2, r2, #4
 8004e50:	b2d2      	uxtb	r2, r2
 8004e52:	440b      	add	r3, r1
 8004e54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e58:	e00a      	b.n	8004e70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	b2da      	uxtb	r2, r3
 8004e5e:	4908      	ldr	r1, [pc, #32]	; (8004e80 <__NVIC_SetPriority+0x50>)
 8004e60:	79fb      	ldrb	r3, [r7, #7]
 8004e62:	f003 030f 	and.w	r3, r3, #15
 8004e66:	3b04      	subs	r3, #4
 8004e68:	0112      	lsls	r2, r2, #4
 8004e6a:	b2d2      	uxtb	r2, r2
 8004e6c:	440b      	add	r3, r1
 8004e6e:	761a      	strb	r2, [r3, #24]
}
 8004e70:	bf00      	nop
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr
 8004e7c:	e000e100 	.word	0xe000e100
 8004e80:	e000ed00 	.word	0xe000ed00

08004e84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b089      	sub	sp, #36	; 0x24
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f003 0307 	and.w	r3, r3, #7
 8004e96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	f1c3 0307 	rsb	r3, r3, #7
 8004e9e:	2b04      	cmp	r3, #4
 8004ea0:	bf28      	it	cs
 8004ea2:	2304      	movcs	r3, #4
 8004ea4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	3304      	adds	r3, #4
 8004eaa:	2b06      	cmp	r3, #6
 8004eac:	d902      	bls.n	8004eb4 <NVIC_EncodePriority+0x30>
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	3b03      	subs	r3, #3
 8004eb2:	e000      	b.n	8004eb6 <NVIC_EncodePriority+0x32>
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec2:	43da      	mvns	r2, r3
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	401a      	ands	r2, r3
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ed6:	43d9      	mvns	r1, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004edc:	4313      	orrs	r3, r2
         );
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3724      	adds	r7, #36	; 0x24
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr

08004eea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004eea:	b580      	push	{r7, lr}
 8004eec:	b082      	sub	sp, #8
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f7ff ff4c 	bl	8004d90 <__NVIC_SetPriorityGrouping>
}
 8004ef8:	bf00      	nop
 8004efa:	3708      	adds	r7, #8
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b086      	sub	sp, #24
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	4603      	mov	r3, r0
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]
 8004f0c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004f12:	f7ff ff61 	bl	8004dd8 <__NVIC_GetPriorityGrouping>
 8004f16:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	68b9      	ldr	r1, [r7, #8]
 8004f1c:	6978      	ldr	r0, [r7, #20]
 8004f1e:	f7ff ffb1 	bl	8004e84 <NVIC_EncodePriority>
 8004f22:	4602      	mov	r2, r0
 8004f24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f28:	4611      	mov	r1, r2
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7ff ff80 	bl	8004e30 <__NVIC_SetPriority>
}
 8004f30:	bf00      	nop
 8004f32:	3718      	adds	r7, #24
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	4603      	mov	r3, r0
 8004f40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7ff ff54 	bl	8004df4 <__NVIC_EnableIRQ>
}
 8004f4c:	bf00      	nop
 8004f4e:	3708      	adds	r7, #8
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b086      	sub	sp, #24
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004f60:	f7ff f95a 	bl	8004218 <HAL_GetTick>
 8004f64:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d101      	bne.n	8004f70 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e099      	b.n	80050a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2202      	movs	r2, #2
 8004f7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f022 0201 	bic.w	r2, r2, #1
 8004f8e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f90:	e00f      	b.n	8004fb2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004f92:	f7ff f941 	bl	8004218 <HAL_GetTick>
 8004f96:	4602      	mov	r2, r0
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	2b05      	cmp	r3, #5
 8004f9e:	d908      	bls.n	8004fb2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2220      	movs	r2, #32
 8004fa4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2203      	movs	r2, #3
 8004faa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e078      	b.n	80050a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0301 	and.w	r3, r3, #1
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d1e8      	bne.n	8004f92 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004fc8:	697a      	ldr	r2, [r7, #20]
 8004fca:	4b38      	ldr	r3, [pc, #224]	; (80050ac <HAL_DMA_Init+0x158>)
 8004fcc:	4013      	ands	r3, r2
 8004fce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685a      	ldr	r2, [r3, #4]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004fde:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	691b      	ldr	r3, [r3, #16]
 8004fe4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	699b      	ldr	r3, [r3, #24]
 8004ff0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ff6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a1b      	ldr	r3, [r3, #32]
 8004ffc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004ffe:	697a      	ldr	r2, [r7, #20]
 8005000:	4313      	orrs	r3, r2
 8005002:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005008:	2b04      	cmp	r3, #4
 800500a:	d107      	bne.n	800501c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005014:	4313      	orrs	r3, r2
 8005016:	697a      	ldr	r2, [r7, #20]
 8005018:	4313      	orrs	r3, r2
 800501a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	697a      	ldr	r2, [r7, #20]
 8005022:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	f023 0307 	bic.w	r3, r3, #7
 8005032:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005038:	697a      	ldr	r2, [r7, #20]
 800503a:	4313      	orrs	r3, r2
 800503c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005042:	2b04      	cmp	r3, #4
 8005044:	d117      	bne.n	8005076 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800504a:	697a      	ldr	r2, [r7, #20]
 800504c:	4313      	orrs	r3, r2
 800504e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005054:	2b00      	cmp	r3, #0
 8005056:	d00e      	beq.n	8005076 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f000 fb01 	bl	8005660 <DMA_CheckFifoParam>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d008      	beq.n	8005076 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2240      	movs	r2, #64	; 0x40
 8005068:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005072:	2301      	movs	r3, #1
 8005074:	e016      	b.n	80050a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	697a      	ldr	r2, [r7, #20]
 800507c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 fab8 	bl	80055f4 <DMA_CalcBaseAndBitshift>
 8005084:	4603      	mov	r3, r0
 8005086:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800508c:	223f      	movs	r2, #63	; 0x3f
 800508e:	409a      	lsls	r2, r3
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2201      	movs	r2, #1
 800509e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80050a2:	2300      	movs	r3, #0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3718      	adds	r7, #24
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	f010803f 	.word	0xf010803f

080050b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b086      	sub	sp, #24
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	607a      	str	r2, [r7, #4]
 80050bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050be:	2300      	movs	r3, #0
 80050c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d101      	bne.n	80050d6 <HAL_DMA_Start_IT+0x26>
 80050d2:	2302      	movs	r3, #2
 80050d4:	e040      	b.n	8005158 <HAL_DMA_Start_IT+0xa8>
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2201      	movs	r2, #1
 80050da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d12f      	bne.n	800514a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2202      	movs	r2, #2
 80050ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2200      	movs	r2, #0
 80050f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	68b9      	ldr	r1, [r7, #8]
 80050fe:	68f8      	ldr	r0, [r7, #12]
 8005100:	f000 fa4a 	bl	8005598 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005108:	223f      	movs	r2, #63	; 0x3f
 800510a:	409a      	lsls	r2, r3
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f042 0216 	orr.w	r2, r2, #22
 800511e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005124:	2b00      	cmp	r3, #0
 8005126:	d007      	beq.n	8005138 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f042 0208 	orr.w	r2, r2, #8
 8005136:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f042 0201 	orr.w	r2, r2, #1
 8005146:	601a      	str	r2, [r3, #0]
 8005148:	e005      	b.n	8005156 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005152:	2302      	movs	r3, #2
 8005154:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005156:	7dfb      	ldrb	r3, [r7, #23]
}
 8005158:	4618      	mov	r0, r3
 800515a:	3718      	adds	r7, #24
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800516c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800516e:	f7ff f853 	bl	8004218 <HAL_GetTick>
 8005172:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800517a:	b2db      	uxtb	r3, r3
 800517c:	2b02      	cmp	r3, #2
 800517e:	d008      	beq.n	8005192 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2280      	movs	r2, #128	; 0x80
 8005184:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e052      	b.n	8005238 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f022 0216 	bic.w	r2, r2, #22
 80051a0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	695a      	ldr	r2, [r3, #20]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051b0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d103      	bne.n	80051c2 <HAL_DMA_Abort+0x62>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d007      	beq.n	80051d2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f022 0208 	bic.w	r2, r2, #8
 80051d0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f022 0201 	bic.w	r2, r2, #1
 80051e0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051e2:	e013      	b.n	800520c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80051e4:	f7ff f818 	bl	8004218 <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	2b05      	cmp	r3, #5
 80051f0:	d90c      	bls.n	800520c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2220      	movs	r2, #32
 80051f6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2203      	movs	r2, #3
 8005204:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	e015      	b.n	8005238 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0301 	and.w	r3, r3, #1
 8005216:	2b00      	cmp	r3, #0
 8005218:	d1e4      	bne.n	80051e4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800521e:	223f      	movs	r2, #63	; 0x3f
 8005220:	409a      	lsls	r2, r3
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2201      	movs	r2, #1
 8005232:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	3710      	adds	r7, #16
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800524e:	b2db      	uxtb	r3, r3
 8005250:	2b02      	cmp	r3, #2
 8005252:	d004      	beq.n	800525e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2280      	movs	r2, #128	; 0x80
 8005258:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e00c      	b.n	8005278 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2205      	movs	r2, #5
 8005262:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f022 0201 	bic.w	r2, r2, #1
 8005274:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005276:	2300      	movs	r3, #0
}
 8005278:	4618      	mov	r0, r3
 800527a:	370c      	adds	r7, #12
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b086      	sub	sp, #24
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800528c:	2300      	movs	r3, #0
 800528e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005290:	4b92      	ldr	r3, [pc, #584]	; (80054dc <HAL_DMA_IRQHandler+0x258>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a92      	ldr	r2, [pc, #584]	; (80054e0 <HAL_DMA_IRQHandler+0x25c>)
 8005296:	fba2 2303 	umull	r2, r3, r2, r3
 800529a:	0a9b      	lsrs	r3, r3, #10
 800529c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052ae:	2208      	movs	r2, #8
 80052b0:	409a      	lsls	r2, r3
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	4013      	ands	r3, r2
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d01a      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0304 	and.w	r3, r3, #4
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d013      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f022 0204 	bic.w	r2, r2, #4
 80052d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052dc:	2208      	movs	r2, #8
 80052de:	409a      	lsls	r2, r3
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052e8:	f043 0201 	orr.w	r2, r3, #1
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052f4:	2201      	movs	r2, #1
 80052f6:	409a      	lsls	r2, r3
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	4013      	ands	r3, r2
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d012      	beq.n	8005326 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	695b      	ldr	r3, [r3, #20]
 8005306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800530a:	2b00      	cmp	r3, #0
 800530c:	d00b      	beq.n	8005326 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005312:	2201      	movs	r2, #1
 8005314:	409a      	lsls	r2, r3
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800531e:	f043 0202 	orr.w	r2, r3, #2
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800532a:	2204      	movs	r2, #4
 800532c:	409a      	lsls	r2, r3
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	4013      	ands	r3, r2
 8005332:	2b00      	cmp	r3, #0
 8005334:	d012      	beq.n	800535c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0302 	and.w	r3, r3, #2
 8005340:	2b00      	cmp	r3, #0
 8005342:	d00b      	beq.n	800535c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005348:	2204      	movs	r2, #4
 800534a:	409a      	lsls	r2, r3
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005354:	f043 0204 	orr.w	r2, r3, #4
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005360:	2210      	movs	r2, #16
 8005362:	409a      	lsls	r2, r3
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	4013      	ands	r3, r2
 8005368:	2b00      	cmp	r3, #0
 800536a:	d043      	beq.n	80053f4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 0308 	and.w	r3, r3, #8
 8005376:	2b00      	cmp	r3, #0
 8005378:	d03c      	beq.n	80053f4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800537e:	2210      	movs	r2, #16
 8005380:	409a      	lsls	r2, r3
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005390:	2b00      	cmp	r3, #0
 8005392:	d018      	beq.n	80053c6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d108      	bne.n	80053b4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d024      	beq.n	80053f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	4798      	blx	r3
 80053b2:	e01f      	b.n	80053f4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d01b      	beq.n	80053f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	4798      	blx	r3
 80053c4:	e016      	b.n	80053f4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d107      	bne.n	80053e4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f022 0208 	bic.w	r2, r2, #8
 80053e2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d003      	beq.n	80053f4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053f8:	2220      	movs	r2, #32
 80053fa:	409a      	lsls	r2, r3
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	4013      	ands	r3, r2
 8005400:	2b00      	cmp	r3, #0
 8005402:	f000 808e 	beq.w	8005522 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0310 	and.w	r3, r3, #16
 8005410:	2b00      	cmp	r3, #0
 8005412:	f000 8086 	beq.w	8005522 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800541a:	2220      	movs	r2, #32
 800541c:	409a      	lsls	r2, r3
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005428:	b2db      	uxtb	r3, r3
 800542a:	2b05      	cmp	r3, #5
 800542c:	d136      	bne.n	800549c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f022 0216 	bic.w	r2, r2, #22
 800543c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	695a      	ldr	r2, [r3, #20]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800544c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005452:	2b00      	cmp	r3, #0
 8005454:	d103      	bne.n	800545e <HAL_DMA_IRQHandler+0x1da>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800545a:	2b00      	cmp	r3, #0
 800545c:	d007      	beq.n	800546e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f022 0208 	bic.w	r2, r2, #8
 800546c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005472:	223f      	movs	r2, #63	; 0x3f
 8005474:	409a      	lsls	r2, r3
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2201      	movs	r2, #1
 8005486:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800548e:	2b00      	cmp	r3, #0
 8005490:	d07d      	beq.n	800558e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	4798      	blx	r3
        }
        return;
 800549a:	e078      	b.n	800558e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d01c      	beq.n	80054e4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d108      	bne.n	80054ca <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d030      	beq.n	8005522 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	4798      	blx	r3
 80054c8:	e02b      	b.n	8005522 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d027      	beq.n	8005522 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	4798      	blx	r3
 80054da:	e022      	b.n	8005522 <HAL_DMA_IRQHandler+0x29e>
 80054dc:	20000060 	.word	0x20000060
 80054e0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d10f      	bne.n	8005512 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f022 0210 	bic.w	r2, r2, #16
 8005500:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2201      	movs	r2, #1
 800550e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005516:	2b00      	cmp	r3, #0
 8005518:	d003      	beq.n	8005522 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005526:	2b00      	cmp	r3, #0
 8005528:	d032      	beq.n	8005590 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800552e:	f003 0301 	and.w	r3, r3, #1
 8005532:	2b00      	cmp	r3, #0
 8005534:	d022      	beq.n	800557c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2205      	movs	r2, #5
 800553a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f022 0201 	bic.w	r2, r2, #1
 800554c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	3301      	adds	r3, #1
 8005552:	60bb      	str	r3, [r7, #8]
 8005554:	697a      	ldr	r2, [r7, #20]
 8005556:	429a      	cmp	r2, r3
 8005558:	d307      	bcc.n	800556a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0301 	and.w	r3, r3, #1
 8005564:	2b00      	cmp	r3, #0
 8005566:	d1f2      	bne.n	800554e <HAL_DMA_IRQHandler+0x2ca>
 8005568:	e000      	b.n	800556c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800556a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005580:	2b00      	cmp	r3, #0
 8005582:	d005      	beq.n	8005590 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	4798      	blx	r3
 800558c:	e000      	b.n	8005590 <HAL_DMA_IRQHandler+0x30c>
        return;
 800558e:	bf00      	nop
    }
  }
}
 8005590:	3718      	adds	r7, #24
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop

08005598 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005598:	b480      	push	{r7}
 800559a:	b085      	sub	sp, #20
 800559c:	af00      	add	r7, sp, #0
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	607a      	str	r2, [r7, #4]
 80055a4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80055b4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	683a      	ldr	r2, [r7, #0]
 80055bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	2b40      	cmp	r3, #64	; 0x40
 80055c4:	d108      	bne.n	80055d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68ba      	ldr	r2, [r7, #8]
 80055d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80055d6:	e007      	b.n	80055e8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68ba      	ldr	r2, [r7, #8]
 80055de:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	60da      	str	r2, [r3, #12]
}
 80055e8:	bf00      	nop
 80055ea:	3714      	adds	r7, #20
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	b2db      	uxtb	r3, r3
 8005602:	3b10      	subs	r3, #16
 8005604:	4a14      	ldr	r2, [pc, #80]	; (8005658 <DMA_CalcBaseAndBitshift+0x64>)
 8005606:	fba2 2303 	umull	r2, r3, r2, r3
 800560a:	091b      	lsrs	r3, r3, #4
 800560c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800560e:	4a13      	ldr	r2, [pc, #76]	; (800565c <DMA_CalcBaseAndBitshift+0x68>)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	4413      	add	r3, r2
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	461a      	mov	r2, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2b03      	cmp	r3, #3
 8005620:	d909      	bls.n	8005636 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800562a:	f023 0303 	bic.w	r3, r3, #3
 800562e:	1d1a      	adds	r2, r3, #4
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	659a      	str	r2, [r3, #88]	; 0x58
 8005634:	e007      	b.n	8005646 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800563e:	f023 0303 	bic.w	r3, r3, #3
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800564a:	4618      	mov	r0, r3
 800564c:	3714      	adds	r7, #20
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
 8005656:	bf00      	nop
 8005658:	aaaaaaab 	.word	0xaaaaaaab
 800565c:	0800bae8 	.word	0x0800bae8

08005660 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005660:	b480      	push	{r7}
 8005662:	b085      	sub	sp, #20
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005668:	2300      	movs	r3, #0
 800566a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005670:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	699b      	ldr	r3, [r3, #24]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d11f      	bne.n	80056ba <DMA_CheckFifoParam+0x5a>
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	2b03      	cmp	r3, #3
 800567e:	d856      	bhi.n	800572e <DMA_CheckFifoParam+0xce>
 8005680:	a201      	add	r2, pc, #4	; (adr r2, 8005688 <DMA_CheckFifoParam+0x28>)
 8005682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005686:	bf00      	nop
 8005688:	08005699 	.word	0x08005699
 800568c:	080056ab 	.word	0x080056ab
 8005690:	08005699 	.word	0x08005699
 8005694:	0800572f 	.word	0x0800572f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800569c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d046      	beq.n	8005732 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056a8:	e043      	b.n	8005732 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80056b2:	d140      	bne.n	8005736 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056b8:	e03d      	b.n	8005736 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	699b      	ldr	r3, [r3, #24]
 80056be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056c2:	d121      	bne.n	8005708 <DMA_CheckFifoParam+0xa8>
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	2b03      	cmp	r3, #3
 80056c8:	d837      	bhi.n	800573a <DMA_CheckFifoParam+0xda>
 80056ca:	a201      	add	r2, pc, #4	; (adr r2, 80056d0 <DMA_CheckFifoParam+0x70>)
 80056cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d0:	080056e1 	.word	0x080056e1
 80056d4:	080056e7 	.word	0x080056e7
 80056d8:	080056e1 	.word	0x080056e1
 80056dc:	080056f9 	.word	0x080056f9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	73fb      	strb	r3, [r7, #15]
      break;
 80056e4:	e030      	b.n	8005748 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d025      	beq.n	800573e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056f6:	e022      	b.n	800573e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056fc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005700:	d11f      	bne.n	8005742 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005706:	e01c      	b.n	8005742 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	2b02      	cmp	r3, #2
 800570c:	d903      	bls.n	8005716 <DMA_CheckFifoParam+0xb6>
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	2b03      	cmp	r3, #3
 8005712:	d003      	beq.n	800571c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005714:	e018      	b.n	8005748 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	73fb      	strb	r3, [r7, #15]
      break;
 800571a:	e015      	b.n	8005748 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005720:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005724:	2b00      	cmp	r3, #0
 8005726:	d00e      	beq.n	8005746 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	73fb      	strb	r3, [r7, #15]
      break;
 800572c:	e00b      	b.n	8005746 <DMA_CheckFifoParam+0xe6>
      break;
 800572e:	bf00      	nop
 8005730:	e00a      	b.n	8005748 <DMA_CheckFifoParam+0xe8>
      break;
 8005732:	bf00      	nop
 8005734:	e008      	b.n	8005748 <DMA_CheckFifoParam+0xe8>
      break;
 8005736:	bf00      	nop
 8005738:	e006      	b.n	8005748 <DMA_CheckFifoParam+0xe8>
      break;
 800573a:	bf00      	nop
 800573c:	e004      	b.n	8005748 <DMA_CheckFifoParam+0xe8>
      break;
 800573e:	bf00      	nop
 8005740:	e002      	b.n	8005748 <DMA_CheckFifoParam+0xe8>
      break;   
 8005742:	bf00      	nop
 8005744:	e000      	b.n	8005748 <DMA_CheckFifoParam+0xe8>
      break;
 8005746:	bf00      	nop
    }
  } 
  
  return status; 
 8005748:	7bfb      	ldrb	r3, [r7, #15]
}
 800574a:	4618      	mov	r0, r3
 800574c:	3714      	adds	r7, #20
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop

08005758 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005758:	b480      	push	{r7}
 800575a:	b089      	sub	sp, #36	; 0x24
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005762:	2300      	movs	r3, #0
 8005764:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005766:	2300      	movs	r3, #0
 8005768:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800576a:	2300      	movs	r3, #0
 800576c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800576e:	2300      	movs	r3, #0
 8005770:	61fb      	str	r3, [r7, #28]
 8005772:	e165      	b.n	8005a40 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005774:	2201      	movs	r2, #1
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	fa02 f303 	lsl.w	r3, r2, r3
 800577c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	697a      	ldr	r2, [r7, #20]
 8005784:	4013      	ands	r3, r2
 8005786:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	429a      	cmp	r2, r3
 800578e:	f040 8154 	bne.w	8005a3a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	2b01      	cmp	r3, #1
 8005798:	d00b      	beq.n	80057b2 <HAL_GPIO_Init+0x5a>
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	2b02      	cmp	r3, #2
 80057a0:	d007      	beq.n	80057b2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80057a6:	2b11      	cmp	r3, #17
 80057a8:	d003      	beq.n	80057b2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	2b12      	cmp	r3, #18
 80057b0:	d130      	bne.n	8005814 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	005b      	lsls	r3, r3, #1
 80057bc:	2203      	movs	r2, #3
 80057be:	fa02 f303 	lsl.w	r3, r2, r3
 80057c2:	43db      	mvns	r3, r3
 80057c4:	69ba      	ldr	r2, [r7, #24]
 80057c6:	4013      	ands	r3, r2
 80057c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	68da      	ldr	r2, [r3, #12]
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	005b      	lsls	r3, r3, #1
 80057d2:	fa02 f303 	lsl.w	r3, r2, r3
 80057d6:	69ba      	ldr	r2, [r7, #24]
 80057d8:	4313      	orrs	r3, r2
 80057da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	69ba      	ldr	r2, [r7, #24]
 80057e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80057e8:	2201      	movs	r2, #1
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	fa02 f303 	lsl.w	r3, r2, r3
 80057f0:	43db      	mvns	r3, r3
 80057f2:	69ba      	ldr	r2, [r7, #24]
 80057f4:	4013      	ands	r3, r2
 80057f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	091b      	lsrs	r3, r3, #4
 80057fe:	f003 0201 	and.w	r2, r3, #1
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	fa02 f303 	lsl.w	r3, r2, r3
 8005808:	69ba      	ldr	r2, [r7, #24]
 800580a:	4313      	orrs	r3, r2
 800580c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	69ba      	ldr	r2, [r7, #24]
 8005812:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	005b      	lsls	r3, r3, #1
 800581e:	2203      	movs	r2, #3
 8005820:	fa02 f303 	lsl.w	r3, r2, r3
 8005824:	43db      	mvns	r3, r3
 8005826:	69ba      	ldr	r2, [r7, #24]
 8005828:	4013      	ands	r3, r2
 800582a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	689a      	ldr	r2, [r3, #8]
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	005b      	lsls	r3, r3, #1
 8005834:	fa02 f303 	lsl.w	r3, r2, r3
 8005838:	69ba      	ldr	r2, [r7, #24]
 800583a:	4313      	orrs	r3, r2
 800583c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	69ba      	ldr	r2, [r7, #24]
 8005842:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	2b02      	cmp	r3, #2
 800584a:	d003      	beq.n	8005854 <HAL_GPIO_Init+0xfc>
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	2b12      	cmp	r3, #18
 8005852:	d123      	bne.n	800589c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	08da      	lsrs	r2, r3, #3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	3208      	adds	r2, #8
 800585c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005860:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	f003 0307 	and.w	r3, r3, #7
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	220f      	movs	r2, #15
 800586c:	fa02 f303 	lsl.w	r3, r2, r3
 8005870:	43db      	mvns	r3, r3
 8005872:	69ba      	ldr	r2, [r7, #24]
 8005874:	4013      	ands	r3, r2
 8005876:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	691a      	ldr	r2, [r3, #16]
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	f003 0307 	and.w	r3, r3, #7
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	fa02 f303 	lsl.w	r3, r2, r3
 8005888:	69ba      	ldr	r2, [r7, #24]
 800588a:	4313      	orrs	r3, r2
 800588c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	08da      	lsrs	r2, r3, #3
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	3208      	adds	r2, #8
 8005896:	69b9      	ldr	r1, [r7, #24]
 8005898:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	005b      	lsls	r3, r3, #1
 80058a6:	2203      	movs	r2, #3
 80058a8:	fa02 f303 	lsl.w	r3, r2, r3
 80058ac:	43db      	mvns	r3, r3
 80058ae:	69ba      	ldr	r2, [r7, #24]
 80058b0:	4013      	ands	r3, r2
 80058b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	f003 0203 	and.w	r2, r3, #3
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	005b      	lsls	r3, r3, #1
 80058c0:	fa02 f303 	lsl.w	r3, r2, r3
 80058c4:	69ba      	ldr	r2, [r7, #24]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	69ba      	ldr	r2, [r7, #24]
 80058ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	f000 80ae 	beq.w	8005a3a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058de:	2300      	movs	r3, #0
 80058e0:	60fb      	str	r3, [r7, #12]
 80058e2:	4b5d      	ldr	r3, [pc, #372]	; (8005a58 <HAL_GPIO_Init+0x300>)
 80058e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058e6:	4a5c      	ldr	r2, [pc, #368]	; (8005a58 <HAL_GPIO_Init+0x300>)
 80058e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80058ec:	6453      	str	r3, [r2, #68]	; 0x44
 80058ee:	4b5a      	ldr	r3, [pc, #360]	; (8005a58 <HAL_GPIO_Init+0x300>)
 80058f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058f6:	60fb      	str	r3, [r7, #12]
 80058f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80058fa:	4a58      	ldr	r2, [pc, #352]	; (8005a5c <HAL_GPIO_Init+0x304>)
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	089b      	lsrs	r3, r3, #2
 8005900:	3302      	adds	r3, #2
 8005902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005906:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	f003 0303 	and.w	r3, r3, #3
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	220f      	movs	r2, #15
 8005912:	fa02 f303 	lsl.w	r3, r2, r3
 8005916:	43db      	mvns	r3, r3
 8005918:	69ba      	ldr	r2, [r7, #24]
 800591a:	4013      	ands	r3, r2
 800591c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a4f      	ldr	r2, [pc, #316]	; (8005a60 <HAL_GPIO_Init+0x308>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d025      	beq.n	8005972 <HAL_GPIO_Init+0x21a>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a4e      	ldr	r2, [pc, #312]	; (8005a64 <HAL_GPIO_Init+0x30c>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d01f      	beq.n	800596e <HAL_GPIO_Init+0x216>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a4d      	ldr	r2, [pc, #308]	; (8005a68 <HAL_GPIO_Init+0x310>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d019      	beq.n	800596a <HAL_GPIO_Init+0x212>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a4c      	ldr	r2, [pc, #304]	; (8005a6c <HAL_GPIO_Init+0x314>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d013      	beq.n	8005966 <HAL_GPIO_Init+0x20e>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a4b      	ldr	r2, [pc, #300]	; (8005a70 <HAL_GPIO_Init+0x318>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d00d      	beq.n	8005962 <HAL_GPIO_Init+0x20a>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a4a      	ldr	r2, [pc, #296]	; (8005a74 <HAL_GPIO_Init+0x31c>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d007      	beq.n	800595e <HAL_GPIO_Init+0x206>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a49      	ldr	r2, [pc, #292]	; (8005a78 <HAL_GPIO_Init+0x320>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d101      	bne.n	800595a <HAL_GPIO_Init+0x202>
 8005956:	2306      	movs	r3, #6
 8005958:	e00c      	b.n	8005974 <HAL_GPIO_Init+0x21c>
 800595a:	2307      	movs	r3, #7
 800595c:	e00a      	b.n	8005974 <HAL_GPIO_Init+0x21c>
 800595e:	2305      	movs	r3, #5
 8005960:	e008      	b.n	8005974 <HAL_GPIO_Init+0x21c>
 8005962:	2304      	movs	r3, #4
 8005964:	e006      	b.n	8005974 <HAL_GPIO_Init+0x21c>
 8005966:	2303      	movs	r3, #3
 8005968:	e004      	b.n	8005974 <HAL_GPIO_Init+0x21c>
 800596a:	2302      	movs	r3, #2
 800596c:	e002      	b.n	8005974 <HAL_GPIO_Init+0x21c>
 800596e:	2301      	movs	r3, #1
 8005970:	e000      	b.n	8005974 <HAL_GPIO_Init+0x21c>
 8005972:	2300      	movs	r3, #0
 8005974:	69fa      	ldr	r2, [r7, #28]
 8005976:	f002 0203 	and.w	r2, r2, #3
 800597a:	0092      	lsls	r2, r2, #2
 800597c:	4093      	lsls	r3, r2
 800597e:	69ba      	ldr	r2, [r7, #24]
 8005980:	4313      	orrs	r3, r2
 8005982:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005984:	4935      	ldr	r1, [pc, #212]	; (8005a5c <HAL_GPIO_Init+0x304>)
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	089b      	lsrs	r3, r3, #2
 800598a:	3302      	adds	r3, #2
 800598c:	69ba      	ldr	r2, [r7, #24]
 800598e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005992:	4b3a      	ldr	r3, [pc, #232]	; (8005a7c <HAL_GPIO_Init+0x324>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	43db      	mvns	r3, r3
 800599c:	69ba      	ldr	r2, [r7, #24]
 800599e:	4013      	ands	r3, r2
 80059a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d003      	beq.n	80059b6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80059ae:	69ba      	ldr	r2, [r7, #24]
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80059b6:	4a31      	ldr	r2, [pc, #196]	; (8005a7c <HAL_GPIO_Init+0x324>)
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80059bc:	4b2f      	ldr	r3, [pc, #188]	; (8005a7c <HAL_GPIO_Init+0x324>)
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	43db      	mvns	r3, r3
 80059c6:	69ba      	ldr	r2, [r7, #24]
 80059c8:	4013      	ands	r3, r2
 80059ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d003      	beq.n	80059e0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80059d8:	69ba      	ldr	r2, [r7, #24]
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	4313      	orrs	r3, r2
 80059de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80059e0:	4a26      	ldr	r2, [pc, #152]	; (8005a7c <HAL_GPIO_Init+0x324>)
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80059e6:	4b25      	ldr	r3, [pc, #148]	; (8005a7c <HAL_GPIO_Init+0x324>)
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	43db      	mvns	r3, r3
 80059f0:	69ba      	ldr	r2, [r7, #24]
 80059f2:	4013      	ands	r3, r2
 80059f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d003      	beq.n	8005a0a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005a02:	69ba      	ldr	r2, [r7, #24]
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005a0a:	4a1c      	ldr	r2, [pc, #112]	; (8005a7c <HAL_GPIO_Init+0x324>)
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005a10:	4b1a      	ldr	r3, [pc, #104]	; (8005a7c <HAL_GPIO_Init+0x324>)
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	43db      	mvns	r3, r3
 8005a1a:	69ba      	ldr	r2, [r7, #24]
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d003      	beq.n	8005a34 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005a2c:	69ba      	ldr	r2, [r7, #24]
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005a34:	4a11      	ldr	r2, [pc, #68]	; (8005a7c <HAL_GPIO_Init+0x324>)
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	61fb      	str	r3, [r7, #28]
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	2b0f      	cmp	r3, #15
 8005a44:	f67f ae96 	bls.w	8005774 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005a48:	bf00      	nop
 8005a4a:	bf00      	nop
 8005a4c:	3724      	adds	r7, #36	; 0x24
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop
 8005a58:	40023800 	.word	0x40023800
 8005a5c:	40013800 	.word	0x40013800
 8005a60:	40020000 	.word	0x40020000
 8005a64:	40020400 	.word	0x40020400
 8005a68:	40020800 	.word	0x40020800
 8005a6c:	40020c00 	.word	0x40020c00
 8005a70:	40021000 	.word	0x40021000
 8005a74:	40021400 	.word	0x40021400
 8005a78:	40021800 	.word	0x40021800
 8005a7c:	40013c00 	.word	0x40013c00

08005a80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	460b      	mov	r3, r1
 8005a8a:	807b      	strh	r3, [r7, #2]
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005a90:	787b      	ldrb	r3, [r7, #1]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d003      	beq.n	8005a9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a96:	887a      	ldrh	r2, [r7, #2]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005a9c:	e003      	b.n	8005aa6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005a9e:	887b      	ldrh	r3, [r7, #2]
 8005aa0:	041a      	lsls	r2, r3, #16
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	619a      	str	r2, [r3, #24]
}
 8005aa6:	bf00      	nop
 8005aa8:	370c      	adds	r7, #12
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr
	...

08005ab4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b086      	sub	sp, #24
 8005ab8:	af02      	add	r7, sp, #8
 8005aba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005abc:	f7fe fbac 	bl	8004218 <HAL_GetTick>
 8005ac0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d101      	bne.n	8005acc <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e069      	b.n	8005ba0 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d10b      	bne.n	8005af0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f7fd fce9 	bl	80034b8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8005ae6:	f241 3188 	movw	r1, #5000	; 0x1388
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 fd46 	bl	800657c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	3b01      	subs	r3, #1
 8005b00:	021a      	lsls	r2, r3, #8
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	430a      	orrs	r2, r1
 8005b08:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b0e:	9300      	str	r3, [sp, #0]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2200      	movs	r2, #0
 8005b14:	2120      	movs	r1, #32
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 fd71 	bl	80065fe <QSPI_WaitFlagStateUntilTimeout>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005b20:	7afb      	ldrb	r3, [r7, #11]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d137      	bne.n	8005b96 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005b30:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	6852      	ldr	r2, [r2, #4]
 8005b38:	0611      	lsls	r1, r2, #24
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	68d2      	ldr	r2, [r2, #12]
 8005b3e:	4311      	orrs	r1, r2
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	69d2      	ldr	r2, [r2, #28]
 8005b44:	4311      	orrs	r1, r2
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	6a12      	ldr	r2, [r2, #32]
 8005b4a:	4311      	orrs	r1, r2
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	6812      	ldr	r2, [r2, #0]
 8005b50:	430b      	orrs	r3, r1
 8005b52:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	685a      	ldr	r2, [r3, #4]
 8005b5a:	4b13      	ldr	r3, [pc, #76]	; (8005ba8 <HAL_QSPI_Init+0xf4>)
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	6912      	ldr	r2, [r2, #16]
 8005b62:	0411      	lsls	r1, r2, #16
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	6952      	ldr	r2, [r2, #20]
 8005b68:	4311      	orrs	r1, r2
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	6992      	ldr	r2, [r2, #24]
 8005b6e:	4311      	orrs	r1, r2
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	6812      	ldr	r2, [r2, #0]
 8005b74:	430b      	orrs	r3, r1
 8005b76:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f042 0201 	orr.w	r2, r2, #1
 8005b86:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2201      	movs	r2, #1
 8005b92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005b9e:	7afb      	ldrb	r3, [r7, #11]
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3710      	adds	r7, #16
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	ffe0f8fe 	.word	0xffe0f8fe

08005bac <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi : QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b086      	sub	sp, #24
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	f003 0304 	and.w	r3, r3, #4
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d064      	beq.n	8005c98 <HAL_QSPI_IRQHandler+0xec>
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d05f      	beq.n	8005c98 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	3320      	adds	r3, #32
 8005bde:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	2b12      	cmp	r3, #18
 8005bea:	d125      	bne.n	8005c38 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8005bec:	e01c      	b.n	8005c28 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00f      	beq.n	8005c16 <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfa:	781a      	ldrb	r2, [r3, #0]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c04:	1c5a      	adds	r2, r3, #1
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0e:	1e5a      	subs	r2, r3, #1
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	62da      	str	r2, [r3, #44]	; 0x2c
 8005c14:	e008      	b.n	8005c28 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005c24:	601a      	str	r2, [r3, #0]
          break;
 8005c26:	e033      	b.n	8005c90 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	f003 0304 	and.w	r3, r3, #4
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d1db      	bne.n	8005bee <HAL_QSPI_IRQHandler+0x42>
 8005c36:	e02b      	b.n	8005c90 <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	2b22      	cmp	r3, #34	; 0x22
 8005c42:	d125      	bne.n	8005c90 <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8005c44:	e01d      	b.n	8005c82 <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d010      	beq.n	8005c70 <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	7812      	ldrb	r2, [r2, #0]
 8005c56:	b2d2      	uxtb	r2, r2
 8005c58:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c5e:	1c5a      	adds	r2, r3, #1
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c68:	1e5a      	subs	r2, r3, #1
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	639a      	str	r2, [r3, #56]	; 0x38
 8005c6e:	e008      	b.n	8005c82 <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005c7e:	601a      	str	r2, [r3, #0]
          break;
 8005c80:	e006      	b.n	8005c90 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	f003 0304 	and.w	r3, r3, #4
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d1da      	bne.n	8005c46 <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 fb8b 	bl	80063ac <HAL_QSPI_FifoThresholdCallback>
 8005c96:	e142      	b.n	8005f1e <HAL_QSPI_IRQHandler+0x372>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	f003 0302 	and.w	r3, r3, #2
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	f000 80b6 	beq.w	8005e10 <HAL_QSPI_IRQHandler+0x264>
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	f000 80b0 	beq.w	8005e10 <HAL_QSPI_IRQHandler+0x264>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	2202      	movs	r2, #2
 8005cb6:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8005cc6:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	2b12      	cmp	r3, #18
 8005cd2:	d123      	bne.n	8005d1c <HAL_QSPI_IRQHandler+0x170>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f003 0304 	and.w	r3, r3, #4
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d011      	beq.n	8005d06 <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f022 0204 	bic.w	r2, r2, #4
 8005cf0:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f022 0201 	bic.w	r2, r2, #1
 8005d04:	601a      	str	r2, [r3, #0]
      }

      /* Clear Busy bit */
      HAL_QSPI_Abort_IT(hqspi);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 fbdc 	bl	80064c4 <HAL_QSPI_Abort_IT>

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 fb3f 	bl	8006398 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8005d1a:	e0fd      	b.n	8005f18 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	2b22      	cmp	r3, #34	; 0x22
 8005d26:	d146      	bne.n	8005db6 <HAL_QSPI_IRQHandler+0x20a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 0304 	and.w	r3, r3, #4
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d012      	beq.n	8005d5c <HAL_QSPI_IRQHandler+0x1b0>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f022 0204 	bic.w	r2, r2, #4
 8005d44:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f022 0201 	bic.w	r2, r2, #1
 8005d58:	601a      	str	r2, [r3, #0]
 8005d5a:	e021      	b.n	8005da0 <HAL_QSPI_IRQHandler+0x1f4>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	3320      	adds	r3, #32
 8005d62:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8005d64:	e013      	b.n	8005d8e <HAL_QSPI_IRQHandler+0x1e2>
        {
          if (hqspi->RxXferCount > 0U)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d017      	beq.n	8005d9e <HAL_QSPI_IRQHandler+0x1f2>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	7812      	ldrb	r2, [r2, #0]
 8005d76:	b2d2      	uxtb	r2, r2
 8005d78:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d7e:	1c5a      	adds	r2, r3, #1
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d88:	1e5a      	subs	r2, r3, #1
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d1e4      	bne.n	8005d66 <HAL_QSPI_IRQHandler+0x1ba>
 8005d9c:	e000      	b.n	8005da0 <HAL_QSPI_IRQHandler+0x1f4>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 8005d9e:	bf00      	nop
          }
        }
      }

      /* Workaround - Extra data written in the FIFO at the end of a read transfer */
      HAL_QSPI_Abort_IT(hqspi);
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f000 fb8f 	bl	80064c4 <HAL_QSPI_Abort_IT>

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2201      	movs	r2, #1
 8005daa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 fae8 	bl	8006384 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8005db4:	e0b0      	b.n	8005f18 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	2b02      	cmp	r3, #2
 8005dc0:	d107      	bne.n	8005dd2 <HAL_QSPI_IRQHandler+0x226>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 fad0 	bl	8006370 <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8005dd0:	e0a2      	b.n	8005f18 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	2b08      	cmp	r3, #8
 8005ddc:	f040 809c 	bne.w	8005f18 <HAL_QSPI_IRQHandler+0x36c>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	695a      	ldr	r2, [r3, #20]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8005dee:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d103      	bne.n	8005e08 <HAL_QSPI_IRQHandler+0x25c>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f000 faab 	bl	800635c <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8005e06:	e087      	b.n	8005f18 <HAL_QSPI_IRQHandler+0x36c>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f000 fa9d 	bl	8006348 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8005e0e:	e083      	b.n	8005f18 <HAL_QSPI_IRQHandler+0x36c>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	f003 0308 	and.w	r3, r3, #8
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d01f      	beq.n	8005e5a <HAL_QSPI_IRQHandler+0x2ae>
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d01a      	beq.n	8005e5a <HAL_QSPI_IRQHandler+0x2ae>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2208      	movs	r2, #8
 8005e2a:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d00b      	beq.n	8005e52 <HAL_QSPI_IRQHandler+0x2a6>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8005e48:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 fab4 	bl	80063c0 <HAL_QSPI_StatusMatchCallback>
 8005e58:	e061      	b.n	8005f1e <HAL_QSPI_IRQHandler+0x372>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	f003 0301 	and.w	r3, r3, #1
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d047      	beq.n	8005ef4 <HAL_QSPI_IRQHandler+0x348>
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d042      	beq.n	8005ef4 <HAL_QSPI_IRQHandler+0x348>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	2201      	movs	r2, #1
 8005e74:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8005e84:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e8a:	f043 0202 	orr.w	r2, r3, #2
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 0304 	and.w	r3, r3, #4
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d021      	beq.n	8005ee4 <HAL_QSPI_IRQHandler+0x338>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f022 0204 	bic.w	r2, r2, #4
 8005eae:	601a      	str	r2, [r3, #0]

      /* Disable the DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eb4:	4a1c      	ldr	r2, [pc, #112]	; (8005f28 <HAL_QSPI_IRQHandler+0x37c>)
 8005eb6:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f7ff f9bf 	bl	8005240 <HAL_DMA_Abort_IT>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d029      	beq.n	8005f1c <HAL_QSPI_IRQHandler+0x370>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ecc:	f043 0204 	orr.w	r2, r3, #4
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f000 fa33 	bl	8006348 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005ee2:	e01b      	b.n	8005f1c <HAL_QSPI_IRQHandler+0x370>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 fa2b 	bl	8006348 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005ef2:	e013      	b.n	8005f1c <HAL_QSPI_IRQHandler+0x370>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	f003 0310 	and.w	r3, r3, #16
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00f      	beq.n	8005f1e <HAL_QSPI_IRQHandler+0x372>
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d00a      	beq.n	8005f1e <HAL_QSPI_IRQHandler+0x372>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2210      	movs	r2, #16
 8005f0e:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 fa5f 	bl	80063d4 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 8005f16:	e002      	b.n	8005f1e <HAL_QSPI_IRQHandler+0x372>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8005f18:	bf00      	nop
 8005f1a:	e000      	b.n	8005f1e <HAL_QSPI_IRQHandler+0x372>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005f1c:	bf00      	nop
}
 8005f1e:	bf00      	nop
 8005f20:	3718      	adds	r7, #24
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop
 8005f28:	08006599 	.word	0x08006599

08005f2c <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b088      	sub	sp, #32
 8005f30:	af02      	add	r7, sp, #8
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	60b9      	str	r1, [r7, #8]
 8005f36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005f38:	f7fe f96e 	bl	8004218 <HAL_GetTick>
 8005f3c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d101      	bne.n	8005f4e <HAL_QSPI_Command+0x22>
 8005f4a:	2302      	movs	r3, #2
 8005f4c:	e048      	b.n	8005fe0 <HAL_QSPI_Command+0xb4>
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2201      	movs	r2, #1
 8005f52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d137      	bne.n	8005fd2 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2200      	movs	r2, #0
 8005f66:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2202      	movs	r2, #2
 8005f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	9300      	str	r3, [sp, #0]
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	2200      	movs	r2, #0
 8005f78:	2120      	movs	r1, #32
 8005f7a:	68f8      	ldr	r0, [r7, #12]
 8005f7c:	f000 fb3f 	bl	80065fe <QSPI_WaitFlagStateUntilTimeout>
 8005f80:	4603      	mov	r3, r0
 8005f82:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8005f84:	7dfb      	ldrb	r3, [r7, #23]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d125      	bne.n	8005fd6 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	68b9      	ldr	r1, [r7, #8]
 8005f8e:	68f8      	ldr	r0, [r7, #12]
 8005f90:	f000 fb6c 	bl	800666c <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d115      	bne.n	8005fc8 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	9300      	str	r3, [sp, #0]
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	2102      	movs	r1, #2
 8005fa6:	68f8      	ldr	r0, [r7, #12]
 8005fa8:	f000 fb29 	bl	80065fe <QSPI_WaitFlagStateUntilTimeout>
 8005fac:	4603      	mov	r3, r0
 8005fae:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8005fb0:	7dfb      	ldrb	r3, [r7, #23]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d10f      	bne.n	8005fd6 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	2202      	movs	r2, #2
 8005fbc:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005fc6:	e006      	b.n	8005fd6 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005fd0:	e001      	b.n	8005fd6 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8005fd2:	2302      	movs	r3, #2
 8005fd4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005fde:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3718      	adds	r7, #24
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b08a      	sub	sp, #40	; 0x28
 8005fec:	af02      	add	r7, sp, #8
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8005ff8:	f7fe f90e 	bl	8004218 <HAL_GetTick>
 8005ffc:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	3320      	adds	r3, #32
 8006004:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800600c:	b2db      	uxtb	r3, r3
 800600e:	2b01      	cmp	r3, #1
 8006010:	d101      	bne.n	8006016 <HAL_QSPI_Transmit+0x2e>
 8006012:	2302      	movs	r3, #2
 8006014:	e07b      	b.n	800610e <HAL_QSPI_Transmit+0x126>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2201      	movs	r2, #1
 800601a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006024:	b2db      	uxtb	r3, r3
 8006026:	2b01      	cmp	r3, #1
 8006028:	d16a      	bne.n	8006100 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2200      	movs	r2, #0
 800602e:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d05b      	beq.n	80060ee <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2212      	movs	r2, #18
 800603a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	691b      	ldr	r3, [r3, #16]
 8006044:	1c5a      	adds	r2, r3, #1
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	691b      	ldr	r3, [r3, #16]
 8006050:	1c5a      	adds	r2, r3, #1
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	68ba      	ldr	r2, [r7, #8]
 800605a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	695a      	ldr	r2, [r3, #20]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800606a:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800606c:	e01b      	b.n	80060a6 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	9300      	str	r3, [sp, #0]
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	2201      	movs	r2, #1
 8006076:	2104      	movs	r1, #4
 8006078:	68f8      	ldr	r0, [r7, #12]
 800607a:	f000 fac0 	bl	80065fe <QSPI_WaitFlagStateUntilTimeout>
 800607e:	4603      	mov	r3, r0
 8006080:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8006082:	7ffb      	ldrb	r3, [r7, #31]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d113      	bne.n	80060b0 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608c:	781a      	ldrb	r2, [r3, #0]
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006096:	1c5a      	adds	r2, r3, #1
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a0:	1e5a      	subs	r2, r3, #1
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d1df      	bne.n	800606e <HAL_QSPI_Transmit+0x86>
 80060ae:	e000      	b.n	80060b2 <HAL_QSPI_Transmit+0xca>
          break;
 80060b0:	bf00      	nop
      }

      if (status == HAL_OK)
 80060b2:	7ffb      	ldrb	r3, [r7, #31]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d115      	bne.n	80060e4 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	9300      	str	r3, [sp, #0]
 80060bc:	69bb      	ldr	r3, [r7, #24]
 80060be:	2201      	movs	r2, #1
 80060c0:	2102      	movs	r1, #2
 80060c2:	68f8      	ldr	r0, [r7, #12]
 80060c4:	f000 fa9b 	bl	80065fe <QSPI_WaitFlagStateUntilTimeout>
 80060c8:	4603      	mov	r3, r0
 80060ca:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 80060cc:	7ffb      	ldrb	r3, [r7, #31]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d108      	bne.n	80060e4 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	2202      	movs	r2, #2
 80060d8:	60da      	str	r2, [r3, #12]

          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 80060da:	68f8      	ldr	r0, [r7, #12]
 80060dc:	f000 f984 	bl	80063e8 <HAL_QSPI_Abort>
 80060e0:	4603      	mov	r3, r0
 80060e2:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2201      	movs	r2, #1
 80060e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80060ec:	e00a      	b.n	8006104 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060f2:	f043 0208 	orr.w	r2, r3, #8
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	77fb      	strb	r3, [r7, #31]
 80060fe:	e001      	b.n	8006104 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 8006100:	2302      	movs	r3, #2
 8006102:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2200      	movs	r2, #0
 8006108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800610c:	7ffb      	ldrb	r3, [r7, #31]
}
 800610e:	4618      	mov	r0, r3
 8006110:	3720      	adds	r7, #32
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}

08006116 <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8006116:	b580      	push	{r7, lr}
 8006118:	b08a      	sub	sp, #40	; 0x28
 800611a:	af02      	add	r7, sp, #8
 800611c:	60f8      	str	r0, [r7, #12]
 800611e:	60b9      	str	r1, [r7, #8]
 8006120:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006122:	2300      	movs	r3, #0
 8006124:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8006126:	f7fe f877 	bl	8004218 <HAL_GetTick>
 800612a:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	699b      	ldr	r3, [r3, #24]
 8006132:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	3320      	adds	r3, #32
 800613a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006142:	b2db      	uxtb	r3, r3
 8006144:	2b01      	cmp	r3, #1
 8006146:	d101      	bne.n	800614c <HAL_QSPI_Receive+0x36>
 8006148:	2302      	movs	r3, #2
 800614a:	e082      	b.n	8006252 <HAL_QSPI_Receive+0x13c>
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800615a:	b2db      	uxtb	r3, r3
 800615c:	2b01      	cmp	r3, #1
 800615e:	d171      	bne.n	8006244 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2200      	movs	r2, #0
 8006164:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d062      	beq.n	8006232 <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2222      	movs	r2, #34	; 0x22
 8006170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	1c5a      	adds	r2, r3, #1
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	1c5a      	adds	r2, r3, #1
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	68ba      	ldr	r2, [r7, #8]
 8006190:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	695b      	ldr	r3, [r3, #20]
 8006198:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80061a4:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	697a      	ldr	r2, [r7, #20]
 80061ac:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 80061ae:	e01c      	b.n	80061ea <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	9300      	str	r3, [sp, #0]
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	2201      	movs	r2, #1
 80061b8:	2106      	movs	r1, #6
 80061ba:	68f8      	ldr	r0, [r7, #12]
 80061bc:	f000 fa1f 	bl	80065fe <QSPI_WaitFlagStateUntilTimeout>
 80061c0:	4603      	mov	r3, r0
 80061c2:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 80061c4:	7ffb      	ldrb	r3, [r7, #31]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d114      	bne.n	80061f4 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ce:	693a      	ldr	r2, [r7, #16]
 80061d0:	7812      	ldrb	r2, [r2, #0]
 80061d2:	b2d2      	uxtb	r2, r2
 80061d4:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061da:	1c5a      	adds	r2, r3, #1
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e4:	1e5a      	subs	r2, r3, #1
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d1de      	bne.n	80061b0 <HAL_QSPI_Receive+0x9a>
 80061f2:	e000      	b.n	80061f6 <HAL_QSPI_Receive+0xe0>
          break;
 80061f4:	bf00      	nop
      }

      if (status == HAL_OK)
 80061f6:	7ffb      	ldrb	r3, [r7, #31]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d115      	bne.n	8006228 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	9300      	str	r3, [sp, #0]
 8006200:	69bb      	ldr	r3, [r7, #24]
 8006202:	2201      	movs	r2, #1
 8006204:	2102      	movs	r1, #2
 8006206:	68f8      	ldr	r0, [r7, #12]
 8006208:	f000 f9f9 	bl	80065fe <QSPI_WaitFlagStateUntilTimeout>
 800620c:	4603      	mov	r3, r0
 800620e:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8006210:	7ffb      	ldrb	r3, [r7, #31]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d108      	bne.n	8006228 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2202      	movs	r2, #2
 800621c:	60da      	str	r2, [r3, #12]

          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 800621e:	68f8      	ldr	r0, [r7, #12]
 8006220:	f000 f8e2 	bl	80063e8 <HAL_QSPI_Abort>
 8006224:	4603      	mov	r3, r0
 8006226:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006230:	e00a      	b.n	8006248 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006236:	f043 0208 	orr.w	r2, r3, #8
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	77fb      	strb	r3, [r7, #31]
 8006242:	e001      	b.n	8006248 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 8006244:	2302      	movs	r3, #2
 8006246:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2200      	movs	r2, #0
 800624c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8006250:	7ffb      	ldrb	r3, [r7, #31]
}
 8006252:	4618      	mov	r0, r3
 8006254:	3720      	adds	r7, #32
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}

0800625a <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800625a:	b580      	push	{r7, lr}
 800625c:	b088      	sub	sp, #32
 800625e:	af02      	add	r7, sp, #8
 8006260:	60f8      	str	r0, [r7, #12]
 8006262:	60b9      	str	r1, [r7, #8]
 8006264:	607a      	str	r2, [r7, #4]
 8006266:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006268:	f7fd ffd6 	bl	8004218 <HAL_GetTick>
 800626c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006274:	b2db      	uxtb	r3, r3
 8006276:	2b01      	cmp	r3, #1
 8006278:	d101      	bne.n	800627e <HAL_QSPI_AutoPolling+0x24>
 800627a:	2302      	movs	r3, #2
 800627c:	e060      	b.n	8006340 <HAL_QSPI_AutoPolling+0xe6>
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2201      	movs	r2, #1
 8006282:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800628c:	b2db      	uxtb	r3, r3
 800628e:	2b01      	cmp	r3, #1
 8006290:	d14f      	bne.n	8006332 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2200      	movs	r2, #0
 8006296:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2242      	movs	r2, #66	; 0x42
 800629c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	9300      	str	r3, [sp, #0]
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	2200      	movs	r2, #0
 80062a8:	2120      	movs	r1, #32
 80062aa:	68f8      	ldr	r0, [r7, #12]
 80062ac:	f000 f9a7 	bl	80065fe <QSPI_WaitFlagStateUntilTimeout>
 80062b0:	4603      	mov	r3, r0
 80062b2:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80062b4:	7dfb      	ldrb	r3, [r7, #23]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d13d      	bne.n	8006336 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	6812      	ldr	r2, [r2, #0]
 80062c2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	6852      	ldr	r2, [r2, #4]
 80062cc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	6892      	ldr	r2, [r2, #8]
 80062d6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	431a      	orrs	r2, r3
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80062f0:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	68da      	ldr	r2, [r3, #12]
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80062fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80062fe:	68b9      	ldr	r1, [r7, #8]
 8006300:	68f8      	ldr	r0, [r7, #12]
 8006302:	f000 f9b3 	bl	800666c <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	9300      	str	r3, [sp, #0]
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	2201      	movs	r2, #1
 800630e:	2108      	movs	r1, #8
 8006310:	68f8      	ldr	r0, [r7, #12]
 8006312:	f000 f974 	bl	80065fe <QSPI_WaitFlagStateUntilTimeout>
 8006316:	4603      	mov	r3, r0
 8006318:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800631a:	7dfb      	ldrb	r3, [r7, #23]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d10a      	bne.n	8006336 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2208      	movs	r2, #8
 8006326:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006330:	e001      	b.n	8006336 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8006332:	2302      	movs	r3, #2
 8006334:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2200      	movs	r2, #0
 800633a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800633e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006340:	4618      	mov	r0, r3
 8006342:	3718      	adds	r7, #24
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 8006350:	bf00      	nop
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr

0800635c <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 8006364:	bf00      	nop
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 8006378:	bf00      	nop
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 800638c:	bf00      	nop
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 80063a0:	bf00      	nop
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 80063b4:	bf00      	nop
 80063b6:	370c      	adds	r7, #12
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 80063c8:	bf00      	nop
 80063ca:	370c      	adds	r7, #12
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b083      	sub	sp, #12
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 80063dc:	bf00      	nop
 80063de:	370c      	adds	r7, #12
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b086      	sub	sp, #24
 80063ec:	af02      	add	r7, sp, #8
 80063ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063f0:	2300      	movs	r3, #0
 80063f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80063f4:	f7fd ff10 	bl	8004218 <HAL_GetTick>
 80063f8:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006400:	b2db      	uxtb	r3, r3
 8006402:	f003 0302 	and.w	r3, r3, #2
 8006406:	2b00      	cmp	r3, #0
 8006408:	d056      	beq.n	80064b8 <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 0304 	and.w	r3, r3, #4
 800641c:	2b00      	cmp	r3, #0
 800641e:	d017      	beq.n	8006450 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f022 0204 	bic.w	r2, r2, #4
 800642e:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006434:	4618      	mov	r0, r3
 8006436:	f7fe fe93 	bl	8005160 <HAL_DMA_Abort>
 800643a:	4603      	mov	r3, r0
 800643c:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 800643e:	7bfb      	ldrb	r3, [r7, #15]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d005      	beq.n	8006450 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006448:	f043 0204 	orr.w	r2, r3, #4
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f042 0202 	orr.w	r2, r2, #2
 800645e:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006464:	9300      	str	r3, [sp, #0]
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	2201      	movs	r2, #1
 800646a:	2102      	movs	r1, #2
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 f8c6 	bl	80065fe <QSPI_WaitFlagStateUntilTimeout>
 8006472:	4603      	mov	r3, r0
 8006474:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8006476:	7bfb      	ldrb	r3, [r7, #15]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d10e      	bne.n	800649a <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2202      	movs	r2, #2
 8006482:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006488:	9300      	str	r3, [sp, #0]
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	2200      	movs	r2, #0
 800648e:	2120      	movs	r1, #32
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 f8b4 	bl	80065fe <QSPI_WaitFlagStateUntilTimeout>
 8006496:	4603      	mov	r3, r0
 8006498:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800649a:	7bfb      	ldrb	r3, [r7, #15]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d10b      	bne.n	80064b8 <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	695a      	ldr	r2, [r3, #20]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80064ae:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
  }

  return status;
 80064b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3710      	adds	r7, #16
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
	...

080064c4 <HAL_QSPI_Abort_IT>:
* @brief  Abort the current transmission (non-blocking function)
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort_IT(QSPI_HandleTypeDef *hqspi)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064cc:	2300      	movs	r3, #0
 80064ce:	73fb      	strb	r3, [r7, #15]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	f003 0302 	and.w	r3, r3, #2
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d046      	beq.n	800656e <HAL_QSPI_Abort_IT+0xaa>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_ABORT;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2208      	movs	r2, #8
 80064ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable all interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_TO | QSPI_IT_SM | QSPI_IT_FT | QSPI_IT_TC | QSPI_IT_TE));
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80064fe:	601a      	str	r2, [r3, #0]

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f003 0304 	and.w	r3, r3, #4
 800650a:	2b00      	cmp	r3, #0
 800650c:	d01b      	beq.n	8006546 <HAL_QSPI_Abort_IT+0x82>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f022 0204 	bic.w	r2, r2, #4
 800651c:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006522:	4a15      	ldr	r2, [pc, #84]	; (8006578 <HAL_QSPI_Abort_IT+0xb4>)
 8006524:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800652a:	4618      	mov	r0, r3
 800652c:	f7fe fe88 	bl	8005240 <HAL_DMA_Abort_IT>
 8006530:	4603      	mov	r3, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d01b      	beq.n	800656e <HAL_QSPI_Abort_IT+0xaa>
      {
        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2201      	movs	r2, #1
 800653a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f7ff ff0c 	bl	800635c <HAL_QSPI_AbortCpltCallback>
 8006544:	e013      	b.n	800656e <HAL_QSPI_Abort_IT+0xaa>
      }
    }
    else
    {
      /* Clear interrupt */
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	2202      	movs	r2, #2
 800654c:	60da      	str	r2, [r3, #12]

      /* Enable the QSPI Transfer Complete Interrupt */
      __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800655c:	601a      	str	r2, [r3, #0]

      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f042 0202 	orr.w	r2, r2, #2
 800656c:	601a      	str	r2, [r3, #0]
    }
  }
  return status;
 800656e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006570:	4618      	mov	r0, r3
 8006572:	3710      	adds	r7, #16
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}
 8006578:	08006599 	.word	0x08006599

0800657c <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	683a      	ldr	r2, [r7, #0]
 800658a:	649a      	str	r2, [r3, #72]	; 0x48
}
 800658c:	bf00      	nop
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <QSPI_DMAAbortCplt>:
  * @brief  DMA QSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a4:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2200      	movs	r2, #0
 80065aa:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2200      	movs	r2, #0
 80065b0:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	2b08      	cmp	r3, #8
 80065bc:	d114      	bne.n	80065e8 <QSPI_DMAAbortCplt+0x50>
  {
    /* DMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	2202      	movs	r2, #2
 80065c4:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80065d4:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f042 0202 	orr.w	r2, r2, #2
 80065e4:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 80065e6:	e006      	b.n	80065f6 <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 80065f0:	68f8      	ldr	r0, [r7, #12]
 80065f2:	f7ff fea9 	bl	8006348 <HAL_QSPI_ErrorCallback>
}
 80065f6:	bf00      	nop
 80065f8:	3710      	adds	r7, #16
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}

080065fe <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80065fe:	b580      	push	{r7, lr}
 8006600:	b084      	sub	sp, #16
 8006602:	af00      	add	r7, sp, #0
 8006604:	60f8      	str	r0, [r7, #12]
 8006606:	60b9      	str	r1, [r7, #8]
 8006608:	603b      	str	r3, [r7, #0]
 800660a:	4613      	mov	r3, r2
 800660c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800660e:	e01a      	b.n	8006646 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006610:	69bb      	ldr	r3, [r7, #24]
 8006612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006616:	d016      	beq.n	8006646 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006618:	f7fd fdfe 	bl	8004218 <HAL_GetTick>
 800661c:	4602      	mov	r2, r0
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	1ad3      	subs	r3, r2, r3
 8006622:	69ba      	ldr	r2, [r7, #24]
 8006624:	429a      	cmp	r2, r3
 8006626:	d302      	bcc.n	800662e <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006628:	69bb      	ldr	r3, [r7, #24]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d10b      	bne.n	8006646 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2204      	movs	r2, #4
 8006632:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800663a:	f043 0201 	orr.w	r2, r3, #1
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	e00e      	b.n	8006664 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	689a      	ldr	r2, [r3, #8]
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	4013      	ands	r3, r2
 8006650:	2b00      	cmp	r3, #0
 8006652:	bf14      	ite	ne
 8006654:	2301      	movne	r3, #1
 8006656:	2300      	moveq	r3, #0
 8006658:	b2db      	uxtb	r3, r3
 800665a:	461a      	mov	r2, r3
 800665c:	79fb      	ldrb	r3, [r7, #7]
 800665e:	429a      	cmp	r2, r3
 8006660:	d1d6      	bne.n	8006610 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006662:	2300      	movs	r3, #0
}
 8006664:	4618      	mov	r0, r3
 8006666:	3710      	adds	r7, #16
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800666c:	b480      	push	{r7}
 800666e:	b085      	sub	sp, #20
 8006670:	af00      	add	r7, sp, #0
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	60b9      	str	r1, [r7, #8]
 8006676:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667c:	2b00      	cmp	r3, #0
 800667e:	d009      	beq.n	8006694 <QSPI_Config+0x28>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006686:	d005      	beq.n	8006694 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	3a01      	subs	r2, #1
 8006692:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	699b      	ldr	r3, [r3, #24]
 8006698:	2b00      	cmp	r3, #0
 800669a:	f000 80b9 	beq.w	8006810 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	6a1b      	ldr	r3, [r3, #32]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d05f      	beq.n	8006766 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	68ba      	ldr	r2, [r7, #8]
 80066ac:	6892      	ldr	r2, [r2, #8]
 80066ae:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	69db      	ldr	r3, [r3, #28]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d031      	beq.n	800671c <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c0:	431a      	orrs	r2, r3
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066c6:	431a      	orrs	r2, r3
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066cc:	431a      	orrs	r2, r3
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	695b      	ldr	r3, [r3, #20]
 80066d2:	049b      	lsls	r3, r3, #18
 80066d4:	431a      	orrs	r2, r3
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	691b      	ldr	r3, [r3, #16]
 80066da:	431a      	orrs	r2, r3
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	6a1b      	ldr	r3, [r3, #32]
 80066e0:	431a      	orrs	r2, r3
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	431a      	orrs	r2, r3
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	69db      	ldr	r3, [r3, #28]
 80066ec:	431a      	orrs	r2, r3
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	699b      	ldr	r3, [r3, #24]
 80066f2:	431a      	orrs	r2, r3
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	ea42 0103 	orr.w	r1, r2, r3
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	430a      	orrs	r2, r1
 8006704:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800670c:	f000 812e 	beq.w	800696c <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	68ba      	ldr	r2, [r7, #8]
 8006716:	6852      	ldr	r2, [r2, #4]
 8006718:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800671a:	e127      	b.n	800696c <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006724:	431a      	orrs	r2, r3
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800672a:	431a      	orrs	r2, r3
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006730:	431a      	orrs	r2, r3
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	695b      	ldr	r3, [r3, #20]
 8006736:	049b      	lsls	r3, r3, #18
 8006738:	431a      	orrs	r2, r3
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	691b      	ldr	r3, [r3, #16]
 800673e:	431a      	orrs	r2, r3
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	6a1b      	ldr	r3, [r3, #32]
 8006744:	431a      	orrs	r2, r3
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	69db      	ldr	r3, [r3, #28]
 800674a:	431a      	orrs	r2, r3
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	699b      	ldr	r3, [r3, #24]
 8006750:	431a      	orrs	r2, r3
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	ea42 0103 	orr.w	r1, r2, r3
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	430a      	orrs	r2, r1
 8006762:	615a      	str	r2, [r3, #20]
}
 8006764:	e102      	b.n	800696c <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	69db      	ldr	r3, [r3, #28]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d02e      	beq.n	80067cc <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006776:	431a      	orrs	r2, r3
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800677c:	431a      	orrs	r2, r3
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006782:	431a      	orrs	r2, r3
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	695b      	ldr	r3, [r3, #20]
 8006788:	049b      	lsls	r3, r3, #18
 800678a:	431a      	orrs	r2, r3
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	6a1b      	ldr	r3, [r3, #32]
 8006790:	431a      	orrs	r2, r3
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	431a      	orrs	r2, r3
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	69db      	ldr	r3, [r3, #28]
 800679c:	431a      	orrs	r2, r3
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	699b      	ldr	r3, [r3, #24]
 80067a2:	431a      	orrs	r2, r3
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	ea42 0103 	orr.w	r1, r2, r3
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	430a      	orrs	r2, r1
 80067b4:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80067bc:	f000 80d6 	beq.w	800696c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	68ba      	ldr	r2, [r7, #8]
 80067c6:	6852      	ldr	r2, [r2, #4]
 80067c8:	619a      	str	r2, [r3, #24]
}
 80067ca:	e0cf      	b.n	800696c <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d4:	431a      	orrs	r2, r3
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067da:	431a      	orrs	r2, r3
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e0:	431a      	orrs	r2, r3
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	695b      	ldr	r3, [r3, #20]
 80067e6:	049b      	lsls	r3, r3, #18
 80067e8:	431a      	orrs	r2, r3
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	6a1b      	ldr	r3, [r3, #32]
 80067ee:	431a      	orrs	r2, r3
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	69db      	ldr	r3, [r3, #28]
 80067f4:	431a      	orrs	r2, r3
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	699b      	ldr	r3, [r3, #24]
 80067fa:	431a      	orrs	r2, r3
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	ea42 0103 	orr.w	r1, r2, r3
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	430a      	orrs	r2, r1
 800680c:	615a      	str	r2, [r3, #20]
}
 800680e:	e0ad      	b.n	800696c <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	6a1b      	ldr	r3, [r3, #32]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d058      	beq.n	80068ca <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	68ba      	ldr	r2, [r7, #8]
 800681e:	6892      	ldr	r2, [r2, #8]
 8006820:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	69db      	ldr	r3, [r3, #28]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d02d      	beq.n	8006886 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006832:	431a      	orrs	r2, r3
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006838:	431a      	orrs	r2, r3
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683e:	431a      	orrs	r2, r3
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	695b      	ldr	r3, [r3, #20]
 8006844:	049b      	lsls	r3, r3, #18
 8006846:	431a      	orrs	r2, r3
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	691b      	ldr	r3, [r3, #16]
 800684c:	431a      	orrs	r2, r3
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	6a1b      	ldr	r3, [r3, #32]
 8006852:	431a      	orrs	r2, r3
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	431a      	orrs	r2, r3
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	69db      	ldr	r3, [r3, #28]
 800685e:	431a      	orrs	r2, r3
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	699b      	ldr	r3, [r3, #24]
 8006864:	ea42 0103 	orr.w	r1, r2, r3
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	430a      	orrs	r2, r1
 8006870:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006878:	d078      	beq.n	800696c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	68ba      	ldr	r2, [r7, #8]
 8006880:	6852      	ldr	r2, [r2, #4]
 8006882:	619a      	str	r2, [r3, #24]
}
 8006884:	e072      	b.n	800696c <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800688e:	431a      	orrs	r2, r3
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006894:	431a      	orrs	r2, r3
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800689a:	431a      	orrs	r2, r3
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	695b      	ldr	r3, [r3, #20]
 80068a0:	049b      	lsls	r3, r3, #18
 80068a2:	431a      	orrs	r2, r3
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	691b      	ldr	r3, [r3, #16]
 80068a8:	431a      	orrs	r2, r3
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	6a1b      	ldr	r3, [r3, #32]
 80068ae:	431a      	orrs	r2, r3
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	69db      	ldr	r3, [r3, #28]
 80068b4:	431a      	orrs	r2, r3
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	699b      	ldr	r3, [r3, #24]
 80068ba:	ea42 0103 	orr.w	r1, r2, r3
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	430a      	orrs	r2, r1
 80068c6:	615a      	str	r2, [r3, #20]
}
 80068c8:	e050      	b.n	800696c <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	69db      	ldr	r3, [r3, #28]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d02a      	beq.n	8006928 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068da:	431a      	orrs	r2, r3
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068e0:	431a      	orrs	r2, r3
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e6:	431a      	orrs	r2, r3
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	695b      	ldr	r3, [r3, #20]
 80068ec:	049b      	lsls	r3, r3, #18
 80068ee:	431a      	orrs	r2, r3
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	6a1b      	ldr	r3, [r3, #32]
 80068f4:	431a      	orrs	r2, r3
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	431a      	orrs	r2, r3
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	69db      	ldr	r3, [r3, #28]
 8006900:	431a      	orrs	r2, r3
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	699b      	ldr	r3, [r3, #24]
 8006906:	ea42 0103 	orr.w	r1, r2, r3
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	430a      	orrs	r2, r1
 8006912:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800691a:	d027      	beq.n	800696c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	68ba      	ldr	r2, [r7, #8]
 8006922:	6852      	ldr	r2, [r2, #4]
 8006924:	619a      	str	r2, [r3, #24]
}
 8006926:	e021      	b.n	800696c <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800692c:	2b00      	cmp	r3, #0
 800692e:	d01d      	beq.n	800696c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006938:	431a      	orrs	r2, r3
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800693e:	431a      	orrs	r2, r3
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006944:	431a      	orrs	r2, r3
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	695b      	ldr	r3, [r3, #20]
 800694a:	049b      	lsls	r3, r3, #18
 800694c:	431a      	orrs	r2, r3
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	6a1b      	ldr	r3, [r3, #32]
 8006952:	431a      	orrs	r2, r3
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	69db      	ldr	r3, [r3, #28]
 8006958:	431a      	orrs	r2, r3
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	699b      	ldr	r3, [r3, #24]
 800695e:	ea42 0103 	orr.w	r1, r2, r3
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	430a      	orrs	r2, r1
 800696a:	615a      	str	r2, [r3, #20]
}
 800696c:	bf00      	nop
 800696e:	3714      	adds	r7, #20
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr

08006978 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b084      	sub	sp, #16
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d101      	bne.n	800698c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	e0cc      	b.n	8006b26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800698c:	4b68      	ldr	r3, [pc, #416]	; (8006b30 <HAL_RCC_ClockConfig+0x1b8>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 030f 	and.w	r3, r3, #15
 8006994:	683a      	ldr	r2, [r7, #0]
 8006996:	429a      	cmp	r2, r3
 8006998:	d90c      	bls.n	80069b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800699a:	4b65      	ldr	r3, [pc, #404]	; (8006b30 <HAL_RCC_ClockConfig+0x1b8>)
 800699c:	683a      	ldr	r2, [r7, #0]
 800699e:	b2d2      	uxtb	r2, r2
 80069a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069a2:	4b63      	ldr	r3, [pc, #396]	; (8006b30 <HAL_RCC_ClockConfig+0x1b8>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f003 030f 	and.w	r3, r3, #15
 80069aa:	683a      	ldr	r2, [r7, #0]
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d001      	beq.n	80069b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	e0b8      	b.n	8006b26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 0302 	and.w	r3, r3, #2
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d020      	beq.n	8006a02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f003 0304 	and.w	r3, r3, #4
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d005      	beq.n	80069d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80069cc:	4b59      	ldr	r3, [pc, #356]	; (8006b34 <HAL_RCC_ClockConfig+0x1bc>)
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	4a58      	ldr	r2, [pc, #352]	; (8006b34 <HAL_RCC_ClockConfig+0x1bc>)
 80069d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80069d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 0308 	and.w	r3, r3, #8
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d005      	beq.n	80069f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80069e4:	4b53      	ldr	r3, [pc, #332]	; (8006b34 <HAL_RCC_ClockConfig+0x1bc>)
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	4a52      	ldr	r2, [pc, #328]	; (8006b34 <HAL_RCC_ClockConfig+0x1bc>)
 80069ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80069ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069f0:	4b50      	ldr	r3, [pc, #320]	; (8006b34 <HAL_RCC_ClockConfig+0x1bc>)
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	494d      	ldr	r1, [pc, #308]	; (8006b34 <HAL_RCC_ClockConfig+0x1bc>)
 80069fe:	4313      	orrs	r3, r2
 8006a00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f003 0301 	and.w	r3, r3, #1
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d044      	beq.n	8006a98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d107      	bne.n	8006a26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a16:	4b47      	ldr	r3, [pc, #284]	; (8006b34 <HAL_RCC_ClockConfig+0x1bc>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d119      	bne.n	8006a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	e07f      	b.n	8006b26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	2b02      	cmp	r3, #2
 8006a2c:	d003      	beq.n	8006a36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a32:	2b03      	cmp	r3, #3
 8006a34:	d107      	bne.n	8006a46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a36:	4b3f      	ldr	r3, [pc, #252]	; (8006b34 <HAL_RCC_ClockConfig+0x1bc>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d109      	bne.n	8006a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	e06f      	b.n	8006b26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a46:	4b3b      	ldr	r3, [pc, #236]	; (8006b34 <HAL_RCC_ClockConfig+0x1bc>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f003 0302 	and.w	r3, r3, #2
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d101      	bne.n	8006a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	e067      	b.n	8006b26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a56:	4b37      	ldr	r3, [pc, #220]	; (8006b34 <HAL_RCC_ClockConfig+0x1bc>)
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	f023 0203 	bic.w	r2, r3, #3
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	4934      	ldr	r1, [pc, #208]	; (8006b34 <HAL_RCC_ClockConfig+0x1bc>)
 8006a64:	4313      	orrs	r3, r2
 8006a66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006a68:	f7fd fbd6 	bl	8004218 <HAL_GetTick>
 8006a6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a6e:	e00a      	b.n	8006a86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a70:	f7fd fbd2 	bl	8004218 <HAL_GetTick>
 8006a74:	4602      	mov	r2, r0
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	1ad3      	subs	r3, r2, r3
 8006a7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d901      	bls.n	8006a86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006a82:	2303      	movs	r3, #3
 8006a84:	e04f      	b.n	8006b26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a86:	4b2b      	ldr	r3, [pc, #172]	; (8006b34 <HAL_RCC_ClockConfig+0x1bc>)
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	f003 020c 	and.w	r2, r3, #12
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d1eb      	bne.n	8006a70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a98:	4b25      	ldr	r3, [pc, #148]	; (8006b30 <HAL_RCC_ClockConfig+0x1b8>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f003 030f 	and.w	r3, r3, #15
 8006aa0:	683a      	ldr	r2, [r7, #0]
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d20c      	bcs.n	8006ac0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006aa6:	4b22      	ldr	r3, [pc, #136]	; (8006b30 <HAL_RCC_ClockConfig+0x1b8>)
 8006aa8:	683a      	ldr	r2, [r7, #0]
 8006aaa:	b2d2      	uxtb	r2, r2
 8006aac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006aae:	4b20      	ldr	r3, [pc, #128]	; (8006b30 <HAL_RCC_ClockConfig+0x1b8>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f003 030f 	and.w	r3, r3, #15
 8006ab6:	683a      	ldr	r2, [r7, #0]
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d001      	beq.n	8006ac0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	e032      	b.n	8006b26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f003 0304 	and.w	r3, r3, #4
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d008      	beq.n	8006ade <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006acc:	4b19      	ldr	r3, [pc, #100]	; (8006b34 <HAL_RCC_ClockConfig+0x1bc>)
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	68db      	ldr	r3, [r3, #12]
 8006ad8:	4916      	ldr	r1, [pc, #88]	; (8006b34 <HAL_RCC_ClockConfig+0x1bc>)
 8006ada:	4313      	orrs	r3, r2
 8006adc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f003 0308 	and.w	r3, r3, #8
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d009      	beq.n	8006afe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006aea:	4b12      	ldr	r3, [pc, #72]	; (8006b34 <HAL_RCC_ClockConfig+0x1bc>)
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	691b      	ldr	r3, [r3, #16]
 8006af6:	00db      	lsls	r3, r3, #3
 8006af8:	490e      	ldr	r1, [pc, #56]	; (8006b34 <HAL_RCC_ClockConfig+0x1bc>)
 8006afa:	4313      	orrs	r3, r2
 8006afc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006afe:	f000 f887 	bl	8006c10 <HAL_RCC_GetSysClockFreq>
 8006b02:	4602      	mov	r2, r0
 8006b04:	4b0b      	ldr	r3, [pc, #44]	; (8006b34 <HAL_RCC_ClockConfig+0x1bc>)
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	091b      	lsrs	r3, r3, #4
 8006b0a:	f003 030f 	and.w	r3, r3, #15
 8006b0e:	490a      	ldr	r1, [pc, #40]	; (8006b38 <HAL_RCC_ClockConfig+0x1c0>)
 8006b10:	5ccb      	ldrb	r3, [r1, r3]
 8006b12:	fa22 f303 	lsr.w	r3, r2, r3
 8006b16:	4a09      	ldr	r2, [pc, #36]	; (8006b3c <HAL_RCC_ClockConfig+0x1c4>)
 8006b18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006b1a:	4b09      	ldr	r3, [pc, #36]	; (8006b40 <HAL_RCC_ClockConfig+0x1c8>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f7fc fd76 	bl	8003610 <HAL_InitTick>

  return HAL_OK;
 8006b24:	2300      	movs	r3, #0
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3710      	adds	r7, #16
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	40023c00 	.word	0x40023c00
 8006b34:	40023800 	.word	0x40023800
 8006b38:	0800bad0 	.word	0x0800bad0
 8006b3c:	20000060 	.word	0x20000060
 8006b40:	20000064 	.word	0x20000064

08006b44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b44:	b480      	push	{r7}
 8006b46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b48:	4b03      	ldr	r3, [pc, #12]	; (8006b58 <HAL_RCC_GetHCLKFreq+0x14>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr
 8006b56:	bf00      	nop
 8006b58:	20000060 	.word	0x20000060

08006b5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006b60:	f7ff fff0 	bl	8006b44 <HAL_RCC_GetHCLKFreq>
 8006b64:	4602      	mov	r2, r0
 8006b66:	4b05      	ldr	r3, [pc, #20]	; (8006b7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	0a9b      	lsrs	r3, r3, #10
 8006b6c:	f003 0307 	and.w	r3, r3, #7
 8006b70:	4903      	ldr	r1, [pc, #12]	; (8006b80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b72:	5ccb      	ldrb	r3, [r1, r3]
 8006b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	40023800 	.word	0x40023800
 8006b80:	0800bae0 	.word	0x0800bae0

08006b84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006b88:	f7ff ffdc 	bl	8006b44 <HAL_RCC_GetHCLKFreq>
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	4b05      	ldr	r3, [pc, #20]	; (8006ba4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	0b5b      	lsrs	r3, r3, #13
 8006b94:	f003 0307 	and.w	r3, r3, #7
 8006b98:	4903      	ldr	r1, [pc, #12]	; (8006ba8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b9a:	5ccb      	ldrb	r3, [r1, r3]
 8006b9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	bd80      	pop	{r7, pc}
 8006ba4:	40023800 	.word	0x40023800
 8006ba8:	0800bae0 	.word	0x0800bae0

08006bac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	220f      	movs	r2, #15
 8006bba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006bbc:	4b12      	ldr	r3, [pc, #72]	; (8006c08 <HAL_RCC_GetClockConfig+0x5c>)
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	f003 0203 	and.w	r2, r3, #3
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006bc8:	4b0f      	ldr	r3, [pc, #60]	; (8006c08 <HAL_RCC_GetClockConfig+0x5c>)
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006bd4:	4b0c      	ldr	r3, [pc, #48]	; (8006c08 <HAL_RCC_GetClockConfig+0x5c>)
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006be0:	4b09      	ldr	r3, [pc, #36]	; (8006c08 <HAL_RCC_GetClockConfig+0x5c>)
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	08db      	lsrs	r3, r3, #3
 8006be6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006bee:	4b07      	ldr	r3, [pc, #28]	; (8006c0c <HAL_RCC_GetClockConfig+0x60>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f003 020f 	and.w	r2, r3, #15
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	601a      	str	r2, [r3, #0]
}
 8006bfa:	bf00      	nop
 8006bfc:	370c      	adds	r7, #12
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr
 8006c06:	bf00      	nop
 8006c08:	40023800 	.word	0x40023800
 8006c0c:	40023c00 	.word	0x40023c00

08006c10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006c14:	b087      	sub	sp, #28
 8006c16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006c18:	2600      	movs	r6, #0
 8006c1a:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 8006c1c:	2600      	movs	r6, #0
 8006c1e:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 8006c20:	2600      	movs	r6, #0
 8006c22:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 8006c24:	2600      	movs	r6, #0
 8006c26:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006c28:	2600      	movs	r6, #0
 8006c2a:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c2c:	4ea3      	ldr	r6, [pc, #652]	; (8006ebc <HAL_RCC_GetSysClockFreq+0x2ac>)
 8006c2e:	68b6      	ldr	r6, [r6, #8]
 8006c30:	f006 060c 	and.w	r6, r6, #12
 8006c34:	2e0c      	cmp	r6, #12
 8006c36:	f200 8137 	bhi.w	8006ea8 <HAL_RCC_GetSysClockFreq+0x298>
 8006c3a:	f20f 0c08 	addw	ip, pc, #8
 8006c3e:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 8006c42:	bf00      	nop
 8006c44:	08006c79 	.word	0x08006c79
 8006c48:	08006ea9 	.word	0x08006ea9
 8006c4c:	08006ea9 	.word	0x08006ea9
 8006c50:	08006ea9 	.word	0x08006ea9
 8006c54:	08006c7f 	.word	0x08006c7f
 8006c58:	08006ea9 	.word	0x08006ea9
 8006c5c:	08006ea9 	.word	0x08006ea9
 8006c60:	08006ea9 	.word	0x08006ea9
 8006c64:	08006c85 	.word	0x08006c85
 8006c68:	08006ea9 	.word	0x08006ea9
 8006c6c:	08006ea9 	.word	0x08006ea9
 8006c70:	08006ea9 	.word	0x08006ea9
 8006c74:	08006d9b 	.word	0x08006d9b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006c78:	4b91      	ldr	r3, [pc, #580]	; (8006ec0 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8006c7a:	613b      	str	r3, [r7, #16]
       break;
 8006c7c:	e117      	b.n	8006eae <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006c7e:	4b91      	ldr	r3, [pc, #580]	; (8006ec4 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8006c80:	613b      	str	r3, [r7, #16]
      break;
 8006c82:	e114      	b.n	8006eae <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006c84:	4b8d      	ldr	r3, [pc, #564]	; (8006ebc <HAL_RCC_GetSysClockFreq+0x2ac>)
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c8c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006c8e:	4b8b      	ldr	r3, [pc, #556]	; (8006ebc <HAL_RCC_GetSysClockFreq+0x2ac>)
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d024      	beq.n	8006ce4 <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c9a:	4b88      	ldr	r3, [pc, #544]	; (8006ebc <HAL_RCC_GetSysClockFreq+0x2ac>)
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	099b      	lsrs	r3, r3, #6
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	f04f 0300 	mov.w	r3, #0
 8006ca6:	f240 14ff 	movw	r4, #511	; 0x1ff
 8006caa:	f04f 0500 	mov.w	r5, #0
 8006cae:	ea02 0004 	and.w	r0, r2, r4
 8006cb2:	ea03 0105 	and.w	r1, r3, r5
 8006cb6:	4b83      	ldr	r3, [pc, #524]	; (8006ec4 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8006cb8:	fb03 f201 	mul.w	r2, r3, r1
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	fb03 f300 	mul.w	r3, r3, r0
 8006cc2:	4413      	add	r3, r2
 8006cc4:	4a7f      	ldr	r2, [pc, #508]	; (8006ec4 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8006cc6:	fba0 0102 	umull	r0, r1, r0, r2
 8006cca:	440b      	add	r3, r1
 8006ccc:	4619      	mov	r1, r3
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	f04f 0300 	mov.w	r3, #0
 8006cd6:	f7f9 fa9b 	bl	8000210 <__aeabi_uldivmod>
 8006cda:	4602      	mov	r2, r0
 8006cdc:	460b      	mov	r3, r1
 8006cde:	4613      	mov	r3, r2
 8006ce0:	617b      	str	r3, [r7, #20]
 8006ce2:	e04c      	b.n	8006d7e <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ce4:	4b75      	ldr	r3, [pc, #468]	; (8006ebc <HAL_RCC_GetSysClockFreq+0x2ac>)
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	099b      	lsrs	r3, r3, #6
 8006cea:	461a      	mov	r2, r3
 8006cec:	f04f 0300 	mov.w	r3, #0
 8006cf0:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006cf4:	f04f 0100 	mov.w	r1, #0
 8006cf8:	ea02 0800 	and.w	r8, r2, r0
 8006cfc:	ea03 0901 	and.w	r9, r3, r1
 8006d00:	4640      	mov	r0, r8
 8006d02:	4649      	mov	r1, r9
 8006d04:	f04f 0200 	mov.w	r2, #0
 8006d08:	f04f 0300 	mov.w	r3, #0
 8006d0c:	014b      	lsls	r3, r1, #5
 8006d0e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006d12:	0142      	lsls	r2, r0, #5
 8006d14:	4610      	mov	r0, r2
 8006d16:	4619      	mov	r1, r3
 8006d18:	ebb0 0008 	subs.w	r0, r0, r8
 8006d1c:	eb61 0109 	sbc.w	r1, r1, r9
 8006d20:	f04f 0200 	mov.w	r2, #0
 8006d24:	f04f 0300 	mov.w	r3, #0
 8006d28:	018b      	lsls	r3, r1, #6
 8006d2a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006d2e:	0182      	lsls	r2, r0, #6
 8006d30:	1a12      	subs	r2, r2, r0
 8006d32:	eb63 0301 	sbc.w	r3, r3, r1
 8006d36:	f04f 0000 	mov.w	r0, #0
 8006d3a:	f04f 0100 	mov.w	r1, #0
 8006d3e:	00d9      	lsls	r1, r3, #3
 8006d40:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006d44:	00d0      	lsls	r0, r2, #3
 8006d46:	4602      	mov	r2, r0
 8006d48:	460b      	mov	r3, r1
 8006d4a:	eb12 0208 	adds.w	r2, r2, r8
 8006d4e:	eb43 0309 	adc.w	r3, r3, r9
 8006d52:	f04f 0000 	mov.w	r0, #0
 8006d56:	f04f 0100 	mov.w	r1, #0
 8006d5a:	0299      	lsls	r1, r3, #10
 8006d5c:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006d60:	0290      	lsls	r0, r2, #10
 8006d62:	4602      	mov	r2, r0
 8006d64:	460b      	mov	r3, r1
 8006d66:	4610      	mov	r0, r2
 8006d68:	4619      	mov	r1, r3
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	f04f 0300 	mov.w	r3, #0
 8006d72:	f7f9 fa4d 	bl	8000210 <__aeabi_uldivmod>
 8006d76:	4602      	mov	r2, r0
 8006d78:	460b      	mov	r3, r1
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006d7e:	4b4f      	ldr	r3, [pc, #316]	; (8006ebc <HAL_RCC_GetSysClockFreq+0x2ac>)
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	0c1b      	lsrs	r3, r3, #16
 8006d84:	f003 0303 	and.w	r3, r3, #3
 8006d88:	3301      	adds	r3, #1
 8006d8a:	005b      	lsls	r3, r3, #1
 8006d8c:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8006d8e:	697a      	ldr	r2, [r7, #20]
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d96:	613b      	str	r3, [r7, #16]
      break;
 8006d98:	e089      	b.n	8006eae <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006d9a:	4948      	ldr	r1, [pc, #288]	; (8006ebc <HAL_RCC_GetSysClockFreq+0x2ac>)
 8006d9c:	6849      	ldr	r1, [r1, #4]
 8006d9e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8006da2:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006da4:	4945      	ldr	r1, [pc, #276]	; (8006ebc <HAL_RCC_GetSysClockFreq+0x2ac>)
 8006da6:	6849      	ldr	r1, [r1, #4]
 8006da8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8006dac:	2900      	cmp	r1, #0
 8006dae:	d024      	beq.n	8006dfa <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006db0:	4942      	ldr	r1, [pc, #264]	; (8006ebc <HAL_RCC_GetSysClockFreq+0x2ac>)
 8006db2:	6849      	ldr	r1, [r1, #4]
 8006db4:	0989      	lsrs	r1, r1, #6
 8006db6:	4608      	mov	r0, r1
 8006db8:	f04f 0100 	mov.w	r1, #0
 8006dbc:	f240 14ff 	movw	r4, #511	; 0x1ff
 8006dc0:	f04f 0500 	mov.w	r5, #0
 8006dc4:	ea00 0204 	and.w	r2, r0, r4
 8006dc8:	ea01 0305 	and.w	r3, r1, r5
 8006dcc:	493d      	ldr	r1, [pc, #244]	; (8006ec4 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8006dce:	fb01 f003 	mul.w	r0, r1, r3
 8006dd2:	2100      	movs	r1, #0
 8006dd4:	fb01 f102 	mul.w	r1, r1, r2
 8006dd8:	1844      	adds	r4, r0, r1
 8006dda:	493a      	ldr	r1, [pc, #232]	; (8006ec4 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8006ddc:	fba2 0101 	umull	r0, r1, r2, r1
 8006de0:	1863      	adds	r3, r4, r1
 8006de2:	4619      	mov	r1, r3
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	461a      	mov	r2, r3
 8006de8:	f04f 0300 	mov.w	r3, #0
 8006dec:	f7f9 fa10 	bl	8000210 <__aeabi_uldivmod>
 8006df0:	4602      	mov	r2, r0
 8006df2:	460b      	mov	r3, r1
 8006df4:	4613      	mov	r3, r2
 8006df6:	617b      	str	r3, [r7, #20]
 8006df8:	e04a      	b.n	8006e90 <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006dfa:	4b30      	ldr	r3, [pc, #192]	; (8006ebc <HAL_RCC_GetSysClockFreq+0x2ac>)
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	099b      	lsrs	r3, r3, #6
 8006e00:	461a      	mov	r2, r3
 8006e02:	f04f 0300 	mov.w	r3, #0
 8006e06:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006e0a:	f04f 0100 	mov.w	r1, #0
 8006e0e:	ea02 0400 	and.w	r4, r2, r0
 8006e12:	ea03 0501 	and.w	r5, r3, r1
 8006e16:	4620      	mov	r0, r4
 8006e18:	4629      	mov	r1, r5
 8006e1a:	f04f 0200 	mov.w	r2, #0
 8006e1e:	f04f 0300 	mov.w	r3, #0
 8006e22:	014b      	lsls	r3, r1, #5
 8006e24:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006e28:	0142      	lsls	r2, r0, #5
 8006e2a:	4610      	mov	r0, r2
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	1b00      	subs	r0, r0, r4
 8006e30:	eb61 0105 	sbc.w	r1, r1, r5
 8006e34:	f04f 0200 	mov.w	r2, #0
 8006e38:	f04f 0300 	mov.w	r3, #0
 8006e3c:	018b      	lsls	r3, r1, #6
 8006e3e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006e42:	0182      	lsls	r2, r0, #6
 8006e44:	1a12      	subs	r2, r2, r0
 8006e46:	eb63 0301 	sbc.w	r3, r3, r1
 8006e4a:	f04f 0000 	mov.w	r0, #0
 8006e4e:	f04f 0100 	mov.w	r1, #0
 8006e52:	00d9      	lsls	r1, r3, #3
 8006e54:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006e58:	00d0      	lsls	r0, r2, #3
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	1912      	adds	r2, r2, r4
 8006e60:	eb45 0303 	adc.w	r3, r5, r3
 8006e64:	f04f 0000 	mov.w	r0, #0
 8006e68:	f04f 0100 	mov.w	r1, #0
 8006e6c:	0299      	lsls	r1, r3, #10
 8006e6e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006e72:	0290      	lsls	r0, r2, #10
 8006e74:	4602      	mov	r2, r0
 8006e76:	460b      	mov	r3, r1
 8006e78:	4610      	mov	r0, r2
 8006e7a:	4619      	mov	r1, r3
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	461a      	mov	r2, r3
 8006e80:	f04f 0300 	mov.w	r3, #0
 8006e84:	f7f9 f9c4 	bl	8000210 <__aeabi_uldivmod>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	460b      	mov	r3, r1
 8006e8c:	4613      	mov	r3, r2
 8006e8e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006e90:	4b0a      	ldr	r3, [pc, #40]	; (8006ebc <HAL_RCC_GetSysClockFreq+0x2ac>)
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	0f1b      	lsrs	r3, r3, #28
 8006e96:	f003 0307 	and.w	r3, r3, #7
 8006e9a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8006e9c:	697a      	ldr	r2, [r7, #20]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ea4:	613b      	str	r3, [r7, #16]
      break;
 8006ea6:	e002      	b.n	8006eae <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006ea8:	4b05      	ldr	r3, [pc, #20]	; (8006ec0 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8006eaa:	613b      	str	r3, [r7, #16]
      break;
 8006eac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006eae:	693b      	ldr	r3, [r7, #16]
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	371c      	adds	r7, #28
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006eba:	bf00      	nop
 8006ebc:	40023800 	.word	0x40023800
 8006ec0:	00f42400 	.word	0x00f42400
 8006ec4:	017d7840 	.word	0x017d7840

08006ec8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b086      	sub	sp, #24
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f003 0301 	and.w	r3, r3, #1
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	f000 8083 	beq.w	8006fe8 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006ee2:	4b95      	ldr	r3, [pc, #596]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	f003 030c 	and.w	r3, r3, #12
 8006eea:	2b04      	cmp	r3, #4
 8006eec:	d019      	beq.n	8006f22 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006eee:	4b92      	ldr	r3, [pc, #584]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006ef6:	2b08      	cmp	r3, #8
 8006ef8:	d106      	bne.n	8006f08 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006efa:	4b8f      	ldr	r3, [pc, #572]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f06:	d00c      	beq.n	8006f22 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f08:	4b8b      	ldr	r3, [pc, #556]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006f10:	2b0c      	cmp	r3, #12
 8006f12:	d112      	bne.n	8006f3a <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f14:	4b88      	ldr	r3, [pc, #544]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f20:	d10b      	bne.n	8006f3a <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f22:	4b85      	ldr	r3, [pc, #532]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d05b      	beq.n	8006fe6 <HAL_RCC_OscConfig+0x11e>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d157      	bne.n	8006fe6 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	e216      	b.n	8007368 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f42:	d106      	bne.n	8006f52 <HAL_RCC_OscConfig+0x8a>
 8006f44:	4b7c      	ldr	r3, [pc, #496]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a7b      	ldr	r2, [pc, #492]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 8006f4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f4e:	6013      	str	r3, [r2, #0]
 8006f50:	e01d      	b.n	8006f8e <HAL_RCC_OscConfig+0xc6>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f5a:	d10c      	bne.n	8006f76 <HAL_RCC_OscConfig+0xae>
 8006f5c:	4b76      	ldr	r3, [pc, #472]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a75      	ldr	r2, [pc, #468]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 8006f62:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f66:	6013      	str	r3, [r2, #0]
 8006f68:	4b73      	ldr	r3, [pc, #460]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a72      	ldr	r2, [pc, #456]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 8006f6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f72:	6013      	str	r3, [r2, #0]
 8006f74:	e00b      	b.n	8006f8e <HAL_RCC_OscConfig+0xc6>
 8006f76:	4b70      	ldr	r3, [pc, #448]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a6f      	ldr	r2, [pc, #444]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 8006f7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f80:	6013      	str	r3, [r2, #0]
 8006f82:	4b6d      	ldr	r3, [pc, #436]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a6c      	ldr	r2, [pc, #432]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 8006f88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f8c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d013      	beq.n	8006fbe <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f96:	f7fd f93f 	bl	8004218 <HAL_GetTick>
 8006f9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f9c:	e008      	b.n	8006fb0 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006f9e:	f7fd f93b 	bl	8004218 <HAL_GetTick>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	1ad3      	subs	r3, r2, r3
 8006fa8:	2b64      	cmp	r3, #100	; 0x64
 8006faa:	d901      	bls.n	8006fb0 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006fac:	2303      	movs	r3, #3
 8006fae:	e1db      	b.n	8007368 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fb0:	4b61      	ldr	r3, [pc, #388]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d0f0      	beq.n	8006f9e <HAL_RCC_OscConfig+0xd6>
 8006fbc:	e014      	b.n	8006fe8 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fbe:	f7fd f92b 	bl	8004218 <HAL_GetTick>
 8006fc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006fc4:	e008      	b.n	8006fd8 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006fc6:	f7fd f927 	bl	8004218 <HAL_GetTick>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	1ad3      	subs	r3, r2, r3
 8006fd0:	2b64      	cmp	r3, #100	; 0x64
 8006fd2:	d901      	bls.n	8006fd8 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8006fd4:	2303      	movs	r3, #3
 8006fd6:	e1c7      	b.n	8007368 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006fd8:	4b57      	ldr	r3, [pc, #348]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d1f0      	bne.n	8006fc6 <HAL_RCC_OscConfig+0xfe>
 8006fe4:	e000      	b.n	8006fe8 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fe6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f003 0302 	and.w	r3, r3, #2
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d06f      	beq.n	80070d4 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006ff4:	4b50      	ldr	r3, [pc, #320]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	f003 030c 	and.w	r3, r3, #12
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d017      	beq.n	8007030 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007000:	4b4d      	ldr	r3, [pc, #308]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007008:	2b08      	cmp	r3, #8
 800700a:	d105      	bne.n	8007018 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800700c:	4b4a      	ldr	r3, [pc, #296]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007014:	2b00      	cmp	r3, #0
 8007016:	d00b      	beq.n	8007030 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007018:	4b47      	ldr	r3, [pc, #284]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007020:	2b0c      	cmp	r3, #12
 8007022:	d11c      	bne.n	800705e <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007024:	4b44      	ldr	r3, [pc, #272]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800702c:	2b00      	cmp	r3, #0
 800702e:	d116      	bne.n	800705e <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007030:	4b41      	ldr	r3, [pc, #260]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f003 0302 	and.w	r3, r3, #2
 8007038:	2b00      	cmp	r3, #0
 800703a:	d005      	beq.n	8007048 <HAL_RCC_OscConfig+0x180>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	2b01      	cmp	r3, #1
 8007042:	d001      	beq.n	8007048 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8007044:	2301      	movs	r3, #1
 8007046:	e18f      	b.n	8007368 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007048:	4b3b      	ldr	r3, [pc, #236]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	691b      	ldr	r3, [r3, #16]
 8007054:	00db      	lsls	r3, r3, #3
 8007056:	4938      	ldr	r1, [pc, #224]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 8007058:	4313      	orrs	r3, r2
 800705a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800705c:	e03a      	b.n	80070d4 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	68db      	ldr	r3, [r3, #12]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d020      	beq.n	80070a8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007066:	4b35      	ldr	r3, [pc, #212]	; (800713c <HAL_RCC_OscConfig+0x274>)
 8007068:	2201      	movs	r2, #1
 800706a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800706c:	f7fd f8d4 	bl	8004218 <HAL_GetTick>
 8007070:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007072:	e008      	b.n	8007086 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007074:	f7fd f8d0 	bl	8004218 <HAL_GetTick>
 8007078:	4602      	mov	r2, r0
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	1ad3      	subs	r3, r2, r3
 800707e:	2b02      	cmp	r3, #2
 8007080:	d901      	bls.n	8007086 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007082:	2303      	movs	r3, #3
 8007084:	e170      	b.n	8007368 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007086:	4b2c      	ldr	r3, [pc, #176]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f003 0302 	and.w	r3, r3, #2
 800708e:	2b00      	cmp	r3, #0
 8007090:	d0f0      	beq.n	8007074 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007092:	4b29      	ldr	r3, [pc, #164]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	00db      	lsls	r3, r3, #3
 80070a0:	4925      	ldr	r1, [pc, #148]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 80070a2:	4313      	orrs	r3, r2
 80070a4:	600b      	str	r3, [r1, #0]
 80070a6:	e015      	b.n	80070d4 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80070a8:	4b24      	ldr	r3, [pc, #144]	; (800713c <HAL_RCC_OscConfig+0x274>)
 80070aa:	2200      	movs	r2, #0
 80070ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070ae:	f7fd f8b3 	bl	8004218 <HAL_GetTick>
 80070b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80070b4:	e008      	b.n	80070c8 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80070b6:	f7fd f8af 	bl	8004218 <HAL_GetTick>
 80070ba:	4602      	mov	r2, r0
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	1ad3      	subs	r3, r2, r3
 80070c0:	2b02      	cmp	r3, #2
 80070c2:	d901      	bls.n	80070c8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80070c4:	2303      	movs	r3, #3
 80070c6:	e14f      	b.n	8007368 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80070c8:	4b1b      	ldr	r3, [pc, #108]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f003 0302 	and.w	r3, r3, #2
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d1f0      	bne.n	80070b6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f003 0308 	and.w	r3, r3, #8
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d037      	beq.n	8007150 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	695b      	ldr	r3, [r3, #20]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d016      	beq.n	8007116 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80070e8:	4b15      	ldr	r3, [pc, #84]	; (8007140 <HAL_RCC_OscConfig+0x278>)
 80070ea:	2201      	movs	r2, #1
 80070ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070ee:	f7fd f893 	bl	8004218 <HAL_GetTick>
 80070f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80070f4:	e008      	b.n	8007108 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80070f6:	f7fd f88f 	bl	8004218 <HAL_GetTick>
 80070fa:	4602      	mov	r2, r0
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	1ad3      	subs	r3, r2, r3
 8007100:	2b02      	cmp	r3, #2
 8007102:	d901      	bls.n	8007108 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007104:	2303      	movs	r3, #3
 8007106:	e12f      	b.n	8007368 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007108:	4b0b      	ldr	r3, [pc, #44]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 800710a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800710c:	f003 0302 	and.w	r3, r3, #2
 8007110:	2b00      	cmp	r3, #0
 8007112:	d0f0      	beq.n	80070f6 <HAL_RCC_OscConfig+0x22e>
 8007114:	e01c      	b.n	8007150 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007116:	4b0a      	ldr	r3, [pc, #40]	; (8007140 <HAL_RCC_OscConfig+0x278>)
 8007118:	2200      	movs	r2, #0
 800711a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800711c:	f7fd f87c 	bl	8004218 <HAL_GetTick>
 8007120:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007122:	e00f      	b.n	8007144 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007124:	f7fd f878 	bl	8004218 <HAL_GetTick>
 8007128:	4602      	mov	r2, r0
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	1ad3      	subs	r3, r2, r3
 800712e:	2b02      	cmp	r3, #2
 8007130:	d908      	bls.n	8007144 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8007132:	2303      	movs	r3, #3
 8007134:	e118      	b.n	8007368 <HAL_RCC_OscConfig+0x4a0>
 8007136:	bf00      	nop
 8007138:	40023800 	.word	0x40023800
 800713c:	42470000 	.word	0x42470000
 8007140:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007144:	4b8a      	ldr	r3, [pc, #552]	; (8007370 <HAL_RCC_OscConfig+0x4a8>)
 8007146:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007148:	f003 0302 	and.w	r3, r3, #2
 800714c:	2b00      	cmp	r3, #0
 800714e:	d1e9      	bne.n	8007124 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f003 0304 	and.w	r3, r3, #4
 8007158:	2b00      	cmp	r3, #0
 800715a:	f000 8097 	beq.w	800728c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800715e:	2300      	movs	r3, #0
 8007160:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007162:	4b83      	ldr	r3, [pc, #524]	; (8007370 <HAL_RCC_OscConfig+0x4a8>)
 8007164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800716a:	2b00      	cmp	r3, #0
 800716c:	d10f      	bne.n	800718e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800716e:	2300      	movs	r3, #0
 8007170:	60fb      	str	r3, [r7, #12]
 8007172:	4b7f      	ldr	r3, [pc, #508]	; (8007370 <HAL_RCC_OscConfig+0x4a8>)
 8007174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007176:	4a7e      	ldr	r2, [pc, #504]	; (8007370 <HAL_RCC_OscConfig+0x4a8>)
 8007178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800717c:	6413      	str	r3, [r2, #64]	; 0x40
 800717e:	4b7c      	ldr	r3, [pc, #496]	; (8007370 <HAL_RCC_OscConfig+0x4a8>)
 8007180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007186:	60fb      	str	r3, [r7, #12]
 8007188:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800718a:	2301      	movs	r3, #1
 800718c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800718e:	4b79      	ldr	r3, [pc, #484]	; (8007374 <HAL_RCC_OscConfig+0x4ac>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007196:	2b00      	cmp	r3, #0
 8007198:	d118      	bne.n	80071cc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800719a:	4b76      	ldr	r3, [pc, #472]	; (8007374 <HAL_RCC_OscConfig+0x4ac>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a75      	ldr	r2, [pc, #468]	; (8007374 <HAL_RCC_OscConfig+0x4ac>)
 80071a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80071a6:	f7fd f837 	bl	8004218 <HAL_GetTick>
 80071aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071ac:	e008      	b.n	80071c0 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071ae:	f7fd f833 	bl	8004218 <HAL_GetTick>
 80071b2:	4602      	mov	r2, r0
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	1ad3      	subs	r3, r2, r3
 80071b8:	2b02      	cmp	r3, #2
 80071ba:	d901      	bls.n	80071c0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80071bc:	2303      	movs	r3, #3
 80071be:	e0d3      	b.n	8007368 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071c0:	4b6c      	ldr	r3, [pc, #432]	; (8007374 <HAL_RCC_OscConfig+0x4ac>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d0f0      	beq.n	80071ae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d106      	bne.n	80071e2 <HAL_RCC_OscConfig+0x31a>
 80071d4:	4b66      	ldr	r3, [pc, #408]	; (8007370 <HAL_RCC_OscConfig+0x4a8>)
 80071d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071d8:	4a65      	ldr	r2, [pc, #404]	; (8007370 <HAL_RCC_OscConfig+0x4a8>)
 80071da:	f043 0301 	orr.w	r3, r3, #1
 80071de:	6713      	str	r3, [r2, #112]	; 0x70
 80071e0:	e01c      	b.n	800721c <HAL_RCC_OscConfig+0x354>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	2b05      	cmp	r3, #5
 80071e8:	d10c      	bne.n	8007204 <HAL_RCC_OscConfig+0x33c>
 80071ea:	4b61      	ldr	r3, [pc, #388]	; (8007370 <HAL_RCC_OscConfig+0x4a8>)
 80071ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ee:	4a60      	ldr	r2, [pc, #384]	; (8007370 <HAL_RCC_OscConfig+0x4a8>)
 80071f0:	f043 0304 	orr.w	r3, r3, #4
 80071f4:	6713      	str	r3, [r2, #112]	; 0x70
 80071f6:	4b5e      	ldr	r3, [pc, #376]	; (8007370 <HAL_RCC_OscConfig+0x4a8>)
 80071f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071fa:	4a5d      	ldr	r2, [pc, #372]	; (8007370 <HAL_RCC_OscConfig+0x4a8>)
 80071fc:	f043 0301 	orr.w	r3, r3, #1
 8007200:	6713      	str	r3, [r2, #112]	; 0x70
 8007202:	e00b      	b.n	800721c <HAL_RCC_OscConfig+0x354>
 8007204:	4b5a      	ldr	r3, [pc, #360]	; (8007370 <HAL_RCC_OscConfig+0x4a8>)
 8007206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007208:	4a59      	ldr	r2, [pc, #356]	; (8007370 <HAL_RCC_OscConfig+0x4a8>)
 800720a:	f023 0301 	bic.w	r3, r3, #1
 800720e:	6713      	str	r3, [r2, #112]	; 0x70
 8007210:	4b57      	ldr	r3, [pc, #348]	; (8007370 <HAL_RCC_OscConfig+0x4a8>)
 8007212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007214:	4a56      	ldr	r2, [pc, #344]	; (8007370 <HAL_RCC_OscConfig+0x4a8>)
 8007216:	f023 0304 	bic.w	r3, r3, #4
 800721a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d015      	beq.n	8007250 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007224:	f7fc fff8 	bl	8004218 <HAL_GetTick>
 8007228:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800722a:	e00a      	b.n	8007242 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800722c:	f7fc fff4 	bl	8004218 <HAL_GetTick>
 8007230:	4602      	mov	r2, r0
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	1ad3      	subs	r3, r2, r3
 8007236:	f241 3288 	movw	r2, #5000	; 0x1388
 800723a:	4293      	cmp	r3, r2
 800723c:	d901      	bls.n	8007242 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800723e:	2303      	movs	r3, #3
 8007240:	e092      	b.n	8007368 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007242:	4b4b      	ldr	r3, [pc, #300]	; (8007370 <HAL_RCC_OscConfig+0x4a8>)
 8007244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007246:	f003 0302 	and.w	r3, r3, #2
 800724a:	2b00      	cmp	r3, #0
 800724c:	d0ee      	beq.n	800722c <HAL_RCC_OscConfig+0x364>
 800724e:	e014      	b.n	800727a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007250:	f7fc ffe2 	bl	8004218 <HAL_GetTick>
 8007254:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007256:	e00a      	b.n	800726e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007258:	f7fc ffde 	bl	8004218 <HAL_GetTick>
 800725c:	4602      	mov	r2, r0
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	1ad3      	subs	r3, r2, r3
 8007262:	f241 3288 	movw	r2, #5000	; 0x1388
 8007266:	4293      	cmp	r3, r2
 8007268:	d901      	bls.n	800726e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800726a:	2303      	movs	r3, #3
 800726c:	e07c      	b.n	8007368 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800726e:	4b40      	ldr	r3, [pc, #256]	; (8007370 <HAL_RCC_OscConfig+0x4a8>)
 8007270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007272:	f003 0302 	and.w	r3, r3, #2
 8007276:	2b00      	cmp	r3, #0
 8007278:	d1ee      	bne.n	8007258 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800727a:	7dfb      	ldrb	r3, [r7, #23]
 800727c:	2b01      	cmp	r3, #1
 800727e:	d105      	bne.n	800728c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007280:	4b3b      	ldr	r3, [pc, #236]	; (8007370 <HAL_RCC_OscConfig+0x4a8>)
 8007282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007284:	4a3a      	ldr	r2, [pc, #232]	; (8007370 <HAL_RCC_OscConfig+0x4a8>)
 8007286:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800728a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	699b      	ldr	r3, [r3, #24]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d068      	beq.n	8007366 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007294:	4b36      	ldr	r3, [pc, #216]	; (8007370 <HAL_RCC_OscConfig+0x4a8>)
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	f003 030c 	and.w	r3, r3, #12
 800729c:	2b08      	cmp	r3, #8
 800729e:	d060      	beq.n	8007362 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	699b      	ldr	r3, [r3, #24]
 80072a4:	2b02      	cmp	r3, #2
 80072a6:	d145      	bne.n	8007334 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072a8:	4b33      	ldr	r3, [pc, #204]	; (8007378 <HAL_RCC_OscConfig+0x4b0>)
 80072aa:	2200      	movs	r2, #0
 80072ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072ae:	f7fc ffb3 	bl	8004218 <HAL_GetTick>
 80072b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072b4:	e008      	b.n	80072c8 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80072b6:	f7fc ffaf 	bl	8004218 <HAL_GetTick>
 80072ba:	4602      	mov	r2, r0
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	1ad3      	subs	r3, r2, r3
 80072c0:	2b02      	cmp	r3, #2
 80072c2:	d901      	bls.n	80072c8 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80072c4:	2303      	movs	r3, #3
 80072c6:	e04f      	b.n	8007368 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072c8:	4b29      	ldr	r3, [pc, #164]	; (8007370 <HAL_RCC_OscConfig+0x4a8>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d1f0      	bne.n	80072b6 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	69da      	ldr	r2, [r3, #28]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6a1b      	ldr	r3, [r3, #32]
 80072dc:	431a      	orrs	r2, r3
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e2:	019b      	lsls	r3, r3, #6
 80072e4:	431a      	orrs	r2, r3
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ea:	085b      	lsrs	r3, r3, #1
 80072ec:	3b01      	subs	r3, #1
 80072ee:	041b      	lsls	r3, r3, #16
 80072f0:	431a      	orrs	r2, r3
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f6:	061b      	lsls	r3, r3, #24
 80072f8:	431a      	orrs	r2, r3
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072fe:	071b      	lsls	r3, r3, #28
 8007300:	491b      	ldr	r1, [pc, #108]	; (8007370 <HAL_RCC_OscConfig+0x4a8>)
 8007302:	4313      	orrs	r3, r2
 8007304:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007306:	4b1c      	ldr	r3, [pc, #112]	; (8007378 <HAL_RCC_OscConfig+0x4b0>)
 8007308:	2201      	movs	r2, #1
 800730a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800730c:	f7fc ff84 	bl	8004218 <HAL_GetTick>
 8007310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007312:	e008      	b.n	8007326 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007314:	f7fc ff80 	bl	8004218 <HAL_GetTick>
 8007318:	4602      	mov	r2, r0
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	1ad3      	subs	r3, r2, r3
 800731e:	2b02      	cmp	r3, #2
 8007320:	d901      	bls.n	8007326 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8007322:	2303      	movs	r3, #3
 8007324:	e020      	b.n	8007368 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007326:	4b12      	ldr	r3, [pc, #72]	; (8007370 <HAL_RCC_OscConfig+0x4a8>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800732e:	2b00      	cmp	r3, #0
 8007330:	d0f0      	beq.n	8007314 <HAL_RCC_OscConfig+0x44c>
 8007332:	e018      	b.n	8007366 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007334:	4b10      	ldr	r3, [pc, #64]	; (8007378 <HAL_RCC_OscConfig+0x4b0>)
 8007336:	2200      	movs	r2, #0
 8007338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800733a:	f7fc ff6d 	bl	8004218 <HAL_GetTick>
 800733e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007340:	e008      	b.n	8007354 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007342:	f7fc ff69 	bl	8004218 <HAL_GetTick>
 8007346:	4602      	mov	r2, r0
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	1ad3      	subs	r3, r2, r3
 800734c:	2b02      	cmp	r3, #2
 800734e:	d901      	bls.n	8007354 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8007350:	2303      	movs	r3, #3
 8007352:	e009      	b.n	8007368 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007354:	4b06      	ldr	r3, [pc, #24]	; (8007370 <HAL_RCC_OscConfig+0x4a8>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800735c:	2b00      	cmp	r3, #0
 800735e:	d1f0      	bne.n	8007342 <HAL_RCC_OscConfig+0x47a>
 8007360:	e001      	b.n	8007366 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8007362:	2301      	movs	r3, #1
 8007364:	e000      	b.n	8007368 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8007366:	2300      	movs	r3, #0
}
 8007368:	4618      	mov	r0, r3
 800736a:	3718      	adds	r7, #24
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}
 8007370:	40023800 	.word	0x40023800
 8007374:	40007000 	.word	0x40007000
 8007378:	42470060 	.word	0x42470060

0800737c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b082      	sub	sp, #8
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d101      	bne.n	800738e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	e01d      	b.n	80073ca <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007394:	b2db      	uxtb	r3, r3
 8007396:	2b00      	cmp	r3, #0
 8007398:	d106      	bne.n	80073a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f7fc fb8e 	bl	8003ac4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2202      	movs	r2, #2
 80073ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	3304      	adds	r3, #4
 80073b8:	4619      	mov	r1, r3
 80073ba:	4610      	mov	r0, r2
 80073bc:	f000 fb1c 	bl	80079f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2201      	movs	r2, #1
 80073c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80073c8:	2300      	movs	r3, #0
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3708      	adds	r7, #8
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}

080073d2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80073d2:	b480      	push	{r7}
 80073d4:	b085      	sub	sp, #20
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	68da      	ldr	r2, [r3, #12]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f042 0201 	orr.w	r2, r2, #1
 80073e8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	f003 0307 	and.w	r3, r3, #7
 80073f4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2b06      	cmp	r3, #6
 80073fa:	d007      	beq.n	800740c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f042 0201 	orr.w	r2, r2, #1
 800740a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800740c:	2300      	movs	r3, #0
}
 800740e:	4618      	mov	r0, r3
 8007410:	3714      	adds	r7, #20
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr

0800741a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800741a:	b580      	push	{r7, lr}
 800741c:	b082      	sub	sp, #8
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d101      	bne.n	800742c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007428:	2301      	movs	r3, #1
 800742a:	e01d      	b.n	8007468 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007432:	b2db      	uxtb	r3, r3
 8007434:	2b00      	cmp	r3, #0
 8007436:	d106      	bne.n	8007446 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 f815 	bl	8007470 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2202      	movs	r2, #2
 800744a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	3304      	adds	r3, #4
 8007456:	4619      	mov	r1, r3
 8007458:	4610      	mov	r0, r2
 800745a:	f000 facd 	bl	80079f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2201      	movs	r2, #1
 8007462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007466:	2300      	movs	r3, #0
}
 8007468:	4618      	mov	r0, r3
 800746a:	3708      	adds	r7, #8
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007470:	b480      	push	{r7}
 8007472:	b083      	sub	sp, #12
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007478:	bf00      	nop
 800747a:	370c      	adds	r7, #12
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr

08007484 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	691b      	ldr	r3, [r3, #16]
 8007492:	f003 0302 	and.w	r3, r3, #2
 8007496:	2b02      	cmp	r3, #2
 8007498:	d122      	bne.n	80074e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	68db      	ldr	r3, [r3, #12]
 80074a0:	f003 0302 	and.w	r3, r3, #2
 80074a4:	2b02      	cmp	r3, #2
 80074a6:	d11b      	bne.n	80074e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f06f 0202 	mvn.w	r2, #2
 80074b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2201      	movs	r2, #1
 80074b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	699b      	ldr	r3, [r3, #24]
 80074be:	f003 0303 	and.w	r3, r3, #3
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d003      	beq.n	80074ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 fa78 	bl	80079bc <HAL_TIM_IC_CaptureCallback>
 80074cc:	e005      	b.n	80074da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 fa6a 	bl	80079a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 fa7b 	bl	80079d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2200      	movs	r2, #0
 80074de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	691b      	ldr	r3, [r3, #16]
 80074e6:	f003 0304 	and.w	r3, r3, #4
 80074ea:	2b04      	cmp	r3, #4
 80074ec:	d122      	bne.n	8007534 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	f003 0304 	and.w	r3, r3, #4
 80074f8:	2b04      	cmp	r3, #4
 80074fa:	d11b      	bne.n	8007534 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f06f 0204 	mvn.w	r2, #4
 8007504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2202      	movs	r2, #2
 800750a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	699b      	ldr	r3, [r3, #24]
 8007512:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007516:	2b00      	cmp	r3, #0
 8007518:	d003      	beq.n	8007522 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 fa4e 	bl	80079bc <HAL_TIM_IC_CaptureCallback>
 8007520:	e005      	b.n	800752e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 fa40 	bl	80079a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f000 fa51 	bl	80079d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2200      	movs	r2, #0
 8007532:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	691b      	ldr	r3, [r3, #16]
 800753a:	f003 0308 	and.w	r3, r3, #8
 800753e:	2b08      	cmp	r3, #8
 8007540:	d122      	bne.n	8007588 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	68db      	ldr	r3, [r3, #12]
 8007548:	f003 0308 	and.w	r3, r3, #8
 800754c:	2b08      	cmp	r3, #8
 800754e:	d11b      	bne.n	8007588 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f06f 0208 	mvn.w	r2, #8
 8007558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2204      	movs	r2, #4
 800755e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	69db      	ldr	r3, [r3, #28]
 8007566:	f003 0303 	and.w	r3, r3, #3
 800756a:	2b00      	cmp	r3, #0
 800756c:	d003      	beq.n	8007576 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 fa24 	bl	80079bc <HAL_TIM_IC_CaptureCallback>
 8007574:	e005      	b.n	8007582 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 fa16 	bl	80079a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f000 fa27 	bl	80079d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	691b      	ldr	r3, [r3, #16]
 800758e:	f003 0310 	and.w	r3, r3, #16
 8007592:	2b10      	cmp	r3, #16
 8007594:	d122      	bne.n	80075dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	f003 0310 	and.w	r3, r3, #16
 80075a0:	2b10      	cmp	r3, #16
 80075a2:	d11b      	bne.n	80075dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f06f 0210 	mvn.w	r2, #16
 80075ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2208      	movs	r2, #8
 80075b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	69db      	ldr	r3, [r3, #28]
 80075ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d003      	beq.n	80075ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 f9fa 	bl	80079bc <HAL_TIM_IC_CaptureCallback>
 80075c8:	e005      	b.n	80075d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 f9ec 	bl	80079a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 f9fd 	bl	80079d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	691b      	ldr	r3, [r3, #16]
 80075e2:	f003 0301 	and.w	r3, r3, #1
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d10e      	bne.n	8007608 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	68db      	ldr	r3, [r3, #12]
 80075f0:	f003 0301 	and.w	r3, r3, #1
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d107      	bne.n	8007608 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f06f 0201 	mvn.w	r2, #1
 8007600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f7fb ff12 	bl	800342c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	691b      	ldr	r3, [r3, #16]
 800760e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007612:	2b80      	cmp	r3, #128	; 0x80
 8007614:	d10e      	bne.n	8007634 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	68db      	ldr	r3, [r3, #12]
 800761c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007620:	2b80      	cmp	r3, #128	; 0x80
 8007622:	d107      	bne.n	8007634 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800762c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 fdce 	bl	80081d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	691b      	ldr	r3, [r3, #16]
 800763a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800763e:	2b40      	cmp	r3, #64	; 0x40
 8007640:	d10e      	bne.n	8007660 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	68db      	ldr	r3, [r3, #12]
 8007648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800764c:	2b40      	cmp	r3, #64	; 0x40
 800764e:	d107      	bne.n	8007660 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 f9c2 	bl	80079e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	691b      	ldr	r3, [r3, #16]
 8007666:	f003 0320 	and.w	r3, r3, #32
 800766a:	2b20      	cmp	r3, #32
 800766c:	d10e      	bne.n	800768c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	68db      	ldr	r3, [r3, #12]
 8007674:	f003 0320 	and.w	r3, r3, #32
 8007678:	2b20      	cmp	r3, #32
 800767a:	d107      	bne.n	800768c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f06f 0220 	mvn.w	r2, #32
 8007684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 fd98 	bl	80081bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800768c:	bf00      	nop
 800768e:	3708      	adds	r7, #8
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}

08007694 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b084      	sub	sp, #16
 8007698:	af00      	add	r7, sp, #0
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	60b9      	str	r1, [r7, #8]
 800769e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	d101      	bne.n	80076ae <HAL_TIM_PWM_ConfigChannel+0x1a>
 80076aa:	2302      	movs	r3, #2
 80076ac:	e0b4      	b.n	8007818 <HAL_TIM_PWM_ConfigChannel+0x184>
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2201      	movs	r2, #1
 80076b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2202      	movs	r2, #2
 80076ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2b0c      	cmp	r3, #12
 80076c2:	f200 809f 	bhi.w	8007804 <HAL_TIM_PWM_ConfigChannel+0x170>
 80076c6:	a201      	add	r2, pc, #4	; (adr r2, 80076cc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80076c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076cc:	08007701 	.word	0x08007701
 80076d0:	08007805 	.word	0x08007805
 80076d4:	08007805 	.word	0x08007805
 80076d8:	08007805 	.word	0x08007805
 80076dc:	08007741 	.word	0x08007741
 80076e0:	08007805 	.word	0x08007805
 80076e4:	08007805 	.word	0x08007805
 80076e8:	08007805 	.word	0x08007805
 80076ec:	08007783 	.word	0x08007783
 80076f0:	08007805 	.word	0x08007805
 80076f4:	08007805 	.word	0x08007805
 80076f8:	08007805 	.word	0x08007805
 80076fc:	080077c3 	.word	0x080077c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	68b9      	ldr	r1, [r7, #8]
 8007706:	4618      	mov	r0, r3
 8007708:	f000 fa16 	bl	8007b38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	699a      	ldr	r2, [r3, #24]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f042 0208 	orr.w	r2, r2, #8
 800771a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	699a      	ldr	r2, [r3, #24]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f022 0204 	bic.w	r2, r2, #4
 800772a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	6999      	ldr	r1, [r3, #24]
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	691a      	ldr	r2, [r3, #16]
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	430a      	orrs	r2, r1
 800773c:	619a      	str	r2, [r3, #24]
      break;
 800773e:	e062      	b.n	8007806 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	68b9      	ldr	r1, [r7, #8]
 8007746:	4618      	mov	r0, r3
 8007748:	f000 fa66 	bl	8007c18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	699a      	ldr	r2, [r3, #24]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800775a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	699a      	ldr	r2, [r3, #24]
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800776a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	6999      	ldr	r1, [r3, #24]
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	691b      	ldr	r3, [r3, #16]
 8007776:	021a      	lsls	r2, r3, #8
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	430a      	orrs	r2, r1
 800777e:	619a      	str	r2, [r3, #24]
      break;
 8007780:	e041      	b.n	8007806 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	68b9      	ldr	r1, [r7, #8]
 8007788:	4618      	mov	r0, r3
 800778a:	f000 fabb 	bl	8007d04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	69da      	ldr	r2, [r3, #28]
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f042 0208 	orr.w	r2, r2, #8
 800779c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	69da      	ldr	r2, [r3, #28]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f022 0204 	bic.w	r2, r2, #4
 80077ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	69d9      	ldr	r1, [r3, #28]
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	691a      	ldr	r2, [r3, #16]
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	430a      	orrs	r2, r1
 80077be:	61da      	str	r2, [r3, #28]
      break;
 80077c0:	e021      	b.n	8007806 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	68b9      	ldr	r1, [r7, #8]
 80077c8:	4618      	mov	r0, r3
 80077ca:	f000 fb0f 	bl	8007dec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	69da      	ldr	r2, [r3, #28]
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80077dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	69da      	ldr	r2, [r3, #28]
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	69d9      	ldr	r1, [r3, #28]
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	691b      	ldr	r3, [r3, #16]
 80077f8:	021a      	lsls	r2, r3, #8
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	430a      	orrs	r2, r1
 8007800:	61da      	str	r2, [r3, #28]
      break;
 8007802:	e000      	b.n	8007806 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8007804:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2201      	movs	r2, #1
 800780a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2200      	movs	r2, #0
 8007812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007816:	2300      	movs	r3, #0
}
 8007818:	4618      	mov	r0, r3
 800781a:	3710      	adds	r7, #16
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007830:	2b01      	cmp	r3, #1
 8007832:	d101      	bne.n	8007838 <HAL_TIM_ConfigClockSource+0x18>
 8007834:	2302      	movs	r3, #2
 8007836:	e0b3      	b.n	80079a0 <HAL_TIM_ConfigClockSource+0x180>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2201      	movs	r2, #1
 800783c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2202      	movs	r2, #2
 8007844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007856:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800785e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	68fa      	ldr	r2, [r7, #12]
 8007866:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007870:	d03e      	beq.n	80078f0 <HAL_TIM_ConfigClockSource+0xd0>
 8007872:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007876:	f200 8087 	bhi.w	8007988 <HAL_TIM_ConfigClockSource+0x168>
 800787a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800787e:	f000 8085 	beq.w	800798c <HAL_TIM_ConfigClockSource+0x16c>
 8007882:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007886:	d87f      	bhi.n	8007988 <HAL_TIM_ConfigClockSource+0x168>
 8007888:	2b70      	cmp	r3, #112	; 0x70
 800788a:	d01a      	beq.n	80078c2 <HAL_TIM_ConfigClockSource+0xa2>
 800788c:	2b70      	cmp	r3, #112	; 0x70
 800788e:	d87b      	bhi.n	8007988 <HAL_TIM_ConfigClockSource+0x168>
 8007890:	2b60      	cmp	r3, #96	; 0x60
 8007892:	d050      	beq.n	8007936 <HAL_TIM_ConfigClockSource+0x116>
 8007894:	2b60      	cmp	r3, #96	; 0x60
 8007896:	d877      	bhi.n	8007988 <HAL_TIM_ConfigClockSource+0x168>
 8007898:	2b50      	cmp	r3, #80	; 0x50
 800789a:	d03c      	beq.n	8007916 <HAL_TIM_ConfigClockSource+0xf6>
 800789c:	2b50      	cmp	r3, #80	; 0x50
 800789e:	d873      	bhi.n	8007988 <HAL_TIM_ConfigClockSource+0x168>
 80078a0:	2b40      	cmp	r3, #64	; 0x40
 80078a2:	d058      	beq.n	8007956 <HAL_TIM_ConfigClockSource+0x136>
 80078a4:	2b40      	cmp	r3, #64	; 0x40
 80078a6:	d86f      	bhi.n	8007988 <HAL_TIM_ConfigClockSource+0x168>
 80078a8:	2b30      	cmp	r3, #48	; 0x30
 80078aa:	d064      	beq.n	8007976 <HAL_TIM_ConfigClockSource+0x156>
 80078ac:	2b30      	cmp	r3, #48	; 0x30
 80078ae:	d86b      	bhi.n	8007988 <HAL_TIM_ConfigClockSource+0x168>
 80078b0:	2b20      	cmp	r3, #32
 80078b2:	d060      	beq.n	8007976 <HAL_TIM_ConfigClockSource+0x156>
 80078b4:	2b20      	cmp	r3, #32
 80078b6:	d867      	bhi.n	8007988 <HAL_TIM_ConfigClockSource+0x168>
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d05c      	beq.n	8007976 <HAL_TIM_ConfigClockSource+0x156>
 80078bc:	2b10      	cmp	r3, #16
 80078be:	d05a      	beq.n	8007976 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80078c0:	e062      	b.n	8007988 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6818      	ldr	r0, [r3, #0]
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	6899      	ldr	r1, [r3, #8]
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	685a      	ldr	r2, [r3, #4]
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	68db      	ldr	r3, [r3, #12]
 80078d2:	f000 fb5b 	bl	8007f8c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80078e4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	68fa      	ldr	r2, [r7, #12]
 80078ec:	609a      	str	r2, [r3, #8]
      break;
 80078ee:	e04e      	b.n	800798e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6818      	ldr	r0, [r3, #0]
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	6899      	ldr	r1, [r3, #8]
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	685a      	ldr	r2, [r3, #4]
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	68db      	ldr	r3, [r3, #12]
 8007900:	f000 fb44 	bl	8007f8c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	689a      	ldr	r2, [r3, #8]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007912:	609a      	str	r2, [r3, #8]
      break;
 8007914:	e03b      	b.n	800798e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6818      	ldr	r0, [r3, #0]
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	6859      	ldr	r1, [r3, #4]
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	461a      	mov	r2, r3
 8007924:	f000 fab8 	bl	8007e98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	2150      	movs	r1, #80	; 0x50
 800792e:	4618      	mov	r0, r3
 8007930:	f000 fb11 	bl	8007f56 <TIM_ITRx_SetConfig>
      break;
 8007934:	e02b      	b.n	800798e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6818      	ldr	r0, [r3, #0]
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	6859      	ldr	r1, [r3, #4]
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	461a      	mov	r2, r3
 8007944:	f000 fad7 	bl	8007ef6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	2160      	movs	r1, #96	; 0x60
 800794e:	4618      	mov	r0, r3
 8007950:	f000 fb01 	bl	8007f56 <TIM_ITRx_SetConfig>
      break;
 8007954:	e01b      	b.n	800798e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6818      	ldr	r0, [r3, #0]
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	6859      	ldr	r1, [r3, #4]
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	461a      	mov	r2, r3
 8007964:	f000 fa98 	bl	8007e98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	2140      	movs	r1, #64	; 0x40
 800796e:	4618      	mov	r0, r3
 8007970:	f000 faf1 	bl	8007f56 <TIM_ITRx_SetConfig>
      break;
 8007974:	e00b      	b.n	800798e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4619      	mov	r1, r3
 8007980:	4610      	mov	r0, r2
 8007982:	f000 fae8 	bl	8007f56 <TIM_ITRx_SetConfig>
      break;
 8007986:	e002      	b.n	800798e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007988:	bf00      	nop
 800798a:	e000      	b.n	800798e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800798c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2201      	movs	r2, #1
 8007992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2200      	movs	r2, #0
 800799a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800799e:	2300      	movs	r3, #0
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3710      	adds	r7, #16
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b083      	sub	sp, #12
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80079b0:	bf00      	nop
 80079b2:	370c      	adds	r7, #12
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr

080079bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80079bc:	b480      	push	{r7}
 80079be:	b083      	sub	sp, #12
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80079c4:	bf00      	nop
 80079c6:	370c      	adds	r7, #12
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr

080079d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b083      	sub	sp, #12
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80079d8:	bf00      	nop
 80079da:	370c      	adds	r7, #12
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr

080079e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b083      	sub	sp, #12
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80079ec:	bf00      	nop
 80079ee:	370c      	adds	r7, #12
 80079f0:	46bd      	mov	sp, r7
 80079f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f6:	4770      	bx	lr

080079f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b085      	sub	sp, #20
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	4a40      	ldr	r2, [pc, #256]	; (8007b0c <TIM_Base_SetConfig+0x114>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d013      	beq.n	8007a38 <TIM_Base_SetConfig+0x40>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a16:	d00f      	beq.n	8007a38 <TIM_Base_SetConfig+0x40>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	4a3d      	ldr	r2, [pc, #244]	; (8007b10 <TIM_Base_SetConfig+0x118>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d00b      	beq.n	8007a38 <TIM_Base_SetConfig+0x40>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	4a3c      	ldr	r2, [pc, #240]	; (8007b14 <TIM_Base_SetConfig+0x11c>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d007      	beq.n	8007a38 <TIM_Base_SetConfig+0x40>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	4a3b      	ldr	r2, [pc, #236]	; (8007b18 <TIM_Base_SetConfig+0x120>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d003      	beq.n	8007a38 <TIM_Base_SetConfig+0x40>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	4a3a      	ldr	r2, [pc, #232]	; (8007b1c <TIM_Base_SetConfig+0x124>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d108      	bne.n	8007a4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	68fa      	ldr	r2, [r7, #12]
 8007a46:	4313      	orrs	r3, r2
 8007a48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	4a2f      	ldr	r2, [pc, #188]	; (8007b0c <TIM_Base_SetConfig+0x114>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d02b      	beq.n	8007aaa <TIM_Base_SetConfig+0xb2>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a58:	d027      	beq.n	8007aaa <TIM_Base_SetConfig+0xb2>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	4a2c      	ldr	r2, [pc, #176]	; (8007b10 <TIM_Base_SetConfig+0x118>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d023      	beq.n	8007aaa <TIM_Base_SetConfig+0xb2>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	4a2b      	ldr	r2, [pc, #172]	; (8007b14 <TIM_Base_SetConfig+0x11c>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d01f      	beq.n	8007aaa <TIM_Base_SetConfig+0xb2>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	4a2a      	ldr	r2, [pc, #168]	; (8007b18 <TIM_Base_SetConfig+0x120>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d01b      	beq.n	8007aaa <TIM_Base_SetConfig+0xb2>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	4a29      	ldr	r2, [pc, #164]	; (8007b1c <TIM_Base_SetConfig+0x124>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d017      	beq.n	8007aaa <TIM_Base_SetConfig+0xb2>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	4a28      	ldr	r2, [pc, #160]	; (8007b20 <TIM_Base_SetConfig+0x128>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d013      	beq.n	8007aaa <TIM_Base_SetConfig+0xb2>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	4a27      	ldr	r2, [pc, #156]	; (8007b24 <TIM_Base_SetConfig+0x12c>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d00f      	beq.n	8007aaa <TIM_Base_SetConfig+0xb2>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	4a26      	ldr	r2, [pc, #152]	; (8007b28 <TIM_Base_SetConfig+0x130>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d00b      	beq.n	8007aaa <TIM_Base_SetConfig+0xb2>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	4a25      	ldr	r2, [pc, #148]	; (8007b2c <TIM_Base_SetConfig+0x134>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d007      	beq.n	8007aaa <TIM_Base_SetConfig+0xb2>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	4a24      	ldr	r2, [pc, #144]	; (8007b30 <TIM_Base_SetConfig+0x138>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d003      	beq.n	8007aaa <TIM_Base_SetConfig+0xb2>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	4a23      	ldr	r2, [pc, #140]	; (8007b34 <TIM_Base_SetConfig+0x13c>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d108      	bne.n	8007abc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ab0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	68db      	ldr	r3, [r3, #12]
 8007ab6:	68fa      	ldr	r2, [r7, #12]
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	695b      	ldr	r3, [r3, #20]
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	68fa      	ldr	r2, [r7, #12]
 8007ace:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	689a      	ldr	r2, [r3, #8]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	681a      	ldr	r2, [r3, #0]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	4a0a      	ldr	r2, [pc, #40]	; (8007b0c <TIM_Base_SetConfig+0x114>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d003      	beq.n	8007af0 <TIM_Base_SetConfig+0xf8>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	4a0c      	ldr	r2, [pc, #48]	; (8007b1c <TIM_Base_SetConfig+0x124>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d103      	bne.n	8007af8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	691a      	ldr	r2, [r3, #16]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2201      	movs	r2, #1
 8007afc:	615a      	str	r2, [r3, #20]
}
 8007afe:	bf00      	nop
 8007b00:	3714      	adds	r7, #20
 8007b02:	46bd      	mov	sp, r7
 8007b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b08:	4770      	bx	lr
 8007b0a:	bf00      	nop
 8007b0c:	40010000 	.word	0x40010000
 8007b10:	40000400 	.word	0x40000400
 8007b14:	40000800 	.word	0x40000800
 8007b18:	40000c00 	.word	0x40000c00
 8007b1c:	40010400 	.word	0x40010400
 8007b20:	40014000 	.word	0x40014000
 8007b24:	40014400 	.word	0x40014400
 8007b28:	40014800 	.word	0x40014800
 8007b2c:	40001800 	.word	0x40001800
 8007b30:	40001c00 	.word	0x40001c00
 8007b34:	40002000 	.word	0x40002000

08007b38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b087      	sub	sp, #28
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6a1b      	ldr	r3, [r3, #32]
 8007b46:	f023 0201 	bic.w	r2, r3, #1
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6a1b      	ldr	r3, [r3, #32]
 8007b52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	699b      	ldr	r3, [r3, #24]
 8007b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f023 0303 	bic.w	r3, r3, #3
 8007b6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	68fa      	ldr	r2, [r7, #12]
 8007b76:	4313      	orrs	r3, r2
 8007b78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	f023 0302 	bic.w	r3, r3, #2
 8007b80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	697a      	ldr	r2, [r7, #20]
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	4a20      	ldr	r2, [pc, #128]	; (8007c10 <TIM_OC1_SetConfig+0xd8>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d003      	beq.n	8007b9c <TIM_OC1_SetConfig+0x64>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	4a1f      	ldr	r2, [pc, #124]	; (8007c14 <TIM_OC1_SetConfig+0xdc>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d10c      	bne.n	8007bb6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	f023 0308 	bic.w	r3, r3, #8
 8007ba2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	68db      	ldr	r3, [r3, #12]
 8007ba8:	697a      	ldr	r2, [r7, #20]
 8007baa:	4313      	orrs	r3, r2
 8007bac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	f023 0304 	bic.w	r3, r3, #4
 8007bb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	4a15      	ldr	r2, [pc, #84]	; (8007c10 <TIM_OC1_SetConfig+0xd8>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d003      	beq.n	8007bc6 <TIM_OC1_SetConfig+0x8e>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	4a14      	ldr	r2, [pc, #80]	; (8007c14 <TIM_OC1_SetConfig+0xdc>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d111      	bne.n	8007bea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007bcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007bd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	695b      	ldr	r3, [r3, #20]
 8007bda:	693a      	ldr	r2, [r7, #16]
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	699b      	ldr	r3, [r3, #24]
 8007be4:	693a      	ldr	r2, [r7, #16]
 8007be6:	4313      	orrs	r3, r2
 8007be8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	693a      	ldr	r2, [r7, #16]
 8007bee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	68fa      	ldr	r2, [r7, #12]
 8007bf4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	685a      	ldr	r2, [r3, #4]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	697a      	ldr	r2, [r7, #20]
 8007c02:	621a      	str	r2, [r3, #32]
}
 8007c04:	bf00      	nop
 8007c06:	371c      	adds	r7, #28
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr
 8007c10:	40010000 	.word	0x40010000
 8007c14:	40010400 	.word	0x40010400

08007c18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b087      	sub	sp, #28
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6a1b      	ldr	r3, [r3, #32]
 8007c26:	f023 0210 	bic.w	r2, r3, #16
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6a1b      	ldr	r3, [r3, #32]
 8007c32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	699b      	ldr	r3, [r3, #24]
 8007c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	021b      	lsls	r3, r3, #8
 8007c56:	68fa      	ldr	r2, [r7, #12]
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	f023 0320 	bic.w	r3, r3, #32
 8007c62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	011b      	lsls	r3, r3, #4
 8007c6a:	697a      	ldr	r2, [r7, #20]
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	4a22      	ldr	r2, [pc, #136]	; (8007cfc <TIM_OC2_SetConfig+0xe4>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d003      	beq.n	8007c80 <TIM_OC2_SetConfig+0x68>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	4a21      	ldr	r2, [pc, #132]	; (8007d00 <TIM_OC2_SetConfig+0xe8>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d10d      	bne.n	8007c9c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	68db      	ldr	r3, [r3, #12]
 8007c8c:	011b      	lsls	r3, r3, #4
 8007c8e:	697a      	ldr	r2, [r7, #20]
 8007c90:	4313      	orrs	r3, r2
 8007c92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c9a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	4a17      	ldr	r2, [pc, #92]	; (8007cfc <TIM_OC2_SetConfig+0xe4>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d003      	beq.n	8007cac <TIM_OC2_SetConfig+0x94>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	4a16      	ldr	r2, [pc, #88]	; (8007d00 <TIM_OC2_SetConfig+0xe8>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d113      	bne.n	8007cd4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007cb2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007cba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	695b      	ldr	r3, [r3, #20]
 8007cc0:	009b      	lsls	r3, r3, #2
 8007cc2:	693a      	ldr	r2, [r7, #16]
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	699b      	ldr	r3, [r3, #24]
 8007ccc:	009b      	lsls	r3, r3, #2
 8007cce:	693a      	ldr	r2, [r7, #16]
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	693a      	ldr	r2, [r7, #16]
 8007cd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	68fa      	ldr	r2, [r7, #12]
 8007cde:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	685a      	ldr	r2, [r3, #4]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	697a      	ldr	r2, [r7, #20]
 8007cec:	621a      	str	r2, [r3, #32]
}
 8007cee:	bf00      	nop
 8007cf0:	371c      	adds	r7, #28
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr
 8007cfa:	bf00      	nop
 8007cfc:	40010000 	.word	0x40010000
 8007d00:	40010400 	.word	0x40010400

08007d04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b087      	sub	sp, #28
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6a1b      	ldr	r3, [r3, #32]
 8007d12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6a1b      	ldr	r3, [r3, #32]
 8007d1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	69db      	ldr	r3, [r3, #28]
 8007d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f023 0303 	bic.w	r3, r3, #3
 8007d3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	68fa      	ldr	r2, [r7, #12]
 8007d42:	4313      	orrs	r3, r2
 8007d44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007d4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	021b      	lsls	r3, r3, #8
 8007d54:	697a      	ldr	r2, [r7, #20]
 8007d56:	4313      	orrs	r3, r2
 8007d58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	4a21      	ldr	r2, [pc, #132]	; (8007de4 <TIM_OC3_SetConfig+0xe0>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d003      	beq.n	8007d6a <TIM_OC3_SetConfig+0x66>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	4a20      	ldr	r2, [pc, #128]	; (8007de8 <TIM_OC3_SetConfig+0xe4>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d10d      	bne.n	8007d86 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	68db      	ldr	r3, [r3, #12]
 8007d76:	021b      	lsls	r3, r3, #8
 8007d78:	697a      	ldr	r2, [r7, #20]
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	4a16      	ldr	r2, [pc, #88]	; (8007de4 <TIM_OC3_SetConfig+0xe0>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d003      	beq.n	8007d96 <TIM_OC3_SetConfig+0x92>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	4a15      	ldr	r2, [pc, #84]	; (8007de8 <TIM_OC3_SetConfig+0xe4>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d113      	bne.n	8007dbe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007da4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	695b      	ldr	r3, [r3, #20]
 8007daa:	011b      	lsls	r3, r3, #4
 8007dac:	693a      	ldr	r2, [r7, #16]
 8007dae:	4313      	orrs	r3, r2
 8007db0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	699b      	ldr	r3, [r3, #24]
 8007db6:	011b      	lsls	r3, r3, #4
 8007db8:	693a      	ldr	r2, [r7, #16]
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	693a      	ldr	r2, [r7, #16]
 8007dc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	68fa      	ldr	r2, [r7, #12]
 8007dc8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	685a      	ldr	r2, [r3, #4]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	697a      	ldr	r2, [r7, #20]
 8007dd6:	621a      	str	r2, [r3, #32]
}
 8007dd8:	bf00      	nop
 8007dda:	371c      	adds	r7, #28
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr
 8007de4:	40010000 	.word	0x40010000
 8007de8:	40010400 	.word	0x40010400

08007dec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b087      	sub	sp, #28
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6a1b      	ldr	r3, [r3, #32]
 8007dfa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6a1b      	ldr	r3, [r3, #32]
 8007e06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	69db      	ldr	r3, [r3, #28]
 8007e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	021b      	lsls	r3, r3, #8
 8007e2a:	68fa      	ldr	r2, [r7, #12]
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	689b      	ldr	r3, [r3, #8]
 8007e3c:	031b      	lsls	r3, r3, #12
 8007e3e:	693a      	ldr	r2, [r7, #16]
 8007e40:	4313      	orrs	r3, r2
 8007e42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	4a12      	ldr	r2, [pc, #72]	; (8007e90 <TIM_OC4_SetConfig+0xa4>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d003      	beq.n	8007e54 <TIM_OC4_SetConfig+0x68>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	4a11      	ldr	r2, [pc, #68]	; (8007e94 <TIM_OC4_SetConfig+0xa8>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d109      	bne.n	8007e68 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	695b      	ldr	r3, [r3, #20]
 8007e60:	019b      	lsls	r3, r3, #6
 8007e62:	697a      	ldr	r2, [r7, #20]
 8007e64:	4313      	orrs	r3, r2
 8007e66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	697a      	ldr	r2, [r7, #20]
 8007e6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	68fa      	ldr	r2, [r7, #12]
 8007e72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	685a      	ldr	r2, [r3, #4]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	693a      	ldr	r2, [r7, #16]
 8007e80:	621a      	str	r2, [r3, #32]
}
 8007e82:	bf00      	nop
 8007e84:	371c      	adds	r7, #28
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr
 8007e8e:	bf00      	nop
 8007e90:	40010000 	.word	0x40010000
 8007e94:	40010400 	.word	0x40010400

08007e98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b087      	sub	sp, #28
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	60f8      	str	r0, [r7, #12]
 8007ea0:	60b9      	str	r1, [r7, #8]
 8007ea2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	6a1b      	ldr	r3, [r3, #32]
 8007ea8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	6a1b      	ldr	r3, [r3, #32]
 8007eae:	f023 0201 	bic.w	r2, r3, #1
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	699b      	ldr	r3, [r3, #24]
 8007eba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007ec2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	011b      	lsls	r3, r3, #4
 8007ec8:	693a      	ldr	r2, [r7, #16]
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	f023 030a 	bic.w	r3, r3, #10
 8007ed4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007ed6:	697a      	ldr	r2, [r7, #20]
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	4313      	orrs	r3, r2
 8007edc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	693a      	ldr	r2, [r7, #16]
 8007ee2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	697a      	ldr	r2, [r7, #20]
 8007ee8:	621a      	str	r2, [r3, #32]
}
 8007eea:	bf00      	nop
 8007eec:	371c      	adds	r7, #28
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr

08007ef6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ef6:	b480      	push	{r7}
 8007ef8:	b087      	sub	sp, #28
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	60f8      	str	r0, [r7, #12]
 8007efe:	60b9      	str	r1, [r7, #8]
 8007f00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	6a1b      	ldr	r3, [r3, #32]
 8007f06:	f023 0210 	bic.w	r2, r3, #16
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	699b      	ldr	r3, [r3, #24]
 8007f12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	6a1b      	ldr	r3, [r3, #32]
 8007f18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007f20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	031b      	lsls	r3, r3, #12
 8007f26:	697a      	ldr	r2, [r7, #20]
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007f32:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	011b      	lsls	r3, r3, #4
 8007f38:	693a      	ldr	r2, [r7, #16]
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	697a      	ldr	r2, [r7, #20]
 8007f42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	693a      	ldr	r2, [r7, #16]
 8007f48:	621a      	str	r2, [r3, #32]
}
 8007f4a:	bf00      	nop
 8007f4c:	371c      	adds	r7, #28
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f54:	4770      	bx	lr

08007f56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007f56:	b480      	push	{r7}
 8007f58:	b085      	sub	sp, #20
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	6078      	str	r0, [r7, #4]
 8007f5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	689b      	ldr	r3, [r3, #8]
 8007f64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f6e:	683a      	ldr	r2, [r7, #0]
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	4313      	orrs	r3, r2
 8007f74:	f043 0307 	orr.w	r3, r3, #7
 8007f78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	68fa      	ldr	r2, [r7, #12]
 8007f7e:	609a      	str	r2, [r3, #8]
}
 8007f80:	bf00      	nop
 8007f82:	3714      	adds	r7, #20
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr

08007f8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b087      	sub	sp, #28
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	60b9      	str	r1, [r7, #8]
 8007f96:	607a      	str	r2, [r7, #4]
 8007f98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	689b      	ldr	r3, [r3, #8]
 8007f9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007fa6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	021a      	lsls	r2, r3, #8
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	431a      	orrs	r2, r3
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	697a      	ldr	r2, [r7, #20]
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	697a      	ldr	r2, [r7, #20]
 8007fbe:	609a      	str	r2, [r3, #8]
}
 8007fc0:	bf00      	nop
 8007fc2:	371c      	adds	r7, #28
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr

08007fcc <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b084      	sub	sp, #16
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	2204      	movs	r2, #4
 8007fdc:	6839      	ldr	r1, [r7, #0]
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f000 f900 	bl	80081e4 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007ff2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	689b      	ldr	r3, [r3, #8]
 8007ffa:	f003 0307 	and.w	r3, r3, #7
 8007ffe:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2b06      	cmp	r3, #6
 8008004:	d007      	beq.n	8008016 <HAL_TIMEx_PWMN_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	681a      	ldr	r2, [r3, #0]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f042 0201 	orr.w	r2, r2, #1
 8008014:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008016:	2300      	movs	r3, #0
}
 8008018:	4618      	mov	r0, r3
 800801a:	3710      	adds	r7, #16
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}

08008020 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008020:	b480      	push	{r7}
 8008022:	b085      	sub	sp, #20
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008030:	2b01      	cmp	r3, #1
 8008032:	d101      	bne.n	8008038 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008034:	2302      	movs	r3, #2
 8008036:	e05a      	b.n	80080ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2201      	movs	r2, #1
 800803c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2202      	movs	r2, #2
 8008044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	689b      	ldr	r3, [r3, #8]
 8008056:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800805e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	68fa      	ldr	r2, [r7, #12]
 8008066:	4313      	orrs	r3, r2
 8008068:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	68fa      	ldr	r2, [r7, #12]
 8008070:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a21      	ldr	r2, [pc, #132]	; (80080fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d022      	beq.n	80080c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008084:	d01d      	beq.n	80080c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a1d      	ldr	r2, [pc, #116]	; (8008100 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d018      	beq.n	80080c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4a1b      	ldr	r2, [pc, #108]	; (8008104 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d013      	beq.n	80080c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4a1a      	ldr	r2, [pc, #104]	; (8008108 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d00e      	beq.n	80080c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a18      	ldr	r2, [pc, #96]	; (800810c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d009      	beq.n	80080c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4a17      	ldr	r2, [pc, #92]	; (8008110 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d004      	beq.n	80080c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4a15      	ldr	r2, [pc, #84]	; (8008114 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d10c      	bne.n	80080dc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	68ba      	ldr	r2, [r7, #8]
 80080d0:	4313      	orrs	r3, r2
 80080d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	68ba      	ldr	r2, [r7, #8]
 80080da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2201      	movs	r2, #1
 80080e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2200      	movs	r2, #0
 80080e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80080ec:	2300      	movs	r3, #0
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3714      	adds	r7, #20
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr
 80080fa:	bf00      	nop
 80080fc:	40010000 	.word	0x40010000
 8008100:	40000400 	.word	0x40000400
 8008104:	40000800 	.word	0x40000800
 8008108:	40000c00 	.word	0x40000c00
 800810c:	40010400 	.word	0x40010400
 8008110:	40014000 	.word	0x40014000
 8008114:	40001800 	.word	0x40001800

08008118 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008118:	b480      	push	{r7}
 800811a:	b085      	sub	sp, #20
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008122:	2300      	movs	r3, #0
 8008124:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800812c:	2b01      	cmp	r3, #1
 800812e:	d101      	bne.n	8008134 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008130:	2302      	movs	r3, #2
 8008132:	e03d      	b.n	80081b0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2201      	movs	r2, #1
 8008138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	68db      	ldr	r3, [r3, #12]
 8008146:	4313      	orrs	r3, r2
 8008148:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	4313      	orrs	r3, r2
 8008156:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	4313      	orrs	r3, r2
 8008164:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4313      	orrs	r3, r2
 8008172:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	691b      	ldr	r3, [r3, #16]
 800817e:	4313      	orrs	r3, r2
 8008180:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	695b      	ldr	r3, [r3, #20]
 800818c:	4313      	orrs	r3, r2
 800818e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	69db      	ldr	r3, [r3, #28]
 800819a:	4313      	orrs	r3, r2
 800819c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	68fa      	ldr	r2, [r7, #12]
 80081a4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2200      	movs	r2, #0
 80081aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80081ae:	2300      	movs	r3, #0
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3714      	adds	r7, #20
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr

080081bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80081bc:	b480      	push	{r7}
 80081be:	b083      	sub	sp, #12
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80081c4:	bf00      	nop
 80081c6:	370c      	adds	r7, #12
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr

080081d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b083      	sub	sp, #12
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80081d8:	bf00      	nop
 80081da:	370c      	adds	r7, #12
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr

080081e4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b087      	sub	sp, #28
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	60f8      	str	r0, [r7, #12]
 80081ec:	60b9      	str	r1, [r7, #8]
 80081ee:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	f003 031f 	and.w	r3, r3, #31
 80081f6:	2204      	movs	r2, #4
 80081f8:	fa02 f303 	lsl.w	r3, r2, r3
 80081fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	6a1a      	ldr	r2, [r3, #32]
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	43db      	mvns	r3, r3
 8008206:	401a      	ands	r2, r3
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	6a1a      	ldr	r2, [r3, #32]
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	f003 031f 	and.w	r3, r3, #31
 8008216:	6879      	ldr	r1, [r7, #4]
 8008218:	fa01 f303 	lsl.w	r3, r1, r3
 800821c:	431a      	orrs	r2, r3
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	621a      	str	r2, [r3, #32]
}
 8008222:	bf00      	nop
 8008224:	371c      	adds	r7, #28
 8008226:	46bd      	mov	sp, r7
 8008228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822c:	4770      	bx	lr

0800822e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800822e:	b580      	push	{r7, lr}
 8008230:	b082      	sub	sp, #8
 8008232:	af00      	add	r7, sp, #0
 8008234:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d101      	bne.n	8008240 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800823c:	2301      	movs	r3, #1
 800823e:	e03f      	b.n	80082c0 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008246:	b2db      	uxtb	r3, r3
 8008248:	2b00      	cmp	r3, #0
 800824a:	d106      	bne.n	800825a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2200      	movs	r2, #0
 8008250:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f7fb fd59 	bl	8003d0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2224      	movs	r2, #36	; 0x24
 800825e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	68da      	ldr	r2, [r3, #12]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008270:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 fc82 	bl	8008b7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	691a      	ldr	r2, [r3, #16]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008286:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	695a      	ldr	r2, [r3, #20]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008296:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	68da      	ldr	r2, [r3, #12]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80082a6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2200      	movs	r2, #0
 80082ac:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2220      	movs	r2, #32
 80082b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2220      	movs	r2, #32
 80082ba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80082be:	2300      	movs	r3, #0
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3708      	adds	r7, #8
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b082      	sub	sp, #8
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d101      	bne.n	80082da <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80082d6:	2301      	movs	r3, #1
 80082d8:	e047      	b.n	800836a <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80082e0:	b2db      	uxtb	r3, r3
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d106      	bne.n	80082f4 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2200      	movs	r2, #0
 80082ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f7fb fd0c 	bl	8003d0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2224      	movs	r2, #36	; 0x24
 80082f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	68da      	ldr	r2, [r3, #12]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800830a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f000 fc35 	bl	8008b7c <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	691a      	ldr	r2, [r3, #16]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008320:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	695a      	ldr	r2, [r3, #20]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8008330:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	695a      	ldr	r2, [r3, #20]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f042 0208 	orr.w	r2, r2, #8
 8008340:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	68da      	ldr	r2, [r3, #12]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008350:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2200      	movs	r2, #0
 8008356:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2220      	movs	r2, #32
 800835c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2220      	movs	r2, #32
 8008364:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008368:	2300      	movs	r3, #0
}
 800836a:	4618      	mov	r0, r3
 800836c:	3708      	adds	r7, #8
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
	...

08008374 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b086      	sub	sp, #24
 8008378:	af00      	add	r7, sp, #0
 800837a:	60f8      	str	r0, [r7, #12]
 800837c:	60b9      	str	r1, [r7, #8]
 800837e:	4613      	mov	r3, r2
 8008380:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008388:	b2db      	uxtb	r3, r3
 800838a:	2b20      	cmp	r3, #32
 800838c:	d153      	bne.n	8008436 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d002      	beq.n	800839a <HAL_UART_Transmit_DMA+0x26>
 8008394:	88fb      	ldrh	r3, [r7, #6]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d101      	bne.n	800839e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800839a:	2301      	movs	r3, #1
 800839c:	e04c      	b.n	8008438 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	d101      	bne.n	80083ac <HAL_UART_Transmit_DMA+0x38>
 80083a8:	2302      	movs	r3, #2
 80083aa:	e045      	b.n	8008438 <HAL_UART_Transmit_DMA+0xc4>
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2201      	movs	r2, #1
 80083b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80083b4:	68ba      	ldr	r2, [r7, #8]
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	88fa      	ldrh	r2, [r7, #6]
 80083be:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	88fa      	ldrh	r2, [r7, #6]
 80083c4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2200      	movs	r2, #0
 80083ca:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2221      	movs	r2, #33	; 0x21
 80083d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083d8:	4a19      	ldr	r2, [pc, #100]	; (8008440 <HAL_UART_Transmit_DMA+0xcc>)
 80083da:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083e0:	4a18      	ldr	r2, [pc, #96]	; (8008444 <HAL_UART_Transmit_DMA+0xd0>)
 80083e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083e8:	4a17      	ldr	r2, [pc, #92]	; (8008448 <HAL_UART_Transmit_DMA+0xd4>)
 80083ea:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083f0:	2200      	movs	r2, #0
 80083f2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80083f4:	f107 0308 	add.w	r3, r7, #8
 80083f8:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	6819      	ldr	r1, [r3, #0]
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	3304      	adds	r3, #4
 8008408:	461a      	mov	r2, r3
 800840a:	88fb      	ldrh	r3, [r7, #6]
 800840c:	f7fc fe50 	bl	80050b0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008418:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2200      	movs	r2, #0
 800841e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	695a      	ldr	r2, [r3, #20]
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008430:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8008432:	2300      	movs	r3, #0
 8008434:	e000      	b.n	8008438 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8008436:	2302      	movs	r3, #2
  }
}
 8008438:	4618      	mov	r0, r3
 800843a:	3718      	adds	r7, #24
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}
 8008440:	08008789 	.word	0x08008789
 8008444:	080087db 	.word	0x080087db
 8008448:	0800887b 	.word	0x0800887b

0800844c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b086      	sub	sp, #24
 8008450:	af00      	add	r7, sp, #0
 8008452:	60f8      	str	r0, [r7, #12]
 8008454:	60b9      	str	r1, [r7, #8]
 8008456:	4613      	mov	r3, r2
 8008458:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008460:	b2db      	uxtb	r3, r3
 8008462:	2b20      	cmp	r3, #32
 8008464:	d166      	bne.n	8008534 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d002      	beq.n	8008472 <HAL_UART_Receive_DMA+0x26>
 800846c:	88fb      	ldrh	r3, [r7, #6]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d101      	bne.n	8008476 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008472:	2301      	movs	r3, #1
 8008474:	e05f      	b.n	8008536 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800847c:	2b01      	cmp	r3, #1
 800847e:	d101      	bne.n	8008484 <HAL_UART_Receive_DMA+0x38>
 8008480:	2302      	movs	r3, #2
 8008482:	e058      	b.n	8008536 <HAL_UART_Receive_DMA+0xea>
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2201      	movs	r2, #1
 8008488:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800848c:	68ba      	ldr	r2, [r7, #8]
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	88fa      	ldrh	r2, [r7, #6]
 8008496:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2200      	movs	r2, #0
 800849c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	2222      	movs	r2, #34	; 0x22
 80084a2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084aa:	4a25      	ldr	r2, [pc, #148]	; (8008540 <HAL_UART_Receive_DMA+0xf4>)
 80084ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084b2:	4a24      	ldr	r2, [pc, #144]	; (8008544 <HAL_UART_Receive_DMA+0xf8>)
 80084b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084ba:	4a23      	ldr	r2, [pc, #140]	; (8008548 <HAL_UART_Receive_DMA+0xfc>)
 80084bc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084c2:	2200      	movs	r2, #0
 80084c4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 80084c6:	f107 0308 	add.w	r3, r7, #8
 80084ca:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	3304      	adds	r3, #4
 80084d6:	4619      	mov	r1, r3
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	681a      	ldr	r2, [r3, #0]
 80084dc:	88fb      	ldrh	r3, [r7, #6]
 80084de:	f7fc fde7 	bl	80050b0 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80084e2:	2300      	movs	r3, #0
 80084e4:	613b      	str	r3, [r7, #16]
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	613b      	str	r3, [r7, #16]
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	613b      	str	r3, [r7, #16]
 80084f6:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	2200      	movs	r2, #0
 80084fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	68da      	ldr	r2, [r3, #12]
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800850e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	695a      	ldr	r2, [r3, #20]
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f042 0201 	orr.w	r2, r2, #1
 800851e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	695a      	ldr	r2, [r3, #20]
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800852e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8008530:	2300      	movs	r3, #0
 8008532:	e000      	b.n	8008536 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008534:	2302      	movs	r3, #2
  }
}
 8008536:	4618      	mov	r0, r3
 8008538:	3718      	adds	r7, #24
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}
 800853e:	bf00      	nop
 8008540:	080087f7 	.word	0x080087f7
 8008544:	0800885f 	.word	0x0800885f
 8008548:	0800887b 	.word	0x0800887b

0800854c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b088      	sub	sp, #32
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	68db      	ldr	r3, [r3, #12]
 8008562:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	695b      	ldr	r3, [r3, #20]
 800856a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800856c:	2300      	movs	r3, #0
 800856e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8008570:	2300      	movs	r3, #0
 8008572:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008574:	69fb      	ldr	r3, [r7, #28]
 8008576:	f003 030f 	and.w	r3, r3, #15
 800857a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d10d      	bne.n	800859e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008582:	69fb      	ldr	r3, [r7, #28]
 8008584:	f003 0320 	and.w	r3, r3, #32
 8008588:	2b00      	cmp	r3, #0
 800858a:	d008      	beq.n	800859e <HAL_UART_IRQHandler+0x52>
 800858c:	69bb      	ldr	r3, [r7, #24]
 800858e:	f003 0320 	and.w	r3, r3, #32
 8008592:	2b00      	cmp	r3, #0
 8008594:	d003      	beq.n	800859e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f000 fa6f 	bl	8008a7a <UART_Receive_IT>
      return;
 800859c:	e0d0      	b.n	8008740 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	f000 80b0 	beq.w	8008706 <HAL_UART_IRQHandler+0x1ba>
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	f003 0301 	and.w	r3, r3, #1
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d105      	bne.n	80085bc <HAL_UART_IRQHandler+0x70>
 80085b0:	69bb      	ldr	r3, [r7, #24]
 80085b2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	f000 80a5 	beq.w	8008706 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80085bc:	69fb      	ldr	r3, [r7, #28]
 80085be:	f003 0301 	and.w	r3, r3, #1
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d00a      	beq.n	80085dc <HAL_UART_IRQHandler+0x90>
 80085c6:	69bb      	ldr	r3, [r7, #24]
 80085c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d005      	beq.n	80085dc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085d4:	f043 0201 	orr.w	r2, r3, #1
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80085dc:	69fb      	ldr	r3, [r7, #28]
 80085de:	f003 0304 	and.w	r3, r3, #4
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d00a      	beq.n	80085fc <HAL_UART_IRQHandler+0xb0>
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	f003 0301 	and.w	r3, r3, #1
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d005      	beq.n	80085fc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085f4:	f043 0202 	orr.w	r2, r3, #2
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80085fc:	69fb      	ldr	r3, [r7, #28]
 80085fe:	f003 0302 	and.w	r3, r3, #2
 8008602:	2b00      	cmp	r3, #0
 8008604:	d00a      	beq.n	800861c <HAL_UART_IRQHandler+0xd0>
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	f003 0301 	and.w	r3, r3, #1
 800860c:	2b00      	cmp	r3, #0
 800860e:	d005      	beq.n	800861c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008614:	f043 0204 	orr.w	r2, r3, #4
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800861c:	69fb      	ldr	r3, [r7, #28]
 800861e:	f003 0308 	and.w	r3, r3, #8
 8008622:	2b00      	cmp	r3, #0
 8008624:	d00f      	beq.n	8008646 <HAL_UART_IRQHandler+0xfa>
 8008626:	69bb      	ldr	r3, [r7, #24]
 8008628:	f003 0320 	and.w	r3, r3, #32
 800862c:	2b00      	cmp	r3, #0
 800862e:	d104      	bne.n	800863a <HAL_UART_IRQHandler+0xee>
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	f003 0301 	and.w	r3, r3, #1
 8008636:	2b00      	cmp	r3, #0
 8008638:	d005      	beq.n	8008646 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800863e:	f043 0208 	orr.w	r2, r3, #8
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800864a:	2b00      	cmp	r3, #0
 800864c:	d077      	beq.n	800873e <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800864e:	69fb      	ldr	r3, [r7, #28]
 8008650:	f003 0320 	and.w	r3, r3, #32
 8008654:	2b00      	cmp	r3, #0
 8008656:	d007      	beq.n	8008668 <HAL_UART_IRQHandler+0x11c>
 8008658:	69bb      	ldr	r3, [r7, #24]
 800865a:	f003 0320 	and.w	r3, r3, #32
 800865e:	2b00      	cmp	r3, #0
 8008660:	d002      	beq.n	8008668 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f000 fa09 	bl	8008a7a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	695b      	ldr	r3, [r3, #20]
 800866e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008672:	2b40      	cmp	r3, #64	; 0x40
 8008674:	bf0c      	ite	eq
 8008676:	2301      	moveq	r3, #1
 8008678:	2300      	movne	r3, #0
 800867a:	b2db      	uxtb	r3, r3
 800867c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008682:	f003 0308 	and.w	r3, r3, #8
 8008686:	2b00      	cmp	r3, #0
 8008688:	d102      	bne.n	8008690 <HAL_UART_IRQHandler+0x144>
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d031      	beq.n	80086f4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f000 f952 	bl	800893a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	695b      	ldr	r3, [r3, #20]
 800869c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086a0:	2b40      	cmp	r3, #64	; 0x40
 80086a2:	d123      	bne.n	80086ec <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	695a      	ldr	r2, [r3, #20]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80086b2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d013      	beq.n	80086e4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086c0:	4a21      	ldr	r2, [pc, #132]	; (8008748 <HAL_UART_IRQHandler+0x1fc>)
 80086c2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086c8:	4618      	mov	r0, r3
 80086ca:	f7fc fdb9 	bl	8005240 <HAL_DMA_Abort_IT>
 80086ce:	4603      	mov	r3, r0
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d016      	beq.n	8008702 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086da:	687a      	ldr	r2, [r7, #4]
 80086dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80086de:	4610      	mov	r0, r2
 80086e0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086e2:	e00e      	b.n	8008702 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f7f9 fe2b 	bl	8002340 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086ea:	e00a      	b.n	8008702 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f7f9 fe27 	bl	8002340 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086f2:	e006      	b.n	8008702 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f7f9 fe23 	bl	8002340 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2200      	movs	r2, #0
 80086fe:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8008700:	e01d      	b.n	800873e <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008702:	bf00      	nop
    return;
 8008704:	e01b      	b.n	800873e <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008706:	69fb      	ldr	r3, [r7, #28]
 8008708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800870c:	2b00      	cmp	r3, #0
 800870e:	d008      	beq.n	8008722 <HAL_UART_IRQHandler+0x1d6>
 8008710:	69bb      	ldr	r3, [r7, #24]
 8008712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008716:	2b00      	cmp	r3, #0
 8008718:	d003      	beq.n	8008722 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f000 f93f 	bl	800899e <UART_Transmit_IT>
    return;
 8008720:	e00e      	b.n	8008740 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008722:	69fb      	ldr	r3, [r7, #28]
 8008724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008728:	2b00      	cmp	r3, #0
 800872a:	d009      	beq.n	8008740 <HAL_UART_IRQHandler+0x1f4>
 800872c:	69bb      	ldr	r3, [r7, #24]
 800872e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008732:	2b00      	cmp	r3, #0
 8008734:	d004      	beq.n	8008740 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f000 f987 	bl	8008a4a <UART_EndTransmit_IT>
    return;
 800873c:	e000      	b.n	8008740 <HAL_UART_IRQHandler+0x1f4>
    return;
 800873e:	bf00      	nop
  }
}
 8008740:	3720      	adds	r7, #32
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}
 8008746:	bf00      	nop
 8008748:	08008977 	.word	0x08008977

0800874c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800874c:	b480      	push	{r7}
 800874e:	b083      	sub	sp, #12
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008754:	bf00      	nop
 8008756:	370c      	adds	r7, #12
 8008758:	46bd      	mov	sp, r7
 800875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875e:	4770      	bx	lr

08008760 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008760:	b480      	push	{r7}
 8008762:	b083      	sub	sp, #12
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008768:	bf00      	nop
 800876a:	370c      	adds	r7, #12
 800876c:	46bd      	mov	sp, r7
 800876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008772:	4770      	bx	lr

08008774 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008774:	b480      	push	{r7}
 8008776:	b083      	sub	sp, #12
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800877c:	bf00      	nop
 800877e:	370c      	adds	r7, #12
 8008780:	46bd      	mov	sp, r7
 8008782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008786:	4770      	bx	lr

08008788 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b084      	sub	sp, #16
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008794:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d113      	bne.n	80087cc <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2200      	movs	r2, #0
 80087a8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	695a      	ldr	r2, [r3, #20]
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80087b8:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	68da      	ldr	r2, [r3, #12]
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80087c8:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80087ca:	e002      	b.n	80087d2 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80087cc:	68f8      	ldr	r0, [r7, #12]
 80087ce:	f7ff ffbd 	bl	800874c <HAL_UART_TxCpltCallback>
}
 80087d2:	bf00      	nop
 80087d4:	3710      	adds	r7, #16
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}

080087da <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80087da:	b580      	push	{r7, lr}
 80087dc:	b084      	sub	sp, #16
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087e6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80087e8:	68f8      	ldr	r0, [r7, #12]
 80087ea:	f7ff ffb9 	bl	8008760 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087ee:	bf00      	nop
 80087f0:	3710      	adds	r7, #16
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}

080087f6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80087f6:	b580      	push	{r7, lr}
 80087f8:	b084      	sub	sp, #16
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008802:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800880e:	2b00      	cmp	r3, #0
 8008810:	d11e      	bne.n	8008850 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2200      	movs	r2, #0
 8008816:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	68da      	ldr	r2, [r3, #12]
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008826:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	695a      	ldr	r2, [r3, #20]
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f022 0201 	bic.w	r2, r2, #1
 8008836:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	695a      	ldr	r2, [r3, #20]
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008846:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2220      	movs	r2, #32
 800884c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8008850:	68f8      	ldr	r0, [r7, #12]
 8008852:	f7f9 fd29 	bl	80022a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008856:	bf00      	nop
 8008858:	3710      	adds	r7, #16
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}

0800885e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800885e:	b580      	push	{r7, lr}
 8008860:	b084      	sub	sp, #16
 8008862:	af00      	add	r7, sp, #0
 8008864:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800886a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800886c:	68f8      	ldr	r0, [r7, #12]
 800886e:	f7ff ff81 	bl	8008774 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008872:	bf00      	nop
 8008874:	3710      	adds	r7, #16
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}

0800887a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800887a:	b580      	push	{r7, lr}
 800887c:	b084      	sub	sp, #16
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008882:	2300      	movs	r3, #0
 8008884:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800888a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	695b      	ldr	r3, [r3, #20]
 8008892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008896:	2b80      	cmp	r3, #128	; 0x80
 8008898:	bf0c      	ite	eq
 800889a:	2301      	moveq	r3, #1
 800889c:	2300      	movne	r3, #0
 800889e:	b2db      	uxtb	r3, r3
 80088a0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80088a8:	b2db      	uxtb	r3, r3
 80088aa:	2b21      	cmp	r3, #33	; 0x21
 80088ac:	d108      	bne.n	80088c0 <UART_DMAError+0x46>
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d005      	beq.n	80088c0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	2200      	movs	r2, #0
 80088b8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80088ba:	68b8      	ldr	r0, [r7, #8]
 80088bc:	f000 f827 	bl	800890e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	695b      	ldr	r3, [r3, #20]
 80088c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088ca:	2b40      	cmp	r3, #64	; 0x40
 80088cc:	bf0c      	ite	eq
 80088ce:	2301      	moveq	r3, #1
 80088d0:	2300      	movne	r3, #0
 80088d2:	b2db      	uxtb	r3, r3
 80088d4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	2b22      	cmp	r3, #34	; 0x22
 80088e0:	d108      	bne.n	80088f4 <UART_DMAError+0x7a>
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d005      	beq.n	80088f4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	2200      	movs	r2, #0
 80088ec:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80088ee:	68b8      	ldr	r0, [r7, #8]
 80088f0:	f000 f823 	bl	800893a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088f8:	f043 0210 	orr.w	r2, r3, #16
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008900:	68b8      	ldr	r0, [r7, #8]
 8008902:	f7f9 fd1d 	bl	8002340 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008906:	bf00      	nop
 8008908:	3710      	adds	r7, #16
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}

0800890e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800890e:	b480      	push	{r7}
 8008910:	b083      	sub	sp, #12
 8008912:	af00      	add	r7, sp, #0
 8008914:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	68da      	ldr	r2, [r3, #12]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008924:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2220      	movs	r2, #32
 800892a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800892e:	bf00      	nop
 8008930:	370c      	adds	r7, #12
 8008932:	46bd      	mov	sp, r7
 8008934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008938:	4770      	bx	lr

0800893a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800893a:	b480      	push	{r7}
 800893c:	b083      	sub	sp, #12
 800893e:	af00      	add	r7, sp, #0
 8008940:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	68da      	ldr	r2, [r3, #12]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008950:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	695a      	ldr	r2, [r3, #20]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f022 0201 	bic.w	r2, r2, #1
 8008960:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2220      	movs	r2, #32
 8008966:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800896a:	bf00      	nop
 800896c:	370c      	adds	r7, #12
 800896e:	46bd      	mov	sp, r7
 8008970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008974:	4770      	bx	lr

08008976 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008976:	b580      	push	{r7, lr}
 8008978:	b084      	sub	sp, #16
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008982:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2200      	movs	r2, #0
 8008988:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	2200      	movs	r2, #0
 800898e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008990:	68f8      	ldr	r0, [r7, #12]
 8008992:	f7f9 fcd5 	bl	8002340 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008996:	bf00      	nop
 8008998:	3710      	adds	r7, #16
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}

0800899e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800899e:	b480      	push	{r7}
 80089a0:	b085      	sub	sp, #20
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	2b21      	cmp	r3, #33	; 0x21
 80089b0:	d144      	bne.n	8008a3c <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	689b      	ldr	r3, [r3, #8]
 80089b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089ba:	d11a      	bne.n	80089f2 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6a1b      	ldr	r3, [r3, #32]
 80089c0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	881b      	ldrh	r3, [r3, #0]
 80089c6:	461a      	mov	r2, r3
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80089d0:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	691b      	ldr	r3, [r3, #16]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d105      	bne.n	80089e6 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6a1b      	ldr	r3, [r3, #32]
 80089de:	1c9a      	adds	r2, r3, #2
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	621a      	str	r2, [r3, #32]
 80089e4:	e00e      	b.n	8008a04 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6a1b      	ldr	r3, [r3, #32]
 80089ea:	1c5a      	adds	r2, r3, #1
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	621a      	str	r2, [r3, #32]
 80089f0:	e008      	b.n	8008a04 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6a1b      	ldr	r3, [r3, #32]
 80089f6:	1c59      	adds	r1, r3, #1
 80089f8:	687a      	ldr	r2, [r7, #4]
 80089fa:	6211      	str	r1, [r2, #32]
 80089fc:	781a      	ldrb	r2, [r3, #0]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	3b01      	subs	r3, #1
 8008a0c:	b29b      	uxth	r3, r3
 8008a0e:	687a      	ldr	r2, [r7, #4]
 8008a10:	4619      	mov	r1, r3
 8008a12:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d10f      	bne.n	8008a38 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	68da      	ldr	r2, [r3, #12]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008a26:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	68da      	ldr	r2, [r3, #12]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a36:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	e000      	b.n	8008a3e <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008a3c:	2302      	movs	r3, #2
  }
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3714      	adds	r7, #20
 8008a42:	46bd      	mov	sp, r7
 8008a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a48:	4770      	bx	lr

08008a4a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008a4a:	b580      	push	{r7, lr}
 8008a4c:	b082      	sub	sp, #8
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	68da      	ldr	r2, [r3, #12]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a60:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2220      	movs	r2, #32
 8008a66:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f7ff fe6e 	bl	800874c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008a70:	2300      	movs	r3, #0
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3708      	adds	r7, #8
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}

08008a7a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008a7a:	b580      	push	{r7, lr}
 8008a7c:	b084      	sub	sp, #16
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008a88:	b2db      	uxtb	r3, r3
 8008a8a:	2b22      	cmp	r3, #34	; 0x22
 8008a8c:	d171      	bne.n	8008b72 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	689b      	ldr	r3, [r3, #8]
 8008a92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a96:	d123      	bne.n	8008ae0 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a9c:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	691b      	ldr	r3, [r3, #16]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d10e      	bne.n	8008ac4 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	b29b      	uxth	r3, r3
 8008aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ab2:	b29a      	uxth	r2, r3
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008abc:	1c9a      	adds	r2, r3, #2
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	629a      	str	r2, [r3, #40]	; 0x28
 8008ac2:	e029      	b.n	8008b18 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	b29b      	uxth	r3, r3
 8008acc:	b2db      	uxtb	r3, r3
 8008ace:	b29a      	uxth	r2, r3
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ad8:	1c5a      	adds	r2, r3, #1
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	629a      	str	r2, [r3, #40]	; 0x28
 8008ade:	e01b      	b.n	8008b18 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	691b      	ldr	r3, [r3, #16]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d10a      	bne.n	8008afe <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	6858      	ldr	r0, [r3, #4]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008af2:	1c59      	adds	r1, r3, #1
 8008af4:	687a      	ldr	r2, [r7, #4]
 8008af6:	6291      	str	r1, [r2, #40]	; 0x28
 8008af8:	b2c2      	uxtb	r2, r0
 8008afa:	701a      	strb	r2, [r3, #0]
 8008afc:	e00c      	b.n	8008b18 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	685b      	ldr	r3, [r3, #4]
 8008b04:	b2da      	uxtb	r2, r3
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b0a:	1c58      	adds	r0, r3, #1
 8008b0c:	6879      	ldr	r1, [r7, #4]
 8008b0e:	6288      	str	r0, [r1, #40]	; 0x28
 8008b10:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008b14:	b2d2      	uxtb	r2, r2
 8008b16:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b1c:	b29b      	uxth	r3, r3
 8008b1e:	3b01      	subs	r3, #1
 8008b20:	b29b      	uxth	r3, r3
 8008b22:	687a      	ldr	r2, [r7, #4]
 8008b24:	4619      	mov	r1, r3
 8008b26:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d120      	bne.n	8008b6e <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	68da      	ldr	r2, [r3, #12]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f022 0220 	bic.w	r2, r2, #32
 8008b3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	68da      	ldr	r2, [r3, #12]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008b4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	695a      	ldr	r2, [r3, #20]
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f022 0201 	bic.w	r2, r2, #1
 8008b5a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2220      	movs	r2, #32
 8008b60:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f7f9 fb9f 	bl	80022a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	e002      	b.n	8008b74 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	e000      	b.n	8008b74 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8008b72:	2302      	movs	r3, #2
  }
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3710      	adds	r7, #16
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b80:	b0bd      	sub	sp, #244	; 0xf4
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	691b      	ldr	r3, [r3, #16]
 8008b90:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b98:	68d9      	ldr	r1, [r3, #12]
 8008b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b9e:	681a      	ldr	r2, [r3, #0]
 8008ba0:	ea40 0301 	orr.w	r3, r0, r1
 8008ba4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008baa:	689a      	ldr	r2, [r3, #8]
 8008bac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bb0:	691b      	ldr	r3, [r3, #16]
 8008bb2:	431a      	orrs	r2, r3
 8008bb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bb8:	695b      	ldr	r3, [r3, #20]
 8008bba:	431a      	orrs	r2, r3
 8008bbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bc0:	69db      	ldr	r3, [r3, #28]
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8008bc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	68db      	ldr	r3, [r3, #12]
 8008bd0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008bd4:	f021 010c 	bic.w	r1, r1, #12
 8008bd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bdc:	681a      	ldr	r2, [r3, #0]
 8008bde:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008be2:	430b      	orrs	r3, r1
 8008be4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	695b      	ldr	r3, [r3, #20]
 8008bee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008bf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bf6:	6999      	ldr	r1, [r3, #24]
 8008bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bfc:	681a      	ldr	r2, [r3, #0]
 8008bfe:	ea40 0301 	orr.w	r3, r0, r1
 8008c02:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c08:	69db      	ldr	r3, [r3, #28]
 8008c0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c0e:	f040 81a5 	bne.w	8008f5c <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	4bcd      	ldr	r3, [pc, #820]	; (8008f50 <UART_SetConfig+0x3d4>)
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d006      	beq.n	8008c2c <UART_SetConfig+0xb0>
 8008c1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c22:	681a      	ldr	r2, [r3, #0]
 8008c24:	4bcb      	ldr	r3, [pc, #812]	; (8008f54 <UART_SetConfig+0x3d8>)
 8008c26:	429a      	cmp	r2, r3
 8008c28:	f040 80cb 	bne.w	8008dc2 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008c2c:	f7fd ffaa 	bl	8006b84 <HAL_RCC_GetPCLK2Freq>
 8008c30:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008c34:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008c38:	461c      	mov	r4, r3
 8008c3a:	f04f 0500 	mov.w	r5, #0
 8008c3e:	4622      	mov	r2, r4
 8008c40:	462b      	mov	r3, r5
 8008c42:	1891      	adds	r1, r2, r2
 8008c44:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8008c48:	415b      	adcs	r3, r3
 8008c4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008c4e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8008c52:	1912      	adds	r2, r2, r4
 8008c54:	eb45 0303 	adc.w	r3, r5, r3
 8008c58:	f04f 0000 	mov.w	r0, #0
 8008c5c:	f04f 0100 	mov.w	r1, #0
 8008c60:	00d9      	lsls	r1, r3, #3
 8008c62:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008c66:	00d0      	lsls	r0, r2, #3
 8008c68:	4602      	mov	r2, r0
 8008c6a:	460b      	mov	r3, r1
 8008c6c:	1911      	adds	r1, r2, r4
 8008c6e:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8008c72:	416b      	adcs	r3, r5
 8008c74:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008c78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	461a      	mov	r2, r3
 8008c80:	f04f 0300 	mov.w	r3, #0
 8008c84:	1891      	adds	r1, r2, r2
 8008c86:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8008c8a:	415b      	adcs	r3, r3
 8008c8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008c90:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8008c94:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8008c98:	f7f7 faba 	bl	8000210 <__aeabi_uldivmod>
 8008c9c:	4602      	mov	r2, r0
 8008c9e:	460b      	mov	r3, r1
 8008ca0:	4bad      	ldr	r3, [pc, #692]	; (8008f58 <UART_SetConfig+0x3dc>)
 8008ca2:	fba3 2302 	umull	r2, r3, r3, r2
 8008ca6:	095b      	lsrs	r3, r3, #5
 8008ca8:	011e      	lsls	r6, r3, #4
 8008caa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008cae:	461c      	mov	r4, r3
 8008cb0:	f04f 0500 	mov.w	r5, #0
 8008cb4:	4622      	mov	r2, r4
 8008cb6:	462b      	mov	r3, r5
 8008cb8:	1891      	adds	r1, r2, r2
 8008cba:	67b9      	str	r1, [r7, #120]	; 0x78
 8008cbc:	415b      	adcs	r3, r3
 8008cbe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008cc0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8008cc4:	1912      	adds	r2, r2, r4
 8008cc6:	eb45 0303 	adc.w	r3, r5, r3
 8008cca:	f04f 0000 	mov.w	r0, #0
 8008cce:	f04f 0100 	mov.w	r1, #0
 8008cd2:	00d9      	lsls	r1, r3, #3
 8008cd4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008cd8:	00d0      	lsls	r0, r2, #3
 8008cda:	4602      	mov	r2, r0
 8008cdc:	460b      	mov	r3, r1
 8008cde:	1911      	adds	r1, r2, r4
 8008ce0:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8008ce4:	416b      	adcs	r3, r5
 8008ce6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	f04f 0300 	mov.w	r3, #0
 8008cf6:	1891      	adds	r1, r2, r2
 8008cf8:	6739      	str	r1, [r7, #112]	; 0x70
 8008cfa:	415b      	adcs	r3, r3
 8008cfc:	677b      	str	r3, [r7, #116]	; 0x74
 8008cfe:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8008d02:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8008d06:	f7f7 fa83 	bl	8000210 <__aeabi_uldivmod>
 8008d0a:	4602      	mov	r2, r0
 8008d0c:	460b      	mov	r3, r1
 8008d0e:	4b92      	ldr	r3, [pc, #584]	; (8008f58 <UART_SetConfig+0x3dc>)
 8008d10:	fba3 1302 	umull	r1, r3, r3, r2
 8008d14:	095b      	lsrs	r3, r3, #5
 8008d16:	2164      	movs	r1, #100	; 0x64
 8008d18:	fb01 f303 	mul.w	r3, r1, r3
 8008d1c:	1ad3      	subs	r3, r2, r3
 8008d1e:	00db      	lsls	r3, r3, #3
 8008d20:	3332      	adds	r3, #50	; 0x32
 8008d22:	4a8d      	ldr	r2, [pc, #564]	; (8008f58 <UART_SetConfig+0x3dc>)
 8008d24:	fba2 2303 	umull	r2, r3, r2, r3
 8008d28:	095b      	lsrs	r3, r3, #5
 8008d2a:	005b      	lsls	r3, r3, #1
 8008d2c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008d30:	441e      	add	r6, r3
 8008d32:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008d36:	4618      	mov	r0, r3
 8008d38:	f04f 0100 	mov.w	r1, #0
 8008d3c:	4602      	mov	r2, r0
 8008d3e:	460b      	mov	r3, r1
 8008d40:	1894      	adds	r4, r2, r2
 8008d42:	66bc      	str	r4, [r7, #104]	; 0x68
 8008d44:	415b      	adcs	r3, r3
 8008d46:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008d48:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8008d4c:	1812      	adds	r2, r2, r0
 8008d4e:	eb41 0303 	adc.w	r3, r1, r3
 8008d52:	f04f 0400 	mov.w	r4, #0
 8008d56:	f04f 0500 	mov.w	r5, #0
 8008d5a:	00dd      	lsls	r5, r3, #3
 8008d5c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008d60:	00d4      	lsls	r4, r2, #3
 8008d62:	4622      	mov	r2, r4
 8008d64:	462b      	mov	r3, r5
 8008d66:	1814      	adds	r4, r2, r0
 8008d68:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8008d6c:	414b      	adcs	r3, r1
 8008d6e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d76:	685b      	ldr	r3, [r3, #4]
 8008d78:	461a      	mov	r2, r3
 8008d7a:	f04f 0300 	mov.w	r3, #0
 8008d7e:	1891      	adds	r1, r2, r2
 8008d80:	6639      	str	r1, [r7, #96]	; 0x60
 8008d82:	415b      	adcs	r3, r3
 8008d84:	667b      	str	r3, [r7, #100]	; 0x64
 8008d86:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8008d8a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008d8e:	f7f7 fa3f 	bl	8000210 <__aeabi_uldivmod>
 8008d92:	4602      	mov	r2, r0
 8008d94:	460b      	mov	r3, r1
 8008d96:	4b70      	ldr	r3, [pc, #448]	; (8008f58 <UART_SetConfig+0x3dc>)
 8008d98:	fba3 1302 	umull	r1, r3, r3, r2
 8008d9c:	095b      	lsrs	r3, r3, #5
 8008d9e:	2164      	movs	r1, #100	; 0x64
 8008da0:	fb01 f303 	mul.w	r3, r1, r3
 8008da4:	1ad3      	subs	r3, r2, r3
 8008da6:	00db      	lsls	r3, r3, #3
 8008da8:	3332      	adds	r3, #50	; 0x32
 8008daa:	4a6b      	ldr	r2, [pc, #428]	; (8008f58 <UART_SetConfig+0x3dc>)
 8008dac:	fba2 2303 	umull	r2, r3, r2, r3
 8008db0:	095b      	lsrs	r3, r3, #5
 8008db2:	f003 0207 	and.w	r2, r3, #7
 8008db6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4432      	add	r2, r6
 8008dbe:	609a      	str	r2, [r3, #8]
 8008dc0:	e26d      	b.n	800929e <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008dc2:	f7fd fecb 	bl	8006b5c <HAL_RCC_GetPCLK1Freq>
 8008dc6:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008dca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008dce:	461c      	mov	r4, r3
 8008dd0:	f04f 0500 	mov.w	r5, #0
 8008dd4:	4622      	mov	r2, r4
 8008dd6:	462b      	mov	r3, r5
 8008dd8:	1891      	adds	r1, r2, r2
 8008dda:	65b9      	str	r1, [r7, #88]	; 0x58
 8008ddc:	415b      	adcs	r3, r3
 8008dde:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008de0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008de4:	1912      	adds	r2, r2, r4
 8008de6:	eb45 0303 	adc.w	r3, r5, r3
 8008dea:	f04f 0000 	mov.w	r0, #0
 8008dee:	f04f 0100 	mov.w	r1, #0
 8008df2:	00d9      	lsls	r1, r3, #3
 8008df4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008df8:	00d0      	lsls	r0, r2, #3
 8008dfa:	4602      	mov	r2, r0
 8008dfc:	460b      	mov	r3, r1
 8008dfe:	1911      	adds	r1, r2, r4
 8008e00:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8008e04:	416b      	adcs	r3, r5
 8008e06:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	461a      	mov	r2, r3
 8008e12:	f04f 0300 	mov.w	r3, #0
 8008e16:	1891      	adds	r1, r2, r2
 8008e18:	6539      	str	r1, [r7, #80]	; 0x50
 8008e1a:	415b      	adcs	r3, r3
 8008e1c:	657b      	str	r3, [r7, #84]	; 0x54
 8008e1e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008e22:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8008e26:	f7f7 f9f3 	bl	8000210 <__aeabi_uldivmod>
 8008e2a:	4602      	mov	r2, r0
 8008e2c:	460b      	mov	r3, r1
 8008e2e:	4b4a      	ldr	r3, [pc, #296]	; (8008f58 <UART_SetConfig+0x3dc>)
 8008e30:	fba3 2302 	umull	r2, r3, r3, r2
 8008e34:	095b      	lsrs	r3, r3, #5
 8008e36:	011e      	lsls	r6, r3, #4
 8008e38:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008e3c:	461c      	mov	r4, r3
 8008e3e:	f04f 0500 	mov.w	r5, #0
 8008e42:	4622      	mov	r2, r4
 8008e44:	462b      	mov	r3, r5
 8008e46:	1891      	adds	r1, r2, r2
 8008e48:	64b9      	str	r1, [r7, #72]	; 0x48
 8008e4a:	415b      	adcs	r3, r3
 8008e4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e4e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008e52:	1912      	adds	r2, r2, r4
 8008e54:	eb45 0303 	adc.w	r3, r5, r3
 8008e58:	f04f 0000 	mov.w	r0, #0
 8008e5c:	f04f 0100 	mov.w	r1, #0
 8008e60:	00d9      	lsls	r1, r3, #3
 8008e62:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008e66:	00d0      	lsls	r0, r2, #3
 8008e68:	4602      	mov	r2, r0
 8008e6a:	460b      	mov	r3, r1
 8008e6c:	1911      	adds	r1, r2, r4
 8008e6e:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8008e72:	416b      	adcs	r3, r5
 8008e74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008e78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e7c:	685b      	ldr	r3, [r3, #4]
 8008e7e:	461a      	mov	r2, r3
 8008e80:	f04f 0300 	mov.w	r3, #0
 8008e84:	1891      	adds	r1, r2, r2
 8008e86:	6439      	str	r1, [r7, #64]	; 0x40
 8008e88:	415b      	adcs	r3, r3
 8008e8a:	647b      	str	r3, [r7, #68]	; 0x44
 8008e8c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008e90:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8008e94:	f7f7 f9bc 	bl	8000210 <__aeabi_uldivmod>
 8008e98:	4602      	mov	r2, r0
 8008e9a:	460b      	mov	r3, r1
 8008e9c:	4b2e      	ldr	r3, [pc, #184]	; (8008f58 <UART_SetConfig+0x3dc>)
 8008e9e:	fba3 1302 	umull	r1, r3, r3, r2
 8008ea2:	095b      	lsrs	r3, r3, #5
 8008ea4:	2164      	movs	r1, #100	; 0x64
 8008ea6:	fb01 f303 	mul.w	r3, r1, r3
 8008eaa:	1ad3      	subs	r3, r2, r3
 8008eac:	00db      	lsls	r3, r3, #3
 8008eae:	3332      	adds	r3, #50	; 0x32
 8008eb0:	4a29      	ldr	r2, [pc, #164]	; (8008f58 <UART_SetConfig+0x3dc>)
 8008eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8008eb6:	095b      	lsrs	r3, r3, #5
 8008eb8:	005b      	lsls	r3, r3, #1
 8008eba:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008ebe:	441e      	add	r6, r3
 8008ec0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f04f 0100 	mov.w	r1, #0
 8008eca:	4602      	mov	r2, r0
 8008ecc:	460b      	mov	r3, r1
 8008ece:	1894      	adds	r4, r2, r2
 8008ed0:	63bc      	str	r4, [r7, #56]	; 0x38
 8008ed2:	415b      	adcs	r3, r3
 8008ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ed6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008eda:	1812      	adds	r2, r2, r0
 8008edc:	eb41 0303 	adc.w	r3, r1, r3
 8008ee0:	f04f 0400 	mov.w	r4, #0
 8008ee4:	f04f 0500 	mov.w	r5, #0
 8008ee8:	00dd      	lsls	r5, r3, #3
 8008eea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008eee:	00d4      	lsls	r4, r2, #3
 8008ef0:	4622      	mov	r2, r4
 8008ef2:	462b      	mov	r3, r5
 8008ef4:	1814      	adds	r4, r2, r0
 8008ef6:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8008efa:	414b      	adcs	r3, r1
 8008efc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008f00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	461a      	mov	r2, r3
 8008f08:	f04f 0300 	mov.w	r3, #0
 8008f0c:	1891      	adds	r1, r2, r2
 8008f0e:	6339      	str	r1, [r7, #48]	; 0x30
 8008f10:	415b      	adcs	r3, r3
 8008f12:	637b      	str	r3, [r7, #52]	; 0x34
 8008f14:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008f18:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008f1c:	f7f7 f978 	bl	8000210 <__aeabi_uldivmod>
 8008f20:	4602      	mov	r2, r0
 8008f22:	460b      	mov	r3, r1
 8008f24:	4b0c      	ldr	r3, [pc, #48]	; (8008f58 <UART_SetConfig+0x3dc>)
 8008f26:	fba3 1302 	umull	r1, r3, r3, r2
 8008f2a:	095b      	lsrs	r3, r3, #5
 8008f2c:	2164      	movs	r1, #100	; 0x64
 8008f2e:	fb01 f303 	mul.w	r3, r1, r3
 8008f32:	1ad3      	subs	r3, r2, r3
 8008f34:	00db      	lsls	r3, r3, #3
 8008f36:	3332      	adds	r3, #50	; 0x32
 8008f38:	4a07      	ldr	r2, [pc, #28]	; (8008f58 <UART_SetConfig+0x3dc>)
 8008f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8008f3e:	095b      	lsrs	r3, r3, #5
 8008f40:	f003 0207 	and.w	r2, r3, #7
 8008f44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	4432      	add	r2, r6
 8008f4c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8008f4e:	e1a6      	b.n	800929e <UART_SetConfig+0x722>
 8008f50:	40011000 	.word	0x40011000
 8008f54:	40011400 	.word	0x40011400
 8008f58:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008f5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f60:	681a      	ldr	r2, [r3, #0]
 8008f62:	4bd1      	ldr	r3, [pc, #836]	; (80092a8 <UART_SetConfig+0x72c>)
 8008f64:	429a      	cmp	r2, r3
 8008f66:	d006      	beq.n	8008f76 <UART_SetConfig+0x3fa>
 8008f68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f6c:	681a      	ldr	r2, [r3, #0]
 8008f6e:	4bcf      	ldr	r3, [pc, #828]	; (80092ac <UART_SetConfig+0x730>)
 8008f70:	429a      	cmp	r2, r3
 8008f72:	f040 80ca 	bne.w	800910a <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008f76:	f7fd fe05 	bl	8006b84 <HAL_RCC_GetPCLK2Freq>
 8008f7a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008f7e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008f82:	461c      	mov	r4, r3
 8008f84:	f04f 0500 	mov.w	r5, #0
 8008f88:	4622      	mov	r2, r4
 8008f8a:	462b      	mov	r3, r5
 8008f8c:	1891      	adds	r1, r2, r2
 8008f8e:	62b9      	str	r1, [r7, #40]	; 0x28
 8008f90:	415b      	adcs	r3, r3
 8008f92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f94:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008f98:	1912      	adds	r2, r2, r4
 8008f9a:	eb45 0303 	adc.w	r3, r5, r3
 8008f9e:	f04f 0000 	mov.w	r0, #0
 8008fa2:	f04f 0100 	mov.w	r1, #0
 8008fa6:	00d9      	lsls	r1, r3, #3
 8008fa8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008fac:	00d0      	lsls	r0, r2, #3
 8008fae:	4602      	mov	r2, r0
 8008fb0:	460b      	mov	r3, r1
 8008fb2:	eb12 0a04 	adds.w	sl, r2, r4
 8008fb6:	eb43 0b05 	adc.w	fp, r3, r5
 8008fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f04f 0100 	mov.w	r1, #0
 8008fc6:	f04f 0200 	mov.w	r2, #0
 8008fca:	f04f 0300 	mov.w	r3, #0
 8008fce:	008b      	lsls	r3, r1, #2
 8008fd0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008fd4:	0082      	lsls	r2, r0, #2
 8008fd6:	4650      	mov	r0, sl
 8008fd8:	4659      	mov	r1, fp
 8008fda:	f7f7 f919 	bl	8000210 <__aeabi_uldivmod>
 8008fde:	4602      	mov	r2, r0
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	4bb3      	ldr	r3, [pc, #716]	; (80092b0 <UART_SetConfig+0x734>)
 8008fe4:	fba3 2302 	umull	r2, r3, r3, r2
 8008fe8:	095b      	lsrs	r3, r3, #5
 8008fea:	011e      	lsls	r6, r3, #4
 8008fec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f04f 0100 	mov.w	r1, #0
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	460b      	mov	r3, r1
 8008ffa:	1894      	adds	r4, r2, r2
 8008ffc:	623c      	str	r4, [r7, #32]
 8008ffe:	415b      	adcs	r3, r3
 8009000:	627b      	str	r3, [r7, #36]	; 0x24
 8009002:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009006:	1812      	adds	r2, r2, r0
 8009008:	eb41 0303 	adc.w	r3, r1, r3
 800900c:	f04f 0400 	mov.w	r4, #0
 8009010:	f04f 0500 	mov.w	r5, #0
 8009014:	00dd      	lsls	r5, r3, #3
 8009016:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800901a:	00d4      	lsls	r4, r2, #3
 800901c:	4622      	mov	r2, r4
 800901e:	462b      	mov	r3, r5
 8009020:	1814      	adds	r4, r2, r0
 8009022:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8009026:	414b      	adcs	r3, r1
 8009028:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800902c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009030:	685b      	ldr	r3, [r3, #4]
 8009032:	4618      	mov	r0, r3
 8009034:	f04f 0100 	mov.w	r1, #0
 8009038:	f04f 0200 	mov.w	r2, #0
 800903c:	f04f 0300 	mov.w	r3, #0
 8009040:	008b      	lsls	r3, r1, #2
 8009042:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009046:	0082      	lsls	r2, r0, #2
 8009048:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800904c:	f7f7 f8e0 	bl	8000210 <__aeabi_uldivmod>
 8009050:	4602      	mov	r2, r0
 8009052:	460b      	mov	r3, r1
 8009054:	4b96      	ldr	r3, [pc, #600]	; (80092b0 <UART_SetConfig+0x734>)
 8009056:	fba3 1302 	umull	r1, r3, r3, r2
 800905a:	095b      	lsrs	r3, r3, #5
 800905c:	2164      	movs	r1, #100	; 0x64
 800905e:	fb01 f303 	mul.w	r3, r1, r3
 8009062:	1ad3      	subs	r3, r2, r3
 8009064:	011b      	lsls	r3, r3, #4
 8009066:	3332      	adds	r3, #50	; 0x32
 8009068:	4a91      	ldr	r2, [pc, #580]	; (80092b0 <UART_SetConfig+0x734>)
 800906a:	fba2 2303 	umull	r2, r3, r2, r3
 800906e:	095b      	lsrs	r3, r3, #5
 8009070:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009074:	441e      	add	r6, r3
 8009076:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800907a:	4618      	mov	r0, r3
 800907c:	f04f 0100 	mov.w	r1, #0
 8009080:	4602      	mov	r2, r0
 8009082:	460b      	mov	r3, r1
 8009084:	1894      	adds	r4, r2, r2
 8009086:	61bc      	str	r4, [r7, #24]
 8009088:	415b      	adcs	r3, r3
 800908a:	61fb      	str	r3, [r7, #28]
 800908c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009090:	1812      	adds	r2, r2, r0
 8009092:	eb41 0303 	adc.w	r3, r1, r3
 8009096:	f04f 0400 	mov.w	r4, #0
 800909a:	f04f 0500 	mov.w	r5, #0
 800909e:	00dd      	lsls	r5, r3, #3
 80090a0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80090a4:	00d4      	lsls	r4, r2, #3
 80090a6:	4622      	mov	r2, r4
 80090a8:	462b      	mov	r3, r5
 80090aa:	1814      	adds	r4, r2, r0
 80090ac:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 80090b0:	414b      	adcs	r3, r1
 80090b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80090b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090ba:	685b      	ldr	r3, [r3, #4]
 80090bc:	4618      	mov	r0, r3
 80090be:	f04f 0100 	mov.w	r1, #0
 80090c2:	f04f 0200 	mov.w	r2, #0
 80090c6:	f04f 0300 	mov.w	r3, #0
 80090ca:	008b      	lsls	r3, r1, #2
 80090cc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80090d0:	0082      	lsls	r2, r0, #2
 80090d2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80090d6:	f7f7 f89b 	bl	8000210 <__aeabi_uldivmod>
 80090da:	4602      	mov	r2, r0
 80090dc:	460b      	mov	r3, r1
 80090de:	4b74      	ldr	r3, [pc, #464]	; (80092b0 <UART_SetConfig+0x734>)
 80090e0:	fba3 1302 	umull	r1, r3, r3, r2
 80090e4:	095b      	lsrs	r3, r3, #5
 80090e6:	2164      	movs	r1, #100	; 0x64
 80090e8:	fb01 f303 	mul.w	r3, r1, r3
 80090ec:	1ad3      	subs	r3, r2, r3
 80090ee:	011b      	lsls	r3, r3, #4
 80090f0:	3332      	adds	r3, #50	; 0x32
 80090f2:	4a6f      	ldr	r2, [pc, #444]	; (80092b0 <UART_SetConfig+0x734>)
 80090f4:	fba2 2303 	umull	r2, r3, r2, r3
 80090f8:	095b      	lsrs	r3, r3, #5
 80090fa:	f003 020f 	and.w	r2, r3, #15
 80090fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4432      	add	r2, r6
 8009106:	609a      	str	r2, [r3, #8]
 8009108:	e0c9      	b.n	800929e <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 800910a:	f7fd fd27 	bl	8006b5c <HAL_RCC_GetPCLK1Freq>
 800910e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009112:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009116:	461c      	mov	r4, r3
 8009118:	f04f 0500 	mov.w	r5, #0
 800911c:	4622      	mov	r2, r4
 800911e:	462b      	mov	r3, r5
 8009120:	1891      	adds	r1, r2, r2
 8009122:	6139      	str	r1, [r7, #16]
 8009124:	415b      	adcs	r3, r3
 8009126:	617b      	str	r3, [r7, #20]
 8009128:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800912c:	1912      	adds	r2, r2, r4
 800912e:	eb45 0303 	adc.w	r3, r5, r3
 8009132:	f04f 0000 	mov.w	r0, #0
 8009136:	f04f 0100 	mov.w	r1, #0
 800913a:	00d9      	lsls	r1, r3, #3
 800913c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009140:	00d0      	lsls	r0, r2, #3
 8009142:	4602      	mov	r2, r0
 8009144:	460b      	mov	r3, r1
 8009146:	eb12 0804 	adds.w	r8, r2, r4
 800914a:	eb43 0905 	adc.w	r9, r3, r5
 800914e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009152:	685b      	ldr	r3, [r3, #4]
 8009154:	4618      	mov	r0, r3
 8009156:	f04f 0100 	mov.w	r1, #0
 800915a:	f04f 0200 	mov.w	r2, #0
 800915e:	f04f 0300 	mov.w	r3, #0
 8009162:	008b      	lsls	r3, r1, #2
 8009164:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009168:	0082      	lsls	r2, r0, #2
 800916a:	4640      	mov	r0, r8
 800916c:	4649      	mov	r1, r9
 800916e:	f7f7 f84f 	bl	8000210 <__aeabi_uldivmod>
 8009172:	4602      	mov	r2, r0
 8009174:	460b      	mov	r3, r1
 8009176:	4b4e      	ldr	r3, [pc, #312]	; (80092b0 <UART_SetConfig+0x734>)
 8009178:	fba3 2302 	umull	r2, r3, r3, r2
 800917c:	095b      	lsrs	r3, r3, #5
 800917e:	011e      	lsls	r6, r3, #4
 8009180:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009184:	4618      	mov	r0, r3
 8009186:	f04f 0100 	mov.w	r1, #0
 800918a:	4602      	mov	r2, r0
 800918c:	460b      	mov	r3, r1
 800918e:	1894      	adds	r4, r2, r2
 8009190:	60bc      	str	r4, [r7, #8]
 8009192:	415b      	adcs	r3, r3
 8009194:	60fb      	str	r3, [r7, #12]
 8009196:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800919a:	1812      	adds	r2, r2, r0
 800919c:	eb41 0303 	adc.w	r3, r1, r3
 80091a0:	f04f 0400 	mov.w	r4, #0
 80091a4:	f04f 0500 	mov.w	r5, #0
 80091a8:	00dd      	lsls	r5, r3, #3
 80091aa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80091ae:	00d4      	lsls	r4, r2, #3
 80091b0:	4622      	mov	r2, r4
 80091b2:	462b      	mov	r3, r5
 80091b4:	1814      	adds	r4, r2, r0
 80091b6:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80091ba:	414b      	adcs	r3, r1
 80091bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80091c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091c4:	685b      	ldr	r3, [r3, #4]
 80091c6:	4618      	mov	r0, r3
 80091c8:	f04f 0100 	mov.w	r1, #0
 80091cc:	f04f 0200 	mov.w	r2, #0
 80091d0:	f04f 0300 	mov.w	r3, #0
 80091d4:	008b      	lsls	r3, r1, #2
 80091d6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80091da:	0082      	lsls	r2, r0, #2
 80091dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80091e0:	f7f7 f816 	bl	8000210 <__aeabi_uldivmod>
 80091e4:	4602      	mov	r2, r0
 80091e6:	460b      	mov	r3, r1
 80091e8:	4b31      	ldr	r3, [pc, #196]	; (80092b0 <UART_SetConfig+0x734>)
 80091ea:	fba3 1302 	umull	r1, r3, r3, r2
 80091ee:	095b      	lsrs	r3, r3, #5
 80091f0:	2164      	movs	r1, #100	; 0x64
 80091f2:	fb01 f303 	mul.w	r3, r1, r3
 80091f6:	1ad3      	subs	r3, r2, r3
 80091f8:	011b      	lsls	r3, r3, #4
 80091fa:	3332      	adds	r3, #50	; 0x32
 80091fc:	4a2c      	ldr	r2, [pc, #176]	; (80092b0 <UART_SetConfig+0x734>)
 80091fe:	fba2 2303 	umull	r2, r3, r2, r3
 8009202:	095b      	lsrs	r3, r3, #5
 8009204:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009208:	441e      	add	r6, r3
 800920a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800920e:	4618      	mov	r0, r3
 8009210:	f04f 0100 	mov.w	r1, #0
 8009214:	4602      	mov	r2, r0
 8009216:	460b      	mov	r3, r1
 8009218:	1894      	adds	r4, r2, r2
 800921a:	603c      	str	r4, [r7, #0]
 800921c:	415b      	adcs	r3, r3
 800921e:	607b      	str	r3, [r7, #4]
 8009220:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009224:	1812      	adds	r2, r2, r0
 8009226:	eb41 0303 	adc.w	r3, r1, r3
 800922a:	f04f 0400 	mov.w	r4, #0
 800922e:	f04f 0500 	mov.w	r5, #0
 8009232:	00dd      	lsls	r5, r3, #3
 8009234:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009238:	00d4      	lsls	r4, r2, #3
 800923a:	4622      	mov	r2, r4
 800923c:	462b      	mov	r3, r5
 800923e:	1814      	adds	r4, r2, r0
 8009240:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8009244:	414b      	adcs	r3, r1
 8009246:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800924a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800924e:	685b      	ldr	r3, [r3, #4]
 8009250:	4618      	mov	r0, r3
 8009252:	f04f 0100 	mov.w	r1, #0
 8009256:	f04f 0200 	mov.w	r2, #0
 800925a:	f04f 0300 	mov.w	r3, #0
 800925e:	008b      	lsls	r3, r1, #2
 8009260:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009264:	0082      	lsls	r2, r0, #2
 8009266:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800926a:	f7f6 ffd1 	bl	8000210 <__aeabi_uldivmod>
 800926e:	4602      	mov	r2, r0
 8009270:	460b      	mov	r3, r1
 8009272:	4b0f      	ldr	r3, [pc, #60]	; (80092b0 <UART_SetConfig+0x734>)
 8009274:	fba3 1302 	umull	r1, r3, r3, r2
 8009278:	095b      	lsrs	r3, r3, #5
 800927a:	2164      	movs	r1, #100	; 0x64
 800927c:	fb01 f303 	mul.w	r3, r1, r3
 8009280:	1ad3      	subs	r3, r2, r3
 8009282:	011b      	lsls	r3, r3, #4
 8009284:	3332      	adds	r3, #50	; 0x32
 8009286:	4a0a      	ldr	r2, [pc, #40]	; (80092b0 <UART_SetConfig+0x734>)
 8009288:	fba2 2303 	umull	r2, r3, r2, r3
 800928c:	095b      	lsrs	r3, r3, #5
 800928e:	f003 020f 	and.w	r2, r3, #15
 8009292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	4432      	add	r2, r6
 800929a:	609a      	str	r2, [r3, #8]
}
 800929c:	e7ff      	b.n	800929e <UART_SetConfig+0x722>
 800929e:	bf00      	nop
 80092a0:	37f4      	adds	r7, #244	; 0xf4
 80092a2:	46bd      	mov	sp, r7
 80092a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092a8:	40011000 	.word	0x40011000
 80092ac:	40011400 	.word	0x40011400
 80092b0:	51eb851f 	.word	0x51eb851f

080092b4 <__read_flags>:


/*
 * Reads the flag status register and returns the value of the 8-bits register
 */
uint8_t __read_flags() {
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b090      	sub	sp, #64	; 0x40
 80092b8:	af00      	add	r7, sp, #0
	Command cmd = get_default_command();
 80092ba:	f107 0308 	add.w	r3, r7, #8
 80092be:	4618      	mov	r0, r3
 80092c0:	f000 f988 	bl	80095d4 <get_default_command>
	with_data(&cmd, 1);
 80092c4:	f107 0308 	add.w	r3, r7, #8
 80092c8:	2101      	movs	r1, #1
 80092ca:	4618      	mov	r0, r3
 80092cc:	f000 f9b8 	bl	8009640 <with_data>

	if(!qspi_run(&cmd, READ_FLAG_STATUS_REGISTER)) {
 80092d0:	f107 0308 	add.w	r3, r7, #8
 80092d4:	2170      	movs	r1, #112	; 0x70
 80092d6:	4618      	mov	r0, r3
 80092d8:	f000 f9c4 	bl	8009664 <qspi_run>

	}

	uint8_t flags;

	if(!qspi_receive(&flags)) {
 80092dc:	1dfb      	adds	r3, r7, #7
 80092de:	4618      	mov	r0, r3
 80092e0:	f000 fa28 	bl	8009734 <qspi_receive>

	}

	return flags;
 80092e4:	79fb      	ldrb	r3, [r7, #7]
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3740      	adds	r7, #64	; 0x40
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}

080092ee <__write_enable_latch>:

/*
 * Enables the write latch.
 * This function must be called before each PROGRAM or ERASE operation.
 */
bool __write_enable_latch() {
 80092ee:	b5b0      	push	{r4, r5, r7, lr}
 80092f0:	b09c      	sub	sp, #112	; 0x70
 80092f2:	af00      	add	r7, sp, #0
	Command cmd = get_default_command();
 80092f4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80092f8:	4618      	mov	r0, r3
 80092fa:	f000 f96b 	bl	80095d4 <get_default_command>

	if(qspi_run(&cmd, WRITE_ENABLE_LATCH)) {
 80092fe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009302:	2106      	movs	r1, #6
 8009304:	4618      	mov	r0, r3
 8009306:	f000 f9ad 	bl	8009664 <qspi_run>
 800930a:	4603      	mov	r3, r0
 800930c:	2b00      	cmp	r3, #0
 800930e:	d022      	beq.n	8009356 <__write_enable_latch+0x68>
		cmd = get_default_command();
 8009310:	463b      	mov	r3, r7
 8009312:	4618      	mov	r0, r3
 8009314:	f000 f95e 	bl	80095d4 <get_default_command>
 8009318:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800931c:	463d      	mov	r5, r7
 800931e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009320:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009322:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009324:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009326:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009328:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800932a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800932e:	e884 0003 	stmia.w	r4, {r0, r1}

		with_data(&cmd, 1);
 8009332:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009336:	2101      	movs	r1, #1
 8009338:	4618      	mov	r0, r3
 800933a:	f000 f981 	bl	8009640 <with_data>

		if(qspi_poll(&cmd, READ_STATUS_REGISTER, 1, true)) {
 800933e:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8009342:	2301      	movs	r3, #1
 8009344:	2201      	movs	r2, #1
 8009346:	2105      	movs	r1, #5
 8009348:	f000 f9a8 	bl	800969c <qspi_poll>
 800934c:	4603      	mov	r3, r0
 800934e:	2b00      	cmp	r3, #0
 8009350:	d001      	beq.n	8009356 <__write_enable_latch+0x68>
			return true;
 8009352:	2301      	movs	r3, #1
 8009354:	e000      	b.n	8009358 <__write_enable_latch+0x6a>
		}
	}

	return false;
 8009356:	2300      	movs	r3, #0
}
 8009358:	4618      	mov	r0, r3
 800935a:	3770      	adds	r7, #112	; 0x70
 800935c:	46bd      	mov	sp, r7
 800935e:	bdb0      	pop	{r4, r5, r7, pc}

08009360 <__write_disable_latch>:

/*
 * Call this function to prevent data corruption when a hardware fault (e.g. protection fault) occurs.
 * Please refer to the documentation for details.
 */
bool __write_disable_latch() {
 8009360:	b580      	push	{r7, lr}
 8009362:	b08e      	sub	sp, #56	; 0x38
 8009364:	af00      	add	r7, sp, #0
	Command cmd = get_default_command();
 8009366:	463b      	mov	r3, r7
 8009368:	4618      	mov	r0, r3
 800936a:	f000 f933 	bl	80095d4 <get_default_command>
	return qspi_run(&cmd, WRITE_ENABLE_LATCH);
 800936e:	463b      	mov	r3, r7
 8009370:	2106      	movs	r1, #6
 8009372:	4618      	mov	r0, r3
 8009374:	f000 f976 	bl	8009664 <qspi_run>
 8009378:	4603      	mov	r3, r0
}
 800937a:	4618      	mov	r0, r3
 800937c:	3738      	adds	r7, #56	; 0x38
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}

08009382 <flash_init>:

/*
 * Initialises the flash driver
 */
void flash_init() {
 8009382:	b580      	push	{r7, lr}
 8009384:	b090      	sub	sp, #64	; 0x40
 8009386:	af00      	add	r7, sp, #0
	uint8_t configuration = 0b00011011; // 1 Dummy cycle
 8009388:	231b      	movs	r3, #27
 800938a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	Command cmd = get_default_command();
 800938e:	1d3b      	adds	r3, r7, #4
 8009390:	4618      	mov	r0, r3
 8009392:	f000 f91f 	bl	80095d4 <get_default_command>
	with_data(&cmd, 1);
 8009396:	1d3b      	adds	r3, r7, #4
 8009398:	2101      	movs	r1, #1
 800939a:	4618      	mov	r0, r3
 800939c:	f000 f950 	bl	8009640 <with_data>

	__write_enable_latch();
 80093a0:	f7ff ffa5 	bl	80092ee <__write_enable_latch>

	if(!qspi_run(&cmd, 0x81)) { // Write volatile configuration register
 80093a4:	1d3b      	adds	r3, r7, #4
 80093a6:	2181      	movs	r1, #129	; 0x81
 80093a8:	4618      	mov	r0, r3
 80093aa:	f000 f95b 	bl	8009664 <qspi_run>

	}

	if(!qspi_transmit(&configuration)) {
 80093ae:	f107 033f 	add.w	r3, r7, #63	; 0x3f
 80093b2:	4618      	mov	r0, r3
 80093b4:	f000 f9a8 	bl	8009708 <qspi_transmit>

	}

	if(!qspi_poll(&cmd, READ_FLAG_STATUS_REGISTER, 7, true)) {
 80093b8:	1d38      	adds	r0, r7, #4
 80093ba:	2301      	movs	r3, #1
 80093bc:	2207      	movs	r2, #7
 80093be:	2170      	movs	r1, #112	; 0x70
 80093c0:	f000 f96c 	bl	800969c <qspi_poll>

	}
}
 80093c4:	bf00      	nop
 80093c6:	3740      	adds	r7, #64	; 0x40
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}

080093cc <flash_read>:
 * Test providers:
 * 	 - read_ut.c
 *
 */

void flash_read(uint32_t address, uint8_t* buffer, uint32_t length) {
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b084      	sub	sp, #16
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	60f8      	str	r0, [r7, #12]
 80093d4:	60b9      	str	r1, [r7, #8]
 80093d6:	607a      	str	r2, [r7, #4]
	while(QUADSPI->SR & QUADSPI_SR_BUSY);
 80093d8:	bf00      	nop
 80093da:	4b12      	ldr	r3, [pc, #72]	; (8009424 <flash_read+0x58>)
 80093dc:	689b      	ldr	r3, [r3, #8]
 80093de:	f003 0320 	and.w	r3, r3, #32
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d1f9      	bne.n	80093da <flash_read+0xe>
	QUADSPI->CCR = (uint32_t) (FREAD_SINGLE) | (0b00000001 << 24) | (0b00000100 << 16) | (0b00100101 << 8);
 80093e6:	4b0f      	ldr	r3, [pc, #60]	; (8009424 <flash_read+0x58>)
 80093e8:	4a0f      	ldr	r2, [pc, #60]	; (8009428 <flash_read+0x5c>)
 80093ea:	615a      	str	r2, [r3, #20]
	while(QUADSPI->SR & QUADSPI_SR_BUSY);
 80093ec:	bf00      	nop
 80093ee:	4b0d      	ldr	r3, [pc, #52]	; (8009424 <flash_read+0x58>)
 80093f0:	689b      	ldr	r3, [r3, #8]
 80093f2:	f003 0320 	and.w	r3, r3, #32
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d1f9      	bne.n	80093ee <flash_read+0x22>
	QUADSPI->AR = address;
 80093fa:	4a0a      	ldr	r2, [pc, #40]	; (8009424 <flash_read+0x58>)
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	6193      	str	r3, [r2, #24]
	while(QUADSPI->SR & QUADSPI_SR_BUSY);
 8009400:	bf00      	nop
 8009402:	4b08      	ldr	r3, [pc, #32]	; (8009424 <flash_read+0x58>)
 8009404:	689b      	ldr	r3, [r3, #8]
 8009406:	f003 0320 	and.w	r3, r3, #32
 800940a:	2b00      	cmp	r3, #0
 800940c:	d1f9      	bne.n	8009402 <flash_read+0x36>
	QUADSPI->DLR = length;
 800940e:	4a05      	ldr	r2, [pc, #20]	; (8009424 <flash_read+0x58>)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6113      	str	r3, [r2, #16]

	if(!qspi_receive(buffer)) {
 8009414:	68b8      	ldr	r0, [r7, #8]
 8009416:	f000 f98d 	bl	8009734 <qspi_receive>

	}
}
 800941a:	bf00      	nop
 800941c:	3710      	adds	r7, #16
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}
 8009422:	bf00      	nop
 8009424:	a0001000 	.word	0xa0001000
 8009428:	0104250b 	.word	0x0104250b

0800942c <__flash_write_page>:
 * Test providers:
 * 	 - write_ut.c
 *
 */

void __flash_write_page(uint32_t address, uint8_t* buffer, uint32_t length) {
 800942c:	b5b0      	push	{r4, r5, r7, lr}
 800942e:	b0a2      	sub	sp, #136	; 0x88
 8009430:	af00      	add	r7, sp, #0
 8009432:	6478      	str	r0, [r7, #68]	; 0x44
 8009434:	6439      	str	r1, [r7, #64]	; 0x40
 8009436:	63fa      	str	r2, [r7, #60]	; 0x3c
	__write_enable_latch();
 8009438:	f7ff ff59 	bl	80092ee <__write_enable_latch>

	Command cmd = get_default_command();
 800943c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009440:	4618      	mov	r0, r3
 8009442:	f000 f8c7 	bl	80095d4 <get_default_command>

	with_address(&cmd, address);
 8009446:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800944a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800944c:	4618      	mov	r0, r3
 800944e:	f000 f8e1 	bl	8009614 <with_address>
	with_data(&cmd, length);
 8009452:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009456:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009458:	4618      	mov	r0, r3
 800945a:	f000 f8f1 	bl	8009640 <with_data>

	if(!qspi_run(&cmd, WRITE_SINGLE)) {
 800945e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009462:	2102      	movs	r1, #2
 8009464:	4618      	mov	r0, r3
 8009466:	f000 f8fd 	bl	8009664 <qspi_run>

	}

	if(!qspi_transmit(buffer)) {
 800946a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800946c:	f000 f94c 	bl	8009708 <qspi_transmit>

	/*
	 * Checks if the controller is ready to proceed to the next command
	 */

	cmd = get_default_command();
 8009470:	463b      	mov	r3, r7
 8009472:	4618      	mov	r0, r3
 8009474:	f000 f8ae 	bl	80095d4 <get_default_command>
 8009478:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800947c:	463d      	mov	r5, r7
 800947e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009480:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009482:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009484:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009486:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009488:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800948a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800948e:	e884 0003 	stmia.w	r4, {r0, r1}
	with_data(&cmd, 1);
 8009492:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009496:	2101      	movs	r1, #1
 8009498:	4618      	mov	r0, r3
 800949a:	f000 f8d1 	bl	8009640 <with_data>

	if(!qspi_poll(&cmd, READ_FLAG_STATUS_REGISTER, 7, true)) {
 800949e:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80094a2:	2301      	movs	r3, #1
 80094a4:	2207      	movs	r2, #7
 80094a6:	2170      	movs	r1, #112	; 0x70
 80094a8:	f000 f8f8 	bl	800969c <qspi_poll>

	}

	uint8_t flags = __read_flags();
 80094ac:	f7ff ff02 	bl	80092b4 <__read_flags>
 80094b0:	4603      	mov	r3, r0
 80094b2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	// Checks if the protection fault flag is set
	if(flags & (1 << 4)) {
 80094b6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80094ba:	f003 0310 	and.w	r3, r3, #16
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d001      	beq.n	80094c6 <__flash_write_page+0x9a>
		__write_disable_latch(); // Manually reset the latch
 80094c2:	f7ff ff4d 	bl	8009360 <__write_disable_latch>


	}
}
 80094c6:	bf00      	nop
 80094c8:	3788      	adds	r7, #136	; 0x88
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bdb0      	pop	{r4, r5, r7, pc}

080094ce <flash_write>:

void flash_write(uint32_t address, uint8_t* buffer, uint32_t length) {
 80094ce:	b580      	push	{r7, lr}
 80094d0:	b086      	sub	sp, #24
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	60f8      	str	r0, [r7, #12]
 80094d6:	60b9      	str	r1, [r7, #8]
 80094d8:	607a      	str	r2, [r7, #4]
	uint32_t internal_address = address % PAGE_SIZE;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	b2db      	uxtb	r3, r3
 80094de:	617b      	str	r3, [r7, #20]

	while(internal_address + length > PAGE_SIZE) {
 80094e0:	e016      	b.n	8009510 <flash_write+0x42>
		uint32_t write_length = PAGE_SIZE - internal_address;
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80094e8:	613b      	str	r3, [r7, #16]

		__flash_write_page(address, buffer, write_length);
 80094ea:	693a      	ldr	r2, [r7, #16]
 80094ec:	68b9      	ldr	r1, [r7, #8]
 80094ee:	68f8      	ldr	r0, [r7, #12]
 80094f0:	f7ff ff9c 	bl	800942c <__flash_write_page>
		buffer += write_length;
 80094f4:	68ba      	ldr	r2, [r7, #8]
 80094f6:	693b      	ldr	r3, [r7, #16]
 80094f8:	4413      	add	r3, r2
 80094fa:	60bb      	str	r3, [r7, #8]
		address += write_length;
 80094fc:	68fa      	ldr	r2, [r7, #12]
 80094fe:	693b      	ldr	r3, [r7, #16]
 8009500:	4413      	add	r3, r2
 8009502:	60fb      	str	r3, [r7, #12]
		length -= write_length;
 8009504:	687a      	ldr	r2, [r7, #4]
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	1ad3      	subs	r3, r2, r3
 800950a:	607b      	str	r3, [r7, #4]

		internal_address = 0;
 800950c:	2300      	movs	r3, #0
 800950e:	617b      	str	r3, [r7, #20]
	while(internal_address + length > PAGE_SIZE) {
 8009510:	697a      	ldr	r2, [r7, #20]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	4413      	add	r3, r2
 8009516:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800951a:	d8e2      	bhi.n	80094e2 <flash_write+0x14>
	}

	__flash_write_page(address, buffer, length);
 800951c:	687a      	ldr	r2, [r7, #4]
 800951e:	68b9      	ldr	r1, [r7, #8]
 8009520:	68f8      	ldr	r0, [r7, #12]
 8009522:	f7ff ff83 	bl	800942c <__flash_write_page>
}
 8009526:	bf00      	nop
 8009528:	3718      	adds	r7, #24
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}

0800952e <__flash_erase>:


   }
}

void __flash_erase(uint32_t instruction, uint32_t address) {
 800952e:	b5b0      	push	{r4, r5, r7, lr}
 8009530:	b0a0      	sub	sp, #128	; 0x80
 8009532:	af00      	add	r7, sp, #0
 8009534:	63f8      	str	r0, [r7, #60]	; 0x3c
 8009536:	63b9      	str	r1, [r7, #56]	; 0x38

	__write_enable_latch();
 8009538:	f7ff fed9 	bl	80092ee <__write_enable_latch>


	Command cmd = get_default_command();
 800953c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009540:	4618      	mov	r0, r3
 8009542:	f000 f847 	bl	80095d4 <get_default_command>
	with_address(&cmd, address);
 8009546:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800954a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800954c:	4618      	mov	r0, r3
 800954e:	f000 f861 	bl	8009614 <with_address>


	if(!qspi_run(&cmd, instruction)) {
 8009552:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009556:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009558:	4618      	mov	r0, r3
 800955a:	f000 f883 	bl	8009664 <qspi_run>
	}

	/*
	 * Checks if the controller is ready to proceed to the next command
	 */
	cmd = get_default_command();
 800955e:	463b      	mov	r3, r7
 8009560:	4618      	mov	r0, r3
 8009562:	f000 f837 	bl	80095d4 <get_default_command>
 8009566:	f107 0444 	add.w	r4, r7, #68	; 0x44
 800956a:	463d      	mov	r5, r7
 800956c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800956e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009570:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009572:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009574:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009576:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009578:	e895 0003 	ldmia.w	r5, {r0, r1}
 800957c:	e884 0003 	stmia.w	r4, {r0, r1}
	with_data(&cmd, 1);
 8009580:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009584:	2101      	movs	r1, #1
 8009586:	4618      	mov	r0, r3
 8009588:	f000 f85a 	bl	8009640 <with_data>

	if(!qspi_poll(&cmd, READ_FLAG_STATUS_REGISTER, 7, true)) {
 800958c:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8009590:	2301      	movs	r3, #1
 8009592:	2207      	movs	r2, #7
 8009594:	2170      	movs	r1, #112	; 0x70
 8009596:	f000 f881 	bl	800969c <qspi_poll>
	}

	/*
	 * Checks if the protection fault flag is set
	 */
	uint8_t flags = __read_flags();
 800959a:	f7ff fe8b 	bl	80092b4 <__read_flags>
 800959e:	4603      	mov	r3, r0
 80095a0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	if(flags & (1 << 5)) {
 80095a4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80095a8:	f003 0320 	and.w	r3, r3, #32
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d001      	beq.n	80095b4 <__flash_erase+0x86>
		__write_disable_latch(); // Manually reset the latch
 80095b0:	f7ff fed6 	bl	8009360 <__write_disable_latch>


	}
}
 80095b4:	bf00      	nop
 80095b6:	3780      	adds	r7, #128	; 0x80
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bdb0      	pop	{r4, r5, r7, pc}

080095bc <flash_erase_subsector>:

/*
 * Erases the whole sub-sector represented by the provided address.
 * The address may be any of those within the sub-sector.
 */
void flash_erase_subsector(uint32_t address) {
 80095bc:	b580      	push	{r7, lr}
 80095be:	b082      	sub	sp, #8
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
	__flash_erase(ERASE_SUBSECTOR, address);
 80095c4:	6879      	ldr	r1, [r7, #4]
 80095c6:	2020      	movs	r0, #32
 80095c8:	f7ff ffb1 	bl	800952e <__flash_erase>
}
 80095cc:	bf00      	nop
 80095ce:	3708      	adds	r7, #8
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}

080095d4 <get_default_command>:
#include "io_driver.h"




Command get_default_command() {
 80095d4:	b5b0      	push	{r4, r5, r7, lr}
 80095d6:	b090      	sub	sp, #64	; 0x40
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
	Command command = {
 80095dc:	f107 0308 	add.w	r3, r7, #8
 80095e0:	2238      	movs	r2, #56	; 0x38
 80095e2:	2100      	movs	r1, #0
 80095e4:	4618      	mov	r0, r3
 80095e6:	f002 f931 	bl	800b84c <memset>
 80095ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80095ee:	623b      	str	r3, [r7, #32]
			.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY,
			.SIOOMode = QSPI_SIOO_INST_EVERY_CMD
		}
	};

	return command;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	461d      	mov	r5, r3
 80095f4:	f107 0408 	add.w	r4, r7, #8
 80095f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80095fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80095fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80095fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009600:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009602:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009604:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009608:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	3740      	adds	r7, #64	; 0x40
 8009610:	46bd      	mov	sp, r7
 8009612:	bdb0      	pop	{r4, r5, r7, pc}

08009614 <with_address>:

/*
 * The two following functions enable the programmer to build a QSPI command very easily.
 */
void with_address(Command* cmd, uint32_t address) {
 8009614:	b480      	push	{r7}
 8009616:	b083      	sub	sp, #12
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
 800961c:	6039      	str	r1, [r7, #0]
	cmd->qspi_command.AddressMode = QSPI_ADDRESS_1_LINE;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009624:	61da      	str	r2, [r3, #28]
	cmd->qspi_command.AddressSize = QSPI_ADDRESS_24_BITS;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800962c:	60da      	str	r2, [r3, #12]
	cmd->qspi_command.Address = address;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	683a      	ldr	r2, [r7, #0]
 8009632:	605a      	str	r2, [r3, #4]
}
 8009634:	bf00      	nop
 8009636:	370c      	adds	r7, #12
 8009638:	46bd      	mov	sp, r7
 800963a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963e:	4770      	bx	lr

08009640 <with_data>:

void with_data(Command* cmd, uint32_t length) {
 8009640:	b480      	push	{r7}
 8009642:	b083      	sub	sp, #12
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
 8009648:	6039      	str	r1, [r7, #0]
	cmd->qspi_command.DataMode = QSPI_DATA_1_LINE;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009650:	625a      	str	r2, [r3, #36]	; 0x24
	cmd->qspi_command.NbData = length;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	683a      	ldr	r2, [r7, #0]
 8009656:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009658:	bf00      	nop
 800965a:	370c      	adds	r7, #12
 800965c:	46bd      	mov	sp, r7
 800965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009662:	4770      	bx	lr

08009664 <qspi_run>:


/*
 * Higher-level abstraction layer for the QSPI interface.
 */
bool qspi_run(Command* cmd, uint32_t instruction) {
 8009664:	b580      	push	{r7, lr}
 8009666:	b082      	sub	sp, #8
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
 800966c:	6039      	str	r1, [r7, #0]
	cmd->qspi_command.Instruction = instruction;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	683a      	ldr	r2, [r7, #0]
 8009672:	601a      	str	r2, [r3, #0]
	return HAL_QSPI_Command(&hqspi, &(cmd->qspi_command), IO_TIMEOUT) == HAL_OK;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800967a:	4619      	mov	r1, r3
 800967c:	4806      	ldr	r0, [pc, #24]	; (8009698 <qspi_run+0x34>)
 800967e:	f7fc fc55 	bl	8005f2c <HAL_QSPI_Command>
 8009682:	4603      	mov	r3, r0
 8009684:	2b00      	cmp	r3, #0
 8009686:	bf0c      	ite	eq
 8009688:	2301      	moveq	r3, #1
 800968a:	2300      	movne	r3, #0
 800968c:	b2db      	uxtb	r3, r3
}
 800968e:	4618      	mov	r0, r3
 8009690:	3708      	adds	r7, #8
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}
 8009696:	bf00      	nop
 8009698:	20009adc 	.word	0x20009adc

0800969c <qspi_poll>:

bool qspi_poll(Command* cmd, uint32_t instruction, uint8_t bit, bool value) {
 800969c:	b580      	push	{r7, lr}
 800969e:	b08a      	sub	sp, #40	; 0x28
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	60f8      	str	r0, [r7, #12]
 80096a4:	60b9      	str	r1, [r7, #8]
 80096a6:	4611      	mov	r1, r2
 80096a8:	461a      	mov	r2, r3
 80096aa:	460b      	mov	r3, r1
 80096ac:	71fb      	strb	r3, [r7, #7]
 80096ae:	4613      	mov	r3, r2
 80096b0:	71bb      	strb	r3, [r7, #6]
	QSPI_AutoPollingTypeDef poller;

	poller.MatchMode = QSPI_MATCH_MODE_AND;
 80096b2:	2300      	movs	r3, #0
 80096b4:	623b      	str	r3, [r7, #32]
	poller.StatusBytesSize = 1;
 80096b6:	2301      	movs	r3, #1
 80096b8:	61fb      	str	r3, [r7, #28]
	poller.Interval = 0x10;
 80096ba:	2310      	movs	r3, #16
 80096bc:	61bb      	str	r3, [r7, #24]
	poller.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 80096be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80096c2:	627b      	str	r3, [r7, #36]	; 0x24
	poller.Match = value << bit;
 80096c4:	79ba      	ldrb	r2, [r7, #6]
 80096c6:	79fb      	ldrb	r3, [r7, #7]
 80096c8:	fa02 f303 	lsl.w	r3, r2, r3
 80096cc:	613b      	str	r3, [r7, #16]
	poller.Mask = 1 << bit;
 80096ce:	79fb      	ldrb	r3, [r7, #7]
 80096d0:	2201      	movs	r2, #1
 80096d2:	fa02 f303 	lsl.w	r3, r2, r3
 80096d6:	617b      	str	r3, [r7, #20]

	cmd->qspi_command.Instruction = instruction;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	68ba      	ldr	r2, [r7, #8]
 80096dc:	601a      	str	r2, [r3, #0]

	return HAL_QSPI_AutoPolling(&hqspi, &(cmd->qspi_command), &poller, IO_TIMEOUT) == HAL_OK;
 80096de:	68f9      	ldr	r1, [r7, #12]
 80096e0:	f107 0210 	add.w	r2, r7, #16
 80096e4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80096e8:	4806      	ldr	r0, [pc, #24]	; (8009704 <qspi_poll+0x68>)
 80096ea:	f7fc fdb6 	bl	800625a <HAL_QSPI_AutoPolling>
 80096ee:	4603      	mov	r3, r0
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	bf0c      	ite	eq
 80096f4:	2301      	moveq	r3, #1
 80096f6:	2300      	movne	r3, #0
 80096f8:	b2db      	uxtb	r3, r3
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	3728      	adds	r7, #40	; 0x28
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}
 8009702:	bf00      	nop
 8009704:	20009adc 	.word	0x20009adc

08009708 <qspi_transmit>:

bool qspi_transmit(uint8_t* buffer) {
 8009708:	b580      	push	{r7, lr}
 800970a:	b082      	sub	sp, #8
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
	return HAL_QSPI_Transmit(&hqspi, buffer, IO_TIMEOUT) == HAL_OK;
 8009710:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8009714:	6879      	ldr	r1, [r7, #4]
 8009716:	4806      	ldr	r0, [pc, #24]	; (8009730 <qspi_transmit+0x28>)
 8009718:	f7fc fc66 	bl	8005fe8 <HAL_QSPI_Transmit>
 800971c:	4603      	mov	r3, r0
 800971e:	2b00      	cmp	r3, #0
 8009720:	bf0c      	ite	eq
 8009722:	2301      	moveq	r3, #1
 8009724:	2300      	movne	r3, #0
 8009726:	b2db      	uxtb	r3, r3
}
 8009728:	4618      	mov	r0, r3
 800972a:	3708      	adds	r7, #8
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}
 8009730:	20009adc 	.word	0x20009adc

08009734 <qspi_receive>:

bool qspi_receive(uint8_t* buffer) {
 8009734:	b580      	push	{r7, lr}
 8009736:	b082      	sub	sp, #8
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
	return HAL_QSPI_Receive(&hqspi, buffer, IO_TIMEOUT) == HAL_OK;
 800973c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8009740:	6879      	ldr	r1, [r7, #4]
 8009742:	4806      	ldr	r0, [pc, #24]	; (800975c <qspi_receive+0x28>)
 8009744:	f7fc fce7 	bl	8006116 <HAL_QSPI_Receive>
 8009748:	4603      	mov	r3, r0
 800974a:	2b00      	cmp	r3, #0
 800974c:	bf0c      	ite	eq
 800974e:	2301      	moveq	r3, #1
 8009750:	2300      	movne	r3, #0
 8009752:	b2db      	uxtb	r3, r3
}
 8009754:	4618      	mov	r0, r3
 8009756:	3708      	adds	r7, #8
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}
 800975c:	20009adc 	.word	0x20009adc

08009760 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009760:	b480      	push	{r7}
 8009762:	b085      	sub	sp, #20
 8009764:	af00      	add	r7, sp, #0
 8009766:	4603      	mov	r3, r0
 8009768:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800976a:	2300      	movs	r3, #0
 800976c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800976e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009772:	2b84      	cmp	r3, #132	; 0x84
 8009774:	d005      	beq.n	8009782 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009776:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	4413      	add	r3, r2
 800977e:	3303      	adds	r3, #3
 8009780:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009782:	68fb      	ldr	r3, [r7, #12]
}
 8009784:	4618      	mov	r0, r3
 8009786:	3714      	adds	r7, #20
 8009788:	46bd      	mov	sp, r7
 800978a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978e:	4770      	bx	lr

08009790 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009794:	f000 ffb6 	bl	800a704 <vTaskStartScheduler>
  
  return osOK;
 8009798:	2300      	movs	r3, #0
}
 800979a:	4618      	mov	r0, r3
 800979c:	bd80      	pop	{r7, pc}

0800979e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800979e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097a0:	b089      	sub	sp, #36	; 0x24
 80097a2:	af04      	add	r7, sp, #16
 80097a4:	6078      	str	r0, [r7, #4]
 80097a6:	6039      	str	r1, [r7, #0]
      return NULL;
    } 
  }
#elif( configSUPPORT_STATIC_ALLOCATION == 1 )

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	685c      	ldr	r4, [r3, #4]
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681d      	ldr	r5, [r3, #0]
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	691e      	ldr	r6, [r3, #16]
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80097ba:	4618      	mov	r0, r3
 80097bc:	f7ff ffd0 	bl	8009760 <makeFreeRtosPriority>
 80097c0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	695b      	ldr	r3, [r3, #20]
 80097c6:	687a      	ldr	r2, [r7, #4]
 80097c8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80097ca:	9202      	str	r2, [sp, #8]
 80097cc:	9301      	str	r3, [sp, #4]
 80097ce:	9100      	str	r1, [sp, #0]
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	4632      	mov	r2, r6
 80097d4:	4629      	mov	r1, r5
 80097d6:	4620      	mov	r0, r4
 80097d8:	f000 fd98 	bl	800a30c <xTaskCreateStatic>
 80097dc:	60f8      	str	r0, [r7, #12]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80097de:	68fb      	ldr	r3, [r7, #12]
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	3714      	adds	r7, #20
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080097e8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b084      	sub	sp, #16
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d001      	beq.n	80097fe <osDelay+0x16>
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	e000      	b.n	8009800 <osDelay+0x18>
 80097fe:	2301      	movs	r3, #1
 8009800:	4618      	mov	r0, r3
 8009802:	f000 ff4b 	bl	800a69c <vTaskDelay>
  
  return osOK;
 8009806:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009808:	4618      	mov	r0, r3
 800980a:	3710      	adds	r7, #16
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}

08009810 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009810:	b480      	push	{r7}
 8009812:	b083      	sub	sp, #12
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f103 0208 	add.w	r2, r3, #8
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f04f 32ff 	mov.w	r2, #4294967295
 8009828:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f103 0208 	add.w	r2, r3, #8
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f103 0208 	add.w	r2, r3, #8
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2200      	movs	r2, #0
 8009842:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009844:	bf00      	nop
 8009846:	370c      	adds	r7, #12
 8009848:	46bd      	mov	sp, r7
 800984a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984e:	4770      	bx	lr

08009850 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009850:	b480      	push	{r7}
 8009852:	b083      	sub	sp, #12
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2200      	movs	r2, #0
 800985c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800985e:	bf00      	nop
 8009860:	370c      	adds	r7, #12
 8009862:	46bd      	mov	sp, r7
 8009864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009868:	4770      	bx	lr

0800986a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800986a:	b480      	push	{r7}
 800986c:	b085      	sub	sp, #20
 800986e:	af00      	add	r7, sp, #0
 8009870:	6078      	str	r0, [r7, #4]
 8009872:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	685b      	ldr	r3, [r3, #4]
 8009878:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	68fa      	ldr	r2, [r7, #12]
 800987e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	689a      	ldr	r2, [r3, #8]
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	689b      	ldr	r3, [r3, #8]
 800988c:	683a      	ldr	r2, [r7, #0]
 800988e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	683a      	ldr	r2, [r7, #0]
 8009894:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	687a      	ldr	r2, [r7, #4]
 800989a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	1c5a      	adds	r2, r3, #1
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	601a      	str	r2, [r3, #0]
}
 80098a6:	bf00      	nop
 80098a8:	3714      	adds	r7, #20
 80098aa:	46bd      	mov	sp, r7
 80098ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b0:	4770      	bx	lr

080098b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80098b2:	b480      	push	{r7}
 80098b4:	b085      	sub	sp, #20
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	6078      	str	r0, [r7, #4]
 80098ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098c8:	d103      	bne.n	80098d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	691b      	ldr	r3, [r3, #16]
 80098ce:	60fb      	str	r3, [r7, #12]
 80098d0:	e00c      	b.n	80098ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	3308      	adds	r3, #8
 80098d6:	60fb      	str	r3, [r7, #12]
 80098d8:	e002      	b.n	80098e0 <vListInsert+0x2e>
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	685b      	ldr	r3, [r3, #4]
 80098de:	60fb      	str	r3, [r7, #12]
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	685b      	ldr	r3, [r3, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	68ba      	ldr	r2, [r7, #8]
 80098e8:	429a      	cmp	r2, r3
 80098ea:	d2f6      	bcs.n	80098da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	685a      	ldr	r2, [r3, #4]
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	685b      	ldr	r3, [r3, #4]
 80098f8:	683a      	ldr	r2, [r7, #0]
 80098fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	68fa      	ldr	r2, [r7, #12]
 8009900:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	683a      	ldr	r2, [r7, #0]
 8009906:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	687a      	ldr	r2, [r7, #4]
 800990c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	1c5a      	adds	r2, r3, #1
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	601a      	str	r2, [r3, #0]
}
 8009918:	bf00      	nop
 800991a:	3714      	adds	r7, #20
 800991c:	46bd      	mov	sp, r7
 800991e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009922:	4770      	bx	lr

08009924 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009924:	b480      	push	{r7}
 8009926:	b085      	sub	sp, #20
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	691b      	ldr	r3, [r3, #16]
 8009930:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	685b      	ldr	r3, [r3, #4]
 8009936:	687a      	ldr	r2, [r7, #4]
 8009938:	6892      	ldr	r2, [r2, #8]
 800993a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	689b      	ldr	r3, [r3, #8]
 8009940:	687a      	ldr	r2, [r7, #4]
 8009942:	6852      	ldr	r2, [r2, #4]
 8009944:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	685b      	ldr	r3, [r3, #4]
 800994a:	687a      	ldr	r2, [r7, #4]
 800994c:	429a      	cmp	r2, r3
 800994e:	d103      	bne.n	8009958 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	689a      	ldr	r2, [r3, #8]
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2200      	movs	r2, #0
 800995c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	1e5a      	subs	r2, r3, #1
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
}
 800996c:	4618      	mov	r0, r3
 800996e:	3714      	adds	r7, #20
 8009970:	46bd      	mov	sp, r7
 8009972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009976:	4770      	bx	lr

08009978 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b084      	sub	sp, #16
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d10a      	bne.n	80099a2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800998c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009990:	f383 8811 	msr	BASEPRI, r3
 8009994:	f3bf 8f6f 	isb	sy
 8009998:	f3bf 8f4f 	dsb	sy
 800999c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800999e:	bf00      	nop
 80099a0:	e7fe      	b.n	80099a0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80099a2:	f001 fdff 	bl	800b5a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681a      	ldr	r2, [r3, #0]
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099ae:	68f9      	ldr	r1, [r7, #12]
 80099b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80099b2:	fb01 f303 	mul.w	r3, r1, r3
 80099b6:	441a      	add	r2, r3
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	2200      	movs	r2, #0
 80099c0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681a      	ldr	r2, [r3, #0]
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681a      	ldr	r2, [r3, #0]
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099d2:	3b01      	subs	r3, #1
 80099d4:	68f9      	ldr	r1, [r7, #12]
 80099d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80099d8:	fb01 f303 	mul.w	r3, r1, r3
 80099dc:	441a      	add	r2, r3
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	22ff      	movs	r2, #255	; 0xff
 80099e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	22ff      	movs	r2, #255	; 0xff
 80099ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d114      	bne.n	8009a22 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	691b      	ldr	r3, [r3, #16]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d01a      	beq.n	8009a36 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	3310      	adds	r3, #16
 8009a04:	4618      	mov	r0, r3
 8009a06:	f001 f8cf 	bl	800aba8 <xTaskRemoveFromEventList>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d012      	beq.n	8009a36 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009a10:	4b0c      	ldr	r3, [pc, #48]	; (8009a44 <xQueueGenericReset+0xcc>)
 8009a12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a16:	601a      	str	r2, [r3, #0]
 8009a18:	f3bf 8f4f 	dsb	sy
 8009a1c:	f3bf 8f6f 	isb	sy
 8009a20:	e009      	b.n	8009a36 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	3310      	adds	r3, #16
 8009a26:	4618      	mov	r0, r3
 8009a28:	f7ff fef2 	bl	8009810 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	3324      	adds	r3, #36	; 0x24
 8009a30:	4618      	mov	r0, r3
 8009a32:	f7ff feed 	bl	8009810 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009a36:	f001 fde5 	bl	800b604 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009a3a:	2301      	movs	r3, #1
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3710      	adds	r7, #16
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}
 8009a44:	e000ed04 	.word	0xe000ed04

08009a48 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b08e      	sub	sp, #56	; 0x38
 8009a4c:	af02      	add	r7, sp, #8
 8009a4e:	60f8      	str	r0, [r7, #12]
 8009a50:	60b9      	str	r1, [r7, #8]
 8009a52:	607a      	str	r2, [r7, #4]
 8009a54:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d10a      	bne.n	8009a72 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a60:	f383 8811 	msr	BASEPRI, r3
 8009a64:	f3bf 8f6f 	isb	sy
 8009a68:	f3bf 8f4f 	dsb	sy
 8009a6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009a6e:	bf00      	nop
 8009a70:	e7fe      	b.n	8009a70 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d10a      	bne.n	8009a8e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a7c:	f383 8811 	msr	BASEPRI, r3
 8009a80:	f3bf 8f6f 	isb	sy
 8009a84:	f3bf 8f4f 	dsb	sy
 8009a88:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009a8a:	bf00      	nop
 8009a8c:	e7fe      	b.n	8009a8c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d002      	beq.n	8009a9a <xQueueGenericCreateStatic+0x52>
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d001      	beq.n	8009a9e <xQueueGenericCreateStatic+0x56>
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	e000      	b.n	8009aa0 <xQueueGenericCreateStatic+0x58>
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d10a      	bne.n	8009aba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa8:	f383 8811 	msr	BASEPRI, r3
 8009aac:	f3bf 8f6f 	isb	sy
 8009ab0:	f3bf 8f4f 	dsb	sy
 8009ab4:	623b      	str	r3, [r7, #32]
}
 8009ab6:	bf00      	nop
 8009ab8:	e7fe      	b.n	8009ab8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d102      	bne.n	8009ac6 <xQueueGenericCreateStatic+0x7e>
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d101      	bne.n	8009aca <xQueueGenericCreateStatic+0x82>
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	e000      	b.n	8009acc <xQueueGenericCreateStatic+0x84>
 8009aca:	2300      	movs	r3, #0
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d10a      	bne.n	8009ae6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad4:	f383 8811 	msr	BASEPRI, r3
 8009ad8:	f3bf 8f6f 	isb	sy
 8009adc:	f3bf 8f4f 	dsb	sy
 8009ae0:	61fb      	str	r3, [r7, #28]
}
 8009ae2:	bf00      	nop
 8009ae4:	e7fe      	b.n	8009ae4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009ae6:	2348      	movs	r3, #72	; 0x48
 8009ae8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	2b48      	cmp	r3, #72	; 0x48
 8009aee:	d00a      	beq.n	8009b06 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af4:	f383 8811 	msr	BASEPRI, r3
 8009af8:	f3bf 8f6f 	isb	sy
 8009afc:	f3bf 8f4f 	dsb	sy
 8009b00:	61bb      	str	r3, [r7, #24]
}
 8009b02:	bf00      	nop
 8009b04:	e7fe      	b.n	8009b04 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009b06:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d009      	beq.n	8009b26 <xQueueGenericCreateStatic+0xde>
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009b12:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b18:	9300      	str	r3, [sp, #0]
 8009b1a:	4613      	mov	r3, r2
 8009b1c:	687a      	ldr	r2, [r7, #4]
 8009b1e:	68b9      	ldr	r1, [r7, #8]
 8009b20:	68f8      	ldr	r0, [r7, #12]
 8009b22:	f000 f805 	bl	8009b30 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	3730      	adds	r7, #48	; 0x30
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}

08009b30 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b084      	sub	sp, #16
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	60f8      	str	r0, [r7, #12]
 8009b38:	60b9      	str	r1, [r7, #8]
 8009b3a:	607a      	str	r2, [r7, #4]
 8009b3c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d103      	bne.n	8009b4c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009b44:	69bb      	ldr	r3, [r7, #24]
 8009b46:	69ba      	ldr	r2, [r7, #24]
 8009b48:	601a      	str	r2, [r3, #0]
 8009b4a:	e002      	b.n	8009b52 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009b4c:	69bb      	ldr	r3, [r7, #24]
 8009b4e:	687a      	ldr	r2, [r7, #4]
 8009b50:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009b52:	69bb      	ldr	r3, [r7, #24]
 8009b54:	68fa      	ldr	r2, [r7, #12]
 8009b56:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009b58:	69bb      	ldr	r3, [r7, #24]
 8009b5a:	68ba      	ldr	r2, [r7, #8]
 8009b5c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009b5e:	2101      	movs	r1, #1
 8009b60:	69b8      	ldr	r0, [r7, #24]
 8009b62:	f7ff ff09 	bl	8009978 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009b66:	bf00      	nop
 8009b68:	3710      	adds	r7, #16
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}

08009b6e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009b6e:	b580      	push	{r7, lr}
 8009b70:	b082      	sub	sp, #8
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d00e      	beq.n	8009b9a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2200      	movs	r2, #0
 8009b86:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009b8e:	2300      	movs	r3, #0
 8009b90:	2200      	movs	r2, #0
 8009b92:	2100      	movs	r1, #0
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f000 f81f 	bl	8009bd8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009b9a:	bf00      	nop
 8009b9c:	3708      	adds	r7, #8
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}

08009ba2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8009ba2:	b580      	push	{r7, lr}
 8009ba4:	b088      	sub	sp, #32
 8009ba6:	af02      	add	r7, sp, #8
 8009ba8:	4603      	mov	r3, r0
 8009baa:	6039      	str	r1, [r7, #0]
 8009bac:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009bae:	2301      	movs	r3, #1
 8009bb0:	617b      	str	r3, [r7, #20]
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009bb6:	79fb      	ldrb	r3, [r7, #7]
 8009bb8:	9300      	str	r3, [sp, #0]
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	6939      	ldr	r1, [r7, #16]
 8009bc0:	6978      	ldr	r0, [r7, #20]
 8009bc2:	f7ff ff41 	bl	8009a48 <xQueueGenericCreateStatic>
 8009bc6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009bc8:	68f8      	ldr	r0, [r7, #12]
 8009bca:	f7ff ffd0 	bl	8009b6e <prvInitialiseMutex>

		return xNewQueue;
 8009bce:	68fb      	ldr	r3, [r7, #12]
	}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	3718      	adds	r7, #24
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}

08009bd8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b08e      	sub	sp, #56	; 0x38
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	60f8      	str	r0, [r7, #12]
 8009be0:	60b9      	str	r1, [r7, #8]
 8009be2:	607a      	str	r2, [r7, #4]
 8009be4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009be6:	2300      	movs	r3, #0
 8009be8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d10a      	bne.n	8009c0a <xQueueGenericSend+0x32>
	__asm volatile
 8009bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf8:	f383 8811 	msr	BASEPRI, r3
 8009bfc:	f3bf 8f6f 	isb	sy
 8009c00:	f3bf 8f4f 	dsb	sy
 8009c04:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009c06:	bf00      	nop
 8009c08:	e7fe      	b.n	8009c08 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d103      	bne.n	8009c18 <xQueueGenericSend+0x40>
 8009c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d101      	bne.n	8009c1c <xQueueGenericSend+0x44>
 8009c18:	2301      	movs	r3, #1
 8009c1a:	e000      	b.n	8009c1e <xQueueGenericSend+0x46>
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d10a      	bne.n	8009c38 <xQueueGenericSend+0x60>
	__asm volatile
 8009c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c26:	f383 8811 	msr	BASEPRI, r3
 8009c2a:	f3bf 8f6f 	isb	sy
 8009c2e:	f3bf 8f4f 	dsb	sy
 8009c32:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009c34:	bf00      	nop
 8009c36:	e7fe      	b.n	8009c36 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	2b02      	cmp	r3, #2
 8009c3c:	d103      	bne.n	8009c46 <xQueueGenericSend+0x6e>
 8009c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c42:	2b01      	cmp	r3, #1
 8009c44:	d101      	bne.n	8009c4a <xQueueGenericSend+0x72>
 8009c46:	2301      	movs	r3, #1
 8009c48:	e000      	b.n	8009c4c <xQueueGenericSend+0x74>
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d10a      	bne.n	8009c66 <xQueueGenericSend+0x8e>
	__asm volatile
 8009c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c54:	f383 8811 	msr	BASEPRI, r3
 8009c58:	f3bf 8f6f 	isb	sy
 8009c5c:	f3bf 8f4f 	dsb	sy
 8009c60:	623b      	str	r3, [r7, #32]
}
 8009c62:	bf00      	nop
 8009c64:	e7fe      	b.n	8009c64 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009c66:	f001 f935 	bl	800aed4 <xTaskGetSchedulerState>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d102      	bne.n	8009c76 <xQueueGenericSend+0x9e>
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d101      	bne.n	8009c7a <xQueueGenericSend+0xa2>
 8009c76:	2301      	movs	r3, #1
 8009c78:	e000      	b.n	8009c7c <xQueueGenericSend+0xa4>
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d10a      	bne.n	8009c96 <xQueueGenericSend+0xbe>
	__asm volatile
 8009c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c84:	f383 8811 	msr	BASEPRI, r3
 8009c88:	f3bf 8f6f 	isb	sy
 8009c8c:	f3bf 8f4f 	dsb	sy
 8009c90:	61fb      	str	r3, [r7, #28]
}
 8009c92:	bf00      	nop
 8009c94:	e7fe      	b.n	8009c94 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009c96:	f001 fc85 	bl	800b5a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ca2:	429a      	cmp	r2, r3
 8009ca4:	d302      	bcc.n	8009cac <xQueueGenericSend+0xd4>
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	2b02      	cmp	r3, #2
 8009caa:	d129      	bne.n	8009d00 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009cac:	683a      	ldr	r2, [r7, #0]
 8009cae:	68b9      	ldr	r1, [r7, #8]
 8009cb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009cb2:	f000 fa41 	bl	800a138 <prvCopyDataToQueue>
 8009cb6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d010      	beq.n	8009ce2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cc2:	3324      	adds	r3, #36	; 0x24
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	f000 ff6f 	bl	800aba8 <xTaskRemoveFromEventList>
 8009cca:	4603      	mov	r3, r0
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d013      	beq.n	8009cf8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009cd0:	4b3f      	ldr	r3, [pc, #252]	; (8009dd0 <xQueueGenericSend+0x1f8>)
 8009cd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cd6:	601a      	str	r2, [r3, #0]
 8009cd8:	f3bf 8f4f 	dsb	sy
 8009cdc:	f3bf 8f6f 	isb	sy
 8009ce0:	e00a      	b.n	8009cf8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d007      	beq.n	8009cf8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009ce8:	4b39      	ldr	r3, [pc, #228]	; (8009dd0 <xQueueGenericSend+0x1f8>)
 8009cea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cee:	601a      	str	r2, [r3, #0]
 8009cf0:	f3bf 8f4f 	dsb	sy
 8009cf4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009cf8:	f001 fc84 	bl	800b604 <vPortExitCritical>
				return pdPASS;
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	e063      	b.n	8009dc8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d103      	bne.n	8009d0e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009d06:	f001 fc7d 	bl	800b604 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	e05c      	b.n	8009dc8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d106      	bne.n	8009d22 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009d14:	f107 0314 	add.w	r3, r7, #20
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f000 ffa7 	bl	800ac6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009d1e:	2301      	movs	r3, #1
 8009d20:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009d22:	f001 fc6f 	bl	800b604 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009d26:	f000 fd4d 	bl	800a7c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009d2a:	f001 fc3b 	bl	800b5a4 <vPortEnterCritical>
 8009d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009d34:	b25b      	sxtb	r3, r3
 8009d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d3a:	d103      	bne.n	8009d44 <xQueueGenericSend+0x16c>
 8009d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d3e:	2200      	movs	r2, #0
 8009d40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d4a:	b25b      	sxtb	r3, r3
 8009d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d50:	d103      	bne.n	8009d5a <xQueueGenericSend+0x182>
 8009d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d54:	2200      	movs	r2, #0
 8009d56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009d5a:	f001 fc53 	bl	800b604 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009d5e:	1d3a      	adds	r2, r7, #4
 8009d60:	f107 0314 	add.w	r3, r7, #20
 8009d64:	4611      	mov	r1, r2
 8009d66:	4618      	mov	r0, r3
 8009d68:	f000 ff96 	bl	800ac98 <xTaskCheckForTimeOut>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d124      	bne.n	8009dbc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009d72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d74:	f000 fab2 	bl	800a2dc <prvIsQueueFull>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d018      	beq.n	8009db0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d80:	3310      	adds	r3, #16
 8009d82:	687a      	ldr	r2, [r7, #4]
 8009d84:	4611      	mov	r1, r2
 8009d86:	4618      	mov	r0, r3
 8009d88:	f000 feea 	bl	800ab60 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009d8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d8e:	f000 fa3d 	bl	800a20c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009d92:	f000 fd25 	bl	800a7e0 <xTaskResumeAll>
 8009d96:	4603      	mov	r3, r0
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	f47f af7c 	bne.w	8009c96 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009d9e:	4b0c      	ldr	r3, [pc, #48]	; (8009dd0 <xQueueGenericSend+0x1f8>)
 8009da0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009da4:	601a      	str	r2, [r3, #0]
 8009da6:	f3bf 8f4f 	dsb	sy
 8009daa:	f3bf 8f6f 	isb	sy
 8009dae:	e772      	b.n	8009c96 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009db0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009db2:	f000 fa2b 	bl	800a20c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009db6:	f000 fd13 	bl	800a7e0 <xTaskResumeAll>
 8009dba:	e76c      	b.n	8009c96 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009dbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009dbe:	f000 fa25 	bl	800a20c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009dc2:	f000 fd0d 	bl	800a7e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009dc6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	3738      	adds	r7, #56	; 0x38
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}
 8009dd0:	e000ed04 	.word	0xe000ed04

08009dd4 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b08e      	sub	sp, #56	; 0x38
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
 8009ddc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d10a      	bne.n	8009dfe <xQueueGiveFromISR+0x2a>
	__asm volatile
 8009de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dec:	f383 8811 	msr	BASEPRI, r3
 8009df0:	f3bf 8f6f 	isb	sy
 8009df4:	f3bf 8f4f 	dsb	sy
 8009df8:	623b      	str	r3, [r7, #32]
}
 8009dfa:	bf00      	nop
 8009dfc:	e7fe      	b.n	8009dfc <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d00a      	beq.n	8009e1c <xQueueGiveFromISR+0x48>
	__asm volatile
 8009e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e0a:	f383 8811 	msr	BASEPRI, r3
 8009e0e:	f3bf 8f6f 	isb	sy
 8009e12:	f3bf 8f4f 	dsb	sy
 8009e16:	61fb      	str	r3, [r7, #28]
}
 8009e18:	bf00      	nop
 8009e1a:	e7fe      	b.n	8009e1a <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d103      	bne.n	8009e2c <xQueueGiveFromISR+0x58>
 8009e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e26:	689b      	ldr	r3, [r3, #8]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d101      	bne.n	8009e30 <xQueueGiveFromISR+0x5c>
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	e000      	b.n	8009e32 <xQueueGiveFromISR+0x5e>
 8009e30:	2300      	movs	r3, #0
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d10a      	bne.n	8009e4c <xQueueGiveFromISR+0x78>
	__asm volatile
 8009e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e3a:	f383 8811 	msr	BASEPRI, r3
 8009e3e:	f3bf 8f6f 	isb	sy
 8009e42:	f3bf 8f4f 	dsb	sy
 8009e46:	61bb      	str	r3, [r7, #24]
}
 8009e48:	bf00      	nop
 8009e4a:	e7fe      	b.n	8009e4a <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009e4c:	f001 fc8c 	bl	800b768 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009e50:	f3ef 8211 	mrs	r2, BASEPRI
 8009e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e58:	f383 8811 	msr	BASEPRI, r3
 8009e5c:	f3bf 8f6f 	isb	sy
 8009e60:	f3bf 8f4f 	dsb	sy
 8009e64:	617a      	str	r2, [r7, #20]
 8009e66:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009e68:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e70:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	d22b      	bcs.n	8009ed4 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e88:	1c5a      	adds	r2, r3, #1
 8009e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e8c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009e8e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e96:	d112      	bne.n	8009ebe <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d016      	beq.n	8009ece <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea2:	3324      	adds	r3, #36	; 0x24
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f000 fe7f 	bl	800aba8 <xTaskRemoveFromEventList>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d00e      	beq.n	8009ece <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d00b      	beq.n	8009ece <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	2201      	movs	r2, #1
 8009eba:	601a      	str	r2, [r3, #0]
 8009ebc:	e007      	b.n	8009ece <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009ebe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ec2:	3301      	adds	r3, #1
 8009ec4:	b2db      	uxtb	r3, r3
 8009ec6:	b25a      	sxtb	r2, r3
 8009ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	637b      	str	r3, [r7, #52]	; 0x34
 8009ed2:	e001      	b.n	8009ed8 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	637b      	str	r3, [r7, #52]	; 0x34
 8009ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eda:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009ee2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3738      	adds	r7, #56	; 0x38
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}
	...

08009ef0 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b08e      	sub	sp, #56	; 0x38
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
 8009ef8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009efa:	2300      	movs	r3, #0
 8009efc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009f02:	2300      	movs	r3, #0
 8009f04:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d10a      	bne.n	8009f22 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8009f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f10:	f383 8811 	msr	BASEPRI, r3
 8009f14:	f3bf 8f6f 	isb	sy
 8009f18:	f3bf 8f4f 	dsb	sy
 8009f1c:	623b      	str	r3, [r7, #32]
}
 8009f1e:	bf00      	nop
 8009f20:	e7fe      	b.n	8009f20 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d00a      	beq.n	8009f40 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8009f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f2e:	f383 8811 	msr	BASEPRI, r3
 8009f32:	f3bf 8f6f 	isb	sy
 8009f36:	f3bf 8f4f 	dsb	sy
 8009f3a:	61fb      	str	r3, [r7, #28]
}
 8009f3c:	bf00      	nop
 8009f3e:	e7fe      	b.n	8009f3e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009f40:	f000 ffc8 	bl	800aed4 <xTaskGetSchedulerState>
 8009f44:	4603      	mov	r3, r0
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d102      	bne.n	8009f50 <xQueueSemaphoreTake+0x60>
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d101      	bne.n	8009f54 <xQueueSemaphoreTake+0x64>
 8009f50:	2301      	movs	r3, #1
 8009f52:	e000      	b.n	8009f56 <xQueueSemaphoreTake+0x66>
 8009f54:	2300      	movs	r3, #0
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d10a      	bne.n	8009f70 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8009f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f5e:	f383 8811 	msr	BASEPRI, r3
 8009f62:	f3bf 8f6f 	isb	sy
 8009f66:	f3bf 8f4f 	dsb	sy
 8009f6a:	61bb      	str	r3, [r7, #24]
}
 8009f6c:	bf00      	nop
 8009f6e:	e7fe      	b.n	8009f6e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009f70:	f001 fb18 	bl	800b5a4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f78:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d024      	beq.n	8009fca <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f82:	1e5a      	subs	r2, r3, #1
 8009f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f86:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d104      	bne.n	8009f9a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009f90:	f001 f95e 	bl	800b250 <pvTaskIncrementMutexHeldCount>
 8009f94:	4602      	mov	r2, r0
 8009f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f98:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f9c:	691b      	ldr	r3, [r3, #16]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d00f      	beq.n	8009fc2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fa4:	3310      	adds	r3, #16
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f000 fdfe 	bl	800aba8 <xTaskRemoveFromEventList>
 8009fac:	4603      	mov	r3, r0
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d007      	beq.n	8009fc2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009fb2:	4b54      	ldr	r3, [pc, #336]	; (800a104 <xQueueSemaphoreTake+0x214>)
 8009fb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fb8:	601a      	str	r2, [r3, #0]
 8009fba:	f3bf 8f4f 	dsb	sy
 8009fbe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009fc2:	f001 fb1f 	bl	800b604 <vPortExitCritical>
				return pdPASS;
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	e097      	b.n	800a0fa <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d111      	bne.n	8009ff4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d00a      	beq.n	8009fec <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8009fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fda:	f383 8811 	msr	BASEPRI, r3
 8009fde:	f3bf 8f6f 	isb	sy
 8009fe2:	f3bf 8f4f 	dsb	sy
 8009fe6:	617b      	str	r3, [r7, #20]
}
 8009fe8:	bf00      	nop
 8009fea:	e7fe      	b.n	8009fea <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009fec:	f001 fb0a 	bl	800b604 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	e082      	b.n	800a0fa <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d106      	bne.n	800a008 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009ffa:	f107 030c 	add.w	r3, r7, #12
 8009ffe:	4618      	mov	r0, r3
 800a000:	f000 fe34 	bl	800ac6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a004:	2301      	movs	r3, #1
 800a006:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a008:	f001 fafc 	bl	800b604 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a00c:	f000 fbda 	bl	800a7c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a010:	f001 fac8 	bl	800b5a4 <vPortEnterCritical>
 800a014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a016:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a01a:	b25b      	sxtb	r3, r3
 800a01c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a020:	d103      	bne.n	800a02a <xQueueSemaphoreTake+0x13a>
 800a022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a024:	2200      	movs	r2, #0
 800a026:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a02a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a02c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a030:	b25b      	sxtb	r3, r3
 800a032:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a036:	d103      	bne.n	800a040 <xQueueSemaphoreTake+0x150>
 800a038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a03a:	2200      	movs	r2, #0
 800a03c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a040:	f001 fae0 	bl	800b604 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a044:	463a      	mov	r2, r7
 800a046:	f107 030c 	add.w	r3, r7, #12
 800a04a:	4611      	mov	r1, r2
 800a04c:	4618      	mov	r0, r3
 800a04e:	f000 fe23 	bl	800ac98 <xTaskCheckForTimeOut>
 800a052:	4603      	mov	r3, r0
 800a054:	2b00      	cmp	r3, #0
 800a056:	d132      	bne.n	800a0be <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a058:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a05a:	f000 f929 	bl	800a2b0 <prvIsQueueEmpty>
 800a05e:	4603      	mov	r3, r0
 800a060:	2b00      	cmp	r3, #0
 800a062:	d026      	beq.n	800a0b2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d109      	bne.n	800a080 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a06c:	f001 fa9a 	bl	800b5a4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a072:	689b      	ldr	r3, [r3, #8]
 800a074:	4618      	mov	r0, r3
 800a076:	f000 ff4b 	bl	800af10 <xTaskPriorityInherit>
 800a07a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a07c:	f001 fac2 	bl	800b604 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a082:	3324      	adds	r3, #36	; 0x24
 800a084:	683a      	ldr	r2, [r7, #0]
 800a086:	4611      	mov	r1, r2
 800a088:	4618      	mov	r0, r3
 800a08a:	f000 fd69 	bl	800ab60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a08e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a090:	f000 f8bc 	bl	800a20c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a094:	f000 fba4 	bl	800a7e0 <xTaskResumeAll>
 800a098:	4603      	mov	r3, r0
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	f47f af68 	bne.w	8009f70 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a0a0:	4b18      	ldr	r3, [pc, #96]	; (800a104 <xQueueSemaphoreTake+0x214>)
 800a0a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0a6:	601a      	str	r2, [r3, #0]
 800a0a8:	f3bf 8f4f 	dsb	sy
 800a0ac:	f3bf 8f6f 	isb	sy
 800a0b0:	e75e      	b.n	8009f70 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a0b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a0b4:	f000 f8aa 	bl	800a20c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a0b8:	f000 fb92 	bl	800a7e0 <xTaskResumeAll>
 800a0bc:	e758      	b.n	8009f70 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a0be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a0c0:	f000 f8a4 	bl	800a20c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a0c4:	f000 fb8c 	bl	800a7e0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a0c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a0ca:	f000 f8f1 	bl	800a2b0 <prvIsQueueEmpty>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	f43f af4d 	beq.w	8009f70 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d00d      	beq.n	800a0f8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a0dc:	f001 fa62 	bl	800b5a4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a0e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a0e2:	f000 f811 	bl	800a108 <prvGetDisinheritPriorityAfterTimeout>
 800a0e6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a0e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ea:	689b      	ldr	r3, [r3, #8]
 800a0ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f001 f814 	bl	800b11c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a0f4:	f001 fa86 	bl	800b604 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a0f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3738      	adds	r7, #56	; 0x38
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}
 800a102:	bf00      	nop
 800a104:	e000ed04 	.word	0xe000ed04

0800a108 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a108:	b480      	push	{r7}
 800a10a:	b085      	sub	sp, #20
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a114:	2b00      	cmp	r3, #0
 800a116:	d006      	beq.n	800a126 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f1c3 0307 	rsb	r3, r3, #7
 800a122:	60fb      	str	r3, [r7, #12]
 800a124:	e001      	b.n	800a12a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a126:	2300      	movs	r3, #0
 800a128:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a12a:	68fb      	ldr	r3, [r7, #12]
	}
 800a12c:	4618      	mov	r0, r3
 800a12e:	3714      	adds	r7, #20
 800a130:	46bd      	mov	sp, r7
 800a132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a136:	4770      	bx	lr

0800a138 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b086      	sub	sp, #24
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	60f8      	str	r0, [r7, #12]
 800a140:	60b9      	str	r1, [r7, #8]
 800a142:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a144:	2300      	movs	r3, #0
 800a146:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a14c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a152:	2b00      	cmp	r3, #0
 800a154:	d10d      	bne.n	800a172 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d14d      	bne.n	800a1fa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	689b      	ldr	r3, [r3, #8]
 800a162:	4618      	mov	r0, r3
 800a164:	f000 ff54 	bl	800b010 <xTaskPriorityDisinherit>
 800a168:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	2200      	movs	r2, #0
 800a16e:	609a      	str	r2, [r3, #8]
 800a170:	e043      	b.n	800a1fa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d119      	bne.n	800a1ac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	6858      	ldr	r0, [r3, #4]
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a180:	461a      	mov	r2, r3
 800a182:	68b9      	ldr	r1, [r7, #8]
 800a184:	f001 fb54 	bl	800b830 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	685a      	ldr	r2, [r3, #4]
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a190:	441a      	add	r2, r3
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	685a      	ldr	r2, [r3, #4]
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	689b      	ldr	r3, [r3, #8]
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	d32b      	bcc.n	800a1fa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681a      	ldr	r2, [r3, #0]
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	605a      	str	r2, [r3, #4]
 800a1aa:	e026      	b.n	800a1fa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	68d8      	ldr	r0, [r3, #12]
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1b4:	461a      	mov	r2, r3
 800a1b6:	68b9      	ldr	r1, [r7, #8]
 800a1b8:	f001 fb3a 	bl	800b830 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	68da      	ldr	r2, [r3, #12]
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1c4:	425b      	negs	r3, r3
 800a1c6:	441a      	add	r2, r3
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	68da      	ldr	r2, [r3, #12]
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	d207      	bcs.n	800a1e8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	689a      	ldr	r2, [r3, #8]
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1e0:	425b      	negs	r3, r3
 800a1e2:	441a      	add	r2, r3
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2b02      	cmp	r3, #2
 800a1ec:	d105      	bne.n	800a1fa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a1ee:	693b      	ldr	r3, [r7, #16]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d002      	beq.n	800a1fa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	3b01      	subs	r3, #1
 800a1f8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a1fa:	693b      	ldr	r3, [r7, #16]
 800a1fc:	1c5a      	adds	r2, r3, #1
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a202:	697b      	ldr	r3, [r7, #20]
}
 800a204:	4618      	mov	r0, r3
 800a206:	3718      	adds	r7, #24
 800a208:	46bd      	mov	sp, r7
 800a20a:	bd80      	pop	{r7, pc}

0800a20c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b084      	sub	sp, #16
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a214:	f001 f9c6 	bl	800b5a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a21e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a220:	e011      	b.n	800a246 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a226:	2b00      	cmp	r3, #0
 800a228:	d012      	beq.n	800a250 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	3324      	adds	r3, #36	; 0x24
 800a22e:	4618      	mov	r0, r3
 800a230:	f000 fcba 	bl	800aba8 <xTaskRemoveFromEventList>
 800a234:	4603      	mov	r3, r0
 800a236:	2b00      	cmp	r3, #0
 800a238:	d001      	beq.n	800a23e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a23a:	f000 fd8f 	bl	800ad5c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a23e:	7bfb      	ldrb	r3, [r7, #15]
 800a240:	3b01      	subs	r3, #1
 800a242:	b2db      	uxtb	r3, r3
 800a244:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	dce9      	bgt.n	800a222 <prvUnlockQueue+0x16>
 800a24e:	e000      	b.n	800a252 <prvUnlockQueue+0x46>
					break;
 800a250:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	22ff      	movs	r2, #255	; 0xff
 800a256:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a25a:	f001 f9d3 	bl	800b604 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a25e:	f001 f9a1 	bl	800b5a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a268:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a26a:	e011      	b.n	800a290 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	691b      	ldr	r3, [r3, #16]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d012      	beq.n	800a29a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	3310      	adds	r3, #16
 800a278:	4618      	mov	r0, r3
 800a27a:	f000 fc95 	bl	800aba8 <xTaskRemoveFromEventList>
 800a27e:	4603      	mov	r3, r0
 800a280:	2b00      	cmp	r3, #0
 800a282:	d001      	beq.n	800a288 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a284:	f000 fd6a 	bl	800ad5c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a288:	7bbb      	ldrb	r3, [r7, #14]
 800a28a:	3b01      	subs	r3, #1
 800a28c:	b2db      	uxtb	r3, r3
 800a28e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a290:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a294:	2b00      	cmp	r3, #0
 800a296:	dce9      	bgt.n	800a26c <prvUnlockQueue+0x60>
 800a298:	e000      	b.n	800a29c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a29a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	22ff      	movs	r2, #255	; 0xff
 800a2a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a2a4:	f001 f9ae 	bl	800b604 <vPortExitCritical>
}
 800a2a8:	bf00      	nop
 800a2aa:	3710      	adds	r7, #16
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd80      	pop	{r7, pc}

0800a2b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b084      	sub	sp, #16
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a2b8:	f001 f974 	bl	800b5a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d102      	bne.n	800a2ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	60fb      	str	r3, [r7, #12]
 800a2c8:	e001      	b.n	800a2ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a2ce:	f001 f999 	bl	800b604 <vPortExitCritical>

	return xReturn;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	3710      	adds	r7, #16
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}

0800a2dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b084      	sub	sp, #16
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a2e4:	f001 f95e 	bl	800b5a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	d102      	bne.n	800a2fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	60fb      	str	r3, [r7, #12]
 800a2f8:	e001      	b.n	800a2fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a2fe:	f001 f981 	bl	800b604 <vPortExitCritical>

	return xReturn;
 800a302:	68fb      	ldr	r3, [r7, #12]
}
 800a304:	4618      	mov	r0, r3
 800a306:	3710      	adds	r7, #16
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}

0800a30c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b08e      	sub	sp, #56	; 0x38
 800a310:	af04      	add	r7, sp, #16
 800a312:	60f8      	str	r0, [r7, #12]
 800a314:	60b9      	str	r1, [r7, #8]
 800a316:	607a      	str	r2, [r7, #4]
 800a318:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a31a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d10a      	bne.n	800a336 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a320:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a324:	f383 8811 	msr	BASEPRI, r3
 800a328:	f3bf 8f6f 	isb	sy
 800a32c:	f3bf 8f4f 	dsb	sy
 800a330:	623b      	str	r3, [r7, #32]
}
 800a332:	bf00      	nop
 800a334:	e7fe      	b.n	800a334 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d10a      	bne.n	800a352 <xTaskCreateStatic+0x46>
	__asm volatile
 800a33c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a340:	f383 8811 	msr	BASEPRI, r3
 800a344:	f3bf 8f6f 	isb	sy
 800a348:	f3bf 8f4f 	dsb	sy
 800a34c:	61fb      	str	r3, [r7, #28]
}
 800a34e:	bf00      	nop
 800a350:	e7fe      	b.n	800a350 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a352:	2354      	movs	r3, #84	; 0x54
 800a354:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	2b54      	cmp	r3, #84	; 0x54
 800a35a:	d00a      	beq.n	800a372 <xTaskCreateStatic+0x66>
	__asm volatile
 800a35c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a360:	f383 8811 	msr	BASEPRI, r3
 800a364:	f3bf 8f6f 	isb	sy
 800a368:	f3bf 8f4f 	dsb	sy
 800a36c:	61bb      	str	r3, [r7, #24]
}
 800a36e:	bf00      	nop
 800a370:	e7fe      	b.n	800a370 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a372:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a376:	2b00      	cmp	r3, #0
 800a378:	d01a      	beq.n	800a3b0 <xTaskCreateStatic+0xa4>
 800a37a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d017      	beq.n	800a3b0 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a382:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a386:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a388:	631a      	str	r2, [r3, #48]	; 0x30
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a38a:	2300      	movs	r3, #0
 800a38c:	9303      	str	r3, [sp, #12]
 800a38e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a390:	9302      	str	r3, [sp, #8]
 800a392:	f107 0314 	add.w	r3, r7, #20
 800a396:	9301      	str	r3, [sp, #4]
 800a398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a39a:	9300      	str	r3, [sp, #0]
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	687a      	ldr	r2, [r7, #4]
 800a3a0:	68b9      	ldr	r1, [r7, #8]
 800a3a2:	68f8      	ldr	r0, [r7, #12]
 800a3a4:	f000 f80b 	bl	800a3be <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a3a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a3aa:	f000 f88f 	bl	800a4cc <prvAddNewTaskToReadyList>
 800a3ae:	e001      	b.n	800a3b4 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a3b4:	697b      	ldr	r3, [r7, #20]
	}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	3728      	adds	r7, #40	; 0x28
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}

0800a3be <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a3be:	b580      	push	{r7, lr}
 800a3c0:	b088      	sub	sp, #32
 800a3c2:	af00      	add	r7, sp, #0
 800a3c4:	60f8      	str	r0, [r7, #12]
 800a3c6:	60b9      	str	r1, [r7, #8]
 800a3c8:	607a      	str	r2, [r7, #4]
 800a3ca:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a3cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a3d6:	3b01      	subs	r3, #1
 800a3d8:	009b      	lsls	r3, r3, #2
 800a3da:	4413      	add	r3, r2
 800a3dc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a3de:	69bb      	ldr	r3, [r7, #24]
 800a3e0:	f023 0307 	bic.w	r3, r3, #7
 800a3e4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a3e6:	69bb      	ldr	r3, [r7, #24]
 800a3e8:	f003 0307 	and.w	r3, r3, #7
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d00a      	beq.n	800a406 <prvInitialiseNewTask+0x48>
	__asm volatile
 800a3f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3f4:	f383 8811 	msr	BASEPRI, r3
 800a3f8:	f3bf 8f6f 	isb	sy
 800a3fc:	f3bf 8f4f 	dsb	sy
 800a400:	617b      	str	r3, [r7, #20]
}
 800a402:	bf00      	nop
 800a404:	e7fe      	b.n	800a404 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d01f      	beq.n	800a44c <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a40c:	2300      	movs	r3, #0
 800a40e:	61fb      	str	r3, [r7, #28]
 800a410:	e012      	b.n	800a438 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a412:	68ba      	ldr	r2, [r7, #8]
 800a414:	69fb      	ldr	r3, [r7, #28]
 800a416:	4413      	add	r3, r2
 800a418:	7819      	ldrb	r1, [r3, #0]
 800a41a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a41c:	69fb      	ldr	r3, [r7, #28]
 800a41e:	4413      	add	r3, r2
 800a420:	3334      	adds	r3, #52	; 0x34
 800a422:	460a      	mov	r2, r1
 800a424:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a426:	68ba      	ldr	r2, [r7, #8]
 800a428:	69fb      	ldr	r3, [r7, #28]
 800a42a:	4413      	add	r3, r2
 800a42c:	781b      	ldrb	r3, [r3, #0]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d006      	beq.n	800a440 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a432:	69fb      	ldr	r3, [r7, #28]
 800a434:	3301      	adds	r3, #1
 800a436:	61fb      	str	r3, [r7, #28]
 800a438:	69fb      	ldr	r3, [r7, #28]
 800a43a:	2b0f      	cmp	r3, #15
 800a43c:	d9e9      	bls.n	800a412 <prvInitialiseNewTask+0x54>
 800a43e:	e000      	b.n	800a442 <prvInitialiseNewTask+0x84>
			{
				break;
 800a440:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a444:	2200      	movs	r2, #0
 800a446:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a44a:	e003      	b.n	800a454 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a44c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a44e:	2200      	movs	r2, #0
 800a450:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a456:	2b06      	cmp	r3, #6
 800a458:	d901      	bls.n	800a45e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a45a:	2306      	movs	r3, #6
 800a45c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a460:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a462:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a466:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a468:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a46a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a46c:	2200      	movs	r2, #0
 800a46e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a472:	3304      	adds	r3, #4
 800a474:	4618      	mov	r0, r3
 800a476:	f7ff f9eb 	bl	8009850 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a47c:	3318      	adds	r3, #24
 800a47e:	4618      	mov	r0, r3
 800a480:	f7ff f9e6 	bl	8009850 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a486:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a488:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a48a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a48c:	f1c3 0207 	rsb	r2, r3, #7
 800a490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a492:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a496:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a498:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a49a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a49c:	2200      	movs	r2, #0
 800a49e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a4a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a4a8:	683a      	ldr	r2, [r7, #0]
 800a4aa:	68f9      	ldr	r1, [r7, #12]
 800a4ac:	69b8      	ldr	r0, [r7, #24]
 800a4ae:	f000 ff49 	bl	800b344 <pxPortInitialiseStack>
 800a4b2:	4602      	mov	r2, r0
 800a4b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4b6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a4b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d002      	beq.n	800a4c4 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a4be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4c2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a4c4:	bf00      	nop
 800a4c6:	3720      	adds	r7, #32
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}

0800a4cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b082      	sub	sp, #8
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a4d4:	f001 f866 	bl	800b5a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a4d8:	4b2a      	ldr	r3, [pc, #168]	; (800a584 <prvAddNewTaskToReadyList+0xb8>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	3301      	adds	r3, #1
 800a4de:	4a29      	ldr	r2, [pc, #164]	; (800a584 <prvAddNewTaskToReadyList+0xb8>)
 800a4e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a4e2:	4b29      	ldr	r3, [pc, #164]	; (800a588 <prvAddNewTaskToReadyList+0xbc>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d109      	bne.n	800a4fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a4ea:	4a27      	ldr	r2, [pc, #156]	; (800a588 <prvAddNewTaskToReadyList+0xbc>)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a4f0:	4b24      	ldr	r3, [pc, #144]	; (800a584 <prvAddNewTaskToReadyList+0xb8>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	2b01      	cmp	r3, #1
 800a4f6:	d110      	bne.n	800a51a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a4f8:	f000 fc54 	bl	800ada4 <prvInitialiseTaskLists>
 800a4fc:	e00d      	b.n	800a51a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a4fe:	4b23      	ldr	r3, [pc, #140]	; (800a58c <prvAddNewTaskToReadyList+0xc0>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d109      	bne.n	800a51a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a506:	4b20      	ldr	r3, [pc, #128]	; (800a588 <prvAddNewTaskToReadyList+0xbc>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a510:	429a      	cmp	r2, r3
 800a512:	d802      	bhi.n	800a51a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a514:	4a1c      	ldr	r2, [pc, #112]	; (800a588 <prvAddNewTaskToReadyList+0xbc>)
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a51a:	4b1d      	ldr	r3, [pc, #116]	; (800a590 <prvAddNewTaskToReadyList+0xc4>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	3301      	adds	r3, #1
 800a520:	4a1b      	ldr	r2, [pc, #108]	; (800a590 <prvAddNewTaskToReadyList+0xc4>)
 800a522:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a528:	2201      	movs	r2, #1
 800a52a:	409a      	lsls	r2, r3
 800a52c:	4b19      	ldr	r3, [pc, #100]	; (800a594 <prvAddNewTaskToReadyList+0xc8>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	4313      	orrs	r3, r2
 800a532:	4a18      	ldr	r2, [pc, #96]	; (800a594 <prvAddNewTaskToReadyList+0xc8>)
 800a534:	6013      	str	r3, [r2, #0]
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a53a:	4613      	mov	r3, r2
 800a53c:	009b      	lsls	r3, r3, #2
 800a53e:	4413      	add	r3, r2
 800a540:	009b      	lsls	r3, r3, #2
 800a542:	4a15      	ldr	r2, [pc, #84]	; (800a598 <prvAddNewTaskToReadyList+0xcc>)
 800a544:	441a      	add	r2, r3
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	3304      	adds	r3, #4
 800a54a:	4619      	mov	r1, r3
 800a54c:	4610      	mov	r0, r2
 800a54e:	f7ff f98c 	bl	800986a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a552:	f001 f857 	bl	800b604 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a556:	4b0d      	ldr	r3, [pc, #52]	; (800a58c <prvAddNewTaskToReadyList+0xc0>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d00e      	beq.n	800a57c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a55e:	4b0a      	ldr	r3, [pc, #40]	; (800a588 <prvAddNewTaskToReadyList+0xbc>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a568:	429a      	cmp	r2, r3
 800a56a:	d207      	bcs.n	800a57c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a56c:	4b0b      	ldr	r3, [pc, #44]	; (800a59c <prvAddNewTaskToReadyList+0xd0>)
 800a56e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a572:	601a      	str	r2, [r3, #0]
 800a574:	f3bf 8f4f 	dsb	sy
 800a578:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a57c:	bf00      	nop
 800a57e:	3708      	adds	r7, #8
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}
 800a584:	200093d8 	.word	0x200093d8
 800a588:	200092d8 	.word	0x200092d8
 800a58c:	200093e4 	.word	0x200093e4
 800a590:	200093f4 	.word	0x200093f4
 800a594:	200093e0 	.word	0x200093e0
 800a598:	200092dc 	.word	0x200092dc
 800a59c:	e000ed04 	.word	0xe000ed04

0800a5a0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b08a      	sub	sp, #40	; 0x28
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
 800a5a8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d10a      	bne.n	800a5ca <vTaskDelayUntil+0x2a>
	__asm volatile
 800a5b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b8:	f383 8811 	msr	BASEPRI, r3
 800a5bc:	f3bf 8f6f 	isb	sy
 800a5c0:	f3bf 8f4f 	dsb	sy
 800a5c4:	617b      	str	r3, [r7, #20]
}
 800a5c6:	bf00      	nop
 800a5c8:	e7fe      	b.n	800a5c8 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d10a      	bne.n	800a5e6 <vTaskDelayUntil+0x46>
	__asm volatile
 800a5d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5d4:	f383 8811 	msr	BASEPRI, r3
 800a5d8:	f3bf 8f6f 	isb	sy
 800a5dc:	f3bf 8f4f 	dsb	sy
 800a5e0:	613b      	str	r3, [r7, #16]
}
 800a5e2:	bf00      	nop
 800a5e4:	e7fe      	b.n	800a5e4 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800a5e6:	4b2a      	ldr	r3, [pc, #168]	; (800a690 <vTaskDelayUntil+0xf0>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d00a      	beq.n	800a604 <vTaskDelayUntil+0x64>
	__asm volatile
 800a5ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5f2:	f383 8811 	msr	BASEPRI, r3
 800a5f6:	f3bf 8f6f 	isb	sy
 800a5fa:	f3bf 8f4f 	dsb	sy
 800a5fe:	60fb      	str	r3, [r7, #12]
}
 800a600:	bf00      	nop
 800a602:	e7fe      	b.n	800a602 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800a604:	f000 f8de 	bl	800a7c4 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800a608:	4b22      	ldr	r3, [pc, #136]	; (800a694 <vTaskDelayUntil+0xf4>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	683a      	ldr	r2, [r7, #0]
 800a614:	4413      	add	r3, r2
 800a616:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	6a3a      	ldr	r2, [r7, #32]
 800a61e:	429a      	cmp	r2, r3
 800a620:	d20b      	bcs.n	800a63a <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	69fa      	ldr	r2, [r7, #28]
 800a628:	429a      	cmp	r2, r3
 800a62a:	d211      	bcs.n	800a650 <vTaskDelayUntil+0xb0>
 800a62c:	69fa      	ldr	r2, [r7, #28]
 800a62e:	6a3b      	ldr	r3, [r7, #32]
 800a630:	429a      	cmp	r2, r3
 800a632:	d90d      	bls.n	800a650 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800a634:	2301      	movs	r3, #1
 800a636:	627b      	str	r3, [r7, #36]	; 0x24
 800a638:	e00a      	b.n	800a650 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	69fa      	ldr	r2, [r7, #28]
 800a640:	429a      	cmp	r2, r3
 800a642:	d303      	bcc.n	800a64c <vTaskDelayUntil+0xac>
 800a644:	69fa      	ldr	r2, [r7, #28]
 800a646:	6a3b      	ldr	r3, [r7, #32]
 800a648:	429a      	cmp	r2, r3
 800a64a:	d901      	bls.n	800a650 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800a64c:	2301      	movs	r3, #1
 800a64e:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	69fa      	ldr	r2, [r7, #28]
 800a654:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800a656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d006      	beq.n	800a66a <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800a65c:	69fa      	ldr	r2, [r7, #28]
 800a65e:	6a3b      	ldr	r3, [r7, #32]
 800a660:	1ad3      	subs	r3, r2, r3
 800a662:	2100      	movs	r1, #0
 800a664:	4618      	mov	r0, r3
 800a666:	f000 fe07 	bl	800b278 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800a66a:	f000 f8b9 	bl	800a7e0 <xTaskResumeAll>
 800a66e:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a670:	69bb      	ldr	r3, [r7, #24]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d107      	bne.n	800a686 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800a676:	4b08      	ldr	r3, [pc, #32]	; (800a698 <vTaskDelayUntil+0xf8>)
 800a678:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a67c:	601a      	str	r2, [r3, #0]
 800a67e:	f3bf 8f4f 	dsb	sy
 800a682:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a686:	bf00      	nop
 800a688:	3728      	adds	r7, #40	; 0x28
 800a68a:	46bd      	mov	sp, r7
 800a68c:	bd80      	pop	{r7, pc}
 800a68e:	bf00      	nop
 800a690:	20009400 	.word	0x20009400
 800a694:	200093dc 	.word	0x200093dc
 800a698:	e000ed04 	.word	0xe000ed04

0800a69c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b084      	sub	sp, #16
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d017      	beq.n	800a6de <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a6ae:	4b13      	ldr	r3, [pc, #76]	; (800a6fc <vTaskDelay+0x60>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d00a      	beq.n	800a6cc <vTaskDelay+0x30>
	__asm volatile
 800a6b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ba:	f383 8811 	msr	BASEPRI, r3
 800a6be:	f3bf 8f6f 	isb	sy
 800a6c2:	f3bf 8f4f 	dsb	sy
 800a6c6:	60bb      	str	r3, [r7, #8]
}
 800a6c8:	bf00      	nop
 800a6ca:	e7fe      	b.n	800a6ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a6cc:	f000 f87a 	bl	800a7c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a6d0:	2100      	movs	r1, #0
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f000 fdd0 	bl	800b278 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a6d8:	f000 f882 	bl	800a7e0 <xTaskResumeAll>
 800a6dc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d107      	bne.n	800a6f4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a6e4:	4b06      	ldr	r3, [pc, #24]	; (800a700 <vTaskDelay+0x64>)
 800a6e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6ea:	601a      	str	r2, [r3, #0]
 800a6ec:	f3bf 8f4f 	dsb	sy
 800a6f0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a6f4:	bf00      	nop
 800a6f6:	3710      	adds	r7, #16
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}
 800a6fc:	20009400 	.word	0x20009400
 800a700:	e000ed04 	.word	0xe000ed04

0800a704 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b08a      	sub	sp, #40	; 0x28
 800a708:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a70a:	2300      	movs	r3, #0
 800a70c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a70e:	2300      	movs	r3, #0
 800a710:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a712:	463a      	mov	r2, r7
 800a714:	1d39      	adds	r1, r7, #4
 800a716:	f107 0308 	add.w	r3, r7, #8
 800a71a:	4618      	mov	r0, r3
 800a71c:	f7f8 fd44 	bl	80031a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a720:	6839      	ldr	r1, [r7, #0]
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	68ba      	ldr	r2, [r7, #8]
 800a726:	9202      	str	r2, [sp, #8]
 800a728:	9301      	str	r3, [sp, #4]
 800a72a:	2300      	movs	r3, #0
 800a72c:	9300      	str	r3, [sp, #0]
 800a72e:	2300      	movs	r3, #0
 800a730:	460a      	mov	r2, r1
 800a732:	491e      	ldr	r1, [pc, #120]	; (800a7ac <vTaskStartScheduler+0xa8>)
 800a734:	481e      	ldr	r0, [pc, #120]	; (800a7b0 <vTaskStartScheduler+0xac>)
 800a736:	f7ff fde9 	bl	800a30c <xTaskCreateStatic>
 800a73a:	4603      	mov	r3, r0
 800a73c:	4a1d      	ldr	r2, [pc, #116]	; (800a7b4 <vTaskStartScheduler+0xb0>)
 800a73e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a740:	4b1c      	ldr	r3, [pc, #112]	; (800a7b4 <vTaskStartScheduler+0xb0>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d002      	beq.n	800a74e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a748:	2301      	movs	r3, #1
 800a74a:	617b      	str	r3, [r7, #20]
 800a74c:	e001      	b.n	800a752 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a74e:	2300      	movs	r3, #0
 800a750:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	2b01      	cmp	r3, #1
 800a756:	d116      	bne.n	800a786 <vTaskStartScheduler+0x82>
	__asm volatile
 800a758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a75c:	f383 8811 	msr	BASEPRI, r3
 800a760:	f3bf 8f6f 	isb	sy
 800a764:	f3bf 8f4f 	dsb	sy
 800a768:	613b      	str	r3, [r7, #16]
}
 800a76a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a76c:	4b12      	ldr	r3, [pc, #72]	; (800a7b8 <vTaskStartScheduler+0xb4>)
 800a76e:	f04f 32ff 	mov.w	r2, #4294967295
 800a772:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a774:	4b11      	ldr	r3, [pc, #68]	; (800a7bc <vTaskStartScheduler+0xb8>)
 800a776:	2201      	movs	r2, #1
 800a778:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a77a:	4b11      	ldr	r3, [pc, #68]	; (800a7c0 <vTaskStartScheduler+0xbc>)
 800a77c:	2200      	movs	r2, #0
 800a77e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a780:	f000 fe6e 	bl	800b460 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a784:	e00e      	b.n	800a7a4 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a786:	697b      	ldr	r3, [r7, #20]
 800a788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a78c:	d10a      	bne.n	800a7a4 <vTaskStartScheduler+0xa0>
	__asm volatile
 800a78e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a792:	f383 8811 	msr	BASEPRI, r3
 800a796:	f3bf 8f6f 	isb	sy
 800a79a:	f3bf 8f4f 	dsb	sy
 800a79e:	60fb      	str	r3, [r7, #12]
}
 800a7a0:	bf00      	nop
 800a7a2:	e7fe      	b.n	800a7a2 <vTaskStartScheduler+0x9e>
}
 800a7a4:	bf00      	nop
 800a7a6:	3718      	adds	r7, #24
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}
 800a7ac:	0800bac0 	.word	0x0800bac0
 800a7b0:	0800ad75 	.word	0x0800ad75
 800a7b4:	200093fc 	.word	0x200093fc
 800a7b8:	200093f8 	.word	0x200093f8
 800a7bc:	200093e4 	.word	0x200093e4
 800a7c0:	200093dc 	.word	0x200093dc

0800a7c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a7c8:	4b04      	ldr	r3, [pc, #16]	; (800a7dc <vTaskSuspendAll+0x18>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	3301      	adds	r3, #1
 800a7ce:	4a03      	ldr	r2, [pc, #12]	; (800a7dc <vTaskSuspendAll+0x18>)
 800a7d0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800a7d2:	bf00      	nop
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr
 800a7dc:	20009400 	.word	0x20009400

0800a7e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b084      	sub	sp, #16
 800a7e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a7ee:	4b41      	ldr	r3, [pc, #260]	; (800a8f4 <xTaskResumeAll+0x114>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d10a      	bne.n	800a80c <xTaskResumeAll+0x2c>
	__asm volatile
 800a7f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7fa:	f383 8811 	msr	BASEPRI, r3
 800a7fe:	f3bf 8f6f 	isb	sy
 800a802:	f3bf 8f4f 	dsb	sy
 800a806:	603b      	str	r3, [r7, #0]
}
 800a808:	bf00      	nop
 800a80a:	e7fe      	b.n	800a80a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a80c:	f000 feca 	bl	800b5a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a810:	4b38      	ldr	r3, [pc, #224]	; (800a8f4 <xTaskResumeAll+0x114>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	3b01      	subs	r3, #1
 800a816:	4a37      	ldr	r2, [pc, #220]	; (800a8f4 <xTaskResumeAll+0x114>)
 800a818:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a81a:	4b36      	ldr	r3, [pc, #216]	; (800a8f4 <xTaskResumeAll+0x114>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d161      	bne.n	800a8e6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a822:	4b35      	ldr	r3, [pc, #212]	; (800a8f8 <xTaskResumeAll+0x118>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d05d      	beq.n	800a8e6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a82a:	e02e      	b.n	800a88a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a82c:	4b33      	ldr	r3, [pc, #204]	; (800a8fc <xTaskResumeAll+0x11c>)
 800a82e:	68db      	ldr	r3, [r3, #12]
 800a830:	68db      	ldr	r3, [r3, #12]
 800a832:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	3318      	adds	r3, #24
 800a838:	4618      	mov	r0, r3
 800a83a:	f7ff f873 	bl	8009924 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	3304      	adds	r3, #4
 800a842:	4618      	mov	r0, r3
 800a844:	f7ff f86e 	bl	8009924 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a84c:	2201      	movs	r2, #1
 800a84e:	409a      	lsls	r2, r3
 800a850:	4b2b      	ldr	r3, [pc, #172]	; (800a900 <xTaskResumeAll+0x120>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	4313      	orrs	r3, r2
 800a856:	4a2a      	ldr	r2, [pc, #168]	; (800a900 <xTaskResumeAll+0x120>)
 800a858:	6013      	str	r3, [r2, #0]
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a85e:	4613      	mov	r3, r2
 800a860:	009b      	lsls	r3, r3, #2
 800a862:	4413      	add	r3, r2
 800a864:	009b      	lsls	r3, r3, #2
 800a866:	4a27      	ldr	r2, [pc, #156]	; (800a904 <xTaskResumeAll+0x124>)
 800a868:	441a      	add	r2, r3
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	3304      	adds	r3, #4
 800a86e:	4619      	mov	r1, r3
 800a870:	4610      	mov	r0, r2
 800a872:	f7fe fffa 	bl	800986a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a87a:	4b23      	ldr	r3, [pc, #140]	; (800a908 <xTaskResumeAll+0x128>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a880:	429a      	cmp	r2, r3
 800a882:	d302      	bcc.n	800a88a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800a884:	4b21      	ldr	r3, [pc, #132]	; (800a90c <xTaskResumeAll+0x12c>)
 800a886:	2201      	movs	r2, #1
 800a888:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a88a:	4b1c      	ldr	r3, [pc, #112]	; (800a8fc <xTaskResumeAll+0x11c>)
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d1cc      	bne.n	800a82c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d001      	beq.n	800a89c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a898:	f000 fafc 	bl	800ae94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a89c:	4b1c      	ldr	r3, [pc, #112]	; (800a910 <xTaskResumeAll+0x130>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d010      	beq.n	800a8ca <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a8a8:	f000 f846 	bl	800a938 <xTaskIncrementTick>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d002      	beq.n	800a8b8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800a8b2:	4b16      	ldr	r3, [pc, #88]	; (800a90c <xTaskResumeAll+0x12c>)
 800a8b4:	2201      	movs	r2, #1
 800a8b6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	3b01      	subs	r3, #1
 800a8bc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d1f1      	bne.n	800a8a8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800a8c4:	4b12      	ldr	r3, [pc, #72]	; (800a910 <xTaskResumeAll+0x130>)
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a8ca:	4b10      	ldr	r3, [pc, #64]	; (800a90c <xTaskResumeAll+0x12c>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d009      	beq.n	800a8e6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a8d6:	4b0f      	ldr	r3, [pc, #60]	; (800a914 <xTaskResumeAll+0x134>)
 800a8d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8dc:	601a      	str	r2, [r3, #0]
 800a8de:	f3bf 8f4f 	dsb	sy
 800a8e2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a8e6:	f000 fe8d 	bl	800b604 <vPortExitCritical>

	return xAlreadyYielded;
 800a8ea:	68bb      	ldr	r3, [r7, #8]
}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	3710      	adds	r7, #16
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}
 800a8f4:	20009400 	.word	0x20009400
 800a8f8:	200093d8 	.word	0x200093d8
 800a8fc:	20009398 	.word	0x20009398
 800a900:	200093e0 	.word	0x200093e0
 800a904:	200092dc 	.word	0x200092dc
 800a908:	200092d8 	.word	0x200092d8
 800a90c:	200093ec 	.word	0x200093ec
 800a910:	200093e8 	.word	0x200093e8
 800a914:	e000ed04 	.word	0xe000ed04

0800a918 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a918:	b480      	push	{r7}
 800a91a:	b083      	sub	sp, #12
 800a91c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a91e:	4b05      	ldr	r3, [pc, #20]	; (800a934 <xTaskGetTickCount+0x1c>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a924:	687b      	ldr	r3, [r7, #4]
}
 800a926:	4618      	mov	r0, r3
 800a928:	370c      	adds	r7, #12
 800a92a:	46bd      	mov	sp, r7
 800a92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a930:	4770      	bx	lr
 800a932:	bf00      	nop
 800a934:	200093dc 	.word	0x200093dc

0800a938 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b086      	sub	sp, #24
 800a93c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a93e:	2300      	movs	r3, #0
 800a940:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a942:	4b4e      	ldr	r3, [pc, #312]	; (800aa7c <xTaskIncrementTick+0x144>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	2b00      	cmp	r3, #0
 800a948:	f040 8088 	bne.w	800aa5c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a94c:	4b4c      	ldr	r3, [pc, #304]	; (800aa80 <xTaskIncrementTick+0x148>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	3301      	adds	r3, #1
 800a952:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a954:	4a4a      	ldr	r2, [pc, #296]	; (800aa80 <xTaskIncrementTick+0x148>)
 800a956:	693b      	ldr	r3, [r7, #16]
 800a958:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a95a:	693b      	ldr	r3, [r7, #16]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d120      	bne.n	800a9a2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a960:	4b48      	ldr	r3, [pc, #288]	; (800aa84 <xTaskIncrementTick+0x14c>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d00a      	beq.n	800a980 <xTaskIncrementTick+0x48>
	__asm volatile
 800a96a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a96e:	f383 8811 	msr	BASEPRI, r3
 800a972:	f3bf 8f6f 	isb	sy
 800a976:	f3bf 8f4f 	dsb	sy
 800a97a:	603b      	str	r3, [r7, #0]
}
 800a97c:	bf00      	nop
 800a97e:	e7fe      	b.n	800a97e <xTaskIncrementTick+0x46>
 800a980:	4b40      	ldr	r3, [pc, #256]	; (800aa84 <xTaskIncrementTick+0x14c>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	60fb      	str	r3, [r7, #12]
 800a986:	4b40      	ldr	r3, [pc, #256]	; (800aa88 <xTaskIncrementTick+0x150>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	4a3e      	ldr	r2, [pc, #248]	; (800aa84 <xTaskIncrementTick+0x14c>)
 800a98c:	6013      	str	r3, [r2, #0]
 800a98e:	4a3e      	ldr	r2, [pc, #248]	; (800aa88 <xTaskIncrementTick+0x150>)
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	6013      	str	r3, [r2, #0]
 800a994:	4b3d      	ldr	r3, [pc, #244]	; (800aa8c <xTaskIncrementTick+0x154>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	3301      	adds	r3, #1
 800a99a:	4a3c      	ldr	r2, [pc, #240]	; (800aa8c <xTaskIncrementTick+0x154>)
 800a99c:	6013      	str	r3, [r2, #0]
 800a99e:	f000 fa79 	bl	800ae94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a9a2:	4b3b      	ldr	r3, [pc, #236]	; (800aa90 <xTaskIncrementTick+0x158>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	693a      	ldr	r2, [r7, #16]
 800a9a8:	429a      	cmp	r2, r3
 800a9aa:	d348      	bcc.n	800aa3e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a9ac:	4b35      	ldr	r3, [pc, #212]	; (800aa84 <xTaskIncrementTick+0x14c>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d104      	bne.n	800a9c0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9b6:	4b36      	ldr	r3, [pc, #216]	; (800aa90 <xTaskIncrementTick+0x158>)
 800a9b8:	f04f 32ff 	mov.w	r2, #4294967295
 800a9bc:	601a      	str	r2, [r3, #0]
					break;
 800a9be:	e03e      	b.n	800aa3e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9c0:	4b30      	ldr	r3, [pc, #192]	; (800aa84 <xTaskIncrementTick+0x14c>)
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	68db      	ldr	r3, [r3, #12]
 800a9c6:	68db      	ldr	r3, [r3, #12]
 800a9c8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	685b      	ldr	r3, [r3, #4]
 800a9ce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a9d0:	693a      	ldr	r2, [r7, #16]
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	429a      	cmp	r2, r3
 800a9d6:	d203      	bcs.n	800a9e0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a9d8:	4a2d      	ldr	r2, [pc, #180]	; (800aa90 <xTaskIncrementTick+0x158>)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a9de:	e02e      	b.n	800aa3e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	3304      	adds	r3, #4
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	f7fe ff9d 	bl	8009924 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d004      	beq.n	800a9fc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	3318      	adds	r3, #24
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f7fe ff94 	bl	8009924 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa00:	2201      	movs	r2, #1
 800aa02:	409a      	lsls	r2, r3
 800aa04:	4b23      	ldr	r3, [pc, #140]	; (800aa94 <xTaskIncrementTick+0x15c>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	4313      	orrs	r3, r2
 800aa0a:	4a22      	ldr	r2, [pc, #136]	; (800aa94 <xTaskIncrementTick+0x15c>)
 800aa0c:	6013      	str	r3, [r2, #0]
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa12:	4613      	mov	r3, r2
 800aa14:	009b      	lsls	r3, r3, #2
 800aa16:	4413      	add	r3, r2
 800aa18:	009b      	lsls	r3, r3, #2
 800aa1a:	4a1f      	ldr	r2, [pc, #124]	; (800aa98 <xTaskIncrementTick+0x160>)
 800aa1c:	441a      	add	r2, r3
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	3304      	adds	r3, #4
 800aa22:	4619      	mov	r1, r3
 800aa24:	4610      	mov	r0, r2
 800aa26:	f7fe ff20 	bl	800986a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa2e:	4b1b      	ldr	r3, [pc, #108]	; (800aa9c <xTaskIncrementTick+0x164>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa34:	429a      	cmp	r2, r3
 800aa36:	d3b9      	bcc.n	800a9ac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800aa38:	2301      	movs	r3, #1
 800aa3a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa3c:	e7b6      	b.n	800a9ac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800aa3e:	4b17      	ldr	r3, [pc, #92]	; (800aa9c <xTaskIncrementTick+0x164>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa44:	4914      	ldr	r1, [pc, #80]	; (800aa98 <xTaskIncrementTick+0x160>)
 800aa46:	4613      	mov	r3, r2
 800aa48:	009b      	lsls	r3, r3, #2
 800aa4a:	4413      	add	r3, r2
 800aa4c:	009b      	lsls	r3, r3, #2
 800aa4e:	440b      	add	r3, r1
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	2b01      	cmp	r3, #1
 800aa54:	d907      	bls.n	800aa66 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800aa56:	2301      	movs	r3, #1
 800aa58:	617b      	str	r3, [r7, #20]
 800aa5a:	e004      	b.n	800aa66 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800aa5c:	4b10      	ldr	r3, [pc, #64]	; (800aaa0 <xTaskIncrementTick+0x168>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	3301      	adds	r3, #1
 800aa62:	4a0f      	ldr	r2, [pc, #60]	; (800aaa0 <xTaskIncrementTick+0x168>)
 800aa64:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800aa66:	4b0f      	ldr	r3, [pc, #60]	; (800aaa4 <xTaskIncrementTick+0x16c>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d001      	beq.n	800aa72 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800aa6e:	2301      	movs	r3, #1
 800aa70:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800aa72:	697b      	ldr	r3, [r7, #20]
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	3718      	adds	r7, #24
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}
 800aa7c:	20009400 	.word	0x20009400
 800aa80:	200093dc 	.word	0x200093dc
 800aa84:	20009390 	.word	0x20009390
 800aa88:	20009394 	.word	0x20009394
 800aa8c:	200093f0 	.word	0x200093f0
 800aa90:	200093f8 	.word	0x200093f8
 800aa94:	200093e0 	.word	0x200093e0
 800aa98:	200092dc 	.word	0x200092dc
 800aa9c:	200092d8 	.word	0x200092d8
 800aaa0:	200093e8 	.word	0x200093e8
 800aaa4:	200093ec 	.word	0x200093ec

0800aaa8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	b087      	sub	sp, #28
 800aaac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800aaae:	4b27      	ldr	r3, [pc, #156]	; (800ab4c <vTaskSwitchContext+0xa4>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d003      	beq.n	800aabe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800aab6:	4b26      	ldr	r3, [pc, #152]	; (800ab50 <vTaskSwitchContext+0xa8>)
 800aab8:	2201      	movs	r2, #1
 800aaba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800aabc:	e03f      	b.n	800ab3e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800aabe:	4b24      	ldr	r3, [pc, #144]	; (800ab50 <vTaskSwitchContext+0xa8>)
 800aac0:	2200      	movs	r2, #0
 800aac2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aac4:	4b23      	ldr	r3, [pc, #140]	; (800ab54 <vTaskSwitchContext+0xac>)
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	fab3 f383 	clz	r3, r3
 800aad0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800aad2:	7afb      	ldrb	r3, [r7, #11]
 800aad4:	f1c3 031f 	rsb	r3, r3, #31
 800aad8:	617b      	str	r3, [r7, #20]
 800aada:	491f      	ldr	r1, [pc, #124]	; (800ab58 <vTaskSwitchContext+0xb0>)
 800aadc:	697a      	ldr	r2, [r7, #20]
 800aade:	4613      	mov	r3, r2
 800aae0:	009b      	lsls	r3, r3, #2
 800aae2:	4413      	add	r3, r2
 800aae4:	009b      	lsls	r3, r3, #2
 800aae6:	440b      	add	r3, r1
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d10a      	bne.n	800ab04 <vTaskSwitchContext+0x5c>
	__asm volatile
 800aaee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf2:	f383 8811 	msr	BASEPRI, r3
 800aaf6:	f3bf 8f6f 	isb	sy
 800aafa:	f3bf 8f4f 	dsb	sy
 800aafe:	607b      	str	r3, [r7, #4]
}
 800ab00:	bf00      	nop
 800ab02:	e7fe      	b.n	800ab02 <vTaskSwitchContext+0x5a>
 800ab04:	697a      	ldr	r2, [r7, #20]
 800ab06:	4613      	mov	r3, r2
 800ab08:	009b      	lsls	r3, r3, #2
 800ab0a:	4413      	add	r3, r2
 800ab0c:	009b      	lsls	r3, r3, #2
 800ab0e:	4a12      	ldr	r2, [pc, #72]	; (800ab58 <vTaskSwitchContext+0xb0>)
 800ab10:	4413      	add	r3, r2
 800ab12:	613b      	str	r3, [r7, #16]
 800ab14:	693b      	ldr	r3, [r7, #16]
 800ab16:	685b      	ldr	r3, [r3, #4]
 800ab18:	685a      	ldr	r2, [r3, #4]
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	605a      	str	r2, [r3, #4]
 800ab1e:	693b      	ldr	r3, [r7, #16]
 800ab20:	685a      	ldr	r2, [r3, #4]
 800ab22:	693b      	ldr	r3, [r7, #16]
 800ab24:	3308      	adds	r3, #8
 800ab26:	429a      	cmp	r2, r3
 800ab28:	d104      	bne.n	800ab34 <vTaskSwitchContext+0x8c>
 800ab2a:	693b      	ldr	r3, [r7, #16]
 800ab2c:	685b      	ldr	r3, [r3, #4]
 800ab2e:	685a      	ldr	r2, [r3, #4]
 800ab30:	693b      	ldr	r3, [r7, #16]
 800ab32:	605a      	str	r2, [r3, #4]
 800ab34:	693b      	ldr	r3, [r7, #16]
 800ab36:	685b      	ldr	r3, [r3, #4]
 800ab38:	68db      	ldr	r3, [r3, #12]
 800ab3a:	4a08      	ldr	r2, [pc, #32]	; (800ab5c <vTaskSwitchContext+0xb4>)
 800ab3c:	6013      	str	r3, [r2, #0]
}
 800ab3e:	bf00      	nop
 800ab40:	371c      	adds	r7, #28
 800ab42:	46bd      	mov	sp, r7
 800ab44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab48:	4770      	bx	lr
 800ab4a:	bf00      	nop
 800ab4c:	20009400 	.word	0x20009400
 800ab50:	200093ec 	.word	0x200093ec
 800ab54:	200093e0 	.word	0x200093e0
 800ab58:	200092dc 	.word	0x200092dc
 800ab5c:	200092d8 	.word	0x200092d8

0800ab60 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b084      	sub	sp, #16
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
 800ab68:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d10a      	bne.n	800ab86 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ab70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab74:	f383 8811 	msr	BASEPRI, r3
 800ab78:	f3bf 8f6f 	isb	sy
 800ab7c:	f3bf 8f4f 	dsb	sy
 800ab80:	60fb      	str	r3, [r7, #12]
}
 800ab82:	bf00      	nop
 800ab84:	e7fe      	b.n	800ab84 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ab86:	4b07      	ldr	r3, [pc, #28]	; (800aba4 <vTaskPlaceOnEventList+0x44>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	3318      	adds	r3, #24
 800ab8c:	4619      	mov	r1, r3
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	f7fe fe8f 	bl	80098b2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ab94:	2101      	movs	r1, #1
 800ab96:	6838      	ldr	r0, [r7, #0]
 800ab98:	f000 fb6e 	bl	800b278 <prvAddCurrentTaskToDelayedList>
}
 800ab9c:	bf00      	nop
 800ab9e:	3710      	adds	r7, #16
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}
 800aba4:	200092d8 	.word	0x200092d8

0800aba8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b086      	sub	sp, #24
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	68db      	ldr	r3, [r3, #12]
 800abb4:	68db      	ldr	r3, [r3, #12]
 800abb6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800abb8:	693b      	ldr	r3, [r7, #16]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d10a      	bne.n	800abd4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800abbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc2:	f383 8811 	msr	BASEPRI, r3
 800abc6:	f3bf 8f6f 	isb	sy
 800abca:	f3bf 8f4f 	dsb	sy
 800abce:	60fb      	str	r3, [r7, #12]
}
 800abd0:	bf00      	nop
 800abd2:	e7fe      	b.n	800abd2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800abd4:	693b      	ldr	r3, [r7, #16]
 800abd6:	3318      	adds	r3, #24
 800abd8:	4618      	mov	r0, r3
 800abda:	f7fe fea3 	bl	8009924 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800abde:	4b1d      	ldr	r3, [pc, #116]	; (800ac54 <xTaskRemoveFromEventList+0xac>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d11c      	bne.n	800ac20 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800abe6:	693b      	ldr	r3, [r7, #16]
 800abe8:	3304      	adds	r3, #4
 800abea:	4618      	mov	r0, r3
 800abec:	f7fe fe9a 	bl	8009924 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800abf0:	693b      	ldr	r3, [r7, #16]
 800abf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abf4:	2201      	movs	r2, #1
 800abf6:	409a      	lsls	r2, r3
 800abf8:	4b17      	ldr	r3, [pc, #92]	; (800ac58 <xTaskRemoveFromEventList+0xb0>)
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	4313      	orrs	r3, r2
 800abfe:	4a16      	ldr	r2, [pc, #88]	; (800ac58 <xTaskRemoveFromEventList+0xb0>)
 800ac00:	6013      	str	r3, [r2, #0]
 800ac02:	693b      	ldr	r3, [r7, #16]
 800ac04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac06:	4613      	mov	r3, r2
 800ac08:	009b      	lsls	r3, r3, #2
 800ac0a:	4413      	add	r3, r2
 800ac0c:	009b      	lsls	r3, r3, #2
 800ac0e:	4a13      	ldr	r2, [pc, #76]	; (800ac5c <xTaskRemoveFromEventList+0xb4>)
 800ac10:	441a      	add	r2, r3
 800ac12:	693b      	ldr	r3, [r7, #16]
 800ac14:	3304      	adds	r3, #4
 800ac16:	4619      	mov	r1, r3
 800ac18:	4610      	mov	r0, r2
 800ac1a:	f7fe fe26 	bl	800986a <vListInsertEnd>
 800ac1e:	e005      	b.n	800ac2c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ac20:	693b      	ldr	r3, [r7, #16]
 800ac22:	3318      	adds	r3, #24
 800ac24:	4619      	mov	r1, r3
 800ac26:	480e      	ldr	r0, [pc, #56]	; (800ac60 <xTaskRemoveFromEventList+0xb8>)
 800ac28:	f7fe fe1f 	bl	800986a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ac2c:	693b      	ldr	r3, [r7, #16]
 800ac2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac30:	4b0c      	ldr	r3, [pc, #48]	; (800ac64 <xTaskRemoveFromEventList+0xbc>)
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac36:	429a      	cmp	r2, r3
 800ac38:	d905      	bls.n	800ac46 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ac3e:	4b0a      	ldr	r3, [pc, #40]	; (800ac68 <xTaskRemoveFromEventList+0xc0>)
 800ac40:	2201      	movs	r2, #1
 800ac42:	601a      	str	r2, [r3, #0]
 800ac44:	e001      	b.n	800ac4a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800ac46:	2300      	movs	r3, #0
 800ac48:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ac4a:	697b      	ldr	r3, [r7, #20]
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	3718      	adds	r7, #24
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}
 800ac54:	20009400 	.word	0x20009400
 800ac58:	200093e0 	.word	0x200093e0
 800ac5c:	200092dc 	.word	0x200092dc
 800ac60:	20009398 	.word	0x20009398
 800ac64:	200092d8 	.word	0x200092d8
 800ac68:	200093ec 	.word	0x200093ec

0800ac6c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	b083      	sub	sp, #12
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ac74:	4b06      	ldr	r3, [pc, #24]	; (800ac90 <vTaskInternalSetTimeOutState+0x24>)
 800ac76:	681a      	ldr	r2, [r3, #0]
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ac7c:	4b05      	ldr	r3, [pc, #20]	; (800ac94 <vTaskInternalSetTimeOutState+0x28>)
 800ac7e:	681a      	ldr	r2, [r3, #0]
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	605a      	str	r2, [r3, #4]
}
 800ac84:	bf00      	nop
 800ac86:	370c      	adds	r7, #12
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8e:	4770      	bx	lr
 800ac90:	200093f0 	.word	0x200093f0
 800ac94:	200093dc 	.word	0x200093dc

0800ac98 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b088      	sub	sp, #32
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
 800aca0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d10a      	bne.n	800acbe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800aca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acac:	f383 8811 	msr	BASEPRI, r3
 800acb0:	f3bf 8f6f 	isb	sy
 800acb4:	f3bf 8f4f 	dsb	sy
 800acb8:	613b      	str	r3, [r7, #16]
}
 800acba:	bf00      	nop
 800acbc:	e7fe      	b.n	800acbc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d10a      	bne.n	800acda <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800acc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acc8:	f383 8811 	msr	BASEPRI, r3
 800accc:	f3bf 8f6f 	isb	sy
 800acd0:	f3bf 8f4f 	dsb	sy
 800acd4:	60fb      	str	r3, [r7, #12]
}
 800acd6:	bf00      	nop
 800acd8:	e7fe      	b.n	800acd8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800acda:	f000 fc63 	bl	800b5a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800acde:	4b1d      	ldr	r3, [pc, #116]	; (800ad54 <xTaskCheckForTimeOut+0xbc>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	685b      	ldr	r3, [r3, #4]
 800ace8:	69ba      	ldr	r2, [r7, #24]
 800acea:	1ad3      	subs	r3, r2, r3
 800acec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acf6:	d102      	bne.n	800acfe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800acf8:	2300      	movs	r3, #0
 800acfa:	61fb      	str	r3, [r7, #28]
 800acfc:	e023      	b.n	800ad46 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681a      	ldr	r2, [r3, #0]
 800ad02:	4b15      	ldr	r3, [pc, #84]	; (800ad58 <xTaskCheckForTimeOut+0xc0>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	429a      	cmp	r2, r3
 800ad08:	d007      	beq.n	800ad1a <xTaskCheckForTimeOut+0x82>
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	685b      	ldr	r3, [r3, #4]
 800ad0e:	69ba      	ldr	r2, [r7, #24]
 800ad10:	429a      	cmp	r2, r3
 800ad12:	d302      	bcc.n	800ad1a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ad14:	2301      	movs	r3, #1
 800ad16:	61fb      	str	r3, [r7, #28]
 800ad18:	e015      	b.n	800ad46 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	697a      	ldr	r2, [r7, #20]
 800ad20:	429a      	cmp	r2, r3
 800ad22:	d20b      	bcs.n	800ad3c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	681a      	ldr	r2, [r3, #0]
 800ad28:	697b      	ldr	r3, [r7, #20]
 800ad2a:	1ad2      	subs	r2, r2, r3
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f7ff ff9b 	bl	800ac6c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ad36:	2300      	movs	r3, #0
 800ad38:	61fb      	str	r3, [r7, #28]
 800ad3a:	e004      	b.n	800ad46 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	2200      	movs	r2, #0
 800ad40:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ad42:	2301      	movs	r3, #1
 800ad44:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ad46:	f000 fc5d 	bl	800b604 <vPortExitCritical>

	return xReturn;
 800ad4a:	69fb      	ldr	r3, [r7, #28]
}
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	3720      	adds	r7, #32
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}
 800ad54:	200093dc 	.word	0x200093dc
 800ad58:	200093f0 	.word	0x200093f0

0800ad5c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ad60:	4b03      	ldr	r3, [pc, #12]	; (800ad70 <vTaskMissedYield+0x14>)
 800ad62:	2201      	movs	r2, #1
 800ad64:	601a      	str	r2, [r3, #0]
}
 800ad66:	bf00      	nop
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6e:	4770      	bx	lr
 800ad70:	200093ec 	.word	0x200093ec

0800ad74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b082      	sub	sp, #8
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ad7c:	f000 f852 	bl	800ae24 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ad80:	4b06      	ldr	r3, [pc, #24]	; (800ad9c <prvIdleTask+0x28>)
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	2b01      	cmp	r3, #1
 800ad86:	d9f9      	bls.n	800ad7c <prvIdleTask+0x8>
			{
				taskYIELD();
 800ad88:	4b05      	ldr	r3, [pc, #20]	; (800ada0 <prvIdleTask+0x2c>)
 800ad8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad8e:	601a      	str	r2, [r3, #0]
 800ad90:	f3bf 8f4f 	dsb	sy
 800ad94:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ad98:	e7f0      	b.n	800ad7c <prvIdleTask+0x8>
 800ad9a:	bf00      	nop
 800ad9c:	200092dc 	.word	0x200092dc
 800ada0:	e000ed04 	.word	0xe000ed04

0800ada4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b082      	sub	sp, #8
 800ada8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800adaa:	2300      	movs	r3, #0
 800adac:	607b      	str	r3, [r7, #4]
 800adae:	e00c      	b.n	800adca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800adb0:	687a      	ldr	r2, [r7, #4]
 800adb2:	4613      	mov	r3, r2
 800adb4:	009b      	lsls	r3, r3, #2
 800adb6:	4413      	add	r3, r2
 800adb8:	009b      	lsls	r3, r3, #2
 800adba:	4a12      	ldr	r2, [pc, #72]	; (800ae04 <prvInitialiseTaskLists+0x60>)
 800adbc:	4413      	add	r3, r2
 800adbe:	4618      	mov	r0, r3
 800adc0:	f7fe fd26 	bl	8009810 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	3301      	adds	r3, #1
 800adc8:	607b      	str	r3, [r7, #4]
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	2b06      	cmp	r3, #6
 800adce:	d9ef      	bls.n	800adb0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800add0:	480d      	ldr	r0, [pc, #52]	; (800ae08 <prvInitialiseTaskLists+0x64>)
 800add2:	f7fe fd1d 	bl	8009810 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800add6:	480d      	ldr	r0, [pc, #52]	; (800ae0c <prvInitialiseTaskLists+0x68>)
 800add8:	f7fe fd1a 	bl	8009810 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800addc:	480c      	ldr	r0, [pc, #48]	; (800ae10 <prvInitialiseTaskLists+0x6c>)
 800adde:	f7fe fd17 	bl	8009810 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ade2:	480c      	ldr	r0, [pc, #48]	; (800ae14 <prvInitialiseTaskLists+0x70>)
 800ade4:	f7fe fd14 	bl	8009810 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ade8:	480b      	ldr	r0, [pc, #44]	; (800ae18 <prvInitialiseTaskLists+0x74>)
 800adea:	f7fe fd11 	bl	8009810 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800adee:	4b0b      	ldr	r3, [pc, #44]	; (800ae1c <prvInitialiseTaskLists+0x78>)
 800adf0:	4a05      	ldr	r2, [pc, #20]	; (800ae08 <prvInitialiseTaskLists+0x64>)
 800adf2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800adf4:	4b0a      	ldr	r3, [pc, #40]	; (800ae20 <prvInitialiseTaskLists+0x7c>)
 800adf6:	4a05      	ldr	r2, [pc, #20]	; (800ae0c <prvInitialiseTaskLists+0x68>)
 800adf8:	601a      	str	r2, [r3, #0]
}
 800adfa:	bf00      	nop
 800adfc:	3708      	adds	r7, #8
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}
 800ae02:	bf00      	nop
 800ae04:	200092dc 	.word	0x200092dc
 800ae08:	20009368 	.word	0x20009368
 800ae0c:	2000937c 	.word	0x2000937c
 800ae10:	20009398 	.word	0x20009398
 800ae14:	200093ac 	.word	0x200093ac
 800ae18:	200093c4 	.word	0x200093c4
 800ae1c:	20009390 	.word	0x20009390
 800ae20:	20009394 	.word	0x20009394

0800ae24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b082      	sub	sp, #8
 800ae28:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ae2a:	e019      	b.n	800ae60 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ae2c:	f000 fbba 	bl	800b5a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae30:	4b10      	ldr	r3, [pc, #64]	; (800ae74 <prvCheckTasksWaitingTermination+0x50>)
 800ae32:	68db      	ldr	r3, [r3, #12]
 800ae34:	68db      	ldr	r3, [r3, #12]
 800ae36:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	3304      	adds	r3, #4
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	f7fe fd71 	bl	8009924 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ae42:	4b0d      	ldr	r3, [pc, #52]	; (800ae78 <prvCheckTasksWaitingTermination+0x54>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	3b01      	subs	r3, #1
 800ae48:	4a0b      	ldr	r2, [pc, #44]	; (800ae78 <prvCheckTasksWaitingTermination+0x54>)
 800ae4a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ae4c:	4b0b      	ldr	r3, [pc, #44]	; (800ae7c <prvCheckTasksWaitingTermination+0x58>)
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	3b01      	subs	r3, #1
 800ae52:	4a0a      	ldr	r2, [pc, #40]	; (800ae7c <prvCheckTasksWaitingTermination+0x58>)
 800ae54:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ae56:	f000 fbd5 	bl	800b604 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f000 f810 	bl	800ae80 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ae60:	4b06      	ldr	r3, [pc, #24]	; (800ae7c <prvCheckTasksWaitingTermination+0x58>)
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d1e1      	bne.n	800ae2c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ae68:	bf00      	nop
 800ae6a:	bf00      	nop
 800ae6c:	3708      	adds	r7, #8
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd80      	pop	{r7, pc}
 800ae72:	bf00      	nop
 800ae74:	200093ac 	.word	0x200093ac
 800ae78:	200093d8 	.word	0x200093d8
 800ae7c:	200093c0 	.word	0x200093c0

0800ae80 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ae80:	b480      	push	{r7}
 800ae82:	b083      	sub	sp, #12
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ae88:	bf00      	nop
 800ae8a:	370c      	adds	r7, #12
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae92:	4770      	bx	lr

0800ae94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ae94:	b480      	push	{r7}
 800ae96:	b083      	sub	sp, #12
 800ae98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ae9a:	4b0c      	ldr	r3, [pc, #48]	; (800aecc <prvResetNextTaskUnblockTime+0x38>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d104      	bne.n	800aeae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800aea4:	4b0a      	ldr	r3, [pc, #40]	; (800aed0 <prvResetNextTaskUnblockTime+0x3c>)
 800aea6:	f04f 32ff 	mov.w	r2, #4294967295
 800aeaa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aeac:	e008      	b.n	800aec0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aeae:	4b07      	ldr	r3, [pc, #28]	; (800aecc <prvResetNextTaskUnblockTime+0x38>)
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	68db      	ldr	r3, [r3, #12]
 800aeb4:	68db      	ldr	r3, [r3, #12]
 800aeb6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	685b      	ldr	r3, [r3, #4]
 800aebc:	4a04      	ldr	r2, [pc, #16]	; (800aed0 <prvResetNextTaskUnblockTime+0x3c>)
 800aebe:	6013      	str	r3, [r2, #0]
}
 800aec0:	bf00      	nop
 800aec2:	370c      	adds	r7, #12
 800aec4:	46bd      	mov	sp, r7
 800aec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeca:	4770      	bx	lr
 800aecc:	20009390 	.word	0x20009390
 800aed0:	200093f8 	.word	0x200093f8

0800aed4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800aed4:	b480      	push	{r7}
 800aed6:	b083      	sub	sp, #12
 800aed8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800aeda:	4b0b      	ldr	r3, [pc, #44]	; (800af08 <xTaskGetSchedulerState+0x34>)
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d102      	bne.n	800aee8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800aee2:	2301      	movs	r3, #1
 800aee4:	607b      	str	r3, [r7, #4]
 800aee6:	e008      	b.n	800aefa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aee8:	4b08      	ldr	r3, [pc, #32]	; (800af0c <xTaskGetSchedulerState+0x38>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d102      	bne.n	800aef6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800aef0:	2302      	movs	r3, #2
 800aef2:	607b      	str	r3, [r7, #4]
 800aef4:	e001      	b.n	800aefa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800aef6:	2300      	movs	r3, #0
 800aef8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800aefa:	687b      	ldr	r3, [r7, #4]
	}
 800aefc:	4618      	mov	r0, r3
 800aefe:	370c      	adds	r7, #12
 800af00:	46bd      	mov	sp, r7
 800af02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af06:	4770      	bx	lr
 800af08:	200093e4 	.word	0x200093e4
 800af0c:	20009400 	.word	0x20009400

0800af10 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800af10:	b580      	push	{r7, lr}
 800af12:	b084      	sub	sp, #16
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800af1c:	2300      	movs	r3, #0
 800af1e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d069      	beq.n	800affa <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800af26:	68bb      	ldr	r3, [r7, #8]
 800af28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af2a:	4b36      	ldr	r3, [pc, #216]	; (800b004 <xTaskPriorityInherit+0xf4>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af30:	429a      	cmp	r2, r3
 800af32:	d259      	bcs.n	800afe8 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800af34:	68bb      	ldr	r3, [r7, #8]
 800af36:	699b      	ldr	r3, [r3, #24]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	db06      	blt.n	800af4a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af3c:	4b31      	ldr	r3, [pc, #196]	; (800b004 <xTaskPriorityInherit+0xf4>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af42:	f1c3 0207 	rsb	r2, r3, #7
 800af46:	68bb      	ldr	r3, [r7, #8]
 800af48:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	6959      	ldr	r1, [r3, #20]
 800af4e:	68bb      	ldr	r3, [r7, #8]
 800af50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af52:	4613      	mov	r3, r2
 800af54:	009b      	lsls	r3, r3, #2
 800af56:	4413      	add	r3, r2
 800af58:	009b      	lsls	r3, r3, #2
 800af5a:	4a2b      	ldr	r2, [pc, #172]	; (800b008 <xTaskPriorityInherit+0xf8>)
 800af5c:	4413      	add	r3, r2
 800af5e:	4299      	cmp	r1, r3
 800af60:	d13a      	bne.n	800afd8 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800af62:	68bb      	ldr	r3, [r7, #8]
 800af64:	3304      	adds	r3, #4
 800af66:	4618      	mov	r0, r3
 800af68:	f7fe fcdc 	bl	8009924 <uxListRemove>
 800af6c:	4603      	mov	r3, r0
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d115      	bne.n	800af9e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800af72:	68bb      	ldr	r3, [r7, #8]
 800af74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af76:	4924      	ldr	r1, [pc, #144]	; (800b008 <xTaskPriorityInherit+0xf8>)
 800af78:	4613      	mov	r3, r2
 800af7a:	009b      	lsls	r3, r3, #2
 800af7c:	4413      	add	r3, r2
 800af7e:	009b      	lsls	r3, r3, #2
 800af80:	440b      	add	r3, r1
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d10a      	bne.n	800af9e <xTaskPriorityInherit+0x8e>
 800af88:	68bb      	ldr	r3, [r7, #8]
 800af8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af8c:	2201      	movs	r2, #1
 800af8e:	fa02 f303 	lsl.w	r3, r2, r3
 800af92:	43da      	mvns	r2, r3
 800af94:	4b1d      	ldr	r3, [pc, #116]	; (800b00c <xTaskPriorityInherit+0xfc>)
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	4013      	ands	r3, r2
 800af9a:	4a1c      	ldr	r2, [pc, #112]	; (800b00c <xTaskPriorityInherit+0xfc>)
 800af9c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800af9e:	4b19      	ldr	r3, [pc, #100]	; (800b004 <xTaskPriorityInherit+0xf4>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afa4:	68bb      	ldr	r3, [r7, #8]
 800afa6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afac:	2201      	movs	r2, #1
 800afae:	409a      	lsls	r2, r3
 800afb0:	4b16      	ldr	r3, [pc, #88]	; (800b00c <xTaskPriorityInherit+0xfc>)
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	4313      	orrs	r3, r2
 800afb6:	4a15      	ldr	r2, [pc, #84]	; (800b00c <xTaskPriorityInherit+0xfc>)
 800afb8:	6013      	str	r3, [r2, #0]
 800afba:	68bb      	ldr	r3, [r7, #8]
 800afbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afbe:	4613      	mov	r3, r2
 800afc0:	009b      	lsls	r3, r3, #2
 800afc2:	4413      	add	r3, r2
 800afc4:	009b      	lsls	r3, r3, #2
 800afc6:	4a10      	ldr	r2, [pc, #64]	; (800b008 <xTaskPriorityInherit+0xf8>)
 800afc8:	441a      	add	r2, r3
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	3304      	adds	r3, #4
 800afce:	4619      	mov	r1, r3
 800afd0:	4610      	mov	r0, r2
 800afd2:	f7fe fc4a 	bl	800986a <vListInsertEnd>
 800afd6:	e004      	b.n	800afe2 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800afd8:	4b0a      	ldr	r3, [pc, #40]	; (800b004 <xTaskPriorityInherit+0xf4>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800afe2:	2301      	movs	r3, #1
 800afe4:	60fb      	str	r3, [r7, #12]
 800afe6:	e008      	b.n	800affa <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800afec:	4b05      	ldr	r3, [pc, #20]	; (800b004 <xTaskPriorityInherit+0xf4>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aff2:	429a      	cmp	r2, r3
 800aff4:	d201      	bcs.n	800affa <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800aff6:	2301      	movs	r3, #1
 800aff8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800affa:	68fb      	ldr	r3, [r7, #12]
	}
 800affc:	4618      	mov	r0, r3
 800affe:	3710      	adds	r7, #16
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}
 800b004:	200092d8 	.word	0x200092d8
 800b008:	200092dc 	.word	0x200092dc
 800b00c:	200093e0 	.word	0x200093e0

0800b010 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b010:	b580      	push	{r7, lr}
 800b012:	b086      	sub	sp, #24
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b01c:	2300      	movs	r3, #0
 800b01e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d06e      	beq.n	800b104 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b026:	4b3a      	ldr	r3, [pc, #232]	; (800b110 <xTaskPriorityDisinherit+0x100>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	693a      	ldr	r2, [r7, #16]
 800b02c:	429a      	cmp	r2, r3
 800b02e:	d00a      	beq.n	800b046 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b030:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b034:	f383 8811 	msr	BASEPRI, r3
 800b038:	f3bf 8f6f 	isb	sy
 800b03c:	f3bf 8f4f 	dsb	sy
 800b040:	60fb      	str	r3, [r7, #12]
}
 800b042:	bf00      	nop
 800b044:	e7fe      	b.n	800b044 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b046:	693b      	ldr	r3, [r7, #16]
 800b048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d10a      	bne.n	800b064 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b04e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b052:	f383 8811 	msr	BASEPRI, r3
 800b056:	f3bf 8f6f 	isb	sy
 800b05a:	f3bf 8f4f 	dsb	sy
 800b05e:	60bb      	str	r3, [r7, #8]
}
 800b060:	bf00      	nop
 800b062:	e7fe      	b.n	800b062 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b064:	693b      	ldr	r3, [r7, #16]
 800b066:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b068:	1e5a      	subs	r2, r3, #1
 800b06a:	693b      	ldr	r3, [r7, #16]
 800b06c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b06e:	693b      	ldr	r3, [r7, #16]
 800b070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b072:	693b      	ldr	r3, [r7, #16]
 800b074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b076:	429a      	cmp	r2, r3
 800b078:	d044      	beq.n	800b104 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b07a:	693b      	ldr	r3, [r7, #16]
 800b07c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d140      	bne.n	800b104 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b082:	693b      	ldr	r3, [r7, #16]
 800b084:	3304      	adds	r3, #4
 800b086:	4618      	mov	r0, r3
 800b088:	f7fe fc4c 	bl	8009924 <uxListRemove>
 800b08c:	4603      	mov	r3, r0
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d115      	bne.n	800b0be <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b092:	693b      	ldr	r3, [r7, #16]
 800b094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b096:	491f      	ldr	r1, [pc, #124]	; (800b114 <xTaskPriorityDisinherit+0x104>)
 800b098:	4613      	mov	r3, r2
 800b09a:	009b      	lsls	r3, r3, #2
 800b09c:	4413      	add	r3, r2
 800b09e:	009b      	lsls	r3, r3, #2
 800b0a0:	440b      	add	r3, r1
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d10a      	bne.n	800b0be <xTaskPriorityDisinherit+0xae>
 800b0a8:	693b      	ldr	r3, [r7, #16]
 800b0aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0ac:	2201      	movs	r2, #1
 800b0ae:	fa02 f303 	lsl.w	r3, r2, r3
 800b0b2:	43da      	mvns	r2, r3
 800b0b4:	4b18      	ldr	r3, [pc, #96]	; (800b118 <xTaskPriorityDisinherit+0x108>)
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	4013      	ands	r3, r2
 800b0ba:	4a17      	ldr	r2, [pc, #92]	; (800b118 <xTaskPriorityDisinherit+0x108>)
 800b0bc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b0be:	693b      	ldr	r3, [r7, #16]
 800b0c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b0c2:	693b      	ldr	r3, [r7, #16]
 800b0c4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b0c6:	693b      	ldr	r3, [r7, #16]
 800b0c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0ca:	f1c3 0207 	rsb	r2, r3, #7
 800b0ce:	693b      	ldr	r3, [r7, #16]
 800b0d0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b0d2:	693b      	ldr	r3, [r7, #16]
 800b0d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0d6:	2201      	movs	r2, #1
 800b0d8:	409a      	lsls	r2, r3
 800b0da:	4b0f      	ldr	r3, [pc, #60]	; (800b118 <xTaskPriorityDisinherit+0x108>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	4313      	orrs	r3, r2
 800b0e0:	4a0d      	ldr	r2, [pc, #52]	; (800b118 <xTaskPriorityDisinherit+0x108>)
 800b0e2:	6013      	str	r3, [r2, #0]
 800b0e4:	693b      	ldr	r3, [r7, #16]
 800b0e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0e8:	4613      	mov	r3, r2
 800b0ea:	009b      	lsls	r3, r3, #2
 800b0ec:	4413      	add	r3, r2
 800b0ee:	009b      	lsls	r3, r3, #2
 800b0f0:	4a08      	ldr	r2, [pc, #32]	; (800b114 <xTaskPriorityDisinherit+0x104>)
 800b0f2:	441a      	add	r2, r3
 800b0f4:	693b      	ldr	r3, [r7, #16]
 800b0f6:	3304      	adds	r3, #4
 800b0f8:	4619      	mov	r1, r3
 800b0fa:	4610      	mov	r0, r2
 800b0fc:	f7fe fbb5 	bl	800986a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b100:	2301      	movs	r3, #1
 800b102:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b104:	697b      	ldr	r3, [r7, #20]
	}
 800b106:	4618      	mov	r0, r3
 800b108:	3718      	adds	r7, #24
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}
 800b10e:	bf00      	nop
 800b110:	200092d8 	.word	0x200092d8
 800b114:	200092dc 	.word	0x200092dc
 800b118:	200093e0 	.word	0x200093e0

0800b11c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b088      	sub	sp, #32
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
 800b124:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b12a:	2301      	movs	r3, #1
 800b12c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2b00      	cmp	r3, #0
 800b132:	f000 8083 	beq.w	800b23c <vTaskPriorityDisinheritAfterTimeout+0x120>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b136:	69bb      	ldr	r3, [r7, #24]
 800b138:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d10a      	bne.n	800b154 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800b13e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b142:	f383 8811 	msr	BASEPRI, r3
 800b146:	f3bf 8f6f 	isb	sy
 800b14a:	f3bf 8f4f 	dsb	sy
 800b14e:	60fb      	str	r3, [r7, #12]
}
 800b150:	bf00      	nop
 800b152:	e7fe      	b.n	800b152 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b154:	69bb      	ldr	r3, [r7, #24]
 800b156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b158:	683a      	ldr	r2, [r7, #0]
 800b15a:	429a      	cmp	r2, r3
 800b15c:	d902      	bls.n	800b164 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	61fb      	str	r3, [r7, #28]
 800b162:	e002      	b.n	800b16a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b164:	69bb      	ldr	r3, [r7, #24]
 800b166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b168:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b16a:	69bb      	ldr	r3, [r7, #24]
 800b16c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b16e:	69fa      	ldr	r2, [r7, #28]
 800b170:	429a      	cmp	r2, r3
 800b172:	d063      	beq.n	800b23c <vTaskPriorityDisinheritAfterTimeout+0x120>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b174:	69bb      	ldr	r3, [r7, #24]
 800b176:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b178:	697a      	ldr	r2, [r7, #20]
 800b17a:	429a      	cmp	r2, r3
 800b17c:	d15e      	bne.n	800b23c <vTaskPriorityDisinheritAfterTimeout+0x120>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b17e:	4b31      	ldr	r3, [pc, #196]	; (800b244 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	69ba      	ldr	r2, [r7, #24]
 800b184:	429a      	cmp	r2, r3
 800b186:	d10a      	bne.n	800b19e <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 800b188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b18c:	f383 8811 	msr	BASEPRI, r3
 800b190:	f3bf 8f6f 	isb	sy
 800b194:	f3bf 8f4f 	dsb	sy
 800b198:	60bb      	str	r3, [r7, #8]
}
 800b19a:	bf00      	nop
 800b19c:	e7fe      	b.n	800b19c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b19e:	69bb      	ldr	r3, [r7, #24]
 800b1a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1a2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b1a4:	69bb      	ldr	r3, [r7, #24]
 800b1a6:	69fa      	ldr	r2, [r7, #28]
 800b1a8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b1aa:	69bb      	ldr	r3, [r7, #24]
 800b1ac:	699b      	ldr	r3, [r3, #24]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	db04      	blt.n	800b1bc <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b1b2:	69fb      	ldr	r3, [r7, #28]
 800b1b4:	f1c3 0207 	rsb	r2, r3, #7
 800b1b8:	69bb      	ldr	r3, [r7, #24]
 800b1ba:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b1bc:	69bb      	ldr	r3, [r7, #24]
 800b1be:	6959      	ldr	r1, [r3, #20]
 800b1c0:	693a      	ldr	r2, [r7, #16]
 800b1c2:	4613      	mov	r3, r2
 800b1c4:	009b      	lsls	r3, r3, #2
 800b1c6:	4413      	add	r3, r2
 800b1c8:	009b      	lsls	r3, r3, #2
 800b1ca:	4a1f      	ldr	r2, [pc, #124]	; (800b248 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800b1cc:	4413      	add	r3, r2
 800b1ce:	4299      	cmp	r1, r3
 800b1d0:	d134      	bne.n	800b23c <vTaskPriorityDisinheritAfterTimeout+0x120>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b1d2:	69bb      	ldr	r3, [r7, #24]
 800b1d4:	3304      	adds	r3, #4
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f7fe fba4 	bl	8009924 <uxListRemove>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d115      	bne.n	800b20e <vTaskPriorityDisinheritAfterTimeout+0xf2>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b1e2:	69bb      	ldr	r3, [r7, #24]
 800b1e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1e6:	4918      	ldr	r1, [pc, #96]	; (800b248 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800b1e8:	4613      	mov	r3, r2
 800b1ea:	009b      	lsls	r3, r3, #2
 800b1ec:	4413      	add	r3, r2
 800b1ee:	009b      	lsls	r3, r3, #2
 800b1f0:	440b      	add	r3, r1
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d10a      	bne.n	800b20e <vTaskPriorityDisinheritAfterTimeout+0xf2>
 800b1f8:	69bb      	ldr	r3, [r7, #24]
 800b1fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1fc:	2201      	movs	r2, #1
 800b1fe:	fa02 f303 	lsl.w	r3, r2, r3
 800b202:	43da      	mvns	r2, r3
 800b204:	4b11      	ldr	r3, [pc, #68]	; (800b24c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	4013      	ands	r3, r2
 800b20a:	4a10      	ldr	r2, [pc, #64]	; (800b24c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800b20c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b20e:	69bb      	ldr	r3, [r7, #24]
 800b210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b212:	2201      	movs	r2, #1
 800b214:	409a      	lsls	r2, r3
 800b216:	4b0d      	ldr	r3, [pc, #52]	; (800b24c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	4313      	orrs	r3, r2
 800b21c:	4a0b      	ldr	r2, [pc, #44]	; (800b24c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800b21e:	6013      	str	r3, [r2, #0]
 800b220:	69bb      	ldr	r3, [r7, #24]
 800b222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b224:	4613      	mov	r3, r2
 800b226:	009b      	lsls	r3, r3, #2
 800b228:	4413      	add	r3, r2
 800b22a:	009b      	lsls	r3, r3, #2
 800b22c:	4a06      	ldr	r2, [pc, #24]	; (800b248 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800b22e:	441a      	add	r2, r3
 800b230:	69bb      	ldr	r3, [r7, #24]
 800b232:	3304      	adds	r3, #4
 800b234:	4619      	mov	r1, r3
 800b236:	4610      	mov	r0, r2
 800b238:	f7fe fb17 	bl	800986a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b23c:	bf00      	nop
 800b23e:	3720      	adds	r7, #32
 800b240:	46bd      	mov	sp, r7
 800b242:	bd80      	pop	{r7, pc}
 800b244:	200092d8 	.word	0x200092d8
 800b248:	200092dc 	.word	0x200092dc
 800b24c:	200093e0 	.word	0x200093e0

0800b250 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b250:	b480      	push	{r7}
 800b252:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b254:	4b07      	ldr	r3, [pc, #28]	; (800b274 <pvTaskIncrementMutexHeldCount+0x24>)
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d004      	beq.n	800b266 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b25c:	4b05      	ldr	r3, [pc, #20]	; (800b274 <pvTaskIncrementMutexHeldCount+0x24>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b262:	3201      	adds	r2, #1
 800b264:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800b266:	4b03      	ldr	r3, [pc, #12]	; (800b274 <pvTaskIncrementMutexHeldCount+0x24>)
 800b268:	681b      	ldr	r3, [r3, #0]
	}
 800b26a:	4618      	mov	r0, r3
 800b26c:	46bd      	mov	sp, r7
 800b26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b272:	4770      	bx	lr
 800b274:	200092d8 	.word	0x200092d8

0800b278 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b084      	sub	sp, #16
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
 800b280:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b282:	4b29      	ldr	r3, [pc, #164]	; (800b328 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b288:	4b28      	ldr	r3, [pc, #160]	; (800b32c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	3304      	adds	r3, #4
 800b28e:	4618      	mov	r0, r3
 800b290:	f7fe fb48 	bl	8009924 <uxListRemove>
 800b294:	4603      	mov	r3, r0
 800b296:	2b00      	cmp	r3, #0
 800b298:	d10b      	bne.n	800b2b2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b29a:	4b24      	ldr	r3, [pc, #144]	; (800b32c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2a0:	2201      	movs	r2, #1
 800b2a2:	fa02 f303 	lsl.w	r3, r2, r3
 800b2a6:	43da      	mvns	r2, r3
 800b2a8:	4b21      	ldr	r3, [pc, #132]	; (800b330 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	4013      	ands	r3, r2
 800b2ae:	4a20      	ldr	r2, [pc, #128]	; (800b330 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b2b0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2b8:	d10a      	bne.n	800b2d0 <prvAddCurrentTaskToDelayedList+0x58>
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d007      	beq.n	800b2d0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b2c0:	4b1a      	ldr	r3, [pc, #104]	; (800b32c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	3304      	adds	r3, #4
 800b2c6:	4619      	mov	r1, r3
 800b2c8:	481a      	ldr	r0, [pc, #104]	; (800b334 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b2ca:	f7fe face 	bl	800986a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b2ce:	e026      	b.n	800b31e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b2d0:	68fa      	ldr	r2, [r7, #12]
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	4413      	add	r3, r2
 800b2d6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b2d8:	4b14      	ldr	r3, [pc, #80]	; (800b32c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	68ba      	ldr	r2, [r7, #8]
 800b2de:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b2e0:	68ba      	ldr	r2, [r7, #8]
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	429a      	cmp	r2, r3
 800b2e6:	d209      	bcs.n	800b2fc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b2e8:	4b13      	ldr	r3, [pc, #76]	; (800b338 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b2ea:	681a      	ldr	r2, [r3, #0]
 800b2ec:	4b0f      	ldr	r3, [pc, #60]	; (800b32c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	3304      	adds	r3, #4
 800b2f2:	4619      	mov	r1, r3
 800b2f4:	4610      	mov	r0, r2
 800b2f6:	f7fe fadc 	bl	80098b2 <vListInsert>
}
 800b2fa:	e010      	b.n	800b31e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b2fc:	4b0f      	ldr	r3, [pc, #60]	; (800b33c <prvAddCurrentTaskToDelayedList+0xc4>)
 800b2fe:	681a      	ldr	r2, [r3, #0]
 800b300:	4b0a      	ldr	r3, [pc, #40]	; (800b32c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	3304      	adds	r3, #4
 800b306:	4619      	mov	r1, r3
 800b308:	4610      	mov	r0, r2
 800b30a:	f7fe fad2 	bl	80098b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b30e:	4b0c      	ldr	r3, [pc, #48]	; (800b340 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	68ba      	ldr	r2, [r7, #8]
 800b314:	429a      	cmp	r2, r3
 800b316:	d202      	bcs.n	800b31e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b318:	4a09      	ldr	r2, [pc, #36]	; (800b340 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b31a:	68bb      	ldr	r3, [r7, #8]
 800b31c:	6013      	str	r3, [r2, #0]
}
 800b31e:	bf00      	nop
 800b320:	3710      	adds	r7, #16
 800b322:	46bd      	mov	sp, r7
 800b324:	bd80      	pop	{r7, pc}
 800b326:	bf00      	nop
 800b328:	200093dc 	.word	0x200093dc
 800b32c:	200092d8 	.word	0x200092d8
 800b330:	200093e0 	.word	0x200093e0
 800b334:	200093c4 	.word	0x200093c4
 800b338:	20009394 	.word	0x20009394
 800b33c:	20009390 	.word	0x20009390
 800b340:	200093f8 	.word	0x200093f8

0800b344 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b344:	b480      	push	{r7}
 800b346:	b085      	sub	sp, #20
 800b348:	af00      	add	r7, sp, #0
 800b34a:	60f8      	str	r0, [r7, #12]
 800b34c:	60b9      	str	r1, [r7, #8]
 800b34e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	3b04      	subs	r3, #4
 800b354:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b35c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	3b04      	subs	r3, #4
 800b362:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b364:	68bb      	ldr	r3, [r7, #8]
 800b366:	f023 0201 	bic.w	r2, r3, #1
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	3b04      	subs	r3, #4
 800b372:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b374:	4a0c      	ldr	r2, [pc, #48]	; (800b3a8 <pxPortInitialiseStack+0x64>)
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	3b14      	subs	r3, #20
 800b37e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b380:	687a      	ldr	r2, [r7, #4]
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	3b04      	subs	r3, #4
 800b38a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	f06f 0202 	mvn.w	r2, #2
 800b392:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	3b20      	subs	r3, #32
 800b398:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b39a:	68fb      	ldr	r3, [r7, #12]
}
 800b39c:	4618      	mov	r0, r3
 800b39e:	3714      	adds	r7, #20
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a6:	4770      	bx	lr
 800b3a8:	0800b3ad 	.word	0x0800b3ad

0800b3ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b3ac:	b480      	push	{r7}
 800b3ae:	b085      	sub	sp, #20
 800b3b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b3b6:	4b12      	ldr	r3, [pc, #72]	; (800b400 <prvTaskExitError+0x54>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3be:	d00a      	beq.n	800b3d6 <prvTaskExitError+0x2a>
	__asm volatile
 800b3c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3c4:	f383 8811 	msr	BASEPRI, r3
 800b3c8:	f3bf 8f6f 	isb	sy
 800b3cc:	f3bf 8f4f 	dsb	sy
 800b3d0:	60fb      	str	r3, [r7, #12]
}
 800b3d2:	bf00      	nop
 800b3d4:	e7fe      	b.n	800b3d4 <prvTaskExitError+0x28>
	__asm volatile
 800b3d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3da:	f383 8811 	msr	BASEPRI, r3
 800b3de:	f3bf 8f6f 	isb	sy
 800b3e2:	f3bf 8f4f 	dsb	sy
 800b3e6:	60bb      	str	r3, [r7, #8]
}
 800b3e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b3ea:	bf00      	nop
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d0fc      	beq.n	800b3ec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b3f2:	bf00      	nop
 800b3f4:	bf00      	nop
 800b3f6:	3714      	adds	r7, #20
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fe:	4770      	bx	lr
 800b400:	2000006c 	.word	0x2000006c
	...

0800b410 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b410:	4b07      	ldr	r3, [pc, #28]	; (800b430 <pxCurrentTCBConst2>)
 800b412:	6819      	ldr	r1, [r3, #0]
 800b414:	6808      	ldr	r0, [r1, #0]
 800b416:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b41a:	f380 8809 	msr	PSP, r0
 800b41e:	f3bf 8f6f 	isb	sy
 800b422:	f04f 0000 	mov.w	r0, #0
 800b426:	f380 8811 	msr	BASEPRI, r0
 800b42a:	4770      	bx	lr
 800b42c:	f3af 8000 	nop.w

0800b430 <pxCurrentTCBConst2>:
 800b430:	200092d8 	.word	0x200092d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b434:	bf00      	nop
 800b436:	bf00      	nop

0800b438 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b438:	4808      	ldr	r0, [pc, #32]	; (800b45c <prvPortStartFirstTask+0x24>)
 800b43a:	6800      	ldr	r0, [r0, #0]
 800b43c:	6800      	ldr	r0, [r0, #0]
 800b43e:	f380 8808 	msr	MSP, r0
 800b442:	f04f 0000 	mov.w	r0, #0
 800b446:	f380 8814 	msr	CONTROL, r0
 800b44a:	b662      	cpsie	i
 800b44c:	b661      	cpsie	f
 800b44e:	f3bf 8f4f 	dsb	sy
 800b452:	f3bf 8f6f 	isb	sy
 800b456:	df00      	svc	0
 800b458:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b45a:	bf00      	nop
 800b45c:	e000ed08 	.word	0xe000ed08

0800b460 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b086      	sub	sp, #24
 800b464:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b466:	4b46      	ldr	r3, [pc, #280]	; (800b580 <xPortStartScheduler+0x120>)
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	4a46      	ldr	r2, [pc, #280]	; (800b584 <xPortStartScheduler+0x124>)
 800b46c:	4293      	cmp	r3, r2
 800b46e:	d10a      	bne.n	800b486 <xPortStartScheduler+0x26>
	__asm volatile
 800b470:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b474:	f383 8811 	msr	BASEPRI, r3
 800b478:	f3bf 8f6f 	isb	sy
 800b47c:	f3bf 8f4f 	dsb	sy
 800b480:	613b      	str	r3, [r7, #16]
}
 800b482:	bf00      	nop
 800b484:	e7fe      	b.n	800b484 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b486:	4b3e      	ldr	r3, [pc, #248]	; (800b580 <xPortStartScheduler+0x120>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	4a3f      	ldr	r2, [pc, #252]	; (800b588 <xPortStartScheduler+0x128>)
 800b48c:	4293      	cmp	r3, r2
 800b48e:	d10a      	bne.n	800b4a6 <xPortStartScheduler+0x46>
	__asm volatile
 800b490:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b494:	f383 8811 	msr	BASEPRI, r3
 800b498:	f3bf 8f6f 	isb	sy
 800b49c:	f3bf 8f4f 	dsb	sy
 800b4a0:	60fb      	str	r3, [r7, #12]
}
 800b4a2:	bf00      	nop
 800b4a4:	e7fe      	b.n	800b4a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b4a6:	4b39      	ldr	r3, [pc, #228]	; (800b58c <xPortStartScheduler+0x12c>)
 800b4a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b4aa:	697b      	ldr	r3, [r7, #20]
 800b4ac:	781b      	ldrb	r3, [r3, #0]
 800b4ae:	b2db      	uxtb	r3, r3
 800b4b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	22ff      	movs	r2, #255	; 0xff
 800b4b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b4b8:	697b      	ldr	r3, [r7, #20]
 800b4ba:	781b      	ldrb	r3, [r3, #0]
 800b4bc:	b2db      	uxtb	r3, r3
 800b4be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b4c0:	78fb      	ldrb	r3, [r7, #3]
 800b4c2:	b2db      	uxtb	r3, r3
 800b4c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b4c8:	b2da      	uxtb	r2, r3
 800b4ca:	4b31      	ldr	r3, [pc, #196]	; (800b590 <xPortStartScheduler+0x130>)
 800b4cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b4ce:	4b31      	ldr	r3, [pc, #196]	; (800b594 <xPortStartScheduler+0x134>)
 800b4d0:	2207      	movs	r2, #7
 800b4d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b4d4:	e009      	b.n	800b4ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b4d6:	4b2f      	ldr	r3, [pc, #188]	; (800b594 <xPortStartScheduler+0x134>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	3b01      	subs	r3, #1
 800b4dc:	4a2d      	ldr	r2, [pc, #180]	; (800b594 <xPortStartScheduler+0x134>)
 800b4de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b4e0:	78fb      	ldrb	r3, [r7, #3]
 800b4e2:	b2db      	uxtb	r3, r3
 800b4e4:	005b      	lsls	r3, r3, #1
 800b4e6:	b2db      	uxtb	r3, r3
 800b4e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b4ea:	78fb      	ldrb	r3, [r7, #3]
 800b4ec:	b2db      	uxtb	r3, r3
 800b4ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4f2:	2b80      	cmp	r3, #128	; 0x80
 800b4f4:	d0ef      	beq.n	800b4d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b4f6:	4b27      	ldr	r3, [pc, #156]	; (800b594 <xPortStartScheduler+0x134>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	f1c3 0307 	rsb	r3, r3, #7
 800b4fe:	2b04      	cmp	r3, #4
 800b500:	d00a      	beq.n	800b518 <xPortStartScheduler+0xb8>
	__asm volatile
 800b502:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b506:	f383 8811 	msr	BASEPRI, r3
 800b50a:	f3bf 8f6f 	isb	sy
 800b50e:	f3bf 8f4f 	dsb	sy
 800b512:	60bb      	str	r3, [r7, #8]
}
 800b514:	bf00      	nop
 800b516:	e7fe      	b.n	800b516 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b518:	4b1e      	ldr	r3, [pc, #120]	; (800b594 <xPortStartScheduler+0x134>)
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	021b      	lsls	r3, r3, #8
 800b51e:	4a1d      	ldr	r2, [pc, #116]	; (800b594 <xPortStartScheduler+0x134>)
 800b520:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b522:	4b1c      	ldr	r3, [pc, #112]	; (800b594 <xPortStartScheduler+0x134>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b52a:	4a1a      	ldr	r2, [pc, #104]	; (800b594 <xPortStartScheduler+0x134>)
 800b52c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	b2da      	uxtb	r2, r3
 800b532:	697b      	ldr	r3, [r7, #20]
 800b534:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b536:	4b18      	ldr	r3, [pc, #96]	; (800b598 <xPortStartScheduler+0x138>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	4a17      	ldr	r2, [pc, #92]	; (800b598 <xPortStartScheduler+0x138>)
 800b53c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b540:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b542:	4b15      	ldr	r3, [pc, #84]	; (800b598 <xPortStartScheduler+0x138>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	4a14      	ldr	r2, [pc, #80]	; (800b598 <xPortStartScheduler+0x138>)
 800b548:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b54c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b54e:	f000 f8dd 	bl	800b70c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b552:	4b12      	ldr	r3, [pc, #72]	; (800b59c <xPortStartScheduler+0x13c>)
 800b554:	2200      	movs	r2, #0
 800b556:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b558:	f000 f8fc 	bl	800b754 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b55c:	4b10      	ldr	r3, [pc, #64]	; (800b5a0 <xPortStartScheduler+0x140>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	4a0f      	ldr	r2, [pc, #60]	; (800b5a0 <xPortStartScheduler+0x140>)
 800b562:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b566:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b568:	f7ff ff66 	bl	800b438 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b56c:	f7ff fa9c 	bl	800aaa8 <vTaskSwitchContext>
	prvTaskExitError();
 800b570:	f7ff ff1c 	bl	800b3ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b574:	2300      	movs	r3, #0
}
 800b576:	4618      	mov	r0, r3
 800b578:	3718      	adds	r7, #24
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}
 800b57e:	bf00      	nop
 800b580:	e000ed00 	.word	0xe000ed00
 800b584:	410fc271 	.word	0x410fc271
 800b588:	410fc270 	.word	0x410fc270
 800b58c:	e000e400 	.word	0xe000e400
 800b590:	20009404 	.word	0x20009404
 800b594:	20009408 	.word	0x20009408
 800b598:	e000ed20 	.word	0xe000ed20
 800b59c:	2000006c 	.word	0x2000006c
 800b5a0:	e000ef34 	.word	0xe000ef34

0800b5a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b5a4:	b480      	push	{r7}
 800b5a6:	b083      	sub	sp, #12
 800b5a8:	af00      	add	r7, sp, #0
	__asm volatile
 800b5aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ae:	f383 8811 	msr	BASEPRI, r3
 800b5b2:	f3bf 8f6f 	isb	sy
 800b5b6:	f3bf 8f4f 	dsb	sy
 800b5ba:	607b      	str	r3, [r7, #4]
}
 800b5bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b5be:	4b0f      	ldr	r3, [pc, #60]	; (800b5fc <vPortEnterCritical+0x58>)
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	3301      	adds	r3, #1
 800b5c4:	4a0d      	ldr	r2, [pc, #52]	; (800b5fc <vPortEnterCritical+0x58>)
 800b5c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b5c8:	4b0c      	ldr	r3, [pc, #48]	; (800b5fc <vPortEnterCritical+0x58>)
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	2b01      	cmp	r3, #1
 800b5ce:	d10f      	bne.n	800b5f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b5d0:	4b0b      	ldr	r3, [pc, #44]	; (800b600 <vPortEnterCritical+0x5c>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	b2db      	uxtb	r3, r3
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d00a      	beq.n	800b5f0 <vPortEnterCritical+0x4c>
	__asm volatile
 800b5da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5de:	f383 8811 	msr	BASEPRI, r3
 800b5e2:	f3bf 8f6f 	isb	sy
 800b5e6:	f3bf 8f4f 	dsb	sy
 800b5ea:	603b      	str	r3, [r7, #0]
}
 800b5ec:	bf00      	nop
 800b5ee:	e7fe      	b.n	800b5ee <vPortEnterCritical+0x4a>
	}
}
 800b5f0:	bf00      	nop
 800b5f2:	370c      	adds	r7, #12
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fa:	4770      	bx	lr
 800b5fc:	2000006c 	.word	0x2000006c
 800b600:	e000ed04 	.word	0xe000ed04

0800b604 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b604:	b480      	push	{r7}
 800b606:	b083      	sub	sp, #12
 800b608:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b60a:	4b12      	ldr	r3, [pc, #72]	; (800b654 <vPortExitCritical+0x50>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d10a      	bne.n	800b628 <vPortExitCritical+0x24>
	__asm volatile
 800b612:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b616:	f383 8811 	msr	BASEPRI, r3
 800b61a:	f3bf 8f6f 	isb	sy
 800b61e:	f3bf 8f4f 	dsb	sy
 800b622:	607b      	str	r3, [r7, #4]
}
 800b624:	bf00      	nop
 800b626:	e7fe      	b.n	800b626 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b628:	4b0a      	ldr	r3, [pc, #40]	; (800b654 <vPortExitCritical+0x50>)
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	3b01      	subs	r3, #1
 800b62e:	4a09      	ldr	r2, [pc, #36]	; (800b654 <vPortExitCritical+0x50>)
 800b630:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b632:	4b08      	ldr	r3, [pc, #32]	; (800b654 <vPortExitCritical+0x50>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d105      	bne.n	800b646 <vPortExitCritical+0x42>
 800b63a:	2300      	movs	r3, #0
 800b63c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b63e:	683b      	ldr	r3, [r7, #0]
 800b640:	f383 8811 	msr	BASEPRI, r3
}
 800b644:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b646:	bf00      	nop
 800b648:	370c      	adds	r7, #12
 800b64a:	46bd      	mov	sp, r7
 800b64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b650:	4770      	bx	lr
 800b652:	bf00      	nop
 800b654:	2000006c 	.word	0x2000006c
	...

0800b660 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b660:	f3ef 8009 	mrs	r0, PSP
 800b664:	f3bf 8f6f 	isb	sy
 800b668:	4b15      	ldr	r3, [pc, #84]	; (800b6c0 <pxCurrentTCBConst>)
 800b66a:	681a      	ldr	r2, [r3, #0]
 800b66c:	f01e 0f10 	tst.w	lr, #16
 800b670:	bf08      	it	eq
 800b672:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b676:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b67a:	6010      	str	r0, [r2, #0]
 800b67c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b680:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b684:	f380 8811 	msr	BASEPRI, r0
 800b688:	f3bf 8f4f 	dsb	sy
 800b68c:	f3bf 8f6f 	isb	sy
 800b690:	f7ff fa0a 	bl	800aaa8 <vTaskSwitchContext>
 800b694:	f04f 0000 	mov.w	r0, #0
 800b698:	f380 8811 	msr	BASEPRI, r0
 800b69c:	bc09      	pop	{r0, r3}
 800b69e:	6819      	ldr	r1, [r3, #0]
 800b6a0:	6808      	ldr	r0, [r1, #0]
 800b6a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6a6:	f01e 0f10 	tst.w	lr, #16
 800b6aa:	bf08      	it	eq
 800b6ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b6b0:	f380 8809 	msr	PSP, r0
 800b6b4:	f3bf 8f6f 	isb	sy
 800b6b8:	4770      	bx	lr
 800b6ba:	bf00      	nop
 800b6bc:	f3af 8000 	nop.w

0800b6c0 <pxCurrentTCBConst>:
 800b6c0:	200092d8 	.word	0x200092d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b6c4:	bf00      	nop
 800b6c6:	bf00      	nop

0800b6c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b082      	sub	sp, #8
 800b6cc:	af00      	add	r7, sp, #0
	__asm volatile
 800b6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6d2:	f383 8811 	msr	BASEPRI, r3
 800b6d6:	f3bf 8f6f 	isb	sy
 800b6da:	f3bf 8f4f 	dsb	sy
 800b6de:	607b      	str	r3, [r7, #4]
}
 800b6e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b6e2:	f7ff f929 	bl	800a938 <xTaskIncrementTick>
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d003      	beq.n	800b6f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b6ec:	4b06      	ldr	r3, [pc, #24]	; (800b708 <SysTick_Handler+0x40>)
 800b6ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6f2:	601a      	str	r2, [r3, #0]
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	f383 8811 	msr	BASEPRI, r3
}
 800b6fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b700:	bf00      	nop
 800b702:	3708      	adds	r7, #8
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}
 800b708:	e000ed04 	.word	0xe000ed04

0800b70c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b70c:	b480      	push	{r7}
 800b70e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b710:	4b0b      	ldr	r3, [pc, #44]	; (800b740 <vPortSetupTimerInterrupt+0x34>)
 800b712:	2200      	movs	r2, #0
 800b714:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b716:	4b0b      	ldr	r3, [pc, #44]	; (800b744 <vPortSetupTimerInterrupt+0x38>)
 800b718:	2200      	movs	r2, #0
 800b71a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b71c:	4b0a      	ldr	r3, [pc, #40]	; (800b748 <vPortSetupTimerInterrupt+0x3c>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	4a0a      	ldr	r2, [pc, #40]	; (800b74c <vPortSetupTimerInterrupt+0x40>)
 800b722:	fba2 2303 	umull	r2, r3, r2, r3
 800b726:	099b      	lsrs	r3, r3, #6
 800b728:	4a09      	ldr	r2, [pc, #36]	; (800b750 <vPortSetupTimerInterrupt+0x44>)
 800b72a:	3b01      	subs	r3, #1
 800b72c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b72e:	4b04      	ldr	r3, [pc, #16]	; (800b740 <vPortSetupTimerInterrupt+0x34>)
 800b730:	2207      	movs	r2, #7
 800b732:	601a      	str	r2, [r3, #0]
}
 800b734:	bf00      	nop
 800b736:	46bd      	mov	sp, r7
 800b738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73c:	4770      	bx	lr
 800b73e:	bf00      	nop
 800b740:	e000e010 	.word	0xe000e010
 800b744:	e000e018 	.word	0xe000e018
 800b748:	20000060 	.word	0x20000060
 800b74c:	10624dd3 	.word	0x10624dd3
 800b750:	e000e014 	.word	0xe000e014

0800b754 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b754:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b764 <vPortEnableVFP+0x10>
 800b758:	6801      	ldr	r1, [r0, #0]
 800b75a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b75e:	6001      	str	r1, [r0, #0]
 800b760:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b762:	bf00      	nop
 800b764:	e000ed88 	.word	0xe000ed88

0800b768 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b768:	b480      	push	{r7}
 800b76a:	b085      	sub	sp, #20
 800b76c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b76e:	f3ef 8305 	mrs	r3, IPSR
 800b772:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	2b0f      	cmp	r3, #15
 800b778:	d914      	bls.n	800b7a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b77a:	4a17      	ldr	r2, [pc, #92]	; (800b7d8 <vPortValidateInterruptPriority+0x70>)
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	4413      	add	r3, r2
 800b780:	781b      	ldrb	r3, [r3, #0]
 800b782:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b784:	4b15      	ldr	r3, [pc, #84]	; (800b7dc <vPortValidateInterruptPriority+0x74>)
 800b786:	781b      	ldrb	r3, [r3, #0]
 800b788:	7afa      	ldrb	r2, [r7, #11]
 800b78a:	429a      	cmp	r2, r3
 800b78c:	d20a      	bcs.n	800b7a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b78e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b792:	f383 8811 	msr	BASEPRI, r3
 800b796:	f3bf 8f6f 	isb	sy
 800b79a:	f3bf 8f4f 	dsb	sy
 800b79e:	607b      	str	r3, [r7, #4]
}
 800b7a0:	bf00      	nop
 800b7a2:	e7fe      	b.n	800b7a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b7a4:	4b0e      	ldr	r3, [pc, #56]	; (800b7e0 <vPortValidateInterruptPriority+0x78>)
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b7ac:	4b0d      	ldr	r3, [pc, #52]	; (800b7e4 <vPortValidateInterruptPriority+0x7c>)
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	429a      	cmp	r2, r3
 800b7b2:	d90a      	bls.n	800b7ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b7b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7b8:	f383 8811 	msr	BASEPRI, r3
 800b7bc:	f3bf 8f6f 	isb	sy
 800b7c0:	f3bf 8f4f 	dsb	sy
 800b7c4:	603b      	str	r3, [r7, #0]
}
 800b7c6:	bf00      	nop
 800b7c8:	e7fe      	b.n	800b7c8 <vPortValidateInterruptPriority+0x60>
	}
 800b7ca:	bf00      	nop
 800b7cc:	3714      	adds	r7, #20
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d4:	4770      	bx	lr
 800b7d6:	bf00      	nop
 800b7d8:	e000e3f0 	.word	0xe000e3f0
 800b7dc:	20009404 	.word	0x20009404
 800b7e0:	e000ed0c 	.word	0xe000ed0c
 800b7e4:	20009408 	.word	0x20009408

0800b7e8 <__libc_init_array>:
 800b7e8:	b570      	push	{r4, r5, r6, lr}
 800b7ea:	4d0d      	ldr	r5, [pc, #52]	; (800b820 <__libc_init_array+0x38>)
 800b7ec:	4c0d      	ldr	r4, [pc, #52]	; (800b824 <__libc_init_array+0x3c>)
 800b7ee:	1b64      	subs	r4, r4, r5
 800b7f0:	10a4      	asrs	r4, r4, #2
 800b7f2:	2600      	movs	r6, #0
 800b7f4:	42a6      	cmp	r6, r4
 800b7f6:	d109      	bne.n	800b80c <__libc_init_array+0x24>
 800b7f8:	4d0b      	ldr	r5, [pc, #44]	; (800b828 <__libc_init_array+0x40>)
 800b7fa:	4c0c      	ldr	r4, [pc, #48]	; (800b82c <__libc_init_array+0x44>)
 800b7fc:	f000 f82e 	bl	800b85c <_init>
 800b800:	1b64      	subs	r4, r4, r5
 800b802:	10a4      	asrs	r4, r4, #2
 800b804:	2600      	movs	r6, #0
 800b806:	42a6      	cmp	r6, r4
 800b808:	d105      	bne.n	800b816 <__libc_init_array+0x2e>
 800b80a:	bd70      	pop	{r4, r5, r6, pc}
 800b80c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b810:	4798      	blx	r3
 800b812:	3601      	adds	r6, #1
 800b814:	e7ee      	b.n	800b7f4 <__libc_init_array+0xc>
 800b816:	f855 3b04 	ldr.w	r3, [r5], #4
 800b81a:	4798      	blx	r3
 800b81c:	3601      	adds	r6, #1
 800b81e:	e7f2      	b.n	800b806 <__libc_init_array+0x1e>
 800b820:	0800baf8 	.word	0x0800baf8
 800b824:	0800baf8 	.word	0x0800baf8
 800b828:	0800baf8 	.word	0x0800baf8
 800b82c:	0800bafc 	.word	0x0800bafc

0800b830 <memcpy>:
 800b830:	440a      	add	r2, r1
 800b832:	4291      	cmp	r1, r2
 800b834:	f100 33ff 	add.w	r3, r0, #4294967295
 800b838:	d100      	bne.n	800b83c <memcpy+0xc>
 800b83a:	4770      	bx	lr
 800b83c:	b510      	push	{r4, lr}
 800b83e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b842:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b846:	4291      	cmp	r1, r2
 800b848:	d1f9      	bne.n	800b83e <memcpy+0xe>
 800b84a:	bd10      	pop	{r4, pc}

0800b84c <memset>:
 800b84c:	4402      	add	r2, r0
 800b84e:	4603      	mov	r3, r0
 800b850:	4293      	cmp	r3, r2
 800b852:	d100      	bne.n	800b856 <memset+0xa>
 800b854:	4770      	bx	lr
 800b856:	f803 1b01 	strb.w	r1, [r3], #1
 800b85a:	e7f9      	b.n	800b850 <memset+0x4>

0800b85c <_init>:
 800b85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b85e:	bf00      	nop
 800b860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b862:	bc08      	pop	{r3}
 800b864:	469e      	mov	lr, r3
 800b866:	4770      	bx	lr

0800b868 <_fini>:
 800b868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b86a:	bf00      	nop
 800b86c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b86e:	bc08      	pop	{r3}
 800b870:	469e      	mov	lr, r3
 800b872:	4770      	bx	lr
