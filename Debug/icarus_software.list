
icarus_software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab04  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000027c  0800acd4  0800acd4  0001acd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af50  0800af50  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800af50  0800af50  0001af50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af58  0800af58  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af58  0800af58  0001af58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af5c  0800af5c  0001af5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800af60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007400  20000010  0800af70  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20007410  0800af70  00027410  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025f5f  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000589b  00000000  00000000  00045f9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ae8  00000000  00000000  0004b840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001860  00000000  00000000  0004d328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027cd4  00000000  00000000  0004eb88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fcab  00000000  00000000  0007685c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e38ab  00000000  00000000  00096507  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00179db2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d70  00000000  00000000  00179e08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800acbc 	.word	0x0800acbc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	0800acbc 	.word	0x0800acbc

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000224:	f000 b96e 	b.w	8000504 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468c      	mov	ip, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	f040 8083 	bne.w	8000356 <__udivmoddi4+0x116>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d947      	bls.n	80002e6 <__udivmoddi4+0xa6>
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	b142      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025c:	f1c2 0020 	rsb	r0, r2, #32
 8000260:	fa24 f000 	lsr.w	r0, r4, r0
 8000264:	4091      	lsls	r1, r2
 8000266:	4097      	lsls	r7, r2
 8000268:	ea40 0c01 	orr.w	ip, r0, r1
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbbc f6f8 	udiv	r6, ip, r8
 8000278:	fa1f fe87 	uxth.w	lr, r7
 800027c:	fb08 c116 	mls	r1, r8, r6, ip
 8000280:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000284:	fb06 f10e 	mul.w	r1, r6, lr
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000292:	f080 8119 	bcs.w	80004c8 <__udivmoddi4+0x288>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8116 	bls.w	80004c8 <__udivmoddi4+0x288>
 800029c:	3e02      	subs	r6, #2
 800029e:	443b      	add	r3, r7
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b4:	45a6      	cmp	lr, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002be:	f080 8105 	bcs.w	80004cc <__udivmoddi4+0x28c>
 80002c2:	45a6      	cmp	lr, r4
 80002c4:	f240 8102 	bls.w	80004cc <__udivmoddi4+0x28c>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	2600      	movs	r6, #0
 80002d6:	b11d      	cbz	r5, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c5 4300 	strd	r4, r3, [r5]
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xaa>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	d150      	bne.n	8000394 <__udivmoddi4+0x154>
 80002f2:	1bcb      	subs	r3, r1, r7
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	fa1f f887 	uxth.w	r8, r7
 80002fc:	2601      	movs	r6, #1
 80002fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000302:	0c21      	lsrs	r1, r4, #16
 8000304:	fb0e 331c 	mls	r3, lr, ip, r3
 8000308:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800030c:	fb08 f30c 	mul.w	r3, r8, ip
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000314:	1879      	adds	r1, r7, r1
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0xe2>
 800031c:	428b      	cmp	r3, r1
 800031e:	f200 80e9 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 8000322:	4684      	mov	ip, r0
 8000324:	1ac9      	subs	r1, r1, r3
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000330:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x10c>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x10a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80d9 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e7bf      	b.n	80002d6 <__udivmoddi4+0x96>
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x12e>
 800035a:	2d00      	cmp	r5, #0
 800035c:	f000 80b1 	beq.w	80004c2 <__udivmoddi4+0x282>
 8000360:	2600      	movs	r6, #0
 8000362:	e9c5 0100 	strd	r0, r1, [r5]
 8000366:	4630      	mov	r0, r6
 8000368:	4631      	mov	r1, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f683 	clz	r6, r3
 8000372:	2e00      	cmp	r6, #0
 8000374:	d14a      	bne.n	800040c <__udivmoddi4+0x1cc>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0x140>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80b8 	bhi.w	80004f0 <__udivmoddi4+0x2b0>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0103 	sbc.w	r1, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	468c      	mov	ip, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0a8      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800038e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000394:	f1c2 0320 	rsb	r3, r2, #32
 8000398:	fa20 f603 	lsr.w	r6, r0, r3
 800039c:	4097      	lsls	r7, r2
 800039e:	fa01 f002 	lsl.w	r0, r1, r2
 80003a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a6:	40d9      	lsrs	r1, r3
 80003a8:	4330      	orrs	r0, r6
 80003aa:	0c03      	lsrs	r3, r0, #16
 80003ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b0:	fa1f f887 	uxth.w	r8, r7
 80003b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb06 f108 	mul.w	r1, r6, r8
 80003c0:	4299      	cmp	r1, r3
 80003c2:	fa04 f402 	lsl.w	r4, r4, r2
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x19c>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003ce:	f080 808d 	bcs.w	80004ec <__udivmoddi4+0x2ac>
 80003d2:	4299      	cmp	r1, r3
 80003d4:	f240 808a 	bls.w	80004ec <__udivmoddi4+0x2ac>
 80003d8:	3e02      	subs	r6, #2
 80003da:	443b      	add	r3, r7
 80003dc:	1a5b      	subs	r3, r3, r1
 80003de:	b281      	uxth	r1, r0
 80003e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb00 f308 	mul.w	r3, r0, r8
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x1c4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003fa:	d273      	bcs.n	80004e4 <__udivmoddi4+0x2a4>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d971      	bls.n	80004e4 <__udivmoddi4+0x2a4>
 8000400:	3802      	subs	r0, #2
 8000402:	4439      	add	r1, r7
 8000404:	1acb      	subs	r3, r1, r3
 8000406:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040a:	e778      	b.n	80002fe <__udivmoddi4+0xbe>
 800040c:	f1c6 0c20 	rsb	ip, r6, #32
 8000410:	fa03 f406 	lsl.w	r4, r3, r6
 8000414:	fa22 f30c 	lsr.w	r3, r2, ip
 8000418:	431c      	orrs	r4, r3
 800041a:	fa20 f70c 	lsr.w	r7, r0, ip
 800041e:	fa01 f306 	lsl.w	r3, r1, r6
 8000422:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000426:	fa21 f10c 	lsr.w	r1, r1, ip
 800042a:	431f      	orrs	r7, r3
 800042c:	0c3b      	lsrs	r3, r7, #16
 800042e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000432:	fa1f f884 	uxth.w	r8, r4
 8000436:	fb0e 1119 	mls	r1, lr, r9, r1
 800043a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043e:	fb09 fa08 	mul.w	sl, r9, r8
 8000442:	458a      	cmp	sl, r1
 8000444:	fa02 f206 	lsl.w	r2, r2, r6
 8000448:	fa00 f306 	lsl.w	r3, r0, r6
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x220>
 800044e:	1861      	adds	r1, r4, r1
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000454:	d248      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 8000456:	458a      	cmp	sl, r1
 8000458:	d946      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4421      	add	r1, r4
 8000460:	eba1 010a 	sub.w	r1, r1, sl
 8000464:	b2bf      	uxth	r7, r7
 8000466:	fbb1 f0fe 	udiv	r0, r1, lr
 800046a:	fb0e 1110 	mls	r1, lr, r0, r1
 800046e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45b8      	cmp	r8, r7
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x24a>
 800047a:	19e7      	adds	r7, r4, r7
 800047c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000480:	d22e      	bcs.n	80004e0 <__udivmoddi4+0x2a0>
 8000482:	45b8      	cmp	r8, r7
 8000484:	d92c      	bls.n	80004e0 <__udivmoddi4+0x2a0>
 8000486:	3802      	subs	r0, #2
 8000488:	4427      	add	r7, r4
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba7 0708 	sub.w	r7, r7, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454f      	cmp	r7, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	4649      	mov	r1, r9
 800049c:	d31a      	bcc.n	80004d4 <__udivmoddi4+0x294>
 800049e:	d017      	beq.n	80004d0 <__udivmoddi4+0x290>
 80004a0:	b15d      	cbz	r5, 80004ba <__udivmoddi4+0x27a>
 80004a2:	ebb3 020e 	subs.w	r2, r3, lr
 80004a6:	eb67 0701 	sbc.w	r7, r7, r1
 80004aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ae:	40f2      	lsrs	r2, r6
 80004b0:	ea4c 0202 	orr.w	r2, ip, r2
 80004b4:	40f7      	lsrs	r7, r6
 80004b6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ba:	2600      	movs	r6, #0
 80004bc:	4631      	mov	r1, r6
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e70b      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fd      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d0:	4543      	cmp	r3, r8
 80004d2:	d2e5      	bcs.n	80004a0 <__udivmoddi4+0x260>
 80004d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d8:	eb69 0104 	sbc.w	r1, r9, r4
 80004dc:	3801      	subs	r0, #1
 80004de:	e7df      	b.n	80004a0 <__udivmoddi4+0x260>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e7d2      	b.n	800048a <__udivmoddi4+0x24a>
 80004e4:	4660      	mov	r0, ip
 80004e6:	e78d      	b.n	8000404 <__udivmoddi4+0x1c4>
 80004e8:	4681      	mov	r9, r0
 80004ea:	e7b9      	b.n	8000460 <__udivmoddi4+0x220>
 80004ec:	4666      	mov	r6, ip
 80004ee:	e775      	b.n	80003dc <__udivmoddi4+0x19c>
 80004f0:	4630      	mov	r0, r6
 80004f2:	e74a      	b.n	800038a <__udivmoddi4+0x14a>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	4439      	add	r1, r7
 80004fa:	e713      	b.n	8000324 <__udivmoddi4+0xe4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	443c      	add	r4, r7
 8000500:	e724      	b.n	800034c <__udivmoddi4+0x10c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <pointer_inc>:
volatile int32_t can_buffer_pointer_rx = 0;
volatile int32_t can_buffer_pointer_tx = 0;

uint32_t can_readFrame(void);

uint32_t pointer_inc(uint32_t val, uint32_t size) {
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	6039      	str	r1, [r7, #0]
	return (val + 1) % size;
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	3301      	adds	r3, #1
 8000516:	683a      	ldr	r2, [r7, #0]
 8000518:	fbb3 f2f2 	udiv	r2, r3, r2
 800051c:	6839      	ldr	r1, [r7, #0]
 800051e:	fb01 f202 	mul.w	r2, r1, r2
 8000522:	1a9b      	subs	r3, r3, r2
}
 8000524:	4618      	mov	r0, r3
 8000526:	370c      	adds	r7, #12
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr

08000530 <can_addMsg>:

void can_addMsg(CAN_msg msg) {
 8000530:	b590      	push	{r4, r7, lr}
 8000532:	b085      	sub	sp, #20
 8000534:	af00      	add	r7, sp, #0
 8000536:	463c      	mov	r4, r7
 8000538:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	can_buffer[can_buffer_pointer_tx] = msg;
 800053c:	4b13      	ldr	r3, [pc, #76]	; (800058c <can_addMsg+0x5c>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a13      	ldr	r2, [pc, #76]	; (8000590 <can_addMsg+0x60>)
 8000542:	011b      	lsls	r3, r3, #4
 8000544:	4413      	add	r3, r2
 8000546:	461c      	mov	r4, r3
 8000548:	463b      	mov	r3, r7
 800054a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800054c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	can_buffer_pointer_tx = pointer_inc(can_buffer_pointer_tx, CAN_BUFFER_DEPTH);
 8000550:	4b0e      	ldr	r3, [pc, #56]	; (800058c <can_addMsg+0x5c>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2140      	movs	r1, #64	; 0x40
 8000556:	4618      	mov	r0, r3
 8000558:	f7ff ffd6 	bl	8000508 <pointer_inc>
 800055c:	4603      	mov	r3, r0
 800055e:	461a      	mov	r2, r3
 8000560:	4b0a      	ldr	r3, [pc, #40]	; (800058c <can_addMsg+0x5c>)
 8000562:	601a      	str	r2, [r3, #0]

	if (can_buffer_pointer_tx == can_buffer_pointer_rx) { // indicates overflow
 8000564:	4b09      	ldr	r3, [pc, #36]	; (800058c <can_addMsg+0x5c>)
 8000566:	681a      	ldr	r2, [r3, #0]
 8000568:	4b0a      	ldr	r3, [pc, #40]	; (8000594 <can_addMsg+0x64>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	429a      	cmp	r2, r3
 800056e:	d109      	bne.n	8000584 <can_addMsg+0x54>
		can_buffer_pointer_rx = pointer_inc(can_buffer_pointer_rx, CAN_BUFFER_DEPTH); // skip one msg in the rx buffer
 8000570:	4b08      	ldr	r3, [pc, #32]	; (8000594 <can_addMsg+0x64>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	2140      	movs	r1, #64	; 0x40
 8000576:	4618      	mov	r0, r3
 8000578:	f7ff ffc6 	bl	8000508 <pointer_inc>
 800057c:	4603      	mov	r3, r0
 800057e:	461a      	mov	r2, r3
 8000580:	4b04      	ldr	r3, [pc, #16]	; (8000594 <can_addMsg+0x64>)
 8000582:	601a      	str	r2, [r3, #0]
	}
}
 8000584:	bf00      	nop
 8000586:	3714      	adds	r7, #20
 8000588:	46bd      	mov	sp, r7
 800058a:	bd90      	pop	{r4, r7, pc}
 800058c:	20000030 	.word	0x20000030
 8000590:	20006898 	.word	0x20006898
 8000594:	2000002c 	.word	0x2000002c

08000598 <CAN_Config>:

/*
 * Configures CAN protocol for 250kbit/s without interrupt for reading (only polling).
 */
void CAN_Config(uint32_t id)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b08c      	sub	sp, #48	; 0x30
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]

    /*##-1- Configure the CAN peripheral #######################################*/
    // Done in MX_CAN1_Init()

    /*##-2- Configure the CAN Filter ###########################################*/
    sFilterConfig.FilterBank = 0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	61fb      	str	r3, [r7, #28]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80005a4:	2300      	movs	r3, #0
 80005a6:	623b      	str	r3, [r7, #32]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80005a8:	2301      	movs	r3, #1
 80005aa:	627b      	str	r3, [r7, #36]	; 0x24
    sFilterConfig.FilterIdHigh = 0x0000;
 80005ac:	2300      	movs	r3, #0
 80005ae:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterIdLow = 0x0000;
 80005b0:	2300      	movs	r3, #0
 80005b2:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterMaskIdHigh = 0x0000;
 80005b4:	2300      	movs	r3, #0
 80005b6:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterMaskIdLow = 0x0000;
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80005bc:	2300      	movs	r3, #0
 80005be:	61bb      	str	r3, [r7, #24]
    sFilterConfig.FilterActivation = ENABLE;
 80005c0:	2301      	movs	r3, #1
 80005c2:	62bb      	str	r3, [r7, #40]	; 0x28
    sFilterConfig.SlaveStartFilterBank = 14;
 80005c4:	230e      	movs	r3, #14
 80005c6:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 80005c8:	f107 0308 	add.w	r3, r7, #8
 80005cc:	4619      	mov	r1, r3
 80005ce:	4810      	ldr	r0, [pc, #64]	; (8000610 <CAN_Config+0x78>)
 80005d0:	f003 f950 	bl	8003874 <HAL_CAN_ConfigFilter>
        /* Filter configuration Error */
        //      _Error_Handler(__FILE__, __LINE__);
    }

    /*##-3- Start the CAN peripheral ###########################################*/
    if (HAL_CAN_Start(&hcan1) != HAL_OK)
 80005d4:	480e      	ldr	r0, [pc, #56]	; (8000610 <CAN_Config+0x78>)
 80005d6:	f003 fa2d 	bl	8003a34 <HAL_CAN_Start>
        /* Start Error */
        //      _Error_Handler(__FILE__, __LINE__);
    }

    /*##-4- Activate CAN RX notification #######################################*/
    if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80005da:	2102      	movs	r1, #2
 80005dc:	480c      	ldr	r0, [pc, #48]	; (8000610 <CAN_Config+0x78>)
 80005de:	f003 fba7 	bl	8003d30 <HAL_CAN_ActivateNotification>
        /* Notification Error */
    	//_Error_Handler(__FILE__, __LINE__);
    }

    /*##-5- Configure Transmission process #####################################*/
    TxHeader.StdId = id;
 80005e2:	4a0c      	ldr	r2, [pc, #48]	; (8000614 <CAN_Config+0x7c>)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	6013      	str	r3, [r2, #0]
    TxHeader.ExtId = id; // not needed
 80005e8:	4a0a      	ldr	r2, [pc, #40]	; (8000614 <CAN_Config+0x7c>)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	6053      	str	r3, [r2, #4]
    TxHeader.RTR = CAN_RTR_DATA;
 80005ee:	4b09      	ldr	r3, [pc, #36]	; (8000614 <CAN_Config+0x7c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	60da      	str	r2, [r3, #12]
    TxHeader.IDE = CAN_ID_STD;
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <CAN_Config+0x7c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	609a      	str	r2, [r3, #8]
    TxHeader.DLC = 8;
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <CAN_Config+0x7c>)
 80005fc:	2208      	movs	r2, #8
 80005fe:	611a      	str	r2, [r3, #16]
    TxHeader.TransmitGlobalTime = DISABLE;
 8000600:	4b04      	ldr	r3, [pc, #16]	; (8000614 <CAN_Config+0x7c>)
 8000602:	2200      	movs	r2, #0
 8000604:	751a      	strb	r2, [r3, #20]
}
 8000606:	bf00      	nop
 8000608:	3730      	adds	r7, #48	; 0x30
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	20006d40 	.word	0x20006d40
 8000614:	20006864 	.word	0x20006864

08000618 <HAL_CAN_RxFifo0MsgPendingCallback>:
    } else { // something bad happen
    	// not sure what to do
    }
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	can_readFrame();
 8000620:	f000 f858 	bl	80006d4 <can_readFrame>
	can_addMsg(can_current_msg);
 8000624:	4b03      	ldr	r3, [pc, #12]	; (8000634 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 8000626:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000628:	f7ff ff82 	bl	8000530 <can_addMsg>
}
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20006848 	.word	0x20006848

08000638 <can_msgPending>:

uint32_t can_msgPending() {
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
	int32_t diff = can_buffer_pointer_tx - can_buffer_pointer_rx;
 800063e:	4b09      	ldr	r3, [pc, #36]	; (8000664 <can_msgPending+0x2c>)
 8000640:	681a      	ldr	r2, [r3, #0]
 8000642:	4b09      	ldr	r3, [pc, #36]	; (8000668 <can_msgPending+0x30>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	1ad3      	subs	r3, r2, r3
 8000648:	607b      	str	r3, [r7, #4]
	if (diff < 0) {
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	2b00      	cmp	r3, #0
 800064e:	da02      	bge.n	8000656 <can_msgPending+0x1e>
		diff += CAN_BUFFER_DEPTH;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	3340      	adds	r3, #64	; 0x40
 8000654:	607b      	str	r3, [r7, #4]
	}

	return diff;
 8000656:	687b      	ldr	r3, [r7, #4]
}
 8000658:	4618      	mov	r0, r3
 800065a:	370c      	adds	r7, #12
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr
 8000664:	20000030 	.word	0x20000030
 8000668:	2000002c 	.word	0x2000002c

0800066c <can_readBuffer>:

CAN_msg can_readBuffer() {
 800066c:	b590      	push	{r4, r7, lr}
 800066e:	b087      	sub	sp, #28
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
	CAN_msg ret = {0};
 8000674:	f107 0308 	add.w	r3, r7, #8
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]

	if (can_msgPending() > 0) {
 8000682:	f7ff ffd9 	bl	8000638 <can_msgPending>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d013      	beq.n	80006b4 <can_readBuffer+0x48>
		ret = can_buffer[can_buffer_pointer_rx];
 800068c:	4b0f      	ldr	r3, [pc, #60]	; (80006cc <can_readBuffer+0x60>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a0f      	ldr	r2, [pc, #60]	; (80006d0 <can_readBuffer+0x64>)
 8000692:	011b      	lsls	r3, r3, #4
 8000694:	4413      	add	r3, r2
 8000696:	f107 0408 	add.w	r4, r7, #8
 800069a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800069c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		can_buffer_pointer_rx = pointer_inc(can_buffer_pointer_rx, CAN_BUFFER_DEPTH);
 80006a0:	4b0a      	ldr	r3, [pc, #40]	; (80006cc <can_readBuffer+0x60>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	2140      	movs	r1, #64	; 0x40
 80006a6:	4618      	mov	r0, r3
 80006a8:	f7ff ff2e 	bl	8000508 <pointer_inc>
 80006ac:	4603      	mov	r3, r0
 80006ae:	461a      	mov	r2, r3
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <can_readBuffer+0x60>)
 80006b2:	601a      	str	r2, [r3, #0]
	} else { // no message actually pending
		// do nothing, will return the {0} CAN_msg
	}


	return ret;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	461c      	mov	r4, r3
 80006b8:	f107 0308 	add.w	r3, r7, #8
 80006bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80006c2:	6878      	ldr	r0, [r7, #4]
 80006c4:	371c      	adds	r7, #28
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd90      	pop	{r4, r7, pc}
 80006ca:	bf00      	nop
 80006cc:	2000002c 	.word	0x2000002c
 80006d0:	20006898 	.word	0x20006898

080006d4 <can_readFrame>:
 *
 * byte 0..3 --> some uint32_t
 * byte 4    --> data_id, see CAN_communication.h
 * byte 5..7 --> timestamp
 */
uint32_t can_readFrame(void) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
    uint32_t fill_level = HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0);
 80006da:	2100      	movs	r1, #0
 80006dc:	482a      	ldr	r0, [pc, #168]	; (8000788 <can_readFrame+0xb4>)
 80006de:	f003 faff 	bl	8003ce0 <HAL_CAN_GetRxFifoFillLevel>
 80006e2:	6078      	str	r0, [r7, #4]
    if (fill_level > 0) {
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d049      	beq.n	800077e <can_readFrame+0xaa>
        HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData);
 80006ea:	4b28      	ldr	r3, [pc, #160]	; (800078c <can_readFrame+0xb8>)
 80006ec:	4a28      	ldr	r2, [pc, #160]	; (8000790 <can_readFrame+0xbc>)
 80006ee:	2100      	movs	r1, #0
 80006f0:	4825      	ldr	r0, [pc, #148]	; (8000788 <can_readFrame+0xb4>)
 80006f2:	f003 f9e3 	bl	8003abc <HAL_CAN_GetRxMessage>

        can_current_msg.data = 0;
 80006f6:	4b27      	ldr	r3, [pc, #156]	; (8000794 <can_readFrame+0xc0>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
        can_current_msg.data += (uint32_t) RxData[0] << 24;
 80006fc:	4b25      	ldr	r3, [pc, #148]	; (8000794 <can_readFrame+0xc0>)
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	4b22      	ldr	r3, [pc, #136]	; (800078c <can_readFrame+0xb8>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	061b      	lsls	r3, r3, #24
 8000706:	4413      	add	r3, r2
 8000708:	4a22      	ldr	r2, [pc, #136]	; (8000794 <can_readFrame+0xc0>)
 800070a:	6013      	str	r3, [r2, #0]
        can_current_msg.data += (uint32_t) RxData[1] << 16;
 800070c:	4b21      	ldr	r3, [pc, #132]	; (8000794 <can_readFrame+0xc0>)
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	4b1e      	ldr	r3, [pc, #120]	; (800078c <can_readFrame+0xb8>)
 8000712:	785b      	ldrb	r3, [r3, #1]
 8000714:	041b      	lsls	r3, r3, #16
 8000716:	4413      	add	r3, r2
 8000718:	4a1e      	ldr	r2, [pc, #120]	; (8000794 <can_readFrame+0xc0>)
 800071a:	6013      	str	r3, [r2, #0]
        can_current_msg.data += (uint32_t) RxData[2] << 8;
 800071c:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <can_readFrame+0xc0>)
 800071e:	681a      	ldr	r2, [r3, #0]
 8000720:	4b1a      	ldr	r3, [pc, #104]	; (800078c <can_readFrame+0xb8>)
 8000722:	789b      	ldrb	r3, [r3, #2]
 8000724:	021b      	lsls	r3, r3, #8
 8000726:	4413      	add	r3, r2
 8000728:	4a1a      	ldr	r2, [pc, #104]	; (8000794 <can_readFrame+0xc0>)
 800072a:	6013      	str	r3, [r2, #0]
		can_current_msg.data += (uint32_t) RxData[3] << 0;
 800072c:	4b19      	ldr	r3, [pc, #100]	; (8000794 <can_readFrame+0xc0>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a16      	ldr	r2, [pc, #88]	; (800078c <can_readFrame+0xb8>)
 8000732:	78d2      	ldrb	r2, [r2, #3]
 8000734:	4413      	add	r3, r2
 8000736:	4a17      	ldr	r2, [pc, #92]	; (8000794 <can_readFrame+0xc0>)
 8000738:	6013      	str	r3, [r2, #0]

        can_current_msg.id = RxData[4];
 800073a:	4b14      	ldr	r3, [pc, #80]	; (800078c <can_readFrame+0xb8>)
 800073c:	791a      	ldrb	r2, [r3, #4]
 800073e:	4b15      	ldr	r3, [pc, #84]	; (8000794 <can_readFrame+0xc0>)
 8000740:	711a      	strb	r2, [r3, #4]

        can_current_msg.timestamp = 0;
 8000742:	4b14      	ldr	r3, [pc, #80]	; (8000794 <can_readFrame+0xc0>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
        can_current_msg.timestamp += (uint32_t) RxData[5] << 16;
 8000748:	4b12      	ldr	r3, [pc, #72]	; (8000794 <can_readFrame+0xc0>)
 800074a:	689a      	ldr	r2, [r3, #8]
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <can_readFrame+0xb8>)
 800074e:	795b      	ldrb	r3, [r3, #5]
 8000750:	041b      	lsls	r3, r3, #16
 8000752:	4413      	add	r3, r2
 8000754:	4a0f      	ldr	r2, [pc, #60]	; (8000794 <can_readFrame+0xc0>)
 8000756:	6093      	str	r3, [r2, #8]
        can_current_msg.timestamp += (uint32_t) RxData[6] << 8;
 8000758:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <can_readFrame+0xc0>)
 800075a:	689a      	ldr	r2, [r3, #8]
 800075c:	4b0b      	ldr	r3, [pc, #44]	; (800078c <can_readFrame+0xb8>)
 800075e:	799b      	ldrb	r3, [r3, #6]
 8000760:	021b      	lsls	r3, r3, #8
 8000762:	4413      	add	r3, r2
 8000764:	4a0b      	ldr	r2, [pc, #44]	; (8000794 <can_readFrame+0xc0>)
 8000766:	6093      	str	r3, [r2, #8]
		can_current_msg.timestamp += (uint32_t) RxData[7] << 0;
 8000768:	4b0a      	ldr	r3, [pc, #40]	; (8000794 <can_readFrame+0xc0>)
 800076a:	689b      	ldr	r3, [r3, #8]
 800076c:	4a07      	ldr	r2, [pc, #28]	; (800078c <can_readFrame+0xb8>)
 800076e:	79d2      	ldrb	r2, [r2, #7]
 8000770:	4413      	add	r3, r2
 8000772:	4a08      	ldr	r2, [pc, #32]	; (8000794 <can_readFrame+0xc0>)
 8000774:	6093      	str	r3, [r2, #8]

        can_current_msg.id_CAN = RxHeader.StdId;
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <can_readFrame+0xbc>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a06      	ldr	r2, [pc, #24]	; (8000794 <can_readFrame+0xc0>)
 800077c:	60d3      	str	r3, [r2, #12]
    }
    return fill_level;
 800077e:	687b      	ldr	r3, [r7, #4]
}
 8000780:	4618      	mov	r0, r3
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	20006d40 	.word	0x20006d40
 800078c:	2000685c 	.word	0x2000685c
 8000790:	2000687c 	.word	0x2000687c
 8000794:	20006848 	.word	0x20006848

08000798 <can_init>:


void can_init(void) {
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	CAN_Config(CAN_ID_PROPULSION_BOARD);
 800079c:	2005      	movs	r0, #5
 800079e:	f7ff fefb 	bl	8000598 <CAN_Config>
}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
	...

080007a8 <can_send_thread>:


void can_send_thread(void * arg) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
	static TickType_t last_wake_time;
	static const TickType_t period = pdMS_TO_TICKS(CAN_HEART_BEAT);

	last_wake_time = xTaskGetTickCount();
 80007b0:	f009 fae2 	bl	8009d78 <xTaskGetTickCount>
 80007b4:	4603      	mov	r3, r0
 80007b6:	4a04      	ldr	r2, [pc, #16]	; (80007c8 <can_send_thread+0x20>)
 80007b8:	6013      	str	r3, [r2, #0]

	for(;;) {

		//SEND DATA HERE

		vTaskDelayUntil( &last_wake_time, period );
 80007ba:	4b04      	ldr	r3, [pc, #16]	; (80007cc <can_send_thread+0x24>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4619      	mov	r1, r3
 80007c0:	4801      	ldr	r0, [pc, #4]	; (80007c8 <can_send_thread+0x20>)
 80007c2:	f009 f91d 	bl	8009a00 <vTaskDelayUntil>
 80007c6:	e7f8      	b.n	80007ba <can_send_thread+0x12>
 80007c8:	20000034 	.word	0x20000034
 80007cc:	0800af28 	.word	0x0800af28

080007d0 <control_thread>:

/**********************
 *	DECLARATIONS
 **********************/

void control_thread(void * arg) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	static TickType_t last_wake_time;
	static const TickType_t period = pdMS_TO_TICKS(CONTROL_HEART_BEAT);



	led_init();
 80007d8:	f000 fb8c 	bl	8000ef4 <led_init>

	init_control(&control);
 80007dc:	4831      	ldr	r0, [pc, #196]	; (80008a4 <control_thread+0xd4>)
 80007de:	f000 f8b6 	bl	800094e <init_control>

	static SERVO_INST_t tvc_servo;

	servo_global_init();
 80007e2:	f000 fde9 	bl	80013b8 <servo_global_init>

	servo_init(&tvc_servo, 1);
 80007e6:	2101      	movs	r1, #1
 80007e8:	482f      	ldr	r0, [pc, #188]	; (80008a8 <control_thread+0xd8>)
 80007ea:	f000 fdab 	bl	8001344 <servo_init>

	servo_config(&tvc_servo);
 80007ee:	482e      	ldr	r0, [pc, #184]	; (80008a8 <control_thread+0xd8>)
 80007f0:	f001 f872 	bl	80018d8 <servo_config>

	control.tvc_servo = &tvc_servo;
 80007f4:	4b2b      	ldr	r3, [pc, #172]	; (80008a4 <control_thread+0xd4>)
 80007f6:	4a2c      	ldr	r2, [pc, #176]	; (80008a8 <control_thread+0xd8>)
 80007f8:	619a      	str	r2, [r3, #24]


	//hang for recovery information from storage


	init_idle(&control);
 80007fa:	482a      	ldr	r0, [pc, #168]	; (80008a4 <control_thread+0xd4>)
 80007fc:	f000 f8c0 	bl	8000980 <init_idle>



	last_wake_time = xTaskGetTickCount();
 8000800:	f009 faba 	bl	8009d78 <xTaskGetTickCount>
 8000804:	4603      	mov	r3, r0
 8000806:	4a29      	ldr	r2, [pc, #164]	; (80008ac <control_thread+0xdc>)
 8000808:	6013      	str	r3, [r2, #0]
	for(;;) {


		static uint8_t lol = 0;
		static uint16_t cnt = 0;
		if(cnt++ > 10) {
 800080a:	4b29      	ldr	r3, [pc, #164]	; (80008b0 <control_thread+0xe0>)
 800080c:	881b      	ldrh	r3, [r3, #0]
 800080e:	1c5a      	adds	r2, r3, #1
 8000810:	b291      	uxth	r1, r2
 8000812:	4a27      	ldr	r2, [pc, #156]	; (80008b0 <control_thread+0xe0>)
 8000814:	8011      	strh	r1, [r2, #0]
 8000816:	2b0a      	cmp	r3, #10
 8000818:	d90c      	bls.n	8000834 <control_thread+0x64>
			lol = !lol;
 800081a:	4b26      	ldr	r3, [pc, #152]	; (80008b4 <control_thread+0xe4>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	2b00      	cmp	r3, #0
 8000820:	bf0c      	ite	eq
 8000822:	2301      	moveq	r3, #1
 8000824:	2300      	movne	r3, #0
 8000826:	b2db      	uxtb	r3, r3
 8000828:	461a      	mov	r2, r3
 800082a:	4b22      	ldr	r3, [pc, #136]	; (80008b4 <control_thread+0xe4>)
 800082c:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 800082e:	4b20      	ldr	r3, [pc, #128]	; (80008b0 <control_thread+0xe0>)
 8000830:	2200      	movs	r2, #0
 8000832:	801a      	strh	r2, [r3, #0]
		}

		if(lol) {
 8000834:	4b1f      	ldr	r3, [pc, #124]	; (80008b4 <control_thread+0xe4>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d007      	beq.n	800084c <control_thread+0x7c>
			servo_enable_led(control.tvc_servo, NULL);
 800083c:	4b19      	ldr	r3, [pc, #100]	; (80008a4 <control_thread+0xd4>)
 800083e:	6998      	ldr	r0, [r3, #24]
 8000840:	2300      	movs	r3, #0
 8000842:	2201      	movs	r2, #1
 8000844:	2141      	movs	r1, #65	; 0x41
 8000846:	f000 ff3d 	bl	80016c4 <servo_write_u8>
 800084a:	e006      	b.n	800085a <control_thread+0x8a>
		} else {
			servo_disable_led(control.tvc_servo, NULL);
 800084c:	4b15      	ldr	r3, [pc, #84]	; (80008a4 <control_thread+0xd4>)
 800084e:	6998      	ldr	r0, [r3, #24]
 8000850:	2300      	movs	r3, #0
 8000852:	2200      	movs	r2, #0
 8000854:	2141      	movs	r1, #65	; 0x41
 8000856:	f000 ff35 	bl	80016c4 <servo_write_u8>
		}


		control_update(&control);
 800085a:	4812      	ldr	r0, [pc, #72]	; (80008a4 <control_thread+0xd4>)
 800085c:	f000 f82e 	bl	80008bc <control_update>


		switch(control.state) {
 8000860:	4b10      	ldr	r3, [pc, #64]	; (80008a4 <control_thread+0xd4>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	2b09      	cmp	r3, #9
 8000866:	d00e      	beq.n	8000886 <control_thread+0xb6>
 8000868:	2b09      	cmp	r3, #9
 800086a:	dc10      	bgt.n	800088e <control_thread+0xbe>
 800086c:	2b00      	cmp	r3, #0
 800086e:	d002      	beq.n	8000876 <control_thread+0xa6>
 8000870:	2b08      	cmp	r3, #8
 8000872:	d004      	beq.n	800087e <control_thread+0xae>
 8000874:	e00b      	b.n	800088e <control_thread+0xbe>
		case CS_IDLE:
			idle(&control);
 8000876:	480b      	ldr	r0, [pc, #44]	; (80008a4 <control_thread+0xd4>)
 8000878:	f000 f894 	bl	80009a4 <idle>
			break;
 800087c:	e00b      	b.n	8000896 <control_thread+0xc6>
		case CS_ABORT:
			_abort(&control);
 800087e:	4809      	ldr	r0, [pc, #36]	; (80008a4 <control_thread+0xd4>)
 8000880:	f000 f8c7 	bl	8000a12 <_abort>
			break;
 8000884:	e007      	b.n	8000896 <control_thread+0xc6>
		case CS_ERROR:
			error(&control);
 8000886:	4807      	ldr	r0, [pc, #28]	; (80008a4 <control_thread+0xd4>)
 8000888:	f000 f8ee 	bl	8000a68 <error>
			break;
 800088c:	e003      	b.n	8000896 <control_thread+0xc6>
		default:
			control.state = CS_ERROR;
 800088e:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <control_thread+0xd4>)
 8000890:	2209      	movs	r2, #9
 8000892:	701a      	strb	r2, [r3, #0]
			break;
 8000894:	bf00      	nop
		}
		vTaskDelayUntil( &last_wake_time, period );
 8000896:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <control_thread+0xe8>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4619      	mov	r1, r3
 800089c:	4803      	ldr	r0, [pc, #12]	; (80008ac <control_thread+0xdc>)
 800089e:	f009 f8af 	bl	8009a00 <vTaskDelayUntil>
	for(;;) {
 80008a2:	e7b2      	b.n	800080a <control_thread+0x3a>
 80008a4:	20000038 	.word	0x20000038
 80008a8:	20000070 	.word	0x20000070
 80008ac:	2000110c 	.word	0x2000110c
 80008b0:	20001110 	.word	0x20001110
 80008b4:	20001112 	.word	0x20001112
 80008b8:	0800af2c 	.word	0x0800af2c

080008bc <control_update>:
	}
}


static void control_update(CONTROL_INST_t * control) {
 80008bc:	b590      	push	{r4, r7, lr}
 80008be:	b087      	sub	sp, #28
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6178      	str	r0, [r7, #20]

	control->last_time = control->time;
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	685a      	ldr	r2, [r3, #4]
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	609a      	str	r2, [r3, #8]
	control->time = HAL_GetTick();
 80008cc:	f002 fc58 	bl	8003180 <HAL_GetTick>
 80008d0:	4602      	mov	r2, r0
 80008d2:	697b      	ldr	r3, [r7, #20]
 80008d4:	605a      	str	r2, [r3, #4]
	control->iter++;
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	695b      	ldr	r3, [r3, #20]
 80008da:	1c5a      	adds	r2, r3, #1
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	615a      	str	r2, [r3, #20]

	if(control->counter_active) {
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	7c1b      	ldrb	r3, [r3, #16]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d016      	beq.n	8000916 <control_update+0x5a>
		control->counter -= (control->time - control->last_time);
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	68db      	ldr	r3, [r3, #12]
 80008ec:	4619      	mov	r1, r3
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	689a      	ldr	r2, [r3, #8]
 80008f2:	697b      	ldr	r3, [r7, #20]
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	1ad3      	subs	r3, r2, r3
 80008f8:	440b      	add	r3, r1
 80008fa:	461a      	mov	r2, r3
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	60da      	str	r2, [r3, #12]
	}

	while(can_msgPending()) {
 8000900:	e009      	b.n	8000916 <control_update+0x5a>
		control->msg = can_readBuffer();
 8000902:	697c      	ldr	r4, [r7, #20]
 8000904:	463b      	mov	r3, r7
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff feb0 	bl	800066c <can_readBuffer>
 800090c:	3424      	adds	r4, #36	; 0x24
 800090e:	463b      	mov	r3, r7
 8000910:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000912:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	while(can_msgPending()) {
 8000916:	f7ff fe8f 	bl	8000638 <can_msgPending>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d1f0      	bne.n	8000902 <control_update+0x46>




	//read servo parameters
	servo_sync(control->tvc_servo);
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	4618      	mov	r0, r3
 8000926:	f000 ff90 	bl	800184a <servo_sync>


	//init error if there is an issue with a motor

	if(control_sched_should_run(control, CONTROL_SCHED_ABORT)) {
 800092a:	2101      	movs	r1, #1
 800092c:	6978      	ldr	r0, [r7, #20]
 800092e:	f000 f8bf 	bl	8000ab0 <control_sched_should_run>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d006      	beq.n	8000946 <control_update+0x8a>
		init_abort(control);
 8000938:	6978      	ldr	r0, [r7, #20]
 800093a:	f000 f84e 	bl	80009da <init_abort>
		control_sched_done(control, CONTROL_SCHED_ABORT);
 800093e:	2101      	movs	r1, #1
 8000940:	6978      	ldr	r0, [r7, #20]
 8000942:	f000 f8ca 	bl	8000ada <control_sched_done>
	}
}
 8000946:	bf00      	nop
 8000948:	371c      	adds	r7, #28
 800094a:	46bd      	mov	sp, r7
 800094c:	bd90      	pop	{r4, r7, pc}

0800094e <init_control>:

static void init_control(CONTROL_INST_t * control) {
 800094e:	b480      	push	{r7}
 8000950:	b083      	sub	sp, #12
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
	control->sched = CONTROL_SCHED_NOTHING;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	2200      	movs	r2, #0
 800095a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	control->counter_active = 0;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	2200      	movs	r2, #0
 8000962:	741a      	strb	r2, [r3, #16]
	control->needs_recover = 0;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2200      	movs	r2, #0
 8000968:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	control->hang_for_recovery = 1;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2201      	movs	r2, #1
 8000970:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
}
 8000974:	bf00      	nop
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <init_idle>:

static void init_idle(CONTROL_INST_t * control) {
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
	control->state = CS_IDLE;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	2200      	movs	r2, #0
 800098c:	701a      	strb	r2, [r3, #0]
	led_set_color(LED_GREEN);
 800098e:	2200      	movs	r2, #0
 8000990:	21ff      	movs	r1, #255	; 0xff
 8000992:	2000      	movs	r0, #0
 8000994:	f000 fad2 	bl	8000f3c <led_set_color>
	storage_disable();
 8000998:	f001 f8c6 	bl	8001b28 <storage_disable>
}
 800099c:	bf00      	nop
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <idle>:

static void idle(CONTROL_INST_t * control) {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	if(control_sched_should_run(control, CONTROL_SCHED_MOVE_TVC)) {
 80009ac:	2102      	movs	r1, #2
 80009ae:	6878      	ldr	r0, [r7, #4]
 80009b0:	f000 f87e 	bl	8000ab0 <control_sched_should_run>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d00b      	beq.n	80009d2 <idle+0x2e>
		servo_move(control->tvc_servo, control->tvc_mov_target);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	699a      	ldr	r2, [r3, #24]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	69db      	ldr	r3, [r3, #28]
 80009c2:	4619      	mov	r1, r3
 80009c4:	4610      	mov	r0, r2
 80009c6:	f000 ffc3 	bl	8001950 <servo_move>
		control_sched_done(control, CONTROL_SCHED_MOVE_TVC);
 80009ca:	2102      	movs	r1, #2
 80009cc:	6878      	ldr	r0, [r7, #4]
 80009ce:	f000 f884 	bl	8000ada <control_sched_done>
	}

}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}

080009da <init_abort>:

static void init_abort(CONTROL_INST_t * control) {
 80009da:	b580      	push	{r7, lr}
 80009dc:	b082      	sub	sp, #8
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
	led_set_color(LED_PINK);
 80009e2:	227f      	movs	r2, #127	; 0x7f
 80009e4:	2100      	movs	r1, #0
 80009e6:	207f      	movs	r0, #127	; 0x7f
 80009e8:	f000 faa8 	bl	8000f3c <led_set_color>
	control->state = CS_ABORT;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	2208      	movs	r2, #8
 80009f0:	701a      	strb	r2, [r3, #0]
	servo_move(control->tvc_servo, 2048); //2048 is the straight position
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	699b      	ldr	r3, [r3, #24]
 80009f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009fa:	4618      	mov	r0, r3
 80009fc:	f000 ffa8 	bl	8001950 <servo_move>
	control->counter_active=0;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2200      	movs	r2, #0
 8000a04:	741a      	strb	r2, [r3, #16]
	storage_disable();
 8000a06:	f001 f88f 	bl	8001b28 <storage_disable>
}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <_abort>:

static void _abort(CONTROL_INST_t * control) {
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b082      	sub	sp, #8
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	6078      	str	r0, [r7, #4]


	if(control_sched_should_run(control, CONTROL_SCHED_RECOVER)) {
 8000a1a:	2103      	movs	r1, #3
 8000a1c:	6878      	ldr	r0, [r7, #4]
 8000a1e:	f000 f847 	bl	8000ab0 <control_sched_should_run>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d006      	beq.n	8000a36 <_abort+0x24>
		init_idle(control);
 8000a28:	6878      	ldr	r0, [r7, #4]
 8000a2a:	f7ff ffa9 	bl	8000980 <init_idle>
		control_sched_done(control, CONTROL_SCHED_RECOVER);
 8000a2e:	2103      	movs	r1, #3
 8000a30:	6878      	ldr	r0, [r7, #4]
 8000a32:	f000 f852 	bl	8000ada <control_sched_done>
	}
}
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <init_error>:

static void init_error(CONTROL_INST_t * control) {
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b082      	sub	sp, #8
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
	led_set_color(LED_RED);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2100      	movs	r1, #0
 8000a4a:	20ff      	movs	r0, #255	; 0xff
 8000a4c:	f000 fa76 	bl	8000f3c <led_set_color>
	control->state = CS_ERROR;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2209      	movs	r2, #9
 8000a54:	701a      	strb	r2, [r3, #0]
	control->counter_active = 0;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2200      	movs	r2, #0
 8000a5a:	741a      	strb	r2, [r3, #16]
	storage_disable();
 8000a5c:	f001 f864 	bl	8001b28 <storage_disable>
}
 8000a60:	bf00      	nop
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <error>:

static void error(CONTROL_INST_t * control) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
	//wait for user release
	if(control_sched_should_run(control, CONTROL_SCHED_RECOVER)) {
 8000a70:	2103      	movs	r1, #3
 8000a72:	6878      	ldr	r0, [r7, #4]
 8000a74:	f000 f81c 	bl	8000ab0 <control_sched_should_run>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d006      	beq.n	8000a8c <error+0x24>
		init_idle(control);
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	f7ff ff7e 	bl	8000980 <init_idle>
		control_sched_done(control, CONTROL_SCHED_RECOVER);
 8000a84:	2103      	movs	r1, #3
 8000a86:	6878      	ldr	r0, [r7, #4]
 8000a88:	f000 f827 	bl	8000ada <control_sched_done>
	}
}
 8000a8c:	bf00      	nop
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <control_release>:

	return status;
}


void control_release() {
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
	control.hang_for_recovery = 0;
 8000a98:	4b04      	ldr	r3, [pc, #16]	; (8000aac <control_release+0x18>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	20000038 	.word	0x20000038

08000ab0 <control_sched_should_run>:


static uint8_t control_sched_should_run(CONTROL_INST_t * control, CONTROL_SCHED_t num) {
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
 8000ab8:	460b      	mov	r3, r1
 8000aba:	70fb      	strb	r3, [r7, #3]
	return control->sched == num;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ac2:	78fa      	ldrb	r2, [r7, #3]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	bf0c      	ite	eq
 8000ac8:	2301      	moveq	r3, #1
 8000aca:	2300      	movne	r3, #0
 8000acc:	b2db      	uxtb	r3, r3
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <control_sched_done>:

static void control_sched_done(CONTROL_INST_t * control, CONTROL_SCHED_t num) {
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b082      	sub	sp, #8
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
 8000ae2:	460b      	mov	r3, r1
 8000ae4:	70fb      	strb	r3, [r7, #3]
	if(control->sched == num) {
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000aec:	78fa      	ldrb	r2, [r7, #3]
 8000aee:	429a      	cmp	r2, r3
 8000af0:	d104      	bne.n	8000afc <control_sched_done+0x22>
		control->sched = CONTROL_SCHED_NOTHING;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2200      	movs	r2, #0
 8000af6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	} else {
		init_error(control);
	}
}
 8000afa:	e002      	b.n	8000b02 <control_sched_done+0x28>
		init_error(control);
 8000afc:	6878      	ldr	r0, [r7, #4]
 8000afe:	f7ff ff9e 	bl	8000a3e <init_error>
}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
	...

08000b0c <calc_crc>:

/**********************
 *	DECLARATIONS
 **********************/

static uint16_t calc_crc(uint16_t crc_accum, uint8_t * data_blk_ptr, uint16_t data_blk_size) {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	463b      	mov	r3, r7
 8000b16:	6019      	str	r1, [r3, #0]
 8000b18:	4611      	mov	r1, r2
 8000b1a:	1dbb      	adds	r3, r7, #6
 8000b1c:	4602      	mov	r2, r0
 8000b1e:	801a      	strh	r2, [r3, #0]
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	460a      	mov	r2, r1
 8000b24:	801a      	strh	r2, [r3, #0]
    unsigned short i, j;
    unsigned short crc_table[256] = {
 8000b26:	f107 030c 	add.w	r3, r7, #12
 8000b2a:	4a1e      	ldr	r2, [pc, #120]	; (8000ba4 <calc_crc+0x98>)
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	4611      	mov	r1, r2
 8000b30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b34:	461a      	mov	r2, r3
 8000b36:	f00a f8ab 	bl	800ac90 <memcpy>
        0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261,
        0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231,
        0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202
    };

    for(j = 0; j < data_blk_size; j++)
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 8000b40:	e023      	b.n	8000b8a <calc_crc+0x7e>
    {
        i = ((unsigned short)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 8000b42:	1dbb      	adds	r3, r7, #6
 8000b44:	881b      	ldrh	r3, [r3, #0]
 8000b46:	0a1b      	lsrs	r3, r3, #8
 8000b48:	b29a      	uxth	r2, r3
 8000b4a:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000b4e:	4639      	mov	r1, r7
 8000b50:	6809      	ldr	r1, [r1, #0]
 8000b52:	440b      	add	r3, r1
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	b29b      	uxth	r3, r3
 8000b58:	4053      	eors	r3, r2
 8000b5a:	b29b      	uxth	r3, r3
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
        crc_accum = (crc_accum << 8) ^ crc_table[i];
 8000b62:	1dbb      	adds	r3, r7, #6
 8000b64:	881b      	ldrh	r3, [r3, #0]
 8000b66:	021b      	lsls	r3, r3, #8
 8000b68:	b21a      	sxth	r2, r3
 8000b6a:	f8b7 120c 	ldrh.w	r1, [r7, #524]	; 0x20c
 8000b6e:	f107 030c 	add.w	r3, r7, #12
 8000b72:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8000b76:	b21b      	sxth	r3, r3
 8000b78:	4053      	eors	r3, r2
 8000b7a:	b21a      	sxth	r2, r3
 8000b7c:	1dbb      	adds	r3, r7, #6
 8000b7e:	801a      	strh	r2, [r3, #0]
    for(j = 0; j < data_blk_size; j++)
 8000b80:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000b84:	3301      	adds	r3, #1
 8000b86:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 8000b8a:	1d3b      	adds	r3, r7, #4
 8000b8c:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 8000b90:	881b      	ldrh	r3, [r3, #0]
 8000b92:	429a      	cmp	r2, r3
 8000b94:	d3d5      	bcc.n	8000b42 <calc_crc+0x36>
    }

    return crc_accum;
 8000b96:	1dbb      	adds	r3, r7, #6
 8000b98:	881b      	ldrh	r3, [r3, #0]
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	0800acd4 	.word	0x0800acd4

08000ba8 <dsv2_init>:


void dsv2_init(DSV2_INST_t * dsv2) {
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
	static uint32_t id_counter = 0;
	dsv2->id = id_counter++;
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <dsv2_init+0x24>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	1c5a      	adds	r2, r3, #1
 8000bb6:	4905      	ldr	r1, [pc, #20]	; (8000bcc <dsv2_init+0x24>)
 8000bb8:	600a      	str	r2, [r1, #0]
 8000bba:	687a      	ldr	r2, [r7, #4]
 8000bbc:	6013      	str	r3, [r2, #0]
}
 8000bbe:	bf00      	nop
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	20001114 	.word	0x20001114

08000bd0 <dsv2_create_frame>:

uint16_t dsv2_create_frame(DSV2_INST_t * dsv2, uint8_t dev_id, uint16_t data_len, uint8_t inst, uint8_t * data) {
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	4608      	mov	r0, r1
 8000bda:	4611      	mov	r1, r2
 8000bdc:	461a      	mov	r2, r3
 8000bde:	4603      	mov	r3, r0
 8000be0:	70fb      	strb	r3, [r7, #3]
 8000be2:	460b      	mov	r3, r1
 8000be4:	803b      	strh	r3, [r7, #0]
 8000be6:	4613      	mov	r3, r2
 8000be8:	70bb      	strb	r3, [r7, #2]
	dsv2->tx.data[0] = H1;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	22ff      	movs	r2, #255	; 0xff
 8000bee:	f883 2818 	strb.w	r2, [r3, #2072]	; 0x818
	dsv2->tx.data[1] = H2;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	22ff      	movs	r2, #255	; 0xff
 8000bf6:	f883 2819 	strb.w	r2, [r3, #2073]	; 0x819
	dsv2->tx.data[2] = H3;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	22fd      	movs	r2, #253	; 0xfd
 8000bfe:	f883 281a 	strb.w	r2, [r3, #2074]	; 0x81a
	dsv2->tx.data[3] = H4;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2200      	movs	r2, #0
 8000c06:	f883 281b 	strb.w	r2, [r3, #2075]	; 0x81b
	dsv2->tx.data[4] = dev_id;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	78fa      	ldrb	r2, [r7, #3]
 8000c0e:	f883 281c 	strb.w	r2, [r3, #2076]	; 0x81c
	dsv2->tx.data[5] = (data_len+3) & 0xff;
 8000c12:	883b      	ldrh	r3, [r7, #0]
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	3303      	adds	r3, #3
 8000c18:	b2da      	uxtb	r2, r3
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	f883 281d 	strb.w	r2, [r3, #2077]	; 0x81d
	dsv2->tx.data[6] = (data_len+3)>>8;
 8000c20:	883b      	ldrh	r3, [r7, #0]
 8000c22:	3303      	adds	r3, #3
 8000c24:	121b      	asrs	r3, r3, #8
 8000c26:	b2da      	uxtb	r2, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	f883 281e 	strb.w	r2, [r3, #2078]	; 0x81e
	dsv2->tx.data[7] = inst;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	78ba      	ldrb	r2, [r7, #2]
 8000c32:	f883 281f 	strb.w	r2, [r3, #2079]	; 0x81f
	uint16_t counter=8;
 8000c36:	2308      	movs	r3, #8
 8000c38:	81fb      	strh	r3, [r7, #14]
	for(uint16_t i = 0; i < data_len; i++) {
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	81bb      	strh	r3, [r7, #12]
 8000c3e:	e00e      	b.n	8000c5e <dsv2_create_frame+0x8e>
		dsv2->tx.data[counter++] = data[i];
 8000c40:	89bb      	ldrh	r3, [r7, #12]
 8000c42:	69ba      	ldr	r2, [r7, #24]
 8000c44:	441a      	add	r2, r3
 8000c46:	89fb      	ldrh	r3, [r7, #14]
 8000c48:	1c59      	adds	r1, r3, #1
 8000c4a:	81f9      	strh	r1, [r7, #14]
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	7812      	ldrb	r2, [r2, #0]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	440b      	add	r3, r1
 8000c54:	f883 2818 	strb.w	r2, [r3, #2072]	; 0x818
	for(uint16_t i = 0; i < data_len; i++) {
 8000c58:	89bb      	ldrh	r3, [r7, #12]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	81bb      	strh	r3, [r7, #12]
 8000c5e:	89ba      	ldrh	r2, [r7, #12]
 8000c60:	883b      	ldrh	r3, [r7, #0]
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d3ec      	bcc.n	8000c40 <dsv2_create_frame+0x70>
	}
	uint16_t crc = calc_crc(0, dsv2->tx.data, data_len + 8);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	f603 0118 	addw	r1, r3, #2072	; 0x818
 8000c6c:	883b      	ldrh	r3, [r7, #0]
 8000c6e:	3308      	adds	r3, #8
 8000c70:	b29b      	uxth	r3, r3
 8000c72:	461a      	mov	r2, r3
 8000c74:	2000      	movs	r0, #0
 8000c76:	f7ff ff49 	bl	8000b0c <calc_crc>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	817b      	strh	r3, [r7, #10]
	dsv2->tx.data[counter++] = crc&0xff; //crc bytes are inverted (LSB first) !!
 8000c7e:	89fb      	ldrh	r3, [r7, #14]
 8000c80:	1c5a      	adds	r2, r3, #1
 8000c82:	81fa      	strh	r2, [r7, #14]
 8000c84:	4619      	mov	r1, r3
 8000c86:	897b      	ldrh	r3, [r7, #10]
 8000c88:	b2da      	uxtb	r2, r3
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	440b      	add	r3, r1
 8000c8e:	f883 2818 	strb.w	r2, [r3, #2072]	; 0x818
	dsv2->tx.data[counter++] = crc>>8;
 8000c92:	897b      	ldrh	r3, [r7, #10]
 8000c94:	0a1b      	lsrs	r3, r3, #8
 8000c96:	b29a      	uxth	r2, r3
 8000c98:	89fb      	ldrh	r3, [r7, #14]
 8000c9a:	1c59      	adds	r1, r3, #1
 8000c9c:	81f9      	strh	r1, [r7, #14]
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	b2d2      	uxtb	r2, r2
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	440b      	add	r3, r1
 8000ca6:	f883 2818 	strb.w	r2, [r3, #2072]	; 0x818
	return counter;
 8000caa:	89fb      	ldrh	r3, [r7, #14]
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3710      	adds	r7, #16
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <dsv2_decode_fragment>:

/*
 * 	d: received byte
 *
 */
DSV2_ERROR_t dsv2_decode_fragment(DSV2_INST_t * dsv2, uint8_t d) {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	460b      	mov	r3, r1
 8000cbe:	70fb      	strb	r3, [r7, #3]
		dsv2->rx.restart_state = DSV2_WAITING_H2;
		dsv2->rx.crc_data[0] = d;
	}
	*/

    if(dsv2->rx.state == DSV2_WAITING_H1 && d == H1) {
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	7adb      	ldrb	r3, [r3, #11]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d10b      	bne.n	8000ce0 <dsv2_decode_fragment+0x2c>
 8000cc8:	78fb      	ldrb	r3, [r7, #3]
 8000cca:	2bff      	cmp	r3, #255	; 0xff
 8000ccc:	d108      	bne.n	8000ce0 <dsv2_decode_fragment+0x2c>
    	dsv2->rx.state = DSV2_WAITING_H2;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	72da      	strb	r2, [r3, #11]
    	dsv2->rx.crc_data[0] = d;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	78fa      	ldrb	r2, [r7, #3]
 8000cd8:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    	return DSV2_PROGRESS;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	e0eb      	b.n	8000eb8 <dsv2_decode_fragment+0x204>
    }
    if(dsv2->rx.state == DSV2_WAITING_H2 && d == H2) {
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	7adb      	ldrb	r3, [r3, #11]
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d10b      	bne.n	8000d00 <dsv2_decode_fragment+0x4c>
 8000ce8:	78fb      	ldrb	r3, [r7, #3]
 8000cea:	2bff      	cmp	r3, #255	; 0xff
 8000cec:	d108      	bne.n	8000d00 <dsv2_decode_fragment+0x4c>
		dsv2->rx.state = DSV2_WAITING_H3;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2202      	movs	r2, #2
 8000cf2:	72da      	strb	r2, [r3, #11]
		dsv2->rx.crc_data[1] = d;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	78fa      	ldrb	r2, [r7, #3]
 8000cf8:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
		return DSV2_PROGRESS;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	e0db      	b.n	8000eb8 <dsv2_decode_fragment+0x204>
	}
    if(dsv2->rx.state == DSV2_WAITING_H3 && d == H3) {
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	7adb      	ldrb	r3, [r3, #11]
 8000d04:	2b02      	cmp	r3, #2
 8000d06:	d10b      	bne.n	8000d20 <dsv2_decode_fragment+0x6c>
 8000d08:	78fb      	ldrb	r3, [r7, #3]
 8000d0a:	2bfd      	cmp	r3, #253	; 0xfd
 8000d0c:	d108      	bne.n	8000d20 <dsv2_decode_fragment+0x6c>
		dsv2->rx.state = DSV2_WAITING_H4;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2203      	movs	r2, #3
 8000d12:	72da      	strb	r2, [r3, #11]
		dsv2->rx.crc_data[2] = d;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	78fa      	ldrb	r2, [r7, #3]
 8000d18:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
		return DSV2_PROGRESS;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	e0cb      	b.n	8000eb8 <dsv2_decode_fragment+0x204>
	}
    if(dsv2->rx.state == DSV2_WAITING_H4 && d == H4) {
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	7adb      	ldrb	r3, [r3, #11]
 8000d24:	2b03      	cmp	r3, #3
 8000d26:	d10b      	bne.n	8000d40 <dsv2_decode_fragment+0x8c>
 8000d28:	78fb      	ldrb	r3, [r7, #3]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d108      	bne.n	8000d40 <dsv2_decode_fragment+0x8c>
		dsv2->rx.state = DSV2_WAITING_ID;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2204      	movs	r2, #4
 8000d32:	72da      	strb	r2, [r3, #11]
		dsv2->rx.crc_data[3] = d;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	78fa      	ldrb	r2, [r7, #3]
 8000d38:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
		return DSV2_PROGRESS;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	e0bb      	b.n	8000eb8 <dsv2_decode_fragment+0x204>
	}
    if(dsv2->rx.state == DSV2_WAITING_ID) {
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	7adb      	ldrb	r3, [r3, #11]
 8000d44:	2b04      	cmp	r3, #4
 8000d46:	d10b      	bne.n	8000d60 <dsv2_decode_fragment+0xac>
		dsv2->rx.state = DSV2_WAITING_LEN1;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2205      	movs	r2, #5
 8000d4c:	72da      	strb	r2, [r3, #11]
		dsv2->rx.crc_data[4] = d;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	78fa      	ldrb	r2, [r7, #3]
 8000d52:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
		dsv2->rx.dev_id = d;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	78fa      	ldrb	r2, [r7, #3]
 8000d5a:	711a      	strb	r2, [r3, #4]
		return DSV2_PROGRESS;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	e0ab      	b.n	8000eb8 <dsv2_decode_fragment+0x204>
	}
    if(dsv2->rx.state == DSV2_WAITING_LEN1) {
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	7adb      	ldrb	r3, [r3, #11]
 8000d64:	2b05      	cmp	r3, #5
 8000d66:	d10c      	bne.n	8000d82 <dsv2_decode_fragment+0xce>
		dsv2->rx.state = DSV2_WAITING_LEN2;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2206      	movs	r2, #6
 8000d6c:	72da      	strb	r2, [r3, #11]
		dsv2->rx.crc_data[5] = d;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	78fa      	ldrb	r2, [r7, #3]
 8000d72:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
		dsv2->rx.data_len = d;
 8000d76:	78fb      	ldrb	r3, [r7, #3]
 8000d78:	b29a      	uxth	r2, r3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	80da      	strh	r2, [r3, #6]
		return DSV2_PROGRESS;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e09a      	b.n	8000eb8 <dsv2_decode_fragment+0x204>
	}
    if(dsv2->rx.state == DSV2_WAITING_LEN2) {
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	7adb      	ldrb	r3, [r3, #11]
 8000d86:	2b06      	cmp	r3, #6
 8000d88:	d113      	bne.n	8000db2 <dsv2_decode_fragment+0xfe>
		dsv2->rx.state = DSV2_WAITING_INST;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2207      	movs	r2, #7
 8000d8e:	72da      	strb	r2, [r3, #11]
		dsv2->rx.crc_data[6] = d;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	78fa      	ldrb	r2, [r7, #3]
 8000d94:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
		dsv2->rx.data_len |= d<<8;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	88db      	ldrh	r3, [r3, #6]
 8000d9c:	b21a      	sxth	r2, r3
 8000d9e:	78fb      	ldrb	r3, [r7, #3]
 8000da0:	021b      	lsls	r3, r3, #8
 8000da2:	b21b      	sxth	r3, r3
 8000da4:	4313      	orrs	r3, r2
 8000da6:	b21b      	sxth	r3, r3
 8000da8:	b29a      	uxth	r2, r3
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	80da      	strh	r2, [r3, #6]
		return DSV2_PROGRESS;
 8000dae:	2301      	movs	r3, #1
 8000db0:	e082      	b.n	8000eb8 <dsv2_decode_fragment+0x204>
	}
    if(dsv2->rx.state == DSV2_WAITING_INST) {
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	7adb      	ldrb	r3, [r3, #11]
 8000db6:	2b07      	cmp	r3, #7
 8000db8:	d115      	bne.n	8000de6 <dsv2_decode_fragment+0x132>
		dsv2->rx.state = DSV2_WAITING_DATA;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2208      	movs	r2, #8
 8000dbe:	72da      	strb	r2, [r3, #11]
		dsv2->rx.counter = 0;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	821a      	strh	r2, [r3, #16]
		dsv2->rx.crc_data[7] = d;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	78fa      	ldrb	r2, [r7, #3]
 8000dca:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
		dsv2->rx.inst = d;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	78fa      	ldrb	r2, [r7, #3]
 8000dd2:	729a      	strb	r2, [r3, #10]
		if(dsv2->rx.inst != 85) {
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	7a9b      	ldrb	r3, [r3, #10]
 8000dd8:	2b55      	cmp	r3, #85	; 0x55
 8000dda:	d002      	beq.n	8000de2 <dsv2_decode_fragment+0x12e>
			dsv2->rx.state = DSV2_WAITING_H1;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2200      	movs	r2, #0
 8000de0:	72da      	strb	r2, [r3, #11]
		}
		return DSV2_PROGRESS;
 8000de2:	2301      	movs	r3, #1
 8000de4:	e068      	b.n	8000eb8 <dsv2_decode_fragment+0x204>
	}
	if(dsv2->rx.state == DSV2_WAITING_DATA) {
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	7adb      	ldrb	r3, [r3, #11]
 8000dea:	2b08      	cmp	r3, #8
 8000dec:	d11f      	bne.n	8000e2e <dsv2_decode_fragment+0x17a>
		dsv2->rx.crc_data[dsv2->rx.counter + 8] = d;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	8a1b      	ldrh	r3, [r3, #16]
 8000df2:	3308      	adds	r3, #8
 8000df4:	687a      	ldr	r2, [r7, #4]
 8000df6:	4413      	add	r3, r2
 8000df8:	78fa      	ldrb	r2, [r7, #3]
 8000dfa:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
		dsv2->rx.data[dsv2->rx.counter++] = d;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	8a1b      	ldrh	r3, [r3, #16]
 8000e02:	1c5a      	adds	r2, r3, #1
 8000e04:	b291      	uxth	r1, r2
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	8211      	strh	r1, [r2, #16]
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4413      	add	r3, r2
 8000e10:	78fa      	ldrb	r2, [r7, #3]
 8000e12:	749a      	strb	r2, [r3, #18]
		if(dsv2->rx.counter == dsv2->rx.data_len-3) {  //DATA LENGTH CONTAINS INST, ERR AND CRC
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	8a1b      	ldrh	r3, [r3, #16]
 8000e18:	461a      	mov	r2, r3
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	88db      	ldrh	r3, [r3, #6]
 8000e1e:	3b03      	subs	r3, #3
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d102      	bne.n	8000e2a <dsv2_decode_fragment+0x176>
			dsv2->rx.state = DSV2_WAITING_CRC1;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2209      	movs	r2, #9
 8000e28:	72da      	strb	r2, [r3, #11]
		}
		return DSV2_PROGRESS;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e044      	b.n	8000eb8 <dsv2_decode_fragment+0x204>
	}
	if(dsv2->rx.state == DSV2_WAITING_CRC1) {
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	7adb      	ldrb	r3, [r3, #11]
 8000e32:	2b09      	cmp	r3, #9
 8000e34:	d108      	bne.n	8000e48 <dsv2_decode_fragment+0x194>
		dsv2->rx.state = DSV2_WAITING_CRC2;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	220a      	movs	r2, #10
 8000e3a:	72da      	strb	r2, [r3, #11]
		dsv2->rx.crc = d;
 8000e3c:	78fb      	ldrb	r3, [r7, #3]
 8000e3e:	b29a      	uxth	r2, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	811a      	strh	r2, [r3, #8]
		return DSV2_PROGRESS;
 8000e44:	2301      	movs	r3, #1
 8000e46:	e037      	b.n	8000eb8 <dsv2_decode_fragment+0x204>
	}
	if(dsv2->rx.state == DSV2_WAITING_CRC2) {
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	7adb      	ldrb	r3, [r3, #11]
 8000e4c:	2b0a      	cmp	r3, #10
 8000e4e:	d12c      	bne.n	8000eaa <dsv2_decode_fragment+0x1f6>
		dsv2->rx.state = DSV2_WAITING_H1;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2200      	movs	r2, #0
 8000e54:	72da      	strb	r2, [r3, #11]
		dsv2->rx.crc |= d<<8;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	891b      	ldrh	r3, [r3, #8]
 8000e5a:	b21a      	sxth	r2, r3
 8000e5c:	78fb      	ldrb	r3, [r7, #3]
 8000e5e:	021b      	lsls	r3, r3, #8
 8000e60:	b21b      	sxth	r3, r3
 8000e62:	4313      	orrs	r3, r2
 8000e64:	b21b      	sxth	r3, r3
 8000e66:	b29a      	uxth	r2, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	811a      	strh	r2, [r3, #8]

		uint16_t crc = calc_crc(0, dsv2->rx.crc_data, dsv2->rx.data_len + 5);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f203 4112 	addw	r1, r3, #1042	; 0x412
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	88db      	ldrh	r3, [r3, #6]
 8000e76:	3305      	adds	r3, #5
 8000e78:	b29b      	uxth	r3, r3
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	2000      	movs	r0, #0
 8000e7e:	f7ff fe45 	bl	8000b0c <calc_crc>
 8000e82:	4603      	mov	r3, r0
 8000e84:	81fb      	strh	r3, [r7, #14]
		dsv2->rx.counter = 0;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2200      	movs	r2, #0
 8000e8a:	821a      	strh	r2, [r3, #16]

		if(dsv2->rx.inst == 85) {
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	7a9b      	ldrb	r3, [r3, #10]
 8000e90:	2b55      	cmp	r3, #85	; 0x55
 8000e92:	d108      	bne.n	8000ea6 <dsv2_decode_fragment+0x1f2>
			if(crc == dsv2->rx.crc) {
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	891b      	ldrh	r3, [r3, #8]
 8000e98:	89fa      	ldrh	r2, [r7, #14]
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	d101      	bne.n	8000ea2 <dsv2_decode_fragment+0x1ee>
				return DSV2_SUCCESS;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	e00a      	b.n	8000eb8 <dsv2_decode_fragment+0x204>
			}else {
				return DSV2_WRONG_CRC;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	e008      	b.n	8000eb8 <dsv2_decode_fragment+0x204>
			}
		} else {
			return DSV2_PROGRESS;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e006      	b.n	8000eb8 <dsv2_decode_fragment+0x204>




	}
	dsv2->rx.state = DSV2_WAITING_H1;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2200      	movs	r2, #0
 8000eae:	72da      	strb	r2, [r3, #11]
	dsv2->rx.counter = 0;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	821a      	strh	r2, [r3, #16]
	return DSV2_ERROR;
 8000eb6:	2303      	movs	r3, #3
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <dsv2_rx_data>:

uint8_t * dsv2_rx_data(DSV2_INST_t * dsv2) {
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
	return dsv2->rx.data;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	3312      	adds	r3, #18
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <dsv2_tx_data>:

uint8_t * dsv2_tx_data(DSV2_INST_t * dsv2) {
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
	return dsv2->tx.data;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f603 0318 	addw	r3, r3, #2072	; 0x818
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
	...

08000ef4 <led_init>:

/**********************
 *	DECLARATIONS
 **********************/

void led_init(void) {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
	LED_TIM.Instance->ARR = LED_MAX;
 8000ef8:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <led_init+0x44>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000f00:	62da      	str	r2, [r3, #44]	; 0x2c
	LED_TIM.Instance->CCR1 = 0;
 8000f02:	4b0d      	ldr	r3, [pc, #52]	; (8000f38 <led_init+0x44>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	2200      	movs	r2, #0
 8000f08:	635a      	str	r2, [r3, #52]	; 0x34
	LED_TIM.Instance->CCR2 = 0;
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <led_init+0x44>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	639a      	str	r2, [r3, #56]	; 0x38
	LED_TIM.Instance->CCR3 = 0;
 8000f12:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <led_init+0x44>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	2200      	movs	r2, #0
 8000f18:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIMEx_PWMN_Start(&LED_TIM, TIM_CHANNEL_1);
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	4806      	ldr	r0, [pc, #24]	; (8000f38 <led_init+0x44>)
 8000f1e:	f006 fa7b 	bl	8007418 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&LED_TIM, TIM_CHANNEL_2);
 8000f22:	2104      	movs	r1, #4
 8000f24:	4804      	ldr	r0, [pc, #16]	; (8000f38 <led_init+0x44>)
 8000f26:	f006 fa77 	bl	8007418 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&LED_TIM, TIM_CHANNEL_3);
 8000f2a:	2108      	movs	r1, #8
 8000f2c:	4802      	ldr	r0, [pc, #8]	; (8000f38 <led_init+0x44>)
 8000f2e:	f006 fa73 	bl	8007418 <HAL_TIMEx_PWMN_Start>
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	2000704c 	.word	0x2000704c

08000f3c <led_set_color>:

void led_set_color(uint8_t r, uint8_t g, uint8_t b) {
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
 8000f46:	460b      	mov	r3, r1
 8000f48:	71bb      	strb	r3, [r7, #6]
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	717b      	strb	r3, [r7, #5]
	LED_TIM.Instance->CCR1 = r;
 8000f4e:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <led_set_color+0x38>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	79fa      	ldrb	r2, [r7, #7]
 8000f54:	635a      	str	r2, [r3, #52]	; 0x34
	LED_TIM.Instance->CCR2 = g;
 8000f56:	4b07      	ldr	r3, [pc, #28]	; (8000f74 <led_set_color+0x38>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	79ba      	ldrb	r2, [r7, #6]
 8000f5c:	639a      	str	r2, [r3, #56]	; 0x38
	LED_TIM.Instance->CCR3 = b;
 8000f5e:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <led_set_color+0x38>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	797a      	ldrb	r2, [r7, #5]
 8000f64:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	2000704c 	.word	0x2000704c

08000f78 <util_buffer_u8_init>:
extern "C"{
#endif


//U8 BUFFER
static inline void util_buffer_u8_init(UTIL_BUFFER_U8_t * bfr, uint8_t * buffer, uint16_t bfr_len) {
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	4613      	mov	r3, r2
 8000f84:	80fb      	strh	r3, [r7, #6]
	bfr->c_ix = 0;
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	801a      	strh	r2, [r3, #0]
	bfr->l_ix = 0;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	805a      	strh	r2, [r3, #2]
	bfr->bfr_len = bfr_len;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	88fa      	ldrh	r2, [r7, #6]
 8000f96:	809a      	strh	r2, [r3, #4]
	bfr->buffer = buffer;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	68ba      	ldr	r2, [r7, #8]
 8000f9c:	609a      	str	r2, [r3, #8]
}
 8000f9e:	bf00      	nop
 8000fa0:	3714      	adds	r7, #20
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr

08000faa <util_buffer_u8_add>:

static inline void util_buffer_u8_add(UTIL_BUFFER_U8_t * bfr, uint8_t d) {
 8000faa:	b480      	push	{r7}
 8000fac:	b083      	sub	sp, #12
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	70fb      	strb	r3, [r7, #3]
	bfr->buffer[bfr->c_ix++] = d;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	689a      	ldr	r2, [r3, #8]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	881b      	ldrh	r3, [r3, #0]
 8000fbe:	1c59      	adds	r1, r3, #1
 8000fc0:	b288      	uxth	r0, r1
 8000fc2:	6879      	ldr	r1, [r7, #4]
 8000fc4:	8008      	strh	r0, [r1, #0]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	78fa      	ldrb	r2, [r7, #3]
 8000fca:	701a      	strb	r2, [r3, #0]
	if(bfr->c_ix == bfr->bfr_len) bfr->c_ix = 0;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	881a      	ldrh	r2, [r3, #0]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	889b      	ldrh	r3, [r3, #4]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d102      	bne.n	8000fde <util_buffer_u8_add+0x34>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	801a      	strh	r2, [r3, #0]
}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr

08000fea <util_buffer_u8_get>:

static inline uint8_t util_buffer_u8_get(UTIL_BUFFER_U8_t * bfr) {
 8000fea:	b480      	push	{r7}
 8000fec:	b085      	sub	sp, #20
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
	uint8_t tmp = bfr->buffer[bfr->l_ix++];
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	689a      	ldr	r2, [r3, #8]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	885b      	ldrh	r3, [r3, #2]
 8000ffa:	1c59      	adds	r1, r3, #1
 8000ffc:	b288      	uxth	r0, r1
 8000ffe:	6879      	ldr	r1, [r7, #4]
 8001000:	8048      	strh	r0, [r1, #2]
 8001002:	4413      	add	r3, r2
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	73fb      	strb	r3, [r7, #15]
	if(bfr->l_ix == bfr->bfr_len) bfr->l_ix=0;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	885a      	ldrh	r2, [r3, #2]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	889b      	ldrh	r3, [r3, #4]
 8001010:	429a      	cmp	r2, r3
 8001012:	d102      	bne.n	800101a <util_buffer_u8_get+0x30>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2200      	movs	r2, #0
 8001018:	805a      	strh	r2, [r3, #2]
	return tmp;
 800101a:	7bfb      	ldrb	r3, [r7, #15]
}
 800101c:	4618      	mov	r0, r3
 800101e:	3714      	adds	r7, #20
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <util_buffer_u8_isempty>:
	ix = bfr->c_ix - ix - 1;
	while(ix < 0) ix += bfr->bfr_len;
	return bfr->buffer[ix];
}

static inline uint8_t util_buffer_u8_isempty(UTIL_BUFFER_U8_t * bfr) {
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	return bfr->l_ix == bfr->c_ix;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	885a      	ldrh	r2, [r3, #2]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	881b      	ldrh	r3, [r3, #0]
 8001038:	429a      	cmp	r2, r3
 800103a:	bf0c      	ite	eq
 800103c:	2301      	moveq	r3, #1
 800103e:	2300      	movne	r3, #0
 8001040:	b2db      	uxtb	r3, r3
}
 8001042:	4618      	mov	r0, r3
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
	...

08001050 <HAL_UART_RxCpltCallback>:

/*
 * UART RX ISR
 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
	static BaseType_t xHigherPriorityTaskWoken = pdFALSE;
	for(uint16_t i = 0; i < serial_devices_count; i++) {
 8001058:	2300      	movs	r3, #0
 800105a:	81fb      	strh	r3, [r7, #14]
 800105c:	e021      	b.n	80010a2 <HAL_UART_RxCpltCallback+0x52>
		if(serial_devices[i]->uart == huart) {
 800105e:	89fb      	ldrh	r3, [r7, #14]
 8001060:	4a1a      	ldr	r2, [pc, #104]	; (80010cc <HAL_UART_RxCpltCallback+0x7c>)
 8001062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	687a      	ldr	r2, [r7, #4]
 800106a:	429a      	cmp	r2, r3
 800106c:	d116      	bne.n	800109c <HAL_UART_RxCpltCallback+0x4c>
			util_buffer_u8_add(&serial_devices[i]->bfr, serial_devices[i]->dma_buffer);
 800106e:	89fb      	ldrh	r3, [r7, #14]
 8001070:	4a16      	ldr	r2, [pc, #88]	; (80010cc <HAL_UART_RxCpltCallback+0x7c>)
 8001072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001076:	f103 0210 	add.w	r2, r3, #16
 800107a:	89fb      	ldrh	r3, [r7, #14]
 800107c:	4913      	ldr	r1, [pc, #76]	; (80010cc <HAL_UART_RxCpltCallback+0x7c>)
 800107e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001082:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 8001086:	4619      	mov	r1, r3
 8001088:	4610      	mov	r0, r2
 800108a:	f7ff ff8e 	bl	8000faa <util_buffer_u8_add>
			xSemaphoreGiveFromISR( serial_rx_sem, &xHigherPriorityTaskWoken );
 800108e:	4b10      	ldr	r3, [pc, #64]	; (80010d0 <HAL_UART_RxCpltCallback+0x80>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4910      	ldr	r1, [pc, #64]	; (80010d4 <HAL_UART_RxCpltCallback+0x84>)
 8001094:	4618      	mov	r0, r3
 8001096:	f008 f8cd 	bl	8009234 <xQueueGiveFromISR>
			break;
 800109a:	e007      	b.n	80010ac <HAL_UART_RxCpltCallback+0x5c>
	for(uint16_t i = 0; i < serial_devices_count; i++) {
 800109c:	89fb      	ldrh	r3, [r7, #14]
 800109e:	3301      	adds	r3, #1
 80010a0:	81fb      	strh	r3, [r7, #14]
 80010a2:	4b0d      	ldr	r3, [pc, #52]	; (80010d8 <HAL_UART_RxCpltCallback+0x88>)
 80010a4:	881b      	ldrh	r3, [r3, #0]
 80010a6:	89fa      	ldrh	r2, [r7, #14]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d3d8      	bcc.n	800105e <HAL_UART_RxCpltCallback+0xe>
		}
	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80010ac:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <HAL_UART_RxCpltCallback+0x84>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d007      	beq.n	80010c4 <HAL_UART_RxCpltCallback+0x74>
 80010b4:	4b09      	ldr	r3, [pc, #36]	; (80010dc <HAL_UART_RxCpltCallback+0x8c>)
 80010b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	f3bf 8f4f 	dsb	sy
 80010c0:	f3bf 8f6f 	isb	sy
}
 80010c4:	bf00      	nop
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20001118 	.word	0x20001118
 80010d0:	2000115c 	.word	0x2000115c
 80010d4:	200011a8 	.word	0x200011a8
 80010d8:	20001158 	.word	0x20001158
 80010dc:	e000ed04 	.word	0xe000ed04

080010e0 <serial_global_init>:



void serial_global_init(void) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af02      	add	r7, sp, #8
	serial_rx_sem = xSemaphoreCreateBinaryStatic( &serial_rx_sem_buffer );
 80010e6:	2303      	movs	r3, #3
 80010e8:	9300      	str	r3, [sp, #0]
 80010ea:	4b06      	ldr	r3, [pc, #24]	; (8001104 <serial_global_init+0x24>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	2100      	movs	r1, #0
 80010f0:	2001      	movs	r0, #1
 80010f2:	f007 fed9 	bl	8008ea8 <xQueueGenericCreateStatic>
 80010f6:	4603      	mov	r3, r0
 80010f8:	4a03      	ldr	r2, [pc, #12]	; (8001108 <serial_global_init+0x28>)
 80010fa:	6013      	str	r3, [r2, #0]
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20001160 	.word	0x20001160
 8001108:	2000115c 	.word	0x2000115c

0800110c <serial_init>:


void serial_init(SERIAL_INST_t * ser, UART_HandleTypeDef * uart, void * inst, SERIAL_RET_t (*decode_fcn)(void *, uint8_t)) {
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
 8001118:	603b      	str	r3, [r7, #0]
	ser->id = serial_devices_count;
 800111a:	4b1a      	ldr	r3, [pc, #104]	; (8001184 <serial_init+0x78>)
 800111c:	881b      	ldrh	r3, [r3, #0]
 800111e:	461a      	mov	r2, r3
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	601a      	str	r2, [r3, #0]
	ser->uart = uart;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	68ba      	ldr	r2, [r7, #8]
 8001128:	605a      	str	r2, [r3, #4]
	ser->inst = inst;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	609a      	str	r2, [r3, #8]
	ser->decode_fcn = decode_fcn;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	683a      	ldr	r2, [r7, #0]
 8001134:	60da      	str	r2, [r3, #12]
	util_buffer_u8_init(&ser->bfr, ser->buffer, SERIAL_FIFO_LEN);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	f103 0010 	add.w	r0, r3, #16
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	331c      	adds	r3, #28
 8001140:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001144:	4619      	mov	r1, r3
 8001146:	f7ff ff17 	bl	8000f78 <util_buffer_u8_init>
	if(serial_devices_count < SERIAL_MAX_INST) {
 800114a:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <serial_init+0x78>)
 800114c:	881b      	ldrh	r3, [r3, #0]
 800114e:	2b0f      	cmp	r3, #15
 8001150:	d80e      	bhi.n	8001170 <serial_init+0x64>
		HAL_UART_Receive_DMA(uart, &ser->dma_buffer, 1);
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8001158:	2201      	movs	r2, #1
 800115a:	4619      	mov	r1, r3
 800115c:	68b8      	ldr	r0, [r7, #8]
 800115e:	f006 fb9b 	bl	8007898 <HAL_UART_Receive_DMA>
		serial_devices[serial_devices_count] = ser;
 8001162:	4b08      	ldr	r3, [pc, #32]	; (8001184 <serial_init+0x78>)
 8001164:	881b      	ldrh	r3, [r3, #0]
 8001166:	4619      	mov	r1, r3
 8001168:	4a07      	ldr	r2, [pc, #28]	; (8001188 <serial_init+0x7c>)
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	}
	serial_devices_count++;
 8001170:	4b04      	ldr	r3, [pc, #16]	; (8001184 <serial_init+0x78>)
 8001172:	881b      	ldrh	r3, [r3, #0]
 8001174:	3301      	adds	r3, #1
 8001176:	b29a      	uxth	r2, r3
 8001178:	4b02      	ldr	r3, [pc, #8]	; (8001184 <serial_init+0x78>)
 800117a:	801a      	strh	r2, [r3, #0]
}
 800117c:	bf00      	nop
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20001158 	.word	0x20001158
 8001188:	20001118 	.word	0x20001118

0800118c <serial_send>:

void serial_send(SERIAL_INST_t * ser, uint8_t * data, uint16_t length) {
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	4613      	mov	r3, r2
 8001198:	80fb      	strh	r3, [r7, #6]
	HAL_UART_Transmit_DMA(ser->uart, data, length);
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	88fa      	ldrh	r2, [r7, #6]
 80011a0:	68b9      	ldr	r1, [r7, #8]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f006 fb0c 	bl	80077c0 <HAL_UART_Transmit_DMA>
	//HAL_UART_Transmit(ser->uart, data, length, 500);
}
 80011a8:	bf00      	nop
 80011aa:	3710      	adds	r7, #16
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <serial_thread>:


void serial_thread(void * arg) {
 80011b0:	b5b0      	push	{r4, r5, r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]

	serial_global_init();
 80011b8:	f7ff ff92 	bl	80010e0 <serial_global_init>

	for(;;) {
		if( xSemaphoreTake(serial_rx_sem, 0xffff) == pdTRUE ) {
 80011bc:	4b1b      	ldr	r3, [pc, #108]	; (800122c <serial_thread+0x7c>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80011c4:	4618      	mov	r0, r3
 80011c6:	f008 f8c3 	bl	8009350 <xQueueSemaphoreTake>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d1f5      	bne.n	80011bc <serial_thread+0xc>
			for(uint16_t i = 0; i < serial_devices_count; i++) {
 80011d0:	2300      	movs	r3, #0
 80011d2:	81fb      	strh	r3, [r7, #14]
 80011d4:	e023      	b.n	800121e <serial_thread+0x6e>
				while(!util_buffer_u8_isempty(&serial_devices[i]->bfr)) {
					serial_devices[i]->decode_fcn(serial_devices[i]->inst, util_buffer_u8_get(&serial_devices[i]->bfr));
 80011d6:	89fb      	ldrh	r3, [r7, #14]
 80011d8:	4a15      	ldr	r2, [pc, #84]	; (8001230 <serial_thread+0x80>)
 80011da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011de:	68dc      	ldr	r4, [r3, #12]
 80011e0:	89fb      	ldrh	r3, [r7, #14]
 80011e2:	4a13      	ldr	r2, [pc, #76]	; (8001230 <serial_thread+0x80>)
 80011e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011e8:	689d      	ldr	r5, [r3, #8]
 80011ea:	89fb      	ldrh	r3, [r7, #14]
 80011ec:	4a10      	ldr	r2, [pc, #64]	; (8001230 <serial_thread+0x80>)
 80011ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f2:	3310      	adds	r3, #16
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff fef8 	bl	8000fea <util_buffer_u8_get>
 80011fa:	4603      	mov	r3, r0
 80011fc:	4619      	mov	r1, r3
 80011fe:	4628      	mov	r0, r5
 8001200:	47a0      	blx	r4
				while(!util_buffer_u8_isempty(&serial_devices[i]->bfr)) {
 8001202:	89fb      	ldrh	r3, [r7, #14]
 8001204:	4a0a      	ldr	r2, [pc, #40]	; (8001230 <serial_thread+0x80>)
 8001206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800120a:	3310      	adds	r3, #16
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff ff0b 	bl	8001028 <util_buffer_u8_isempty>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d0de      	beq.n	80011d6 <serial_thread+0x26>
			for(uint16_t i = 0; i < serial_devices_count; i++) {
 8001218:	89fb      	ldrh	r3, [r7, #14]
 800121a:	3301      	adds	r3, #1
 800121c:	81fb      	strh	r3, [r7, #14]
 800121e:	4b05      	ldr	r3, [pc, #20]	; (8001234 <serial_thread+0x84>)
 8001220:	881b      	ldrh	r3, [r3, #0]
 8001222:	89fa      	ldrh	r2, [r7, #14]
 8001224:	429a      	cmp	r2, r3
 8001226:	d3ec      	bcc.n	8001202 <serial_thread+0x52>
		if( xSemaphoreTake(serial_rx_sem, 0xffff) == pdTRUE ) {
 8001228:	e7c8      	b.n	80011bc <serial_thread+0xc>
 800122a:	bf00      	nop
 800122c:	2000115c 	.word	0x2000115c
 8001230:	20001118 	.word	0x20001118
 8001234:	20001158 	.word	0x20001158

08001238 <util_encode_u8>:

static inline uint8_t util_buffer_i16_isempty(UTIL_BUFFER_I16_t * bfr) {
	return bfr->l_ix == bfr->c_ix;
}

static inline void util_encode_u8(uint8_t * data, uint8_t value) {
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	460b      	mov	r3, r1
 8001242:	70fb      	strb	r3, [r7, #3]
	data[0] = value;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	78fa      	ldrb	r2, [r7, #3]
 8001248:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	3301      	adds	r3, #1
 800124e:	2200      	movs	r2, #0
 8001250:	701a      	strb	r2, [r3, #0]
	data[2] = 0x00;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	3302      	adds	r3, #2
 8001256:	2200      	movs	r2, #0
 8001258:	701a      	strb	r2, [r3, #0]
	data[3] = 0x00;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	3303      	adds	r3, #3
 800125e:	2200      	movs	r2, #0
 8001260:	701a      	strb	r2, [r3, #0]
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr

0800126e <util_encode_i32>:
	data[0] = value;
	data[1] = value>>8;
	data[2] = 0x00;
	data[3] = 0x00;
}
static inline void util_encode_i32(uint8_t * data, int32_t value) {
 800126e:	b480      	push	{r7}
 8001270:	b083      	sub	sp, #12
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
 8001276:	6039      	str	r1, [r7, #0]
	data[0] = value;
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	b2da      	uxtb	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	701a      	strb	r2, [r3, #0]
	data[1] = value>>8;
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	121a      	asrs	r2, r3, #8
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3301      	adds	r3, #1
 8001288:	b2d2      	uxtb	r2, r2
 800128a:	701a      	strb	r2, [r3, #0]
	data[2] = value>>16;
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	141a      	asrs	r2, r3, #16
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3302      	adds	r3, #2
 8001294:	b2d2      	uxtb	r2, r2
 8001296:	701a      	strb	r2, [r3, #0]
	data[3] = value>>24;
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	161a      	asrs	r2, r3, #24
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3303      	adds	r3, #3
 80012a0:	b2d2      	uxtb	r2, r2
 80012a2:	701a      	strb	r2, [r3, #0]
}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <util_decode_u8>:

static inline uint8_t util_decode_u8(uint8_t * data) {
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
	return data[0];
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	781b      	ldrb	r3, [r3, #0]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <util_decode_u16>:

static inline uint16_t util_decode_u16(uint8_t * data) {
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
	return (uint16_t) data[0] | data[1] << 8;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	b21a      	sxth	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	3301      	adds	r3, #1
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	021b      	lsls	r3, r3, #8
 80012de:	b21b      	sxth	r3, r3
 80012e0:	4313      	orrs	r3, r2
 80012e2:	b21b      	sxth	r3, r3
 80012e4:	b29b      	uxth	r3, r3
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <util_decode_i8>:

static inline uint32_t util_decode_u32(uint8_t * data) {
	return (uint32_t) data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24;
}

static inline int8_t util_decode_i8(uint8_t * data) {
 80012f2:	b480      	push	{r7}
 80012f4:	b083      	sub	sp, #12
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
	return data[0];
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	b25b      	sxtb	r3, r3
}
 8001300:	4618      	mov	r0, r3
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <util_decode_i32>:

static inline int16_t util_decode_i16(uint8_t * data) {
	return (int16_t) data[0] | data[1] << 8;
}

static inline int32_t util_decode_i32(uint8_t * data) {
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
	return (int32_t) data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	461a      	mov	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	3301      	adds	r3, #1
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	021b      	lsls	r3, r3, #8
 8001322:	431a      	orrs	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	3302      	adds	r3, #2
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	041b      	lsls	r3, r3, #16
 800132c:	431a      	orrs	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	3303      	adds	r3, #3
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	061b      	lsls	r3, r3, #24
 8001336:	4313      	orrs	r3, r2
}
 8001338:	4618      	mov	r0, r3
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <servo_init>:
/**********************
 *	DECLARATIONS
 **********************/


void servo_init(SERVO_INST_t * servo, uint8_t dev_id) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af02      	add	r7, sp, #8
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	460b      	mov	r3, r1
 800134e:	70fb      	strb	r3, [r7, #3]
	static uint32_t id_counter = 0;
	servo->id = id_counter++;
 8001350:	4b16      	ldr	r3, [pc, #88]	; (80013ac <servo_init+0x68>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	1c5a      	adds	r2, r3, #1
 8001356:	4915      	ldr	r1, [pc, #84]	; (80013ac <servo_init+0x68>)
 8001358:	600a      	str	r2, [r1, #0]
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	6013      	str	r3, [r2, #0]

	servo->dev_id = dev_id;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8001364:	331c      	adds	r3, #28
 8001366:	78fa      	ldrb	r2, [r7, #3]
 8001368:	701a      	strb	r2, [r3, #0]
	servo_list[servo_count++] = servo;
 800136a:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <servo_init+0x6c>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	1c5a      	adds	r2, r3, #1
 8001370:	b2d1      	uxtb	r1, r2
 8001372:	4a0f      	ldr	r2, [pc, #60]	; (80013b0 <servo_init+0x6c>)
 8001374:	7011      	strb	r1, [r2, #0]
 8001376:	4619      	mov	r1, r3
 8001378:	4a0e      	ldr	r2, [pc, #56]	; (80013b4 <servo_init+0x70>)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	servo->rx_sem = xSemaphoreCreateBinaryStatic(&servo->rx_sem_buffer);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8001386:	3308      	adds	r3, #8
 8001388:	2203      	movs	r2, #3
 800138a:	9200      	str	r2, [sp, #0]
 800138c:	2200      	movs	r2, #0
 800138e:	2100      	movs	r1, #0
 8001390:	2001      	movs	r0, #1
 8001392:	f007 fd89 	bl	8008ea8 <xQueueGenericCreateStatic>
 8001396:	4602      	mov	r2, r0
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800139e:	3304      	adds	r3, #4
 80013a0:	601a      	str	r2, [r3, #0]
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20002274 	.word	0x20002274
 80013b0:	200011ec 	.word	0x200011ec
 80013b4:	200011ac 	.word	0x200011ac

080013b8 <servo_global_init>:

void servo_global_init(void) {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
	dsv2_init(&servo_dsv2);
 80013bc:	4808      	ldr	r0, [pc, #32]	; (80013e0 <servo_global_init+0x28>)
 80013be:	f7ff fbf3 	bl	8000ba8 <dsv2_init>
	serial_init(&servo_serial, &DYNAMIXEL_UART, &servo_dsv2, servo_decode_fcn);
 80013c2:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <servo_global_init+0x2c>)
 80013c4:	4a06      	ldr	r2, [pc, #24]	; (80013e0 <servo_global_init+0x28>)
 80013c6:	4908      	ldr	r1, [pc, #32]	; (80013e8 <servo_global_init+0x30>)
 80013c8:	4808      	ldr	r0, [pc, #32]	; (80013ec <servo_global_init+0x34>)
 80013ca:	f7ff fe9f 	bl	800110c <serial_init>
	servo_busy_sem = xSemaphoreCreateMutexStatic(&servo_busy_sem_buffer);
 80013ce:	4908      	ldr	r1, [pc, #32]	; (80013f0 <servo_global_init+0x38>)
 80013d0:	2001      	movs	r0, #1
 80013d2:	f007 fe16 	bl	8009002 <xQueueCreateMutexStatic>
 80013d6:	4603      	mov	r3, r0
 80013d8:	4a06      	ldr	r2, [pc, #24]	; (80013f4 <servo_global_init+0x3c>)
 80013da:	6013      	str	r3, [r2, #0]
}
 80013dc:	bf00      	nop
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20001610 	.word	0x20001610
 80013e4:	080013f9 	.word	0x080013f9
 80013e8:	2000738c 	.word	0x2000738c
 80013ec:	200011f0 	.word	0x200011f0
 80013f0:	2000222c 	.word	0x2000222c
 80013f4:	20002228 	.word	0x20002228

080013f8 <servo_decode_fcn>:

SERIAL_RET_t servo_decode_fcn(void * inst, uint8_t data) {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	460b      	mov	r3, r1
 8001402:	70fb      	strb	r3, [r7, #3]
	DSV2_INST_t * dsv2 = (DSV2_INST_t * ) inst;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	613b      	str	r3, [r7, #16]
	DSV2_ERROR_t tmp = dsv2_decode_fragment(dsv2, data);
 8001408:	78fb      	ldrb	r3, [r7, #3]
 800140a:	4619      	mov	r1, r3
 800140c:	6938      	ldr	r0, [r7, #16]
 800140e:	f7ff fc51 	bl	8000cb4 <dsv2_decode_fragment>
 8001412:	4603      	mov	r3, r0
 8001414:	73fb      	strb	r3, [r7, #15]
	//this should release the semaphore corresponding the the right epos board if bridged
	if(tmp == DSV2_SUCCESS || tmp == DSV2_WRONG_CRC) {
 8001416:	7bfb      	ldrb	r3, [r7, #15]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d002      	beq.n	8001422 <servo_decode_fcn+0x2a>
 800141c:	7bfb      	ldrb	r3, [r7, #15]
 800141e:	2b02      	cmp	r3, #2
 8001420:	d128      	bne.n	8001474 <servo_decode_fcn+0x7c>
		if(dsv2->rx.inst == 0x55) { // ONLY HANDLE STATUS PACKETS
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	7a9b      	ldrb	r3, [r3, #10]
 8001426:	2b55      	cmp	r3, #85	; 0x55
 8001428:	d124      	bne.n	8001474 <servo_decode_fcn+0x7c>
			for(uint8_t i = 0; i < servo_count; i++) {
 800142a:	2300      	movs	r3, #0
 800142c:	75fb      	strb	r3, [r7, #23]
 800142e:	e01c      	b.n	800146a <servo_decode_fcn+0x72>
				if(servo_list[i]->dev_id == dsv2->rx.dev_id) {
 8001430:	7dfb      	ldrb	r3, [r7, #23]
 8001432:	4a13      	ldr	r2, [pc, #76]	; (8001480 <servo_decode_fcn+0x88>)
 8001434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001438:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800143c:	331c      	adds	r3, #28
 800143e:	781a      	ldrb	r2, [r3, #0]
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	791b      	ldrb	r3, [r3, #4]
 8001444:	429a      	cmp	r2, r3
 8001446:	d10d      	bne.n	8001464 <servo_decode_fcn+0x6c>
					xSemaphoreGive(servo_list[i]->rx_sem);
 8001448:	7dfb      	ldrb	r3, [r7, #23]
 800144a:	4a0d      	ldr	r2, [pc, #52]	; (8001480 <servo_decode_fcn+0x88>)
 800144c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001450:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8001454:	3304      	adds	r3, #4
 8001456:	6818      	ldr	r0, [r3, #0]
 8001458:	2300      	movs	r3, #0
 800145a:	2200      	movs	r2, #0
 800145c:	2100      	movs	r1, #0
 800145e:	f007 fdeb 	bl	8009038 <xQueueGenericSend>
					break;
 8001462:	e007      	b.n	8001474 <servo_decode_fcn+0x7c>
			for(uint8_t i = 0; i < servo_count; i++) {
 8001464:	7dfb      	ldrb	r3, [r7, #23]
 8001466:	3301      	adds	r3, #1
 8001468:	75fb      	strb	r3, [r7, #23]
 800146a:	4b06      	ldr	r3, [pc, #24]	; (8001484 <servo_decode_fcn+0x8c>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	7dfa      	ldrb	r2, [r7, #23]
 8001470:	429a      	cmp	r2, r3
 8001472:	d3dd      	bcc.n	8001430 <servo_decode_fcn+0x38>
				}
			}
		}
	}
	return tmp;
 8001474:	7bfb      	ldrb	r3, [r7, #15]
}
 8001476:	4618      	mov	r0, r3
 8001478:	3718      	adds	r7, #24
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	200011ac 	.word	0x200011ac
 8001484:	200011ec 	.word	0x200011ec

08001488 <servo_read>:
/*
 * address of the object
 * length to read
 * data to read into
 */
SERVO_ERROR_t servo_read(SERVO_INST_t * servo, uint16_t address, uint16_t length, uint8_t * data, uint8_t * err) {
 8001488:	b580      	push	{r7, lr}
 800148a:	b088      	sub	sp, #32
 800148c:	af02      	add	r7, sp, #8
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	607b      	str	r3, [r7, #4]
 8001492:	460b      	mov	r3, r1
 8001494:	817b      	strh	r3, [r7, #10]
 8001496:	4613      	mov	r3, r2
 8001498:	813b      	strh	r3, [r7, #8]
	if (xSemaphoreTake(servo_busy_sem, DRIV_TIMEOUT) == pdTRUE) {
 800149a:	4b41      	ldr	r3, [pc, #260]	; (80015a0 <servo_read+0x118>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	21c8      	movs	r1, #200	; 0xc8
 80014a0:	4618      	mov	r0, r3
 80014a2:	f007 ff55 	bl	8009350 <xQueueSemaphoreTake>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d174      	bne.n	8001596 <servo_read+0x10e>
		static uint8_t send_data[MAX_READ_LEN];
		send_data[0] = address & 0xff;
 80014ac:	897b      	ldrh	r3, [r7, #10]
 80014ae:	b2da      	uxtb	r2, r3
 80014b0:	4b3c      	ldr	r3, [pc, #240]	; (80015a4 <servo_read+0x11c>)
 80014b2:	701a      	strb	r2, [r3, #0]
		send_data[1] = address>>8;
 80014b4:	897b      	ldrh	r3, [r7, #10]
 80014b6:	0a1b      	lsrs	r3, r3, #8
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	b2da      	uxtb	r2, r3
 80014bc:	4b39      	ldr	r3, [pc, #228]	; (80015a4 <servo_read+0x11c>)
 80014be:	705a      	strb	r2, [r3, #1]
		send_data[2] = length & 0xff;
 80014c0:	893b      	ldrh	r3, [r7, #8]
 80014c2:	b2da      	uxtb	r2, r3
 80014c4:	4b37      	ldr	r3, [pc, #220]	; (80015a4 <servo_read+0x11c>)
 80014c6:	709a      	strb	r2, [r3, #2]
		send_data[3] = length>>8;
 80014c8:	893b      	ldrh	r3, [r7, #8]
 80014ca:	0a1b      	lsrs	r3, r3, #8
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	b2da      	uxtb	r2, r3
 80014d0:	4b34      	ldr	r3, [pc, #208]	; (80015a4 <servo_read+0x11c>)
 80014d2:	70da      	strb	r2, [r3, #3]
		uint16_t len = dsv2_create_frame(&servo_dsv2, servo->dev_id, MAX_READ_LEN, READ_INST, send_data);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80014da:	331c      	adds	r3, #28
 80014dc:	7819      	ldrb	r1, [r3, #0]
 80014de:	4b31      	ldr	r3, [pc, #196]	; (80015a4 <servo_read+0x11c>)
 80014e0:	9300      	str	r3, [sp, #0]
 80014e2:	2302      	movs	r3, #2
 80014e4:	2204      	movs	r2, #4
 80014e6:	4830      	ldr	r0, [pc, #192]	; (80015a8 <servo_read+0x120>)
 80014e8:	f7ff fb72 	bl	8000bd0 <dsv2_create_frame>
 80014ec:	4603      	mov	r3, r0
 80014ee:	82bb      	strh	r3, [r7, #20]
		serial_send(&servo_serial, dsv2_tx_data(&servo_dsv2), len);
 80014f0:	482d      	ldr	r0, [pc, #180]	; (80015a8 <servo_read+0x120>)
 80014f2:	f7ff fcf1 	bl	8000ed8 <dsv2_tx_data>
 80014f6:	4601      	mov	r1, r0
 80014f8:	8abb      	ldrh	r3, [r7, #20]
 80014fa:	461a      	mov	r2, r3
 80014fc:	482b      	ldr	r0, [pc, #172]	; (80015ac <servo_read+0x124>)
 80014fe:	f7ff fe45 	bl	800118c <serial_send>
		if(xSemaphoreTake(servo->rx_sem, COMM_TIMEOUT) == pdTRUE) {
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8001508:	3304      	adds	r3, #4
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	210a      	movs	r1, #10
 800150e:	4618      	mov	r0, r3
 8001510:	f007 ff1e 	bl	8009350 <xQueueSemaphoreTake>
 8001514:	4603      	mov	r3, r0
 8001516:	2b01      	cmp	r3, #1
 8001518:	d134      	bne.n	8001584 <servo_read+0xfc>
			uint8_t * recieved_data = dsv2_rx_data(&servo_dsv2);
 800151a:	4823      	ldr	r0, [pc, #140]	; (80015a8 <servo_read+0x120>)
 800151c:	f7ff fcd0 	bl	8000ec0 <dsv2_rx_data>
 8001520:	6138      	str	r0, [r7, #16]
			if(err != NULL) {
 8001522:	6a3b      	ldr	r3, [r7, #32]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d003      	beq.n	8001530 <servo_read+0xa8>
				*err = recieved_data[0];
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	781a      	ldrb	r2, [r3, #0]
 800152c:	6a3b      	ldr	r3, [r7, #32]
 800152e:	701a      	strb	r2, [r3, #0]
			}
			for(uint8_t i = 0; i < length; i++){
 8001530:	2300      	movs	r3, #0
 8001532:	75fb      	strb	r3, [r7, #23]
 8001534:	e00b      	b.n	800154e <servo_read+0xc6>
				data[i] = recieved_data[i+1];
 8001536:	7dfb      	ldrb	r3, [r7, #23]
 8001538:	3301      	adds	r3, #1
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	441a      	add	r2, r3
 800153e:	7dfb      	ldrb	r3, [r7, #23]
 8001540:	6879      	ldr	r1, [r7, #4]
 8001542:	440b      	add	r3, r1
 8001544:	7812      	ldrb	r2, [r2, #0]
 8001546:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 0; i < length; i++){
 8001548:	7dfb      	ldrb	r3, [r7, #23]
 800154a:	3301      	adds	r3, #1
 800154c:	75fb      	strb	r3, [r7, #23]
 800154e:	7dfb      	ldrb	r3, [r7, #23]
 8001550:	b29b      	uxth	r3, r3
 8001552:	893a      	ldrh	r2, [r7, #8]
 8001554:	429a      	cmp	r2, r3
 8001556:	d8ee      	bhi.n	8001536 <servo_read+0xae>
			}
			if(*err == 0) {
 8001558:	6a3b      	ldr	r3, [r7, #32]
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d108      	bne.n	8001572 <servo_read+0xea>
				xSemaphoreGive(servo_busy_sem);
 8001560:	4b0f      	ldr	r3, [pc, #60]	; (80015a0 <servo_read+0x118>)
 8001562:	6818      	ldr	r0, [r3, #0]
 8001564:	2300      	movs	r3, #0
 8001566:	2200      	movs	r2, #0
 8001568:	2100      	movs	r1, #0
 800156a:	f007 fd65 	bl	8009038 <xQueueGenericSend>
				return SERVO_SUCCESS;
 800156e:	2300      	movs	r3, #0
 8001570:	e012      	b.n	8001598 <servo_read+0x110>
			} else {
				xSemaphoreGive(servo_busy_sem);
 8001572:	4b0b      	ldr	r3, [pc, #44]	; (80015a0 <servo_read+0x118>)
 8001574:	6818      	ldr	r0, [r3, #0]
 8001576:	2300      	movs	r3, #0
 8001578:	2200      	movs	r2, #0
 800157a:	2100      	movs	r1, #0
 800157c:	f007 fd5c 	bl	8009038 <xQueueGenericSend>
				return SERVO_REMOTE_ERROR;
 8001580:	2302      	movs	r3, #2
 8001582:	e009      	b.n	8001598 <servo_read+0x110>
			}
		} else {
			xSemaphoreGive(servo_busy_sem);
 8001584:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <servo_read+0x118>)
 8001586:	6818      	ldr	r0, [r3, #0]
 8001588:	2300      	movs	r3, #0
 800158a:	2200      	movs	r2, #0
 800158c:	2100      	movs	r1, #0
 800158e:	f007 fd53 	bl	8009038 <xQueueGenericSend>
			return SERVO_TIMEOUT;
 8001592:	2301      	movs	r3, #1
 8001594:	e000      	b.n	8001598 <servo_read+0x110>
		}
	} else {
		return SERVO_BUSY;
 8001596:	2304      	movs	r3, #4
	}
}
 8001598:	4618      	mov	r0, r3
 800159a:	3718      	adds	r7, #24
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	20002228 	.word	0x20002228
 80015a4:	20002278 	.word	0x20002278
 80015a8:	20001610 	.word	0x20001610
 80015ac:	200011f0 	.word	0x200011f0

080015b0 <servo_write>:
/*
 * address of the object
 * length of the data to write
 * data to write
 */
SERVO_ERROR_t servo_write(SERVO_INST_t * servo, uint16_t address, uint16_t length, uint8_t * data, uint8_t * err) {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b088      	sub	sp, #32
 80015b4:	af02      	add	r7, sp, #8
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	607b      	str	r3, [r7, #4]
 80015ba:	460b      	mov	r3, r1
 80015bc:	817b      	strh	r3, [r7, #10]
 80015be:	4613      	mov	r3, r2
 80015c0:	813b      	strh	r3, [r7, #8]
	if (xSemaphoreTake(servo_busy_sem, DRIV_TIMEOUT) == pdTRUE) {
 80015c2:	4b3c      	ldr	r3, [pc, #240]	; (80016b4 <servo_write+0x104>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	21c8      	movs	r1, #200	; 0xc8
 80015c8:	4618      	mov	r0, r3
 80015ca:	f007 fec1 	bl	8009350 <xQueueSemaphoreTake>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d16a      	bne.n	80016aa <servo_write+0xfa>
		static uint8_t send_data[MAX_WRITE_LEN];
		send_data[0] = address & 0xff;
 80015d4:	897b      	ldrh	r3, [r7, #10]
 80015d6:	b2da      	uxtb	r2, r3
 80015d8:	4b37      	ldr	r3, [pc, #220]	; (80016b8 <servo_write+0x108>)
 80015da:	701a      	strb	r2, [r3, #0]
		send_data[1] = address>>8;
 80015dc:	897b      	ldrh	r3, [r7, #10]
 80015de:	0a1b      	lsrs	r3, r3, #8
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	b2da      	uxtb	r2, r3
 80015e4:	4b34      	ldr	r3, [pc, #208]	; (80016b8 <servo_write+0x108>)
 80015e6:	705a      	strb	r2, [r3, #1]
		for(uint16_t i = 0; i < length; i++) {
 80015e8:	2300      	movs	r3, #0
 80015ea:	82fb      	strh	r3, [r7, #22]
 80015ec:	e00a      	b.n	8001604 <servo_write+0x54>
			send_data[2 + i] = data[i];
 80015ee:	8afb      	ldrh	r3, [r7, #22]
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	441a      	add	r2, r3
 80015f4:	8afb      	ldrh	r3, [r7, #22]
 80015f6:	3302      	adds	r3, #2
 80015f8:	7811      	ldrb	r1, [r2, #0]
 80015fa:	4a2f      	ldr	r2, [pc, #188]	; (80016b8 <servo_write+0x108>)
 80015fc:	54d1      	strb	r1, [r2, r3]
		for(uint16_t i = 0; i < length; i++) {
 80015fe:	8afb      	ldrh	r3, [r7, #22]
 8001600:	3301      	adds	r3, #1
 8001602:	82fb      	strh	r3, [r7, #22]
 8001604:	8afa      	ldrh	r2, [r7, #22]
 8001606:	893b      	ldrh	r3, [r7, #8]
 8001608:	429a      	cmp	r2, r3
 800160a:	d3f0      	bcc.n	80015ee <servo_write+0x3e>
		}
		uint16_t len = dsv2_create_frame(&servo_dsv2, servo->dev_id, length+2, WRITE_INST, send_data);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8001612:	331c      	adds	r3, #28
 8001614:	7819      	ldrb	r1, [r3, #0]
 8001616:	893b      	ldrh	r3, [r7, #8]
 8001618:	3302      	adds	r3, #2
 800161a:	b29a      	uxth	r2, r3
 800161c:	4b26      	ldr	r3, [pc, #152]	; (80016b8 <servo_write+0x108>)
 800161e:	9300      	str	r3, [sp, #0]
 8001620:	2303      	movs	r3, #3
 8001622:	4826      	ldr	r0, [pc, #152]	; (80016bc <servo_write+0x10c>)
 8001624:	f7ff fad4 	bl	8000bd0 <dsv2_create_frame>
 8001628:	4603      	mov	r3, r0
 800162a:	82bb      	strh	r3, [r7, #20]
		serial_send(&servo_serial, dsv2_tx_data(&servo_dsv2), len);
 800162c:	4823      	ldr	r0, [pc, #140]	; (80016bc <servo_write+0x10c>)
 800162e:	f7ff fc53 	bl	8000ed8 <dsv2_tx_data>
 8001632:	4601      	mov	r1, r0
 8001634:	8abb      	ldrh	r3, [r7, #20]
 8001636:	461a      	mov	r2, r3
 8001638:	4821      	ldr	r0, [pc, #132]	; (80016c0 <servo_write+0x110>)
 800163a:	f7ff fda7 	bl	800118c <serial_send>
		if(xSemaphoreTake(servo->rx_sem, COMM_TIMEOUT) == pdTRUE) {
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8001644:	3304      	adds	r3, #4
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	210a      	movs	r1, #10
 800164a:	4618      	mov	r0, r3
 800164c:	f007 fe80 	bl	8009350 <xQueueSemaphoreTake>
 8001650:	4603      	mov	r3, r0
 8001652:	2b01      	cmp	r3, #1
 8001654:	d120      	bne.n	8001698 <servo_write+0xe8>
			uint8_t * recieved_data = dsv2_rx_data(&servo_dsv2);
 8001656:	4819      	ldr	r0, [pc, #100]	; (80016bc <servo_write+0x10c>)
 8001658:	f7ff fc32 	bl	8000ec0 <dsv2_rx_data>
 800165c:	6138      	str	r0, [r7, #16]
			if(err != NULL) {
 800165e:	6a3b      	ldr	r3, [r7, #32]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d003      	beq.n	800166c <servo_write+0xbc>
				*err = recieved_data[0];
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	781a      	ldrb	r2, [r3, #0]
 8001668:	6a3b      	ldr	r3, [r7, #32]
 800166a:	701a      	strb	r2, [r3, #0]
			}
			if(*err == 0) {
 800166c:	6a3b      	ldr	r3, [r7, #32]
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d108      	bne.n	8001686 <servo_write+0xd6>
				xSemaphoreGive(servo_busy_sem);
 8001674:	4b0f      	ldr	r3, [pc, #60]	; (80016b4 <servo_write+0x104>)
 8001676:	6818      	ldr	r0, [r3, #0]
 8001678:	2300      	movs	r3, #0
 800167a:	2200      	movs	r2, #0
 800167c:	2100      	movs	r1, #0
 800167e:	f007 fcdb 	bl	8009038 <xQueueGenericSend>
				return SERVO_SUCCESS;
 8001682:	2300      	movs	r3, #0
 8001684:	e012      	b.n	80016ac <servo_write+0xfc>
			} else {
				xSemaphoreGive(servo_busy_sem);
 8001686:	4b0b      	ldr	r3, [pc, #44]	; (80016b4 <servo_write+0x104>)
 8001688:	6818      	ldr	r0, [r3, #0]
 800168a:	2300      	movs	r3, #0
 800168c:	2200      	movs	r2, #0
 800168e:	2100      	movs	r1, #0
 8001690:	f007 fcd2 	bl	8009038 <xQueueGenericSend>
				return SERVO_REMOTE_ERROR;
 8001694:	2302      	movs	r3, #2
 8001696:	e009      	b.n	80016ac <servo_write+0xfc>
			}
		} else {
			xSemaphoreGive(servo_busy_sem);
 8001698:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <servo_write+0x104>)
 800169a:	6818      	ldr	r0, [r3, #0]
 800169c:	2300      	movs	r3, #0
 800169e:	2200      	movs	r2, #0
 80016a0:	2100      	movs	r1, #0
 80016a2:	f007 fcc9 	bl	8009038 <xQueueGenericSend>
			return SERVO_TIMEOUT;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e000      	b.n	80016ac <servo_write+0xfc>
		}
	} else {
		return SERVO_BUSY;
 80016aa:	2304      	movs	r3, #4
	}
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3718      	adds	r7, #24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	20002228 	.word	0x20002228
 80016b8:	2000227c 	.word	0x2000227c
 80016bc:	20001610 	.word	0x20001610
 80016c0:	200011f0 	.word	0x200011f0

080016c4 <servo_write_u8>:
		return SERVO_BUSY;
	}
}


SERVO_ERROR_t servo_write_u8(SERVO_INST_t * servo, uint16_t address, uint8_t data, uint8_t * err) {
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b088      	sub	sp, #32
 80016c8:	af02      	add	r7, sp, #8
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	607b      	str	r3, [r7, #4]
 80016ce:	460b      	mov	r3, r1
 80016d0:	817b      	strh	r3, [r7, #10]
 80016d2:	4613      	mov	r3, r2
 80016d4:	727b      	strb	r3, [r7, #9]
	uint8_t bin_data[DATA_SIZE];
	util_encode_u8(bin_data, data);
 80016d6:	7a7a      	ldrb	r2, [r7, #9]
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	4611      	mov	r1, r2
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff fdaa 	bl	8001238 <util_encode_u8>
	return servo_write(servo, address, 1, bin_data, err);
 80016e4:	f107 0214 	add.w	r2, r7, #20
 80016e8:	8979      	ldrh	r1, [r7, #10]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	9300      	str	r3, [sp, #0]
 80016ee:	4613      	mov	r3, r2
 80016f0:	2201      	movs	r2, #1
 80016f2:	68f8      	ldr	r0, [r7, #12]
 80016f4:	f7ff ff5c 	bl	80015b0 <servo_write>
 80016f8:	4603      	mov	r3, r0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3718      	adds	r7, #24
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <servo_write_i32>:
	uint8_t bin_data[DATA_SIZE];
	util_encode_i16(bin_data, data);
	return servo_write(servo, address, 2, bin_data, err);
}

SERVO_ERROR_t servo_write_i32(SERVO_INST_t * servo, uint16_t address, int32_t data, uint8_t * err) {
 8001702:	b580      	push	{r7, lr}
 8001704:	b088      	sub	sp, #32
 8001706:	af02      	add	r7, sp, #8
 8001708:	60f8      	str	r0, [r7, #12]
 800170a:	607a      	str	r2, [r7, #4]
 800170c:	603b      	str	r3, [r7, #0]
 800170e:	460b      	mov	r3, r1
 8001710:	817b      	strh	r3, [r7, #10]
	uint8_t bin_data[DATA_SIZE];
	util_encode_i32(bin_data, data);
 8001712:	f107 0314 	add.w	r3, r7, #20
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff fda8 	bl	800126e <util_encode_i32>
	return servo_write(servo, address, 4, bin_data, err);
 800171e:	f107 0214 	add.w	r2, r7, #20
 8001722:	8979      	ldrh	r1, [r7, #10]
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	9300      	str	r3, [sp, #0]
 8001728:	4613      	mov	r3, r2
 800172a:	2204      	movs	r2, #4
 800172c:	68f8      	ldr	r0, [r7, #12]
 800172e:	f7ff ff3f 	bl	80015b0 <servo_write>
 8001732:	4603      	mov	r3, r0
}
 8001734:	4618      	mov	r0, r3
 8001736:	3718      	adds	r7, #24
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <servo_read_u8>:

SERVO_ERROR_t servo_read_u8(SERVO_INST_t * servo, uint16_t address, uint8_t * data, uint8_t * err) {
 800173c:	b580      	push	{r7, lr}
 800173e:	b088      	sub	sp, #32
 8001740:	af02      	add	r7, sp, #8
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	607a      	str	r2, [r7, #4]
 8001746:	603b      	str	r3, [r7, #0]
 8001748:	460b      	mov	r3, r1
 800174a:	817b      	strh	r3, [r7, #10]
	uint8_t bin_data[DATA_SIZE];
	SERVO_ERROR_t tmp = servo_read(servo, address, 1, bin_data, err);
 800174c:	f107 0210 	add.w	r2, r7, #16
 8001750:	8979      	ldrh	r1, [r7, #10]
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	9300      	str	r3, [sp, #0]
 8001756:	4613      	mov	r3, r2
 8001758:	2201      	movs	r2, #1
 800175a:	68f8      	ldr	r0, [r7, #12]
 800175c:	f7ff fe94 	bl	8001488 <servo_read>
 8001760:	4603      	mov	r3, r0
 8001762:	75fb      	strb	r3, [r7, #23]
	*data = util_decode_u8(bin_data);
 8001764:	f107 0310 	add.w	r3, r7, #16
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff fda1 	bl	80012b0 <util_decode_u8>
 800176e:	4603      	mov	r3, r0
 8001770:	461a      	mov	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	701a      	strb	r2, [r3, #0]
	return tmp;
 8001776:	7dfb      	ldrb	r3, [r7, #23]
}
 8001778:	4618      	mov	r0, r3
 800177a:	3718      	adds	r7, #24
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <servo_read_u16>:

SERVO_ERROR_t servo_read_u16(SERVO_INST_t * servo, uint16_t address, uint16_t * data, uint8_t * err) {
 8001780:	b580      	push	{r7, lr}
 8001782:	b088      	sub	sp, #32
 8001784:	af02      	add	r7, sp, #8
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	607a      	str	r2, [r7, #4]
 800178a:	603b      	str	r3, [r7, #0]
 800178c:	460b      	mov	r3, r1
 800178e:	817b      	strh	r3, [r7, #10]
	uint8_t bin_data[DATA_SIZE];
	SERVO_ERROR_t tmp = servo_read(servo, address, 2, bin_data, err);
 8001790:	f107 0210 	add.w	r2, r7, #16
 8001794:	8979      	ldrh	r1, [r7, #10]
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	9300      	str	r3, [sp, #0]
 800179a:	4613      	mov	r3, r2
 800179c:	2202      	movs	r2, #2
 800179e:	68f8      	ldr	r0, [r7, #12]
 80017a0:	f7ff fe72 	bl	8001488 <servo_read>
 80017a4:	4603      	mov	r3, r0
 80017a6:	75fb      	strb	r3, [r7, #23]
	*data = util_decode_u16(bin_data);
 80017a8:	f107 0310 	add.w	r3, r7, #16
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff fd8b 	bl	80012c8 <util_decode_u16>
 80017b2:	4603      	mov	r3, r0
 80017b4:	461a      	mov	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	801a      	strh	r2, [r3, #0]
	return tmp;
 80017ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3718      	adds	r7, #24
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <servo_read_i8>:
	SERVO_ERROR_t tmp = servo_read(servo, address, 4, bin_data, err);
	*data = util_decode_u32(bin_data);
	return tmp;
}

SERVO_ERROR_t servo_read_i8(SERVO_INST_t * servo, uint16_t address, int8_t * data, uint8_t * err) {
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b088      	sub	sp, #32
 80017c8:	af02      	add	r7, sp, #8
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	607a      	str	r2, [r7, #4]
 80017ce:	603b      	str	r3, [r7, #0]
 80017d0:	460b      	mov	r3, r1
 80017d2:	817b      	strh	r3, [r7, #10]
	uint8_t bin_data[DATA_SIZE];
	SERVO_ERROR_t tmp = servo_read(servo, address, 1, bin_data, err);
 80017d4:	f107 0210 	add.w	r2, r7, #16
 80017d8:	8979      	ldrh	r1, [r7, #10]
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	9300      	str	r3, [sp, #0]
 80017de:	4613      	mov	r3, r2
 80017e0:	2201      	movs	r2, #1
 80017e2:	68f8      	ldr	r0, [r7, #12]
 80017e4:	f7ff fe50 	bl	8001488 <servo_read>
 80017e8:	4603      	mov	r3, r0
 80017ea:	75fb      	strb	r3, [r7, #23]
	*data = util_decode_i8(bin_data);
 80017ec:	f107 0310 	add.w	r3, r7, #16
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff fd7e 	bl	80012f2 <util_decode_i8>
 80017f6:	4603      	mov	r3, r0
 80017f8:	461a      	mov	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	701a      	strb	r2, [r3, #0]
	return tmp;
 80017fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001800:	4618      	mov	r0, r3
 8001802:	3718      	adds	r7, #24
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <servo_read_i32>:
	SERVO_ERROR_t tmp = servo_read(servo, address, 2, bin_data, err);
	*data = util_decode_i16(bin_data);
	return tmp;
}

SERVO_ERROR_t servo_read_i32(SERVO_INST_t * servo, uint16_t address, int32_t * data, uint8_t * err) {
 8001808:	b580      	push	{r7, lr}
 800180a:	b088      	sub	sp, #32
 800180c:	af02      	add	r7, sp, #8
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	607a      	str	r2, [r7, #4]
 8001812:	603b      	str	r3, [r7, #0]
 8001814:	460b      	mov	r3, r1
 8001816:	817b      	strh	r3, [r7, #10]
	uint8_t bin_data[DATA_SIZE];
	SERVO_ERROR_t tmp = servo_read(servo, address, 4, bin_data, err);
 8001818:	f107 0210 	add.w	r2, r7, #16
 800181c:	8979      	ldrh	r1, [r7, #10]
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	9300      	str	r3, [sp, #0]
 8001822:	4613      	mov	r3, r2
 8001824:	2204      	movs	r2, #4
 8001826:	68f8      	ldr	r0, [r7, #12]
 8001828:	f7ff fe2e 	bl	8001488 <servo_read>
 800182c:	4603      	mov	r3, r0
 800182e:	75fb      	strb	r3, [r7, #23]
	*data = util_decode_i32(bin_data);
 8001830:	f107 0310 	add.w	r3, r7, #16
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff fd69 	bl	800130c <util_decode_i32>
 800183a:	4602      	mov	r2, r0
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	601a      	str	r2, [r3, #0]
	return tmp;
 8001840:	7dfb      	ldrb	r3, [r7, #23]
}
 8001842:	4618      	mov	r0, r3
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <servo_sync>:



//HIGH LEVEL FUNCTIONS

SERVO_ERROR_t servo_sync(SERVO_INST_t * servo) {
 800184a:	b580      	push	{r7, lr}
 800184c:	b084      	sub	sp, #16
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
	uint8_t err;
	SERVO_ERROR_t error = 0;
 8001852:	2300      	movs	r3, #0
 8001854:	73fb      	strb	r3, [r7, #15]

	error |= servo_read_u8(servo, SERVO_HARDWARE_ERROR_STATUS, &servo->error, &err);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f503 5284 	add.w	r2, r3, #4224	; 0x1080
 800185c:	3218      	adds	r2, #24
 800185e:	f107 030e 	add.w	r3, r7, #14
 8001862:	2146      	movs	r1, #70	; 0x46
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f7ff ff69 	bl	800173c <servo_read_u8>
 800186a:	4603      	mov	r3, r0
 800186c:	461a      	mov	r2, r3
 800186e:	7bfb      	ldrb	r3, [r7, #15]
 8001870:	4313      	orrs	r3, r2
 8001872:	73fb      	strb	r3, [r7, #15]

	error |= servo_read_u16(servo, SERVO_PRESENT_INPUT_VOLTAGE, &servo->psu_voltage, &err);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f503 5284 	add.w	r2, r3, #4224	; 0x1080
 800187a:	3210      	adds	r2, #16
 800187c:	f107 030e 	add.w	r3, r7, #14
 8001880:	2190      	movs	r1, #144	; 0x90
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f7ff ff7c 	bl	8001780 <servo_read_u16>
 8001888:	4603      	mov	r3, r0
 800188a:	461a      	mov	r2, r3
 800188c:	7bfb      	ldrb	r3, [r7, #15]
 800188e:	4313      	orrs	r3, r2
 8001890:	73fb      	strb	r3, [r7, #15]

	error |= servo_read_i8(servo, SERVO_PRESENT_TEMPERATURE, &servo->temperature, &err);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f503 5284 	add.w	r2, r3, #4224	; 0x1080
 8001898:	3212      	adds	r2, #18
 800189a:	f107 030e 	add.w	r3, r7, #14
 800189e:	2192      	movs	r1, #146	; 0x92
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f7ff ff8f 	bl	80017c4 <servo_read_i8>
 80018a6:	4603      	mov	r3, r0
 80018a8:	461a      	mov	r2, r3
 80018aa:	7bfb      	ldrb	r3, [r7, #15]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	73fb      	strb	r3, [r7, #15]

	error |= servo_read_i32(servo, SERVO_PRESENT_POSITION, &servo->position, &err);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f503 5284 	add.w	r2, r3, #4224	; 0x1080
 80018b6:	3214      	adds	r2, #20
 80018b8:	f107 030e 	add.w	r3, r7, #14
 80018bc:	2184      	movs	r1, #132	; 0x84
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f7ff ffa2 	bl	8001808 <servo_read_i32>
 80018c4:	4603      	mov	r3, r0
 80018c6:	461a      	mov	r2, r3
 80018c8:	7bfb      	ldrb	r3, [r7, #15]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	73fb      	strb	r3, [r7, #15]


	return error;
 80018ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <servo_config>:

SERVO_ERROR_t servo_config(SERVO_INST_t * servo) {
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
	uint8_t err;
	SERVO_ERROR_t error = 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	73fb      	strb	r3, [r7, #15]

	error |= servo_disable_torque(servo, &err);
 80018e4:	f107 030e 	add.w	r3, r7, #14
 80018e8:	2200      	movs	r2, #0
 80018ea:	2140      	movs	r1, #64	; 0x40
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f7ff fee9 	bl	80016c4 <servo_write_u8>
 80018f2:	4603      	mov	r3, r0
 80018f4:	461a      	mov	r2, r3
 80018f6:	7bfb      	ldrb	r3, [r7, #15]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	73fb      	strb	r3, [r7, #15]

	error |= servo_write_i32(servo, SERVO_MAX_POSITION_LIMIT, 4095, &err);
 80018fc:	f107 030e 	add.w	r3, r7, #14
 8001900:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001904:	2130      	movs	r1, #48	; 0x30
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f7ff fefb 	bl	8001702 <servo_write_i32>
 800190c:	4603      	mov	r3, r0
 800190e:	461a      	mov	r2, r3
 8001910:	7bfb      	ldrb	r3, [r7, #15]
 8001912:	4313      	orrs	r3, r2
 8001914:	73fb      	strb	r3, [r7, #15]

	error |= servo_write_i32(servo, SERVO_MIN_POSITION_LIMIT, 0, &err);
 8001916:	f107 030e 	add.w	r3, r7, #14
 800191a:	2200      	movs	r2, #0
 800191c:	2134      	movs	r1, #52	; 0x34
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f7ff feef 	bl	8001702 <servo_write_i32>
 8001924:	4603      	mov	r3, r0
 8001926:	461a      	mov	r2, r3
 8001928:	7bfb      	ldrb	r3, [r7, #15]
 800192a:	4313      	orrs	r3, r2
 800192c:	73fb      	strb	r3, [r7, #15]

	error |= servo_write_u8(servo, SERVO_OPERATING_MODE, 3, &err);
 800192e:	f107 030e 	add.w	r3, r7, #14
 8001932:	2203      	movs	r2, #3
 8001934:	210b      	movs	r1, #11
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f7ff fec4 	bl	80016c4 <servo_write_u8>
 800193c:	4603      	mov	r3, r0
 800193e:	461a      	mov	r2, r3
 8001940:	7bfb      	ldrb	r3, [r7, #15]
 8001942:	4313      	orrs	r3, r2
 8001944:	73fb      	strb	r3, [r7, #15]

	return error;
 8001946:	7bfb      	ldrb	r3, [r7, #15]
}
 8001948:	4618      	mov	r0, r3
 800194a:	3710      	adds	r7, #16
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <servo_move>:

SERVO_ERROR_t servo_move(SERVO_INST_t * servo, int32_t target) {
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
	uint8_t err;
	SERVO_ERROR_t error = 0;
 800195a:	2300      	movs	r3, #0
 800195c:	73fb      	strb	r3, [r7, #15]

	error |= servo_enable_torque(servo, &err);
 800195e:	f107 030e 	add.w	r3, r7, #14
 8001962:	2201      	movs	r2, #1
 8001964:	2140      	movs	r1, #64	; 0x40
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7ff feac 	bl	80016c4 <servo_write_u8>
 800196c:	4603      	mov	r3, r0
 800196e:	461a      	mov	r2, r3
 8001970:	7bfb      	ldrb	r3, [r7, #15]
 8001972:	4313      	orrs	r3, r2
 8001974:	73fb      	strb	r3, [r7, #15]

	error |= servo_write_i32(servo, SERVO_GOAL_POSITION, target, &err);
 8001976:	f107 030e 	add.w	r3, r7, #14
 800197a:	683a      	ldr	r2, [r7, #0]
 800197c:	2174      	movs	r1, #116	; 0x74
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f7ff febf 	bl	8001702 <servo_write_i32>
 8001984:	4603      	mov	r3, r0
 8001986:	461a      	mov	r2, r3
 8001988:	7bfb      	ldrb	r3, [r7, #15]
 800198a:	4313      	orrs	r3, r2
 800198c:	73fb      	strb	r3, [r7, #15]

	return error;
 800198e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001990:	4618      	mov	r0, r3
 8001992:	3710      	adds	r7, #16
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <storage_init>:

/**********************
 *	DECLARATIONS
 **********************/

void storage_init() {
 8001998:	b5b0      	push	{r4, r5, r7, lr}
 800199a:	b09c      	sub	sp, #112	; 0x70
 800199c:	af02      	add	r7, sp, #8
	static STORAGE_HEADER_t header;
	flash_init();
 800199e:	f006 ff20 	bl	80087e2 <flash_init>
	flash_read(HEADER_ADDR, (uint8_t *) &header, sizeof(STORAGE_HEADER_t));
 80019a2:	2210      	movs	r2, #16
 80019a4:	4937      	ldr	r1, [pc, #220]	; (8001a84 <storage_init+0xec>)
 80019a6:	2000      	movs	r0, #0
 80019a8:	f006 ff40 	bl	800882c <flash_read>
	if(header.magic == MAGIC_NUMBER) {
 80019ac:	4b35      	ldr	r3, [pc, #212]	; (8001a84 <storage_init+0xec>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a35      	ldr	r2, [pc, #212]	; (8001a88 <storage_init+0xf0>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d149      	bne.n	8001a4a <storage_init+0xb2>
		used_subsectors = header.used;
 80019b6:	4b33      	ldr	r3, [pc, #204]	; (8001a84 <storage_init+0xec>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	4a34      	ldr	r2, [pc, #208]	; (8001a8c <storage_init+0xf4>)
 80019bc:	6013      	str	r3, [r2, #0]
		if(used_subsectors > 1) {
 80019be:	4b33      	ldr	r3, [pc, #204]	; (8001a8c <storage_init+0xf4>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d93d      	bls.n	8001a42 <storage_init+0xaa>
			STORAGE_DATA_t data = {0};
 80019c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ca:	2220      	movs	r2, #32
 80019cc:	2100      	movs	r1, #0
 80019ce:	4618      	mov	r0, r3
 80019d0:	f009 f96c 	bl	800acac <memset>
			STORAGE_DATA_t last_valid_data = {0};
 80019d4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80019d8:	2220      	movs	r2, #32
 80019da:	2100      	movs	r1, #0
 80019dc:	4618      	mov	r0, r3
 80019de:	f009 f965 	bl	800acac <memset>
			uint32_t count = (used_subsectors-2)*SAMPLES_PER_SS;
 80019e2:	4b2a      	ldr	r3, [pc, #168]	; (8001a8c <storage_init+0xf4>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	3b02      	subs	r3, #2
 80019e8:	01db      	lsls	r3, r3, #7
 80019ea:	667b      	str	r3, [r7, #100]	; 0x64
			data = read_data(count);
 80019ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019f0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80019f2:	4618      	mov	r0, r3
 80019f4:	f000 f87a 	bl	8001aec <read_data>
			while(data.sample_id == count){
 80019f8:	e01a      	b.n	8001a30 <storage_init+0x98>
				last_valid_data = data;
 80019fa:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80019fe:	f107 0524 	add.w	r5, r7, #36	; 0x24
 8001a02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a06:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001a0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				data = read_data(++count);
 8001a0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a10:	3301      	adds	r3, #1
 8001a12:	667b      	str	r3, [r7, #100]	; 0x64
 8001a14:	463b      	mov	r3, r7
 8001a16:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f000 f867 	bl	8001aec <read_data>
 8001a1e:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8001a22:	463d      	mov	r5, r7
 8001a24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a28:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001a2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			while(data.sample_id == count){
 8001a30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a32:	461a      	mov	r2, r3
 8001a34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d0df      	beq.n	80019fa <storage_init+0x62>
			}

			data_counter = count;
 8001a3a:	4a15      	ldr	r2, [pc, #84]	; (8001a90 <storage_init+0xf8>)
 8001a3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a3e:	6013      	str	r3, [r2, #0]
 8001a40:	e009      	b.n	8001a56 <storage_init+0xbe>
		} else {
			data_counter = 0;
 8001a42:	4b13      	ldr	r3, [pc, #76]	; (8001a90 <storage_init+0xf8>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	e005      	b.n	8001a56 <storage_init+0xbe>
		}
	} else {
		write_header_used(1);
 8001a4a:	2001      	movs	r0, #1
 8001a4c:	f000 f82a 	bl	8001aa4 <write_header_used>
		data_counter = 0;
 8001a50:	4b0f      	ldr	r3, [pc, #60]	; (8001a90 <storage_init+0xf8>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]
	}
	record_active = 0;
 8001a56:	4b0f      	ldr	r3, [pc, #60]	; (8001a94 <storage_init+0xfc>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	701a      	strb	r2, [r3, #0]
	restart_required = 0;
 8001a5c:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <storage_init+0x100>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	701a      	strb	r2, [r3, #0]
	storage_sem = xSemaphoreCreateBinaryStatic(&storage_sem_buffer);
 8001a62:	2303      	movs	r3, #3
 8001a64:	9300      	str	r3, [sp, #0]
 8001a66:	4b0d      	ldr	r3, [pc, #52]	; (8001a9c <storage_init+0x104>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	2001      	movs	r0, #1
 8001a6e:	f007 fa1b 	bl	8008ea8 <xQueueGenericCreateStatic>
 8001a72:	4603      	mov	r3, r0
 8001a74:	4a0a      	ldr	r2, [pc, #40]	; (8001aa0 <storage_init+0x108>)
 8001a76:	6013      	str	r3, [r2, #0]
	control_release();
 8001a78:	f7ff f80c 	bl	8000a94 <control_release>
}
 8001a7c:	bf00      	nop
 8001a7e:	3768      	adds	r7, #104	; 0x68
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bdb0      	pop	{r4, r5, r7, pc}
 8001a84:	20002318 	.word	0x20002318
 8001a88:	cbe0c5e6 	.word	0xcbe0c5e6
 8001a8c:	200022bc 	.word	0x200022bc
 8001a90:	200022c0 	.word	0x200022c0
 8001a94:	200022c4 	.word	0x200022c4
 8001a98:	200022c5 	.word	0x200022c5
 8001a9c:	200022d0 	.word	0x200022d0
 8001aa0:	200022cc 	.word	0x200022cc

08001aa4 <write_header_used>:

}



static void write_header_used(uint32_t used) {
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
	static STORAGE_HEADER_t header;
	flash_read(HEADER_ADDR, (uint8_t *) &header, sizeof(STORAGE_HEADER_t));
 8001aac:	2210      	movs	r2, #16
 8001aae:	490c      	ldr	r1, [pc, #48]	; (8001ae0 <write_header_used+0x3c>)
 8001ab0:	2000      	movs	r0, #0
 8001ab2:	f006 febb 	bl	800882c <flash_read>
	flash_erase_subsector(HEADER_ADDR);
 8001ab6:	2000      	movs	r0, #0
 8001ab8:	f006 ffb0 	bl	8008a1c <flash_erase_subsector>
	header.magic = MAGIC_NUMBER;
 8001abc:	4b08      	ldr	r3, [pc, #32]	; (8001ae0 <write_header_used+0x3c>)
 8001abe:	4a09      	ldr	r2, [pc, #36]	; (8001ae4 <write_header_used+0x40>)
 8001ac0:	601a      	str	r2, [r3, #0]
	header.used = used;
 8001ac2:	4a07      	ldr	r2, [pc, #28]	; (8001ae0 <write_header_used+0x3c>)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6053      	str	r3, [r2, #4]
	flash_write(HEADER_ADDR, (uint8_t *) &header, sizeof(STORAGE_HEADER_t));
 8001ac8:	2210      	movs	r2, #16
 8001aca:	4905      	ldr	r1, [pc, #20]	; (8001ae0 <write_header_used+0x3c>)
 8001acc:	2000      	movs	r0, #0
 8001ace:	f006 ff2e 	bl	800892e <flash_write>
	used_subsectors = used;
 8001ad2:	4a05      	ldr	r2, [pc, #20]	; (8001ae8 <write_header_used+0x44>)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6013      	str	r3, [r2, #0]
}
 8001ad8:	bf00      	nop
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	20002328 	.word	0x20002328
 8001ae4:	cbe0c5e6 	.word	0xcbe0c5e6
 8001ae8:	200022bc 	.word	0x200022bc

08001aec <read_data>:



static STORAGE_DATA_t read_data(uint32_t id) {
 8001aec:	b5b0      	push	{r4, r5, r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
	static STORAGE_DATA_t data;
	flash_read(ADDRESS(id), (uint8_t *) &data, sizeof(STORAGE_DATA_t));
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	3380      	adds	r3, #128	; 0x80
 8001afa:	015b      	lsls	r3, r3, #5
 8001afc:	2220      	movs	r2, #32
 8001afe:	4909      	ldr	r1, [pc, #36]	; (8001b24 <read_data+0x38>)
 8001b00:	4618      	mov	r0, r3
 8001b02:	f006 fe93 	bl	800882c <flash_read>
	return data;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a06      	ldr	r2, [pc, #24]	; (8001b24 <read_data+0x38>)
 8001b0a:	461c      	mov	r4, r3
 8001b0c:	4615      	mov	r5, r2
 8001b0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b12:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001b16:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bdb0      	pop	{r4, r5, r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20002338 	.word	0x20002338

08001b28 <storage_disable>:

void storage_enable() {
	record_active = 1;
}

void storage_disable() {
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
	record_should_stop = STORAGE_AFTER_SAVE;
 8001b2c:	4b04      	ldr	r3, [pc, #16]	; (8001b40 <storage_disable+0x18>)
 8001b2e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001b32:	601a      	str	r2, [r3, #0]
}
 8001b34:	bf00      	nop
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	200022c8 	.word	0x200022c8

08001b44 <storage_thread>:
		xSemaphoreGive(storage_sem);
	}
}


void storage_thread(void * arg) {
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]



	storage_init();
 8001b4c:	f7ff ff24 	bl	8001998 <storage_init>




	for(;;) {
		last_time = time;
 8001b50:	4b1b      	ldr	r3, [pc, #108]	; (8001bc0 <storage_thread+0x7c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a1b      	ldr	r2, [pc, #108]	; (8001bc4 <storage_thread+0x80>)
 8001b56:	6013      	str	r3, [r2, #0]
		time = HAL_GetTick();
 8001b58:	f001 fb12 	bl	8003180 <HAL_GetTick>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	4a18      	ldr	r2, [pc, #96]	; (8001bc0 <storage_thread+0x7c>)
 8001b60:	6013      	str	r3, [r2, #0]
		if(restart_required) {
 8001b62:	4b19      	ldr	r3, [pc, #100]	; (8001bc8 <storage_thread+0x84>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d008      	beq.n	8001b7c <storage_thread+0x38>
			write_header_used(1);
 8001b6a:	2001      	movs	r0, #1
 8001b6c:	f7ff ff9a 	bl	8001aa4 <write_header_used>
			data_counter = 0;
 8001b70:	4b16      	ldr	r3, [pc, #88]	; (8001bcc <storage_thread+0x88>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
			restart_required = 0;
 8001b76:	4b14      	ldr	r3, [pc, #80]	; (8001bc8 <storage_thread+0x84>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	701a      	strb	r2, [r3, #0]
		}
		if(record_should_stop) {
 8001b7c:	4b14      	ldr	r3, [pc, #80]	; (8001bd0 <storage_thread+0x8c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d014      	beq.n	8001bae <storage_thread+0x6a>
			record_should_stop -= time-last_time;;
 8001b84:	4b0f      	ldr	r3, [pc, #60]	; (8001bc4 <storage_thread+0x80>)
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	4b0d      	ldr	r3, [pc, #52]	; (8001bc0 <storage_thread+0x7c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	4a10      	ldr	r2, [pc, #64]	; (8001bd0 <storage_thread+0x8c>)
 8001b90:	6812      	ldr	r2, [r2, #0]
 8001b92:	4413      	add	r3, r2
 8001b94:	461a      	mov	r2, r3
 8001b96:	4b0e      	ldr	r3, [pc, #56]	; (8001bd0 <storage_thread+0x8c>)
 8001b98:	601a      	str	r2, [r3, #0]
			if(record_should_stop<=0){
 8001b9a:	4b0d      	ldr	r3, [pc, #52]	; (8001bd0 <storage_thread+0x8c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	dc05      	bgt.n	8001bae <storage_thread+0x6a>
				record_active=0;
 8001ba2:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <storage_thread+0x90>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	701a      	strb	r2, [r3, #0]
				record_should_stop=0;
 8001ba8:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <storage_thread+0x8c>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
			}
		}
		if(xSemaphoreTake(storage_sem, 0xffff) == pdTRUE) {
 8001bae:	4b0a      	ldr	r3, [pc, #40]	; (8001bd8 <storage_thread+0x94>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f007 fbca 	bl	8009350 <xQueueSemaphoreTake>
		last_time = time;
 8001bbc:	e7c8      	b.n	8001b50 <storage_thread+0xc>
 8001bbe:	bf00      	nop
 8001bc0:	20002358 	.word	0x20002358
 8001bc4:	2000235c 	.word	0x2000235c
 8001bc8:	200022c5 	.word	0x200022c5
 8001bcc:	200022c0 	.word	0x200022c0
 8001bd0:	200022c8 	.word	0x200022c8
 8001bd4:	200022c4 	.word	0x200022c4
 8001bd8:	200022cc 	.word	0x200022cc

08001bdc <threads_init>:
 **********************/

/*
 * Create all the threads needed by the software
 */
void threads_init(void) {
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af04      	add	r7, sp, #16


	serial_global_init();
 8001be2:	f7ff fa7d 	bl	80010e0 <serial_global_init>

	can_init();
 8001be6:	f7fe fdd7 	bl	8000798 <can_init>
	/*
	 * Storage thread
	 * lowest priority
	 */

	CREATE_THREAD(storage_handle, storage, storage_thread, STORAGE_SZ, STORAGE_PRIO);
 8001bea:	4b21      	ldr	r3, [pc, #132]	; (8001c70 <threads_init+0x94>)
 8001bec:	9302      	str	r3, [sp, #8]
 8001bee:	4b21      	ldr	r3, [pc, #132]	; (8001c74 <threads_init+0x98>)
 8001bf0:	9301      	str	r3, [sp, #4]
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	9300      	str	r3, [sp, #0]
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bfc:	491e      	ldr	r1, [pc, #120]	; (8001c78 <threads_init+0x9c>)
 8001bfe:	481f      	ldr	r0, [pc, #124]	; (8001c7c <threads_init+0xa0>)
 8001c00:	f007 fdb4 	bl	800976c <xTaskCreateStatic>
 8001c04:	4603      	mov	r3, r0
 8001c06:	4a1e      	ldr	r2, [pc, #120]	; (8001c80 <threads_init+0xa4>)
 8001c08:	6013      	str	r3, [r2, #0]

	/*
	 *  Serial RX processing thread (Bottom half)
	 *  low priority
	 */
	CREATE_THREAD(serial_handle, serial, serial_thread, SERIAL_SZ, SERIAL_PRIO);
 8001c0a:	4b1e      	ldr	r3, [pc, #120]	; (8001c84 <threads_init+0xa8>)
 8001c0c:	9302      	str	r3, [sp, #8]
 8001c0e:	4b1e      	ldr	r3, [pc, #120]	; (8001c88 <threads_init+0xac>)
 8001c10:	9301      	str	r3, [sp, #4]
 8001c12:	2305      	movs	r3, #5
 8001c14:	9300      	str	r3, [sp, #0]
 8001c16:	2300      	movs	r3, #0
 8001c18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c1c:	491b      	ldr	r1, [pc, #108]	; (8001c8c <threads_init+0xb0>)
 8001c1e:	481c      	ldr	r0, [pc, #112]	; (8001c90 <threads_init+0xb4>)
 8001c20:	f007 fda4 	bl	800976c <xTaskCreateStatic>
 8001c24:	4603      	mov	r3, r0
 8001c26:	4a1b      	ldr	r2, [pc, #108]	; (8001c94 <threads_init+0xb8>)
 8001c28:	6013      	str	r3, [r2, #0]

	/*
	 *  Main control thread
	 *  Highest priority
	 */
	CREATE_THREAD(control_handle, control, control_thread, CONTROL_SZ, CONTROL_PRIO);
 8001c2a:	4b1b      	ldr	r3, [pc, #108]	; (8001c98 <threads_init+0xbc>)
 8001c2c:	9302      	str	r3, [sp, #8]
 8001c2e:	4b1b      	ldr	r3, [pc, #108]	; (8001c9c <threads_init+0xc0>)
 8001c30:	9301      	str	r3, [sp, #4]
 8001c32:	2306      	movs	r3, #6
 8001c34:	9300      	str	r3, [sp, #0]
 8001c36:	2300      	movs	r3, #0
 8001c38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c3c:	4918      	ldr	r1, [pc, #96]	; (8001ca0 <threads_init+0xc4>)
 8001c3e:	4819      	ldr	r0, [pc, #100]	; (8001ca4 <threads_init+0xc8>)
 8001c40:	f007 fd94 	bl	800976c <xTaskCreateStatic>
 8001c44:	4603      	mov	r3, r0
 8001c46:	4a18      	ldr	r2, [pc, #96]	; (8001ca8 <threads_init+0xcc>)
 8001c48:	6013      	str	r3, [r2, #0]

	/*
	 *  CAN send thread
	 *  Highest priority
	 */
	CREATE_THREAD(can_send_handle, can_send, can_send_thread, CAN_SZ, CAN_PRIO);
 8001c4a:	4b18      	ldr	r3, [pc, #96]	; (8001cac <threads_init+0xd0>)
 8001c4c:	9302      	str	r3, [sp, #8]
 8001c4e:	4b18      	ldr	r3, [pc, #96]	; (8001cb0 <threads_init+0xd4>)
 8001c50:	9301      	str	r3, [sp, #4]
 8001c52:	2303      	movs	r3, #3
 8001c54:	9300      	str	r3, [sp, #0]
 8001c56:	2300      	movs	r3, #0
 8001c58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c5c:	4915      	ldr	r1, [pc, #84]	; (8001cb4 <threads_init+0xd8>)
 8001c5e:	4816      	ldr	r0, [pc, #88]	; (8001cb8 <threads_init+0xdc>)
 8001c60:	f007 fd84 	bl	800976c <xTaskCreateStatic>
 8001c64:	4603      	mov	r3, r0
 8001c66:	4a15      	ldr	r2, [pc, #84]	; (8001cbc <threads_init+0xe0>)
 8001c68:	6013      	str	r3, [r2, #0]



}
 8001c6a:	bf00      	nop
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	20003370 	.word	0x20003370
 8001c74:	20002370 	.word	0x20002370
 8001c78:	0800aed4 	.word	0x0800aed4
 8001c7c:	08001b45 	.word	0x08001b45
 8001c80:	20002368 	.word	0x20002368
 8001c84:	200043c4 	.word	0x200043c4
 8001c88:	200033c4 	.word	0x200033c4
 8001c8c:	0800aedc 	.word	0x0800aedc
 8001c90:	080011b1 	.word	0x080011b1
 8001c94:	20002364 	.word	0x20002364
 8001c98:	20005418 	.word	0x20005418
 8001c9c:	20004418 	.word	0x20004418
 8001ca0:	0800aee4 	.word	0x0800aee4
 8001ca4:	080007d1 	.word	0x080007d1
 8001ca8:	20002360 	.word	0x20002360
 8001cac:	2000646c 	.word	0x2000646c
 8001cb0:	2000546c 	.word	0x2000546c
 8001cb4:	0800aeec 	.word	0x0800aeec
 8001cb8:	080007a9 	.word	0x080007a9
 8001cbc:	2000236c 	.word	0x2000236c

08001cc0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8001cc6:	463b      	mov	r3, r7
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	609a      	str	r2, [r3, #8]
 8001cd0:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001cd2:	4b3e      	ldr	r3, [pc, #248]	; (8001dcc <MX_ADC1_Init+0x10c>)
 8001cd4:	4a3e      	ldr	r2, [pc, #248]	; (8001dd0 <MX_ADC1_Init+0x110>)
 8001cd6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001cd8:	4b3c      	ldr	r3, [pc, #240]	; (8001dcc <MX_ADC1_Init+0x10c>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001cde:	4b3b      	ldr	r3, [pc, #236]	; (8001dcc <MX_ADC1_Init+0x10c>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001ce4:	4b39      	ldr	r3, [pc, #228]	; (8001dcc <MX_ADC1_Init+0x10c>)
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001cea:	4b38      	ldr	r3, [pc, #224]	; (8001dcc <MX_ADC1_Init+0x10c>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001cf0:	4b36      	ldr	r3, [pc, #216]	; (8001dcc <MX_ADC1_Init+0x10c>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 8001cf8:	4b34      	ldr	r3, [pc, #208]	; (8001dcc <MX_ADC1_Init+0x10c>)
 8001cfa:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001cfe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001d00:	4b32      	ldr	r3, [pc, #200]	; (8001dcc <MX_ADC1_Init+0x10c>)
 8001d02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d06:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d08:	4b30      	ldr	r3, [pc, #192]	; (8001dcc <MX_ADC1_Init+0x10c>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8001d0e:	4b2f      	ldr	r3, [pc, #188]	; (8001dcc <MX_ADC1_Init+0x10c>)
 8001d10:	2205      	movs	r2, #5
 8001d12:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001d14:	4b2d      	ldr	r3, [pc, #180]	; (8001dcc <MX_ADC1_Init+0x10c>)
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001d1c:	4b2b      	ldr	r3, [pc, #172]	; (8001dcc <MX_ADC1_Init+0x10c>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d22:	482a      	ldr	r0, [pc, #168]	; (8001dcc <MX_ADC1_Init+0x10c>)
 8001d24:	f001 fa38 	bl	8003198 <HAL_ADC_Init>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8001d2e:	f000 fb39 	bl	80023a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001d32:	2302      	movs	r3, #2
 8001d34:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001d36:	2301      	movs	r3, #1
 8001d38:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d3e:	463b      	mov	r3, r7
 8001d40:	4619      	mov	r1, r3
 8001d42:	4822      	ldr	r0, [pc, #136]	; (8001dcc <MX_ADC1_Init+0x10c>)
 8001d44:	f001 fa6c 	bl	8003220 <HAL_ADC_ConfigChannel>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001d4e:	f000 fb29 	bl	80023a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001d52:	230a      	movs	r3, #10
 8001d54:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001d56:	2302      	movs	r3, #2
 8001d58:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d5a:	463b      	mov	r3, r7
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	481b      	ldr	r0, [pc, #108]	; (8001dcc <MX_ADC1_Init+0x10c>)
 8001d60:	f001 fa5e 	bl	8003220 <HAL_ADC_ConfigChannel>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001d6a:	f000 fb1b 	bl	80023a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001d72:	2303      	movs	r3, #3
 8001d74:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d76:	463b      	mov	r3, r7
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4814      	ldr	r0, [pc, #80]	; (8001dcc <MX_ADC1_Init+0x10c>)
 8001d7c:	f001 fa50 	bl	8003220 <HAL_ADC_ConfigChannel>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8001d86:	f000 fb0d 	bl	80023a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001d8e:	2304      	movs	r3, #4
 8001d90:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d92:	463b      	mov	r3, r7
 8001d94:	4619      	mov	r1, r3
 8001d96:	480d      	ldr	r0, [pc, #52]	; (8001dcc <MX_ADC1_Init+0x10c>)
 8001d98:	f001 fa42 	bl	8003220 <HAL_ADC_ConfigChannel>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8001da2:	f000 faff 	bl	80023a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001da6:	2303      	movs	r3, #3
 8001da8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001daa:	2305      	movs	r3, #5
 8001dac:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dae:	463b      	mov	r3, r7
 8001db0:	4619      	mov	r1, r3
 8001db2:	4806      	ldr	r0, [pc, #24]	; (8001dcc <MX_ADC1_Init+0x10c>)
 8001db4:	f001 fa34 	bl	8003220 <HAL_ADC_ConfigChannel>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 8001dbe:	f000 faf1 	bl	80023a4 <Error_Handler>
  }

}
 8001dc2:	bf00      	nop
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	20006c98 	.word	0x20006c98
 8001dd0:	40012000 	.word	0x40012000

08001dd4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b08a      	sub	sp, #40	; 0x28
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ddc:	f107 0314 	add.w	r3, r7, #20
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	60da      	str	r2, [r3, #12]
 8001dea:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a3c      	ldr	r2, [pc, #240]	; (8001ee4 <HAL_ADC_MspInit+0x110>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d172      	bne.n	8001edc <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	613b      	str	r3, [r7, #16]
 8001dfa:	4b3b      	ldr	r3, [pc, #236]	; (8001ee8 <HAL_ADC_MspInit+0x114>)
 8001dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfe:	4a3a      	ldr	r2, [pc, #232]	; (8001ee8 <HAL_ADC_MspInit+0x114>)
 8001e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e04:	6453      	str	r3, [r2, #68]	; 0x44
 8001e06:	4b38      	ldr	r3, [pc, #224]	; (8001ee8 <HAL_ADC_MspInit+0x114>)
 8001e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e0e:	613b      	str	r3, [r7, #16]
 8001e10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	4b34      	ldr	r3, [pc, #208]	; (8001ee8 <HAL_ADC_MspInit+0x114>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	4a33      	ldr	r2, [pc, #204]	; (8001ee8 <HAL_ADC_MspInit+0x114>)
 8001e1c:	f043 0304 	orr.w	r3, r3, #4
 8001e20:	6313      	str	r3, [r2, #48]	; 0x30
 8001e22:	4b31      	ldr	r3, [pc, #196]	; (8001ee8 <HAL_ADC_MspInit+0x114>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	f003 0304 	and.w	r3, r3, #4
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60bb      	str	r3, [r7, #8]
 8001e32:	4b2d      	ldr	r3, [pc, #180]	; (8001ee8 <HAL_ADC_MspInit+0x114>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e36:	4a2c      	ldr	r2, [pc, #176]	; (8001ee8 <HAL_ADC_MspInit+0x114>)
 8001e38:	f043 0301 	orr.w	r3, r3, #1
 8001e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3e:	4b2a      	ldr	r3, [pc, #168]	; (8001ee8 <HAL_ADC_MspInit+0x114>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	60bb      	str	r3, [r7, #8]
 8001e48:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = PRES_1_Pin;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e52:	2300      	movs	r3, #0
 8001e54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PRES_1_GPIO_Port, &GPIO_InitStruct);
 8001e56:	f107 0314 	add.w	r3, r7, #20
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4823      	ldr	r0, [pc, #140]	; (8001eec <HAL_ADC_MspInit+0x118>)
 8001e5e:	f002 fea1 	bl	8004ba4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TEMP_1_Pin|TEMP_2_Pin|PRES_2_Pin|TEMP_3_Pin;
 8001e62:	230f      	movs	r3, #15
 8001e64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e66:	2303      	movs	r3, #3
 8001e68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6e:	f107 0314 	add.w	r3, r7, #20
 8001e72:	4619      	mov	r1, r3
 8001e74:	481e      	ldr	r0, [pc, #120]	; (8001ef0 <HAL_ADC_MspInit+0x11c>)
 8001e76:	f002 fe95 	bl	8004ba4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001e7a:	4b1e      	ldr	r3, [pc, #120]	; (8001ef4 <HAL_ADC_MspInit+0x120>)
 8001e7c:	4a1e      	ldr	r2, [pc, #120]	; (8001ef8 <HAL_ADC_MspInit+0x124>)
 8001e7e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001e80:	4b1c      	ldr	r3, [pc, #112]	; (8001ef4 <HAL_ADC_MspInit+0x120>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e86:	4b1b      	ldr	r3, [pc, #108]	; (8001ef4 <HAL_ADC_MspInit+0x120>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e8c:	4b19      	ldr	r3, [pc, #100]	; (8001ef4 <HAL_ADC_MspInit+0x120>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e92:	4b18      	ldr	r3, [pc, #96]	; (8001ef4 <HAL_ADC_MspInit+0x120>)
 8001e94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e98:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e9a:	4b16      	ldr	r3, [pc, #88]	; (8001ef4 <HAL_ADC_MspInit+0x120>)
 8001e9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ea0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ea2:	4b14      	ldr	r3, [pc, #80]	; (8001ef4 <HAL_ADC_MspInit+0x120>)
 8001ea4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ea8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001eaa:	4b12      	ldr	r3, [pc, #72]	; (8001ef4 <HAL_ADC_MspInit+0x120>)
 8001eac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001eb0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001eb2:	4b10      	ldr	r3, [pc, #64]	; (8001ef4 <HAL_ADC_MspInit+0x120>)
 8001eb4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001eb8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001eba:	4b0e      	ldr	r3, [pc, #56]	; (8001ef4 <HAL_ADC_MspInit+0x120>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ec0:	480c      	ldr	r0, [pc, #48]	; (8001ef4 <HAL_ADC_MspInit+0x120>)
 8001ec2:	f002 fa6d 	bl	80043a0 <HAL_DMA_Init>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8001ecc:	f000 fa6a 	bl	80023a4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a08      	ldr	r2, [pc, #32]	; (8001ef4 <HAL_ADC_MspInit+0x120>)
 8001ed4:	639a      	str	r2, [r3, #56]	; 0x38
 8001ed6:	4a07      	ldr	r2, [pc, #28]	; (8001ef4 <HAL_ADC_MspInit+0x120>)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001edc:	bf00      	nop
 8001ede:	3728      	adds	r7, #40	; 0x28
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40012000 	.word	0x40012000
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	40020800 	.word	0x40020800
 8001ef0:	40020000 	.word	0x40020000
 8001ef4:	20006ce0 	.word	0x20006ce0
 8001ef8:	40026410 	.word	0x40026410

08001efc <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8001f00:	4b17      	ldr	r3, [pc, #92]	; (8001f60 <MX_CAN1_Init+0x64>)
 8001f02:	4a18      	ldr	r2, [pc, #96]	; (8001f64 <MX_CAN1_Init+0x68>)
 8001f04:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 8001f06:	4b16      	ldr	r3, [pc, #88]	; (8001f60 <MX_CAN1_Init+0x64>)
 8001f08:	2209      	movs	r2, #9
 8001f0a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001f0c:	4b14      	ldr	r3, [pc, #80]	; (8001f60 <MX_CAN1_Init+0x64>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001f12:	4b13      	ldr	r3, [pc, #76]	; (8001f60 <MX_CAN1_Init+0x64>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8001f18:	4b11      	ldr	r3, [pc, #68]	; (8001f60 <MX_CAN1_Init+0x64>)
 8001f1a:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8001f1e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001f20:	4b0f      	ldr	r3, [pc, #60]	; (8001f60 <MX_CAN1_Init+0x64>)
 8001f22:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001f26:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001f28:	4b0d      	ldr	r3, [pc, #52]	; (8001f60 <MX_CAN1_Init+0x64>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001f2e:	4b0c      	ldr	r3, [pc, #48]	; (8001f60 <MX_CAN1_Init+0x64>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001f34:	4b0a      	ldr	r3, [pc, #40]	; (8001f60 <MX_CAN1_Init+0x64>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001f3a:	4b09      	ldr	r3, [pc, #36]	; (8001f60 <MX_CAN1_Init+0x64>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001f40:	4b07      	ldr	r3, [pc, #28]	; (8001f60 <MX_CAN1_Init+0x64>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001f46:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <MX_CAN1_Init+0x64>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001f4c:	4804      	ldr	r0, [pc, #16]	; (8001f60 <MX_CAN1_Init+0x64>)
 8001f4e:	f001 fb95 	bl	800367c <HAL_CAN_Init>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001f58:	f000 fa24 	bl	80023a4 <Error_Handler>
  }

}
 8001f5c:	bf00      	nop
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	20006d40 	.word	0x20006d40
 8001f64:	40006400 	.word	0x40006400

08001f68 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b08a      	sub	sp, #40	; 0x28
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f70:	f107 0314 	add.w	r3, r7, #20
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	605a      	str	r2, [r3, #4]
 8001f7a:	609a      	str	r2, [r3, #8]
 8001f7c:	60da      	str	r2, [r3, #12]
 8001f7e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a2d      	ldr	r2, [pc, #180]	; (800203c <HAL_CAN_MspInit+0xd4>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d153      	bne.n	8002032 <HAL_CAN_MspInit+0xca>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	613b      	str	r3, [r7, #16]
 8001f8e:	4b2c      	ldr	r3, [pc, #176]	; (8002040 <HAL_CAN_MspInit+0xd8>)
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	4a2b      	ldr	r2, [pc, #172]	; (8002040 <HAL_CAN_MspInit+0xd8>)
 8001f94:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f98:	6413      	str	r3, [r2, #64]	; 0x40
 8001f9a:	4b29      	ldr	r3, [pc, #164]	; (8002040 <HAL_CAN_MspInit+0xd8>)
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa2:	613b      	str	r3, [r7, #16]
 8001fa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	60fb      	str	r3, [r7, #12]
 8001faa:	4b25      	ldr	r3, [pc, #148]	; (8002040 <HAL_CAN_MspInit+0xd8>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	4a24      	ldr	r2, [pc, #144]	; (8002040 <HAL_CAN_MspInit+0xd8>)
 8001fb0:	f043 0301 	orr.w	r3, r3, #1
 8001fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb6:	4b22      	ldr	r3, [pc, #136]	; (8002040 <HAL_CAN_MspInit+0xd8>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60bb      	str	r3, [r7, #8]
 8001fc6:	4b1e      	ldr	r3, [pc, #120]	; (8002040 <HAL_CAN_MspInit+0xd8>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	4a1d      	ldr	r2, [pc, #116]	; (8002040 <HAL_CAN_MspInit+0xd8>)
 8001fcc:	f043 0302 	orr.w	r3, r3, #2
 8001fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd2:	4b1b      	ldr	r3, [pc, #108]	; (8002040 <HAL_CAN_MspInit+0xd8>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	60bb      	str	r3, [r7, #8]
 8001fdc:	68bb      	ldr	r3, [r7, #8]
    /**CAN1 GPIO Configuration
    PA12     ------> CAN1_TX
    PB8     ------> CAN1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001fde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fe2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fec:	2303      	movs	r3, #3
 8001fee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001ff0:	2309      	movs	r3, #9
 8001ff2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff4:	f107 0314 	add.w	r3, r7, #20
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4812      	ldr	r0, [pc, #72]	; (8002044 <HAL_CAN_MspInit+0xdc>)
 8001ffc:	f002 fdd2 	bl	8004ba4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002000:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002004:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002006:	2302      	movs	r3, #2
 8002008:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200a:	2300      	movs	r3, #0
 800200c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800200e:	2303      	movs	r3, #3
 8002010:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002012:	2309      	movs	r3, #9
 8002014:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002016:	f107 0314 	add.w	r3, r7, #20
 800201a:	4619      	mov	r1, r3
 800201c:	480a      	ldr	r0, [pc, #40]	; (8002048 <HAL_CAN_MspInit+0xe0>)
 800201e:	f002 fdc1 	bl	8004ba4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8002022:	2200      	movs	r2, #0
 8002024:	2105      	movs	r1, #5
 8002026:	2014      	movs	r0, #20
 8002028:	f002 f990 	bl	800434c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800202c:	2014      	movs	r0, #20
 800202e:	f002 f9a9 	bl	8004384 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8002032:	bf00      	nop
 8002034:	3728      	adds	r7, #40	; 0x28
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40006400 	.word	0x40006400
 8002040:	40023800 	.word	0x40023800
 8002044:	40020000 	.word	0x40020000
 8002048:	40020400 	.word	0x40020400

0800204c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	607b      	str	r3, [r7, #4]
 8002056:	4b2b      	ldr	r3, [pc, #172]	; (8002104 <MX_DMA_Init+0xb8>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	4a2a      	ldr	r2, [pc, #168]	; (8002104 <MX_DMA_Init+0xb8>)
 800205c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002060:	6313      	str	r3, [r2, #48]	; 0x30
 8002062:	4b28      	ldr	r3, [pc, #160]	; (8002104 <MX_DMA_Init+0xb8>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800206a:	607b      	str	r3, [r7, #4]
 800206c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	603b      	str	r3, [r7, #0]
 8002072:	4b24      	ldr	r3, [pc, #144]	; (8002104 <MX_DMA_Init+0xb8>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	4a23      	ldr	r2, [pc, #140]	; (8002104 <MX_DMA_Init+0xb8>)
 8002078:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800207c:	6313      	str	r3, [r2, #48]	; 0x30
 800207e:	4b21      	ldr	r3, [pc, #132]	; (8002104 <MX_DMA_Init+0xb8>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002086:	603b      	str	r3, [r7, #0]
 8002088:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800208a:	2200      	movs	r2, #0
 800208c:	2105      	movs	r1, #5
 800208e:	200c      	movs	r0, #12
 8002090:	f002 f95c 	bl	800434c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002094:	200c      	movs	r0, #12
 8002096:	f002 f975 	bl	8004384 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800209a:	2200      	movs	r2, #0
 800209c:	2105      	movs	r1, #5
 800209e:	200e      	movs	r0, #14
 80020a0:	f002 f954 	bl	800434c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80020a4:	200e      	movs	r0, #14
 80020a6:	f002 f96d 	bl	8004384 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80020aa:	2200      	movs	r2, #0
 80020ac:	2105      	movs	r1, #5
 80020ae:	2038      	movs	r0, #56	; 0x38
 80020b0:	f002 f94c 	bl	800434c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80020b4:	2038      	movs	r0, #56	; 0x38
 80020b6:	f002 f965 	bl	8004384 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80020ba:	2200      	movs	r2, #0
 80020bc:	2105      	movs	r1, #5
 80020be:	2039      	movs	r0, #57	; 0x39
 80020c0:	f002 f944 	bl	800434c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80020c4:	2039      	movs	r0, #57	; 0x39
 80020c6:	f002 f95d 	bl	8004384 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80020ca:	2200      	movs	r2, #0
 80020cc:	2105      	movs	r1, #5
 80020ce:	203a      	movs	r0, #58	; 0x3a
 80020d0:	f002 f93c 	bl	800434c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80020d4:	203a      	movs	r0, #58	; 0x3a
 80020d6:	f002 f955 	bl	8004384 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80020da:	2200      	movs	r2, #0
 80020dc:	2105      	movs	r1, #5
 80020de:	2045      	movs	r0, #69	; 0x45
 80020e0:	f002 f934 	bl	800434c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80020e4:	2045      	movs	r0, #69	; 0x45
 80020e6:	f002 f94d 	bl	8004384 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 80020ea:	2200      	movs	r2, #0
 80020ec:	2105      	movs	r1, #5
 80020ee:	2046      	movs	r0, #70	; 0x46
 80020f0:	f002 f92c 	bl	800434c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80020f4:	2046      	movs	r0, #70	; 0x46
 80020f6:	f002 f945 	bl	8004384 <HAL_NVIC_EnableIRQ>

}
 80020fa:	bf00      	nop
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40023800 	.word	0x40023800

08002108 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	4a07      	ldr	r2, [pc, #28]	; (8002134 <vApplicationGetIdleTaskMemory+0x2c>)
 8002118:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	4a06      	ldr	r2, [pc, #24]	; (8002138 <vApplicationGetIdleTaskMemory+0x30>)
 800211e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2280      	movs	r2, #128	; 0x80
 8002124:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002126:	bf00      	nop
 8002128:	3714      	adds	r7, #20
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	200064c0 	.word	0x200064c0
 8002138:	20006514 	.word	0x20006514

0800213c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800213c:	b5b0      	push	{r4, r5, r7, lr}
 800213e:	b088      	sub	sp, #32
 8002140:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128, defaultTaskBuffer, &defaultTaskControlBlock);
 8002142:	4b0a      	ldr	r3, [pc, #40]	; (800216c <MX_FREERTOS_Init+0x30>)
 8002144:	1d3c      	adds	r4, r7, #4
 8002146:	461d      	mov	r5, r3
 8002148:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800214a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800214c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002150:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002154:	1d3b      	adds	r3, r7, #4
 8002156:	2100      	movs	r1, #0
 8002158:	4618      	mov	r0, r3
 800215a:	f006 fd50 	bl	8008bfe <osThreadCreate>
 800215e:	4603      	mov	r3, r0
 8002160:	4a03      	ldr	r2, [pc, #12]	; (8002170 <MX_FREERTOS_Init+0x34>)
 8002162:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002164:	bf00      	nop
 8002166:	3720      	adds	r7, #32
 8002168:	46bd      	mov	sp, r7
 800216a:	bdb0      	pop	{r4, r5, r7, pc}
 800216c:	0800af04 	.word	0x0800af04
 8002170:	20006d68 	.word	0x20006d68

08002174 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800217c:	2001      	movs	r0, #1
 800217e:	f006 fd63 	bl	8008c48 <osDelay>
 8002182:	e7fb      	b.n	800217c <StartDefaultTask+0x8>

08002184 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b088      	sub	sp, #32
 8002188:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800218a:	f107 030c 	add.w	r3, r7, #12
 800218e:	2200      	movs	r2, #0
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	605a      	str	r2, [r3, #4]
 8002194:	609a      	str	r2, [r3, #8]
 8002196:	60da      	str	r2, [r3, #12]
 8002198:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800219a:	2300      	movs	r3, #0
 800219c:	60bb      	str	r3, [r7, #8]
 800219e:	4b2b      	ldr	r3, [pc, #172]	; (800224c <MX_GPIO_Init+0xc8>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	4a2a      	ldr	r2, [pc, #168]	; (800224c <MX_GPIO_Init+0xc8>)
 80021a4:	f043 0304 	orr.w	r3, r3, #4
 80021a8:	6313      	str	r3, [r2, #48]	; 0x30
 80021aa:	4b28      	ldr	r3, [pc, #160]	; (800224c <MX_GPIO_Init+0xc8>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	f003 0304 	and.w	r3, r3, #4
 80021b2:	60bb      	str	r3, [r7, #8]
 80021b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b6:	2300      	movs	r3, #0
 80021b8:	607b      	str	r3, [r7, #4]
 80021ba:	4b24      	ldr	r3, [pc, #144]	; (800224c <MX_GPIO_Init+0xc8>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	4a23      	ldr	r2, [pc, #140]	; (800224c <MX_GPIO_Init+0xc8>)
 80021c0:	f043 0301 	orr.w	r3, r3, #1
 80021c4:	6313      	str	r3, [r2, #48]	; 0x30
 80021c6:	4b21      	ldr	r3, [pc, #132]	; (800224c <MX_GPIO_Init+0xc8>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	607b      	str	r3, [r7, #4]
 80021d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	603b      	str	r3, [r7, #0]
 80021d6:	4b1d      	ldr	r3, [pc, #116]	; (800224c <MX_GPIO_Init+0xc8>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021da:	4a1c      	ldr	r2, [pc, #112]	; (800224c <MX_GPIO_Init+0xc8>)
 80021dc:	f043 0302 	orr.w	r3, r3, #2
 80021e0:	6313      	str	r3, [r2, #48]	; 0x30
 80021e2:	4b1a      	ldr	r3, [pc, #104]	; (800224c <MX_GPIO_Init+0xc8>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	603b      	str	r3, [r7, #0]
 80021ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80021ee:	2200      	movs	r2, #0
 80021f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021f4:	4816      	ldr	r0, [pc, #88]	; (8002250 <MX_GPIO_Init+0xcc>)
 80021f6:	f002 fe69 	bl	8004ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SOLENOID_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 80021fa:	2200      	movs	r2, #0
 80021fc:	f44f 7120 	mov.w	r1, #640	; 0x280
 8002200:	4814      	ldr	r0, [pc, #80]	; (8002254 <MX_GPIO_Init+0xd0>)
 8002202:	f002 fe63 	bl	8004ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8002206:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800220a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800220c:	2301      	movs	r3, #1
 800220e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002210:	2300      	movs	r3, #0
 8002212:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002214:	2300      	movs	r3, #0
 8002216:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8002218:	f107 030c 	add.w	r3, r7, #12
 800221c:	4619      	mov	r1, r3
 800221e:	480c      	ldr	r0, [pc, #48]	; (8002250 <MX_GPIO_Init+0xcc>)
 8002220:	f002 fcc0 	bl	8004ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB9 */
  GPIO_InitStruct.Pin = SOLENOID_Pin|GPIO_PIN_9;
 8002224:	f44f 7320 	mov.w	r3, #640	; 0x280
 8002228:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800222a:	2301      	movs	r3, #1
 800222c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222e:	2300      	movs	r3, #0
 8002230:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002232:	2300      	movs	r3, #0
 8002234:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002236:	f107 030c 	add.w	r3, r7, #12
 800223a:	4619      	mov	r1, r3
 800223c:	4805      	ldr	r0, [pc, #20]	; (8002254 <MX_GPIO_Init+0xd0>)
 800223e:	f002 fcb1 	bl	8004ba4 <HAL_GPIO_Init>

}
 8002242:	bf00      	nop
 8002244:	3720      	adds	r7, #32
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	40023800 	.word	0x40023800
 8002250:	40020000 	.word	0x40020000
 8002254:	40020400 	.word	0x40020400

08002258 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800225c:	f000 ff5a 	bl	8003114 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002260:	f000 f822 	bl	80022a8 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002264:	f7ff ff8e 	bl	8002184 <MX_GPIO_Init>
  MX_DMA_Init();
 8002268:	f7ff fef0 	bl	800204c <MX_DMA_Init>
  MX_ADC1_Init();
 800226c:	f7ff fd28 	bl	8001cc0 <MX_ADC1_Init>
  MX_TIM8_Init();
 8002270:	f000 fb22 	bl	80028b8 <MX_TIM8_Init>
  MX_TIM2_Init();
 8002274:	f000 fa86 	bl	8002784 <MX_TIM2_Init>
  MX_USART6_UART_Init();
 8002278:	f000 fcd2 	bl	8002c20 <MX_USART6_UART_Init>
  MX_USART3_UART_Init();
 800227c:	f000 fca6 	bl	8002bcc <MX_USART3_UART_Init>
  MX_QUADSPI_Init();
 8002280:	f000 f898 	bl	80023b4 <MX_QUADSPI_Init>
  MX_TIM3_Init();
 8002284:	f000 faca 	bl	800281c <MX_TIM3_Init>
  MX_CAN1_Init();
 8002288:	f7ff fe38 	bl	8001efc <MX_CAN1_Init>
  MX_USART1_UART_Init();
 800228c:	f000 fc74 	bl	8002b78 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */



  threads_init();
 8002290:	f7ff fca4 	bl	8001bdc <threads_init>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8002294:	f7ff ff52 	bl	800213c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8002298:	f006 fcaa 	bl	8008bf0 <osKernelStart>



  while (1)
  {
	osDelay(1000);
 800229c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022a0:	f006 fcd2 	bl	8008c48 <osDelay>
 80022a4:	e7fa      	b.n	800229c <main+0x44>
	...

080022a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b094      	sub	sp, #80	; 0x50
 80022ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022ae:	f107 031c 	add.w	r3, r7, #28
 80022b2:	2234      	movs	r2, #52	; 0x34
 80022b4:	2100      	movs	r1, #0
 80022b6:	4618      	mov	r0, r3
 80022b8:	f008 fcf8 	bl	800acac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022bc:	f107 0308 	add.w	r3, r7, #8
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	605a      	str	r2, [r3, #4]
 80022c6:	609a      	str	r2, [r3, #8]
 80022c8:	60da      	str	r2, [r3, #12]
 80022ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80022cc:	2300      	movs	r3, #0
 80022ce:	607b      	str	r3, [r7, #4]
 80022d0:	4b29      	ldr	r3, [pc, #164]	; (8002378 <SystemClock_Config+0xd0>)
 80022d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d4:	4a28      	ldr	r2, [pc, #160]	; (8002378 <SystemClock_Config+0xd0>)
 80022d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022da:	6413      	str	r3, [r2, #64]	; 0x40
 80022dc:	4b26      	ldr	r3, [pc, #152]	; (8002378 <SystemClock_Config+0xd0>)
 80022de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e4:	607b      	str	r3, [r7, #4]
 80022e6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80022e8:	2300      	movs	r3, #0
 80022ea:	603b      	str	r3, [r7, #0]
 80022ec:	4b23      	ldr	r3, [pc, #140]	; (800237c <SystemClock_Config+0xd4>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80022f4:	4a21      	ldr	r2, [pc, #132]	; (800237c <SystemClock_Config+0xd4>)
 80022f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022fa:	6013      	str	r3, [r2, #0]
 80022fc:	4b1f      	ldr	r3, [pc, #124]	; (800237c <SystemClock_Config+0xd4>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002304:	603b      	str	r3, [r7, #0]
 8002306:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002308:	2302      	movs	r3, #2
 800230a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800230c:	2301      	movs	r3, #1
 800230e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002310:	2310      	movs	r3, #16
 8002312:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002314:	2302      	movs	r3, #2
 8002316:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002318:	2300      	movs	r3, #0
 800231a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800231c:	2308      	movs	r3, #8
 800231e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002320:	2348      	movs	r3, #72	; 0x48
 8002322:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002324:	2302      	movs	r3, #2
 8002326:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002328:	2303      	movs	r3, #3
 800232a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800232c:	2302      	movs	r3, #2
 800232e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002330:	f107 031c 	add.w	r3, r7, #28
 8002334:	4618      	mov	r0, r3
 8002336:	f003 ffed 	bl	8006314 <HAL_RCC_OscConfig>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002340:	f000 f830 	bl	80023a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002344:	230f      	movs	r3, #15
 8002346:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002348:	2302      	movs	r3, #2
 800234a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800234c:	2300      	movs	r3, #0
 800234e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002350:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002354:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002356:	2300      	movs	r3, #0
 8002358:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800235a:	f107 0308 	add.w	r3, r7, #8
 800235e:	2102      	movs	r1, #2
 8002360:	4618      	mov	r0, r3
 8002362:	f003 fd2f 	bl	8005dc4 <HAL_RCC_ClockConfig>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800236c:	f000 f81a 	bl	80023a4 <Error_Handler>
  }
}
 8002370:	bf00      	nop
 8002372:	3750      	adds	r7, #80	; 0x50
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40023800 	.word	0x40023800
 800237c:	40007000 	.word	0x40007000

08002380 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a04      	ldr	r2, [pc, #16]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d101      	bne.n	8002396 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002392:	f000 fee1 	bl	8003158 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002396:	bf00      	nop
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40010000 	.word	0x40010000

080023a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80023a8:	bf00      	nop
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
	...

080023b4 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0

  hqspi.Instance = QUADSPI;
 80023b8:	4b12      	ldr	r3, [pc, #72]	; (8002404 <MX_QUADSPI_Init+0x50>)
 80023ba:	4a13      	ldr	r2, [pc, #76]	; (8002408 <MX_QUADSPI_Init+0x54>)
 80023bc:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 100;
 80023be:	4b11      	ldr	r3, [pc, #68]	; (8002404 <MX_QUADSPI_Init+0x50>)
 80023c0:	2264      	movs	r2, #100	; 0x64
 80023c2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80023c4:	4b0f      	ldr	r3, [pc, #60]	; (8002404 <MX_QUADSPI_Init+0x50>)
 80023c6:	2201      	movs	r2, #1
 80023c8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80023ca:	4b0e      	ldr	r3, [pc, #56]	; (8002404 <MX_QUADSPI_Init+0x50>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 26;
 80023d0:	4b0c      	ldr	r3, [pc, #48]	; (8002404 <MX_QUADSPI_Init+0x50>)
 80023d2:	221a      	movs	r2, #26
 80023d4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80023d6:	4b0b      	ldr	r3, [pc, #44]	; (8002404 <MX_QUADSPI_Init+0x50>)
 80023d8:	2200      	movs	r2, #0
 80023da:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80023dc:	4b09      	ldr	r3, [pc, #36]	; (8002404 <MX_QUADSPI_Init+0x50>)
 80023de:	2200      	movs	r2, #0
 80023e0:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80023e2:	4b08      	ldr	r3, [pc, #32]	; (8002404 <MX_QUADSPI_Init+0x50>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80023e8:	4b06      	ldr	r3, [pc, #24]	; (8002404 <MX_QUADSPI_Init+0x50>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80023ee:	4805      	ldr	r0, [pc, #20]	; (8002404 <MX_QUADSPI_Init+0x50>)
 80023f0:	f002 fd86 	bl	8004f00 <HAL_QSPI_Init>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80023fa:	f7ff ffd3 	bl	80023a4 <Error_Handler>
  }

}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	20006fc0 	.word	0x20006fc0
 8002408:	a0001000 	.word	0xa0001000

0800240c <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b08a      	sub	sp, #40	; 0x28
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002414:	f107 0314 	add.w	r3, r7, #20
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	605a      	str	r2, [r3, #4]
 800241e:	609a      	str	r2, [r3, #8]
 8002420:	60da      	str	r2, [r3, #12]
 8002422:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a34      	ldr	r2, [pc, #208]	; (80024fc <HAL_QSPI_MspInit+0xf0>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d162      	bne.n	80024f4 <HAL_QSPI_MspInit+0xe8>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800242e:	2300      	movs	r3, #0
 8002430:	613b      	str	r3, [r7, #16]
 8002432:	4b33      	ldr	r3, [pc, #204]	; (8002500 <HAL_QSPI_MspInit+0xf4>)
 8002434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002436:	4a32      	ldr	r2, [pc, #200]	; (8002500 <HAL_QSPI_MspInit+0xf4>)
 8002438:	f043 0302 	orr.w	r3, r3, #2
 800243c:	6393      	str	r3, [r2, #56]	; 0x38
 800243e:	4b30      	ldr	r3, [pc, #192]	; (8002500 <HAL_QSPI_MspInit+0xf4>)
 8002440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	613b      	str	r3, [r7, #16]
 8002448:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800244a:	2300      	movs	r3, #0
 800244c:	60fb      	str	r3, [r7, #12]
 800244e:	4b2c      	ldr	r3, [pc, #176]	; (8002500 <HAL_QSPI_MspInit+0xf4>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	4a2b      	ldr	r2, [pc, #172]	; (8002500 <HAL_QSPI_MspInit+0xf4>)
 8002454:	f043 0302 	orr.w	r3, r3, #2
 8002458:	6313      	str	r3, [r2, #48]	; 0x30
 800245a:	4b29      	ldr	r3, [pc, #164]	; (8002500 <HAL_QSPI_MspInit+0xf4>)
 800245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	60fb      	str	r3, [r7, #12]
 8002464:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	60bb      	str	r3, [r7, #8]
 800246a:	4b25      	ldr	r3, [pc, #148]	; (8002500 <HAL_QSPI_MspInit+0xf4>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	4a24      	ldr	r2, [pc, #144]	; (8002500 <HAL_QSPI_MspInit+0xf4>)
 8002470:	f043 0304 	orr.w	r3, r3, #4
 8002474:	6313      	str	r3, [r2, #48]	; 0x30
 8002476:	4b22      	ldr	r3, [pc, #136]	; (8002500 <HAL_QSPI_MspInit+0xf4>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	f003 0304 	and.w	r3, r3, #4
 800247e:	60bb      	str	r3, [r7, #8]
 8002480:	68bb      	ldr	r3, [r7, #8]
    PB2     ------> QUADSPI_CLK
    PC9     ------> QUADSPI_BK1_IO0
    PC10     ------> QUADSPI_BK1_IO1
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002482:	2304      	movs	r3, #4
 8002484:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002486:	2302      	movs	r3, #2
 8002488:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248a:	2300      	movs	r3, #0
 800248c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800248e:	2303      	movs	r3, #3
 8002490:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8002492:	2309      	movs	r3, #9
 8002494:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002496:	f107 0314 	add.w	r3, r7, #20
 800249a:	4619      	mov	r1, r3
 800249c:	4819      	ldr	r0, [pc, #100]	; (8002504 <HAL_QSPI_MspInit+0xf8>)
 800249e:	f002 fb81 	bl	8004ba4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80024a2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80024a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a8:	2302      	movs	r3, #2
 80024aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ac:	2300      	movs	r3, #0
 80024ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024b0:	2303      	movs	r3, #3
 80024b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 80024b4:	2309      	movs	r3, #9
 80024b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024b8:	f107 0314 	add.w	r3, r7, #20
 80024bc:	4619      	mov	r1, r3
 80024be:	4812      	ldr	r0, [pc, #72]	; (8002508 <HAL_QSPI_MspInit+0xfc>)
 80024c0:	f002 fb70 	bl	8004ba4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80024c4:	2340      	movs	r3, #64	; 0x40
 80024c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c8:	2302      	movs	r3, #2
 80024ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024cc:	2300      	movs	r3, #0
 80024ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024d0:	2303      	movs	r3, #3
 80024d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 80024d4:	230a      	movs	r3, #10
 80024d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024d8:	f107 0314 	add.w	r3, r7, #20
 80024dc:	4619      	mov	r1, r3
 80024de:	4809      	ldr	r0, [pc, #36]	; (8002504 <HAL_QSPI_MspInit+0xf8>)
 80024e0:	f002 fb60 	bl	8004ba4 <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 5, 0);
 80024e4:	2200      	movs	r2, #0
 80024e6:	2105      	movs	r1, #5
 80024e8:	205c      	movs	r0, #92	; 0x5c
 80024ea:	f001 ff2f 	bl	800434c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 80024ee:	205c      	movs	r0, #92	; 0x5c
 80024f0:	f001 ff48 	bl	8004384 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 80024f4:	bf00      	nop
 80024f6:	3728      	adds	r7, #40	; 0x28
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	a0001000 	.word	0xa0001000
 8002500:	40023800 	.word	0x40023800
 8002504:	40020400 	.word	0x40020400
 8002508:	40020800 	.word	0x40020800

0800250c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002512:	2300      	movs	r3, #0
 8002514:	607b      	str	r3, [r7, #4]
 8002516:	4b12      	ldr	r3, [pc, #72]	; (8002560 <HAL_MspInit+0x54>)
 8002518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251a:	4a11      	ldr	r2, [pc, #68]	; (8002560 <HAL_MspInit+0x54>)
 800251c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002520:	6453      	str	r3, [r2, #68]	; 0x44
 8002522:	4b0f      	ldr	r3, [pc, #60]	; (8002560 <HAL_MspInit+0x54>)
 8002524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002526:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800252a:	607b      	str	r3, [r7, #4]
 800252c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800252e:	2300      	movs	r3, #0
 8002530:	603b      	str	r3, [r7, #0]
 8002532:	4b0b      	ldr	r3, [pc, #44]	; (8002560 <HAL_MspInit+0x54>)
 8002534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002536:	4a0a      	ldr	r2, [pc, #40]	; (8002560 <HAL_MspInit+0x54>)
 8002538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800253c:	6413      	str	r3, [r2, #64]	; 0x40
 800253e:	4b08      	ldr	r3, [pc, #32]	; (8002560 <HAL_MspInit+0x54>)
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002546:	603b      	str	r3, [r7, #0]
 8002548:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800254a:	2200      	movs	r2, #0
 800254c:	210f      	movs	r1, #15
 800254e:	f06f 0001 	mvn.w	r0, #1
 8002552:	f001 fefb 	bl	800434c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002556:	bf00      	nop
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40023800 	.word	0x40023800

08002564 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b08c      	sub	sp, #48	; 0x30
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800256c:	2300      	movs	r3, #0
 800256e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002570:	2300      	movs	r3, #0
 8002572:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8002574:	2200      	movs	r2, #0
 8002576:	6879      	ldr	r1, [r7, #4]
 8002578:	2019      	movs	r0, #25
 800257a:	f001 fee7 	bl	800434c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800257e:	2019      	movs	r0, #25
 8002580:	f001 ff00 	bl	8004384 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002584:	2300      	movs	r3, #0
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	4b1e      	ldr	r3, [pc, #120]	; (8002604 <HAL_InitTick+0xa0>)
 800258a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258c:	4a1d      	ldr	r2, [pc, #116]	; (8002604 <HAL_InitTick+0xa0>)
 800258e:	f043 0301 	orr.w	r3, r3, #1
 8002592:	6453      	str	r3, [r2, #68]	; 0x44
 8002594:	4b1b      	ldr	r3, [pc, #108]	; (8002604 <HAL_InitTick+0xa0>)
 8002596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002598:	f003 0301 	and.w	r3, r3, #1
 800259c:	60fb      	str	r3, [r7, #12]
 800259e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80025a0:	f107 0210 	add.w	r2, r7, #16
 80025a4:	f107 0314 	add.w	r3, r7, #20
 80025a8:	4611      	mov	r1, r2
 80025aa:	4618      	mov	r0, r3
 80025ac:	f003 fd24 	bl	8005ff8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80025b0:	f003 fd0e 	bl	8005fd0 <HAL_RCC_GetPCLK2Freq>
 80025b4:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80025b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b8:	4a13      	ldr	r2, [pc, #76]	; (8002608 <HAL_InitTick+0xa4>)
 80025ba:	fba2 2303 	umull	r2, r3, r2, r3
 80025be:	0c9b      	lsrs	r3, r3, #18
 80025c0:	3b01      	subs	r3, #1
 80025c2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80025c4:	4b11      	ldr	r3, [pc, #68]	; (800260c <HAL_InitTick+0xa8>)
 80025c6:	4a12      	ldr	r2, [pc, #72]	; (8002610 <HAL_InitTick+0xac>)
 80025c8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80025ca:	4b10      	ldr	r3, [pc, #64]	; (800260c <HAL_InitTick+0xa8>)
 80025cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80025d0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80025d2:	4a0e      	ldr	r2, [pc, #56]	; (800260c <HAL_InitTick+0xa8>)
 80025d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80025d8:	4b0c      	ldr	r3, [pc, #48]	; (800260c <HAL_InitTick+0xa8>)
 80025da:	2200      	movs	r2, #0
 80025dc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025de:	4b0b      	ldr	r3, [pc, #44]	; (800260c <HAL_InitTick+0xa8>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80025e4:	4809      	ldr	r0, [pc, #36]	; (800260c <HAL_InitTick+0xa8>)
 80025e6:	f004 f8ef 	bl	80067c8 <HAL_TIM_Base_Init>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d104      	bne.n	80025fa <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80025f0:	4806      	ldr	r0, [pc, #24]	; (800260c <HAL_InitTick+0xa8>)
 80025f2:	f004 f914 	bl	800681e <HAL_TIM_Base_Start_IT>
 80025f6:	4603      	mov	r3, r0
 80025f8:	e000      	b.n	80025fc <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3730      	adds	r7, #48	; 0x30
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	40023800 	.word	0x40023800
 8002608:	431bde83 	.word	0x431bde83
 800260c:	2000700c 	.word	0x2000700c
 8002610:	40010000 	.word	0x40010000

08002614 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002618:	bf00      	nop
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr

08002622 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	af00      	add	r7, sp, #0
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */

	  led_set_color(LED_WHITE);
 8002626:	222f      	movs	r2, #47	; 0x2f
 8002628:	212f      	movs	r1, #47	; 0x2f
 800262a:	202f      	movs	r0, #47	; 0x2f
 800262c:	f7fe fc86 	bl	8000f3c <led_set_color>
 8002630:	e7f9      	b.n	8002626 <HardFault_Handler+0x4>

08002632 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002632:	b480      	push	{r7}
 8002634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002636:	e7fe      	b.n	8002636 <MemManage_Handler+0x4>

08002638 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800263c:	e7fe      	b.n	800263c <BusFault_Handler+0x4>

0800263e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800263e:	b480      	push	{r7}
 8002640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002642:	e7fe      	b.n	8002642 <UsageFault_Handler+0x4>

08002644 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002648:	bf00      	nop
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
	...

08002654 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002658:	4802      	ldr	r0, [pc, #8]	; (8002664 <DMA1_Stream1_IRQHandler+0x10>)
 800265a:	f002 f839 	bl	80046d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800265e:	bf00      	nop
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	2000716c 	.word	0x2000716c

08002668 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800266c:	4802      	ldr	r0, [pc, #8]	; (8002678 <DMA1_Stream3_IRQHandler+0x10>)
 800266e:	f002 f82f 	bl	80046d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002672:	bf00      	nop
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	2000720c 	.word	0x2000720c

0800267c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002680:	4802      	ldr	r0, [pc, #8]	; (800268c <CAN1_RX0_IRQHandler+0x10>)
 8002682:	f001 fb7b 	bl	8003d7c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002686:	bf00      	nop
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	20006d40 	.word	0x20006d40

08002690 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002694:	4802      	ldr	r0, [pc, #8]	; (80026a0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002696:	f004 f91b 	bl	80068d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800269a:	bf00      	nop
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	2000700c 	.word	0x2000700c

080026a4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80026a8:	4802      	ldr	r0, [pc, #8]	; (80026b4 <USART1_IRQHandler+0x10>)
 80026aa:	f005 f975 	bl	8007998 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80026ae:	bf00      	nop
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	2000738c 	.word	0x2000738c

080026b8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80026bc:	4802      	ldr	r0, [pc, #8]	; (80026c8 <USART3_IRQHandler+0x10>)
 80026be:	f005 f96b 	bl	8007998 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80026c2:	bf00      	nop
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	200071cc 	.word	0x200071cc

080026cc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80026d0:	4802      	ldr	r0, [pc, #8]	; (80026dc <DMA2_Stream0_IRQHandler+0x10>)
 80026d2:	f001 fffd 	bl	80046d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80026d6:	bf00      	nop
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	20006ce0 	.word	0x20006ce0

080026e0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80026e4:	4802      	ldr	r0, [pc, #8]	; (80026f0 <DMA2_Stream1_IRQHandler+0x10>)
 80026e6:	f001 fff3 	bl	80046d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80026ea:	bf00      	nop
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	2000710c 	.word	0x2000710c

080026f4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80026f8:	4802      	ldr	r0, [pc, #8]	; (8002704 <DMA2_Stream2_IRQHandler+0x10>)
 80026fa:	f001 ffe9 	bl	80046d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80026fe:	bf00      	nop
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	2000732c 	.word	0x2000732c

08002708 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 800270c:	4802      	ldr	r0, [pc, #8]	; (8002718 <DMA2_Stream6_IRQHandler+0x10>)
 800270e:	f001 ffdf 	bl	80046d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002712:	bf00      	nop
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	200072cc 	.word	0x200072cc

0800271c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002720:	4802      	ldr	r0, [pc, #8]	; (800272c <DMA2_Stream7_IRQHandler+0x10>)
 8002722:	f001 ffd5 	bl	80046d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002726:	bf00      	nop
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	2000726c 	.word	0x2000726c

08002730 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002734:	4802      	ldr	r0, [pc, #8]	; (8002740 <USART6_IRQHandler+0x10>)
 8002736:	f005 f92f 	bl	8007998 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800273a:	bf00      	nop
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	200073cc 	.word	0x200073cc

08002744 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 8002748:	4802      	ldr	r0, [pc, #8]	; (8002754 <QUADSPI_IRQHandler+0x10>)
 800274a:	f002 fc55 	bl	8004ff8 <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 800274e:	bf00      	nop
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	20006fc0 	.word	0x20006fc0

08002758 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800275c:	4b08      	ldr	r3, [pc, #32]	; (8002780 <SystemInit+0x28>)
 800275e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002762:	4a07      	ldr	r2, [pc, #28]	; (8002780 <SystemInit+0x28>)
 8002764:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002768:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800276c:	4b04      	ldr	r3, [pc, #16]	; (8002780 <SystemInit+0x28>)
 800276e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002772:	609a      	str	r2, [r3, #8]
#endif
}
 8002774:	bf00      	nop
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	e000ed00 	.word	0xe000ed00

08002784 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800278a:	f107 0308 	add.w	r3, r7, #8
 800278e:	2200      	movs	r2, #0
 8002790:	601a      	str	r2, [r3, #0]
 8002792:	605a      	str	r2, [r3, #4]
 8002794:	609a      	str	r2, [r3, #8]
 8002796:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002798:	463b      	mov	r3, r7
 800279a:	2200      	movs	r2, #0
 800279c:	601a      	str	r2, [r3, #0]
 800279e:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80027a0:	4b1d      	ldr	r3, [pc, #116]	; (8002818 <MX_TIM2_Init+0x94>)
 80027a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80027a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 49;
 80027a8:	4b1b      	ldr	r3, [pc, #108]	; (8002818 <MX_TIM2_Init+0x94>)
 80027aa:	2231      	movs	r2, #49	; 0x31
 80027ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80027ae:	4b1a      	ldr	r3, [pc, #104]	; (8002818 <MX_TIM2_Init+0x94>)
 80027b0:	2210      	movs	r2, #16
 80027b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80027b4:	4b18      	ldr	r3, [pc, #96]	; (8002818 <MX_TIM2_Init+0x94>)
 80027b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80027ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027bc:	4b16      	ldr	r3, [pc, #88]	; (8002818 <MX_TIM2_Init+0x94>)
 80027be:	2200      	movs	r2, #0
 80027c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027c2:	4b15      	ldr	r3, [pc, #84]	; (8002818 <MX_TIM2_Init+0x94>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80027c8:	4813      	ldr	r0, [pc, #76]	; (8002818 <MX_TIM2_Init+0x94>)
 80027ca:	f003 fffd 	bl	80067c8 <HAL_TIM_Base_Init>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80027d4:	f7ff fde6 	bl	80023a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80027de:	f107 0308 	add.w	r3, r7, #8
 80027e2:	4619      	mov	r1, r3
 80027e4:	480c      	ldr	r0, [pc, #48]	; (8002818 <MX_TIM2_Init+0x94>)
 80027e6:	f004 fa41 	bl	8006c6c <HAL_TIM_ConfigClockSource>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80027f0:	f7ff fdd8 	bl	80023a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027f4:	2300      	movs	r3, #0
 80027f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027f8:	2300      	movs	r3, #0
 80027fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80027fc:	463b      	mov	r3, r7
 80027fe:	4619      	mov	r1, r3
 8002800:	4805      	ldr	r0, [pc, #20]	; (8002818 <MX_TIM2_Init+0x94>)
 8002802:	f004 fe33 	bl	800746c <HAL_TIMEx_MasterConfigSynchronization>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800280c:	f7ff fdca 	bl	80023a4 <Error_Handler>
  }

}
 8002810:	bf00      	nop
 8002812:	3718      	adds	r7, #24
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	200070cc 	.word	0x200070cc

0800281c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002822:	f107 0308 	add.w	r3, r7, #8
 8002826:	2200      	movs	r2, #0
 8002828:	601a      	str	r2, [r3, #0]
 800282a:	605a      	str	r2, [r3, #4]
 800282c:	609a      	str	r2, [r3, #8]
 800282e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002830:	463b      	mov	r3, r7
 8002832:	2200      	movs	r2, #0
 8002834:	601a      	str	r2, [r3, #0]
 8002836:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8002838:	4b1d      	ldr	r3, [pc, #116]	; (80028b0 <MX_TIM3_Init+0x94>)
 800283a:	4a1e      	ldr	r2, [pc, #120]	; (80028b4 <MX_TIM3_Init+0x98>)
 800283c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800283e:	4b1c      	ldr	r3, [pc, #112]	; (80028b0 <MX_TIM3_Init+0x94>)
 8002840:	2200      	movs	r2, #0
 8002842:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002844:	4b1a      	ldr	r3, [pc, #104]	; (80028b0 <MX_TIM3_Init+0x94>)
 8002846:	2200      	movs	r2, #0
 8002848:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1125;
 800284a:	4b19      	ldr	r3, [pc, #100]	; (80028b0 <MX_TIM3_Init+0x94>)
 800284c:	f240 4265 	movw	r2, #1125	; 0x465
 8002850:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002852:	4b17      	ldr	r3, [pc, #92]	; (80028b0 <MX_TIM3_Init+0x94>)
 8002854:	2200      	movs	r2, #0
 8002856:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002858:	4b15      	ldr	r3, [pc, #84]	; (80028b0 <MX_TIM3_Init+0x94>)
 800285a:	2200      	movs	r2, #0
 800285c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800285e:	4814      	ldr	r0, [pc, #80]	; (80028b0 <MX_TIM3_Init+0x94>)
 8002860:	f003 ffb2 	bl	80067c8 <HAL_TIM_Base_Init>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800286a:	f7ff fd9b 	bl	80023a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800286e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002872:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002874:	f107 0308 	add.w	r3, r7, #8
 8002878:	4619      	mov	r1, r3
 800287a:	480d      	ldr	r0, [pc, #52]	; (80028b0 <MX_TIM3_Init+0x94>)
 800287c:	f004 f9f6 	bl	8006c6c <HAL_TIM_ConfigClockSource>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002886:	f7ff fd8d 	bl	80023a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800288a:	2320      	movs	r3, #32
 800288c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800288e:	2300      	movs	r3, #0
 8002890:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002892:	463b      	mov	r3, r7
 8002894:	4619      	mov	r1, r3
 8002896:	4806      	ldr	r0, [pc, #24]	; (80028b0 <MX_TIM3_Init+0x94>)
 8002898:	f004 fde8 	bl	800746c <HAL_TIMEx_MasterConfigSynchronization>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80028a2:	f7ff fd7f 	bl	80023a4 <Error_Handler>
  }

}
 80028a6:	bf00      	nop
 80028a8:	3718      	adds	r7, #24
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	2000708c 	.word	0x2000708c
 80028b4:	40000400 	.word	0x40000400

080028b8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b096      	sub	sp, #88	; 0x58
 80028bc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80028c2:	2200      	movs	r2, #0
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	605a      	str	r2, [r3, #4]
 80028c8:	609a      	str	r2, [r3, #8]
 80028ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80028d0:	2200      	movs	r2, #0
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028da:	2200      	movs	r2, #0
 80028dc:	601a      	str	r2, [r3, #0]
 80028de:	605a      	str	r2, [r3, #4]
 80028e0:	609a      	str	r2, [r3, #8]
 80028e2:	60da      	str	r2, [r3, #12]
 80028e4:	611a      	str	r2, [r3, #16]
 80028e6:	615a      	str	r2, [r3, #20]
 80028e8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80028ea:	1d3b      	adds	r3, r7, #4
 80028ec:	2220      	movs	r2, #32
 80028ee:	2100      	movs	r1, #0
 80028f0:	4618      	mov	r0, r3
 80028f2:	f008 f9db 	bl	800acac <memset>

  htim8.Instance = TIM8;
 80028f6:	4b4b      	ldr	r3, [pc, #300]	; (8002a24 <MX_TIM8_Init+0x16c>)
 80028f8:	4a4b      	ldr	r2, [pc, #300]	; (8002a28 <MX_TIM8_Init+0x170>)
 80028fa:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80028fc:	4b49      	ldr	r3, [pc, #292]	; (8002a24 <MX_TIM8_Init+0x16c>)
 80028fe:	2200      	movs	r2, #0
 8002900:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002902:	4b48      	ldr	r3, [pc, #288]	; (8002a24 <MX_TIM8_Init+0x16c>)
 8002904:	2200      	movs	r2, #0
 8002906:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 255;
 8002908:	4b46      	ldr	r3, [pc, #280]	; (8002a24 <MX_TIM8_Init+0x16c>)
 800290a:	22ff      	movs	r2, #255	; 0xff
 800290c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800290e:	4b45      	ldr	r3, [pc, #276]	; (8002a24 <MX_TIM8_Init+0x16c>)
 8002910:	2200      	movs	r2, #0
 8002912:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002914:	4b43      	ldr	r3, [pc, #268]	; (8002a24 <MX_TIM8_Init+0x16c>)
 8002916:	2200      	movs	r2, #0
 8002918:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800291a:	4b42      	ldr	r3, [pc, #264]	; (8002a24 <MX_TIM8_Init+0x16c>)
 800291c:	2200      	movs	r2, #0
 800291e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002920:	4840      	ldr	r0, [pc, #256]	; (8002a24 <MX_TIM8_Init+0x16c>)
 8002922:	f003 ff51 	bl	80067c8 <HAL_TIM_Base_Init>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 800292c:	f7ff fd3a 	bl	80023a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002930:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002934:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002936:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800293a:	4619      	mov	r1, r3
 800293c:	4839      	ldr	r0, [pc, #228]	; (8002a24 <MX_TIM8_Init+0x16c>)
 800293e:	f004 f995 	bl	8006c6c <HAL_TIM_ConfigClockSource>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8002948:	f7ff fd2c 	bl	80023a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800294c:	4835      	ldr	r0, [pc, #212]	; (8002a24 <MX_TIM8_Init+0x16c>)
 800294e:	f003 ff8a 	bl	8006866 <HAL_TIM_PWM_Init>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8002958:	f7ff fd24 	bl	80023a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800295c:	2300      	movs	r3, #0
 800295e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002960:	2300      	movs	r3, #0
 8002962:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002964:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002968:	4619      	mov	r1, r3
 800296a:	482e      	ldr	r0, [pc, #184]	; (8002a24 <MX_TIM8_Init+0x16c>)
 800296c:	f004 fd7e 	bl	800746c <HAL_TIMEx_MasterConfigSynchronization>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8002976:	f7ff fd15 	bl	80023a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800297a:	2360      	movs	r3, #96	; 0x60
 800297c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 128;
 800297e:	2380      	movs	r3, #128	; 0x80
 8002980:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002982:	2300      	movs	r3, #0
 8002984:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8002986:	2308      	movs	r3, #8
 8002988:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800298a:	2300      	movs	r3, #0
 800298c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800298e:	2300      	movs	r3, #0
 8002990:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002992:	2300      	movs	r3, #0
 8002994:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002996:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800299a:	2200      	movs	r2, #0
 800299c:	4619      	mov	r1, r3
 800299e:	4821      	ldr	r0, [pc, #132]	; (8002a24 <MX_TIM8_Init+0x16c>)
 80029a0:	f004 f89e 	bl	8006ae0 <HAL_TIM_PWM_ConfigChannel>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 80029aa:	f7ff fcfb 	bl	80023a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80029ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029b2:	2204      	movs	r2, #4
 80029b4:	4619      	mov	r1, r3
 80029b6:	481b      	ldr	r0, [pc, #108]	; (8002a24 <MX_TIM8_Init+0x16c>)
 80029b8:	f004 f892 	bl	8006ae0 <HAL_TIM_PWM_ConfigChannel>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 80029c2:	f7ff fcef 	bl	80023a4 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80029c6:	2300      	movs	r3, #0
 80029c8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80029ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029ce:	2208      	movs	r2, #8
 80029d0:	4619      	mov	r1, r3
 80029d2:	4814      	ldr	r0, [pc, #80]	; (8002a24 <MX_TIM8_Init+0x16c>)
 80029d4:	f004 f884 	bl	8006ae0 <HAL_TIM_PWM_ConfigChannel>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 80029de:	f7ff fce1 	bl	80023a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80029e2:	2300      	movs	r3, #0
 80029e4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80029e6:	2300      	movs	r3, #0
 80029e8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80029ea:	2300      	movs	r3, #0
 80029ec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80029ee:	2300      	movs	r3, #0
 80029f0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80029f2:	2300      	movs	r3, #0
 80029f4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80029f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029fa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80029fc:	2300      	movs	r3, #0
 80029fe:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002a00:	1d3b      	adds	r3, r7, #4
 8002a02:	4619      	mov	r1, r3
 8002a04:	4807      	ldr	r0, [pc, #28]	; (8002a24 <MX_TIM8_Init+0x16c>)
 8002a06:	f004 fdad 	bl	8007564 <HAL_TIMEx_ConfigBreakDeadTime>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <MX_TIM8_Init+0x15c>
  {
    Error_Handler();
 8002a10:	f7ff fcc8 	bl	80023a4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 8002a14:	4803      	ldr	r0, [pc, #12]	; (8002a24 <MX_TIM8_Init+0x16c>)
 8002a16:	f000 f855 	bl	8002ac4 <HAL_TIM_MspPostInit>

}
 8002a1a:	bf00      	nop
 8002a1c:	3758      	adds	r7, #88	; 0x58
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	2000704c 	.word	0x2000704c
 8002a28:	40010400 	.word	0x40010400

08002a2c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b087      	sub	sp, #28
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a3c:	d10e      	bne.n	8002a5c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a3e:	2300      	movs	r3, #0
 8002a40:	617b      	str	r3, [r7, #20]
 8002a42:	4b1d      	ldr	r3, [pc, #116]	; (8002ab8 <HAL_TIM_Base_MspInit+0x8c>)
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	4a1c      	ldr	r2, [pc, #112]	; (8002ab8 <HAL_TIM_Base_MspInit+0x8c>)
 8002a48:	f043 0301 	orr.w	r3, r3, #1
 8002a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a4e:	4b1a      	ldr	r3, [pc, #104]	; (8002ab8 <HAL_TIM_Base_MspInit+0x8c>)
 8002a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	617b      	str	r3, [r7, #20]
 8002a58:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002a5a:	e026      	b.n	8002aaa <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM3)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a16      	ldr	r2, [pc, #88]	; (8002abc <HAL_TIM_Base_MspInit+0x90>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d10e      	bne.n	8002a84 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a66:	2300      	movs	r3, #0
 8002a68:	613b      	str	r3, [r7, #16]
 8002a6a:	4b13      	ldr	r3, [pc, #76]	; (8002ab8 <HAL_TIM_Base_MspInit+0x8c>)
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6e:	4a12      	ldr	r2, [pc, #72]	; (8002ab8 <HAL_TIM_Base_MspInit+0x8c>)
 8002a70:	f043 0302 	orr.w	r3, r3, #2
 8002a74:	6413      	str	r3, [r2, #64]	; 0x40
 8002a76:	4b10      	ldr	r3, [pc, #64]	; (8002ab8 <HAL_TIM_Base_MspInit+0x8c>)
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	613b      	str	r3, [r7, #16]
 8002a80:	693b      	ldr	r3, [r7, #16]
}
 8002a82:	e012      	b.n	8002aaa <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM8)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a0d      	ldr	r2, [pc, #52]	; (8002ac0 <HAL_TIM_Base_MspInit+0x94>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d10d      	bne.n	8002aaa <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002a8e:	2300      	movs	r3, #0
 8002a90:	60fb      	str	r3, [r7, #12]
 8002a92:	4b09      	ldr	r3, [pc, #36]	; (8002ab8 <HAL_TIM_Base_MspInit+0x8c>)
 8002a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a96:	4a08      	ldr	r2, [pc, #32]	; (8002ab8 <HAL_TIM_Base_MspInit+0x8c>)
 8002a98:	f043 0302 	orr.w	r3, r3, #2
 8002a9c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a9e:	4b06      	ldr	r3, [pc, #24]	; (8002ab8 <HAL_TIM_Base_MspInit+0x8c>)
 8002aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	60fb      	str	r3, [r7, #12]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
}
 8002aaa:	bf00      	nop
 8002aac:	371c      	adds	r7, #28
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	40023800 	.word	0x40023800
 8002abc:	40000400 	.word	0x40000400
 8002ac0:	40010400 	.word	0x40010400

08002ac4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b08a      	sub	sp, #40	; 0x28
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002acc:	f107 0314 	add.w	r3, r7, #20
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	605a      	str	r2, [r3, #4]
 8002ad6:	609a      	str	r2, [r3, #8]
 8002ad8:	60da      	str	r2, [r3, #12]
 8002ada:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a21      	ldr	r2, [pc, #132]	; (8002b68 <HAL_TIM_MspPostInit+0xa4>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d13c      	bne.n	8002b60 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	613b      	str	r3, [r7, #16]
 8002aea:	4b20      	ldr	r3, [pc, #128]	; (8002b6c <HAL_TIM_MspPostInit+0xa8>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aee:	4a1f      	ldr	r2, [pc, #124]	; (8002b6c <HAL_TIM_MspPostInit+0xa8>)
 8002af0:	f043 0301 	orr.w	r3, r3, #1
 8002af4:	6313      	str	r3, [r2, #48]	; 0x30
 8002af6:	4b1d      	ldr	r3, [pc, #116]	; (8002b6c <HAL_TIM_MspPostInit+0xa8>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	613b      	str	r3, [r7, #16]
 8002b00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b02:	2300      	movs	r3, #0
 8002b04:	60fb      	str	r3, [r7, #12]
 8002b06:	4b19      	ldr	r3, [pc, #100]	; (8002b6c <HAL_TIM_MspPostInit+0xa8>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	4a18      	ldr	r2, [pc, #96]	; (8002b6c <HAL_TIM_MspPostInit+0xa8>)
 8002b0c:	f043 0302 	orr.w	r3, r3, #2
 8002b10:	6313      	str	r3, [r2, #48]	; 0x30
 8002b12:	4b16      	ldr	r3, [pc, #88]	; (8002b6c <HAL_TIM_MspPostInit+0xa8>)
 8002b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PA7     ------> TIM8_CH1N
    PB14     ------> TIM8_CH2N
    PB15     ------> TIM8_CH3N
    */
    GPIO_InitStruct.Pin = LED_RED_Pin;
 8002b1e:	2380      	movs	r3, #128	; 0x80
 8002b20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b22:	2302      	movs	r3, #2
 8002b24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b26:	2300      	movs	r3, #0
 8002b28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8002b32:	f107 0314 	add.w	r3, r7, #20
 8002b36:	4619      	mov	r1, r3
 8002b38:	480d      	ldr	r0, [pc, #52]	; (8002b70 <HAL_TIM_MspPostInit+0xac>)
 8002b3a:	f002 f833 	bl	8004ba4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_BLUE_Pin;
 8002b3e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002b42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b44:	2302      	movs	r3, #2
 8002b46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002b50:	2303      	movs	r3, #3
 8002b52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b54:	f107 0314 	add.w	r3, r7, #20
 8002b58:	4619      	mov	r1, r3
 8002b5a:	4806      	ldr	r0, [pc, #24]	; (8002b74 <HAL_TIM_MspPostInit+0xb0>)
 8002b5c:	f002 f822 	bl	8004ba4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002b60:	bf00      	nop
 8002b62:	3728      	adds	r7, #40	; 0x28
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	40010400 	.word	0x40010400
 8002b6c:	40023800 	.word	0x40023800
 8002b70:	40020000 	.word	0x40020000
 8002b74:	40020400 	.word	0x40020400

08002b78 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002b7c:	4b11      	ldr	r3, [pc, #68]	; (8002bc4 <MX_USART1_UART_Init+0x4c>)
 8002b7e:	4a12      	ldr	r2, [pc, #72]	; (8002bc8 <MX_USART1_UART_Init+0x50>)
 8002b80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002b82:	4b10      	ldr	r3, [pc, #64]	; (8002bc4 <MX_USART1_UART_Init+0x4c>)
 8002b84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b8a:	4b0e      	ldr	r3, [pc, #56]	; (8002bc4 <MX_USART1_UART_Init+0x4c>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b90:	4b0c      	ldr	r3, [pc, #48]	; (8002bc4 <MX_USART1_UART_Init+0x4c>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b96:	4b0b      	ldr	r3, [pc, #44]	; (8002bc4 <MX_USART1_UART_Init+0x4c>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b9c:	4b09      	ldr	r3, [pc, #36]	; (8002bc4 <MX_USART1_UART_Init+0x4c>)
 8002b9e:	220c      	movs	r2, #12
 8002ba0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ba2:	4b08      	ldr	r3, [pc, #32]	; (8002bc4 <MX_USART1_UART_Init+0x4c>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ba8:	4b06      	ldr	r3, [pc, #24]	; (8002bc4 <MX_USART1_UART_Init+0x4c>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8002bae:	4805      	ldr	r0, [pc, #20]	; (8002bc4 <MX_USART1_UART_Init+0x4c>)
 8002bb0:	f004 fdb0 	bl	8007714 <HAL_HalfDuplex_Init>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002bba:	f7ff fbf3 	bl	80023a4 <Error_Handler>
  }

}
 8002bbe:	bf00      	nop
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	2000738c 	.word	0x2000738c
 8002bc8:	40011000 	.word	0x40011000

08002bcc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8002bd0:	4b11      	ldr	r3, [pc, #68]	; (8002c18 <MX_USART3_UART_Init+0x4c>)
 8002bd2:	4a12      	ldr	r2, [pc, #72]	; (8002c1c <MX_USART3_UART_Init+0x50>)
 8002bd4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002bd6:	4b10      	ldr	r3, [pc, #64]	; (8002c18 <MX_USART3_UART_Init+0x4c>)
 8002bd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002bdc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002bde:	4b0e      	ldr	r3, [pc, #56]	; (8002c18 <MX_USART3_UART_Init+0x4c>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002be4:	4b0c      	ldr	r3, [pc, #48]	; (8002c18 <MX_USART3_UART_Init+0x4c>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002bea:	4b0b      	ldr	r3, [pc, #44]	; (8002c18 <MX_USART3_UART_Init+0x4c>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002bf0:	4b09      	ldr	r3, [pc, #36]	; (8002c18 <MX_USART3_UART_Init+0x4c>)
 8002bf2:	220c      	movs	r2, #12
 8002bf4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bf6:	4b08      	ldr	r3, [pc, #32]	; (8002c18 <MX_USART3_UART_Init+0x4c>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bfc:	4b06      	ldr	r3, [pc, #24]	; (8002c18 <MX_USART3_UART_Init+0x4c>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002c02:	4805      	ldr	r0, [pc, #20]	; (8002c18 <MX_USART3_UART_Init+0x4c>)
 8002c04:	f004 fd39 	bl	800767a <HAL_UART_Init>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002c0e:	f7ff fbc9 	bl	80023a4 <Error_Handler>
  }

}
 8002c12:	bf00      	nop
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	200071cc 	.word	0x200071cc
 8002c1c:	40004800 	.word	0x40004800

08002c20 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 8002c24:	4b11      	ldr	r3, [pc, #68]	; (8002c6c <MX_USART6_UART_Init+0x4c>)
 8002c26:	4a12      	ldr	r2, [pc, #72]	; (8002c70 <MX_USART6_UART_Init+0x50>)
 8002c28:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002c2a:	4b10      	ldr	r3, [pc, #64]	; (8002c6c <MX_USART6_UART_Init+0x4c>)
 8002c2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c30:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002c32:	4b0e      	ldr	r3, [pc, #56]	; (8002c6c <MX_USART6_UART_Init+0x4c>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002c38:	4b0c      	ldr	r3, [pc, #48]	; (8002c6c <MX_USART6_UART_Init+0x4c>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002c3e:	4b0b      	ldr	r3, [pc, #44]	; (8002c6c <MX_USART6_UART_Init+0x4c>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002c44:	4b09      	ldr	r3, [pc, #36]	; (8002c6c <MX_USART6_UART_Init+0x4c>)
 8002c46:	220c      	movs	r2, #12
 8002c48:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c4a:	4b08      	ldr	r3, [pc, #32]	; (8002c6c <MX_USART6_UART_Init+0x4c>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c50:	4b06      	ldr	r3, [pc, #24]	; (8002c6c <MX_USART6_UART_Init+0x4c>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002c56:	4805      	ldr	r0, [pc, #20]	; (8002c6c <MX_USART6_UART_Init+0x4c>)
 8002c58:	f004 fd0f 	bl	800767a <HAL_UART_Init>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002c62:	f7ff fb9f 	bl	80023a4 <Error_Handler>
  }

}
 8002c66:	bf00      	nop
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	200073cc 	.word	0x200073cc
 8002c70:	40011400 	.word	0x40011400

08002c74 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b08e      	sub	sp, #56	; 0x38
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]
 8002c84:	605a      	str	r2, [r3, #4]
 8002c86:	609a      	str	r2, [r3, #8]
 8002c88:	60da      	str	r2, [r3, #12]
 8002c8a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a4b      	ldr	r2, [pc, #300]	; (8002dc0 <HAL_UART_MspInit+0x14c>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	f040 80a2 	bne.w	8002ddc <HAL_UART_MspInit+0x168>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c98:	2300      	movs	r3, #0
 8002c9a:	623b      	str	r3, [r7, #32]
 8002c9c:	4b49      	ldr	r3, [pc, #292]	; (8002dc4 <HAL_UART_MspInit+0x150>)
 8002c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca0:	4a48      	ldr	r2, [pc, #288]	; (8002dc4 <HAL_UART_MspInit+0x150>)
 8002ca2:	f043 0310 	orr.w	r3, r3, #16
 8002ca6:	6453      	str	r3, [r2, #68]	; 0x44
 8002ca8:	4b46      	ldr	r3, [pc, #280]	; (8002dc4 <HAL_UART_MspInit+0x150>)
 8002caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cac:	f003 0310 	and.w	r3, r3, #16
 8002cb0:	623b      	str	r3, [r7, #32]
 8002cb2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	61fb      	str	r3, [r7, #28]
 8002cb8:	4b42      	ldr	r3, [pc, #264]	; (8002dc4 <HAL_UART_MspInit+0x150>)
 8002cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbc:	4a41      	ldr	r2, [pc, #260]	; (8002dc4 <HAL_UART_MspInit+0x150>)
 8002cbe:	f043 0301 	orr.w	r3, r3, #1
 8002cc2:	6313      	str	r3, [r2, #48]	; 0x30
 8002cc4:	4b3f      	ldr	r3, [pc, #252]	; (8002dc4 <HAL_UART_MspInit+0x150>)
 8002cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc8:	f003 0301 	and.w	r3, r3, #1
 8002ccc:	61fb      	str	r3, [r7, #28]
 8002cce:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = SERVO_TX_Pin;
 8002cd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cd6:	2312      	movs	r3, #18
 8002cd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ce2:	2307      	movs	r3, #7
 8002ce4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SERVO_TX_GPIO_Port, &GPIO_InitStruct);
 8002ce6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cea:	4619      	mov	r1, r3
 8002cec:	4836      	ldr	r0, [pc, #216]	; (8002dc8 <HAL_UART_MspInit+0x154>)
 8002cee:	f001 ff59 	bl	8004ba4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002cf2:	4b36      	ldr	r3, [pc, #216]	; (8002dcc <HAL_UART_MspInit+0x158>)
 8002cf4:	4a36      	ldr	r2, [pc, #216]	; (8002dd0 <HAL_UART_MspInit+0x15c>)
 8002cf6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002cf8:	4b34      	ldr	r3, [pc, #208]	; (8002dcc <HAL_UART_MspInit+0x158>)
 8002cfa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002cfe:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d00:	4b32      	ldr	r3, [pc, #200]	; (8002dcc <HAL_UART_MspInit+0x158>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d06:	4b31      	ldr	r3, [pc, #196]	; (8002dcc <HAL_UART_MspInit+0x158>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d0c:	4b2f      	ldr	r3, [pc, #188]	; (8002dcc <HAL_UART_MspInit+0x158>)
 8002d0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d12:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d14:	4b2d      	ldr	r3, [pc, #180]	; (8002dcc <HAL_UART_MspInit+0x158>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d1a:	4b2c      	ldr	r3, [pc, #176]	; (8002dcc <HAL_UART_MspInit+0x158>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002d20:	4b2a      	ldr	r3, [pc, #168]	; (8002dcc <HAL_UART_MspInit+0x158>)
 8002d22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d26:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002d28:	4b28      	ldr	r3, [pc, #160]	; (8002dcc <HAL_UART_MspInit+0x158>)
 8002d2a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002d2e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d30:	4b26      	ldr	r3, [pc, #152]	; (8002dcc <HAL_UART_MspInit+0x158>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002d36:	4825      	ldr	r0, [pc, #148]	; (8002dcc <HAL_UART_MspInit+0x158>)
 8002d38:	f001 fb32 	bl	80043a0 <HAL_DMA_Init>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 8002d42:	f7ff fb2f 	bl	80023a4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a20      	ldr	r2, [pc, #128]	; (8002dcc <HAL_UART_MspInit+0x158>)
 8002d4a:	635a      	str	r2, [r3, #52]	; 0x34
 8002d4c:	4a1f      	ldr	r2, [pc, #124]	; (8002dcc <HAL_UART_MspInit+0x158>)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002d52:	4b20      	ldr	r3, [pc, #128]	; (8002dd4 <HAL_UART_MspInit+0x160>)
 8002d54:	4a20      	ldr	r2, [pc, #128]	; (8002dd8 <HAL_UART_MspInit+0x164>)
 8002d56:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002d58:	4b1e      	ldr	r3, [pc, #120]	; (8002dd4 <HAL_UART_MspInit+0x160>)
 8002d5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d5e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d60:	4b1c      	ldr	r3, [pc, #112]	; (8002dd4 <HAL_UART_MspInit+0x160>)
 8002d62:	2240      	movs	r2, #64	; 0x40
 8002d64:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d66:	4b1b      	ldr	r3, [pc, #108]	; (8002dd4 <HAL_UART_MspInit+0x160>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d6c:	4b19      	ldr	r3, [pc, #100]	; (8002dd4 <HAL_UART_MspInit+0x160>)
 8002d6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d72:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d74:	4b17      	ldr	r3, [pc, #92]	; (8002dd4 <HAL_UART_MspInit+0x160>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d7a:	4b16      	ldr	r3, [pc, #88]	; (8002dd4 <HAL_UART_MspInit+0x160>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002d80:	4b14      	ldr	r3, [pc, #80]	; (8002dd4 <HAL_UART_MspInit+0x160>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002d86:	4b13      	ldr	r3, [pc, #76]	; (8002dd4 <HAL_UART_MspInit+0x160>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d8c:	4b11      	ldr	r3, [pc, #68]	; (8002dd4 <HAL_UART_MspInit+0x160>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002d92:	4810      	ldr	r0, [pc, #64]	; (8002dd4 <HAL_UART_MspInit+0x160>)
 8002d94:	f001 fb04 	bl	80043a0 <HAL_DMA_Init>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8002d9e:	f7ff fb01 	bl	80023a4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a0b      	ldr	r2, [pc, #44]	; (8002dd4 <HAL_UART_MspInit+0x160>)
 8002da6:	631a      	str	r2, [r3, #48]	; 0x30
 8002da8:	4a0a      	ldr	r2, [pc, #40]	; (8002dd4 <HAL_UART_MspInit+0x160>)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002dae:	2200      	movs	r2, #0
 8002db0:	2105      	movs	r1, #5
 8002db2:	2025      	movs	r0, #37	; 0x25
 8002db4:	f001 faca 	bl	800434c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002db8:	2025      	movs	r0, #37	; 0x25
 8002dba:	f001 fae3 	bl	8004384 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002dbe:	e16d      	b.n	800309c <HAL_UART_MspInit+0x428>
 8002dc0:	40011000 	.word	0x40011000
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	40020000 	.word	0x40020000
 8002dcc:	2000732c 	.word	0x2000732c
 8002dd0:	40026440 	.word	0x40026440
 8002dd4:	2000726c 	.word	0x2000726c
 8002dd8:	400264b8 	.word	0x400264b8
  else if(uartHandle->Instance==USART3)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a5a      	ldr	r2, [pc, #360]	; (8002f4c <HAL_UART_MspInit+0x2d8>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	f040 80c2 	bne.w	8002f6c <HAL_UART_MspInit+0x2f8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002de8:	2300      	movs	r3, #0
 8002dea:	61bb      	str	r3, [r7, #24]
 8002dec:	4b58      	ldr	r3, [pc, #352]	; (8002f50 <HAL_UART_MspInit+0x2dc>)
 8002dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df0:	4a57      	ldr	r2, [pc, #348]	; (8002f50 <HAL_UART_MspInit+0x2dc>)
 8002df2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002df6:	6413      	str	r3, [r2, #64]	; 0x40
 8002df8:	4b55      	ldr	r3, [pc, #340]	; (8002f50 <HAL_UART_MspInit+0x2dc>)
 8002dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e00:	61bb      	str	r3, [r7, #24]
 8002e02:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e04:	2300      	movs	r3, #0
 8002e06:	617b      	str	r3, [r7, #20]
 8002e08:	4b51      	ldr	r3, [pc, #324]	; (8002f50 <HAL_UART_MspInit+0x2dc>)
 8002e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0c:	4a50      	ldr	r2, [pc, #320]	; (8002f50 <HAL_UART_MspInit+0x2dc>)
 8002e0e:	f043 0304 	orr.w	r3, r3, #4
 8002e12:	6313      	str	r3, [r2, #48]	; 0x30
 8002e14:	4b4e      	ldr	r3, [pc, #312]	; (8002f50 <HAL_UART_MspInit+0x2dc>)
 8002e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e18:	f003 0304 	and.w	r3, r3, #4
 8002e1c:	617b      	str	r3, [r7, #20]
 8002e1e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e20:	2300      	movs	r3, #0
 8002e22:	613b      	str	r3, [r7, #16]
 8002e24:	4b4a      	ldr	r3, [pc, #296]	; (8002f50 <HAL_UART_MspInit+0x2dc>)
 8002e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e28:	4a49      	ldr	r2, [pc, #292]	; (8002f50 <HAL_UART_MspInit+0x2dc>)
 8002e2a:	f043 0302 	orr.w	r3, r3, #2
 8002e2e:	6313      	str	r3, [r2, #48]	; 0x30
 8002e30:	4b47      	ldr	r3, [pc, #284]	; (8002f50 <HAL_UART_MspInit+0x2dc>)
 8002e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	613b      	str	r3, [r7, #16]
 8002e3a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = DEBUG_RX_Pin;
 8002e3c:	2320      	movs	r3, #32
 8002e3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e40:	2302      	movs	r3, #2
 8002e42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e44:	2300      	movs	r3, #0
 8002e46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e4c:	2307      	movs	r3, #7
 8002e4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DEBUG_RX_GPIO_Port, &GPIO_InitStruct);
 8002e50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e54:	4619      	mov	r1, r3
 8002e56:	483f      	ldr	r0, [pc, #252]	; (8002f54 <HAL_UART_MspInit+0x2e0>)
 8002e58:	f001 fea4 	bl	8004ba4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DEBUG_TX_Pin;
 8002e5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e62:	2302      	movs	r3, #2
 8002e64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e66:	2300      	movs	r3, #0
 8002e68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e6e:	2307      	movs	r3, #7
 8002e70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DEBUG_TX_GPIO_Port, &GPIO_InitStruct);
 8002e72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e76:	4619      	mov	r1, r3
 8002e78:	4837      	ldr	r0, [pc, #220]	; (8002f58 <HAL_UART_MspInit+0x2e4>)
 8002e7a:	f001 fe93 	bl	8004ba4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002e7e:	4b37      	ldr	r3, [pc, #220]	; (8002f5c <HAL_UART_MspInit+0x2e8>)
 8002e80:	4a37      	ldr	r2, [pc, #220]	; (8002f60 <HAL_UART_MspInit+0x2ec>)
 8002e82:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002e84:	4b35      	ldr	r3, [pc, #212]	; (8002f5c <HAL_UART_MspInit+0x2e8>)
 8002e86:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e8a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e8c:	4b33      	ldr	r3, [pc, #204]	; (8002f5c <HAL_UART_MspInit+0x2e8>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e92:	4b32      	ldr	r3, [pc, #200]	; (8002f5c <HAL_UART_MspInit+0x2e8>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e98:	4b30      	ldr	r3, [pc, #192]	; (8002f5c <HAL_UART_MspInit+0x2e8>)
 8002e9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e9e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ea0:	4b2e      	ldr	r3, [pc, #184]	; (8002f5c <HAL_UART_MspInit+0x2e8>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ea6:	4b2d      	ldr	r3, [pc, #180]	; (8002f5c <HAL_UART_MspInit+0x2e8>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002eac:	4b2b      	ldr	r3, [pc, #172]	; (8002f5c <HAL_UART_MspInit+0x2e8>)
 8002eae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002eb2:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002eb4:	4b29      	ldr	r3, [pc, #164]	; (8002f5c <HAL_UART_MspInit+0x2e8>)
 8002eb6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002eba:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ebc:	4b27      	ldr	r3, [pc, #156]	; (8002f5c <HAL_UART_MspInit+0x2e8>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002ec2:	4826      	ldr	r0, [pc, #152]	; (8002f5c <HAL_UART_MspInit+0x2e8>)
 8002ec4:	f001 fa6c 	bl	80043a0 <HAL_DMA_Init>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <HAL_UART_MspInit+0x25e>
      Error_Handler();
 8002ece:	f7ff fa69 	bl	80023a4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a21      	ldr	r2, [pc, #132]	; (8002f5c <HAL_UART_MspInit+0x2e8>)
 8002ed6:	635a      	str	r2, [r3, #52]	; 0x34
 8002ed8:	4a20      	ldr	r2, [pc, #128]	; (8002f5c <HAL_UART_MspInit+0x2e8>)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8002ede:	4b21      	ldr	r3, [pc, #132]	; (8002f64 <HAL_UART_MspInit+0x2f0>)
 8002ee0:	4a21      	ldr	r2, [pc, #132]	; (8002f68 <HAL_UART_MspInit+0x2f4>)
 8002ee2:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8002ee4:	4b1f      	ldr	r3, [pc, #124]	; (8002f64 <HAL_UART_MspInit+0x2f0>)
 8002ee6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002eea:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002eec:	4b1d      	ldr	r3, [pc, #116]	; (8002f64 <HAL_UART_MspInit+0x2f0>)
 8002eee:	2240      	movs	r2, #64	; 0x40
 8002ef0:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ef2:	4b1c      	ldr	r3, [pc, #112]	; (8002f64 <HAL_UART_MspInit+0x2f0>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ef8:	4b1a      	ldr	r3, [pc, #104]	; (8002f64 <HAL_UART_MspInit+0x2f0>)
 8002efa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002efe:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f00:	4b18      	ldr	r3, [pc, #96]	; (8002f64 <HAL_UART_MspInit+0x2f0>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f06:	4b17      	ldr	r3, [pc, #92]	; (8002f64 <HAL_UART_MspInit+0x2f0>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002f0c:	4b15      	ldr	r3, [pc, #84]	; (8002f64 <HAL_UART_MspInit+0x2f0>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f12:	4b14      	ldr	r3, [pc, #80]	; (8002f64 <HAL_UART_MspInit+0x2f0>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f18:	4b12      	ldr	r3, [pc, #72]	; (8002f64 <HAL_UART_MspInit+0x2f0>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002f1e:	4811      	ldr	r0, [pc, #68]	; (8002f64 <HAL_UART_MspInit+0x2f0>)
 8002f20:	f001 fa3e 	bl	80043a0 <HAL_DMA_Init>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <HAL_UART_MspInit+0x2ba>
      Error_Handler();
 8002f2a:	f7ff fa3b 	bl	80023a4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a0c      	ldr	r2, [pc, #48]	; (8002f64 <HAL_UART_MspInit+0x2f0>)
 8002f32:	631a      	str	r2, [r3, #48]	; 0x30
 8002f34:	4a0b      	ldr	r2, [pc, #44]	; (8002f64 <HAL_UART_MspInit+0x2f0>)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	2105      	movs	r1, #5
 8002f3e:	2027      	movs	r0, #39	; 0x27
 8002f40:	f001 fa04 	bl	800434c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002f44:	2027      	movs	r0, #39	; 0x27
 8002f46:	f001 fa1d 	bl	8004384 <HAL_NVIC_EnableIRQ>
}
 8002f4a:	e0a7      	b.n	800309c <HAL_UART_MspInit+0x428>
 8002f4c:	40004800 	.word	0x40004800
 8002f50:	40023800 	.word	0x40023800
 8002f54:	40020800 	.word	0x40020800
 8002f58:	40020400 	.word	0x40020400
 8002f5c:	2000716c 	.word	0x2000716c
 8002f60:	40026028 	.word	0x40026028
 8002f64:	2000720c 	.word	0x2000720c
 8002f68:	40026058 	.word	0x40026058
  else if(uartHandle->Instance==USART6)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a4c      	ldr	r2, [pc, #304]	; (80030a4 <HAL_UART_MspInit+0x430>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	f040 8092 	bne.w	800309c <HAL_UART_MspInit+0x428>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002f78:	2300      	movs	r3, #0
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	4b4a      	ldr	r3, [pc, #296]	; (80030a8 <HAL_UART_MspInit+0x434>)
 8002f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f80:	4a49      	ldr	r2, [pc, #292]	; (80030a8 <HAL_UART_MspInit+0x434>)
 8002f82:	f043 0320 	orr.w	r3, r3, #32
 8002f86:	6453      	str	r3, [r2, #68]	; 0x44
 8002f88:	4b47      	ldr	r3, [pc, #284]	; (80030a8 <HAL_UART_MspInit+0x434>)
 8002f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8c:	f003 0320 	and.w	r3, r3, #32
 8002f90:	60fb      	str	r3, [r7, #12]
 8002f92:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f94:	2300      	movs	r3, #0
 8002f96:	60bb      	str	r3, [r7, #8]
 8002f98:	4b43      	ldr	r3, [pc, #268]	; (80030a8 <HAL_UART_MspInit+0x434>)
 8002f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9c:	4a42      	ldr	r2, [pc, #264]	; (80030a8 <HAL_UART_MspInit+0x434>)
 8002f9e:	f043 0304 	orr.w	r3, r3, #4
 8002fa2:	6313      	str	r3, [r2, #48]	; 0x30
 8002fa4:	4b40      	ldr	r3, [pc, #256]	; (80030a8 <HAL_UART_MspInit+0x434>)
 8002fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	60bb      	str	r3, [r7, #8]
 8002fae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOTOR_TX_Pin|MOTOR_RX_Pin;
 8002fb0:	23c0      	movs	r3, #192	; 0xc0
 8002fb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002fc0:	2308      	movs	r3, #8
 8002fc2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fc8:	4619      	mov	r1, r3
 8002fca:	4838      	ldr	r0, [pc, #224]	; (80030ac <HAL_UART_MspInit+0x438>)
 8002fcc:	f001 fdea 	bl	8004ba4 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8002fd0:	4b37      	ldr	r3, [pc, #220]	; (80030b0 <HAL_UART_MspInit+0x43c>)
 8002fd2:	4a38      	ldr	r2, [pc, #224]	; (80030b4 <HAL_UART_MspInit+0x440>)
 8002fd4:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8002fd6:	4b36      	ldr	r3, [pc, #216]	; (80030b0 <HAL_UART_MspInit+0x43c>)
 8002fd8:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002fdc:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fde:	4b34      	ldr	r3, [pc, #208]	; (80030b0 <HAL_UART_MspInit+0x43c>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fe4:	4b32      	ldr	r3, [pc, #200]	; (80030b0 <HAL_UART_MspInit+0x43c>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002fea:	4b31      	ldr	r3, [pc, #196]	; (80030b0 <HAL_UART_MspInit+0x43c>)
 8002fec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ff0:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ff2:	4b2f      	ldr	r3, [pc, #188]	; (80030b0 <HAL_UART_MspInit+0x43c>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ff8:	4b2d      	ldr	r3, [pc, #180]	; (80030b0 <HAL_UART_MspInit+0x43c>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8002ffe:	4b2c      	ldr	r3, [pc, #176]	; (80030b0 <HAL_UART_MspInit+0x43c>)
 8003000:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003004:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003006:	4b2a      	ldr	r3, [pc, #168]	; (80030b0 <HAL_UART_MspInit+0x43c>)
 8003008:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800300c:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800300e:	4b28      	ldr	r3, [pc, #160]	; (80030b0 <HAL_UART_MspInit+0x43c>)
 8003010:	2200      	movs	r2, #0
 8003012:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8003014:	4826      	ldr	r0, [pc, #152]	; (80030b0 <HAL_UART_MspInit+0x43c>)
 8003016:	f001 f9c3 	bl	80043a0 <HAL_DMA_Init>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <HAL_UART_MspInit+0x3b0>
      Error_Handler();
 8003020:	f7ff f9c0 	bl	80023a4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a22      	ldr	r2, [pc, #136]	; (80030b0 <HAL_UART_MspInit+0x43c>)
 8003028:	635a      	str	r2, [r3, #52]	; 0x34
 800302a:	4a21      	ldr	r2, [pc, #132]	; (80030b0 <HAL_UART_MspInit+0x43c>)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8003030:	4b21      	ldr	r3, [pc, #132]	; (80030b8 <HAL_UART_MspInit+0x444>)
 8003032:	4a22      	ldr	r2, [pc, #136]	; (80030bc <HAL_UART_MspInit+0x448>)
 8003034:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8003036:	4b20      	ldr	r3, [pc, #128]	; (80030b8 <HAL_UART_MspInit+0x444>)
 8003038:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800303c:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800303e:	4b1e      	ldr	r3, [pc, #120]	; (80030b8 <HAL_UART_MspInit+0x444>)
 8003040:	2240      	movs	r2, #64	; 0x40
 8003042:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003044:	4b1c      	ldr	r3, [pc, #112]	; (80030b8 <HAL_UART_MspInit+0x444>)
 8003046:	2200      	movs	r2, #0
 8003048:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800304a:	4b1b      	ldr	r3, [pc, #108]	; (80030b8 <HAL_UART_MspInit+0x444>)
 800304c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003050:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003052:	4b19      	ldr	r3, [pc, #100]	; (80030b8 <HAL_UART_MspInit+0x444>)
 8003054:	2200      	movs	r2, #0
 8003056:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003058:	4b17      	ldr	r3, [pc, #92]	; (80030b8 <HAL_UART_MspInit+0x444>)
 800305a:	2200      	movs	r2, #0
 800305c:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 800305e:	4b16      	ldr	r3, [pc, #88]	; (80030b8 <HAL_UART_MspInit+0x444>)
 8003060:	2200      	movs	r2, #0
 8003062:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003064:	4b14      	ldr	r3, [pc, #80]	; (80030b8 <HAL_UART_MspInit+0x444>)
 8003066:	2200      	movs	r2, #0
 8003068:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800306a:	4b13      	ldr	r3, [pc, #76]	; (80030b8 <HAL_UART_MspInit+0x444>)
 800306c:	2200      	movs	r2, #0
 800306e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8003070:	4811      	ldr	r0, [pc, #68]	; (80030b8 <HAL_UART_MspInit+0x444>)
 8003072:	f001 f995 	bl	80043a0 <HAL_DMA_Init>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <HAL_UART_MspInit+0x40c>
      Error_Handler();
 800307c:	f7ff f992 	bl	80023a4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4a0d      	ldr	r2, [pc, #52]	; (80030b8 <HAL_UART_MspInit+0x444>)
 8003084:	631a      	str	r2, [r3, #48]	; 0x30
 8003086:	4a0c      	ldr	r2, [pc, #48]	; (80030b8 <HAL_UART_MspInit+0x444>)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 800308c:	2200      	movs	r2, #0
 800308e:	2105      	movs	r1, #5
 8003090:	2047      	movs	r0, #71	; 0x47
 8003092:	f001 f95b 	bl	800434c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003096:	2047      	movs	r0, #71	; 0x47
 8003098:	f001 f974 	bl	8004384 <HAL_NVIC_EnableIRQ>
}
 800309c:	bf00      	nop
 800309e:	3738      	adds	r7, #56	; 0x38
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	40011400 	.word	0x40011400
 80030a8:	40023800 	.word	0x40023800
 80030ac:	40020800 	.word	0x40020800
 80030b0:	2000710c 	.word	0x2000710c
 80030b4:	40026428 	.word	0x40026428
 80030b8:	200072cc 	.word	0x200072cc
 80030bc:	400264a0 	.word	0x400264a0

080030c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80030c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80030c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80030c6:	e003      	b.n	80030d0 <LoopCopyDataInit>

080030c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80030c8:	4b0c      	ldr	r3, [pc, #48]	; (80030fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80030ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80030cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80030ce:	3104      	adds	r1, #4

080030d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80030d0:	480b      	ldr	r0, [pc, #44]	; (8003100 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80030d2:	4b0c      	ldr	r3, [pc, #48]	; (8003104 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80030d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80030d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80030d8:	d3f6      	bcc.n	80030c8 <CopyDataInit>
  ldr  r2, =_sbss
 80030da:	4a0b      	ldr	r2, [pc, #44]	; (8003108 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80030dc:	e002      	b.n	80030e4 <LoopFillZerobss>

080030de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80030de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80030e0:	f842 3b04 	str.w	r3, [r2], #4

080030e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80030e4:	4b09      	ldr	r3, [pc, #36]	; (800310c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80030e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80030e8:	d3f9      	bcc.n	80030de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80030ea:	f7ff fb35 	bl	8002758 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030ee:	f007 fdab 	bl	800ac48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030f2:	f7ff f8b1 	bl	8002258 <main>
  bx  lr    
 80030f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80030f8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80030fc:	0800af60 	.word	0x0800af60
  ldr  r0, =_sdata
 8003100:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003104:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8003108:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 800310c:	20007410 	.word	0x20007410

08003110 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003110:	e7fe      	b.n	8003110 <ADC_IRQHandler>
	...

08003114 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003118:	4b0e      	ldr	r3, [pc, #56]	; (8003154 <HAL_Init+0x40>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a0d      	ldr	r2, [pc, #52]	; (8003154 <HAL_Init+0x40>)
 800311e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003122:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003124:	4b0b      	ldr	r3, [pc, #44]	; (8003154 <HAL_Init+0x40>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a0a      	ldr	r2, [pc, #40]	; (8003154 <HAL_Init+0x40>)
 800312a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800312e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003130:	4b08      	ldr	r3, [pc, #32]	; (8003154 <HAL_Init+0x40>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a07      	ldr	r2, [pc, #28]	; (8003154 <HAL_Init+0x40>)
 8003136:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800313a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800313c:	2003      	movs	r0, #3
 800313e:	f001 f8fa 	bl	8004336 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003142:	2000      	movs	r0, #0
 8003144:	f7ff fa0e 	bl	8002564 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003148:	f7ff f9e0 	bl	800250c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	40023c00 	.word	0x40023c00

08003158 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800315c:	4b06      	ldr	r3, [pc, #24]	; (8003178 <HAL_IncTick+0x20>)
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	461a      	mov	r2, r3
 8003162:	4b06      	ldr	r3, [pc, #24]	; (800317c <HAL_IncTick+0x24>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4413      	add	r3, r2
 8003168:	4a04      	ldr	r2, [pc, #16]	; (800317c <HAL_IncTick+0x24>)
 800316a:	6013      	str	r3, [r2, #0]
}
 800316c:	bf00      	nop
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	20000008 	.word	0x20000008
 800317c:	2000740c 	.word	0x2000740c

08003180 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003180:	b480      	push	{r7}
 8003182:	af00      	add	r7, sp, #0
  return uwTick;
 8003184:	4b03      	ldr	r3, [pc, #12]	; (8003194 <HAL_GetTick+0x14>)
 8003186:	681b      	ldr	r3, [r3, #0]
}
 8003188:	4618      	mov	r0, r3
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	2000740c 	.word	0x2000740c

08003198 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031a0:	2300      	movs	r3, #0
 80031a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e033      	b.n	8003216 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d109      	bne.n	80031ca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f7fe fe0c 	bl	8001dd4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ce:	f003 0310 	and.w	r3, r3, #16
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d118      	bne.n	8003208 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031da:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80031de:	f023 0302 	bic.w	r3, r3, #2
 80031e2:	f043 0202 	orr.w	r2, r3, #2
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 f94a 	bl	8003484 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fa:	f023 0303 	bic.w	r3, r3, #3
 80031fe:	f043 0201 	orr.w	r2, r3, #1
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	641a      	str	r2, [r3, #64]	; 0x40
 8003206:	e001      	b.n	800320c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003214:	7bfb      	ldrb	r3, [r7, #15]
}
 8003216:	4618      	mov	r0, r3
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
	...

08003220 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800322a:	2300      	movs	r3, #0
 800322c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003234:	2b01      	cmp	r3, #1
 8003236:	d101      	bne.n	800323c <HAL_ADC_ConfigChannel+0x1c>
 8003238:	2302      	movs	r3, #2
 800323a:	e113      	b.n	8003464 <HAL_ADC_ConfigChannel+0x244>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2b09      	cmp	r3, #9
 800324a:	d925      	bls.n	8003298 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68d9      	ldr	r1, [r3, #12]
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	b29b      	uxth	r3, r3
 8003258:	461a      	mov	r2, r3
 800325a:	4613      	mov	r3, r2
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	4413      	add	r3, r2
 8003260:	3b1e      	subs	r3, #30
 8003262:	2207      	movs	r2, #7
 8003264:	fa02 f303 	lsl.w	r3, r2, r3
 8003268:	43da      	mvns	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	400a      	ands	r2, r1
 8003270:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	68d9      	ldr	r1, [r3, #12]
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	689a      	ldr	r2, [r3, #8]
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	b29b      	uxth	r3, r3
 8003282:	4618      	mov	r0, r3
 8003284:	4603      	mov	r3, r0
 8003286:	005b      	lsls	r3, r3, #1
 8003288:	4403      	add	r3, r0
 800328a:	3b1e      	subs	r3, #30
 800328c:	409a      	lsls	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	430a      	orrs	r2, r1
 8003294:	60da      	str	r2, [r3, #12]
 8003296:	e022      	b.n	80032de <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6919      	ldr	r1, [r3, #16]
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	461a      	mov	r2, r3
 80032a6:	4613      	mov	r3, r2
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	4413      	add	r3, r2
 80032ac:	2207      	movs	r2, #7
 80032ae:	fa02 f303 	lsl.w	r3, r2, r3
 80032b2:	43da      	mvns	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	400a      	ands	r2, r1
 80032ba:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6919      	ldr	r1, [r3, #16]
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	689a      	ldr	r2, [r3, #8]
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	4618      	mov	r0, r3
 80032ce:	4603      	mov	r3, r0
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	4403      	add	r3, r0
 80032d4:	409a      	lsls	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	430a      	orrs	r2, r1
 80032dc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	2b06      	cmp	r3, #6
 80032e4:	d824      	bhi.n	8003330 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685a      	ldr	r2, [r3, #4]
 80032f0:	4613      	mov	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4413      	add	r3, r2
 80032f6:	3b05      	subs	r3, #5
 80032f8:	221f      	movs	r2, #31
 80032fa:	fa02 f303 	lsl.w	r3, r2, r3
 80032fe:	43da      	mvns	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	400a      	ands	r2, r1
 8003306:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	b29b      	uxth	r3, r3
 8003314:	4618      	mov	r0, r3
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685a      	ldr	r2, [r3, #4]
 800331a:	4613      	mov	r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	4413      	add	r3, r2
 8003320:	3b05      	subs	r3, #5
 8003322:	fa00 f203 	lsl.w	r2, r0, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	430a      	orrs	r2, r1
 800332c:	635a      	str	r2, [r3, #52]	; 0x34
 800332e:	e04c      	b.n	80033ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	2b0c      	cmp	r3, #12
 8003336:	d824      	bhi.n	8003382 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685a      	ldr	r2, [r3, #4]
 8003342:	4613      	mov	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	4413      	add	r3, r2
 8003348:	3b23      	subs	r3, #35	; 0x23
 800334a:	221f      	movs	r2, #31
 800334c:	fa02 f303 	lsl.w	r3, r2, r3
 8003350:	43da      	mvns	r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	400a      	ands	r2, r1
 8003358:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	b29b      	uxth	r3, r3
 8003366:	4618      	mov	r0, r3
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685a      	ldr	r2, [r3, #4]
 800336c:	4613      	mov	r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	4413      	add	r3, r2
 8003372:	3b23      	subs	r3, #35	; 0x23
 8003374:	fa00 f203 	lsl.w	r2, r0, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	430a      	orrs	r2, r1
 800337e:	631a      	str	r2, [r3, #48]	; 0x30
 8003380:	e023      	b.n	80033ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685a      	ldr	r2, [r3, #4]
 800338c:	4613      	mov	r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	4413      	add	r3, r2
 8003392:	3b41      	subs	r3, #65	; 0x41
 8003394:	221f      	movs	r2, #31
 8003396:	fa02 f303 	lsl.w	r3, r2, r3
 800339a:	43da      	mvns	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	400a      	ands	r2, r1
 80033a2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	4618      	mov	r0, r3
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685a      	ldr	r2, [r3, #4]
 80033b6:	4613      	mov	r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	4413      	add	r3, r2
 80033bc:	3b41      	subs	r3, #65	; 0x41
 80033be:	fa00 f203 	lsl.w	r2, r0, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	430a      	orrs	r2, r1
 80033c8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033ca:	4b29      	ldr	r3, [pc, #164]	; (8003470 <HAL_ADC_ConfigChannel+0x250>)
 80033cc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a28      	ldr	r2, [pc, #160]	; (8003474 <HAL_ADC_ConfigChannel+0x254>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d10f      	bne.n	80033f8 <HAL_ADC_ConfigChannel+0x1d8>
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2b12      	cmp	r3, #18
 80033de:	d10b      	bne.n	80033f8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a1d      	ldr	r2, [pc, #116]	; (8003474 <HAL_ADC_ConfigChannel+0x254>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d12b      	bne.n	800345a <HAL_ADC_ConfigChannel+0x23a>
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a1c      	ldr	r2, [pc, #112]	; (8003478 <HAL_ADC_ConfigChannel+0x258>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d003      	beq.n	8003414 <HAL_ADC_ConfigChannel+0x1f4>
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2b11      	cmp	r3, #17
 8003412:	d122      	bne.n	800345a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a11      	ldr	r2, [pc, #68]	; (8003478 <HAL_ADC_ConfigChannel+0x258>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d111      	bne.n	800345a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003436:	4b11      	ldr	r3, [pc, #68]	; (800347c <HAL_ADC_ConfigChannel+0x25c>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a11      	ldr	r2, [pc, #68]	; (8003480 <HAL_ADC_ConfigChannel+0x260>)
 800343c:	fba2 2303 	umull	r2, r3, r2, r3
 8003440:	0c9a      	lsrs	r2, r3, #18
 8003442:	4613      	mov	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4413      	add	r3, r2
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800344c:	e002      	b.n	8003454 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	3b01      	subs	r3, #1
 8003452:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1f9      	bne.n	800344e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	3714      	adds	r7, #20
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	40012300 	.word	0x40012300
 8003474:	40012000 	.word	0x40012000
 8003478:	10000012 	.word	0x10000012
 800347c:	20000000 	.word	0x20000000
 8003480:	431bde83 	.word	0x431bde83

08003484 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800348c:	4b79      	ldr	r3, [pc, #484]	; (8003674 <ADC_Init+0x1f0>)
 800348e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	685a      	ldr	r2, [r3, #4]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	431a      	orrs	r2, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	6859      	ldr	r1, [r3, #4]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	021a      	lsls	r2, r3, #8
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	430a      	orrs	r2, r1
 80034cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	685a      	ldr	r2, [r3, #4]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80034dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	6859      	ldr	r1, [r3, #4]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689a      	ldr	r2, [r3, #8]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	430a      	orrs	r2, r1
 80034ee:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	689a      	ldr	r2, [r3, #8]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	6899      	ldr	r1, [r3, #8]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	68da      	ldr	r2, [r3, #12]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	430a      	orrs	r2, r1
 8003510:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003516:	4a58      	ldr	r2, [pc, #352]	; (8003678 <ADC_Init+0x1f4>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d022      	beq.n	8003562 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	689a      	ldr	r2, [r3, #8]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800352a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6899      	ldr	r1, [r3, #8]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	430a      	orrs	r2, r1
 800353c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	689a      	ldr	r2, [r3, #8]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800354c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	6899      	ldr	r1, [r3, #8]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	430a      	orrs	r2, r1
 800355e:	609a      	str	r2, [r3, #8]
 8003560:	e00f      	b.n	8003582 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	689a      	ldr	r2, [r3, #8]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003570:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	689a      	ldr	r2, [r3, #8]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003580:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	689a      	ldr	r2, [r3, #8]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 0202 	bic.w	r2, r2, #2
 8003590:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	6899      	ldr	r1, [r3, #8]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	7e1b      	ldrb	r3, [r3, #24]
 800359c:	005a      	lsls	r2, r3, #1
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	430a      	orrs	r2, r1
 80035a4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d01b      	beq.n	80035e8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	685a      	ldr	r2, [r3, #4]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035be:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	685a      	ldr	r2, [r3, #4]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80035ce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6859      	ldr	r1, [r3, #4]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035da:	3b01      	subs	r3, #1
 80035dc:	035a      	lsls	r2, r3, #13
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	605a      	str	r2, [r3, #4]
 80035e6:	e007      	b.n	80035f8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	685a      	ldr	r2, [r3, #4]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035f6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003606:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	69db      	ldr	r3, [r3, #28]
 8003612:	3b01      	subs	r3, #1
 8003614:	051a      	lsls	r2, r3, #20
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	430a      	orrs	r2, r1
 800361c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	689a      	ldr	r2, [r3, #8]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800362c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	6899      	ldr	r1, [r3, #8]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800363a:	025a      	lsls	r2, r3, #9
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	430a      	orrs	r2, r1
 8003642:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689a      	ldr	r2, [r3, #8]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003652:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	6899      	ldr	r1, [r3, #8]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	029a      	lsls	r2, r3, #10
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	430a      	orrs	r2, r1
 8003666:	609a      	str	r2, [r3, #8]
}
 8003668:	bf00      	nop
 800366a:	3714      	adds	r7, #20
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr
 8003674:	40012300 	.word	0x40012300
 8003678:	0f000001 	.word	0x0f000001

0800367c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e0ed      	b.n	800386a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d102      	bne.n	80036a0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f7fe fc64 	bl	8001f68 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 0202 	bic.w	r2, r2, #2
 80036ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036b0:	f7ff fd66 	bl	8003180 <HAL_GetTick>
 80036b4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80036b6:	e012      	b.n	80036de <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80036b8:	f7ff fd62 	bl	8003180 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b0a      	cmp	r3, #10
 80036c4:	d90b      	bls.n	80036de <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2205      	movs	r2, #5
 80036d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e0c5      	b.n	800386a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1e5      	bne.n	80036b8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f042 0201 	orr.w	r2, r2, #1
 80036fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036fc:	f7ff fd40 	bl	8003180 <HAL_GetTick>
 8003700:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003702:	e012      	b.n	800372a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003704:	f7ff fd3c 	bl	8003180 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b0a      	cmp	r3, #10
 8003710:	d90b      	bls.n	800372a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003716:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2205      	movs	r2, #5
 8003722:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e09f      	b.n	800386a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	2b00      	cmp	r3, #0
 8003736:	d0e5      	beq.n	8003704 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	7e1b      	ldrb	r3, [r3, #24]
 800373c:	2b01      	cmp	r3, #1
 800373e:	d108      	bne.n	8003752 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800374e:	601a      	str	r2, [r3, #0]
 8003750:	e007      	b.n	8003762 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003760:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	7e5b      	ldrb	r3, [r3, #25]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d108      	bne.n	800377c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003778:	601a      	str	r2, [r3, #0]
 800377a:	e007      	b.n	800378c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800378a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	7e9b      	ldrb	r3, [r3, #26]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d108      	bne.n	80037a6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f042 0220 	orr.w	r2, r2, #32
 80037a2:	601a      	str	r2, [r3, #0]
 80037a4:	e007      	b.n	80037b6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f022 0220 	bic.w	r2, r2, #32
 80037b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	7edb      	ldrb	r3, [r3, #27]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d108      	bne.n	80037d0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f022 0210 	bic.w	r2, r2, #16
 80037cc:	601a      	str	r2, [r3, #0]
 80037ce:	e007      	b.n	80037e0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f042 0210 	orr.w	r2, r2, #16
 80037de:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	7f1b      	ldrb	r3, [r3, #28]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d108      	bne.n	80037fa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f042 0208 	orr.w	r2, r2, #8
 80037f6:	601a      	str	r2, [r3, #0]
 80037f8:	e007      	b.n	800380a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f022 0208 	bic.w	r2, r2, #8
 8003808:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	7f5b      	ldrb	r3, [r3, #29]
 800380e:	2b01      	cmp	r3, #1
 8003810:	d108      	bne.n	8003824 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f042 0204 	orr.w	r2, r2, #4
 8003820:	601a      	str	r2, [r3, #0]
 8003822:	e007      	b.n	8003834 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f022 0204 	bic.w	r2, r2, #4
 8003832:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689a      	ldr	r2, [r3, #8]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	431a      	orrs	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	431a      	orrs	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	695b      	ldr	r3, [r3, #20]
 8003848:	ea42 0103 	orr.w	r1, r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	1e5a      	subs	r2, r3, #1
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	430a      	orrs	r2, r1
 8003858:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
	...

08003874 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003874:	b480      	push	{r7}
 8003876:	b087      	sub	sp, #28
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f893 3020 	ldrb.w	r3, [r3, #32]
 800388a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800388c:	7cfb      	ldrb	r3, [r7, #19]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d003      	beq.n	800389a <HAL_CAN_ConfigFilter+0x26>
 8003892:	7cfb      	ldrb	r3, [r7, #19]
 8003894:	2b02      	cmp	r3, #2
 8003896:	f040 80be 	bne.w	8003a16 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800389a:	4b65      	ldr	r3, [pc, #404]	; (8003a30 <HAL_CAN_ConfigFilter+0x1bc>)
 800389c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80038a4:	f043 0201 	orr.w	r2, r3, #1
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80038b4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c8:	021b      	lsls	r3, r3, #8
 80038ca:	431a      	orrs	r2, r3
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	f003 031f 	and.w	r3, r3, #31
 80038da:	2201      	movs	r2, #1
 80038dc:	fa02 f303 	lsl.w	r3, r2, r3
 80038e0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	43db      	mvns	r3, r3
 80038ec:	401a      	ands	r2, r3
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	69db      	ldr	r3, [r3, #28]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d123      	bne.n	8003944 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	43db      	mvns	r3, r3
 8003906:	401a      	ands	r2, r3
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800391a:	683a      	ldr	r2, [r7, #0]
 800391c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800391e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	3248      	adds	r2, #72	; 0x48
 8003924:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003938:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800393a:	6979      	ldr	r1, [r7, #20]
 800393c:	3348      	adds	r3, #72	; 0x48
 800393e:	00db      	lsls	r3, r3, #3
 8003940:	440b      	add	r3, r1
 8003942:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	69db      	ldr	r3, [r3, #28]
 8003948:	2b01      	cmp	r3, #1
 800394a:	d122      	bne.n	8003992 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	431a      	orrs	r2, r3
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003968:	683a      	ldr	r2, [r7, #0]
 800396a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800396c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	3248      	adds	r2, #72	; 0x48
 8003972:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003986:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003988:	6979      	ldr	r1, [r7, #20]
 800398a:	3348      	adds	r3, #72	; 0x48
 800398c:	00db      	lsls	r3, r3, #3
 800398e:	440b      	add	r3, r1
 8003990:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d109      	bne.n	80039ae <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	43db      	mvns	r3, r3
 80039a4:	401a      	ands	r2, r3
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80039ac:	e007      	b.n	80039be <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	431a      	orrs	r2, r3
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d109      	bne.n	80039da <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	43db      	mvns	r3, r3
 80039d0:	401a      	ands	r2, r3
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80039d8:	e007      	b.n	80039ea <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	431a      	orrs	r2, r3
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d107      	bne.n	8003a02 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	431a      	orrs	r2, r3
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003a08:	f023 0201 	bic.w	r2, r3, #1
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003a12:	2300      	movs	r3, #0
 8003a14:	e006      	b.n	8003a24 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
  }
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	371c      	adds	r7, #28
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr
 8003a30:	40006400 	.word	0x40006400

08003a34 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d12e      	bne.n	8003aa6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2202      	movs	r2, #2
 8003a4c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f022 0201 	bic.w	r2, r2, #1
 8003a5e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003a60:	f7ff fb8e 	bl	8003180 <HAL_GetTick>
 8003a64:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003a66:	e012      	b.n	8003a8e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003a68:	f7ff fb8a 	bl	8003180 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b0a      	cmp	r3, #10
 8003a74:	d90b      	bls.n	8003a8e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2205      	movs	r2, #5
 8003a86:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e012      	b.n	8003ab4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f003 0301 	and.w	r3, r3, #1
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d1e5      	bne.n	8003a68 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	e006      	b.n	8003ab4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aaa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
  }
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3710      	adds	r7, #16
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003abc:	b480      	push	{r7}
 8003abe:	b087      	sub	sp, #28
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
 8003ac8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ad0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003ad2:	7dfb      	ldrb	r3, [r7, #23]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d003      	beq.n	8003ae0 <HAL_CAN_GetRxMessage+0x24>
 8003ad8:	7dfb      	ldrb	r3, [r7, #23]
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	f040 80f3 	bne.w	8003cc6 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d10e      	bne.n	8003b04 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	f003 0303 	and.w	r3, r3, #3
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d116      	bne.n	8003b22 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e0e7      	b.n	8003cd4 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	f003 0303 	and.w	r3, r3, #3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d107      	bne.n	8003b22 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b16:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e0d8      	b.n	8003cd4 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	331b      	adds	r3, #27
 8003b2a:	011b      	lsls	r3, r3, #4
 8003b2c:	4413      	add	r3, r2
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0204 	and.w	r2, r3, #4
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d10c      	bne.n	8003b5a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	331b      	adds	r3, #27
 8003b48:	011b      	lsls	r3, r3, #4
 8003b4a:	4413      	add	r3, r2
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	0d5b      	lsrs	r3, r3, #21
 8003b50:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	601a      	str	r2, [r3, #0]
 8003b58:	e00b      	b.n	8003b72 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	331b      	adds	r3, #27
 8003b62:	011b      	lsls	r3, r3, #4
 8003b64:	4413      	add	r3, r2
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	08db      	lsrs	r3, r3, #3
 8003b6a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	331b      	adds	r3, #27
 8003b7a:	011b      	lsls	r3, r3, #4
 8003b7c:	4413      	add	r3, r2
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0202 	and.w	r2, r3, #2
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	331b      	adds	r3, #27
 8003b90:	011b      	lsls	r3, r3, #4
 8003b92:	4413      	add	r3, r2
 8003b94:	3304      	adds	r3, #4
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 020f 	and.w	r2, r3, #15
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	331b      	adds	r3, #27
 8003ba8:	011b      	lsls	r3, r3, #4
 8003baa:	4413      	add	r3, r2
 8003bac:	3304      	adds	r3, #4
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	0a1b      	lsrs	r3, r3, #8
 8003bb2:	b2da      	uxtb	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	331b      	adds	r3, #27
 8003bc0:	011b      	lsls	r3, r3, #4
 8003bc2:	4413      	add	r3, r2
 8003bc4:	3304      	adds	r3, #4
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	0c1b      	lsrs	r3, r3, #16
 8003bca:	b29a      	uxth	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	011b      	lsls	r3, r3, #4
 8003bd8:	4413      	add	r3, r2
 8003bda:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	b2da      	uxtb	r2, r3
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	011b      	lsls	r3, r3, #4
 8003bee:	4413      	add	r3, r2
 8003bf0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	0a1a      	lsrs	r2, r3, #8
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	b2d2      	uxtb	r2, r2
 8003bfe:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	011b      	lsls	r3, r3, #4
 8003c08:	4413      	add	r3, r2
 8003c0a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	0c1a      	lsrs	r2, r3, #16
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	3302      	adds	r3, #2
 8003c16:	b2d2      	uxtb	r2, r2
 8003c18:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	011b      	lsls	r3, r3, #4
 8003c22:	4413      	add	r3, r2
 8003c24:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	0e1a      	lsrs	r2, r3, #24
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	3303      	adds	r3, #3
 8003c30:	b2d2      	uxtb	r2, r2
 8003c32:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	011b      	lsls	r3, r3, #4
 8003c3c:	4413      	add	r3, r2
 8003c3e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	3304      	adds	r3, #4
 8003c48:	b2d2      	uxtb	r2, r2
 8003c4a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	011b      	lsls	r3, r3, #4
 8003c54:	4413      	add	r3, r2
 8003c56:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	0a1a      	lsrs	r2, r3, #8
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	3305      	adds	r3, #5
 8003c62:	b2d2      	uxtb	r2, r2
 8003c64:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	011b      	lsls	r3, r3, #4
 8003c6e:	4413      	add	r3, r2
 8003c70:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	0c1a      	lsrs	r2, r3, #16
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	3306      	adds	r3, #6
 8003c7c:	b2d2      	uxtb	r2, r2
 8003c7e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	011b      	lsls	r3, r3, #4
 8003c88:	4413      	add	r3, r2
 8003c8a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	0e1a      	lsrs	r2, r3, #24
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	3307      	adds	r3, #7
 8003c96:	b2d2      	uxtb	r2, r2
 8003c98:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d108      	bne.n	8003cb2 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68da      	ldr	r2, [r3, #12]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f042 0220 	orr.w	r2, r2, #32
 8003cae:	60da      	str	r2, [r3, #12]
 8003cb0:	e007      	b.n	8003cc2 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	691a      	ldr	r2, [r3, #16]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f042 0220 	orr.w	r2, r2, #32
 8003cc0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	e006      	b.n	8003cd4 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cca:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
  }
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	371c      	adds	r7, #28
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8003cea:	2300      	movs	r3, #0
 8003cec:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cf4:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003cf6:	7afb      	ldrb	r3, [r7, #11]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d002      	beq.n	8003d02 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8003cfc:	7afb      	ldrb	r3, [r7, #11]
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d10f      	bne.n	8003d22 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d106      	bne.n	8003d16 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	f003 0303 	and.w	r3, r3, #3
 8003d12:	60fb      	str	r3, [r7, #12]
 8003d14:	e005      	b.n	8003d22 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	f003 0303 	and.w	r3, r3, #3
 8003d20:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8003d22:	68fb      	ldr	r3, [r7, #12]
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3714      	adds	r7, #20
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d40:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003d42:	7bfb      	ldrb	r3, [r7, #15]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d002      	beq.n	8003d4e <HAL_CAN_ActivateNotification+0x1e>
 8003d48:	7bfb      	ldrb	r3, [r7, #15]
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d109      	bne.n	8003d62 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	6959      	ldr	r1, [r3, #20]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	683a      	ldr	r2, [r7, #0]
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	e006      	b.n	8003d70 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d66:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
  }
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3714      	adds	r7, #20
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b08a      	sub	sp, #40	; 0x28
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003d84:	2300      	movs	r3, #0
 8003d86:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003db8:	6a3b      	ldr	r3, [r7, #32]
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d07c      	beq.n	8003ebc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	f003 0301 	and.w	r3, r3, #1
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d023      	beq.n	8003e14 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d003      	beq.n	8003de6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f983 	bl	80040ea <HAL_CAN_TxMailbox0CompleteCallback>
 8003de4:	e016      	b.n	8003e14 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	f003 0304 	and.w	r3, r3, #4
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d004      	beq.n	8003dfa <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003df6:	627b      	str	r3, [r7, #36]	; 0x24
 8003df8:	e00c      	b.n	8003e14 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	f003 0308 	and.w	r3, r3, #8
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d004      	beq.n	8003e0e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e06:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e0a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e0c:	e002      	b.n	8003e14 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f989 	bl	8004126 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d024      	beq.n	8003e68 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e26:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d003      	beq.n	8003e3a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f963 	bl	80040fe <HAL_CAN_TxMailbox1CompleteCallback>
 8003e38:	e016      	b.n	8003e68 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d004      	beq.n	8003e4e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e46:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003e4a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e4c:	e00c      	b.n	8003e68 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d004      	beq.n	8003e62 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e5e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e60:	e002      	b.n	8003e68 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 f969 	bl	800413a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d024      	beq.n	8003ebc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003e7a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d003      	beq.n	8003e8e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 f943 	bl	8004112 <HAL_CAN_TxMailbox2CompleteCallback>
 8003e8c:	e016      	b.n	8003ebc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d004      	beq.n	8003ea2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e9e:	627b      	str	r3, [r7, #36]	; 0x24
 8003ea0:	e00c      	b.n	8003ebc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d004      	beq.n	8003eb6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8003eb4:	e002      	b.n	8003ebc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 f949 	bl	800414e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003ebc:	6a3b      	ldr	r3, [r7, #32]
 8003ebe:	f003 0308 	and.w	r3, r3, #8
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00c      	beq.n	8003ee0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	f003 0310 	and.w	r3, r3, #16
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d007      	beq.n	8003ee0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ed6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2210      	movs	r2, #16
 8003ede:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003ee0:	6a3b      	ldr	r3, [r7, #32]
 8003ee2:	f003 0304 	and.w	r3, r3, #4
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00b      	beq.n	8003f02 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	f003 0308 	and.w	r3, r3, #8
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d006      	beq.n	8003f02 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2208      	movs	r2, #8
 8003efa:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f000 f930 	bl	8004162 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003f02:	6a3b      	ldr	r3, [r7, #32]
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d009      	beq.n	8003f20 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	f003 0303 	and.w	r3, r3, #3
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d002      	beq.n	8003f20 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f7fc fb7c 	bl	8000618 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003f20:	6a3b      	ldr	r3, [r7, #32]
 8003f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00c      	beq.n	8003f44 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	f003 0310 	and.w	r3, r3, #16
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d007      	beq.n	8003f44 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f3a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2210      	movs	r2, #16
 8003f42:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003f44:	6a3b      	ldr	r3, [r7, #32]
 8003f46:	f003 0320 	and.w	r3, r3, #32
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00b      	beq.n	8003f66 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	f003 0308 	and.w	r3, r3, #8
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d006      	beq.n	8003f66 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2208      	movs	r2, #8
 8003f5e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f000 f912 	bl	800418a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003f66:	6a3b      	ldr	r3, [r7, #32]
 8003f68:	f003 0310 	and.w	r3, r3, #16
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d009      	beq.n	8003f84 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	f003 0303 	and.w	r3, r3, #3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d002      	beq.n	8003f84 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 f8f9 	bl	8004176 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003f84:	6a3b      	ldr	r3, [r7, #32]
 8003f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00b      	beq.n	8003fa6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	f003 0310 	and.w	r3, r3, #16
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d006      	beq.n	8003fa6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2210      	movs	r2, #16
 8003f9e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 f8fc 	bl	800419e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003fa6:	6a3b      	ldr	r3, [r7, #32]
 8003fa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00b      	beq.n	8003fc8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	f003 0308 	and.w	r3, r3, #8
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d006      	beq.n	8003fc8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2208      	movs	r2, #8
 8003fc0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 f8f5 	bl	80041b2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003fc8:	6a3b      	ldr	r3, [r7, #32]
 8003fca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d07b      	beq.n	80040ca <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	f003 0304 	and.w	r3, r3, #4
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d072      	beq.n	80040c2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003fdc:	6a3b      	ldr	r3, [r7, #32]
 8003fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d008      	beq.n	8003ff8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d003      	beq.n	8003ff8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff2:	f043 0301 	orr.w	r3, r3, #1
 8003ff6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003ff8:	6a3b      	ldr	r3, [r7, #32]
 8003ffa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d008      	beq.n	8004014 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004008:	2b00      	cmp	r3, #0
 800400a:	d003      	beq.n	8004014 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800400c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400e:	f043 0302 	orr.w	r3, r3, #2
 8004012:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004014:	6a3b      	ldr	r3, [r7, #32]
 8004016:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800401a:	2b00      	cmp	r3, #0
 800401c:	d008      	beq.n	8004030 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004024:	2b00      	cmp	r3, #0
 8004026:	d003      	beq.n	8004030 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402a:	f043 0304 	orr.w	r3, r3, #4
 800402e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004030:	6a3b      	ldr	r3, [r7, #32]
 8004032:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004036:	2b00      	cmp	r3, #0
 8004038:	d043      	beq.n	80040c2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004040:	2b00      	cmp	r3, #0
 8004042:	d03e      	beq.n	80040c2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800404a:	2b60      	cmp	r3, #96	; 0x60
 800404c:	d02b      	beq.n	80040a6 <HAL_CAN_IRQHandler+0x32a>
 800404e:	2b60      	cmp	r3, #96	; 0x60
 8004050:	d82e      	bhi.n	80040b0 <HAL_CAN_IRQHandler+0x334>
 8004052:	2b50      	cmp	r3, #80	; 0x50
 8004054:	d022      	beq.n	800409c <HAL_CAN_IRQHandler+0x320>
 8004056:	2b50      	cmp	r3, #80	; 0x50
 8004058:	d82a      	bhi.n	80040b0 <HAL_CAN_IRQHandler+0x334>
 800405a:	2b40      	cmp	r3, #64	; 0x40
 800405c:	d019      	beq.n	8004092 <HAL_CAN_IRQHandler+0x316>
 800405e:	2b40      	cmp	r3, #64	; 0x40
 8004060:	d826      	bhi.n	80040b0 <HAL_CAN_IRQHandler+0x334>
 8004062:	2b30      	cmp	r3, #48	; 0x30
 8004064:	d010      	beq.n	8004088 <HAL_CAN_IRQHandler+0x30c>
 8004066:	2b30      	cmp	r3, #48	; 0x30
 8004068:	d822      	bhi.n	80040b0 <HAL_CAN_IRQHandler+0x334>
 800406a:	2b10      	cmp	r3, #16
 800406c:	d002      	beq.n	8004074 <HAL_CAN_IRQHandler+0x2f8>
 800406e:	2b20      	cmp	r3, #32
 8004070:	d005      	beq.n	800407e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004072:	e01d      	b.n	80040b0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004076:	f043 0308 	orr.w	r3, r3, #8
 800407a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800407c:	e019      	b.n	80040b2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800407e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004080:	f043 0310 	orr.w	r3, r3, #16
 8004084:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004086:	e014      	b.n	80040b2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408a:	f043 0320 	orr.w	r3, r3, #32
 800408e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004090:	e00f      	b.n	80040b2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004094:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004098:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800409a:	e00a      	b.n	80040b2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800409c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040a2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80040a4:	e005      	b.n	80040b2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80040a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040ac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80040ae:	e000      	b.n	80040b2 <HAL_CAN_IRQHandler+0x336>
            break;
 80040b0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	699a      	ldr	r2, [r3, #24]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80040c0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2204      	movs	r2, #4
 80040c8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80040ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d008      	beq.n	80040e2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d6:	431a      	orrs	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 f872 	bl	80041c6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80040e2:	bf00      	nop
 80040e4:	3728      	adds	r7, #40	; 0x28
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}

080040ea <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80040ea:	b480      	push	{r7}
 80040ec:	b083      	sub	sp, #12
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80040f2:	bf00      	nop
 80040f4:	370c      	adds	r7, #12
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr

080040fe <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80040fe:	b480      	push	{r7}
 8004100:	b083      	sub	sp, #12
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004106:	bf00      	nop
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr

08004112 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004112:	b480      	push	{r7}
 8004114:	b083      	sub	sp, #12
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800411a:	bf00      	nop
 800411c:	370c      	adds	r7, #12
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr

08004126 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004126:	b480      	push	{r7}
 8004128:	b083      	sub	sp, #12
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800412e:	bf00      	nop
 8004130:	370c      	adds	r7, #12
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr

0800413a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800413a:	b480      	push	{r7}
 800413c:	b083      	sub	sp, #12
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004142:	bf00      	nop
 8004144:	370c      	adds	r7, #12
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr

0800414e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800414e:	b480      	push	{r7}
 8004150:	b083      	sub	sp, #12
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004156:	bf00      	nop
 8004158:	370c      	adds	r7, #12
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr

08004162 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004162:	b480      	push	{r7}
 8004164:	b083      	sub	sp, #12
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800416a:	bf00      	nop
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr

08004176 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004176:	b480      	push	{r7}
 8004178:	b083      	sub	sp, #12
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800417e:	bf00      	nop
 8004180:	370c      	adds	r7, #12
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr

0800418a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800418a:	b480      	push	{r7}
 800418c:	b083      	sub	sp, #12
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004192:	bf00      	nop
 8004194:	370c      	adds	r7, #12
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr

0800419e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800419e:	b480      	push	{r7}
 80041a0:	b083      	sub	sp, #12
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80041a6:	bf00      	nop
 80041a8:	370c      	adds	r7, #12
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr

080041b2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80041b2:	b480      	push	{r7}
 80041b4:	b083      	sub	sp, #12
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80041ba:	bf00      	nop
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr

080041c6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80041c6:	b480      	push	{r7}
 80041c8:	b083      	sub	sp, #12
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80041ce:	bf00      	nop
 80041d0:	370c      	adds	r7, #12
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
	...

080041dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f003 0307 	and.w	r3, r3, #7
 80041ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041ec:	4b0c      	ldr	r3, [pc, #48]	; (8004220 <__NVIC_SetPriorityGrouping+0x44>)
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041f2:	68ba      	ldr	r2, [r7, #8]
 80041f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80041f8:	4013      	ands	r3, r2
 80041fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004204:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004208:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800420c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800420e:	4a04      	ldr	r2, [pc, #16]	; (8004220 <__NVIC_SetPriorityGrouping+0x44>)
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	60d3      	str	r3, [r2, #12]
}
 8004214:	bf00      	nop
 8004216:	3714      	adds	r7, #20
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr
 8004220:	e000ed00 	.word	0xe000ed00

08004224 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004224:	b480      	push	{r7}
 8004226:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004228:	4b04      	ldr	r3, [pc, #16]	; (800423c <__NVIC_GetPriorityGrouping+0x18>)
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	0a1b      	lsrs	r3, r3, #8
 800422e:	f003 0307 	and.w	r3, r3, #7
}
 8004232:	4618      	mov	r0, r3
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr
 800423c:	e000ed00 	.word	0xe000ed00

08004240 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	4603      	mov	r3, r0
 8004248:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800424a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800424e:	2b00      	cmp	r3, #0
 8004250:	db0b      	blt.n	800426a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004252:	79fb      	ldrb	r3, [r7, #7]
 8004254:	f003 021f 	and.w	r2, r3, #31
 8004258:	4907      	ldr	r1, [pc, #28]	; (8004278 <__NVIC_EnableIRQ+0x38>)
 800425a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800425e:	095b      	lsrs	r3, r3, #5
 8004260:	2001      	movs	r0, #1
 8004262:	fa00 f202 	lsl.w	r2, r0, r2
 8004266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800426a:	bf00      	nop
 800426c:	370c      	adds	r7, #12
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	e000e100 	.word	0xe000e100

0800427c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	4603      	mov	r3, r0
 8004284:	6039      	str	r1, [r7, #0]
 8004286:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800428c:	2b00      	cmp	r3, #0
 800428e:	db0a      	blt.n	80042a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	b2da      	uxtb	r2, r3
 8004294:	490c      	ldr	r1, [pc, #48]	; (80042c8 <__NVIC_SetPriority+0x4c>)
 8004296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800429a:	0112      	lsls	r2, r2, #4
 800429c:	b2d2      	uxtb	r2, r2
 800429e:	440b      	add	r3, r1
 80042a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042a4:	e00a      	b.n	80042bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	b2da      	uxtb	r2, r3
 80042aa:	4908      	ldr	r1, [pc, #32]	; (80042cc <__NVIC_SetPriority+0x50>)
 80042ac:	79fb      	ldrb	r3, [r7, #7]
 80042ae:	f003 030f 	and.w	r3, r3, #15
 80042b2:	3b04      	subs	r3, #4
 80042b4:	0112      	lsls	r2, r2, #4
 80042b6:	b2d2      	uxtb	r2, r2
 80042b8:	440b      	add	r3, r1
 80042ba:	761a      	strb	r2, [r3, #24]
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr
 80042c8:	e000e100 	.word	0xe000e100
 80042cc:	e000ed00 	.word	0xe000ed00

080042d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b089      	sub	sp, #36	; 0x24
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f003 0307 	and.w	r3, r3, #7
 80042e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	f1c3 0307 	rsb	r3, r3, #7
 80042ea:	2b04      	cmp	r3, #4
 80042ec:	bf28      	it	cs
 80042ee:	2304      	movcs	r3, #4
 80042f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	3304      	adds	r3, #4
 80042f6:	2b06      	cmp	r3, #6
 80042f8:	d902      	bls.n	8004300 <NVIC_EncodePriority+0x30>
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	3b03      	subs	r3, #3
 80042fe:	e000      	b.n	8004302 <NVIC_EncodePriority+0x32>
 8004300:	2300      	movs	r3, #0
 8004302:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004304:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	fa02 f303 	lsl.w	r3, r2, r3
 800430e:	43da      	mvns	r2, r3
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	401a      	ands	r2, r3
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004318:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	fa01 f303 	lsl.w	r3, r1, r3
 8004322:	43d9      	mvns	r1, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004328:	4313      	orrs	r3, r2
         );
}
 800432a:	4618      	mov	r0, r3
 800432c:	3724      	adds	r7, #36	; 0x24
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr

08004336 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b082      	sub	sp, #8
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f7ff ff4c 	bl	80041dc <__NVIC_SetPriorityGrouping>
}
 8004344:	bf00      	nop
 8004346:	3708      	adds	r7, #8
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800434c:	b580      	push	{r7, lr}
 800434e:	b086      	sub	sp, #24
 8004350:	af00      	add	r7, sp, #0
 8004352:	4603      	mov	r3, r0
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
 8004358:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800435a:	2300      	movs	r3, #0
 800435c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800435e:	f7ff ff61 	bl	8004224 <__NVIC_GetPriorityGrouping>
 8004362:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	68b9      	ldr	r1, [r7, #8]
 8004368:	6978      	ldr	r0, [r7, #20]
 800436a:	f7ff ffb1 	bl	80042d0 <NVIC_EncodePriority>
 800436e:	4602      	mov	r2, r0
 8004370:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004374:	4611      	mov	r1, r2
 8004376:	4618      	mov	r0, r3
 8004378:	f7ff ff80 	bl	800427c <__NVIC_SetPriority>
}
 800437c:	bf00      	nop
 800437e:	3718      	adds	r7, #24
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
 800438a:	4603      	mov	r3, r0
 800438c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800438e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004392:	4618      	mov	r0, r3
 8004394:	f7ff ff54 	bl	8004240 <__NVIC_EnableIRQ>
}
 8004398:	bf00      	nop
 800439a:	3708      	adds	r7, #8
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b086      	sub	sp, #24
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80043a8:	2300      	movs	r3, #0
 80043aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80043ac:	f7fe fee8 	bl	8003180 <HAL_GetTick>
 80043b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d101      	bne.n	80043bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e099      	b.n	80044f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2202      	movs	r2, #2
 80043c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f022 0201 	bic.w	r2, r2, #1
 80043da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043dc:	e00f      	b.n	80043fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80043de:	f7fe fecf 	bl	8003180 <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	2b05      	cmp	r3, #5
 80043ea:	d908      	bls.n	80043fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2220      	movs	r2, #32
 80043f0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2203      	movs	r2, #3
 80043f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e078      	b.n	80044f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0301 	and.w	r3, r3, #1
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1e8      	bne.n	80043de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004414:	697a      	ldr	r2, [r7, #20]
 8004416:	4b38      	ldr	r3, [pc, #224]	; (80044f8 <HAL_DMA_Init+0x158>)
 8004418:	4013      	ands	r3, r2
 800441a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685a      	ldr	r2, [r3, #4]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800442a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004436:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004442:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a1b      	ldr	r3, [r3, #32]
 8004448:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	4313      	orrs	r3, r2
 800444e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004454:	2b04      	cmp	r3, #4
 8004456:	d107      	bne.n	8004468 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004460:	4313      	orrs	r3, r2
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	4313      	orrs	r3, r2
 8004466:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	f023 0307 	bic.w	r3, r3, #7
 800447e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	4313      	orrs	r3, r2
 8004488:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448e:	2b04      	cmp	r3, #4
 8004490:	d117      	bne.n	80044c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004496:	697a      	ldr	r2, [r7, #20]
 8004498:	4313      	orrs	r3, r2
 800449a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d00e      	beq.n	80044c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 fb01 	bl	8004aac <DMA_CheckFifoParam>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d008      	beq.n	80044c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2240      	movs	r2, #64	; 0x40
 80044b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2201      	movs	r2, #1
 80044ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80044be:	2301      	movs	r3, #1
 80044c0:	e016      	b.n	80044f0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 fab8 	bl	8004a40 <DMA_CalcBaseAndBitshift>
 80044d0:	4603      	mov	r3, r0
 80044d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044d8:	223f      	movs	r2, #63	; 0x3f
 80044da:	409a      	lsls	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2201      	movs	r2, #1
 80044ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3718      	adds	r7, #24
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	f010803f 	.word	0xf010803f

080044fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b086      	sub	sp, #24
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	607a      	str	r2, [r7, #4]
 8004508:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800450a:	2300      	movs	r3, #0
 800450c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004512:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800451a:	2b01      	cmp	r3, #1
 800451c:	d101      	bne.n	8004522 <HAL_DMA_Start_IT+0x26>
 800451e:	2302      	movs	r3, #2
 8004520:	e040      	b.n	80045a4 <HAL_DMA_Start_IT+0xa8>
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2201      	movs	r2, #1
 8004526:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b01      	cmp	r3, #1
 8004534:	d12f      	bne.n	8004596 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2202      	movs	r2, #2
 800453a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	68b9      	ldr	r1, [r7, #8]
 800454a:	68f8      	ldr	r0, [r7, #12]
 800454c:	f000 fa4a 	bl	80049e4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004554:	223f      	movs	r2, #63	; 0x3f
 8004556:	409a      	lsls	r2, r3
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f042 0216 	orr.w	r2, r2, #22
 800456a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004570:	2b00      	cmp	r3, #0
 8004572:	d007      	beq.n	8004584 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f042 0208 	orr.w	r2, r2, #8
 8004582:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f042 0201 	orr.w	r2, r2, #1
 8004592:	601a      	str	r2, [r3, #0]
 8004594:	e005      	b.n	80045a2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800459e:	2302      	movs	r3, #2
 80045a0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80045a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3718      	adds	r7, #24
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045b8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80045ba:	f7fe fde1 	bl	8003180 <HAL_GetTick>
 80045be:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d008      	beq.n	80045de <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2280      	movs	r2, #128	; 0x80
 80045d0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e052      	b.n	8004684 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f022 0216 	bic.w	r2, r2, #22
 80045ec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	695a      	ldr	r2, [r3, #20]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045fc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004602:	2b00      	cmp	r3, #0
 8004604:	d103      	bne.n	800460e <HAL_DMA_Abort+0x62>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800460a:	2b00      	cmp	r3, #0
 800460c:	d007      	beq.n	800461e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f022 0208 	bic.w	r2, r2, #8
 800461c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f022 0201 	bic.w	r2, r2, #1
 800462c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800462e:	e013      	b.n	8004658 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004630:	f7fe fda6 	bl	8003180 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	2b05      	cmp	r3, #5
 800463c:	d90c      	bls.n	8004658 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2220      	movs	r2, #32
 8004642:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2203      	movs	r2, #3
 8004650:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e015      	b.n	8004684 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1e4      	bne.n	8004630 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800466a:	223f      	movs	r2, #63	; 0x3f
 800466c:	409a      	lsls	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8004682:	2300      	movs	r3, #0
}
 8004684:	4618      	mov	r0, r3
 8004686:	3710      	adds	r7, #16
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800469a:	b2db      	uxtb	r3, r3
 800469c:	2b02      	cmp	r3, #2
 800469e:	d004      	beq.n	80046aa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2280      	movs	r2, #128	; 0x80
 80046a4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e00c      	b.n	80046c4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2205      	movs	r2, #5
 80046ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f022 0201 	bic.w	r2, r2, #1
 80046c0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b086      	sub	sp, #24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80046d8:	2300      	movs	r3, #0
 80046da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80046dc:	4b92      	ldr	r3, [pc, #584]	; (8004928 <HAL_DMA_IRQHandler+0x258>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a92      	ldr	r2, [pc, #584]	; (800492c <HAL_DMA_IRQHandler+0x25c>)
 80046e2:	fba2 2303 	umull	r2, r3, r2, r3
 80046e6:	0a9b      	lsrs	r3, r3, #10
 80046e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046fa:	2208      	movs	r2, #8
 80046fc:	409a      	lsls	r2, r3
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	4013      	ands	r3, r2
 8004702:	2b00      	cmp	r3, #0
 8004704:	d01a      	beq.n	800473c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0304 	and.w	r3, r3, #4
 8004710:	2b00      	cmp	r3, #0
 8004712:	d013      	beq.n	800473c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f022 0204 	bic.w	r2, r2, #4
 8004722:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004728:	2208      	movs	r2, #8
 800472a:	409a      	lsls	r2, r3
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004734:	f043 0201 	orr.w	r2, r3, #1
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004740:	2201      	movs	r2, #1
 8004742:	409a      	lsls	r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	4013      	ands	r3, r2
 8004748:	2b00      	cmp	r3, #0
 800474a:	d012      	beq.n	8004772 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00b      	beq.n	8004772 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800475e:	2201      	movs	r2, #1
 8004760:	409a      	lsls	r2, r3
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800476a:	f043 0202 	orr.w	r2, r3, #2
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004776:	2204      	movs	r2, #4
 8004778:	409a      	lsls	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	4013      	ands	r3, r2
 800477e:	2b00      	cmp	r3, #0
 8004780:	d012      	beq.n	80047a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0302 	and.w	r3, r3, #2
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00b      	beq.n	80047a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004794:	2204      	movs	r2, #4
 8004796:	409a      	lsls	r2, r3
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a0:	f043 0204 	orr.w	r2, r3, #4
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ac:	2210      	movs	r2, #16
 80047ae:	409a      	lsls	r2, r3
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	4013      	ands	r3, r2
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d043      	beq.n	8004840 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0308 	and.w	r3, r3, #8
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d03c      	beq.n	8004840 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ca:	2210      	movs	r2, #16
 80047cc:	409a      	lsls	r2, r3
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d018      	beq.n	8004812 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d108      	bne.n	8004800 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d024      	beq.n	8004840 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	4798      	blx	r3
 80047fe:	e01f      	b.n	8004840 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004804:	2b00      	cmp	r3, #0
 8004806:	d01b      	beq.n	8004840 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	4798      	blx	r3
 8004810:	e016      	b.n	8004840 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800481c:	2b00      	cmp	r3, #0
 800481e:	d107      	bne.n	8004830 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f022 0208 	bic.w	r2, r2, #8
 800482e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004834:	2b00      	cmp	r3, #0
 8004836:	d003      	beq.n	8004840 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004844:	2220      	movs	r2, #32
 8004846:	409a      	lsls	r2, r3
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	4013      	ands	r3, r2
 800484c:	2b00      	cmp	r3, #0
 800484e:	f000 808e 	beq.w	800496e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0310 	and.w	r3, r3, #16
 800485c:	2b00      	cmp	r3, #0
 800485e:	f000 8086 	beq.w	800496e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004866:	2220      	movs	r2, #32
 8004868:	409a      	lsls	r2, r3
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b05      	cmp	r3, #5
 8004878:	d136      	bne.n	80048e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f022 0216 	bic.w	r2, r2, #22
 8004888:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	695a      	ldr	r2, [r3, #20]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004898:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d103      	bne.n	80048aa <HAL_DMA_IRQHandler+0x1da>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d007      	beq.n	80048ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f022 0208 	bic.w	r2, r2, #8
 80048b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048be:	223f      	movs	r2, #63	; 0x3f
 80048c0:	409a      	lsls	r2, r3
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2201      	movs	r2, #1
 80048d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d07d      	beq.n	80049da <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	4798      	blx	r3
        }
        return;
 80048e6:	e078      	b.n	80049da <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d01c      	beq.n	8004930 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d108      	bne.n	8004916 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004908:	2b00      	cmp	r3, #0
 800490a:	d030      	beq.n	800496e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	4798      	blx	r3
 8004914:	e02b      	b.n	800496e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800491a:	2b00      	cmp	r3, #0
 800491c:	d027      	beq.n	800496e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	4798      	blx	r3
 8004926:	e022      	b.n	800496e <HAL_DMA_IRQHandler+0x29e>
 8004928:	20000000 	.word	0x20000000
 800492c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800493a:	2b00      	cmp	r3, #0
 800493c:	d10f      	bne.n	800495e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f022 0210 	bic.w	r2, r2, #16
 800494c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2201      	movs	r2, #1
 800495a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004962:	2b00      	cmp	r3, #0
 8004964:	d003      	beq.n	800496e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004972:	2b00      	cmp	r3, #0
 8004974:	d032      	beq.n	80049dc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800497a:	f003 0301 	and.w	r3, r3, #1
 800497e:	2b00      	cmp	r3, #0
 8004980:	d022      	beq.n	80049c8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2205      	movs	r2, #5
 8004986:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f022 0201 	bic.w	r2, r2, #1
 8004998:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	3301      	adds	r3, #1
 800499e:	60bb      	str	r3, [r7, #8]
 80049a0:	697a      	ldr	r2, [r7, #20]
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d307      	bcc.n	80049b6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0301 	and.w	r3, r3, #1
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d1f2      	bne.n	800499a <HAL_DMA_IRQHandler+0x2ca>
 80049b4:	e000      	b.n	80049b8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80049b6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d005      	beq.n	80049dc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	4798      	blx	r3
 80049d8:	e000      	b.n	80049dc <HAL_DMA_IRQHandler+0x30c>
        return;
 80049da:	bf00      	nop
    }
  }
}
 80049dc:	3718      	adds	r7, #24
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop

080049e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	607a      	str	r2, [r7, #4]
 80049f0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004a00:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	683a      	ldr	r2, [r7, #0]
 8004a08:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	2b40      	cmp	r3, #64	; 0x40
 8004a10:	d108      	bne.n	8004a24 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68ba      	ldr	r2, [r7, #8]
 8004a20:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004a22:	e007      	b.n	8004a34 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68ba      	ldr	r2, [r7, #8]
 8004a2a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	60da      	str	r2, [r3, #12]
}
 8004a34:	bf00      	nop
 8004a36:	3714      	adds	r7, #20
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b085      	sub	sp, #20
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	3b10      	subs	r3, #16
 8004a50:	4a14      	ldr	r2, [pc, #80]	; (8004aa4 <DMA_CalcBaseAndBitshift+0x64>)
 8004a52:	fba2 2303 	umull	r2, r3, r2, r3
 8004a56:	091b      	lsrs	r3, r3, #4
 8004a58:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004a5a:	4a13      	ldr	r2, [pc, #76]	; (8004aa8 <DMA_CalcBaseAndBitshift+0x68>)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	4413      	add	r3, r2
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	461a      	mov	r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2b03      	cmp	r3, #3
 8004a6c:	d909      	bls.n	8004a82 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004a76:	f023 0303 	bic.w	r3, r3, #3
 8004a7a:	1d1a      	adds	r2, r3, #4
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	659a      	str	r2, [r3, #88]	; 0x58
 8004a80:	e007      	b.n	8004a92 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004a8a:	f023 0303 	bic.w	r3, r3, #3
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3714      	adds	r7, #20
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	aaaaaaab 	.word	0xaaaaaaab
 8004aa8:	0800af48 	.word	0x0800af48

08004aac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b085      	sub	sp, #20
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004abc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d11f      	bne.n	8004b06 <DMA_CheckFifoParam+0x5a>
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	2b03      	cmp	r3, #3
 8004aca:	d856      	bhi.n	8004b7a <DMA_CheckFifoParam+0xce>
 8004acc:	a201      	add	r2, pc, #4	; (adr r2, 8004ad4 <DMA_CheckFifoParam+0x28>)
 8004ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad2:	bf00      	nop
 8004ad4:	08004ae5 	.word	0x08004ae5
 8004ad8:	08004af7 	.word	0x08004af7
 8004adc:	08004ae5 	.word	0x08004ae5
 8004ae0:	08004b7b 	.word	0x08004b7b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d046      	beq.n	8004b7e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004af4:	e043      	b.n	8004b7e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004afe:	d140      	bne.n	8004b82 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b04:	e03d      	b.n	8004b82 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b0e:	d121      	bne.n	8004b54 <DMA_CheckFifoParam+0xa8>
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	2b03      	cmp	r3, #3
 8004b14:	d837      	bhi.n	8004b86 <DMA_CheckFifoParam+0xda>
 8004b16:	a201      	add	r2, pc, #4	; (adr r2, 8004b1c <DMA_CheckFifoParam+0x70>)
 8004b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b1c:	08004b2d 	.word	0x08004b2d
 8004b20:	08004b33 	.word	0x08004b33
 8004b24:	08004b2d 	.word	0x08004b2d
 8004b28:	08004b45 	.word	0x08004b45
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b30:	e030      	b.n	8004b94 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d025      	beq.n	8004b8a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b42:	e022      	b.n	8004b8a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b48:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b4c:	d11f      	bne.n	8004b8e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004b52:	e01c      	b.n	8004b8e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d903      	bls.n	8004b62 <DMA_CheckFifoParam+0xb6>
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	2b03      	cmp	r3, #3
 8004b5e:	d003      	beq.n	8004b68 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004b60:	e018      	b.n	8004b94 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	73fb      	strb	r3, [r7, #15]
      break;
 8004b66:	e015      	b.n	8004b94 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d00e      	beq.n	8004b92 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	73fb      	strb	r3, [r7, #15]
      break;
 8004b78:	e00b      	b.n	8004b92 <DMA_CheckFifoParam+0xe6>
      break;
 8004b7a:	bf00      	nop
 8004b7c:	e00a      	b.n	8004b94 <DMA_CheckFifoParam+0xe8>
      break;
 8004b7e:	bf00      	nop
 8004b80:	e008      	b.n	8004b94 <DMA_CheckFifoParam+0xe8>
      break;
 8004b82:	bf00      	nop
 8004b84:	e006      	b.n	8004b94 <DMA_CheckFifoParam+0xe8>
      break;
 8004b86:	bf00      	nop
 8004b88:	e004      	b.n	8004b94 <DMA_CheckFifoParam+0xe8>
      break;
 8004b8a:	bf00      	nop
 8004b8c:	e002      	b.n	8004b94 <DMA_CheckFifoParam+0xe8>
      break;   
 8004b8e:	bf00      	nop
 8004b90:	e000      	b.n	8004b94 <DMA_CheckFifoParam+0xe8>
      break;
 8004b92:	bf00      	nop
    }
  } 
  
  return status; 
 8004b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3714      	adds	r7, #20
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr
 8004ba2:	bf00      	nop

08004ba4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b089      	sub	sp, #36	; 0x24
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004bba:	2300      	movs	r3, #0
 8004bbc:	61fb      	str	r3, [r7, #28]
 8004bbe:	e165      	b.n	8004e8c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	697a      	ldr	r2, [r7, #20]
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004bd4:	693a      	ldr	r2, [r7, #16]
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	f040 8154 	bne.w	8004e86 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d00b      	beq.n	8004bfe <HAL_GPIO_Init+0x5a>
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d007      	beq.n	8004bfe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004bf2:	2b11      	cmp	r3, #17
 8004bf4:	d003      	beq.n	8004bfe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	2b12      	cmp	r3, #18
 8004bfc:	d130      	bne.n	8004c60 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	005b      	lsls	r3, r3, #1
 8004c08:	2203      	movs	r2, #3
 8004c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0e:	43db      	mvns	r3, r3
 8004c10:	69ba      	ldr	r2, [r7, #24]
 8004c12:	4013      	ands	r3, r2
 8004c14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	68da      	ldr	r2, [r3, #12]
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	005b      	lsls	r3, r3, #1
 8004c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c22:	69ba      	ldr	r2, [r7, #24]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	69ba      	ldr	r2, [r7, #24]
 8004c2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c34:	2201      	movs	r2, #1
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3c:	43db      	mvns	r3, r3
 8004c3e:	69ba      	ldr	r2, [r7, #24]
 8004c40:	4013      	ands	r3, r2
 8004c42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	091b      	lsrs	r3, r3, #4
 8004c4a:	f003 0201 	and.w	r2, r3, #1
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	fa02 f303 	lsl.w	r3, r2, r3
 8004c54:	69ba      	ldr	r2, [r7, #24]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	69ba      	ldr	r2, [r7, #24]
 8004c5e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	005b      	lsls	r3, r3, #1
 8004c6a:	2203      	movs	r2, #3
 8004c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c70:	43db      	mvns	r3, r3
 8004c72:	69ba      	ldr	r2, [r7, #24]
 8004c74:	4013      	ands	r3, r2
 8004c76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	689a      	ldr	r2, [r3, #8]
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	005b      	lsls	r3, r3, #1
 8004c80:	fa02 f303 	lsl.w	r3, r2, r3
 8004c84:	69ba      	ldr	r2, [r7, #24]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	69ba      	ldr	r2, [r7, #24]
 8004c8e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d003      	beq.n	8004ca0 <HAL_GPIO_Init+0xfc>
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	2b12      	cmp	r3, #18
 8004c9e:	d123      	bne.n	8004ce8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	08da      	lsrs	r2, r3, #3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	3208      	adds	r2, #8
 8004ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	f003 0307 	and.w	r3, r3, #7
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	220f      	movs	r2, #15
 8004cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cbc:	43db      	mvns	r3, r3
 8004cbe:	69ba      	ldr	r2, [r7, #24]
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	691a      	ldr	r2, [r3, #16]
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	f003 0307 	and.w	r3, r3, #7
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd4:	69ba      	ldr	r2, [r7, #24]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	08da      	lsrs	r2, r3, #3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	3208      	adds	r2, #8
 8004ce2:	69b9      	ldr	r1, [r7, #24]
 8004ce4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	005b      	lsls	r3, r3, #1
 8004cf2:	2203      	movs	r2, #3
 8004cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf8:	43db      	mvns	r3, r3
 8004cfa:	69ba      	ldr	r2, [r7, #24]
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f003 0203 	and.w	r2, r3, #3
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	005b      	lsls	r3, r3, #1
 8004d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d10:	69ba      	ldr	r2, [r7, #24]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	69ba      	ldr	r2, [r7, #24]
 8004d1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	f000 80ae 	beq.w	8004e86 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	60fb      	str	r3, [r7, #12]
 8004d2e:	4b5d      	ldr	r3, [pc, #372]	; (8004ea4 <HAL_GPIO_Init+0x300>)
 8004d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d32:	4a5c      	ldr	r2, [pc, #368]	; (8004ea4 <HAL_GPIO_Init+0x300>)
 8004d34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d38:	6453      	str	r3, [r2, #68]	; 0x44
 8004d3a:	4b5a      	ldr	r3, [pc, #360]	; (8004ea4 <HAL_GPIO_Init+0x300>)
 8004d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d42:	60fb      	str	r3, [r7, #12]
 8004d44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d46:	4a58      	ldr	r2, [pc, #352]	; (8004ea8 <HAL_GPIO_Init+0x304>)
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	089b      	lsrs	r3, r3, #2
 8004d4c:	3302      	adds	r3, #2
 8004d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	f003 0303 	and.w	r3, r3, #3
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	220f      	movs	r2, #15
 8004d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d62:	43db      	mvns	r3, r3
 8004d64:	69ba      	ldr	r2, [r7, #24]
 8004d66:	4013      	ands	r3, r2
 8004d68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a4f      	ldr	r2, [pc, #316]	; (8004eac <HAL_GPIO_Init+0x308>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d025      	beq.n	8004dbe <HAL_GPIO_Init+0x21a>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a4e      	ldr	r2, [pc, #312]	; (8004eb0 <HAL_GPIO_Init+0x30c>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d01f      	beq.n	8004dba <HAL_GPIO_Init+0x216>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a4d      	ldr	r2, [pc, #308]	; (8004eb4 <HAL_GPIO_Init+0x310>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d019      	beq.n	8004db6 <HAL_GPIO_Init+0x212>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a4c      	ldr	r2, [pc, #304]	; (8004eb8 <HAL_GPIO_Init+0x314>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d013      	beq.n	8004db2 <HAL_GPIO_Init+0x20e>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a4b      	ldr	r2, [pc, #300]	; (8004ebc <HAL_GPIO_Init+0x318>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d00d      	beq.n	8004dae <HAL_GPIO_Init+0x20a>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a4a      	ldr	r2, [pc, #296]	; (8004ec0 <HAL_GPIO_Init+0x31c>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d007      	beq.n	8004daa <HAL_GPIO_Init+0x206>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a49      	ldr	r2, [pc, #292]	; (8004ec4 <HAL_GPIO_Init+0x320>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d101      	bne.n	8004da6 <HAL_GPIO_Init+0x202>
 8004da2:	2306      	movs	r3, #6
 8004da4:	e00c      	b.n	8004dc0 <HAL_GPIO_Init+0x21c>
 8004da6:	2307      	movs	r3, #7
 8004da8:	e00a      	b.n	8004dc0 <HAL_GPIO_Init+0x21c>
 8004daa:	2305      	movs	r3, #5
 8004dac:	e008      	b.n	8004dc0 <HAL_GPIO_Init+0x21c>
 8004dae:	2304      	movs	r3, #4
 8004db0:	e006      	b.n	8004dc0 <HAL_GPIO_Init+0x21c>
 8004db2:	2303      	movs	r3, #3
 8004db4:	e004      	b.n	8004dc0 <HAL_GPIO_Init+0x21c>
 8004db6:	2302      	movs	r3, #2
 8004db8:	e002      	b.n	8004dc0 <HAL_GPIO_Init+0x21c>
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e000      	b.n	8004dc0 <HAL_GPIO_Init+0x21c>
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	69fa      	ldr	r2, [r7, #28]
 8004dc2:	f002 0203 	and.w	r2, r2, #3
 8004dc6:	0092      	lsls	r2, r2, #2
 8004dc8:	4093      	lsls	r3, r2
 8004dca:	69ba      	ldr	r2, [r7, #24]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004dd0:	4935      	ldr	r1, [pc, #212]	; (8004ea8 <HAL_GPIO_Init+0x304>)
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	089b      	lsrs	r3, r3, #2
 8004dd6:	3302      	adds	r3, #2
 8004dd8:	69ba      	ldr	r2, [r7, #24]
 8004dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004dde:	4b3a      	ldr	r3, [pc, #232]	; (8004ec8 <HAL_GPIO_Init+0x324>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	43db      	mvns	r3, r3
 8004de8:	69ba      	ldr	r2, [r7, #24]
 8004dea:	4013      	ands	r3, r2
 8004dec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d003      	beq.n	8004e02 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004dfa:	69ba      	ldr	r2, [r7, #24]
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004e02:	4a31      	ldr	r2, [pc, #196]	; (8004ec8 <HAL_GPIO_Init+0x324>)
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004e08:	4b2f      	ldr	r3, [pc, #188]	; (8004ec8 <HAL_GPIO_Init+0x324>)
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	43db      	mvns	r3, r3
 8004e12:	69ba      	ldr	r2, [r7, #24]
 8004e14:	4013      	ands	r3, r2
 8004e16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d003      	beq.n	8004e2c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004e24:	69ba      	ldr	r2, [r7, #24]
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004e2c:	4a26      	ldr	r2, [pc, #152]	; (8004ec8 <HAL_GPIO_Init+0x324>)
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e32:	4b25      	ldr	r3, [pc, #148]	; (8004ec8 <HAL_GPIO_Init+0x324>)
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	43db      	mvns	r3, r3
 8004e3c:	69ba      	ldr	r2, [r7, #24]
 8004e3e:	4013      	ands	r3, r2
 8004e40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d003      	beq.n	8004e56 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004e4e:	69ba      	ldr	r2, [r7, #24]
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004e56:	4a1c      	ldr	r2, [pc, #112]	; (8004ec8 <HAL_GPIO_Init+0x324>)
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004e5c:	4b1a      	ldr	r3, [pc, #104]	; (8004ec8 <HAL_GPIO_Init+0x324>)
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	43db      	mvns	r3, r3
 8004e66:	69ba      	ldr	r2, [r7, #24]
 8004e68:	4013      	ands	r3, r2
 8004e6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d003      	beq.n	8004e80 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004e78:	69ba      	ldr	r2, [r7, #24]
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004e80:	4a11      	ldr	r2, [pc, #68]	; (8004ec8 <HAL_GPIO_Init+0x324>)
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	3301      	adds	r3, #1
 8004e8a:	61fb      	str	r3, [r7, #28]
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	2b0f      	cmp	r3, #15
 8004e90:	f67f ae96 	bls.w	8004bc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004e94:	bf00      	nop
 8004e96:	bf00      	nop
 8004e98:	3724      	adds	r7, #36	; 0x24
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	40023800 	.word	0x40023800
 8004ea8:	40013800 	.word	0x40013800
 8004eac:	40020000 	.word	0x40020000
 8004eb0:	40020400 	.word	0x40020400
 8004eb4:	40020800 	.word	0x40020800
 8004eb8:	40020c00 	.word	0x40020c00
 8004ebc:	40021000 	.word	0x40021000
 8004ec0:	40021400 	.word	0x40021400
 8004ec4:	40021800 	.word	0x40021800
 8004ec8:	40013c00 	.word	0x40013c00

08004ecc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	807b      	strh	r3, [r7, #2]
 8004ed8:	4613      	mov	r3, r2
 8004eda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004edc:	787b      	ldrb	r3, [r7, #1]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d003      	beq.n	8004eea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ee2:	887a      	ldrh	r2, [r7, #2]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004ee8:	e003      	b.n	8004ef2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004eea:	887b      	ldrh	r3, [r7, #2]
 8004eec:	041a      	lsls	r2, r3, #16
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	619a      	str	r2, [r3, #24]
}
 8004ef2:	bf00      	nop
 8004ef4:	370c      	adds	r7, #12
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
	...

08004f00 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b086      	sub	sp, #24
 8004f04:	af02      	add	r7, sp, #8
 8004f06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004f08:	f7fe f93a 	bl	8003180 <HAL_GetTick>
 8004f0c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d101      	bne.n	8004f18 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e069      	b.n	8004fec <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d10b      	bne.n	8004f3c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f7fd fa6d 	bl	800240c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004f32:	f241 3188 	movw	r1, #5000	; 0x1388
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 fd46 	bl	80059c8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	021a      	lsls	r2, r3, #8
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	430a      	orrs	r2, r1
 8004f54:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f5a:	9300      	str	r3, [sp, #0]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	2120      	movs	r1, #32
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 fd71 	bl	8005a4a <QSPI_WaitFlagStateUntilTimeout>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004f6c:	7afb      	ldrb	r3, [r7, #11]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d137      	bne.n	8004fe2 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004f7c:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	6852      	ldr	r2, [r2, #4]
 8004f84:	0611      	lsls	r1, r2, #24
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	68d2      	ldr	r2, [r2, #12]
 8004f8a:	4311      	orrs	r1, r2
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	69d2      	ldr	r2, [r2, #28]
 8004f90:	4311      	orrs	r1, r2
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	6a12      	ldr	r2, [r2, #32]
 8004f96:	4311      	orrs	r1, r2
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	6812      	ldr	r2, [r2, #0]
 8004f9c:	430b      	orrs	r3, r1
 8004f9e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	685a      	ldr	r2, [r3, #4]
 8004fa6:	4b13      	ldr	r3, [pc, #76]	; (8004ff4 <HAL_QSPI_Init+0xf4>)
 8004fa8:	4013      	ands	r3, r2
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	6912      	ldr	r2, [r2, #16]
 8004fae:	0411      	lsls	r1, r2, #16
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	6952      	ldr	r2, [r2, #20]
 8004fb4:	4311      	orrs	r1, r2
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	6992      	ldr	r2, [r2, #24]
 8004fba:	4311      	orrs	r1, r2
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	6812      	ldr	r2, [r2, #0]
 8004fc0:	430b      	orrs	r3, r1
 8004fc2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f042 0201 	orr.w	r2, r2, #1
 8004fd2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8004fea:	7afb      	ldrb	r3, [r7, #11]
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3710      	adds	r7, #16
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	ffe0f8fe 	.word	0xffe0f8fe

08004ff8 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi : QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b086      	sub	sp, #24
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	f003 0304 	and.w	r3, r3, #4
 8005016:	2b00      	cmp	r3, #0
 8005018:	d064      	beq.n	80050e4 <HAL_QSPI_IRQHandler+0xec>
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d05f      	beq.n	80050e4 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	3320      	adds	r3, #32
 800502a:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005032:	b2db      	uxtb	r3, r3
 8005034:	2b12      	cmp	r3, #18
 8005036:	d125      	bne.n	8005084 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8005038:	e01c      	b.n	8005074 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00f      	beq.n	8005062 <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005046:	781a      	ldrb	r2, [r3, #0]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005050:	1c5a      	adds	r2, r3, #1
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505a:	1e5a      	subs	r2, r3, #1
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	62da      	str	r2, [r3, #44]	; 0x2c
 8005060:	e008      	b.n	8005074 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005070:	601a      	str	r2, [r3, #0]
          break;
 8005072:	e033      	b.n	80050dc <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	f003 0304 	and.w	r3, r3, #4
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1db      	bne.n	800503a <HAL_QSPI_IRQHandler+0x42>
 8005082:	e02b      	b.n	80050dc <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800508a:	b2db      	uxtb	r3, r3
 800508c:	2b22      	cmp	r3, #34	; 0x22
 800508e:	d125      	bne.n	80050dc <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8005090:	e01d      	b.n	80050ce <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005096:	2b00      	cmp	r3, #0
 8005098:	d010      	beq.n	80050bc <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	7812      	ldrb	r2, [r2, #0]
 80050a2:	b2d2      	uxtb	r2, r2
 80050a4:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050aa:	1c5a      	adds	r2, r3, #1
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b4:	1e5a      	subs	r2, r3, #1
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	639a      	str	r2, [r3, #56]	; 0x38
 80050ba:	e008      	b.n	80050ce <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80050ca:	601a      	str	r2, [r3, #0]
          break;
 80050cc:	e006      	b.n	80050dc <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	f003 0304 	and.w	r3, r3, #4
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d1da      	bne.n	8005092 <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f000 fb8b 	bl	80057f8 <HAL_QSPI_FifoThresholdCallback>
 80050e2:	e142      	b.n	800536a <HAL_QSPI_IRQHandler+0x372>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	f003 0302 	and.w	r3, r3, #2
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	f000 80b6 	beq.w	800525c <HAL_QSPI_IRQHandler+0x264>
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	f000 80b0 	beq.w	800525c <HAL_QSPI_IRQHandler+0x264>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2202      	movs	r2, #2
 8005102:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8005112:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800511a:	b2db      	uxtb	r3, r3
 800511c:	2b12      	cmp	r3, #18
 800511e:	d123      	bne.n	8005168 <HAL_QSPI_IRQHandler+0x170>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0304 	and.w	r3, r3, #4
 800512a:	2b00      	cmp	r3, #0
 800512c:	d011      	beq.n	8005152 <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f022 0204 	bic.w	r2, r2, #4
 800513c:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f022 0201 	bic.w	r2, r2, #1
 8005150:	601a      	str	r2, [r3, #0]
      }

      /* Clear Busy bit */
      HAL_QSPI_Abort_IT(hqspi);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 fbdc 	bl	8005910 <HAL_QSPI_Abort_IT>

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 fb3f 	bl	80057e4 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8005166:	e0fd      	b.n	8005364 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800516e:	b2db      	uxtb	r3, r3
 8005170:	2b22      	cmp	r3, #34	; 0x22
 8005172:	d146      	bne.n	8005202 <HAL_QSPI_IRQHandler+0x20a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0304 	and.w	r3, r3, #4
 800517e:	2b00      	cmp	r3, #0
 8005180:	d012      	beq.n	80051a8 <HAL_QSPI_IRQHandler+0x1b0>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f022 0204 	bic.w	r2, r2, #4
 8005190:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f022 0201 	bic.w	r2, r2, #1
 80051a4:	601a      	str	r2, [r3, #0]
 80051a6:	e021      	b.n	80051ec <HAL_QSPI_IRQHandler+0x1f4>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	3320      	adds	r3, #32
 80051ae:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 80051b0:	e013      	b.n	80051da <HAL_QSPI_IRQHandler+0x1e2>
        {
          if (hqspi->RxXferCount > 0U)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d017      	beq.n	80051ea <HAL_QSPI_IRQHandler+0x1f2>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	7812      	ldrb	r2, [r2, #0]
 80051c2:	b2d2      	uxtb	r2, r2
 80051c4:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ca:	1c5a      	adds	r2, r3, #1
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d4:	1e5a      	subs	r2, r3, #1
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d1e4      	bne.n	80051b2 <HAL_QSPI_IRQHandler+0x1ba>
 80051e8:	e000      	b.n	80051ec <HAL_QSPI_IRQHandler+0x1f4>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 80051ea:	bf00      	nop
          }
        }
      }

      /* Workaround - Extra data written in the FIFO at the end of a read transfer */
      HAL_QSPI_Abort_IT(hqspi);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f000 fb8f 	bl	8005910 <HAL_QSPI_Abort_IT>

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 fae8 	bl	80057d0 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8005200:	e0b0      	b.n	8005364 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005208:	b2db      	uxtb	r3, r3
 800520a:	2b02      	cmp	r3, #2
 800520c:	d107      	bne.n	800521e <HAL_QSPI_IRQHandler+0x226>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2201      	movs	r2, #1
 8005212:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 fad0 	bl	80057bc <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800521c:	e0a2      	b.n	8005364 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005224:	b2db      	uxtb	r3, r3
 8005226:	2b08      	cmp	r3, #8
 8005228:	f040 809c 	bne.w	8005364 <HAL_QSPI_IRQHandler+0x36c>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	695a      	ldr	r2, [r3, #20]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800523a:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005248:	2b00      	cmp	r3, #0
 800524a:	d103      	bne.n	8005254 <HAL_QSPI_IRQHandler+0x25c>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 faab 	bl	80057a8 <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8005252:	e087      	b.n	8005364 <HAL_QSPI_IRQHandler+0x36c>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f000 fa9d 	bl	8005794 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800525a:	e083      	b.n	8005364 <HAL_QSPI_IRQHandler+0x36c>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	f003 0308 	and.w	r3, r3, #8
 8005262:	2b00      	cmp	r3, #0
 8005264:	d01f      	beq.n	80052a6 <HAL_QSPI_IRQHandler+0x2ae>
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d01a      	beq.n	80052a6 <HAL_QSPI_IRQHandler+0x2ae>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2208      	movs	r2, #8
 8005276:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00b      	beq.n	800529e <HAL_QSPI_IRQHandler+0x2a6>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8005294:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2201      	movs	r2, #1
 800529a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 fab4 	bl	800580c <HAL_QSPI_StatusMatchCallback>
 80052a4:	e061      	b.n	800536a <HAL_QSPI_IRQHandler+0x372>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	f003 0301 	and.w	r3, r3, #1
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d047      	beq.n	8005340 <HAL_QSPI_IRQHandler+0x348>
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d042      	beq.n	8005340 <HAL_QSPI_IRQHandler+0x348>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2201      	movs	r2, #1
 80052c0:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80052d0:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052d6:	f043 0202 	orr.w	r2, r3, #2
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0304 	and.w	r3, r3, #4
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d021      	beq.n	8005330 <HAL_QSPI_IRQHandler+0x338>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f022 0204 	bic.w	r2, r2, #4
 80052fa:	601a      	str	r2, [r3, #0]

      /* Disable the DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005300:	4a1c      	ldr	r2, [pc, #112]	; (8005374 <HAL_QSPI_IRQHandler+0x37c>)
 8005302:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005308:	4618      	mov	r0, r3
 800530a:	f7ff f9bf 	bl	800468c <HAL_DMA_Abort_IT>
 800530e:	4603      	mov	r3, r0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d029      	beq.n	8005368 <HAL_QSPI_IRQHandler+0x370>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005318:	f043 0204 	orr.w	r2, r3, #4
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 fa33 	bl	8005794 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800532e:	e01b      	b.n	8005368 <HAL_QSPI_IRQHandler+0x370>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 fa2b 	bl	8005794 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800533e:	e013      	b.n	8005368 <HAL_QSPI_IRQHandler+0x370>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	f003 0310 	and.w	r3, r3, #16
 8005346:	2b00      	cmp	r3, #0
 8005348:	d00f      	beq.n	800536a <HAL_QSPI_IRQHandler+0x372>
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005350:	2b00      	cmp	r3, #0
 8005352:	d00a      	beq.n	800536a <HAL_QSPI_IRQHandler+0x372>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2210      	movs	r2, #16
 800535a:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 fa5f 	bl	8005820 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 8005362:	e002      	b.n	800536a <HAL_QSPI_IRQHandler+0x372>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8005364:	bf00      	nop
 8005366:	e000      	b.n	800536a <HAL_QSPI_IRQHandler+0x372>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005368:	bf00      	nop
}
 800536a:	bf00      	nop
 800536c:	3718      	adds	r7, #24
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	080059e5 	.word	0x080059e5

08005378 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b088      	sub	sp, #32
 800537c:	af02      	add	r7, sp, #8
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	60b9      	str	r1, [r7, #8]
 8005382:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005384:	f7fd fefc 	bl	8003180 <HAL_GetTick>
 8005388:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2b01      	cmp	r3, #1
 8005394:	d101      	bne.n	800539a <HAL_QSPI_Command+0x22>
 8005396:	2302      	movs	r3, #2
 8005398:	e048      	b.n	800542c <HAL_QSPI_Command+0xb4>
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2201      	movs	r2, #1
 800539e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d137      	bne.n	800541e <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2200      	movs	r2, #0
 80053b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2202      	movs	r2, #2
 80053b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	9300      	str	r3, [sp, #0]
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	2200      	movs	r2, #0
 80053c4:	2120      	movs	r1, #32
 80053c6:	68f8      	ldr	r0, [r7, #12]
 80053c8:	f000 fb3f 	bl	8005a4a <QSPI_WaitFlagStateUntilTimeout>
 80053cc:	4603      	mov	r3, r0
 80053ce:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80053d0:	7dfb      	ldrb	r3, [r7, #23]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d125      	bne.n	8005422 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80053d6:	2200      	movs	r2, #0
 80053d8:	68b9      	ldr	r1, [r7, #8]
 80053da:	68f8      	ldr	r0, [r7, #12]
 80053dc:	f000 fb6c 	bl	8005ab8 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d115      	bne.n	8005414 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	9300      	str	r3, [sp, #0]
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	2201      	movs	r2, #1
 80053f0:	2102      	movs	r1, #2
 80053f2:	68f8      	ldr	r0, [r7, #12]
 80053f4:	f000 fb29 	bl	8005a4a <QSPI_WaitFlagStateUntilTimeout>
 80053f8:	4603      	mov	r3, r0
 80053fa:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 80053fc:	7dfb      	ldrb	r3, [r7, #23]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d10f      	bne.n	8005422 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	2202      	movs	r2, #2
 8005408:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2201      	movs	r2, #1
 800540e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005412:	e006      	b.n	8005422 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800541c:	e001      	b.n	8005422 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800541e:	2302      	movs	r3, #2
 8005420:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800542a:	7dfb      	ldrb	r3, [r7, #23]
}
 800542c:	4618      	mov	r0, r3
 800542e:	3718      	adds	r7, #24
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b08a      	sub	sp, #40	; 0x28
 8005438:	af02      	add	r7, sp, #8
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005440:	2300      	movs	r3, #0
 8005442:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8005444:	f7fd fe9c 	bl	8003180 <HAL_GetTick>
 8005448:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	3320      	adds	r3, #32
 8005450:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005458:	b2db      	uxtb	r3, r3
 800545a:	2b01      	cmp	r3, #1
 800545c:	d101      	bne.n	8005462 <HAL_QSPI_Transmit+0x2e>
 800545e:	2302      	movs	r3, #2
 8005460:	e07b      	b.n	800555a <HAL_QSPI_Transmit+0x126>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2201      	movs	r2, #1
 8005466:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005470:	b2db      	uxtb	r3, r3
 8005472:	2b01      	cmp	r3, #1
 8005474:	d16a      	bne.n	800554c <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d05b      	beq.n	800553a <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2212      	movs	r2, #18
 8005486:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	691b      	ldr	r3, [r3, #16]
 8005490:	1c5a      	adds	r2, r3, #1
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	691b      	ldr	r3, [r3, #16]
 800549c:	1c5a      	adds	r2, r3, #1
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	68ba      	ldr	r2, [r7, #8]
 80054a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	695a      	ldr	r2, [r3, #20]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80054b6:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 80054b8:	e01b      	b.n	80054f2 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	9300      	str	r3, [sp, #0]
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	2201      	movs	r2, #1
 80054c2:	2104      	movs	r1, #4
 80054c4:	68f8      	ldr	r0, [r7, #12]
 80054c6:	f000 fac0 	bl	8005a4a <QSPI_WaitFlagStateUntilTimeout>
 80054ca:	4603      	mov	r3, r0
 80054cc:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 80054ce:	7ffb      	ldrb	r3, [r7, #31]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d113      	bne.n	80054fc <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d8:	781a      	ldrb	r2, [r3, #0]
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e2:	1c5a      	adds	r2, r3, #1
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ec:	1e5a      	subs	r2, r3, #1
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d1df      	bne.n	80054ba <HAL_QSPI_Transmit+0x86>
 80054fa:	e000      	b.n	80054fe <HAL_QSPI_Transmit+0xca>
          break;
 80054fc:	bf00      	nop
      }

      if (status == HAL_OK)
 80054fe:	7ffb      	ldrb	r3, [r7, #31]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d115      	bne.n	8005530 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	9300      	str	r3, [sp, #0]
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	2201      	movs	r2, #1
 800550c:	2102      	movs	r1, #2
 800550e:	68f8      	ldr	r0, [r7, #12]
 8005510:	f000 fa9b 	bl	8005a4a <QSPI_WaitFlagStateUntilTimeout>
 8005514:	4603      	mov	r3, r0
 8005516:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8005518:	7ffb      	ldrb	r3, [r7, #31]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d108      	bne.n	8005530 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2202      	movs	r2, #2
 8005524:	60da      	str	r2, [r3, #12]

          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 8005526:	68f8      	ldr	r0, [r7, #12]
 8005528:	f000 f984 	bl	8005834 <HAL_QSPI_Abort>
 800552c:	4603      	mov	r3, r0
 800552e:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005538:	e00a      	b.n	8005550 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800553e:	f043 0208 	orr.w	r2, r3, #8
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	77fb      	strb	r3, [r7, #31]
 800554a:	e001      	b.n	8005550 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 800554c:	2302      	movs	r3, #2
 800554e:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2200      	movs	r2, #0
 8005554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8005558:	7ffb      	ldrb	r3, [r7, #31]
}
 800555a:	4618      	mov	r0, r3
 800555c:	3720      	adds	r7, #32
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}

08005562 <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8005562:	b580      	push	{r7, lr}
 8005564:	b08a      	sub	sp, #40	; 0x28
 8005566:	af02      	add	r7, sp, #8
 8005568:	60f8      	str	r0, [r7, #12]
 800556a:	60b9      	str	r1, [r7, #8]
 800556c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800556e:	2300      	movs	r3, #0
 8005570:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8005572:	f7fd fe05 	bl	8003180 <HAL_GetTick>
 8005576:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	699b      	ldr	r3, [r3, #24]
 800557e:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	3320      	adds	r3, #32
 8005586:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800558e:	b2db      	uxtb	r3, r3
 8005590:	2b01      	cmp	r3, #1
 8005592:	d101      	bne.n	8005598 <HAL_QSPI_Receive+0x36>
 8005594:	2302      	movs	r3, #2
 8005596:	e082      	b.n	800569e <HAL_QSPI_Receive+0x13c>
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d171      	bne.n	8005690 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2200      	movs	r2, #0
 80055b0:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d062      	beq.n	800567e <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2222      	movs	r2, #34	; 0x22
 80055bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	1c5a      	adds	r2, r3, #1
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	1c5a      	adds	r2, r3, #1
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	68ba      	ldr	r2, [r7, #8]
 80055dc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	695b      	ldr	r3, [r3, #20]
 80055e4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80055f0:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	697a      	ldr	r2, [r7, #20]
 80055f8:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 80055fa:	e01c      	b.n	8005636 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	9300      	str	r3, [sp, #0]
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	2201      	movs	r2, #1
 8005604:	2106      	movs	r1, #6
 8005606:	68f8      	ldr	r0, [r7, #12]
 8005608:	f000 fa1f 	bl	8005a4a <QSPI_WaitFlagStateUntilTimeout>
 800560c:	4603      	mov	r3, r0
 800560e:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8005610:	7ffb      	ldrb	r3, [r7, #31]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d114      	bne.n	8005640 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800561a:	693a      	ldr	r2, [r7, #16]
 800561c:	7812      	ldrb	r2, [r2, #0]
 800561e:	b2d2      	uxtb	r2, r2
 8005620:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005626:	1c5a      	adds	r2, r3, #1
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005630:	1e5a      	subs	r2, r3, #1
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1de      	bne.n	80055fc <HAL_QSPI_Receive+0x9a>
 800563e:	e000      	b.n	8005642 <HAL_QSPI_Receive+0xe0>
          break;
 8005640:	bf00      	nop
      }

      if (status == HAL_OK)
 8005642:	7ffb      	ldrb	r3, [r7, #31]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d115      	bne.n	8005674 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	9300      	str	r3, [sp, #0]
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	2201      	movs	r2, #1
 8005650:	2102      	movs	r1, #2
 8005652:	68f8      	ldr	r0, [r7, #12]
 8005654:	f000 f9f9 	bl	8005a4a <QSPI_WaitFlagStateUntilTimeout>
 8005658:	4603      	mov	r3, r0
 800565a:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800565c:	7ffb      	ldrb	r3, [r7, #31]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d108      	bne.n	8005674 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	2202      	movs	r2, #2
 8005668:	60da      	str	r2, [r3, #12]

          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 800566a:	68f8      	ldr	r0, [r7, #12]
 800566c:	f000 f8e2 	bl	8005834 <HAL_QSPI_Abort>
 8005670:	4603      	mov	r3, r0
 8005672:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800567c:	e00a      	b.n	8005694 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005682:	f043 0208 	orr.w	r2, r3, #8
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	77fb      	strb	r3, [r7, #31]
 800568e:	e001      	b.n	8005694 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 8005690:	2302      	movs	r3, #2
 8005692:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2200      	movs	r2, #0
 8005698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800569c:	7ffb      	ldrb	r3, [r7, #31]
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3720      	adds	r7, #32
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}

080056a6 <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 80056a6:	b580      	push	{r7, lr}
 80056a8:	b088      	sub	sp, #32
 80056aa:	af02      	add	r7, sp, #8
 80056ac:	60f8      	str	r0, [r7, #12]
 80056ae:	60b9      	str	r1, [r7, #8]
 80056b0:	607a      	str	r2, [r7, #4]
 80056b2:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80056b4:	f7fd fd64 	bl	8003180 <HAL_GetTick>
 80056b8:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d101      	bne.n	80056ca <HAL_QSPI_AutoPolling+0x24>
 80056c6:	2302      	movs	r3, #2
 80056c8:	e060      	b.n	800578c <HAL_QSPI_AutoPolling+0xe6>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2201      	movs	r2, #1
 80056ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d14f      	bne.n	800577e <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2200      	movs	r2, #0
 80056e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2242      	movs	r2, #66	; 0x42
 80056e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	9300      	str	r3, [sp, #0]
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	2200      	movs	r2, #0
 80056f4:	2120      	movs	r1, #32
 80056f6:	68f8      	ldr	r0, [r7, #12]
 80056f8:	f000 f9a7 	bl	8005a4a <QSPI_WaitFlagStateUntilTimeout>
 80056fc:	4603      	mov	r3, r0
 80056fe:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8005700:	7dfb      	ldrb	r3, [r7, #23]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d13d      	bne.n	8005782 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	6812      	ldr	r2, [r2, #0]
 800570e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	6852      	ldr	r2, [r2, #4]
 8005718:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	6892      	ldr	r2, [r2, #8]
 8005722:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	431a      	orrs	r2, r3
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800573c:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	68da      	ldr	r2, [r3, #12]
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8005746:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800574a:	68b9      	ldr	r1, [r7, #8]
 800574c:	68f8      	ldr	r0, [r7, #12]
 800574e:	f000 f9b3 	bl	8005ab8 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	9300      	str	r3, [sp, #0]
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	2201      	movs	r2, #1
 800575a:	2108      	movs	r1, #8
 800575c:	68f8      	ldr	r0, [r7, #12]
 800575e:	f000 f974 	bl	8005a4a <QSPI_WaitFlagStateUntilTimeout>
 8005762:	4603      	mov	r3, r0
 8005764:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8005766:	7dfb      	ldrb	r3, [r7, #23]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d10a      	bne.n	8005782 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2208      	movs	r2, #8
 8005772:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800577c:	e001      	b.n	8005782 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800577e:	2302      	movs	r3, #2
 8005780:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800578a:	7dfb      	ldrb	r3, [r7, #23]
}
 800578c:	4618      	mov	r0, r3
 800578e:	3718      	adds	r7, #24
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 800579c:	bf00      	nop
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 80057b0:	bf00      	nop
 80057b2:	370c      	adds	r7, #12
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 80057c4:	bf00      	nop
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 80057d8:	bf00      	nop
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 80057ec:	bf00      	nop
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 8005800:	bf00      	nop
 8005802:	370c      	adds	r7, #12
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 8005814:	bf00      	nop
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 8005828:	bf00      	nop
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b086      	sub	sp, #24
 8005838:	af02      	add	r7, sp, #8
 800583a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800583c:	2300      	movs	r3, #0
 800583e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8005840:	f7fd fc9e 	bl	8003180 <HAL_GetTick>
 8005844:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800584c:	b2db      	uxtb	r3, r3
 800584e:	f003 0302 	and.w	r3, r3, #2
 8005852:	2b00      	cmp	r3, #0
 8005854:	d056      	beq.n	8005904 <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 0304 	and.w	r3, r3, #4
 8005868:	2b00      	cmp	r3, #0
 800586a:	d017      	beq.n	800589c <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f022 0204 	bic.w	r2, r2, #4
 800587a:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005880:	4618      	mov	r0, r3
 8005882:	f7fe fe93 	bl	80045ac <HAL_DMA_Abort>
 8005886:	4603      	mov	r3, r0
 8005888:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 800588a:	7bfb      	ldrb	r3, [r7, #15]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d005      	beq.n	800589c <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005894:	f043 0204 	orr.w	r2, r3, #4
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f042 0202 	orr.w	r2, r2, #2
 80058aa:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058b0:	9300      	str	r3, [sp, #0]
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	2201      	movs	r2, #1
 80058b6:	2102      	movs	r1, #2
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f000 f8c6 	bl	8005a4a <QSPI_WaitFlagStateUntilTimeout>
 80058be:	4603      	mov	r3, r0
 80058c0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80058c2:	7bfb      	ldrb	r3, [r7, #15]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d10e      	bne.n	80058e6 <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	2202      	movs	r2, #2
 80058ce:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058d4:	9300      	str	r3, [sp, #0]
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	2200      	movs	r2, #0
 80058da:	2120      	movs	r1, #32
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f000 f8b4 	bl	8005a4a <QSPI_WaitFlagStateUntilTimeout>
 80058e2:	4603      	mov	r3, r0
 80058e4:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80058e6:	7bfb      	ldrb	r3, [r7, #15]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d10b      	bne.n	8005904 <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	695a      	ldr	r2, [r3, #20]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80058fa:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
  }

  return status;
 8005904:	7bfb      	ldrb	r3, [r7, #15]
}
 8005906:	4618      	mov	r0, r3
 8005908:	3710      	adds	r7, #16
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
	...

08005910 <HAL_QSPI_Abort_IT>:
* @brief  Abort the current transmission (non-blocking function)
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort_IT(QSPI_HandleTypeDef *hqspi)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005918:	2300      	movs	r3, #0
 800591a:	73fb      	strb	r3, [r7, #15]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005922:	b2db      	uxtb	r3, r3
 8005924:	f003 0302 	and.w	r3, r3, #2
 8005928:	2b00      	cmp	r3, #0
 800592a:	d046      	beq.n	80059ba <HAL_QSPI_Abort_IT+0xaa>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_ABORT;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2208      	movs	r2, #8
 8005938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable all interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_TO | QSPI_IT_SM | QSPI_IT_FT | QSPI_IT_TC | QSPI_IT_TE));
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800594a:	601a      	str	r2, [r3, #0]

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 0304 	and.w	r3, r3, #4
 8005956:	2b00      	cmp	r3, #0
 8005958:	d01b      	beq.n	8005992 <HAL_QSPI_Abort_IT+0x82>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f022 0204 	bic.w	r2, r2, #4
 8005968:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800596e:	4a15      	ldr	r2, [pc, #84]	; (80059c4 <HAL_QSPI_Abort_IT+0xb4>)
 8005970:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005976:	4618      	mov	r0, r3
 8005978:	f7fe fe88 	bl	800468c <HAL_DMA_Abort_IT>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d01b      	beq.n	80059ba <HAL_QSPI_Abort_IT+0xaa>
      {
        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2201      	movs	r2, #1
 8005986:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f7ff ff0c 	bl	80057a8 <HAL_QSPI_AbortCpltCallback>
 8005990:	e013      	b.n	80059ba <HAL_QSPI_Abort_IT+0xaa>
      }
    }
    else
    {
      /* Clear interrupt */
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2202      	movs	r2, #2
 8005998:	60da      	str	r2, [r3, #12]

      /* Enable the QSPI Transfer Complete Interrupt */
      __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80059a8:	601a      	str	r2, [r3, #0]

      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f042 0202 	orr.w	r2, r2, #2
 80059b8:	601a      	str	r2, [r3, #0]
    }
  }
  return status;
 80059ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3710      	adds	r7, #16
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	080059e5 	.word	0x080059e5

080059c8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	683a      	ldr	r2, [r7, #0]
 80059d6:	649a      	str	r2, [r3, #72]	; 0x48
}
 80059d8:	bf00      	nop
 80059da:	370c      	adds	r7, #12
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <QSPI_DMAAbortCplt>:
  * @brief  DMA QSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f0:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2200      	movs	r2, #0
 80059f6:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2200      	movs	r2, #0
 80059fc:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	2b08      	cmp	r3, #8
 8005a08:	d114      	bne.n	8005a34 <QSPI_DMAAbortCplt+0x50>
  {
    /* DMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2202      	movs	r2, #2
 8005a10:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005a20:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f042 0202 	orr.w	r2, r2, #2
 8005a30:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 8005a32:	e006      	b.n	8005a42 <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 8005a3c:	68f8      	ldr	r0, [r7, #12]
 8005a3e:	f7ff fea9 	bl	8005794 <HAL_QSPI_ErrorCallback>
}
 8005a42:	bf00      	nop
 8005a44:	3710      	adds	r7, #16
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}

08005a4a <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005a4a:	b580      	push	{r7, lr}
 8005a4c:	b084      	sub	sp, #16
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	60f8      	str	r0, [r7, #12]
 8005a52:	60b9      	str	r1, [r7, #8]
 8005a54:	603b      	str	r3, [r7, #0]
 8005a56:	4613      	mov	r3, r2
 8005a58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005a5a:	e01a      	b.n	8005a92 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a62:	d016      	beq.n	8005a92 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a64:	f7fd fb8c 	bl	8003180 <HAL_GetTick>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	69ba      	ldr	r2, [r7, #24]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d302      	bcc.n	8005a7a <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d10b      	bne.n	8005a92 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2204      	movs	r2, #4
 8005a7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a86:	f043 0201 	orr.w	r2, r3, #1
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e00e      	b.n	8005ab0 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	689a      	ldr	r2, [r3, #8]
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	bf14      	ite	ne
 8005aa0:	2301      	movne	r3, #1
 8005aa2:	2300      	moveq	r3, #0
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	79fb      	ldrb	r3, [r7, #7]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d1d6      	bne.n	8005a5c <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3710      	adds	r7, #16
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b085      	sub	sp, #20
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d009      	beq.n	8005ae0 <QSPI_Config+0x28>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005ad2:	d005      	beq.n	8005ae0 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	3a01      	subs	r2, #1
 8005ade:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	699b      	ldr	r3, [r3, #24]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	f000 80b9 	beq.w	8005c5c <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	6a1b      	ldr	r3, [r3, #32]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d05f      	beq.n	8005bb2 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68ba      	ldr	r2, [r7, #8]
 8005af8:	6892      	ldr	r2, [r2, #8]
 8005afa:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	69db      	ldr	r3, [r3, #28]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d031      	beq.n	8005b68 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b0c:	431a      	orrs	r2, r3
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b12:	431a      	orrs	r2, r3
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b18:	431a      	orrs	r2, r3
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	695b      	ldr	r3, [r3, #20]
 8005b1e:	049b      	lsls	r3, r3, #18
 8005b20:	431a      	orrs	r2, r3
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	431a      	orrs	r2, r3
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	6a1b      	ldr	r3, [r3, #32]
 8005b2c:	431a      	orrs	r2, r3
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	431a      	orrs	r2, r3
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	69db      	ldr	r3, [r3, #28]
 8005b38:	431a      	orrs	r2, r3
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	699b      	ldr	r3, [r3, #24]
 8005b3e:	431a      	orrs	r2, r3
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	ea42 0103 	orr.w	r1, r2, r3
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	430a      	orrs	r2, r1
 8005b50:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005b58:	f000 812e 	beq.w	8005db8 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	68ba      	ldr	r2, [r7, #8]
 8005b62:	6852      	ldr	r2, [r2, #4]
 8005b64:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8005b66:	e127      	b.n	8005db8 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b70:	431a      	orrs	r2, r3
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b76:	431a      	orrs	r2, r3
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7c:	431a      	orrs	r2, r3
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	695b      	ldr	r3, [r3, #20]
 8005b82:	049b      	lsls	r3, r3, #18
 8005b84:	431a      	orrs	r2, r3
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	431a      	orrs	r2, r3
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	6a1b      	ldr	r3, [r3, #32]
 8005b90:	431a      	orrs	r2, r3
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	69db      	ldr	r3, [r3, #28]
 8005b96:	431a      	orrs	r2, r3
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	699b      	ldr	r3, [r3, #24]
 8005b9c:	431a      	orrs	r2, r3
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	ea42 0103 	orr.w	r1, r2, r3
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	430a      	orrs	r2, r1
 8005bae:	615a      	str	r2, [r3, #20]
}
 8005bb0:	e102      	b.n	8005db8 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	69db      	ldr	r3, [r3, #28]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d02e      	beq.n	8005c18 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc2:	431a      	orrs	r2, r3
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bc8:	431a      	orrs	r2, r3
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bce:	431a      	orrs	r2, r3
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	695b      	ldr	r3, [r3, #20]
 8005bd4:	049b      	lsls	r3, r3, #18
 8005bd6:	431a      	orrs	r2, r3
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	6a1b      	ldr	r3, [r3, #32]
 8005bdc:	431a      	orrs	r2, r3
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	431a      	orrs	r2, r3
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	69db      	ldr	r3, [r3, #28]
 8005be8:	431a      	orrs	r2, r3
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	699b      	ldr	r3, [r3, #24]
 8005bee:	431a      	orrs	r2, r3
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	ea42 0103 	orr.w	r1, r2, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005c08:	f000 80d6 	beq.w	8005db8 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68ba      	ldr	r2, [r7, #8]
 8005c12:	6852      	ldr	r2, [r2, #4]
 8005c14:	619a      	str	r2, [r3, #24]
}
 8005c16:	e0cf      	b.n	8005db8 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c20:	431a      	orrs	r2, r3
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c26:	431a      	orrs	r2, r3
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2c:	431a      	orrs	r2, r3
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	695b      	ldr	r3, [r3, #20]
 8005c32:	049b      	lsls	r3, r3, #18
 8005c34:	431a      	orrs	r2, r3
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	6a1b      	ldr	r3, [r3, #32]
 8005c3a:	431a      	orrs	r2, r3
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	69db      	ldr	r3, [r3, #28]
 8005c40:	431a      	orrs	r2, r3
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	699b      	ldr	r3, [r3, #24]
 8005c46:	431a      	orrs	r2, r3
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	ea42 0103 	orr.w	r1, r2, r3
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	430a      	orrs	r2, r1
 8005c58:	615a      	str	r2, [r3, #20]
}
 8005c5a:	e0ad      	b.n	8005db8 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	6a1b      	ldr	r3, [r3, #32]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d058      	beq.n	8005d16 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68ba      	ldr	r2, [r7, #8]
 8005c6a:	6892      	ldr	r2, [r2, #8]
 8005c6c:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	69db      	ldr	r3, [r3, #28]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d02d      	beq.n	8005cd2 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c7e:	431a      	orrs	r2, r3
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c84:	431a      	orrs	r2, r3
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8a:	431a      	orrs	r2, r3
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	695b      	ldr	r3, [r3, #20]
 8005c90:	049b      	lsls	r3, r3, #18
 8005c92:	431a      	orrs	r2, r3
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	431a      	orrs	r2, r3
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	6a1b      	ldr	r3, [r3, #32]
 8005c9e:	431a      	orrs	r2, r3
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	431a      	orrs	r2, r3
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	69db      	ldr	r3, [r3, #28]
 8005caa:	431a      	orrs	r2, r3
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	699b      	ldr	r3, [r3, #24]
 8005cb0:	ea42 0103 	orr.w	r1, r2, r3
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	430a      	orrs	r2, r1
 8005cbc:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005cc4:	d078      	beq.n	8005db8 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68ba      	ldr	r2, [r7, #8]
 8005ccc:	6852      	ldr	r2, [r2, #4]
 8005cce:	619a      	str	r2, [r3, #24]
}
 8005cd0:	e072      	b.n	8005db8 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cda:	431a      	orrs	r2, r3
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ce0:	431a      	orrs	r2, r3
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce6:	431a      	orrs	r2, r3
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	695b      	ldr	r3, [r3, #20]
 8005cec:	049b      	lsls	r3, r3, #18
 8005cee:	431a      	orrs	r2, r3
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	431a      	orrs	r2, r3
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	6a1b      	ldr	r3, [r3, #32]
 8005cfa:	431a      	orrs	r2, r3
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	69db      	ldr	r3, [r3, #28]
 8005d00:	431a      	orrs	r2, r3
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	699b      	ldr	r3, [r3, #24]
 8005d06:	ea42 0103 	orr.w	r1, r2, r3
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	430a      	orrs	r2, r1
 8005d12:	615a      	str	r2, [r3, #20]
}
 8005d14:	e050      	b.n	8005db8 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	69db      	ldr	r3, [r3, #28]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d02a      	beq.n	8005d74 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d26:	431a      	orrs	r2, r3
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d2c:	431a      	orrs	r2, r3
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d32:	431a      	orrs	r2, r3
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	695b      	ldr	r3, [r3, #20]
 8005d38:	049b      	lsls	r3, r3, #18
 8005d3a:	431a      	orrs	r2, r3
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	6a1b      	ldr	r3, [r3, #32]
 8005d40:	431a      	orrs	r2, r3
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	431a      	orrs	r2, r3
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	69db      	ldr	r3, [r3, #28]
 8005d4c:	431a      	orrs	r2, r3
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	699b      	ldr	r3, [r3, #24]
 8005d52:	ea42 0103 	orr.w	r1, r2, r3
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	430a      	orrs	r2, r1
 8005d5e:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005d66:	d027      	beq.n	8005db8 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	68ba      	ldr	r2, [r7, #8]
 8005d6e:	6852      	ldr	r2, [r2, #4]
 8005d70:	619a      	str	r2, [r3, #24]
}
 8005d72:	e021      	b.n	8005db8 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d01d      	beq.n	8005db8 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d84:	431a      	orrs	r2, r3
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d8a:	431a      	orrs	r2, r3
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d90:	431a      	orrs	r2, r3
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	695b      	ldr	r3, [r3, #20]
 8005d96:	049b      	lsls	r3, r3, #18
 8005d98:	431a      	orrs	r2, r3
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	6a1b      	ldr	r3, [r3, #32]
 8005d9e:	431a      	orrs	r2, r3
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	69db      	ldr	r3, [r3, #28]
 8005da4:	431a      	orrs	r2, r3
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	699b      	ldr	r3, [r3, #24]
 8005daa:	ea42 0103 	orr.w	r1, r2, r3
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	430a      	orrs	r2, r1
 8005db6:	615a      	str	r2, [r3, #20]
}
 8005db8:	bf00      	nop
 8005dba:	3714      	adds	r7, #20
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d101      	bne.n	8005dd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e0cc      	b.n	8005f72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005dd8:	4b68      	ldr	r3, [pc, #416]	; (8005f7c <HAL_RCC_ClockConfig+0x1b8>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 030f 	and.w	r3, r3, #15
 8005de0:	683a      	ldr	r2, [r7, #0]
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d90c      	bls.n	8005e00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005de6:	4b65      	ldr	r3, [pc, #404]	; (8005f7c <HAL_RCC_ClockConfig+0x1b8>)
 8005de8:	683a      	ldr	r2, [r7, #0]
 8005dea:	b2d2      	uxtb	r2, r2
 8005dec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dee:	4b63      	ldr	r3, [pc, #396]	; (8005f7c <HAL_RCC_ClockConfig+0x1b8>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 030f 	and.w	r3, r3, #15
 8005df6:	683a      	ldr	r2, [r7, #0]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d001      	beq.n	8005e00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e0b8      	b.n	8005f72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 0302 	and.w	r3, r3, #2
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d020      	beq.n	8005e4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 0304 	and.w	r3, r3, #4
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d005      	beq.n	8005e24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e18:	4b59      	ldr	r3, [pc, #356]	; (8005f80 <HAL_RCC_ClockConfig+0x1bc>)
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	4a58      	ldr	r2, [pc, #352]	; (8005f80 <HAL_RCC_ClockConfig+0x1bc>)
 8005e1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005e22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 0308 	and.w	r3, r3, #8
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d005      	beq.n	8005e3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e30:	4b53      	ldr	r3, [pc, #332]	; (8005f80 <HAL_RCC_ClockConfig+0x1bc>)
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	4a52      	ldr	r2, [pc, #328]	; (8005f80 <HAL_RCC_ClockConfig+0x1bc>)
 8005e36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005e3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e3c:	4b50      	ldr	r3, [pc, #320]	; (8005f80 <HAL_RCC_ClockConfig+0x1bc>)
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	494d      	ldr	r1, [pc, #308]	; (8005f80 <HAL_RCC_ClockConfig+0x1bc>)
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f003 0301 	and.w	r3, r3, #1
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d044      	beq.n	8005ee4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d107      	bne.n	8005e72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e62:	4b47      	ldr	r3, [pc, #284]	; (8005f80 <HAL_RCC_ClockConfig+0x1bc>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d119      	bne.n	8005ea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e07f      	b.n	8005f72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	d003      	beq.n	8005e82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e7e:	2b03      	cmp	r3, #3
 8005e80:	d107      	bne.n	8005e92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e82:	4b3f      	ldr	r3, [pc, #252]	; (8005f80 <HAL_RCC_ClockConfig+0x1bc>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d109      	bne.n	8005ea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e06f      	b.n	8005f72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e92:	4b3b      	ldr	r3, [pc, #236]	; (8005f80 <HAL_RCC_ClockConfig+0x1bc>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 0302 	and.w	r3, r3, #2
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d101      	bne.n	8005ea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e067      	b.n	8005f72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ea2:	4b37      	ldr	r3, [pc, #220]	; (8005f80 <HAL_RCC_ClockConfig+0x1bc>)
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	f023 0203 	bic.w	r2, r3, #3
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	4934      	ldr	r1, [pc, #208]	; (8005f80 <HAL_RCC_ClockConfig+0x1bc>)
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005eb4:	f7fd f964 	bl	8003180 <HAL_GetTick>
 8005eb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005eba:	e00a      	b.n	8005ed2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ebc:	f7fd f960 	bl	8003180 <HAL_GetTick>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d901      	bls.n	8005ed2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	e04f      	b.n	8005f72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ed2:	4b2b      	ldr	r3, [pc, #172]	; (8005f80 <HAL_RCC_ClockConfig+0x1bc>)
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	f003 020c 	and.w	r2, r3, #12
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d1eb      	bne.n	8005ebc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ee4:	4b25      	ldr	r3, [pc, #148]	; (8005f7c <HAL_RCC_ClockConfig+0x1b8>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 030f 	and.w	r3, r3, #15
 8005eec:	683a      	ldr	r2, [r7, #0]
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d20c      	bcs.n	8005f0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ef2:	4b22      	ldr	r3, [pc, #136]	; (8005f7c <HAL_RCC_ClockConfig+0x1b8>)
 8005ef4:	683a      	ldr	r2, [r7, #0]
 8005ef6:	b2d2      	uxtb	r2, r2
 8005ef8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005efa:	4b20      	ldr	r3, [pc, #128]	; (8005f7c <HAL_RCC_ClockConfig+0x1b8>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 030f 	and.w	r3, r3, #15
 8005f02:	683a      	ldr	r2, [r7, #0]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d001      	beq.n	8005f0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e032      	b.n	8005f72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f003 0304 	and.w	r3, r3, #4
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d008      	beq.n	8005f2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f18:	4b19      	ldr	r3, [pc, #100]	; (8005f80 <HAL_RCC_ClockConfig+0x1bc>)
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	4916      	ldr	r1, [pc, #88]	; (8005f80 <HAL_RCC_ClockConfig+0x1bc>)
 8005f26:	4313      	orrs	r3, r2
 8005f28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 0308 	and.w	r3, r3, #8
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d009      	beq.n	8005f4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f36:	4b12      	ldr	r3, [pc, #72]	; (8005f80 <HAL_RCC_ClockConfig+0x1bc>)
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	00db      	lsls	r3, r3, #3
 8005f44:	490e      	ldr	r1, [pc, #56]	; (8005f80 <HAL_RCC_ClockConfig+0x1bc>)
 8005f46:	4313      	orrs	r3, r2
 8005f48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005f4a:	f000 f887 	bl	800605c <HAL_RCC_GetSysClockFreq>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	4b0b      	ldr	r3, [pc, #44]	; (8005f80 <HAL_RCC_ClockConfig+0x1bc>)
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	091b      	lsrs	r3, r3, #4
 8005f56:	f003 030f 	and.w	r3, r3, #15
 8005f5a:	490a      	ldr	r1, [pc, #40]	; (8005f84 <HAL_RCC_ClockConfig+0x1c0>)
 8005f5c:	5ccb      	ldrb	r3, [r1, r3]
 8005f5e:	fa22 f303 	lsr.w	r3, r2, r3
 8005f62:	4a09      	ldr	r2, [pc, #36]	; (8005f88 <HAL_RCC_ClockConfig+0x1c4>)
 8005f64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005f66:	4b09      	ldr	r3, [pc, #36]	; (8005f8c <HAL_RCC_ClockConfig+0x1c8>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f7fc fafa 	bl	8002564 <HAL_InitTick>

  return HAL_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3710      	adds	r7, #16
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	40023c00 	.word	0x40023c00
 8005f80:	40023800 	.word	0x40023800
 8005f84:	0800af30 	.word	0x0800af30
 8005f88:	20000000 	.word	0x20000000
 8005f8c:	20000004 	.word	0x20000004

08005f90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f90:	b480      	push	{r7}
 8005f92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f94:	4b03      	ldr	r3, [pc, #12]	; (8005fa4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f96:	681b      	ldr	r3, [r3, #0]
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop
 8005fa4:	20000000 	.word	0x20000000

08005fa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005fac:	f7ff fff0 	bl	8005f90 <HAL_RCC_GetHCLKFreq>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	4b05      	ldr	r3, [pc, #20]	; (8005fc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	0a9b      	lsrs	r3, r3, #10
 8005fb8:	f003 0307 	and.w	r3, r3, #7
 8005fbc:	4903      	ldr	r1, [pc, #12]	; (8005fcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fbe:	5ccb      	ldrb	r3, [r1, r3]
 8005fc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	bd80      	pop	{r7, pc}
 8005fc8:	40023800 	.word	0x40023800
 8005fcc:	0800af40 	.word	0x0800af40

08005fd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005fd4:	f7ff ffdc 	bl	8005f90 <HAL_RCC_GetHCLKFreq>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	4b05      	ldr	r3, [pc, #20]	; (8005ff0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	0b5b      	lsrs	r3, r3, #13
 8005fe0:	f003 0307 	and.w	r3, r3, #7
 8005fe4:	4903      	ldr	r1, [pc, #12]	; (8005ff4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005fe6:	5ccb      	ldrb	r3, [r1, r3]
 8005fe8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	40023800 	.word	0x40023800
 8005ff4:	0800af40 	.word	0x0800af40

08005ff8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	220f      	movs	r2, #15
 8006006:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006008:	4b12      	ldr	r3, [pc, #72]	; (8006054 <HAL_RCC_GetClockConfig+0x5c>)
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	f003 0203 	and.w	r2, r3, #3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006014:	4b0f      	ldr	r3, [pc, #60]	; (8006054 <HAL_RCC_GetClockConfig+0x5c>)
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006020:	4b0c      	ldr	r3, [pc, #48]	; (8006054 <HAL_RCC_GetClockConfig+0x5c>)
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800602c:	4b09      	ldr	r3, [pc, #36]	; (8006054 <HAL_RCC_GetClockConfig+0x5c>)
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	08db      	lsrs	r3, r3, #3
 8006032:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800603a:	4b07      	ldr	r3, [pc, #28]	; (8006058 <HAL_RCC_GetClockConfig+0x60>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f003 020f 	and.w	r2, r3, #15
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	601a      	str	r2, [r3, #0]
}
 8006046:	bf00      	nop
 8006048:	370c      	adds	r7, #12
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop
 8006054:	40023800 	.word	0x40023800
 8006058:	40023c00 	.word	0x40023c00

0800605c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800605c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006060:	b087      	sub	sp, #28
 8006062:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006064:	2600      	movs	r6, #0
 8006066:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 8006068:	2600      	movs	r6, #0
 800606a:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 800606c:	2600      	movs	r6, #0
 800606e:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 8006070:	2600      	movs	r6, #0
 8006072:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006074:	2600      	movs	r6, #0
 8006076:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006078:	4ea3      	ldr	r6, [pc, #652]	; (8006308 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800607a:	68b6      	ldr	r6, [r6, #8]
 800607c:	f006 060c 	and.w	r6, r6, #12
 8006080:	2e0c      	cmp	r6, #12
 8006082:	f200 8137 	bhi.w	80062f4 <HAL_RCC_GetSysClockFreq+0x298>
 8006086:	f20f 0c08 	addw	ip, pc, #8
 800608a:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 800608e:	bf00      	nop
 8006090:	080060c5 	.word	0x080060c5
 8006094:	080062f5 	.word	0x080062f5
 8006098:	080062f5 	.word	0x080062f5
 800609c:	080062f5 	.word	0x080062f5
 80060a0:	080060cb 	.word	0x080060cb
 80060a4:	080062f5 	.word	0x080062f5
 80060a8:	080062f5 	.word	0x080062f5
 80060ac:	080062f5 	.word	0x080062f5
 80060b0:	080060d1 	.word	0x080060d1
 80060b4:	080062f5 	.word	0x080062f5
 80060b8:	080062f5 	.word	0x080062f5
 80060bc:	080062f5 	.word	0x080062f5
 80060c0:	080061e7 	.word	0x080061e7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80060c4:	4b91      	ldr	r3, [pc, #580]	; (800630c <HAL_RCC_GetSysClockFreq+0x2b0>)
 80060c6:	613b      	str	r3, [r7, #16]
       break;
 80060c8:	e117      	b.n	80062fa <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80060ca:	4b91      	ldr	r3, [pc, #580]	; (8006310 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80060cc:	613b      	str	r3, [r7, #16]
      break;
 80060ce:	e114      	b.n	80062fa <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80060d0:	4b8d      	ldr	r3, [pc, #564]	; (8006308 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060d8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80060da:	4b8b      	ldr	r3, [pc, #556]	; (8006308 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d024      	beq.n	8006130 <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060e6:	4b88      	ldr	r3, [pc, #544]	; (8006308 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	099b      	lsrs	r3, r3, #6
 80060ec:	461a      	mov	r2, r3
 80060ee:	f04f 0300 	mov.w	r3, #0
 80060f2:	f240 14ff 	movw	r4, #511	; 0x1ff
 80060f6:	f04f 0500 	mov.w	r5, #0
 80060fa:	ea02 0004 	and.w	r0, r2, r4
 80060fe:	ea03 0105 	and.w	r1, r3, r5
 8006102:	4b83      	ldr	r3, [pc, #524]	; (8006310 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8006104:	fb03 f201 	mul.w	r2, r3, r1
 8006108:	2300      	movs	r3, #0
 800610a:	fb03 f300 	mul.w	r3, r3, r0
 800610e:	4413      	add	r3, r2
 8006110:	4a7f      	ldr	r2, [pc, #508]	; (8006310 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8006112:	fba0 0102 	umull	r0, r1, r0, r2
 8006116:	440b      	add	r3, r1
 8006118:	4619      	mov	r1, r3
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	461a      	mov	r2, r3
 800611e:	f04f 0300 	mov.w	r3, #0
 8006122:	f7fa f875 	bl	8000210 <__aeabi_uldivmod>
 8006126:	4602      	mov	r2, r0
 8006128:	460b      	mov	r3, r1
 800612a:	4613      	mov	r3, r2
 800612c:	617b      	str	r3, [r7, #20]
 800612e:	e04c      	b.n	80061ca <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006130:	4b75      	ldr	r3, [pc, #468]	; (8006308 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	099b      	lsrs	r3, r3, #6
 8006136:	461a      	mov	r2, r3
 8006138:	f04f 0300 	mov.w	r3, #0
 800613c:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006140:	f04f 0100 	mov.w	r1, #0
 8006144:	ea02 0800 	and.w	r8, r2, r0
 8006148:	ea03 0901 	and.w	r9, r3, r1
 800614c:	4640      	mov	r0, r8
 800614e:	4649      	mov	r1, r9
 8006150:	f04f 0200 	mov.w	r2, #0
 8006154:	f04f 0300 	mov.w	r3, #0
 8006158:	014b      	lsls	r3, r1, #5
 800615a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800615e:	0142      	lsls	r2, r0, #5
 8006160:	4610      	mov	r0, r2
 8006162:	4619      	mov	r1, r3
 8006164:	ebb0 0008 	subs.w	r0, r0, r8
 8006168:	eb61 0109 	sbc.w	r1, r1, r9
 800616c:	f04f 0200 	mov.w	r2, #0
 8006170:	f04f 0300 	mov.w	r3, #0
 8006174:	018b      	lsls	r3, r1, #6
 8006176:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800617a:	0182      	lsls	r2, r0, #6
 800617c:	1a12      	subs	r2, r2, r0
 800617e:	eb63 0301 	sbc.w	r3, r3, r1
 8006182:	f04f 0000 	mov.w	r0, #0
 8006186:	f04f 0100 	mov.w	r1, #0
 800618a:	00d9      	lsls	r1, r3, #3
 800618c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006190:	00d0      	lsls	r0, r2, #3
 8006192:	4602      	mov	r2, r0
 8006194:	460b      	mov	r3, r1
 8006196:	eb12 0208 	adds.w	r2, r2, r8
 800619a:	eb43 0309 	adc.w	r3, r3, r9
 800619e:	f04f 0000 	mov.w	r0, #0
 80061a2:	f04f 0100 	mov.w	r1, #0
 80061a6:	0299      	lsls	r1, r3, #10
 80061a8:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80061ac:	0290      	lsls	r0, r2, #10
 80061ae:	4602      	mov	r2, r0
 80061b0:	460b      	mov	r3, r1
 80061b2:	4610      	mov	r0, r2
 80061b4:	4619      	mov	r1, r3
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	461a      	mov	r2, r3
 80061ba:	f04f 0300 	mov.w	r3, #0
 80061be:	f7fa f827 	bl	8000210 <__aeabi_uldivmod>
 80061c2:	4602      	mov	r2, r0
 80061c4:	460b      	mov	r3, r1
 80061c6:	4613      	mov	r3, r2
 80061c8:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80061ca:	4b4f      	ldr	r3, [pc, #316]	; (8006308 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	0c1b      	lsrs	r3, r3, #16
 80061d0:	f003 0303 	and.w	r3, r3, #3
 80061d4:	3301      	adds	r3, #1
 80061d6:	005b      	lsls	r3, r3, #1
 80061d8:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80061da:	697a      	ldr	r2, [r7, #20]
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	fbb2 f3f3 	udiv	r3, r2, r3
 80061e2:	613b      	str	r3, [r7, #16]
      break;
 80061e4:	e089      	b.n	80062fa <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80061e6:	4948      	ldr	r1, [pc, #288]	; (8006308 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80061e8:	6849      	ldr	r1, [r1, #4]
 80061ea:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80061ee:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80061f0:	4945      	ldr	r1, [pc, #276]	; (8006308 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80061f2:	6849      	ldr	r1, [r1, #4]
 80061f4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80061f8:	2900      	cmp	r1, #0
 80061fa:	d024      	beq.n	8006246 <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061fc:	4942      	ldr	r1, [pc, #264]	; (8006308 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80061fe:	6849      	ldr	r1, [r1, #4]
 8006200:	0989      	lsrs	r1, r1, #6
 8006202:	4608      	mov	r0, r1
 8006204:	f04f 0100 	mov.w	r1, #0
 8006208:	f240 14ff 	movw	r4, #511	; 0x1ff
 800620c:	f04f 0500 	mov.w	r5, #0
 8006210:	ea00 0204 	and.w	r2, r0, r4
 8006214:	ea01 0305 	and.w	r3, r1, r5
 8006218:	493d      	ldr	r1, [pc, #244]	; (8006310 <HAL_RCC_GetSysClockFreq+0x2b4>)
 800621a:	fb01 f003 	mul.w	r0, r1, r3
 800621e:	2100      	movs	r1, #0
 8006220:	fb01 f102 	mul.w	r1, r1, r2
 8006224:	1844      	adds	r4, r0, r1
 8006226:	493a      	ldr	r1, [pc, #232]	; (8006310 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8006228:	fba2 0101 	umull	r0, r1, r2, r1
 800622c:	1863      	adds	r3, r4, r1
 800622e:	4619      	mov	r1, r3
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	461a      	mov	r2, r3
 8006234:	f04f 0300 	mov.w	r3, #0
 8006238:	f7f9 ffea 	bl	8000210 <__aeabi_uldivmod>
 800623c:	4602      	mov	r2, r0
 800623e:	460b      	mov	r3, r1
 8006240:	4613      	mov	r3, r2
 8006242:	617b      	str	r3, [r7, #20]
 8006244:	e04a      	b.n	80062dc <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006246:	4b30      	ldr	r3, [pc, #192]	; (8006308 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	099b      	lsrs	r3, r3, #6
 800624c:	461a      	mov	r2, r3
 800624e:	f04f 0300 	mov.w	r3, #0
 8006252:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006256:	f04f 0100 	mov.w	r1, #0
 800625a:	ea02 0400 	and.w	r4, r2, r0
 800625e:	ea03 0501 	and.w	r5, r3, r1
 8006262:	4620      	mov	r0, r4
 8006264:	4629      	mov	r1, r5
 8006266:	f04f 0200 	mov.w	r2, #0
 800626a:	f04f 0300 	mov.w	r3, #0
 800626e:	014b      	lsls	r3, r1, #5
 8006270:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006274:	0142      	lsls	r2, r0, #5
 8006276:	4610      	mov	r0, r2
 8006278:	4619      	mov	r1, r3
 800627a:	1b00      	subs	r0, r0, r4
 800627c:	eb61 0105 	sbc.w	r1, r1, r5
 8006280:	f04f 0200 	mov.w	r2, #0
 8006284:	f04f 0300 	mov.w	r3, #0
 8006288:	018b      	lsls	r3, r1, #6
 800628a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800628e:	0182      	lsls	r2, r0, #6
 8006290:	1a12      	subs	r2, r2, r0
 8006292:	eb63 0301 	sbc.w	r3, r3, r1
 8006296:	f04f 0000 	mov.w	r0, #0
 800629a:	f04f 0100 	mov.w	r1, #0
 800629e:	00d9      	lsls	r1, r3, #3
 80062a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80062a4:	00d0      	lsls	r0, r2, #3
 80062a6:	4602      	mov	r2, r0
 80062a8:	460b      	mov	r3, r1
 80062aa:	1912      	adds	r2, r2, r4
 80062ac:	eb45 0303 	adc.w	r3, r5, r3
 80062b0:	f04f 0000 	mov.w	r0, #0
 80062b4:	f04f 0100 	mov.w	r1, #0
 80062b8:	0299      	lsls	r1, r3, #10
 80062ba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80062be:	0290      	lsls	r0, r2, #10
 80062c0:	4602      	mov	r2, r0
 80062c2:	460b      	mov	r3, r1
 80062c4:	4610      	mov	r0, r2
 80062c6:	4619      	mov	r1, r3
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	461a      	mov	r2, r3
 80062cc:	f04f 0300 	mov.w	r3, #0
 80062d0:	f7f9 ff9e 	bl	8000210 <__aeabi_uldivmod>
 80062d4:	4602      	mov	r2, r0
 80062d6:	460b      	mov	r3, r1
 80062d8:	4613      	mov	r3, r2
 80062da:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80062dc:	4b0a      	ldr	r3, [pc, #40]	; (8006308 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	0f1b      	lsrs	r3, r3, #28
 80062e2:	f003 0307 	and.w	r3, r3, #7
 80062e6:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80062e8:	697a      	ldr	r2, [r7, #20]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80062f0:	613b      	str	r3, [r7, #16]
      break;
 80062f2:	e002      	b.n	80062fa <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80062f4:	4b05      	ldr	r3, [pc, #20]	; (800630c <HAL_RCC_GetSysClockFreq+0x2b0>)
 80062f6:	613b      	str	r3, [r7, #16]
      break;
 80062f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80062fa:	693b      	ldr	r3, [r7, #16]
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	371c      	adds	r7, #28
 8006300:	46bd      	mov	sp, r7
 8006302:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006306:	bf00      	nop
 8006308:	40023800 	.word	0x40023800
 800630c:	00f42400 	.word	0x00f42400
 8006310:	017d7840 	.word	0x017d7840

08006314 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b086      	sub	sp, #24
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800631c:	2300      	movs	r3, #0
 800631e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f003 0301 	and.w	r3, r3, #1
 8006328:	2b00      	cmp	r3, #0
 800632a:	f000 8083 	beq.w	8006434 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800632e:	4b95      	ldr	r3, [pc, #596]	; (8006584 <HAL_RCC_OscConfig+0x270>)
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	f003 030c 	and.w	r3, r3, #12
 8006336:	2b04      	cmp	r3, #4
 8006338:	d019      	beq.n	800636e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800633a:	4b92      	ldr	r3, [pc, #584]	; (8006584 <HAL_RCC_OscConfig+0x270>)
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006342:	2b08      	cmp	r3, #8
 8006344:	d106      	bne.n	8006354 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006346:	4b8f      	ldr	r3, [pc, #572]	; (8006584 <HAL_RCC_OscConfig+0x270>)
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800634e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006352:	d00c      	beq.n	800636e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006354:	4b8b      	ldr	r3, [pc, #556]	; (8006584 <HAL_RCC_OscConfig+0x270>)
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800635c:	2b0c      	cmp	r3, #12
 800635e:	d112      	bne.n	8006386 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006360:	4b88      	ldr	r3, [pc, #544]	; (8006584 <HAL_RCC_OscConfig+0x270>)
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006368:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800636c:	d10b      	bne.n	8006386 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800636e:	4b85      	ldr	r3, [pc, #532]	; (8006584 <HAL_RCC_OscConfig+0x270>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006376:	2b00      	cmp	r3, #0
 8006378:	d05b      	beq.n	8006432 <HAL_RCC_OscConfig+0x11e>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d157      	bne.n	8006432 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e216      	b.n	80067b4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800638e:	d106      	bne.n	800639e <HAL_RCC_OscConfig+0x8a>
 8006390:	4b7c      	ldr	r3, [pc, #496]	; (8006584 <HAL_RCC_OscConfig+0x270>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a7b      	ldr	r2, [pc, #492]	; (8006584 <HAL_RCC_OscConfig+0x270>)
 8006396:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800639a:	6013      	str	r3, [r2, #0]
 800639c:	e01d      	b.n	80063da <HAL_RCC_OscConfig+0xc6>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80063a6:	d10c      	bne.n	80063c2 <HAL_RCC_OscConfig+0xae>
 80063a8:	4b76      	ldr	r3, [pc, #472]	; (8006584 <HAL_RCC_OscConfig+0x270>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a75      	ldr	r2, [pc, #468]	; (8006584 <HAL_RCC_OscConfig+0x270>)
 80063ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063b2:	6013      	str	r3, [r2, #0]
 80063b4:	4b73      	ldr	r3, [pc, #460]	; (8006584 <HAL_RCC_OscConfig+0x270>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a72      	ldr	r2, [pc, #456]	; (8006584 <HAL_RCC_OscConfig+0x270>)
 80063ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063be:	6013      	str	r3, [r2, #0]
 80063c0:	e00b      	b.n	80063da <HAL_RCC_OscConfig+0xc6>
 80063c2:	4b70      	ldr	r3, [pc, #448]	; (8006584 <HAL_RCC_OscConfig+0x270>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a6f      	ldr	r2, [pc, #444]	; (8006584 <HAL_RCC_OscConfig+0x270>)
 80063c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063cc:	6013      	str	r3, [r2, #0]
 80063ce:	4b6d      	ldr	r3, [pc, #436]	; (8006584 <HAL_RCC_OscConfig+0x270>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a6c      	ldr	r2, [pc, #432]	; (8006584 <HAL_RCC_OscConfig+0x270>)
 80063d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063d8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d013      	beq.n	800640a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063e2:	f7fc fecd 	bl	8003180 <HAL_GetTick>
 80063e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063e8:	e008      	b.n	80063fc <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063ea:	f7fc fec9 	bl	8003180 <HAL_GetTick>
 80063ee:	4602      	mov	r2, r0
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	1ad3      	subs	r3, r2, r3
 80063f4:	2b64      	cmp	r3, #100	; 0x64
 80063f6:	d901      	bls.n	80063fc <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80063f8:	2303      	movs	r3, #3
 80063fa:	e1db      	b.n	80067b4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063fc:	4b61      	ldr	r3, [pc, #388]	; (8006584 <HAL_RCC_OscConfig+0x270>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006404:	2b00      	cmp	r3, #0
 8006406:	d0f0      	beq.n	80063ea <HAL_RCC_OscConfig+0xd6>
 8006408:	e014      	b.n	8006434 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800640a:	f7fc feb9 	bl	8003180 <HAL_GetTick>
 800640e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006410:	e008      	b.n	8006424 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006412:	f7fc feb5 	bl	8003180 <HAL_GetTick>
 8006416:	4602      	mov	r2, r0
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	1ad3      	subs	r3, r2, r3
 800641c:	2b64      	cmp	r3, #100	; 0x64
 800641e:	d901      	bls.n	8006424 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8006420:	2303      	movs	r3, #3
 8006422:	e1c7      	b.n	80067b4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006424:	4b57      	ldr	r3, [pc, #348]	; (8006584 <HAL_RCC_OscConfig+0x270>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800642c:	2b00      	cmp	r3, #0
 800642e:	d1f0      	bne.n	8006412 <HAL_RCC_OscConfig+0xfe>
 8006430:	e000      	b.n	8006434 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006432:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 0302 	and.w	r3, r3, #2
 800643c:	2b00      	cmp	r3, #0
 800643e:	d06f      	beq.n	8006520 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006440:	4b50      	ldr	r3, [pc, #320]	; (8006584 <HAL_RCC_OscConfig+0x270>)
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	f003 030c 	and.w	r3, r3, #12
 8006448:	2b00      	cmp	r3, #0
 800644a:	d017      	beq.n	800647c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800644c:	4b4d      	ldr	r3, [pc, #308]	; (8006584 <HAL_RCC_OscConfig+0x270>)
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006454:	2b08      	cmp	r3, #8
 8006456:	d105      	bne.n	8006464 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006458:	4b4a      	ldr	r3, [pc, #296]	; (8006584 <HAL_RCC_OscConfig+0x270>)
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006460:	2b00      	cmp	r3, #0
 8006462:	d00b      	beq.n	800647c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006464:	4b47      	ldr	r3, [pc, #284]	; (8006584 <HAL_RCC_OscConfig+0x270>)
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800646c:	2b0c      	cmp	r3, #12
 800646e:	d11c      	bne.n	80064aa <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006470:	4b44      	ldr	r3, [pc, #272]	; (8006584 <HAL_RCC_OscConfig+0x270>)
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006478:	2b00      	cmp	r3, #0
 800647a:	d116      	bne.n	80064aa <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800647c:	4b41      	ldr	r3, [pc, #260]	; (8006584 <HAL_RCC_OscConfig+0x270>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 0302 	and.w	r3, r3, #2
 8006484:	2b00      	cmp	r3, #0
 8006486:	d005      	beq.n	8006494 <HAL_RCC_OscConfig+0x180>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	2b01      	cmp	r3, #1
 800648e:	d001      	beq.n	8006494 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	e18f      	b.n	80067b4 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006494:	4b3b      	ldr	r3, [pc, #236]	; (8006584 <HAL_RCC_OscConfig+0x270>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	691b      	ldr	r3, [r3, #16]
 80064a0:	00db      	lsls	r3, r3, #3
 80064a2:	4938      	ldr	r1, [pc, #224]	; (8006584 <HAL_RCC_OscConfig+0x270>)
 80064a4:	4313      	orrs	r3, r2
 80064a6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064a8:	e03a      	b.n	8006520 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d020      	beq.n	80064f4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064b2:	4b35      	ldr	r3, [pc, #212]	; (8006588 <HAL_RCC_OscConfig+0x274>)
 80064b4:	2201      	movs	r2, #1
 80064b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064b8:	f7fc fe62 	bl	8003180 <HAL_GetTick>
 80064bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064be:	e008      	b.n	80064d2 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064c0:	f7fc fe5e 	bl	8003180 <HAL_GetTick>
 80064c4:	4602      	mov	r2, r0
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	1ad3      	subs	r3, r2, r3
 80064ca:	2b02      	cmp	r3, #2
 80064cc:	d901      	bls.n	80064d2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80064ce:	2303      	movs	r3, #3
 80064d0:	e170      	b.n	80067b4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064d2:	4b2c      	ldr	r3, [pc, #176]	; (8006584 <HAL_RCC_OscConfig+0x270>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f003 0302 	and.w	r3, r3, #2
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d0f0      	beq.n	80064c0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064de:	4b29      	ldr	r3, [pc, #164]	; (8006584 <HAL_RCC_OscConfig+0x270>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	00db      	lsls	r3, r3, #3
 80064ec:	4925      	ldr	r1, [pc, #148]	; (8006584 <HAL_RCC_OscConfig+0x270>)
 80064ee:	4313      	orrs	r3, r2
 80064f0:	600b      	str	r3, [r1, #0]
 80064f2:	e015      	b.n	8006520 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064f4:	4b24      	ldr	r3, [pc, #144]	; (8006588 <HAL_RCC_OscConfig+0x274>)
 80064f6:	2200      	movs	r2, #0
 80064f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064fa:	f7fc fe41 	bl	8003180 <HAL_GetTick>
 80064fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006500:	e008      	b.n	8006514 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006502:	f7fc fe3d 	bl	8003180 <HAL_GetTick>
 8006506:	4602      	mov	r2, r0
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	1ad3      	subs	r3, r2, r3
 800650c:	2b02      	cmp	r3, #2
 800650e:	d901      	bls.n	8006514 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8006510:	2303      	movs	r3, #3
 8006512:	e14f      	b.n	80067b4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006514:	4b1b      	ldr	r3, [pc, #108]	; (8006584 <HAL_RCC_OscConfig+0x270>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 0302 	and.w	r3, r3, #2
 800651c:	2b00      	cmp	r3, #0
 800651e:	d1f0      	bne.n	8006502 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 0308 	and.w	r3, r3, #8
 8006528:	2b00      	cmp	r3, #0
 800652a:	d037      	beq.n	800659c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	695b      	ldr	r3, [r3, #20]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d016      	beq.n	8006562 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006534:	4b15      	ldr	r3, [pc, #84]	; (800658c <HAL_RCC_OscConfig+0x278>)
 8006536:	2201      	movs	r2, #1
 8006538:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800653a:	f7fc fe21 	bl	8003180 <HAL_GetTick>
 800653e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006540:	e008      	b.n	8006554 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006542:	f7fc fe1d 	bl	8003180 <HAL_GetTick>
 8006546:	4602      	mov	r2, r0
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	1ad3      	subs	r3, r2, r3
 800654c:	2b02      	cmp	r3, #2
 800654e:	d901      	bls.n	8006554 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006550:	2303      	movs	r3, #3
 8006552:	e12f      	b.n	80067b4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006554:	4b0b      	ldr	r3, [pc, #44]	; (8006584 <HAL_RCC_OscConfig+0x270>)
 8006556:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006558:	f003 0302 	and.w	r3, r3, #2
 800655c:	2b00      	cmp	r3, #0
 800655e:	d0f0      	beq.n	8006542 <HAL_RCC_OscConfig+0x22e>
 8006560:	e01c      	b.n	800659c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006562:	4b0a      	ldr	r3, [pc, #40]	; (800658c <HAL_RCC_OscConfig+0x278>)
 8006564:	2200      	movs	r2, #0
 8006566:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006568:	f7fc fe0a 	bl	8003180 <HAL_GetTick>
 800656c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800656e:	e00f      	b.n	8006590 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006570:	f7fc fe06 	bl	8003180 <HAL_GetTick>
 8006574:	4602      	mov	r2, r0
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	1ad3      	subs	r3, r2, r3
 800657a:	2b02      	cmp	r3, #2
 800657c:	d908      	bls.n	8006590 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800657e:	2303      	movs	r3, #3
 8006580:	e118      	b.n	80067b4 <HAL_RCC_OscConfig+0x4a0>
 8006582:	bf00      	nop
 8006584:	40023800 	.word	0x40023800
 8006588:	42470000 	.word	0x42470000
 800658c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006590:	4b8a      	ldr	r3, [pc, #552]	; (80067bc <HAL_RCC_OscConfig+0x4a8>)
 8006592:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006594:	f003 0302 	and.w	r3, r3, #2
 8006598:	2b00      	cmp	r3, #0
 800659a:	d1e9      	bne.n	8006570 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 0304 	and.w	r3, r3, #4
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	f000 8097 	beq.w	80066d8 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065aa:	2300      	movs	r3, #0
 80065ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065ae:	4b83      	ldr	r3, [pc, #524]	; (80067bc <HAL_RCC_OscConfig+0x4a8>)
 80065b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d10f      	bne.n	80065da <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065ba:	2300      	movs	r3, #0
 80065bc:	60fb      	str	r3, [r7, #12]
 80065be:	4b7f      	ldr	r3, [pc, #508]	; (80067bc <HAL_RCC_OscConfig+0x4a8>)
 80065c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c2:	4a7e      	ldr	r2, [pc, #504]	; (80067bc <HAL_RCC_OscConfig+0x4a8>)
 80065c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065c8:	6413      	str	r3, [r2, #64]	; 0x40
 80065ca:	4b7c      	ldr	r3, [pc, #496]	; (80067bc <HAL_RCC_OscConfig+0x4a8>)
 80065cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065d2:	60fb      	str	r3, [r7, #12]
 80065d4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80065d6:	2301      	movs	r3, #1
 80065d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065da:	4b79      	ldr	r3, [pc, #484]	; (80067c0 <HAL_RCC_OscConfig+0x4ac>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d118      	bne.n	8006618 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80065e6:	4b76      	ldr	r3, [pc, #472]	; (80067c0 <HAL_RCC_OscConfig+0x4ac>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a75      	ldr	r2, [pc, #468]	; (80067c0 <HAL_RCC_OscConfig+0x4ac>)
 80065ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065f2:	f7fc fdc5 	bl	8003180 <HAL_GetTick>
 80065f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065f8:	e008      	b.n	800660c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065fa:	f7fc fdc1 	bl	8003180 <HAL_GetTick>
 80065fe:	4602      	mov	r2, r0
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	1ad3      	subs	r3, r2, r3
 8006604:	2b02      	cmp	r3, #2
 8006606:	d901      	bls.n	800660c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006608:	2303      	movs	r3, #3
 800660a:	e0d3      	b.n	80067b4 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800660c:	4b6c      	ldr	r3, [pc, #432]	; (80067c0 <HAL_RCC_OscConfig+0x4ac>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006614:	2b00      	cmp	r3, #0
 8006616:	d0f0      	beq.n	80065fa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	2b01      	cmp	r3, #1
 800661e:	d106      	bne.n	800662e <HAL_RCC_OscConfig+0x31a>
 8006620:	4b66      	ldr	r3, [pc, #408]	; (80067bc <HAL_RCC_OscConfig+0x4a8>)
 8006622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006624:	4a65      	ldr	r2, [pc, #404]	; (80067bc <HAL_RCC_OscConfig+0x4a8>)
 8006626:	f043 0301 	orr.w	r3, r3, #1
 800662a:	6713      	str	r3, [r2, #112]	; 0x70
 800662c:	e01c      	b.n	8006668 <HAL_RCC_OscConfig+0x354>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	2b05      	cmp	r3, #5
 8006634:	d10c      	bne.n	8006650 <HAL_RCC_OscConfig+0x33c>
 8006636:	4b61      	ldr	r3, [pc, #388]	; (80067bc <HAL_RCC_OscConfig+0x4a8>)
 8006638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800663a:	4a60      	ldr	r2, [pc, #384]	; (80067bc <HAL_RCC_OscConfig+0x4a8>)
 800663c:	f043 0304 	orr.w	r3, r3, #4
 8006640:	6713      	str	r3, [r2, #112]	; 0x70
 8006642:	4b5e      	ldr	r3, [pc, #376]	; (80067bc <HAL_RCC_OscConfig+0x4a8>)
 8006644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006646:	4a5d      	ldr	r2, [pc, #372]	; (80067bc <HAL_RCC_OscConfig+0x4a8>)
 8006648:	f043 0301 	orr.w	r3, r3, #1
 800664c:	6713      	str	r3, [r2, #112]	; 0x70
 800664e:	e00b      	b.n	8006668 <HAL_RCC_OscConfig+0x354>
 8006650:	4b5a      	ldr	r3, [pc, #360]	; (80067bc <HAL_RCC_OscConfig+0x4a8>)
 8006652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006654:	4a59      	ldr	r2, [pc, #356]	; (80067bc <HAL_RCC_OscConfig+0x4a8>)
 8006656:	f023 0301 	bic.w	r3, r3, #1
 800665a:	6713      	str	r3, [r2, #112]	; 0x70
 800665c:	4b57      	ldr	r3, [pc, #348]	; (80067bc <HAL_RCC_OscConfig+0x4a8>)
 800665e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006660:	4a56      	ldr	r2, [pc, #344]	; (80067bc <HAL_RCC_OscConfig+0x4a8>)
 8006662:	f023 0304 	bic.w	r3, r3, #4
 8006666:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d015      	beq.n	800669c <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006670:	f7fc fd86 	bl	8003180 <HAL_GetTick>
 8006674:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006676:	e00a      	b.n	800668e <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006678:	f7fc fd82 	bl	8003180 <HAL_GetTick>
 800667c:	4602      	mov	r2, r0
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	1ad3      	subs	r3, r2, r3
 8006682:	f241 3288 	movw	r2, #5000	; 0x1388
 8006686:	4293      	cmp	r3, r2
 8006688:	d901      	bls.n	800668e <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800668a:	2303      	movs	r3, #3
 800668c:	e092      	b.n	80067b4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800668e:	4b4b      	ldr	r3, [pc, #300]	; (80067bc <HAL_RCC_OscConfig+0x4a8>)
 8006690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006692:	f003 0302 	and.w	r3, r3, #2
 8006696:	2b00      	cmp	r3, #0
 8006698:	d0ee      	beq.n	8006678 <HAL_RCC_OscConfig+0x364>
 800669a:	e014      	b.n	80066c6 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800669c:	f7fc fd70 	bl	8003180 <HAL_GetTick>
 80066a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066a2:	e00a      	b.n	80066ba <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066a4:	f7fc fd6c 	bl	8003180 <HAL_GetTick>
 80066a8:	4602      	mov	r2, r0
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	1ad3      	subs	r3, r2, r3
 80066ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d901      	bls.n	80066ba <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80066b6:	2303      	movs	r3, #3
 80066b8:	e07c      	b.n	80067b4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066ba:	4b40      	ldr	r3, [pc, #256]	; (80067bc <HAL_RCC_OscConfig+0x4a8>)
 80066bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066be:	f003 0302 	and.w	r3, r3, #2
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d1ee      	bne.n	80066a4 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80066c6:	7dfb      	ldrb	r3, [r7, #23]
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d105      	bne.n	80066d8 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066cc:	4b3b      	ldr	r3, [pc, #236]	; (80067bc <HAL_RCC_OscConfig+0x4a8>)
 80066ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d0:	4a3a      	ldr	r2, [pc, #232]	; (80067bc <HAL_RCC_OscConfig+0x4a8>)
 80066d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	699b      	ldr	r3, [r3, #24]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d068      	beq.n	80067b2 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80066e0:	4b36      	ldr	r3, [pc, #216]	; (80067bc <HAL_RCC_OscConfig+0x4a8>)
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	f003 030c 	and.w	r3, r3, #12
 80066e8:	2b08      	cmp	r3, #8
 80066ea:	d060      	beq.n	80067ae <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	699b      	ldr	r3, [r3, #24]
 80066f0:	2b02      	cmp	r3, #2
 80066f2:	d145      	bne.n	8006780 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066f4:	4b33      	ldr	r3, [pc, #204]	; (80067c4 <HAL_RCC_OscConfig+0x4b0>)
 80066f6:	2200      	movs	r2, #0
 80066f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066fa:	f7fc fd41 	bl	8003180 <HAL_GetTick>
 80066fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006700:	e008      	b.n	8006714 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006702:	f7fc fd3d 	bl	8003180 <HAL_GetTick>
 8006706:	4602      	mov	r2, r0
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	1ad3      	subs	r3, r2, r3
 800670c:	2b02      	cmp	r3, #2
 800670e:	d901      	bls.n	8006714 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8006710:	2303      	movs	r3, #3
 8006712:	e04f      	b.n	80067b4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006714:	4b29      	ldr	r3, [pc, #164]	; (80067bc <HAL_RCC_OscConfig+0x4a8>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800671c:	2b00      	cmp	r3, #0
 800671e:	d1f0      	bne.n	8006702 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	69da      	ldr	r2, [r3, #28]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6a1b      	ldr	r3, [r3, #32]
 8006728:	431a      	orrs	r2, r3
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672e:	019b      	lsls	r3, r3, #6
 8006730:	431a      	orrs	r2, r3
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006736:	085b      	lsrs	r3, r3, #1
 8006738:	3b01      	subs	r3, #1
 800673a:	041b      	lsls	r3, r3, #16
 800673c:	431a      	orrs	r2, r3
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006742:	061b      	lsls	r3, r3, #24
 8006744:	431a      	orrs	r2, r3
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800674a:	071b      	lsls	r3, r3, #28
 800674c:	491b      	ldr	r1, [pc, #108]	; (80067bc <HAL_RCC_OscConfig+0x4a8>)
 800674e:	4313      	orrs	r3, r2
 8006750:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006752:	4b1c      	ldr	r3, [pc, #112]	; (80067c4 <HAL_RCC_OscConfig+0x4b0>)
 8006754:	2201      	movs	r2, #1
 8006756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006758:	f7fc fd12 	bl	8003180 <HAL_GetTick>
 800675c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800675e:	e008      	b.n	8006772 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006760:	f7fc fd0e 	bl	8003180 <HAL_GetTick>
 8006764:	4602      	mov	r2, r0
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	1ad3      	subs	r3, r2, r3
 800676a:	2b02      	cmp	r3, #2
 800676c:	d901      	bls.n	8006772 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800676e:	2303      	movs	r3, #3
 8006770:	e020      	b.n	80067b4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006772:	4b12      	ldr	r3, [pc, #72]	; (80067bc <HAL_RCC_OscConfig+0x4a8>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800677a:	2b00      	cmp	r3, #0
 800677c:	d0f0      	beq.n	8006760 <HAL_RCC_OscConfig+0x44c>
 800677e:	e018      	b.n	80067b2 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006780:	4b10      	ldr	r3, [pc, #64]	; (80067c4 <HAL_RCC_OscConfig+0x4b0>)
 8006782:	2200      	movs	r2, #0
 8006784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006786:	f7fc fcfb 	bl	8003180 <HAL_GetTick>
 800678a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800678c:	e008      	b.n	80067a0 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800678e:	f7fc fcf7 	bl	8003180 <HAL_GetTick>
 8006792:	4602      	mov	r2, r0
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	1ad3      	subs	r3, r2, r3
 8006798:	2b02      	cmp	r3, #2
 800679a:	d901      	bls.n	80067a0 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 800679c:	2303      	movs	r3, #3
 800679e:	e009      	b.n	80067b4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067a0:	4b06      	ldr	r3, [pc, #24]	; (80067bc <HAL_RCC_OscConfig+0x4a8>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d1f0      	bne.n	800678e <HAL_RCC_OscConfig+0x47a>
 80067ac:	e001      	b.n	80067b2 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	e000      	b.n	80067b4 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80067b2:	2300      	movs	r3, #0
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3718      	adds	r7, #24
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}
 80067bc:	40023800 	.word	0x40023800
 80067c0:	40007000 	.word	0x40007000
 80067c4:	42470060 	.word	0x42470060

080067c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d101      	bne.n	80067da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e01d      	b.n	8006816 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d106      	bne.n	80067f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2200      	movs	r2, #0
 80067ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f7fc f91c 	bl	8002a2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2202      	movs	r2, #2
 80067f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	3304      	adds	r3, #4
 8006804:	4619      	mov	r1, r3
 8006806:	4610      	mov	r0, r2
 8006808:	f000 fb1c 	bl	8006e44 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006814:	2300      	movs	r3, #0
}
 8006816:	4618      	mov	r0, r3
 8006818:	3708      	adds	r7, #8
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}

0800681e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800681e:	b480      	push	{r7}
 8006820:	b085      	sub	sp, #20
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	68da      	ldr	r2, [r3, #12]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f042 0201 	orr.w	r2, r2, #1
 8006834:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	f003 0307 	and.w	r3, r3, #7
 8006840:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2b06      	cmp	r3, #6
 8006846:	d007      	beq.n	8006858 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f042 0201 	orr.w	r2, r2, #1
 8006856:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	3714      	adds	r7, #20
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr

08006866 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006866:	b580      	push	{r7, lr}
 8006868:	b082      	sub	sp, #8
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d101      	bne.n	8006878 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	e01d      	b.n	80068b4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800687e:	b2db      	uxtb	r3, r3
 8006880:	2b00      	cmp	r3, #0
 8006882:	d106      	bne.n	8006892 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f000 f815 	bl	80068bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2202      	movs	r2, #2
 8006896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	3304      	adds	r3, #4
 80068a2:	4619      	mov	r1, r3
 80068a4:	4610      	mov	r0, r2
 80068a6:	f000 facd 	bl	8006e44 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2201      	movs	r2, #1
 80068ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068b2:	2300      	movs	r3, #0
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3708      	adds	r7, #8
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80068c4:	bf00      	nop
 80068c6:	370c      	adds	r7, #12
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	f003 0302 	and.w	r3, r3, #2
 80068e2:	2b02      	cmp	r3, #2
 80068e4:	d122      	bne.n	800692c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	f003 0302 	and.w	r3, r3, #2
 80068f0:	2b02      	cmp	r3, #2
 80068f2:	d11b      	bne.n	800692c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f06f 0202 	mvn.w	r2, #2
 80068fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2201      	movs	r2, #1
 8006902:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	699b      	ldr	r3, [r3, #24]
 800690a:	f003 0303 	and.w	r3, r3, #3
 800690e:	2b00      	cmp	r3, #0
 8006910:	d003      	beq.n	800691a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 fa78 	bl	8006e08 <HAL_TIM_IC_CaptureCallback>
 8006918:	e005      	b.n	8006926 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 fa6a 	bl	8006df4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 fa7b 	bl	8006e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	f003 0304 	and.w	r3, r3, #4
 8006936:	2b04      	cmp	r3, #4
 8006938:	d122      	bne.n	8006980 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	f003 0304 	and.w	r3, r3, #4
 8006944:	2b04      	cmp	r3, #4
 8006946:	d11b      	bne.n	8006980 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f06f 0204 	mvn.w	r2, #4
 8006950:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2202      	movs	r2, #2
 8006956:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	699b      	ldr	r3, [r3, #24]
 800695e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006962:	2b00      	cmp	r3, #0
 8006964:	d003      	beq.n	800696e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 fa4e 	bl	8006e08 <HAL_TIM_IC_CaptureCallback>
 800696c:	e005      	b.n	800697a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 fa40 	bl	8006df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 fa51 	bl	8006e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	691b      	ldr	r3, [r3, #16]
 8006986:	f003 0308 	and.w	r3, r3, #8
 800698a:	2b08      	cmp	r3, #8
 800698c:	d122      	bne.n	80069d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	f003 0308 	and.w	r3, r3, #8
 8006998:	2b08      	cmp	r3, #8
 800699a:	d11b      	bne.n	80069d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f06f 0208 	mvn.w	r2, #8
 80069a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2204      	movs	r2, #4
 80069aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	69db      	ldr	r3, [r3, #28]
 80069b2:	f003 0303 	and.w	r3, r3, #3
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d003      	beq.n	80069c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 fa24 	bl	8006e08 <HAL_TIM_IC_CaptureCallback>
 80069c0:	e005      	b.n	80069ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 fa16 	bl	8006df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f000 fa27 	bl	8006e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2200      	movs	r2, #0
 80069d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	691b      	ldr	r3, [r3, #16]
 80069da:	f003 0310 	and.w	r3, r3, #16
 80069de:	2b10      	cmp	r3, #16
 80069e0:	d122      	bne.n	8006a28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	f003 0310 	and.w	r3, r3, #16
 80069ec:	2b10      	cmp	r3, #16
 80069ee:	d11b      	bne.n	8006a28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f06f 0210 	mvn.w	r2, #16
 80069f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2208      	movs	r2, #8
 80069fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	69db      	ldr	r3, [r3, #28]
 8006a06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d003      	beq.n	8006a16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 f9fa 	bl	8006e08 <HAL_TIM_IC_CaptureCallback>
 8006a14:	e005      	b.n	8006a22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 f9ec 	bl	8006df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 f9fd 	bl	8006e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2200      	movs	r2, #0
 8006a26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	f003 0301 	and.w	r3, r3, #1
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d10e      	bne.n	8006a54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	f003 0301 	and.w	r3, r3, #1
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d107      	bne.n	8006a54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f06f 0201 	mvn.w	r2, #1
 8006a4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f7fb fc96 	bl	8002380 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	691b      	ldr	r3, [r3, #16]
 8006a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a5e:	2b80      	cmp	r3, #128	; 0x80
 8006a60:	d10e      	bne.n	8006a80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a6c:	2b80      	cmp	r3, #128	; 0x80
 8006a6e:	d107      	bne.n	8006a80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f000 fdce 	bl	800761c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	691b      	ldr	r3, [r3, #16]
 8006a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a8a:	2b40      	cmp	r3, #64	; 0x40
 8006a8c:	d10e      	bne.n	8006aac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	68db      	ldr	r3, [r3, #12]
 8006a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a98:	2b40      	cmp	r3, #64	; 0x40
 8006a9a:	d107      	bne.n	8006aac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006aa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 f9c2 	bl	8006e30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	691b      	ldr	r3, [r3, #16]
 8006ab2:	f003 0320 	and.w	r3, r3, #32
 8006ab6:	2b20      	cmp	r3, #32
 8006ab8:	d10e      	bne.n	8006ad8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	f003 0320 	and.w	r3, r3, #32
 8006ac4:	2b20      	cmp	r3, #32
 8006ac6:	d107      	bne.n	8006ad8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f06f 0220 	mvn.w	r2, #32
 8006ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 fd98 	bl	8007608 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ad8:	bf00      	nop
 8006ada:	3708      	adds	r7, #8
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b084      	sub	sp, #16
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	60f8      	str	r0, [r7, #12]
 8006ae8:	60b9      	str	r1, [r7, #8]
 8006aea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d101      	bne.n	8006afa <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006af6:	2302      	movs	r3, #2
 8006af8:	e0b4      	b.n	8006c64 <HAL_TIM_PWM_ConfigChannel+0x184>
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2201      	movs	r2, #1
 8006afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2202      	movs	r2, #2
 8006b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2b0c      	cmp	r3, #12
 8006b0e:	f200 809f 	bhi.w	8006c50 <HAL_TIM_PWM_ConfigChannel+0x170>
 8006b12:	a201      	add	r2, pc, #4	; (adr r2, 8006b18 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b18:	08006b4d 	.word	0x08006b4d
 8006b1c:	08006c51 	.word	0x08006c51
 8006b20:	08006c51 	.word	0x08006c51
 8006b24:	08006c51 	.word	0x08006c51
 8006b28:	08006b8d 	.word	0x08006b8d
 8006b2c:	08006c51 	.word	0x08006c51
 8006b30:	08006c51 	.word	0x08006c51
 8006b34:	08006c51 	.word	0x08006c51
 8006b38:	08006bcf 	.word	0x08006bcf
 8006b3c:	08006c51 	.word	0x08006c51
 8006b40:	08006c51 	.word	0x08006c51
 8006b44:	08006c51 	.word	0x08006c51
 8006b48:	08006c0f 	.word	0x08006c0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	68b9      	ldr	r1, [r7, #8]
 8006b52:	4618      	mov	r0, r3
 8006b54:	f000 fa16 	bl	8006f84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	699a      	ldr	r2, [r3, #24]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f042 0208 	orr.w	r2, r2, #8
 8006b66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	699a      	ldr	r2, [r3, #24]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f022 0204 	bic.w	r2, r2, #4
 8006b76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	6999      	ldr	r1, [r3, #24]
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	691a      	ldr	r2, [r3, #16]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	430a      	orrs	r2, r1
 8006b88:	619a      	str	r2, [r3, #24]
      break;
 8006b8a:	e062      	b.n	8006c52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	68b9      	ldr	r1, [r7, #8]
 8006b92:	4618      	mov	r0, r3
 8006b94:	f000 fa66 	bl	8007064 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	699a      	ldr	r2, [r3, #24]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ba6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	699a      	ldr	r2, [r3, #24]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	6999      	ldr	r1, [r3, #24]
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	021a      	lsls	r2, r3, #8
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	430a      	orrs	r2, r1
 8006bca:	619a      	str	r2, [r3, #24]
      break;
 8006bcc:	e041      	b.n	8006c52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	68b9      	ldr	r1, [r7, #8]
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f000 fabb 	bl	8007150 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	69da      	ldr	r2, [r3, #28]
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f042 0208 	orr.w	r2, r2, #8
 8006be8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	69da      	ldr	r2, [r3, #28]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f022 0204 	bic.w	r2, r2, #4
 8006bf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	69d9      	ldr	r1, [r3, #28]
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	691a      	ldr	r2, [r3, #16]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	430a      	orrs	r2, r1
 8006c0a:	61da      	str	r2, [r3, #28]
      break;
 8006c0c:	e021      	b.n	8006c52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	68b9      	ldr	r1, [r7, #8]
 8006c14:	4618      	mov	r0, r3
 8006c16:	f000 fb0f 	bl	8007238 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	69da      	ldr	r2, [r3, #28]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	69da      	ldr	r2, [r3, #28]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	69d9      	ldr	r1, [r3, #28]
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	691b      	ldr	r3, [r3, #16]
 8006c44:	021a      	lsls	r2, r3, #8
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	430a      	orrs	r2, r1
 8006c4c:	61da      	str	r2, [r3, #28]
      break;
 8006c4e:	e000      	b.n	8006c52 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006c50:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2201      	movs	r2, #1
 8006c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c62:	2300      	movs	r3, #0
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3710      	adds	r7, #16
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b084      	sub	sp, #16
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d101      	bne.n	8006c84 <HAL_TIM_ConfigClockSource+0x18>
 8006c80:	2302      	movs	r3, #2
 8006c82:	e0b3      	b.n	8006dec <HAL_TIM_ConfigClockSource+0x180>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2201      	movs	r2, #1
 8006c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2202      	movs	r2, #2
 8006c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006ca2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006caa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	68fa      	ldr	r2, [r7, #12]
 8006cb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cbc:	d03e      	beq.n	8006d3c <HAL_TIM_ConfigClockSource+0xd0>
 8006cbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cc2:	f200 8087 	bhi.w	8006dd4 <HAL_TIM_ConfigClockSource+0x168>
 8006cc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cca:	f000 8085 	beq.w	8006dd8 <HAL_TIM_ConfigClockSource+0x16c>
 8006cce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cd2:	d87f      	bhi.n	8006dd4 <HAL_TIM_ConfigClockSource+0x168>
 8006cd4:	2b70      	cmp	r3, #112	; 0x70
 8006cd6:	d01a      	beq.n	8006d0e <HAL_TIM_ConfigClockSource+0xa2>
 8006cd8:	2b70      	cmp	r3, #112	; 0x70
 8006cda:	d87b      	bhi.n	8006dd4 <HAL_TIM_ConfigClockSource+0x168>
 8006cdc:	2b60      	cmp	r3, #96	; 0x60
 8006cde:	d050      	beq.n	8006d82 <HAL_TIM_ConfigClockSource+0x116>
 8006ce0:	2b60      	cmp	r3, #96	; 0x60
 8006ce2:	d877      	bhi.n	8006dd4 <HAL_TIM_ConfigClockSource+0x168>
 8006ce4:	2b50      	cmp	r3, #80	; 0x50
 8006ce6:	d03c      	beq.n	8006d62 <HAL_TIM_ConfigClockSource+0xf6>
 8006ce8:	2b50      	cmp	r3, #80	; 0x50
 8006cea:	d873      	bhi.n	8006dd4 <HAL_TIM_ConfigClockSource+0x168>
 8006cec:	2b40      	cmp	r3, #64	; 0x40
 8006cee:	d058      	beq.n	8006da2 <HAL_TIM_ConfigClockSource+0x136>
 8006cf0:	2b40      	cmp	r3, #64	; 0x40
 8006cf2:	d86f      	bhi.n	8006dd4 <HAL_TIM_ConfigClockSource+0x168>
 8006cf4:	2b30      	cmp	r3, #48	; 0x30
 8006cf6:	d064      	beq.n	8006dc2 <HAL_TIM_ConfigClockSource+0x156>
 8006cf8:	2b30      	cmp	r3, #48	; 0x30
 8006cfa:	d86b      	bhi.n	8006dd4 <HAL_TIM_ConfigClockSource+0x168>
 8006cfc:	2b20      	cmp	r3, #32
 8006cfe:	d060      	beq.n	8006dc2 <HAL_TIM_ConfigClockSource+0x156>
 8006d00:	2b20      	cmp	r3, #32
 8006d02:	d867      	bhi.n	8006dd4 <HAL_TIM_ConfigClockSource+0x168>
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d05c      	beq.n	8006dc2 <HAL_TIM_ConfigClockSource+0x156>
 8006d08:	2b10      	cmp	r3, #16
 8006d0a:	d05a      	beq.n	8006dc2 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006d0c:	e062      	b.n	8006dd4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6818      	ldr	r0, [r3, #0]
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	6899      	ldr	r1, [r3, #8]
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	685a      	ldr	r2, [r3, #4]
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	68db      	ldr	r3, [r3, #12]
 8006d1e:	f000 fb5b 	bl	80073d8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006d30:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	68fa      	ldr	r2, [r7, #12]
 8006d38:	609a      	str	r2, [r3, #8]
      break;
 8006d3a:	e04e      	b.n	8006dda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6818      	ldr	r0, [r3, #0]
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	6899      	ldr	r1, [r3, #8]
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	685a      	ldr	r2, [r3, #4]
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	f000 fb44 	bl	80073d8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	689a      	ldr	r2, [r3, #8]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d5e:	609a      	str	r2, [r3, #8]
      break;
 8006d60:	e03b      	b.n	8006dda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6818      	ldr	r0, [r3, #0]
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	6859      	ldr	r1, [r3, #4]
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	68db      	ldr	r3, [r3, #12]
 8006d6e:	461a      	mov	r2, r3
 8006d70:	f000 fab8 	bl	80072e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2150      	movs	r1, #80	; 0x50
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f000 fb11 	bl	80073a2 <TIM_ITRx_SetConfig>
      break;
 8006d80:	e02b      	b.n	8006dda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6818      	ldr	r0, [r3, #0]
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	6859      	ldr	r1, [r3, #4]
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	68db      	ldr	r3, [r3, #12]
 8006d8e:	461a      	mov	r2, r3
 8006d90:	f000 fad7 	bl	8007342 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	2160      	movs	r1, #96	; 0x60
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f000 fb01 	bl	80073a2 <TIM_ITRx_SetConfig>
      break;
 8006da0:	e01b      	b.n	8006dda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6818      	ldr	r0, [r3, #0]
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	6859      	ldr	r1, [r3, #4]
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	461a      	mov	r2, r3
 8006db0:	f000 fa98 	bl	80072e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	2140      	movs	r1, #64	; 0x40
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f000 faf1 	bl	80073a2 <TIM_ITRx_SetConfig>
      break;
 8006dc0:	e00b      	b.n	8006dda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4619      	mov	r1, r3
 8006dcc:	4610      	mov	r0, r2
 8006dce:	f000 fae8 	bl	80073a2 <TIM_ITRx_SetConfig>
      break;
 8006dd2:	e002      	b.n	8006dda <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006dd4:	bf00      	nop
 8006dd6:	e000      	b.n	8006dda <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006dd8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2201      	movs	r2, #1
 8006dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2200      	movs	r2, #0
 8006de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006dea:	2300      	movs	r3, #0
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3710      	adds	r7, #16
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006dfc:	bf00      	nop
 8006dfe:	370c      	adds	r7, #12
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b083      	sub	sp, #12
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e10:	bf00      	nop
 8006e12:	370c      	adds	r7, #12
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e24:	bf00      	nop
 8006e26:	370c      	adds	r7, #12
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr

08006e30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b083      	sub	sp, #12
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e38:	bf00      	nop
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b085      	sub	sp, #20
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	4a40      	ldr	r2, [pc, #256]	; (8006f58 <TIM_Base_SetConfig+0x114>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d013      	beq.n	8006e84 <TIM_Base_SetConfig+0x40>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e62:	d00f      	beq.n	8006e84 <TIM_Base_SetConfig+0x40>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	4a3d      	ldr	r2, [pc, #244]	; (8006f5c <TIM_Base_SetConfig+0x118>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d00b      	beq.n	8006e84 <TIM_Base_SetConfig+0x40>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	4a3c      	ldr	r2, [pc, #240]	; (8006f60 <TIM_Base_SetConfig+0x11c>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d007      	beq.n	8006e84 <TIM_Base_SetConfig+0x40>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	4a3b      	ldr	r2, [pc, #236]	; (8006f64 <TIM_Base_SetConfig+0x120>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d003      	beq.n	8006e84 <TIM_Base_SetConfig+0x40>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	4a3a      	ldr	r2, [pc, #232]	; (8006f68 <TIM_Base_SetConfig+0x124>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d108      	bne.n	8006e96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	68fa      	ldr	r2, [r7, #12]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	4a2f      	ldr	r2, [pc, #188]	; (8006f58 <TIM_Base_SetConfig+0x114>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d02b      	beq.n	8006ef6 <TIM_Base_SetConfig+0xb2>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ea4:	d027      	beq.n	8006ef6 <TIM_Base_SetConfig+0xb2>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	4a2c      	ldr	r2, [pc, #176]	; (8006f5c <TIM_Base_SetConfig+0x118>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d023      	beq.n	8006ef6 <TIM_Base_SetConfig+0xb2>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4a2b      	ldr	r2, [pc, #172]	; (8006f60 <TIM_Base_SetConfig+0x11c>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d01f      	beq.n	8006ef6 <TIM_Base_SetConfig+0xb2>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	4a2a      	ldr	r2, [pc, #168]	; (8006f64 <TIM_Base_SetConfig+0x120>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d01b      	beq.n	8006ef6 <TIM_Base_SetConfig+0xb2>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	4a29      	ldr	r2, [pc, #164]	; (8006f68 <TIM_Base_SetConfig+0x124>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d017      	beq.n	8006ef6 <TIM_Base_SetConfig+0xb2>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	4a28      	ldr	r2, [pc, #160]	; (8006f6c <TIM_Base_SetConfig+0x128>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d013      	beq.n	8006ef6 <TIM_Base_SetConfig+0xb2>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	4a27      	ldr	r2, [pc, #156]	; (8006f70 <TIM_Base_SetConfig+0x12c>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d00f      	beq.n	8006ef6 <TIM_Base_SetConfig+0xb2>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	4a26      	ldr	r2, [pc, #152]	; (8006f74 <TIM_Base_SetConfig+0x130>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d00b      	beq.n	8006ef6 <TIM_Base_SetConfig+0xb2>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	4a25      	ldr	r2, [pc, #148]	; (8006f78 <TIM_Base_SetConfig+0x134>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d007      	beq.n	8006ef6 <TIM_Base_SetConfig+0xb2>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	4a24      	ldr	r2, [pc, #144]	; (8006f7c <TIM_Base_SetConfig+0x138>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d003      	beq.n	8006ef6 <TIM_Base_SetConfig+0xb2>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4a23      	ldr	r2, [pc, #140]	; (8006f80 <TIM_Base_SetConfig+0x13c>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d108      	bne.n	8006f08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006efc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	68fa      	ldr	r2, [r7, #12]
 8006f04:	4313      	orrs	r3, r2
 8006f06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	695b      	ldr	r3, [r3, #20]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	68fa      	ldr	r2, [r7, #12]
 8006f1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	689a      	ldr	r2, [r3, #8]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	4a0a      	ldr	r2, [pc, #40]	; (8006f58 <TIM_Base_SetConfig+0x114>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d003      	beq.n	8006f3c <TIM_Base_SetConfig+0xf8>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	4a0c      	ldr	r2, [pc, #48]	; (8006f68 <TIM_Base_SetConfig+0x124>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d103      	bne.n	8006f44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	691a      	ldr	r2, [r3, #16]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2201      	movs	r2, #1
 8006f48:	615a      	str	r2, [r3, #20]
}
 8006f4a:	bf00      	nop
 8006f4c:	3714      	adds	r7, #20
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr
 8006f56:	bf00      	nop
 8006f58:	40010000 	.word	0x40010000
 8006f5c:	40000400 	.word	0x40000400
 8006f60:	40000800 	.word	0x40000800
 8006f64:	40000c00 	.word	0x40000c00
 8006f68:	40010400 	.word	0x40010400
 8006f6c:	40014000 	.word	0x40014000
 8006f70:	40014400 	.word	0x40014400
 8006f74:	40014800 	.word	0x40014800
 8006f78:	40001800 	.word	0x40001800
 8006f7c:	40001c00 	.word	0x40001c00
 8006f80:	40002000 	.word	0x40002000

08006f84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b087      	sub	sp, #28
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a1b      	ldr	r3, [r3, #32]
 8006f92:	f023 0201 	bic.w	r2, r3, #1
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6a1b      	ldr	r3, [r3, #32]
 8006f9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	699b      	ldr	r3, [r3, #24]
 8006faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f023 0303 	bic.w	r3, r3, #3
 8006fba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	68fa      	ldr	r2, [r7, #12]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	f023 0302 	bic.w	r3, r3, #2
 8006fcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	697a      	ldr	r2, [r7, #20]
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4a20      	ldr	r2, [pc, #128]	; (800705c <TIM_OC1_SetConfig+0xd8>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d003      	beq.n	8006fe8 <TIM_OC1_SetConfig+0x64>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	4a1f      	ldr	r2, [pc, #124]	; (8007060 <TIM_OC1_SetConfig+0xdc>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d10c      	bne.n	8007002 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	f023 0308 	bic.w	r3, r3, #8
 8006fee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	68db      	ldr	r3, [r3, #12]
 8006ff4:	697a      	ldr	r2, [r7, #20]
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	f023 0304 	bic.w	r3, r3, #4
 8007000:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4a15      	ldr	r2, [pc, #84]	; (800705c <TIM_OC1_SetConfig+0xd8>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d003      	beq.n	8007012 <TIM_OC1_SetConfig+0x8e>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	4a14      	ldr	r2, [pc, #80]	; (8007060 <TIM_OC1_SetConfig+0xdc>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d111      	bne.n	8007036 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007018:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007020:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	695b      	ldr	r3, [r3, #20]
 8007026:	693a      	ldr	r2, [r7, #16]
 8007028:	4313      	orrs	r3, r2
 800702a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	699b      	ldr	r3, [r3, #24]
 8007030:	693a      	ldr	r2, [r7, #16]
 8007032:	4313      	orrs	r3, r2
 8007034:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	693a      	ldr	r2, [r7, #16]
 800703a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	68fa      	ldr	r2, [r7, #12]
 8007040:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	685a      	ldr	r2, [r3, #4]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	697a      	ldr	r2, [r7, #20]
 800704e:	621a      	str	r2, [r3, #32]
}
 8007050:	bf00      	nop
 8007052:	371c      	adds	r7, #28
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr
 800705c:	40010000 	.word	0x40010000
 8007060:	40010400 	.word	0x40010400

08007064 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007064:	b480      	push	{r7}
 8007066:	b087      	sub	sp, #28
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6a1b      	ldr	r3, [r3, #32]
 8007072:	f023 0210 	bic.w	r2, r3, #16
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6a1b      	ldr	r3, [r3, #32]
 800707e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	699b      	ldr	r3, [r3, #24]
 800708a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800709a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	021b      	lsls	r3, r3, #8
 80070a2:	68fa      	ldr	r2, [r7, #12]
 80070a4:	4313      	orrs	r3, r2
 80070a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	f023 0320 	bic.w	r3, r3, #32
 80070ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	011b      	lsls	r3, r3, #4
 80070b6:	697a      	ldr	r2, [r7, #20]
 80070b8:	4313      	orrs	r3, r2
 80070ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	4a22      	ldr	r2, [pc, #136]	; (8007148 <TIM_OC2_SetConfig+0xe4>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d003      	beq.n	80070cc <TIM_OC2_SetConfig+0x68>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	4a21      	ldr	r2, [pc, #132]	; (800714c <TIM_OC2_SetConfig+0xe8>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d10d      	bne.n	80070e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	011b      	lsls	r3, r3, #4
 80070da:	697a      	ldr	r2, [r7, #20]
 80070dc:	4313      	orrs	r3, r2
 80070de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	4a17      	ldr	r2, [pc, #92]	; (8007148 <TIM_OC2_SetConfig+0xe4>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d003      	beq.n	80070f8 <TIM_OC2_SetConfig+0x94>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	4a16      	ldr	r2, [pc, #88]	; (800714c <TIM_OC2_SetConfig+0xe8>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d113      	bne.n	8007120 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007106:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	695b      	ldr	r3, [r3, #20]
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	693a      	ldr	r2, [r7, #16]
 8007110:	4313      	orrs	r3, r2
 8007112:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	699b      	ldr	r3, [r3, #24]
 8007118:	009b      	lsls	r3, r3, #2
 800711a:	693a      	ldr	r2, [r7, #16]
 800711c:	4313      	orrs	r3, r2
 800711e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	693a      	ldr	r2, [r7, #16]
 8007124:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	68fa      	ldr	r2, [r7, #12]
 800712a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	685a      	ldr	r2, [r3, #4]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	697a      	ldr	r2, [r7, #20]
 8007138:	621a      	str	r2, [r3, #32]
}
 800713a:	bf00      	nop
 800713c:	371c      	adds	r7, #28
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr
 8007146:	bf00      	nop
 8007148:	40010000 	.word	0x40010000
 800714c:	40010400 	.word	0x40010400

08007150 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007150:	b480      	push	{r7}
 8007152:	b087      	sub	sp, #28
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6a1b      	ldr	r3, [r3, #32]
 800715e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6a1b      	ldr	r3, [r3, #32]
 800716a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	69db      	ldr	r3, [r3, #28]
 8007176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800717e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f023 0303 	bic.w	r3, r3, #3
 8007186:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	68fa      	ldr	r2, [r7, #12]
 800718e:	4313      	orrs	r3, r2
 8007190:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007198:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	021b      	lsls	r3, r3, #8
 80071a0:	697a      	ldr	r2, [r7, #20]
 80071a2:	4313      	orrs	r3, r2
 80071a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	4a21      	ldr	r2, [pc, #132]	; (8007230 <TIM_OC3_SetConfig+0xe0>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d003      	beq.n	80071b6 <TIM_OC3_SetConfig+0x66>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	4a20      	ldr	r2, [pc, #128]	; (8007234 <TIM_OC3_SetConfig+0xe4>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d10d      	bne.n	80071d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80071bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	68db      	ldr	r3, [r3, #12]
 80071c2:	021b      	lsls	r3, r3, #8
 80071c4:	697a      	ldr	r2, [r7, #20]
 80071c6:	4313      	orrs	r3, r2
 80071c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80071d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	4a16      	ldr	r2, [pc, #88]	; (8007230 <TIM_OC3_SetConfig+0xe0>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d003      	beq.n	80071e2 <TIM_OC3_SetConfig+0x92>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4a15      	ldr	r2, [pc, #84]	; (8007234 <TIM_OC3_SetConfig+0xe4>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d113      	bne.n	800720a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	695b      	ldr	r3, [r3, #20]
 80071f6:	011b      	lsls	r3, r3, #4
 80071f8:	693a      	ldr	r2, [r7, #16]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	699b      	ldr	r3, [r3, #24]
 8007202:	011b      	lsls	r3, r3, #4
 8007204:	693a      	ldr	r2, [r7, #16]
 8007206:	4313      	orrs	r3, r2
 8007208:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	693a      	ldr	r2, [r7, #16]
 800720e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	68fa      	ldr	r2, [r7, #12]
 8007214:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	685a      	ldr	r2, [r3, #4]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	697a      	ldr	r2, [r7, #20]
 8007222:	621a      	str	r2, [r3, #32]
}
 8007224:	bf00      	nop
 8007226:	371c      	adds	r7, #28
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr
 8007230:	40010000 	.word	0x40010000
 8007234:	40010400 	.word	0x40010400

08007238 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007238:	b480      	push	{r7}
 800723a:	b087      	sub	sp, #28
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6a1b      	ldr	r3, [r3, #32]
 8007246:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6a1b      	ldr	r3, [r3, #32]
 8007252:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	69db      	ldr	r3, [r3, #28]
 800725e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007266:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800726e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	021b      	lsls	r3, r3, #8
 8007276:	68fa      	ldr	r2, [r7, #12]
 8007278:	4313      	orrs	r3, r2
 800727a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007282:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	031b      	lsls	r3, r3, #12
 800728a:	693a      	ldr	r2, [r7, #16]
 800728c:	4313      	orrs	r3, r2
 800728e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	4a12      	ldr	r2, [pc, #72]	; (80072dc <TIM_OC4_SetConfig+0xa4>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d003      	beq.n	80072a0 <TIM_OC4_SetConfig+0x68>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	4a11      	ldr	r2, [pc, #68]	; (80072e0 <TIM_OC4_SetConfig+0xa8>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d109      	bne.n	80072b4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	695b      	ldr	r3, [r3, #20]
 80072ac:	019b      	lsls	r3, r3, #6
 80072ae:	697a      	ldr	r2, [r7, #20]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	697a      	ldr	r2, [r7, #20]
 80072b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	68fa      	ldr	r2, [r7, #12]
 80072be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	685a      	ldr	r2, [r3, #4]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	693a      	ldr	r2, [r7, #16]
 80072cc:	621a      	str	r2, [r3, #32]
}
 80072ce:	bf00      	nop
 80072d0:	371c      	adds	r7, #28
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr
 80072da:	bf00      	nop
 80072dc:	40010000 	.word	0x40010000
 80072e0:	40010400 	.word	0x40010400

080072e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b087      	sub	sp, #28
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	6a1b      	ldr	r3, [r3, #32]
 80072f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	6a1b      	ldr	r3, [r3, #32]
 80072fa:	f023 0201 	bic.w	r2, r3, #1
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	699b      	ldr	r3, [r3, #24]
 8007306:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800730e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	011b      	lsls	r3, r3, #4
 8007314:	693a      	ldr	r2, [r7, #16]
 8007316:	4313      	orrs	r3, r2
 8007318:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	f023 030a 	bic.w	r3, r3, #10
 8007320:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007322:	697a      	ldr	r2, [r7, #20]
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	4313      	orrs	r3, r2
 8007328:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	693a      	ldr	r2, [r7, #16]
 800732e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	697a      	ldr	r2, [r7, #20]
 8007334:	621a      	str	r2, [r3, #32]
}
 8007336:	bf00      	nop
 8007338:	371c      	adds	r7, #28
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr

08007342 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007342:	b480      	push	{r7}
 8007344:	b087      	sub	sp, #28
 8007346:	af00      	add	r7, sp, #0
 8007348:	60f8      	str	r0, [r7, #12]
 800734a:	60b9      	str	r1, [r7, #8]
 800734c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	6a1b      	ldr	r3, [r3, #32]
 8007352:	f023 0210 	bic.w	r2, r3, #16
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	699b      	ldr	r3, [r3, #24]
 800735e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	6a1b      	ldr	r3, [r3, #32]
 8007364:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800736c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	031b      	lsls	r3, r3, #12
 8007372:	697a      	ldr	r2, [r7, #20]
 8007374:	4313      	orrs	r3, r2
 8007376:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800737e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	011b      	lsls	r3, r3, #4
 8007384:	693a      	ldr	r2, [r7, #16]
 8007386:	4313      	orrs	r3, r2
 8007388:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	697a      	ldr	r2, [r7, #20]
 800738e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	693a      	ldr	r2, [r7, #16]
 8007394:	621a      	str	r2, [r3, #32]
}
 8007396:	bf00      	nop
 8007398:	371c      	adds	r7, #28
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr

080073a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80073a2:	b480      	push	{r7}
 80073a4:	b085      	sub	sp, #20
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
 80073aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80073ba:	683a      	ldr	r2, [r7, #0]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	4313      	orrs	r3, r2
 80073c0:	f043 0307 	orr.w	r3, r3, #7
 80073c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	68fa      	ldr	r2, [r7, #12]
 80073ca:	609a      	str	r2, [r3, #8]
}
 80073cc:	bf00      	nop
 80073ce:	3714      	adds	r7, #20
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr

080073d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80073d8:	b480      	push	{r7}
 80073da:	b087      	sub	sp, #28
 80073dc:	af00      	add	r7, sp, #0
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	607a      	str	r2, [r7, #4]
 80073e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	689b      	ldr	r3, [r3, #8]
 80073ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	021a      	lsls	r2, r3, #8
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	431a      	orrs	r2, r3
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	4313      	orrs	r3, r2
 8007400:	697a      	ldr	r2, [r7, #20]
 8007402:	4313      	orrs	r3, r2
 8007404:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	697a      	ldr	r2, [r7, #20]
 800740a:	609a      	str	r2, [r3, #8]
}
 800740c:	bf00      	nop
 800740e:	371c      	adds	r7, #28
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr

08007418 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b084      	sub	sp, #16
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	2204      	movs	r2, #4
 8007428:	6839      	ldr	r1, [r7, #0]
 800742a:	4618      	mov	r0, r3
 800742c:	f000 f900 	bl	8007630 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800743e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	f003 0307 	and.w	r3, r3, #7
 800744a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2b06      	cmp	r3, #6
 8007450:	d007      	beq.n	8007462 <HAL_TIMEx_PWMN_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f042 0201 	orr.w	r2, r2, #1
 8007460:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007462:	2300      	movs	r3, #0
}
 8007464:	4618      	mov	r0, r3
 8007466:	3710      	adds	r7, #16
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}

0800746c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800746c:	b480      	push	{r7}
 800746e:	b085      	sub	sp, #20
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800747c:	2b01      	cmp	r3, #1
 800747e:	d101      	bne.n	8007484 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007480:	2302      	movs	r3, #2
 8007482:	e05a      	b.n	800753a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2201      	movs	r2, #1
 8007488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2202      	movs	r2, #2
 8007490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	68fa      	ldr	r2, [r7, #12]
 80074b2:	4313      	orrs	r3, r2
 80074b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	68fa      	ldr	r2, [r7, #12]
 80074bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a21      	ldr	r2, [pc, #132]	; (8007548 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d022      	beq.n	800750e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074d0:	d01d      	beq.n	800750e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a1d      	ldr	r2, [pc, #116]	; (800754c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d018      	beq.n	800750e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a1b      	ldr	r2, [pc, #108]	; (8007550 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d013      	beq.n	800750e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a1a      	ldr	r2, [pc, #104]	; (8007554 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d00e      	beq.n	800750e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a18      	ldr	r2, [pc, #96]	; (8007558 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d009      	beq.n	800750e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a17      	ldr	r2, [pc, #92]	; (800755c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d004      	beq.n	800750e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a15      	ldr	r2, [pc, #84]	; (8007560 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d10c      	bne.n	8007528 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007514:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	68ba      	ldr	r2, [r7, #8]
 800751c:	4313      	orrs	r3, r2
 800751e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	68ba      	ldr	r2, [r7, #8]
 8007526:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2201      	movs	r2, #1
 800752c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	3714      	adds	r7, #20
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr
 8007546:	bf00      	nop
 8007548:	40010000 	.word	0x40010000
 800754c:	40000400 	.word	0x40000400
 8007550:	40000800 	.word	0x40000800
 8007554:	40000c00 	.word	0x40000c00
 8007558:	40010400 	.word	0x40010400
 800755c:	40014000 	.word	0x40014000
 8007560:	40001800 	.word	0x40001800

08007564 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007564:	b480      	push	{r7}
 8007566:	b085      	sub	sp, #20
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800756e:	2300      	movs	r3, #0
 8007570:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007578:	2b01      	cmp	r3, #1
 800757a:	d101      	bne.n	8007580 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800757c:	2302      	movs	r3, #2
 800757e:	e03d      	b.n	80075fc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2201      	movs	r2, #1
 8007584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	68db      	ldr	r3, [r3, #12]
 8007592:	4313      	orrs	r3, r2
 8007594:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	4313      	orrs	r3, r2
 80075a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4313      	orrs	r3, r2
 80075be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	691b      	ldr	r3, [r3, #16]
 80075ca:	4313      	orrs	r3, r2
 80075cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	695b      	ldr	r3, [r3, #20]
 80075d8:	4313      	orrs	r3, r2
 80075da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	69db      	ldr	r3, [r3, #28]
 80075e6:	4313      	orrs	r3, r2
 80075e8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	68fa      	ldr	r2, [r7, #12]
 80075f0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2200      	movs	r2, #0
 80075f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075fa:	2300      	movs	r3, #0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3714      	adds	r7, #20
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr

08007608 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007608:	b480      	push	{r7}
 800760a:	b083      	sub	sp, #12
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007610:	bf00      	nop
 8007612:	370c      	adds	r7, #12
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr

0800761c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800761c:	b480      	push	{r7}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007624:	bf00      	nop
 8007626:	370c      	adds	r7, #12
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr

08007630 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007630:	b480      	push	{r7}
 8007632:	b087      	sub	sp, #28
 8007634:	af00      	add	r7, sp, #0
 8007636:	60f8      	str	r0, [r7, #12]
 8007638:	60b9      	str	r1, [r7, #8]
 800763a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	f003 031f 	and.w	r3, r3, #31
 8007642:	2204      	movs	r2, #4
 8007644:	fa02 f303 	lsl.w	r3, r2, r3
 8007648:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	6a1a      	ldr	r2, [r3, #32]
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	43db      	mvns	r3, r3
 8007652:	401a      	ands	r2, r3
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	6a1a      	ldr	r2, [r3, #32]
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	f003 031f 	and.w	r3, r3, #31
 8007662:	6879      	ldr	r1, [r7, #4]
 8007664:	fa01 f303 	lsl.w	r3, r1, r3
 8007668:	431a      	orrs	r2, r3
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	621a      	str	r2, [r3, #32]
}
 800766e:	bf00      	nop
 8007670:	371c      	adds	r7, #28
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr

0800767a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800767a:	b580      	push	{r7, lr}
 800767c:	b082      	sub	sp, #8
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d101      	bne.n	800768c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007688:	2301      	movs	r3, #1
 800768a:	e03f      	b.n	800770c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007692:	b2db      	uxtb	r3, r3
 8007694:	2b00      	cmp	r3, #0
 8007696:	d106      	bne.n	80076a6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f7fb fae7 	bl	8002c74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2224      	movs	r2, #36	; 0x24
 80076aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	68da      	ldr	r2, [r3, #12]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80076bc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 fc8c 	bl	8007fdc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	691a      	ldr	r2, [r3, #16]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80076d2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	695a      	ldr	r2, [r3, #20]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80076e2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	68da      	ldr	r2, [r3, #12]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80076f2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2220      	movs	r2, #32
 80076fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2220      	movs	r2, #32
 8007706:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800770a:	2300      	movs	r3, #0
}
 800770c:	4618      	mov	r0, r3
 800770e:	3708      	adds	r7, #8
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}

08007714 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b082      	sub	sp, #8
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d101      	bne.n	8007726 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	e047      	b.n	80077b6 <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800772c:	b2db      	uxtb	r3, r3
 800772e:	2b00      	cmp	r3, #0
 8007730:	d106      	bne.n	8007740 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f7fb fa9a 	bl	8002c74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2224      	movs	r2, #36	; 0x24
 8007744:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	68da      	ldr	r2, [r3, #12]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007756:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 fc3f 	bl	8007fdc <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	691a      	ldr	r2, [r3, #16]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800776c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	695a      	ldr	r2, [r3, #20]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800777c:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	695a      	ldr	r2, [r3, #20]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f042 0208 	orr.w	r2, r2, #8
 800778c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	68da      	ldr	r2, [r3, #12]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800779c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2200      	movs	r2, #0
 80077a2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2220      	movs	r2, #32
 80077a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2220      	movs	r2, #32
 80077b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80077b4:	2300      	movs	r3, #0
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3708      	adds	r7, #8
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
	...

080077c0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b086      	sub	sp, #24
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	60b9      	str	r1, [r7, #8]
 80077ca:	4613      	mov	r3, r2
 80077cc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80077d4:	b2db      	uxtb	r3, r3
 80077d6:	2b20      	cmp	r3, #32
 80077d8:	d153      	bne.n	8007882 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d002      	beq.n	80077e6 <HAL_UART_Transmit_DMA+0x26>
 80077e0:	88fb      	ldrh	r3, [r7, #6]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d101      	bne.n	80077ea <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	e04c      	b.n	8007884 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	d101      	bne.n	80077f8 <HAL_UART_Transmit_DMA+0x38>
 80077f4:	2302      	movs	r3, #2
 80077f6:	e045      	b.n	8007884 <HAL_UART_Transmit_DMA+0xc4>
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2201      	movs	r2, #1
 80077fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8007800:	68ba      	ldr	r2, [r7, #8]
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	88fa      	ldrh	r2, [r7, #6]
 800780a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	88fa      	ldrh	r2, [r7, #6]
 8007810:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2200      	movs	r2, #0
 8007816:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2221      	movs	r2, #33	; 0x21
 800781c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007824:	4a19      	ldr	r2, [pc, #100]	; (800788c <HAL_UART_Transmit_DMA+0xcc>)
 8007826:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800782c:	4a18      	ldr	r2, [pc, #96]	; (8007890 <HAL_UART_Transmit_DMA+0xd0>)
 800782e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007834:	4a17      	ldr	r2, [pc, #92]	; (8007894 <HAL_UART_Transmit_DMA+0xd4>)
 8007836:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800783c:	2200      	movs	r2, #0
 800783e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8007840:	f107 0308 	add.w	r3, r7, #8
 8007844:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	6819      	ldr	r1, [r3, #0]
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	3304      	adds	r3, #4
 8007854:	461a      	mov	r2, r3
 8007856:	88fb      	ldrh	r3, [r7, #6]
 8007858:	f7fc fe50 	bl	80044fc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007864:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2200      	movs	r2, #0
 800786a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	695a      	ldr	r2, [r3, #20]
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800787c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800787e:	2300      	movs	r3, #0
 8007880:	e000      	b.n	8007884 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8007882:	2302      	movs	r3, #2
  }
}
 8007884:	4618      	mov	r0, r3
 8007886:	3718      	adds	r7, #24
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}
 800788c:	08007be9 	.word	0x08007be9
 8007890:	08007c3b 	.word	0x08007c3b
 8007894:	08007cdb 	.word	0x08007cdb

08007898 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b086      	sub	sp, #24
 800789c:	af00      	add	r7, sp, #0
 800789e:	60f8      	str	r0, [r7, #12]
 80078a0:	60b9      	str	r1, [r7, #8]
 80078a2:	4613      	mov	r3, r2
 80078a4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	2b20      	cmp	r3, #32
 80078b0:	d166      	bne.n	8007980 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d002      	beq.n	80078be <HAL_UART_Receive_DMA+0x26>
 80078b8:	88fb      	ldrh	r3, [r7, #6]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d101      	bne.n	80078c2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80078be:	2301      	movs	r3, #1
 80078c0:	e05f      	b.n	8007982 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d101      	bne.n	80078d0 <HAL_UART_Receive_DMA+0x38>
 80078cc:	2302      	movs	r3, #2
 80078ce:	e058      	b.n	8007982 <HAL_UART_Receive_DMA+0xea>
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2201      	movs	r2, #1
 80078d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80078d8:	68ba      	ldr	r2, [r7, #8]
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	88fa      	ldrh	r2, [r7, #6]
 80078e2:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2200      	movs	r2, #0
 80078e8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2222      	movs	r2, #34	; 0x22
 80078ee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078f6:	4a25      	ldr	r2, [pc, #148]	; (800798c <HAL_UART_Receive_DMA+0xf4>)
 80078f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078fe:	4a24      	ldr	r2, [pc, #144]	; (8007990 <HAL_UART_Receive_DMA+0xf8>)
 8007900:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007906:	4a23      	ldr	r2, [pc, #140]	; (8007994 <HAL_UART_Receive_DMA+0xfc>)
 8007908:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800790e:	2200      	movs	r2, #0
 8007910:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8007912:	f107 0308 	add.w	r3, r7, #8
 8007916:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	3304      	adds	r3, #4
 8007922:	4619      	mov	r1, r3
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	681a      	ldr	r2, [r3, #0]
 8007928:	88fb      	ldrh	r3, [r7, #6]
 800792a:	f7fc fde7 	bl	80044fc <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800792e:	2300      	movs	r3, #0
 8007930:	613b      	str	r3, [r7, #16]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	613b      	str	r3, [r7, #16]
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	613b      	str	r3, [r7, #16]
 8007942:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2200      	movs	r2, #0
 8007948:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	68da      	ldr	r2, [r3, #12]
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800795a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	695a      	ldr	r2, [r3, #20]
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f042 0201 	orr.w	r2, r2, #1
 800796a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	695a      	ldr	r2, [r3, #20]
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800797a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800797c:	2300      	movs	r3, #0
 800797e:	e000      	b.n	8007982 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007980:	2302      	movs	r3, #2
  }
}
 8007982:	4618      	mov	r0, r3
 8007984:	3718      	adds	r7, #24
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
 800798a:	bf00      	nop
 800798c:	08007c57 	.word	0x08007c57
 8007990:	08007cbf 	.word	0x08007cbf
 8007994:	08007cdb 	.word	0x08007cdb

08007998 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b088      	sub	sp, #32
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	68db      	ldr	r3, [r3, #12]
 80079ae:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	695b      	ldr	r3, [r3, #20]
 80079b6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80079b8:	2300      	movs	r3, #0
 80079ba:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80079bc:	2300      	movs	r3, #0
 80079be:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80079c0:	69fb      	ldr	r3, [r7, #28]
 80079c2:	f003 030f 	and.w	r3, r3, #15
 80079c6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d10d      	bne.n	80079ea <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80079ce:	69fb      	ldr	r3, [r7, #28]
 80079d0:	f003 0320 	and.w	r3, r3, #32
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d008      	beq.n	80079ea <HAL_UART_IRQHandler+0x52>
 80079d8:	69bb      	ldr	r3, [r7, #24]
 80079da:	f003 0320 	and.w	r3, r3, #32
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d003      	beq.n	80079ea <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 fa79 	bl	8007eda <UART_Receive_IT>
      return;
 80079e8:	e0d0      	b.n	8007b8c <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	f000 80b0 	beq.w	8007b52 <HAL_UART_IRQHandler+0x1ba>
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	f003 0301 	and.w	r3, r3, #1
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d105      	bne.n	8007a08 <HAL_UART_IRQHandler+0x70>
 80079fc:	69bb      	ldr	r3, [r7, #24]
 80079fe:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	f000 80a5 	beq.w	8007b52 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007a08:	69fb      	ldr	r3, [r7, #28]
 8007a0a:	f003 0301 	and.w	r3, r3, #1
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d00a      	beq.n	8007a28 <HAL_UART_IRQHandler+0x90>
 8007a12:	69bb      	ldr	r3, [r7, #24]
 8007a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d005      	beq.n	8007a28 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a20:	f043 0201 	orr.w	r2, r3, #1
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a28:	69fb      	ldr	r3, [r7, #28]
 8007a2a:	f003 0304 	and.w	r3, r3, #4
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d00a      	beq.n	8007a48 <HAL_UART_IRQHandler+0xb0>
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	f003 0301 	and.w	r3, r3, #1
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d005      	beq.n	8007a48 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a40:	f043 0202 	orr.w	r2, r3, #2
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a48:	69fb      	ldr	r3, [r7, #28]
 8007a4a:	f003 0302 	and.w	r3, r3, #2
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d00a      	beq.n	8007a68 <HAL_UART_IRQHandler+0xd0>
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	f003 0301 	and.w	r3, r3, #1
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d005      	beq.n	8007a68 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a60:	f043 0204 	orr.w	r2, r3, #4
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007a68:	69fb      	ldr	r3, [r7, #28]
 8007a6a:	f003 0308 	and.w	r3, r3, #8
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d00f      	beq.n	8007a92 <HAL_UART_IRQHandler+0xfa>
 8007a72:	69bb      	ldr	r3, [r7, #24]
 8007a74:	f003 0320 	and.w	r3, r3, #32
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d104      	bne.n	8007a86 <HAL_UART_IRQHandler+0xee>
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	f003 0301 	and.w	r3, r3, #1
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d005      	beq.n	8007a92 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a8a:	f043 0208 	orr.w	r2, r3, #8
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d077      	beq.n	8007b8a <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a9a:	69fb      	ldr	r3, [r7, #28]
 8007a9c:	f003 0320 	and.w	r3, r3, #32
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d007      	beq.n	8007ab4 <HAL_UART_IRQHandler+0x11c>
 8007aa4:	69bb      	ldr	r3, [r7, #24]
 8007aa6:	f003 0320 	and.w	r3, r3, #32
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d002      	beq.n	8007ab4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 fa13 	bl	8007eda <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	695b      	ldr	r3, [r3, #20]
 8007aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007abe:	2b40      	cmp	r3, #64	; 0x40
 8007ac0:	bf0c      	ite	eq
 8007ac2:	2301      	moveq	r3, #1
 8007ac4:	2300      	movne	r3, #0
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ace:	f003 0308 	and.w	r3, r3, #8
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d102      	bne.n	8007adc <HAL_UART_IRQHandler+0x144>
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d031      	beq.n	8007b40 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f000 f95c 	bl	8007d9a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	695b      	ldr	r3, [r3, #20]
 8007ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aec:	2b40      	cmp	r3, #64	; 0x40
 8007aee:	d123      	bne.n	8007b38 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	695a      	ldr	r2, [r3, #20]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007afe:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d013      	beq.n	8007b30 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b0c:	4a21      	ldr	r2, [pc, #132]	; (8007b94 <HAL_UART_IRQHandler+0x1fc>)
 8007b0e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b14:	4618      	mov	r0, r3
 8007b16:	f7fc fdb9 	bl	800468c <HAL_DMA_Abort_IT>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d016      	beq.n	8007b4e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007b2a:	4610      	mov	r0, r2
 8007b2c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b2e:	e00e      	b.n	8007b4e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 f84f 	bl	8007bd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b36:	e00a      	b.n	8007b4e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f000 f84b 	bl	8007bd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b3e:	e006      	b.n	8007b4e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f000 f847 	bl	8007bd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8007b4c:	e01d      	b.n	8007b8a <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b4e:	bf00      	nop
    return;
 8007b50:	e01b      	b.n	8007b8a <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007b52:	69fb      	ldr	r3, [r7, #28]
 8007b54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d008      	beq.n	8007b6e <HAL_UART_IRQHandler+0x1d6>
 8007b5c:	69bb      	ldr	r3, [r7, #24]
 8007b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d003      	beq.n	8007b6e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 f949 	bl	8007dfe <UART_Transmit_IT>
    return;
 8007b6c:	e00e      	b.n	8007b8c <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007b6e:	69fb      	ldr	r3, [r7, #28]
 8007b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d009      	beq.n	8007b8c <HAL_UART_IRQHandler+0x1f4>
 8007b78:	69bb      	ldr	r3, [r7, #24]
 8007b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d004      	beq.n	8007b8c <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 f991 	bl	8007eaa <UART_EndTransmit_IT>
    return;
 8007b88:	e000      	b.n	8007b8c <HAL_UART_IRQHandler+0x1f4>
    return;
 8007b8a:	bf00      	nop
  }
}
 8007b8c:	3720      	adds	r7, #32
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
 8007b92:	bf00      	nop
 8007b94:	08007dd7 	.word	0x08007dd7

08007b98 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b083      	sub	sp, #12
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007ba0:	bf00      	nop
 8007ba2:	370c      	adds	r7, #12
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr

08007bac <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b083      	sub	sp, #12
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007bb4:	bf00      	nop
 8007bb6:	370c      	adds	r7, #12
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr

08007bc0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b083      	sub	sp, #12
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007bc8:	bf00      	nop
 8007bca:	370c      	adds	r7, #12
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd2:	4770      	bx	lr

08007bd4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b083      	sub	sp, #12
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007bdc:	bf00      	nop
 8007bde:	370c      	adds	r7, #12
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr

08007be8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bf4:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d113      	bne.n	8007c2c <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2200      	movs	r2, #0
 8007c08:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	695a      	ldr	r2, [r3, #20]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c18:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	68da      	ldr	r2, [r3, #12]
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c28:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007c2a:	e002      	b.n	8007c32 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8007c2c:	68f8      	ldr	r0, [r7, #12]
 8007c2e:	f7ff ffb3 	bl	8007b98 <HAL_UART_TxCpltCallback>
}
 8007c32:	bf00      	nop
 8007c34:	3710      	adds	r7, #16
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}

08007c3a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007c3a:	b580      	push	{r7, lr}
 8007c3c:	b084      	sub	sp, #16
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c46:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007c48:	68f8      	ldr	r0, [r7, #12]
 8007c4a:	f7ff ffaf 	bl	8007bac <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c4e:	bf00      	nop
 8007c50:	3710      	adds	r7, #16
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}

08007c56 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007c56:	b580      	push	{r7, lr}
 8007c58:	b084      	sub	sp, #16
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c62:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d11e      	bne.n	8007cb0 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2200      	movs	r2, #0
 8007c76:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	68da      	ldr	r2, [r3, #12]
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c86:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	695a      	ldr	r2, [r3, #20]
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f022 0201 	bic.w	r2, r2, #1
 8007c96:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	695a      	ldr	r2, [r3, #20]
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ca6:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2220      	movs	r2, #32
 8007cac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8007cb0:	68f8      	ldr	r0, [r7, #12]
 8007cb2:	f7f9 f9cd 	bl	8001050 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007cb6:	bf00      	nop
 8007cb8:	3710      	adds	r7, #16
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}

08007cbe <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007cbe:	b580      	push	{r7, lr}
 8007cc0:	b084      	sub	sp, #16
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cca:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8007ccc:	68f8      	ldr	r0, [r7, #12]
 8007cce:	f7ff ff77 	bl	8007bc0 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007cd2:	bf00      	nop
 8007cd4:	3710      	adds	r7, #16
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}

08007cda <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007cda:	b580      	push	{r7, lr}
 8007cdc:	b084      	sub	sp, #16
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cea:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	695b      	ldr	r3, [r3, #20]
 8007cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cf6:	2b80      	cmp	r3, #128	; 0x80
 8007cf8:	bf0c      	ite	eq
 8007cfa:	2301      	moveq	r3, #1
 8007cfc:	2300      	movne	r3, #0
 8007cfe:	b2db      	uxtb	r3, r3
 8007d00:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007d08:	b2db      	uxtb	r3, r3
 8007d0a:	2b21      	cmp	r3, #33	; 0x21
 8007d0c:	d108      	bne.n	8007d20 <UART_DMAError+0x46>
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d005      	beq.n	8007d20 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	2200      	movs	r2, #0
 8007d18:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007d1a:	68b8      	ldr	r0, [r7, #8]
 8007d1c:	f000 f827 	bl	8007d6e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	695b      	ldr	r3, [r3, #20]
 8007d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d2a:	2b40      	cmp	r3, #64	; 0x40
 8007d2c:	bf0c      	ite	eq
 8007d2e:	2301      	moveq	r3, #1
 8007d30:	2300      	movne	r3, #0
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007d3c:	b2db      	uxtb	r3, r3
 8007d3e:	2b22      	cmp	r3, #34	; 0x22
 8007d40:	d108      	bne.n	8007d54 <UART_DMAError+0x7a>
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d005      	beq.n	8007d54 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007d4e:	68b8      	ldr	r0, [r7, #8]
 8007d50:	f000 f823 	bl	8007d9a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d58:	f043 0210 	orr.w	r2, r3, #16
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d60:	68b8      	ldr	r0, [r7, #8]
 8007d62:	f7ff ff37 	bl	8007bd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d66:	bf00      	nop
 8007d68:	3710      	adds	r7, #16
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}

08007d6e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007d6e:	b480      	push	{r7}
 8007d70:	b083      	sub	sp, #12
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	68da      	ldr	r2, [r3, #12]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007d84:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2220      	movs	r2, #32
 8007d8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8007d8e:	bf00      	nop
 8007d90:	370c      	adds	r7, #12
 8007d92:	46bd      	mov	sp, r7
 8007d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d98:	4770      	bx	lr

08007d9a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d9a:	b480      	push	{r7}
 8007d9c:	b083      	sub	sp, #12
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	68da      	ldr	r2, [r3, #12]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007db0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	695a      	ldr	r2, [r3, #20]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f022 0201 	bic.w	r2, r2, #1
 8007dc0:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2220      	movs	r2, #32
 8007dc6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8007dca:	bf00      	nop
 8007dcc:	370c      	adds	r7, #12
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd4:	4770      	bx	lr

08007dd6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007dd6:	b580      	push	{r7, lr}
 8007dd8:	b084      	sub	sp, #16
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007de2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2200      	movs	r2, #0
 8007de8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2200      	movs	r2, #0
 8007dee:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007df0:	68f8      	ldr	r0, [r7, #12]
 8007df2:	f7ff feef 	bl	8007bd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007df6:	bf00      	nop
 8007df8:	3710      	adds	r7, #16
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}

08007dfe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007dfe:	b480      	push	{r7}
 8007e00:	b085      	sub	sp, #20
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007e0c:	b2db      	uxtb	r3, r3
 8007e0e:	2b21      	cmp	r3, #33	; 0x21
 8007e10:	d144      	bne.n	8007e9c <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e1a:	d11a      	bne.n	8007e52 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6a1b      	ldr	r3, [r3, #32]
 8007e20:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	881b      	ldrh	r3, [r3, #0]
 8007e26:	461a      	mov	r2, r3
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e30:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	691b      	ldr	r3, [r3, #16]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d105      	bne.n	8007e46 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6a1b      	ldr	r3, [r3, #32]
 8007e3e:	1c9a      	adds	r2, r3, #2
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	621a      	str	r2, [r3, #32]
 8007e44:	e00e      	b.n	8007e64 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6a1b      	ldr	r3, [r3, #32]
 8007e4a:	1c5a      	adds	r2, r3, #1
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	621a      	str	r2, [r3, #32]
 8007e50:	e008      	b.n	8007e64 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6a1b      	ldr	r3, [r3, #32]
 8007e56:	1c59      	adds	r1, r3, #1
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	6211      	str	r1, [r2, #32]
 8007e5c:	781a      	ldrb	r2, [r3, #0]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007e68:	b29b      	uxth	r3, r3
 8007e6a:	3b01      	subs	r3, #1
 8007e6c:	b29b      	uxth	r3, r3
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	4619      	mov	r1, r3
 8007e72:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d10f      	bne.n	8007e98 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	68da      	ldr	r2, [r3, #12]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e86:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	68da      	ldr	r2, [r3, #12]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e96:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	e000      	b.n	8007e9e <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007e9c:	2302      	movs	r3, #2
  }
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3714      	adds	r7, #20
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea8:	4770      	bx	lr

08007eaa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007eaa:	b580      	push	{r7, lr}
 8007eac:	b082      	sub	sp, #8
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	68da      	ldr	r2, [r3, #12]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ec0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2220      	movs	r2, #32
 8007ec6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f7ff fe64 	bl	8007b98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007ed0:	2300      	movs	r3, #0
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3708      	adds	r7, #8
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}

08007eda <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007eda:	b580      	push	{r7, lr}
 8007edc:	b084      	sub	sp, #16
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007ee8:	b2db      	uxtb	r3, r3
 8007eea:	2b22      	cmp	r3, #34	; 0x22
 8007eec:	d171      	bne.n	8007fd2 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ef6:	d123      	bne.n	8007f40 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007efc:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	691b      	ldr	r3, [r3, #16]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d10e      	bne.n	8007f24 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f12:	b29a      	uxth	r2, r3
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f1c:	1c9a      	adds	r2, r3, #2
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	629a      	str	r2, [r3, #40]	; 0x28
 8007f22:	e029      	b.n	8007f78 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	b29a      	uxth	r2, r3
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f38:	1c5a      	adds	r2, r3, #1
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	629a      	str	r2, [r3, #40]	; 0x28
 8007f3e:	e01b      	b.n	8007f78 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	691b      	ldr	r3, [r3, #16]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d10a      	bne.n	8007f5e <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	6858      	ldr	r0, [r3, #4]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f52:	1c59      	adds	r1, r3, #1
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	6291      	str	r1, [r2, #40]	; 0x28
 8007f58:	b2c2      	uxtb	r2, r0
 8007f5a:	701a      	strb	r2, [r3, #0]
 8007f5c:	e00c      	b.n	8007f78 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	b2da      	uxtb	r2, r3
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f6a:	1c58      	adds	r0, r3, #1
 8007f6c:	6879      	ldr	r1, [r7, #4]
 8007f6e:	6288      	str	r0, [r1, #40]	; 0x28
 8007f70:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007f74:	b2d2      	uxtb	r2, r2
 8007f76:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	3b01      	subs	r3, #1
 8007f80:	b29b      	uxth	r3, r3
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	4619      	mov	r1, r3
 8007f86:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d120      	bne.n	8007fce <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	68da      	ldr	r2, [r3, #12]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f022 0220 	bic.w	r2, r2, #32
 8007f9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	68da      	ldr	r2, [r3, #12]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007faa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	695a      	ldr	r2, [r3, #20]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f022 0201 	bic.w	r2, r2, #1
 8007fba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2220      	movs	r2, #32
 8007fc0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f7f9 f843 	bl	8001050 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	e002      	b.n	8007fd4 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	e000      	b.n	8007fd4 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8007fd2:	2302      	movs	r3, #2
  }
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3710      	adds	r7, #16
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fe0:	b0bd      	sub	sp, #244	; 0xf4
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007fe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	691b      	ldr	r3, [r3, #16]
 8007ff0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007ff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ff8:	68d9      	ldr	r1, [r3, #12]
 8007ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ffe:	681a      	ldr	r2, [r3, #0]
 8008000:	ea40 0301 	orr.w	r3, r0, r1
 8008004:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800800a:	689a      	ldr	r2, [r3, #8]
 800800c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008010:	691b      	ldr	r3, [r3, #16]
 8008012:	431a      	orrs	r2, r3
 8008014:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008018:	695b      	ldr	r3, [r3, #20]
 800801a:	431a      	orrs	r2, r3
 800801c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008020:	69db      	ldr	r3, [r3, #28]
 8008022:	4313      	orrs	r3, r2
 8008024:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8008028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	68db      	ldr	r3, [r3, #12]
 8008030:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008034:	f021 010c 	bic.w	r1, r1, #12
 8008038:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800803c:	681a      	ldr	r2, [r3, #0]
 800803e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008042:	430b      	orrs	r3, r1
 8008044:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	695b      	ldr	r3, [r3, #20]
 800804e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008056:	6999      	ldr	r1, [r3, #24]
 8008058:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800805c:	681a      	ldr	r2, [r3, #0]
 800805e:	ea40 0301 	orr.w	r3, r0, r1
 8008062:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008068:	69db      	ldr	r3, [r3, #28]
 800806a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800806e:	f040 81a5 	bne.w	80083bc <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008076:	681a      	ldr	r2, [r3, #0]
 8008078:	4bcd      	ldr	r3, [pc, #820]	; (80083b0 <UART_SetConfig+0x3d4>)
 800807a:	429a      	cmp	r2, r3
 800807c:	d006      	beq.n	800808c <UART_SetConfig+0xb0>
 800807e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008082:	681a      	ldr	r2, [r3, #0]
 8008084:	4bcb      	ldr	r3, [pc, #812]	; (80083b4 <UART_SetConfig+0x3d8>)
 8008086:	429a      	cmp	r2, r3
 8008088:	f040 80cb 	bne.w	8008222 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800808c:	f7fd ffa0 	bl	8005fd0 <HAL_RCC_GetPCLK2Freq>
 8008090:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008094:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008098:	461c      	mov	r4, r3
 800809a:	f04f 0500 	mov.w	r5, #0
 800809e:	4622      	mov	r2, r4
 80080a0:	462b      	mov	r3, r5
 80080a2:	1891      	adds	r1, r2, r2
 80080a4:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80080a8:	415b      	adcs	r3, r3
 80080aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80080ae:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80080b2:	1912      	adds	r2, r2, r4
 80080b4:	eb45 0303 	adc.w	r3, r5, r3
 80080b8:	f04f 0000 	mov.w	r0, #0
 80080bc:	f04f 0100 	mov.w	r1, #0
 80080c0:	00d9      	lsls	r1, r3, #3
 80080c2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80080c6:	00d0      	lsls	r0, r2, #3
 80080c8:	4602      	mov	r2, r0
 80080ca:	460b      	mov	r3, r1
 80080cc:	1911      	adds	r1, r2, r4
 80080ce:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 80080d2:	416b      	adcs	r3, r5
 80080d4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80080d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	461a      	mov	r2, r3
 80080e0:	f04f 0300 	mov.w	r3, #0
 80080e4:	1891      	adds	r1, r2, r2
 80080e6:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 80080ea:	415b      	adcs	r3, r3
 80080ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80080f0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80080f4:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80080f8:	f7f8 f88a 	bl	8000210 <__aeabi_uldivmod>
 80080fc:	4602      	mov	r2, r0
 80080fe:	460b      	mov	r3, r1
 8008100:	4bad      	ldr	r3, [pc, #692]	; (80083b8 <UART_SetConfig+0x3dc>)
 8008102:	fba3 2302 	umull	r2, r3, r3, r2
 8008106:	095b      	lsrs	r3, r3, #5
 8008108:	011e      	lsls	r6, r3, #4
 800810a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800810e:	461c      	mov	r4, r3
 8008110:	f04f 0500 	mov.w	r5, #0
 8008114:	4622      	mov	r2, r4
 8008116:	462b      	mov	r3, r5
 8008118:	1891      	adds	r1, r2, r2
 800811a:	67b9      	str	r1, [r7, #120]	; 0x78
 800811c:	415b      	adcs	r3, r3
 800811e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008120:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8008124:	1912      	adds	r2, r2, r4
 8008126:	eb45 0303 	adc.w	r3, r5, r3
 800812a:	f04f 0000 	mov.w	r0, #0
 800812e:	f04f 0100 	mov.w	r1, #0
 8008132:	00d9      	lsls	r1, r3, #3
 8008134:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008138:	00d0      	lsls	r0, r2, #3
 800813a:	4602      	mov	r2, r0
 800813c:	460b      	mov	r3, r1
 800813e:	1911      	adds	r1, r2, r4
 8008140:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8008144:	416b      	adcs	r3, r5
 8008146:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800814a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	461a      	mov	r2, r3
 8008152:	f04f 0300 	mov.w	r3, #0
 8008156:	1891      	adds	r1, r2, r2
 8008158:	6739      	str	r1, [r7, #112]	; 0x70
 800815a:	415b      	adcs	r3, r3
 800815c:	677b      	str	r3, [r7, #116]	; 0x74
 800815e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8008162:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8008166:	f7f8 f853 	bl	8000210 <__aeabi_uldivmod>
 800816a:	4602      	mov	r2, r0
 800816c:	460b      	mov	r3, r1
 800816e:	4b92      	ldr	r3, [pc, #584]	; (80083b8 <UART_SetConfig+0x3dc>)
 8008170:	fba3 1302 	umull	r1, r3, r3, r2
 8008174:	095b      	lsrs	r3, r3, #5
 8008176:	2164      	movs	r1, #100	; 0x64
 8008178:	fb01 f303 	mul.w	r3, r1, r3
 800817c:	1ad3      	subs	r3, r2, r3
 800817e:	00db      	lsls	r3, r3, #3
 8008180:	3332      	adds	r3, #50	; 0x32
 8008182:	4a8d      	ldr	r2, [pc, #564]	; (80083b8 <UART_SetConfig+0x3dc>)
 8008184:	fba2 2303 	umull	r2, r3, r2, r3
 8008188:	095b      	lsrs	r3, r3, #5
 800818a:	005b      	lsls	r3, r3, #1
 800818c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008190:	441e      	add	r6, r3
 8008192:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008196:	4618      	mov	r0, r3
 8008198:	f04f 0100 	mov.w	r1, #0
 800819c:	4602      	mov	r2, r0
 800819e:	460b      	mov	r3, r1
 80081a0:	1894      	adds	r4, r2, r2
 80081a2:	66bc      	str	r4, [r7, #104]	; 0x68
 80081a4:	415b      	adcs	r3, r3
 80081a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80081a8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80081ac:	1812      	adds	r2, r2, r0
 80081ae:	eb41 0303 	adc.w	r3, r1, r3
 80081b2:	f04f 0400 	mov.w	r4, #0
 80081b6:	f04f 0500 	mov.w	r5, #0
 80081ba:	00dd      	lsls	r5, r3, #3
 80081bc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80081c0:	00d4      	lsls	r4, r2, #3
 80081c2:	4622      	mov	r2, r4
 80081c4:	462b      	mov	r3, r5
 80081c6:	1814      	adds	r4, r2, r0
 80081c8:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 80081cc:	414b      	adcs	r3, r1
 80081ce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80081d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	461a      	mov	r2, r3
 80081da:	f04f 0300 	mov.w	r3, #0
 80081de:	1891      	adds	r1, r2, r2
 80081e0:	6639      	str	r1, [r7, #96]	; 0x60
 80081e2:	415b      	adcs	r3, r3
 80081e4:	667b      	str	r3, [r7, #100]	; 0x64
 80081e6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80081ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80081ee:	f7f8 f80f 	bl	8000210 <__aeabi_uldivmod>
 80081f2:	4602      	mov	r2, r0
 80081f4:	460b      	mov	r3, r1
 80081f6:	4b70      	ldr	r3, [pc, #448]	; (80083b8 <UART_SetConfig+0x3dc>)
 80081f8:	fba3 1302 	umull	r1, r3, r3, r2
 80081fc:	095b      	lsrs	r3, r3, #5
 80081fe:	2164      	movs	r1, #100	; 0x64
 8008200:	fb01 f303 	mul.w	r3, r1, r3
 8008204:	1ad3      	subs	r3, r2, r3
 8008206:	00db      	lsls	r3, r3, #3
 8008208:	3332      	adds	r3, #50	; 0x32
 800820a:	4a6b      	ldr	r2, [pc, #428]	; (80083b8 <UART_SetConfig+0x3dc>)
 800820c:	fba2 2303 	umull	r2, r3, r2, r3
 8008210:	095b      	lsrs	r3, r3, #5
 8008212:	f003 0207 	and.w	r2, r3, #7
 8008216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4432      	add	r2, r6
 800821e:	609a      	str	r2, [r3, #8]
 8008220:	e26d      	b.n	80086fe <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008222:	f7fd fec1 	bl	8005fa8 <HAL_RCC_GetPCLK1Freq>
 8008226:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800822a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800822e:	461c      	mov	r4, r3
 8008230:	f04f 0500 	mov.w	r5, #0
 8008234:	4622      	mov	r2, r4
 8008236:	462b      	mov	r3, r5
 8008238:	1891      	adds	r1, r2, r2
 800823a:	65b9      	str	r1, [r7, #88]	; 0x58
 800823c:	415b      	adcs	r3, r3
 800823e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008240:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008244:	1912      	adds	r2, r2, r4
 8008246:	eb45 0303 	adc.w	r3, r5, r3
 800824a:	f04f 0000 	mov.w	r0, #0
 800824e:	f04f 0100 	mov.w	r1, #0
 8008252:	00d9      	lsls	r1, r3, #3
 8008254:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008258:	00d0      	lsls	r0, r2, #3
 800825a:	4602      	mov	r2, r0
 800825c:	460b      	mov	r3, r1
 800825e:	1911      	adds	r1, r2, r4
 8008260:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8008264:	416b      	adcs	r3, r5
 8008266:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800826a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	461a      	mov	r2, r3
 8008272:	f04f 0300 	mov.w	r3, #0
 8008276:	1891      	adds	r1, r2, r2
 8008278:	6539      	str	r1, [r7, #80]	; 0x50
 800827a:	415b      	adcs	r3, r3
 800827c:	657b      	str	r3, [r7, #84]	; 0x54
 800827e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008282:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8008286:	f7f7 ffc3 	bl	8000210 <__aeabi_uldivmod>
 800828a:	4602      	mov	r2, r0
 800828c:	460b      	mov	r3, r1
 800828e:	4b4a      	ldr	r3, [pc, #296]	; (80083b8 <UART_SetConfig+0x3dc>)
 8008290:	fba3 2302 	umull	r2, r3, r3, r2
 8008294:	095b      	lsrs	r3, r3, #5
 8008296:	011e      	lsls	r6, r3, #4
 8008298:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800829c:	461c      	mov	r4, r3
 800829e:	f04f 0500 	mov.w	r5, #0
 80082a2:	4622      	mov	r2, r4
 80082a4:	462b      	mov	r3, r5
 80082a6:	1891      	adds	r1, r2, r2
 80082a8:	64b9      	str	r1, [r7, #72]	; 0x48
 80082aa:	415b      	adcs	r3, r3
 80082ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80082ae:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80082b2:	1912      	adds	r2, r2, r4
 80082b4:	eb45 0303 	adc.w	r3, r5, r3
 80082b8:	f04f 0000 	mov.w	r0, #0
 80082bc:	f04f 0100 	mov.w	r1, #0
 80082c0:	00d9      	lsls	r1, r3, #3
 80082c2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80082c6:	00d0      	lsls	r0, r2, #3
 80082c8:	4602      	mov	r2, r0
 80082ca:	460b      	mov	r3, r1
 80082cc:	1911      	adds	r1, r2, r4
 80082ce:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 80082d2:	416b      	adcs	r3, r5
 80082d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80082d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082dc:	685b      	ldr	r3, [r3, #4]
 80082de:	461a      	mov	r2, r3
 80082e0:	f04f 0300 	mov.w	r3, #0
 80082e4:	1891      	adds	r1, r2, r2
 80082e6:	6439      	str	r1, [r7, #64]	; 0x40
 80082e8:	415b      	adcs	r3, r3
 80082ea:	647b      	str	r3, [r7, #68]	; 0x44
 80082ec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80082f0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80082f4:	f7f7 ff8c 	bl	8000210 <__aeabi_uldivmod>
 80082f8:	4602      	mov	r2, r0
 80082fa:	460b      	mov	r3, r1
 80082fc:	4b2e      	ldr	r3, [pc, #184]	; (80083b8 <UART_SetConfig+0x3dc>)
 80082fe:	fba3 1302 	umull	r1, r3, r3, r2
 8008302:	095b      	lsrs	r3, r3, #5
 8008304:	2164      	movs	r1, #100	; 0x64
 8008306:	fb01 f303 	mul.w	r3, r1, r3
 800830a:	1ad3      	subs	r3, r2, r3
 800830c:	00db      	lsls	r3, r3, #3
 800830e:	3332      	adds	r3, #50	; 0x32
 8008310:	4a29      	ldr	r2, [pc, #164]	; (80083b8 <UART_SetConfig+0x3dc>)
 8008312:	fba2 2303 	umull	r2, r3, r2, r3
 8008316:	095b      	lsrs	r3, r3, #5
 8008318:	005b      	lsls	r3, r3, #1
 800831a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800831e:	441e      	add	r6, r3
 8008320:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008324:	4618      	mov	r0, r3
 8008326:	f04f 0100 	mov.w	r1, #0
 800832a:	4602      	mov	r2, r0
 800832c:	460b      	mov	r3, r1
 800832e:	1894      	adds	r4, r2, r2
 8008330:	63bc      	str	r4, [r7, #56]	; 0x38
 8008332:	415b      	adcs	r3, r3
 8008334:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008336:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800833a:	1812      	adds	r2, r2, r0
 800833c:	eb41 0303 	adc.w	r3, r1, r3
 8008340:	f04f 0400 	mov.w	r4, #0
 8008344:	f04f 0500 	mov.w	r5, #0
 8008348:	00dd      	lsls	r5, r3, #3
 800834a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800834e:	00d4      	lsls	r4, r2, #3
 8008350:	4622      	mov	r2, r4
 8008352:	462b      	mov	r3, r5
 8008354:	1814      	adds	r4, r2, r0
 8008356:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800835a:	414b      	adcs	r3, r1
 800835c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008360:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	461a      	mov	r2, r3
 8008368:	f04f 0300 	mov.w	r3, #0
 800836c:	1891      	adds	r1, r2, r2
 800836e:	6339      	str	r1, [r7, #48]	; 0x30
 8008370:	415b      	adcs	r3, r3
 8008372:	637b      	str	r3, [r7, #52]	; 0x34
 8008374:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008378:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800837c:	f7f7 ff48 	bl	8000210 <__aeabi_uldivmod>
 8008380:	4602      	mov	r2, r0
 8008382:	460b      	mov	r3, r1
 8008384:	4b0c      	ldr	r3, [pc, #48]	; (80083b8 <UART_SetConfig+0x3dc>)
 8008386:	fba3 1302 	umull	r1, r3, r3, r2
 800838a:	095b      	lsrs	r3, r3, #5
 800838c:	2164      	movs	r1, #100	; 0x64
 800838e:	fb01 f303 	mul.w	r3, r1, r3
 8008392:	1ad3      	subs	r3, r2, r3
 8008394:	00db      	lsls	r3, r3, #3
 8008396:	3332      	adds	r3, #50	; 0x32
 8008398:	4a07      	ldr	r2, [pc, #28]	; (80083b8 <UART_SetConfig+0x3dc>)
 800839a:	fba2 2303 	umull	r2, r3, r2, r3
 800839e:	095b      	lsrs	r3, r3, #5
 80083a0:	f003 0207 	and.w	r2, r3, #7
 80083a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4432      	add	r2, r6
 80083ac:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80083ae:	e1a6      	b.n	80086fe <UART_SetConfig+0x722>
 80083b0:	40011000 	.word	0x40011000
 80083b4:	40011400 	.word	0x40011400
 80083b8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80083bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083c0:	681a      	ldr	r2, [r3, #0]
 80083c2:	4bd1      	ldr	r3, [pc, #836]	; (8008708 <UART_SetConfig+0x72c>)
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d006      	beq.n	80083d6 <UART_SetConfig+0x3fa>
 80083c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083cc:	681a      	ldr	r2, [r3, #0]
 80083ce:	4bcf      	ldr	r3, [pc, #828]	; (800870c <UART_SetConfig+0x730>)
 80083d0:	429a      	cmp	r2, r3
 80083d2:	f040 80ca 	bne.w	800856a <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 80083d6:	f7fd fdfb 	bl	8005fd0 <HAL_RCC_GetPCLK2Freq>
 80083da:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80083de:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80083e2:	461c      	mov	r4, r3
 80083e4:	f04f 0500 	mov.w	r5, #0
 80083e8:	4622      	mov	r2, r4
 80083ea:	462b      	mov	r3, r5
 80083ec:	1891      	adds	r1, r2, r2
 80083ee:	62b9      	str	r1, [r7, #40]	; 0x28
 80083f0:	415b      	adcs	r3, r3
 80083f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80083f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80083f8:	1912      	adds	r2, r2, r4
 80083fa:	eb45 0303 	adc.w	r3, r5, r3
 80083fe:	f04f 0000 	mov.w	r0, #0
 8008402:	f04f 0100 	mov.w	r1, #0
 8008406:	00d9      	lsls	r1, r3, #3
 8008408:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800840c:	00d0      	lsls	r0, r2, #3
 800840e:	4602      	mov	r2, r0
 8008410:	460b      	mov	r3, r1
 8008412:	eb12 0a04 	adds.w	sl, r2, r4
 8008416:	eb43 0b05 	adc.w	fp, r3, r5
 800841a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	4618      	mov	r0, r3
 8008422:	f04f 0100 	mov.w	r1, #0
 8008426:	f04f 0200 	mov.w	r2, #0
 800842a:	f04f 0300 	mov.w	r3, #0
 800842e:	008b      	lsls	r3, r1, #2
 8008430:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008434:	0082      	lsls	r2, r0, #2
 8008436:	4650      	mov	r0, sl
 8008438:	4659      	mov	r1, fp
 800843a:	f7f7 fee9 	bl	8000210 <__aeabi_uldivmod>
 800843e:	4602      	mov	r2, r0
 8008440:	460b      	mov	r3, r1
 8008442:	4bb3      	ldr	r3, [pc, #716]	; (8008710 <UART_SetConfig+0x734>)
 8008444:	fba3 2302 	umull	r2, r3, r3, r2
 8008448:	095b      	lsrs	r3, r3, #5
 800844a:	011e      	lsls	r6, r3, #4
 800844c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008450:	4618      	mov	r0, r3
 8008452:	f04f 0100 	mov.w	r1, #0
 8008456:	4602      	mov	r2, r0
 8008458:	460b      	mov	r3, r1
 800845a:	1894      	adds	r4, r2, r2
 800845c:	623c      	str	r4, [r7, #32]
 800845e:	415b      	adcs	r3, r3
 8008460:	627b      	str	r3, [r7, #36]	; 0x24
 8008462:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008466:	1812      	adds	r2, r2, r0
 8008468:	eb41 0303 	adc.w	r3, r1, r3
 800846c:	f04f 0400 	mov.w	r4, #0
 8008470:	f04f 0500 	mov.w	r5, #0
 8008474:	00dd      	lsls	r5, r3, #3
 8008476:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800847a:	00d4      	lsls	r4, r2, #3
 800847c:	4622      	mov	r2, r4
 800847e:	462b      	mov	r3, r5
 8008480:	1814      	adds	r4, r2, r0
 8008482:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8008486:	414b      	adcs	r3, r1
 8008488:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800848c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	4618      	mov	r0, r3
 8008494:	f04f 0100 	mov.w	r1, #0
 8008498:	f04f 0200 	mov.w	r2, #0
 800849c:	f04f 0300 	mov.w	r3, #0
 80084a0:	008b      	lsls	r3, r1, #2
 80084a2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80084a6:	0082      	lsls	r2, r0, #2
 80084a8:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80084ac:	f7f7 feb0 	bl	8000210 <__aeabi_uldivmod>
 80084b0:	4602      	mov	r2, r0
 80084b2:	460b      	mov	r3, r1
 80084b4:	4b96      	ldr	r3, [pc, #600]	; (8008710 <UART_SetConfig+0x734>)
 80084b6:	fba3 1302 	umull	r1, r3, r3, r2
 80084ba:	095b      	lsrs	r3, r3, #5
 80084bc:	2164      	movs	r1, #100	; 0x64
 80084be:	fb01 f303 	mul.w	r3, r1, r3
 80084c2:	1ad3      	subs	r3, r2, r3
 80084c4:	011b      	lsls	r3, r3, #4
 80084c6:	3332      	adds	r3, #50	; 0x32
 80084c8:	4a91      	ldr	r2, [pc, #580]	; (8008710 <UART_SetConfig+0x734>)
 80084ca:	fba2 2303 	umull	r2, r3, r2, r3
 80084ce:	095b      	lsrs	r3, r3, #5
 80084d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80084d4:	441e      	add	r6, r3
 80084d6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80084da:	4618      	mov	r0, r3
 80084dc:	f04f 0100 	mov.w	r1, #0
 80084e0:	4602      	mov	r2, r0
 80084e2:	460b      	mov	r3, r1
 80084e4:	1894      	adds	r4, r2, r2
 80084e6:	61bc      	str	r4, [r7, #24]
 80084e8:	415b      	adcs	r3, r3
 80084ea:	61fb      	str	r3, [r7, #28]
 80084ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80084f0:	1812      	adds	r2, r2, r0
 80084f2:	eb41 0303 	adc.w	r3, r1, r3
 80084f6:	f04f 0400 	mov.w	r4, #0
 80084fa:	f04f 0500 	mov.w	r5, #0
 80084fe:	00dd      	lsls	r5, r3, #3
 8008500:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008504:	00d4      	lsls	r4, r2, #3
 8008506:	4622      	mov	r2, r4
 8008508:	462b      	mov	r3, r5
 800850a:	1814      	adds	r4, r2, r0
 800850c:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8008510:	414b      	adcs	r3, r1
 8008512:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	4618      	mov	r0, r3
 800851e:	f04f 0100 	mov.w	r1, #0
 8008522:	f04f 0200 	mov.w	r2, #0
 8008526:	f04f 0300 	mov.w	r3, #0
 800852a:	008b      	lsls	r3, r1, #2
 800852c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008530:	0082      	lsls	r2, r0, #2
 8008532:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8008536:	f7f7 fe6b 	bl	8000210 <__aeabi_uldivmod>
 800853a:	4602      	mov	r2, r0
 800853c:	460b      	mov	r3, r1
 800853e:	4b74      	ldr	r3, [pc, #464]	; (8008710 <UART_SetConfig+0x734>)
 8008540:	fba3 1302 	umull	r1, r3, r3, r2
 8008544:	095b      	lsrs	r3, r3, #5
 8008546:	2164      	movs	r1, #100	; 0x64
 8008548:	fb01 f303 	mul.w	r3, r1, r3
 800854c:	1ad3      	subs	r3, r2, r3
 800854e:	011b      	lsls	r3, r3, #4
 8008550:	3332      	adds	r3, #50	; 0x32
 8008552:	4a6f      	ldr	r2, [pc, #444]	; (8008710 <UART_SetConfig+0x734>)
 8008554:	fba2 2303 	umull	r2, r3, r2, r3
 8008558:	095b      	lsrs	r3, r3, #5
 800855a:	f003 020f 	and.w	r2, r3, #15
 800855e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4432      	add	r2, r6
 8008566:	609a      	str	r2, [r3, #8]
 8008568:	e0c9      	b.n	80086fe <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 800856a:	f7fd fd1d 	bl	8005fa8 <HAL_RCC_GetPCLK1Freq>
 800856e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008572:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008576:	461c      	mov	r4, r3
 8008578:	f04f 0500 	mov.w	r5, #0
 800857c:	4622      	mov	r2, r4
 800857e:	462b      	mov	r3, r5
 8008580:	1891      	adds	r1, r2, r2
 8008582:	6139      	str	r1, [r7, #16]
 8008584:	415b      	adcs	r3, r3
 8008586:	617b      	str	r3, [r7, #20]
 8008588:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800858c:	1912      	adds	r2, r2, r4
 800858e:	eb45 0303 	adc.w	r3, r5, r3
 8008592:	f04f 0000 	mov.w	r0, #0
 8008596:	f04f 0100 	mov.w	r1, #0
 800859a:	00d9      	lsls	r1, r3, #3
 800859c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80085a0:	00d0      	lsls	r0, r2, #3
 80085a2:	4602      	mov	r2, r0
 80085a4:	460b      	mov	r3, r1
 80085a6:	eb12 0804 	adds.w	r8, r2, r4
 80085aa:	eb43 0905 	adc.w	r9, r3, r5
 80085ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	4618      	mov	r0, r3
 80085b6:	f04f 0100 	mov.w	r1, #0
 80085ba:	f04f 0200 	mov.w	r2, #0
 80085be:	f04f 0300 	mov.w	r3, #0
 80085c2:	008b      	lsls	r3, r1, #2
 80085c4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80085c8:	0082      	lsls	r2, r0, #2
 80085ca:	4640      	mov	r0, r8
 80085cc:	4649      	mov	r1, r9
 80085ce:	f7f7 fe1f 	bl	8000210 <__aeabi_uldivmod>
 80085d2:	4602      	mov	r2, r0
 80085d4:	460b      	mov	r3, r1
 80085d6:	4b4e      	ldr	r3, [pc, #312]	; (8008710 <UART_SetConfig+0x734>)
 80085d8:	fba3 2302 	umull	r2, r3, r3, r2
 80085dc:	095b      	lsrs	r3, r3, #5
 80085de:	011e      	lsls	r6, r3, #4
 80085e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80085e4:	4618      	mov	r0, r3
 80085e6:	f04f 0100 	mov.w	r1, #0
 80085ea:	4602      	mov	r2, r0
 80085ec:	460b      	mov	r3, r1
 80085ee:	1894      	adds	r4, r2, r2
 80085f0:	60bc      	str	r4, [r7, #8]
 80085f2:	415b      	adcs	r3, r3
 80085f4:	60fb      	str	r3, [r7, #12]
 80085f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80085fa:	1812      	adds	r2, r2, r0
 80085fc:	eb41 0303 	adc.w	r3, r1, r3
 8008600:	f04f 0400 	mov.w	r4, #0
 8008604:	f04f 0500 	mov.w	r5, #0
 8008608:	00dd      	lsls	r5, r3, #3
 800860a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800860e:	00d4      	lsls	r4, r2, #3
 8008610:	4622      	mov	r2, r4
 8008612:	462b      	mov	r3, r5
 8008614:	1814      	adds	r4, r2, r0
 8008616:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800861a:	414b      	adcs	r3, r1
 800861c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	4618      	mov	r0, r3
 8008628:	f04f 0100 	mov.w	r1, #0
 800862c:	f04f 0200 	mov.w	r2, #0
 8008630:	f04f 0300 	mov.w	r3, #0
 8008634:	008b      	lsls	r3, r1, #2
 8008636:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800863a:	0082      	lsls	r2, r0, #2
 800863c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008640:	f7f7 fde6 	bl	8000210 <__aeabi_uldivmod>
 8008644:	4602      	mov	r2, r0
 8008646:	460b      	mov	r3, r1
 8008648:	4b31      	ldr	r3, [pc, #196]	; (8008710 <UART_SetConfig+0x734>)
 800864a:	fba3 1302 	umull	r1, r3, r3, r2
 800864e:	095b      	lsrs	r3, r3, #5
 8008650:	2164      	movs	r1, #100	; 0x64
 8008652:	fb01 f303 	mul.w	r3, r1, r3
 8008656:	1ad3      	subs	r3, r2, r3
 8008658:	011b      	lsls	r3, r3, #4
 800865a:	3332      	adds	r3, #50	; 0x32
 800865c:	4a2c      	ldr	r2, [pc, #176]	; (8008710 <UART_SetConfig+0x734>)
 800865e:	fba2 2303 	umull	r2, r3, r2, r3
 8008662:	095b      	lsrs	r3, r3, #5
 8008664:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008668:	441e      	add	r6, r3
 800866a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800866e:	4618      	mov	r0, r3
 8008670:	f04f 0100 	mov.w	r1, #0
 8008674:	4602      	mov	r2, r0
 8008676:	460b      	mov	r3, r1
 8008678:	1894      	adds	r4, r2, r2
 800867a:	603c      	str	r4, [r7, #0]
 800867c:	415b      	adcs	r3, r3
 800867e:	607b      	str	r3, [r7, #4]
 8008680:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008684:	1812      	adds	r2, r2, r0
 8008686:	eb41 0303 	adc.w	r3, r1, r3
 800868a:	f04f 0400 	mov.w	r4, #0
 800868e:	f04f 0500 	mov.w	r5, #0
 8008692:	00dd      	lsls	r5, r3, #3
 8008694:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008698:	00d4      	lsls	r4, r2, #3
 800869a:	4622      	mov	r2, r4
 800869c:	462b      	mov	r3, r5
 800869e:	1814      	adds	r4, r2, r0
 80086a0:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 80086a4:	414b      	adcs	r3, r1
 80086a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80086aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	4618      	mov	r0, r3
 80086b2:	f04f 0100 	mov.w	r1, #0
 80086b6:	f04f 0200 	mov.w	r2, #0
 80086ba:	f04f 0300 	mov.w	r3, #0
 80086be:	008b      	lsls	r3, r1, #2
 80086c0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80086c4:	0082      	lsls	r2, r0, #2
 80086c6:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80086ca:	f7f7 fda1 	bl	8000210 <__aeabi_uldivmod>
 80086ce:	4602      	mov	r2, r0
 80086d0:	460b      	mov	r3, r1
 80086d2:	4b0f      	ldr	r3, [pc, #60]	; (8008710 <UART_SetConfig+0x734>)
 80086d4:	fba3 1302 	umull	r1, r3, r3, r2
 80086d8:	095b      	lsrs	r3, r3, #5
 80086da:	2164      	movs	r1, #100	; 0x64
 80086dc:	fb01 f303 	mul.w	r3, r1, r3
 80086e0:	1ad3      	subs	r3, r2, r3
 80086e2:	011b      	lsls	r3, r3, #4
 80086e4:	3332      	adds	r3, #50	; 0x32
 80086e6:	4a0a      	ldr	r2, [pc, #40]	; (8008710 <UART_SetConfig+0x734>)
 80086e8:	fba2 2303 	umull	r2, r3, r2, r3
 80086ec:	095b      	lsrs	r3, r3, #5
 80086ee:	f003 020f 	and.w	r2, r3, #15
 80086f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4432      	add	r2, r6
 80086fa:	609a      	str	r2, [r3, #8]
}
 80086fc:	e7ff      	b.n	80086fe <UART_SetConfig+0x722>
 80086fe:	bf00      	nop
 8008700:	37f4      	adds	r7, #244	; 0xf4
 8008702:	46bd      	mov	sp, r7
 8008704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008708:	40011000 	.word	0x40011000
 800870c:	40011400 	.word	0x40011400
 8008710:	51eb851f 	.word	0x51eb851f

08008714 <__read_flags>:


/*
 * Reads the flag status register and returns the value of the 8-bits register
 */
uint8_t __read_flags() {
 8008714:	b580      	push	{r7, lr}
 8008716:	b090      	sub	sp, #64	; 0x40
 8008718:	af00      	add	r7, sp, #0
	Command cmd = get_default_command();
 800871a:	f107 0308 	add.w	r3, r7, #8
 800871e:	4618      	mov	r0, r3
 8008720:	f000 f988 	bl	8008a34 <get_default_command>
	with_data(&cmd, 1);
 8008724:	f107 0308 	add.w	r3, r7, #8
 8008728:	2101      	movs	r1, #1
 800872a:	4618      	mov	r0, r3
 800872c:	f000 f9b8 	bl	8008aa0 <with_data>

	if(!qspi_run(&cmd, READ_FLAG_STATUS_REGISTER)) {
 8008730:	f107 0308 	add.w	r3, r7, #8
 8008734:	2170      	movs	r1, #112	; 0x70
 8008736:	4618      	mov	r0, r3
 8008738:	f000 f9c4 	bl	8008ac4 <qspi_run>

	}

	uint8_t flags;

	if(!qspi_receive(&flags)) {
 800873c:	1dfb      	adds	r3, r7, #7
 800873e:	4618      	mov	r0, r3
 8008740:	f000 fa28 	bl	8008b94 <qspi_receive>

	}

	return flags;
 8008744:	79fb      	ldrb	r3, [r7, #7]
}
 8008746:	4618      	mov	r0, r3
 8008748:	3740      	adds	r7, #64	; 0x40
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}

0800874e <__write_enable_latch>:

/*
 * Enables the write latch.
 * This function must be called before each PROGRAM or ERASE operation.
 */
bool __write_enable_latch() {
 800874e:	b5b0      	push	{r4, r5, r7, lr}
 8008750:	b09c      	sub	sp, #112	; 0x70
 8008752:	af00      	add	r7, sp, #0
	Command cmd = get_default_command();
 8008754:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008758:	4618      	mov	r0, r3
 800875a:	f000 f96b 	bl	8008a34 <get_default_command>

	if(qspi_run(&cmd, WRITE_ENABLE_LATCH)) {
 800875e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008762:	2106      	movs	r1, #6
 8008764:	4618      	mov	r0, r3
 8008766:	f000 f9ad 	bl	8008ac4 <qspi_run>
 800876a:	4603      	mov	r3, r0
 800876c:	2b00      	cmp	r3, #0
 800876e:	d022      	beq.n	80087b6 <__write_enable_latch+0x68>
		cmd = get_default_command();
 8008770:	463b      	mov	r3, r7
 8008772:	4618      	mov	r0, r3
 8008774:	f000 f95e 	bl	8008a34 <get_default_command>
 8008778:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800877c:	463d      	mov	r5, r7
 800877e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008780:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008782:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008784:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008786:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008788:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800878a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800878e:	e884 0003 	stmia.w	r4, {r0, r1}

		with_data(&cmd, 1);
 8008792:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008796:	2101      	movs	r1, #1
 8008798:	4618      	mov	r0, r3
 800879a:	f000 f981 	bl	8008aa0 <with_data>

		if(qspi_poll(&cmd, READ_STATUS_REGISTER, 1, true)) {
 800879e:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80087a2:	2301      	movs	r3, #1
 80087a4:	2201      	movs	r2, #1
 80087a6:	2105      	movs	r1, #5
 80087a8:	f000 f9a8 	bl	8008afc <qspi_poll>
 80087ac:	4603      	mov	r3, r0
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d001      	beq.n	80087b6 <__write_enable_latch+0x68>
			return true;
 80087b2:	2301      	movs	r3, #1
 80087b4:	e000      	b.n	80087b8 <__write_enable_latch+0x6a>
		}
	}

	return false;
 80087b6:	2300      	movs	r3, #0
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3770      	adds	r7, #112	; 0x70
 80087bc:	46bd      	mov	sp, r7
 80087be:	bdb0      	pop	{r4, r5, r7, pc}

080087c0 <__write_disable_latch>:

/*
 * Call this function to prevent data corruption when a hardware fault (e.g. protection fault) occurs.
 * Please refer to the documentation for details.
 */
bool __write_disable_latch() {
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b08e      	sub	sp, #56	; 0x38
 80087c4:	af00      	add	r7, sp, #0
	Command cmd = get_default_command();
 80087c6:	463b      	mov	r3, r7
 80087c8:	4618      	mov	r0, r3
 80087ca:	f000 f933 	bl	8008a34 <get_default_command>
	return qspi_run(&cmd, WRITE_ENABLE_LATCH);
 80087ce:	463b      	mov	r3, r7
 80087d0:	2106      	movs	r1, #6
 80087d2:	4618      	mov	r0, r3
 80087d4:	f000 f976 	bl	8008ac4 <qspi_run>
 80087d8:	4603      	mov	r3, r0
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3738      	adds	r7, #56	; 0x38
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}

080087e2 <flash_init>:

/*
 * Initialises the flash driver
 */
void flash_init() {
 80087e2:	b580      	push	{r7, lr}
 80087e4:	b090      	sub	sp, #64	; 0x40
 80087e6:	af00      	add	r7, sp, #0
	uint8_t configuration = 0b00011011; // 1 Dummy cycle
 80087e8:	231b      	movs	r3, #27
 80087ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	Command cmd = get_default_command();
 80087ee:	1d3b      	adds	r3, r7, #4
 80087f0:	4618      	mov	r0, r3
 80087f2:	f000 f91f 	bl	8008a34 <get_default_command>
	with_data(&cmd, 1);
 80087f6:	1d3b      	adds	r3, r7, #4
 80087f8:	2101      	movs	r1, #1
 80087fa:	4618      	mov	r0, r3
 80087fc:	f000 f950 	bl	8008aa0 <with_data>

	__write_enable_latch();
 8008800:	f7ff ffa5 	bl	800874e <__write_enable_latch>

	if(!qspi_run(&cmd, 0x81)) { // Write volatile configuration register
 8008804:	1d3b      	adds	r3, r7, #4
 8008806:	2181      	movs	r1, #129	; 0x81
 8008808:	4618      	mov	r0, r3
 800880a:	f000 f95b 	bl	8008ac4 <qspi_run>

	}

	if(!qspi_transmit(&configuration)) {
 800880e:	f107 033f 	add.w	r3, r7, #63	; 0x3f
 8008812:	4618      	mov	r0, r3
 8008814:	f000 f9a8 	bl	8008b68 <qspi_transmit>

	}

	if(!qspi_poll(&cmd, READ_FLAG_STATUS_REGISTER, 7, true)) {
 8008818:	1d38      	adds	r0, r7, #4
 800881a:	2301      	movs	r3, #1
 800881c:	2207      	movs	r2, #7
 800881e:	2170      	movs	r1, #112	; 0x70
 8008820:	f000 f96c 	bl	8008afc <qspi_poll>

	}
}
 8008824:	bf00      	nop
 8008826:	3740      	adds	r7, #64	; 0x40
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}

0800882c <flash_read>:
 * Test providers:
 * 	 - read_ut.c
 *
 */

void flash_read(uint32_t address, uint8_t* buffer, uint32_t length) {
 800882c:	b580      	push	{r7, lr}
 800882e:	b084      	sub	sp, #16
 8008830:	af00      	add	r7, sp, #0
 8008832:	60f8      	str	r0, [r7, #12]
 8008834:	60b9      	str	r1, [r7, #8]
 8008836:	607a      	str	r2, [r7, #4]
	while(QUADSPI->SR & QUADSPI_SR_BUSY);
 8008838:	bf00      	nop
 800883a:	4b12      	ldr	r3, [pc, #72]	; (8008884 <flash_read+0x58>)
 800883c:	689b      	ldr	r3, [r3, #8]
 800883e:	f003 0320 	and.w	r3, r3, #32
 8008842:	2b00      	cmp	r3, #0
 8008844:	d1f9      	bne.n	800883a <flash_read+0xe>
	QUADSPI->CCR = (uint32_t) (FREAD_SINGLE) | (0b00000001 << 24) | (0b00000100 << 16) | (0b00100101 << 8);
 8008846:	4b0f      	ldr	r3, [pc, #60]	; (8008884 <flash_read+0x58>)
 8008848:	4a0f      	ldr	r2, [pc, #60]	; (8008888 <flash_read+0x5c>)
 800884a:	615a      	str	r2, [r3, #20]
	while(QUADSPI->SR & QUADSPI_SR_BUSY);
 800884c:	bf00      	nop
 800884e:	4b0d      	ldr	r3, [pc, #52]	; (8008884 <flash_read+0x58>)
 8008850:	689b      	ldr	r3, [r3, #8]
 8008852:	f003 0320 	and.w	r3, r3, #32
 8008856:	2b00      	cmp	r3, #0
 8008858:	d1f9      	bne.n	800884e <flash_read+0x22>
	QUADSPI->AR = address;
 800885a:	4a0a      	ldr	r2, [pc, #40]	; (8008884 <flash_read+0x58>)
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	6193      	str	r3, [r2, #24]
	while(QUADSPI->SR & QUADSPI_SR_BUSY);
 8008860:	bf00      	nop
 8008862:	4b08      	ldr	r3, [pc, #32]	; (8008884 <flash_read+0x58>)
 8008864:	689b      	ldr	r3, [r3, #8]
 8008866:	f003 0320 	and.w	r3, r3, #32
 800886a:	2b00      	cmp	r3, #0
 800886c:	d1f9      	bne.n	8008862 <flash_read+0x36>
	QUADSPI->DLR = length;
 800886e:	4a05      	ldr	r2, [pc, #20]	; (8008884 <flash_read+0x58>)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6113      	str	r3, [r2, #16]

	if(!qspi_receive(buffer)) {
 8008874:	68b8      	ldr	r0, [r7, #8]
 8008876:	f000 f98d 	bl	8008b94 <qspi_receive>

	}
}
 800887a:	bf00      	nop
 800887c:	3710      	adds	r7, #16
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}
 8008882:	bf00      	nop
 8008884:	a0001000 	.word	0xa0001000
 8008888:	0104250b 	.word	0x0104250b

0800888c <__flash_write_page>:
 * Test providers:
 * 	 - write_ut.c
 *
 */

void __flash_write_page(uint32_t address, uint8_t* buffer, uint32_t length) {
 800888c:	b5b0      	push	{r4, r5, r7, lr}
 800888e:	b0a2      	sub	sp, #136	; 0x88
 8008890:	af00      	add	r7, sp, #0
 8008892:	6478      	str	r0, [r7, #68]	; 0x44
 8008894:	6439      	str	r1, [r7, #64]	; 0x40
 8008896:	63fa      	str	r2, [r7, #60]	; 0x3c
	__write_enable_latch();
 8008898:	f7ff ff59 	bl	800874e <__write_enable_latch>

	Command cmd = get_default_command();
 800889c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80088a0:	4618      	mov	r0, r3
 80088a2:	f000 f8c7 	bl	8008a34 <get_default_command>

	with_address(&cmd, address);
 80088a6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80088aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80088ac:	4618      	mov	r0, r3
 80088ae:	f000 f8e1 	bl	8008a74 <with_address>
	with_data(&cmd, length);
 80088b2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80088b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80088b8:	4618      	mov	r0, r3
 80088ba:	f000 f8f1 	bl	8008aa0 <with_data>

	if(!qspi_run(&cmd, WRITE_SINGLE)) {
 80088be:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80088c2:	2102      	movs	r1, #2
 80088c4:	4618      	mov	r0, r3
 80088c6:	f000 f8fd 	bl	8008ac4 <qspi_run>

	}

	if(!qspi_transmit(buffer)) {
 80088ca:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80088cc:	f000 f94c 	bl	8008b68 <qspi_transmit>

	/*
	 * Checks if the controller is ready to proceed to the next command
	 */

	cmd = get_default_command();
 80088d0:	463b      	mov	r3, r7
 80088d2:	4618      	mov	r0, r3
 80088d4:	f000 f8ae 	bl	8008a34 <get_default_command>
 80088d8:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80088dc:	463d      	mov	r5, r7
 80088de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80088e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80088e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80088e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80088e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80088e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80088ea:	e895 0003 	ldmia.w	r5, {r0, r1}
 80088ee:	e884 0003 	stmia.w	r4, {r0, r1}
	with_data(&cmd, 1);
 80088f2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80088f6:	2101      	movs	r1, #1
 80088f8:	4618      	mov	r0, r3
 80088fa:	f000 f8d1 	bl	8008aa0 <with_data>

	if(!qspi_poll(&cmd, READ_FLAG_STATUS_REGISTER, 7, true)) {
 80088fe:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8008902:	2301      	movs	r3, #1
 8008904:	2207      	movs	r2, #7
 8008906:	2170      	movs	r1, #112	; 0x70
 8008908:	f000 f8f8 	bl	8008afc <qspi_poll>

	}

	uint8_t flags = __read_flags();
 800890c:	f7ff ff02 	bl	8008714 <__read_flags>
 8008910:	4603      	mov	r3, r0
 8008912:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	// Checks if the protection fault flag is set
	if(flags & (1 << 4)) {
 8008916:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800891a:	f003 0310 	and.w	r3, r3, #16
 800891e:	2b00      	cmp	r3, #0
 8008920:	d001      	beq.n	8008926 <__flash_write_page+0x9a>
		__write_disable_latch(); // Manually reset the latch
 8008922:	f7ff ff4d 	bl	80087c0 <__write_disable_latch>


	}
}
 8008926:	bf00      	nop
 8008928:	3788      	adds	r7, #136	; 0x88
 800892a:	46bd      	mov	sp, r7
 800892c:	bdb0      	pop	{r4, r5, r7, pc}

0800892e <flash_write>:

void flash_write(uint32_t address, uint8_t* buffer, uint32_t length) {
 800892e:	b580      	push	{r7, lr}
 8008930:	b086      	sub	sp, #24
 8008932:	af00      	add	r7, sp, #0
 8008934:	60f8      	str	r0, [r7, #12]
 8008936:	60b9      	str	r1, [r7, #8]
 8008938:	607a      	str	r2, [r7, #4]
	uint32_t internal_address = address % PAGE_SIZE;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	b2db      	uxtb	r3, r3
 800893e:	617b      	str	r3, [r7, #20]

	while(internal_address + length > PAGE_SIZE) {
 8008940:	e016      	b.n	8008970 <flash_write+0x42>
		uint32_t write_length = PAGE_SIZE - internal_address;
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8008948:	613b      	str	r3, [r7, #16]

		__flash_write_page(address, buffer, write_length);
 800894a:	693a      	ldr	r2, [r7, #16]
 800894c:	68b9      	ldr	r1, [r7, #8]
 800894e:	68f8      	ldr	r0, [r7, #12]
 8008950:	f7ff ff9c 	bl	800888c <__flash_write_page>
		buffer += write_length;
 8008954:	68ba      	ldr	r2, [r7, #8]
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	4413      	add	r3, r2
 800895a:	60bb      	str	r3, [r7, #8]
		address += write_length;
 800895c:	68fa      	ldr	r2, [r7, #12]
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	4413      	add	r3, r2
 8008962:	60fb      	str	r3, [r7, #12]
		length -= write_length;
 8008964:	687a      	ldr	r2, [r7, #4]
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	1ad3      	subs	r3, r2, r3
 800896a:	607b      	str	r3, [r7, #4]

		internal_address = 0;
 800896c:	2300      	movs	r3, #0
 800896e:	617b      	str	r3, [r7, #20]
	while(internal_address + length > PAGE_SIZE) {
 8008970:	697a      	ldr	r2, [r7, #20]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	4413      	add	r3, r2
 8008976:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800897a:	d8e2      	bhi.n	8008942 <flash_write+0x14>
	}

	__flash_write_page(address, buffer, length);
 800897c:	687a      	ldr	r2, [r7, #4]
 800897e:	68b9      	ldr	r1, [r7, #8]
 8008980:	68f8      	ldr	r0, [r7, #12]
 8008982:	f7ff ff83 	bl	800888c <__flash_write_page>
}
 8008986:	bf00      	nop
 8008988:	3718      	adds	r7, #24
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}

0800898e <__flash_erase>:


   }
}

void __flash_erase(uint32_t instruction, uint32_t address) {
 800898e:	b5b0      	push	{r4, r5, r7, lr}
 8008990:	b0a0      	sub	sp, #128	; 0x80
 8008992:	af00      	add	r7, sp, #0
 8008994:	63f8      	str	r0, [r7, #60]	; 0x3c
 8008996:	63b9      	str	r1, [r7, #56]	; 0x38

	__write_enable_latch();
 8008998:	f7ff fed9 	bl	800874e <__write_enable_latch>


	Command cmd = get_default_command();
 800899c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80089a0:	4618      	mov	r0, r3
 80089a2:	f000 f847 	bl	8008a34 <get_default_command>
	with_address(&cmd, address);
 80089a6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80089aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80089ac:	4618      	mov	r0, r3
 80089ae:	f000 f861 	bl	8008a74 <with_address>


	if(!qspi_run(&cmd, instruction)) {
 80089b2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80089b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80089b8:	4618      	mov	r0, r3
 80089ba:	f000 f883 	bl	8008ac4 <qspi_run>
	}

	/*
	 * Checks if the controller is ready to proceed to the next command
	 */
	cmd = get_default_command();
 80089be:	463b      	mov	r3, r7
 80089c0:	4618      	mov	r0, r3
 80089c2:	f000 f837 	bl	8008a34 <get_default_command>
 80089c6:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80089ca:	463d      	mov	r5, r7
 80089cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80089ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80089d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80089d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80089d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80089d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80089d8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80089dc:	e884 0003 	stmia.w	r4, {r0, r1}
	with_data(&cmd, 1);
 80089e0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80089e4:	2101      	movs	r1, #1
 80089e6:	4618      	mov	r0, r3
 80089e8:	f000 f85a 	bl	8008aa0 <with_data>

	if(!qspi_poll(&cmd, READ_FLAG_STATUS_REGISTER, 7, true)) {
 80089ec:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80089f0:	2301      	movs	r3, #1
 80089f2:	2207      	movs	r2, #7
 80089f4:	2170      	movs	r1, #112	; 0x70
 80089f6:	f000 f881 	bl	8008afc <qspi_poll>
	}

	/*
	 * Checks if the protection fault flag is set
	 */
	uint8_t flags = __read_flags();
 80089fa:	f7ff fe8b 	bl	8008714 <__read_flags>
 80089fe:	4603      	mov	r3, r0
 8008a00:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	if(flags & (1 << 5)) {
 8008a04:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8008a08:	f003 0320 	and.w	r3, r3, #32
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d001      	beq.n	8008a14 <__flash_erase+0x86>
		__write_disable_latch(); // Manually reset the latch
 8008a10:	f7ff fed6 	bl	80087c0 <__write_disable_latch>


	}
}
 8008a14:	bf00      	nop
 8008a16:	3780      	adds	r7, #128	; 0x80
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bdb0      	pop	{r4, r5, r7, pc}

08008a1c <flash_erase_subsector>:

/*
 * Erases the whole sub-sector represented by the provided address.
 * The address may be any of those within the sub-sector.
 */
void flash_erase_subsector(uint32_t address) {
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b082      	sub	sp, #8
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
	__flash_erase(ERASE_SUBSECTOR, address);
 8008a24:	6879      	ldr	r1, [r7, #4]
 8008a26:	2020      	movs	r0, #32
 8008a28:	f7ff ffb1 	bl	800898e <__flash_erase>
}
 8008a2c:	bf00      	nop
 8008a2e:	3708      	adds	r7, #8
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}

08008a34 <get_default_command>:
#include "io_driver.h"




Command get_default_command() {
 8008a34:	b5b0      	push	{r4, r5, r7, lr}
 8008a36:	b090      	sub	sp, #64	; 0x40
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
	Command command = {
 8008a3c:	f107 0308 	add.w	r3, r7, #8
 8008a40:	2238      	movs	r2, #56	; 0x38
 8008a42:	2100      	movs	r1, #0
 8008a44:	4618      	mov	r0, r3
 8008a46:	f002 f931 	bl	800acac <memset>
 8008a4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a4e:	623b      	str	r3, [r7, #32]
			.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY,
			.SIOOMode = QSPI_SIOO_INST_EVERY_CMD
		}
	};

	return command;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	461d      	mov	r5, r3
 8008a54:	f107 0408 	add.w	r4, r7, #8
 8008a58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008a5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008a5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008a5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008a60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008a62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008a64:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008a68:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	3740      	adds	r7, #64	; 0x40
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bdb0      	pop	{r4, r5, r7, pc}

08008a74 <with_address>:

/*
 * The two following functions enable the programmer to build a QSPI command very easily.
 */
void with_address(Command* cmd, uint32_t address) {
 8008a74:	b480      	push	{r7}
 8008a76:	b083      	sub	sp, #12
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
 8008a7c:	6039      	str	r1, [r7, #0]
	cmd->qspi_command.AddressMode = QSPI_ADDRESS_1_LINE;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008a84:	61da      	str	r2, [r3, #28]
	cmd->qspi_command.AddressSize = QSPI_ADDRESS_24_BITS;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008a8c:	60da      	str	r2, [r3, #12]
	cmd->qspi_command.Address = address;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	683a      	ldr	r2, [r7, #0]
 8008a92:	605a      	str	r2, [r3, #4]
}
 8008a94:	bf00      	nop
 8008a96:	370c      	adds	r7, #12
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr

08008aa0 <with_data>:

void with_data(Command* cmd, uint32_t length) {
 8008aa0:	b480      	push	{r7}
 8008aa2:	b083      	sub	sp, #12
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	6039      	str	r1, [r7, #0]
	cmd->qspi_command.DataMode = QSPI_DATA_1_LINE;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008ab0:	625a      	str	r2, [r3, #36]	; 0x24
	cmd->qspi_command.NbData = length;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	683a      	ldr	r2, [r7, #0]
 8008ab6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008ab8:	bf00      	nop
 8008aba:	370c      	adds	r7, #12
 8008abc:	46bd      	mov	sp, r7
 8008abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac2:	4770      	bx	lr

08008ac4 <qspi_run>:


/*
 * Higher-level abstraction layer for the QSPI interface.
 */
bool qspi_run(Command* cmd, uint32_t instruction) {
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b082      	sub	sp, #8
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
	cmd->qspi_command.Instruction = instruction;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	683a      	ldr	r2, [r7, #0]
 8008ad2:	601a      	str	r2, [r3, #0]
	return HAL_QSPI_Command(&hqspi, &(cmd->qspi_command), IO_TIMEOUT) == HAL_OK;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008ada:	4619      	mov	r1, r3
 8008adc:	4806      	ldr	r0, [pc, #24]	; (8008af8 <qspi_run+0x34>)
 8008ade:	f7fc fc4b 	bl	8005378 <HAL_QSPI_Command>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	bf0c      	ite	eq
 8008ae8:	2301      	moveq	r3, #1
 8008aea:	2300      	movne	r3, #0
 8008aec:	b2db      	uxtb	r3, r3
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3708      	adds	r7, #8
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
 8008af6:	bf00      	nop
 8008af8:	20006fc0 	.word	0x20006fc0

08008afc <qspi_poll>:

bool qspi_poll(Command* cmd, uint32_t instruction, uint8_t bit, bool value) {
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b08a      	sub	sp, #40	; 0x28
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	60f8      	str	r0, [r7, #12]
 8008b04:	60b9      	str	r1, [r7, #8]
 8008b06:	4611      	mov	r1, r2
 8008b08:	461a      	mov	r2, r3
 8008b0a:	460b      	mov	r3, r1
 8008b0c:	71fb      	strb	r3, [r7, #7]
 8008b0e:	4613      	mov	r3, r2
 8008b10:	71bb      	strb	r3, [r7, #6]
	QSPI_AutoPollingTypeDef poller;

	poller.MatchMode = QSPI_MATCH_MODE_AND;
 8008b12:	2300      	movs	r3, #0
 8008b14:	623b      	str	r3, [r7, #32]
	poller.StatusBytesSize = 1;
 8008b16:	2301      	movs	r3, #1
 8008b18:	61fb      	str	r3, [r7, #28]
	poller.Interval = 0x10;
 8008b1a:	2310      	movs	r3, #16
 8008b1c:	61bb      	str	r3, [r7, #24]
	poller.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8008b1e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008b22:	627b      	str	r3, [r7, #36]	; 0x24
	poller.Match = value << bit;
 8008b24:	79ba      	ldrb	r2, [r7, #6]
 8008b26:	79fb      	ldrb	r3, [r7, #7]
 8008b28:	fa02 f303 	lsl.w	r3, r2, r3
 8008b2c:	613b      	str	r3, [r7, #16]
	poller.Mask = 1 << bit;
 8008b2e:	79fb      	ldrb	r3, [r7, #7]
 8008b30:	2201      	movs	r2, #1
 8008b32:	fa02 f303 	lsl.w	r3, r2, r3
 8008b36:	617b      	str	r3, [r7, #20]

	cmd->qspi_command.Instruction = instruction;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	68ba      	ldr	r2, [r7, #8]
 8008b3c:	601a      	str	r2, [r3, #0]

	return HAL_QSPI_AutoPolling(&hqspi, &(cmd->qspi_command), &poller, IO_TIMEOUT) == HAL_OK;
 8008b3e:	68f9      	ldr	r1, [r7, #12]
 8008b40:	f107 0210 	add.w	r2, r7, #16
 8008b44:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8008b48:	4806      	ldr	r0, [pc, #24]	; (8008b64 <qspi_poll+0x68>)
 8008b4a:	f7fc fdac 	bl	80056a6 <HAL_QSPI_AutoPolling>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	bf0c      	ite	eq
 8008b54:	2301      	moveq	r3, #1
 8008b56:	2300      	movne	r3, #0
 8008b58:	b2db      	uxtb	r3, r3
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3728      	adds	r7, #40	; 0x28
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
 8008b62:	bf00      	nop
 8008b64:	20006fc0 	.word	0x20006fc0

08008b68 <qspi_transmit>:

bool qspi_transmit(uint8_t* buffer) {
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b082      	sub	sp, #8
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
	return HAL_QSPI_Transmit(&hqspi, buffer, IO_TIMEOUT) == HAL_OK;
 8008b70:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008b74:	6879      	ldr	r1, [r7, #4]
 8008b76:	4806      	ldr	r0, [pc, #24]	; (8008b90 <qspi_transmit+0x28>)
 8008b78:	f7fc fc5c 	bl	8005434 <HAL_QSPI_Transmit>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	bf0c      	ite	eq
 8008b82:	2301      	moveq	r3, #1
 8008b84:	2300      	movne	r3, #0
 8008b86:	b2db      	uxtb	r3, r3
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3708      	adds	r7, #8
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}
 8008b90:	20006fc0 	.word	0x20006fc0

08008b94 <qspi_receive>:

bool qspi_receive(uint8_t* buffer) {
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b082      	sub	sp, #8
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
	return HAL_QSPI_Receive(&hqspi, buffer, IO_TIMEOUT) == HAL_OK;
 8008b9c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008ba0:	6879      	ldr	r1, [r7, #4]
 8008ba2:	4806      	ldr	r0, [pc, #24]	; (8008bbc <qspi_receive+0x28>)
 8008ba4:	f7fc fcdd 	bl	8005562 <HAL_QSPI_Receive>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	bf0c      	ite	eq
 8008bae:	2301      	moveq	r3, #1
 8008bb0:	2300      	movne	r3, #0
 8008bb2:	b2db      	uxtb	r3, r3
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3708      	adds	r7, #8
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}
 8008bbc:	20006fc0 	.word	0x20006fc0

08008bc0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b085      	sub	sp, #20
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008bce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008bd2:	2b84      	cmp	r3, #132	; 0x84
 8008bd4:	d005      	beq.n	8008be2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008bd6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	4413      	add	r3, r2
 8008bde:	3303      	adds	r3, #3
 8008be0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008be2:	68fb      	ldr	r3, [r7, #12]
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3714      	adds	r7, #20
 8008be8:	46bd      	mov	sp, r7
 8008bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bee:	4770      	bx	lr

08008bf0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008bf4:	f000 ffb6 	bl	8009b64 <vTaskStartScheduler>
  
  return osOK;
 8008bf8:	2300      	movs	r3, #0
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	bd80      	pop	{r7, pc}

08008bfe <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008bfe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c00:	b089      	sub	sp, #36	; 0x24
 8008c02:	af04      	add	r7, sp, #16
 8008c04:	6078      	str	r0, [r7, #4]
 8008c06:	6039      	str	r1, [r7, #0]
      return NULL;
    } 
  }
#elif( configSUPPORT_STATIC_ALLOCATION == 1 )

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	685c      	ldr	r4, [r3, #4]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681d      	ldr	r5, [r3, #0]
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	691e      	ldr	r6, [r3, #16]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f7ff ffd0 	bl	8008bc0 <makeFreeRtosPriority>
 8008c20:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	695b      	ldr	r3, [r3, #20]
 8008c26:	687a      	ldr	r2, [r7, #4]
 8008c28:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008c2a:	9202      	str	r2, [sp, #8]
 8008c2c:	9301      	str	r3, [sp, #4]
 8008c2e:	9100      	str	r1, [sp, #0]
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	4632      	mov	r2, r6
 8008c34:	4629      	mov	r1, r5
 8008c36:	4620      	mov	r0, r4
 8008c38:	f000 fd98 	bl	800976c <xTaskCreateStatic>
 8008c3c:	60f8      	str	r0, [r7, #12]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3714      	adds	r7, #20
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008c48 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b084      	sub	sp, #16
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d001      	beq.n	8008c5e <osDelay+0x16>
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	e000      	b.n	8008c60 <osDelay+0x18>
 8008c5e:	2301      	movs	r3, #1
 8008c60:	4618      	mov	r0, r3
 8008c62:	f000 ff4b 	bl	8009afc <vTaskDelay>
  
  return osOK;
 8008c66:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3710      	adds	r7, #16
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}

08008c70 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008c70:	b480      	push	{r7}
 8008c72:	b083      	sub	sp, #12
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f103 0208 	add.w	r2, r3, #8
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c88:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f103 0208 	add.w	r2, r3, #8
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f103 0208 	add.w	r2, r3, #8
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008ca4:	bf00      	nop
 8008ca6:	370c      	adds	r7, #12
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cae:	4770      	bx	lr

08008cb0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b083      	sub	sp, #12
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008cbe:	bf00      	nop
 8008cc0:	370c      	adds	r7, #12
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc8:	4770      	bx	lr

08008cca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008cca:	b480      	push	{r7}
 8008ccc:	b085      	sub	sp, #20
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	6078      	str	r0, [r7, #4]
 8008cd2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	68fa      	ldr	r2, [r7, #12]
 8008cde:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	689a      	ldr	r2, [r3, #8]
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	689b      	ldr	r3, [r3, #8]
 8008cec:	683a      	ldr	r2, [r7, #0]
 8008cee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	683a      	ldr	r2, [r7, #0]
 8008cf4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	687a      	ldr	r2, [r7, #4]
 8008cfa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	1c5a      	adds	r2, r3, #1
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	601a      	str	r2, [r3, #0]
}
 8008d06:	bf00      	nop
 8008d08:	3714      	adds	r7, #20
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d10:	4770      	bx	lr

08008d12 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008d12:	b480      	push	{r7}
 8008d14:	b085      	sub	sp, #20
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	6078      	str	r0, [r7, #4]
 8008d1a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d28:	d103      	bne.n	8008d32 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	691b      	ldr	r3, [r3, #16]
 8008d2e:	60fb      	str	r3, [r7, #12]
 8008d30:	e00c      	b.n	8008d4c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	3308      	adds	r3, #8
 8008d36:	60fb      	str	r3, [r7, #12]
 8008d38:	e002      	b.n	8008d40 <vListInsert+0x2e>
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	685b      	ldr	r3, [r3, #4]
 8008d3e:	60fb      	str	r3, [r7, #12]
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	68ba      	ldr	r2, [r7, #8]
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d2f6      	bcs.n	8008d3a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	685a      	ldr	r2, [r3, #4]
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	685b      	ldr	r3, [r3, #4]
 8008d58:	683a      	ldr	r2, [r7, #0]
 8008d5a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	68fa      	ldr	r2, [r7, #12]
 8008d60:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	683a      	ldr	r2, [r7, #0]
 8008d66:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	687a      	ldr	r2, [r7, #4]
 8008d6c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	1c5a      	adds	r2, r3, #1
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	601a      	str	r2, [r3, #0]
}
 8008d78:	bf00      	nop
 8008d7a:	3714      	adds	r7, #20
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d82:	4770      	bx	lr

08008d84 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008d84:	b480      	push	{r7}
 8008d86:	b085      	sub	sp, #20
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	691b      	ldr	r3, [r3, #16]
 8008d90:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	687a      	ldr	r2, [r7, #4]
 8008d98:	6892      	ldr	r2, [r2, #8]
 8008d9a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	689b      	ldr	r3, [r3, #8]
 8008da0:	687a      	ldr	r2, [r7, #4]
 8008da2:	6852      	ldr	r2, [r2, #4]
 8008da4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	687a      	ldr	r2, [r7, #4]
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d103      	bne.n	8008db8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	689a      	ldr	r2, [r3, #8]
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	1e5a      	subs	r2, r3, #1
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3714      	adds	r7, #20
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd6:	4770      	bx	lr

08008dd8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b084      	sub	sp, #16
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
 8008de0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d10a      	bne.n	8008e02 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df0:	f383 8811 	msr	BASEPRI, r3
 8008df4:	f3bf 8f6f 	isb	sy
 8008df8:	f3bf 8f4f 	dsb	sy
 8008dfc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008dfe:	bf00      	nop
 8008e00:	e7fe      	b.n	8008e00 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008e02:	f001 fdff 	bl	800aa04 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681a      	ldr	r2, [r3, #0]
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e0e:	68f9      	ldr	r1, [r7, #12]
 8008e10:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008e12:	fb01 f303 	mul.w	r3, r1, r3
 8008e16:	441a      	add	r2, r3
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681a      	ldr	r2, [r3, #0]
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681a      	ldr	r2, [r3, #0]
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e32:	3b01      	subs	r3, #1
 8008e34:	68f9      	ldr	r1, [r7, #12]
 8008e36:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008e38:	fb01 f303 	mul.w	r3, r1, r3
 8008e3c:	441a      	add	r2, r3
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	22ff      	movs	r2, #255	; 0xff
 8008e46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	22ff      	movs	r2, #255	; 0xff
 8008e4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d114      	bne.n	8008e82 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	691b      	ldr	r3, [r3, #16]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d01a      	beq.n	8008e96 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	3310      	adds	r3, #16
 8008e64:	4618      	mov	r0, r3
 8008e66:	f001 f8cf 	bl	800a008 <xTaskRemoveFromEventList>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d012      	beq.n	8008e96 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008e70:	4b0c      	ldr	r3, [pc, #48]	; (8008ea4 <xQueueGenericReset+0xcc>)
 8008e72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e76:	601a      	str	r2, [r3, #0]
 8008e78:	f3bf 8f4f 	dsb	sy
 8008e7c:	f3bf 8f6f 	isb	sy
 8008e80:	e009      	b.n	8008e96 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	3310      	adds	r3, #16
 8008e86:	4618      	mov	r0, r3
 8008e88:	f7ff fef2 	bl	8008c70 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	3324      	adds	r3, #36	; 0x24
 8008e90:	4618      	mov	r0, r3
 8008e92:	f7ff feed 	bl	8008c70 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008e96:	f001 fde5 	bl	800aa64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008e9a:	2301      	movs	r3, #1
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3710      	adds	r7, #16
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}
 8008ea4:	e000ed04 	.word	0xe000ed04

08008ea8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b08e      	sub	sp, #56	; 0x38
 8008eac:	af02      	add	r7, sp, #8
 8008eae:	60f8      	str	r0, [r7, #12]
 8008eb0:	60b9      	str	r1, [r7, #8]
 8008eb2:	607a      	str	r2, [r7, #4]
 8008eb4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d10a      	bne.n	8008ed2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec0:	f383 8811 	msr	BASEPRI, r3
 8008ec4:	f3bf 8f6f 	isb	sy
 8008ec8:	f3bf 8f4f 	dsb	sy
 8008ecc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008ece:	bf00      	nop
 8008ed0:	e7fe      	b.n	8008ed0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d10a      	bne.n	8008eee <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008edc:	f383 8811 	msr	BASEPRI, r3
 8008ee0:	f3bf 8f6f 	isb	sy
 8008ee4:	f3bf 8f4f 	dsb	sy
 8008ee8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008eea:	bf00      	nop
 8008eec:	e7fe      	b.n	8008eec <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d002      	beq.n	8008efa <xQueueGenericCreateStatic+0x52>
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d001      	beq.n	8008efe <xQueueGenericCreateStatic+0x56>
 8008efa:	2301      	movs	r3, #1
 8008efc:	e000      	b.n	8008f00 <xQueueGenericCreateStatic+0x58>
 8008efe:	2300      	movs	r3, #0
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d10a      	bne.n	8008f1a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f08:	f383 8811 	msr	BASEPRI, r3
 8008f0c:	f3bf 8f6f 	isb	sy
 8008f10:	f3bf 8f4f 	dsb	sy
 8008f14:	623b      	str	r3, [r7, #32]
}
 8008f16:	bf00      	nop
 8008f18:	e7fe      	b.n	8008f18 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d102      	bne.n	8008f26 <xQueueGenericCreateStatic+0x7e>
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d101      	bne.n	8008f2a <xQueueGenericCreateStatic+0x82>
 8008f26:	2301      	movs	r3, #1
 8008f28:	e000      	b.n	8008f2c <xQueueGenericCreateStatic+0x84>
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d10a      	bne.n	8008f46 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f34:	f383 8811 	msr	BASEPRI, r3
 8008f38:	f3bf 8f6f 	isb	sy
 8008f3c:	f3bf 8f4f 	dsb	sy
 8008f40:	61fb      	str	r3, [r7, #28]
}
 8008f42:	bf00      	nop
 8008f44:	e7fe      	b.n	8008f44 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008f46:	2348      	movs	r3, #72	; 0x48
 8008f48:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	2b48      	cmp	r3, #72	; 0x48
 8008f4e:	d00a      	beq.n	8008f66 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f54:	f383 8811 	msr	BASEPRI, r3
 8008f58:	f3bf 8f6f 	isb	sy
 8008f5c:	f3bf 8f4f 	dsb	sy
 8008f60:	61bb      	str	r3, [r7, #24]
}
 8008f62:	bf00      	nop
 8008f64:	e7fe      	b.n	8008f64 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008f66:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d009      	beq.n	8008f86 <xQueueGenericCreateStatic+0xde>
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008f72:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f78:	9300      	str	r3, [sp, #0]
 8008f7a:	4613      	mov	r3, r2
 8008f7c:	687a      	ldr	r2, [r7, #4]
 8008f7e:	68b9      	ldr	r1, [r7, #8]
 8008f80:	68f8      	ldr	r0, [r7, #12]
 8008f82:	f000 f805 	bl	8008f90 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3730      	adds	r7, #48	; 0x30
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}

08008f90 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b084      	sub	sp, #16
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	60f8      	str	r0, [r7, #12]
 8008f98:	60b9      	str	r1, [r7, #8]
 8008f9a:	607a      	str	r2, [r7, #4]
 8008f9c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d103      	bne.n	8008fac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008fa4:	69bb      	ldr	r3, [r7, #24]
 8008fa6:	69ba      	ldr	r2, [r7, #24]
 8008fa8:	601a      	str	r2, [r3, #0]
 8008faa:	e002      	b.n	8008fb2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008fac:	69bb      	ldr	r3, [r7, #24]
 8008fae:	687a      	ldr	r2, [r7, #4]
 8008fb0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008fb2:	69bb      	ldr	r3, [r7, #24]
 8008fb4:	68fa      	ldr	r2, [r7, #12]
 8008fb6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008fb8:	69bb      	ldr	r3, [r7, #24]
 8008fba:	68ba      	ldr	r2, [r7, #8]
 8008fbc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008fbe:	2101      	movs	r1, #1
 8008fc0:	69b8      	ldr	r0, [r7, #24]
 8008fc2:	f7ff ff09 	bl	8008dd8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008fc6:	bf00      	nop
 8008fc8:	3710      	adds	r7, #16
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}

08008fce <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008fce:	b580      	push	{r7, lr}
 8008fd0:	b082      	sub	sp, #8
 8008fd2:	af00      	add	r7, sp, #0
 8008fd4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d00e      	beq.n	8008ffa <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2200      	movs	r2, #0
 8008fec:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008fee:	2300      	movs	r3, #0
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	2100      	movs	r1, #0
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f000 f81f 	bl	8009038 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008ffa:	bf00      	nop
 8008ffc:	3708      	adds	r7, #8
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}

08009002 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8009002:	b580      	push	{r7, lr}
 8009004:	b088      	sub	sp, #32
 8009006:	af02      	add	r7, sp, #8
 8009008:	4603      	mov	r3, r0
 800900a:	6039      	str	r1, [r7, #0]
 800900c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800900e:	2301      	movs	r3, #1
 8009010:	617b      	str	r3, [r7, #20]
 8009012:	2300      	movs	r3, #0
 8009014:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009016:	79fb      	ldrb	r3, [r7, #7]
 8009018:	9300      	str	r3, [sp, #0]
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	2200      	movs	r2, #0
 800901e:	6939      	ldr	r1, [r7, #16]
 8009020:	6978      	ldr	r0, [r7, #20]
 8009022:	f7ff ff41 	bl	8008ea8 <xQueueGenericCreateStatic>
 8009026:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009028:	68f8      	ldr	r0, [r7, #12]
 800902a:	f7ff ffd0 	bl	8008fce <prvInitialiseMutex>

		return xNewQueue;
 800902e:	68fb      	ldr	r3, [r7, #12]
	}
 8009030:	4618      	mov	r0, r3
 8009032:	3718      	adds	r7, #24
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}

08009038 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b08e      	sub	sp, #56	; 0x38
 800903c:	af00      	add	r7, sp, #0
 800903e:	60f8      	str	r0, [r7, #12]
 8009040:	60b9      	str	r1, [r7, #8]
 8009042:	607a      	str	r2, [r7, #4]
 8009044:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009046:	2300      	movs	r3, #0
 8009048:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800904e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009050:	2b00      	cmp	r3, #0
 8009052:	d10a      	bne.n	800906a <xQueueGenericSend+0x32>
	__asm volatile
 8009054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009058:	f383 8811 	msr	BASEPRI, r3
 800905c:	f3bf 8f6f 	isb	sy
 8009060:	f3bf 8f4f 	dsb	sy
 8009064:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009066:	bf00      	nop
 8009068:	e7fe      	b.n	8009068 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d103      	bne.n	8009078 <xQueueGenericSend+0x40>
 8009070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009074:	2b00      	cmp	r3, #0
 8009076:	d101      	bne.n	800907c <xQueueGenericSend+0x44>
 8009078:	2301      	movs	r3, #1
 800907a:	e000      	b.n	800907e <xQueueGenericSend+0x46>
 800907c:	2300      	movs	r3, #0
 800907e:	2b00      	cmp	r3, #0
 8009080:	d10a      	bne.n	8009098 <xQueueGenericSend+0x60>
	__asm volatile
 8009082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009086:	f383 8811 	msr	BASEPRI, r3
 800908a:	f3bf 8f6f 	isb	sy
 800908e:	f3bf 8f4f 	dsb	sy
 8009092:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009094:	bf00      	nop
 8009096:	e7fe      	b.n	8009096 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	2b02      	cmp	r3, #2
 800909c:	d103      	bne.n	80090a6 <xQueueGenericSend+0x6e>
 800909e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090a2:	2b01      	cmp	r3, #1
 80090a4:	d101      	bne.n	80090aa <xQueueGenericSend+0x72>
 80090a6:	2301      	movs	r3, #1
 80090a8:	e000      	b.n	80090ac <xQueueGenericSend+0x74>
 80090aa:	2300      	movs	r3, #0
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d10a      	bne.n	80090c6 <xQueueGenericSend+0x8e>
	__asm volatile
 80090b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b4:	f383 8811 	msr	BASEPRI, r3
 80090b8:	f3bf 8f6f 	isb	sy
 80090bc:	f3bf 8f4f 	dsb	sy
 80090c0:	623b      	str	r3, [r7, #32]
}
 80090c2:	bf00      	nop
 80090c4:	e7fe      	b.n	80090c4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80090c6:	f001 f935 	bl	800a334 <xTaskGetSchedulerState>
 80090ca:	4603      	mov	r3, r0
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d102      	bne.n	80090d6 <xQueueGenericSend+0x9e>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d101      	bne.n	80090da <xQueueGenericSend+0xa2>
 80090d6:	2301      	movs	r3, #1
 80090d8:	e000      	b.n	80090dc <xQueueGenericSend+0xa4>
 80090da:	2300      	movs	r3, #0
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d10a      	bne.n	80090f6 <xQueueGenericSend+0xbe>
	__asm volatile
 80090e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e4:	f383 8811 	msr	BASEPRI, r3
 80090e8:	f3bf 8f6f 	isb	sy
 80090ec:	f3bf 8f4f 	dsb	sy
 80090f0:	61fb      	str	r3, [r7, #28]
}
 80090f2:	bf00      	nop
 80090f4:	e7fe      	b.n	80090f4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80090f6:	f001 fc85 	bl	800aa04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80090fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009102:	429a      	cmp	r2, r3
 8009104:	d302      	bcc.n	800910c <xQueueGenericSend+0xd4>
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	2b02      	cmp	r3, #2
 800910a:	d129      	bne.n	8009160 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800910c:	683a      	ldr	r2, [r7, #0]
 800910e:	68b9      	ldr	r1, [r7, #8]
 8009110:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009112:	f000 fa41 	bl	8009598 <prvCopyDataToQueue>
 8009116:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800911a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800911c:	2b00      	cmp	r3, #0
 800911e:	d010      	beq.n	8009142 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009122:	3324      	adds	r3, #36	; 0x24
 8009124:	4618      	mov	r0, r3
 8009126:	f000 ff6f 	bl	800a008 <xTaskRemoveFromEventList>
 800912a:	4603      	mov	r3, r0
 800912c:	2b00      	cmp	r3, #0
 800912e:	d013      	beq.n	8009158 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009130:	4b3f      	ldr	r3, [pc, #252]	; (8009230 <xQueueGenericSend+0x1f8>)
 8009132:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009136:	601a      	str	r2, [r3, #0]
 8009138:	f3bf 8f4f 	dsb	sy
 800913c:	f3bf 8f6f 	isb	sy
 8009140:	e00a      	b.n	8009158 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009144:	2b00      	cmp	r3, #0
 8009146:	d007      	beq.n	8009158 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009148:	4b39      	ldr	r3, [pc, #228]	; (8009230 <xQueueGenericSend+0x1f8>)
 800914a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800914e:	601a      	str	r2, [r3, #0]
 8009150:	f3bf 8f4f 	dsb	sy
 8009154:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009158:	f001 fc84 	bl	800aa64 <vPortExitCritical>
				return pdPASS;
 800915c:	2301      	movs	r3, #1
 800915e:	e063      	b.n	8009228 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d103      	bne.n	800916e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009166:	f001 fc7d 	bl	800aa64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800916a:	2300      	movs	r3, #0
 800916c:	e05c      	b.n	8009228 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800916e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009170:	2b00      	cmp	r3, #0
 8009172:	d106      	bne.n	8009182 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009174:	f107 0314 	add.w	r3, r7, #20
 8009178:	4618      	mov	r0, r3
 800917a:	f000 ffa7 	bl	800a0cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800917e:	2301      	movs	r3, #1
 8009180:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009182:	f001 fc6f 	bl	800aa64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009186:	f000 fd4d 	bl	8009c24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800918a:	f001 fc3b 	bl	800aa04 <vPortEnterCritical>
 800918e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009190:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009194:	b25b      	sxtb	r3, r3
 8009196:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800919a:	d103      	bne.n	80091a4 <xQueueGenericSend+0x16c>
 800919c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800919e:	2200      	movs	r2, #0
 80091a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80091a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80091aa:	b25b      	sxtb	r3, r3
 80091ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091b0:	d103      	bne.n	80091ba <xQueueGenericSend+0x182>
 80091b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b4:	2200      	movs	r2, #0
 80091b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80091ba:	f001 fc53 	bl	800aa64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80091be:	1d3a      	adds	r2, r7, #4
 80091c0:	f107 0314 	add.w	r3, r7, #20
 80091c4:	4611      	mov	r1, r2
 80091c6:	4618      	mov	r0, r3
 80091c8:	f000 ff96 	bl	800a0f8 <xTaskCheckForTimeOut>
 80091cc:	4603      	mov	r3, r0
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d124      	bne.n	800921c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80091d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091d4:	f000 fab2 	bl	800973c <prvIsQueueFull>
 80091d8:	4603      	mov	r3, r0
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d018      	beq.n	8009210 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80091de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e0:	3310      	adds	r3, #16
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	4611      	mov	r1, r2
 80091e6:	4618      	mov	r0, r3
 80091e8:	f000 feea 	bl	8009fc0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80091ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091ee:	f000 fa3d 	bl	800966c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80091f2:	f000 fd25 	bl	8009c40 <xTaskResumeAll>
 80091f6:	4603      	mov	r3, r0
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	f47f af7c 	bne.w	80090f6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80091fe:	4b0c      	ldr	r3, [pc, #48]	; (8009230 <xQueueGenericSend+0x1f8>)
 8009200:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009204:	601a      	str	r2, [r3, #0]
 8009206:	f3bf 8f4f 	dsb	sy
 800920a:	f3bf 8f6f 	isb	sy
 800920e:	e772      	b.n	80090f6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009210:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009212:	f000 fa2b 	bl	800966c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009216:	f000 fd13 	bl	8009c40 <xTaskResumeAll>
 800921a:	e76c      	b.n	80090f6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800921c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800921e:	f000 fa25 	bl	800966c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009222:	f000 fd0d 	bl	8009c40 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009226:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009228:	4618      	mov	r0, r3
 800922a:	3738      	adds	r7, #56	; 0x38
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}
 8009230:	e000ed04 	.word	0xe000ed04

08009234 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b08e      	sub	sp, #56	; 0x38
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009244:	2b00      	cmp	r3, #0
 8009246:	d10a      	bne.n	800925e <xQueueGiveFromISR+0x2a>
	__asm volatile
 8009248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800924c:	f383 8811 	msr	BASEPRI, r3
 8009250:	f3bf 8f6f 	isb	sy
 8009254:	f3bf 8f4f 	dsb	sy
 8009258:	623b      	str	r3, [r7, #32]
}
 800925a:	bf00      	nop
 800925c:	e7fe      	b.n	800925c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800925e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009262:	2b00      	cmp	r3, #0
 8009264:	d00a      	beq.n	800927c <xQueueGiveFromISR+0x48>
	__asm volatile
 8009266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800926a:	f383 8811 	msr	BASEPRI, r3
 800926e:	f3bf 8f6f 	isb	sy
 8009272:	f3bf 8f4f 	dsb	sy
 8009276:	61fb      	str	r3, [r7, #28]
}
 8009278:	bf00      	nop
 800927a:	e7fe      	b.n	800927a <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800927c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d103      	bne.n	800928c <xQueueGiveFromISR+0x58>
 8009284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009286:	689b      	ldr	r3, [r3, #8]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d101      	bne.n	8009290 <xQueueGiveFromISR+0x5c>
 800928c:	2301      	movs	r3, #1
 800928e:	e000      	b.n	8009292 <xQueueGiveFromISR+0x5e>
 8009290:	2300      	movs	r3, #0
 8009292:	2b00      	cmp	r3, #0
 8009294:	d10a      	bne.n	80092ac <xQueueGiveFromISR+0x78>
	__asm volatile
 8009296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800929a:	f383 8811 	msr	BASEPRI, r3
 800929e:	f3bf 8f6f 	isb	sy
 80092a2:	f3bf 8f4f 	dsb	sy
 80092a6:	61bb      	str	r3, [r7, #24]
}
 80092a8:	bf00      	nop
 80092aa:	e7fe      	b.n	80092aa <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80092ac:	f001 fc8c 	bl	800abc8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80092b0:	f3ef 8211 	mrs	r2, BASEPRI
 80092b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b8:	f383 8811 	msr	BASEPRI, r3
 80092bc:	f3bf 8f6f 	isb	sy
 80092c0:	f3bf 8f4f 	dsb	sy
 80092c4:	617a      	str	r2, [r7, #20]
 80092c6:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80092c8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80092ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80092cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092d0:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80092d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80092d8:	429a      	cmp	r2, r3
 80092da:	d22b      	bcs.n	8009334 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80092dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80092e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80092e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092e8:	1c5a      	adds	r2, r3, #1
 80092ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ec:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80092ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80092f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80092f6:	d112      	bne.n	800931e <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80092f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d016      	beq.n	800932e <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009302:	3324      	adds	r3, #36	; 0x24
 8009304:	4618      	mov	r0, r3
 8009306:	f000 fe7f 	bl	800a008 <xTaskRemoveFromEventList>
 800930a:	4603      	mov	r3, r0
 800930c:	2b00      	cmp	r3, #0
 800930e:	d00e      	beq.n	800932e <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d00b      	beq.n	800932e <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	2201      	movs	r2, #1
 800931a:	601a      	str	r2, [r3, #0]
 800931c:	e007      	b.n	800932e <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800931e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009322:	3301      	adds	r3, #1
 8009324:	b2db      	uxtb	r3, r3
 8009326:	b25a      	sxtb	r2, r3
 8009328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800932a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800932e:	2301      	movs	r3, #1
 8009330:	637b      	str	r3, [r7, #52]	; 0x34
 8009332:	e001      	b.n	8009338 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009334:	2300      	movs	r3, #0
 8009336:	637b      	str	r3, [r7, #52]	; 0x34
 8009338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800933a:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009342:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009346:	4618      	mov	r0, r3
 8009348:	3738      	adds	r7, #56	; 0x38
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}
	...

08009350 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b08e      	sub	sp, #56	; 0x38
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
 8009358:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800935a:	2300      	movs	r3, #0
 800935c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009362:	2300      	movs	r3, #0
 8009364:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009368:	2b00      	cmp	r3, #0
 800936a:	d10a      	bne.n	8009382 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800936c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009370:	f383 8811 	msr	BASEPRI, r3
 8009374:	f3bf 8f6f 	isb	sy
 8009378:	f3bf 8f4f 	dsb	sy
 800937c:	623b      	str	r3, [r7, #32]
}
 800937e:	bf00      	nop
 8009380:	e7fe      	b.n	8009380 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009386:	2b00      	cmp	r3, #0
 8009388:	d00a      	beq.n	80093a0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800938a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800938e:	f383 8811 	msr	BASEPRI, r3
 8009392:	f3bf 8f6f 	isb	sy
 8009396:	f3bf 8f4f 	dsb	sy
 800939a:	61fb      	str	r3, [r7, #28]
}
 800939c:	bf00      	nop
 800939e:	e7fe      	b.n	800939e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80093a0:	f000 ffc8 	bl	800a334 <xTaskGetSchedulerState>
 80093a4:	4603      	mov	r3, r0
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d102      	bne.n	80093b0 <xQueueSemaphoreTake+0x60>
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d101      	bne.n	80093b4 <xQueueSemaphoreTake+0x64>
 80093b0:	2301      	movs	r3, #1
 80093b2:	e000      	b.n	80093b6 <xQueueSemaphoreTake+0x66>
 80093b4:	2300      	movs	r3, #0
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d10a      	bne.n	80093d0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80093ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093be:	f383 8811 	msr	BASEPRI, r3
 80093c2:	f3bf 8f6f 	isb	sy
 80093c6:	f3bf 8f4f 	dsb	sy
 80093ca:	61bb      	str	r3, [r7, #24]
}
 80093cc:	bf00      	nop
 80093ce:	e7fe      	b.n	80093ce <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80093d0:	f001 fb18 	bl	800aa04 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80093d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093d8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80093da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d024      	beq.n	800942a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80093e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e2:	1e5a      	subs	r2, r3, #1
 80093e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093e6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80093e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d104      	bne.n	80093fa <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80093f0:	f001 f95e 	bl	800a6b0 <pvTaskIncrementMutexHeldCount>
 80093f4:	4602      	mov	r2, r0
 80093f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093f8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80093fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093fc:	691b      	ldr	r3, [r3, #16]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d00f      	beq.n	8009422 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009404:	3310      	adds	r3, #16
 8009406:	4618      	mov	r0, r3
 8009408:	f000 fdfe 	bl	800a008 <xTaskRemoveFromEventList>
 800940c:	4603      	mov	r3, r0
 800940e:	2b00      	cmp	r3, #0
 8009410:	d007      	beq.n	8009422 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009412:	4b54      	ldr	r3, [pc, #336]	; (8009564 <xQueueSemaphoreTake+0x214>)
 8009414:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009418:	601a      	str	r2, [r3, #0]
 800941a:	f3bf 8f4f 	dsb	sy
 800941e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009422:	f001 fb1f 	bl	800aa64 <vPortExitCritical>
				return pdPASS;
 8009426:	2301      	movs	r3, #1
 8009428:	e097      	b.n	800955a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d111      	bne.n	8009454 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009432:	2b00      	cmp	r3, #0
 8009434:	d00a      	beq.n	800944c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8009436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800943a:	f383 8811 	msr	BASEPRI, r3
 800943e:	f3bf 8f6f 	isb	sy
 8009442:	f3bf 8f4f 	dsb	sy
 8009446:	617b      	str	r3, [r7, #20]
}
 8009448:	bf00      	nop
 800944a:	e7fe      	b.n	800944a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800944c:	f001 fb0a 	bl	800aa64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009450:	2300      	movs	r3, #0
 8009452:	e082      	b.n	800955a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009456:	2b00      	cmp	r3, #0
 8009458:	d106      	bne.n	8009468 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800945a:	f107 030c 	add.w	r3, r7, #12
 800945e:	4618      	mov	r0, r3
 8009460:	f000 fe34 	bl	800a0cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009464:	2301      	movs	r3, #1
 8009466:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009468:	f001 fafc 	bl	800aa64 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800946c:	f000 fbda 	bl	8009c24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009470:	f001 fac8 	bl	800aa04 <vPortEnterCritical>
 8009474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009476:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800947a:	b25b      	sxtb	r3, r3
 800947c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009480:	d103      	bne.n	800948a <xQueueSemaphoreTake+0x13a>
 8009482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009484:	2200      	movs	r2, #0
 8009486:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800948a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800948c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009490:	b25b      	sxtb	r3, r3
 8009492:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009496:	d103      	bne.n	80094a0 <xQueueSemaphoreTake+0x150>
 8009498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800949a:	2200      	movs	r2, #0
 800949c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80094a0:	f001 fae0 	bl	800aa64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80094a4:	463a      	mov	r2, r7
 80094a6:	f107 030c 	add.w	r3, r7, #12
 80094aa:	4611      	mov	r1, r2
 80094ac:	4618      	mov	r0, r3
 80094ae:	f000 fe23 	bl	800a0f8 <xTaskCheckForTimeOut>
 80094b2:	4603      	mov	r3, r0
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d132      	bne.n	800951e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80094b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80094ba:	f000 f929 	bl	8009710 <prvIsQueueEmpty>
 80094be:	4603      	mov	r3, r0
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d026      	beq.n	8009512 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80094c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d109      	bne.n	80094e0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80094cc:	f001 fa9a 	bl	800aa04 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80094d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094d2:	689b      	ldr	r3, [r3, #8]
 80094d4:	4618      	mov	r0, r3
 80094d6:	f000 ff4b 	bl	800a370 <xTaskPriorityInherit>
 80094da:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80094dc:	f001 fac2 	bl	800aa64 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80094e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094e2:	3324      	adds	r3, #36	; 0x24
 80094e4:	683a      	ldr	r2, [r7, #0]
 80094e6:	4611      	mov	r1, r2
 80094e8:	4618      	mov	r0, r3
 80094ea:	f000 fd69 	bl	8009fc0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80094ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80094f0:	f000 f8bc 	bl	800966c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80094f4:	f000 fba4 	bl	8009c40 <xTaskResumeAll>
 80094f8:	4603      	mov	r3, r0
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	f47f af68 	bne.w	80093d0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8009500:	4b18      	ldr	r3, [pc, #96]	; (8009564 <xQueueSemaphoreTake+0x214>)
 8009502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009506:	601a      	str	r2, [r3, #0]
 8009508:	f3bf 8f4f 	dsb	sy
 800950c:	f3bf 8f6f 	isb	sy
 8009510:	e75e      	b.n	80093d0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009512:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009514:	f000 f8aa 	bl	800966c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009518:	f000 fb92 	bl	8009c40 <xTaskResumeAll>
 800951c:	e758      	b.n	80093d0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800951e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009520:	f000 f8a4 	bl	800966c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009524:	f000 fb8c 	bl	8009c40 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009528:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800952a:	f000 f8f1 	bl	8009710 <prvIsQueueEmpty>
 800952e:	4603      	mov	r3, r0
 8009530:	2b00      	cmp	r3, #0
 8009532:	f43f af4d 	beq.w	80093d0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009538:	2b00      	cmp	r3, #0
 800953a:	d00d      	beq.n	8009558 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800953c:	f001 fa62 	bl	800aa04 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009540:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009542:	f000 f811 	bl	8009568 <prvGetDisinheritPriorityAfterTimeout>
 8009546:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800954a:	689b      	ldr	r3, [r3, #8]
 800954c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800954e:	4618      	mov	r0, r3
 8009550:	f001 f814 	bl	800a57c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009554:	f001 fa86 	bl	800aa64 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009558:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800955a:	4618      	mov	r0, r3
 800955c:	3738      	adds	r7, #56	; 0x38
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}
 8009562:	bf00      	nop
 8009564:	e000ed04 	.word	0xe000ed04

08009568 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009568:	b480      	push	{r7}
 800956a:	b085      	sub	sp, #20
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009574:	2b00      	cmp	r3, #0
 8009576:	d006      	beq.n	8009586 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f1c3 0307 	rsb	r3, r3, #7
 8009582:	60fb      	str	r3, [r7, #12]
 8009584:	e001      	b.n	800958a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009586:	2300      	movs	r3, #0
 8009588:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800958a:	68fb      	ldr	r3, [r7, #12]
	}
 800958c:	4618      	mov	r0, r3
 800958e:	3714      	adds	r7, #20
 8009590:	46bd      	mov	sp, r7
 8009592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009596:	4770      	bx	lr

08009598 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b086      	sub	sp, #24
 800959c:	af00      	add	r7, sp, #0
 800959e:	60f8      	str	r0, [r7, #12]
 80095a0:	60b9      	str	r1, [r7, #8]
 80095a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80095a4:	2300      	movs	r3, #0
 80095a6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095ac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d10d      	bne.n	80095d2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d14d      	bne.n	800965a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	689b      	ldr	r3, [r3, #8]
 80095c2:	4618      	mov	r0, r3
 80095c4:	f000 ff54 	bl	800a470 <xTaskPriorityDisinherit>
 80095c8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	2200      	movs	r2, #0
 80095ce:	609a      	str	r2, [r3, #8]
 80095d0:	e043      	b.n	800965a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d119      	bne.n	800960c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	6858      	ldr	r0, [r3, #4]
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095e0:	461a      	mov	r2, r3
 80095e2:	68b9      	ldr	r1, [r7, #8]
 80095e4:	f001 fb54 	bl	800ac90 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	685a      	ldr	r2, [r3, #4]
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095f0:	441a      	add	r2, r3
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	685a      	ldr	r2, [r3, #4]
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	689b      	ldr	r3, [r3, #8]
 80095fe:	429a      	cmp	r2, r3
 8009600:	d32b      	bcc.n	800965a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681a      	ldr	r2, [r3, #0]
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	605a      	str	r2, [r3, #4]
 800960a:	e026      	b.n	800965a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	68d8      	ldr	r0, [r3, #12]
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009614:	461a      	mov	r2, r3
 8009616:	68b9      	ldr	r1, [r7, #8]
 8009618:	f001 fb3a 	bl	800ac90 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	68da      	ldr	r2, [r3, #12]
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009624:	425b      	negs	r3, r3
 8009626:	441a      	add	r2, r3
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	68da      	ldr	r2, [r3, #12]
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	429a      	cmp	r2, r3
 8009636:	d207      	bcs.n	8009648 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	689a      	ldr	r2, [r3, #8]
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009640:	425b      	negs	r3, r3
 8009642:	441a      	add	r2, r3
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2b02      	cmp	r3, #2
 800964c:	d105      	bne.n	800965a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d002      	beq.n	800965a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	3b01      	subs	r3, #1
 8009658:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	1c5a      	adds	r2, r3, #1
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009662:	697b      	ldr	r3, [r7, #20]
}
 8009664:	4618      	mov	r0, r3
 8009666:	3718      	adds	r7, #24
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}

0800966c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b084      	sub	sp, #16
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009674:	f001 f9c6 	bl	800aa04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800967e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009680:	e011      	b.n	80096a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009686:	2b00      	cmp	r3, #0
 8009688:	d012      	beq.n	80096b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	3324      	adds	r3, #36	; 0x24
 800968e:	4618      	mov	r0, r3
 8009690:	f000 fcba 	bl	800a008 <xTaskRemoveFromEventList>
 8009694:	4603      	mov	r3, r0
 8009696:	2b00      	cmp	r3, #0
 8009698:	d001      	beq.n	800969e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800969a:	f000 fd8f 	bl	800a1bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800969e:	7bfb      	ldrb	r3, [r7, #15]
 80096a0:	3b01      	subs	r3, #1
 80096a2:	b2db      	uxtb	r3, r3
 80096a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80096a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	dce9      	bgt.n	8009682 <prvUnlockQueue+0x16>
 80096ae:	e000      	b.n	80096b2 <prvUnlockQueue+0x46>
					break;
 80096b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	22ff      	movs	r2, #255	; 0xff
 80096b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80096ba:	f001 f9d3 	bl	800aa64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80096be:	f001 f9a1 	bl	800aa04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80096c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80096ca:	e011      	b.n	80096f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	691b      	ldr	r3, [r3, #16]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d012      	beq.n	80096fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	3310      	adds	r3, #16
 80096d8:	4618      	mov	r0, r3
 80096da:	f000 fc95 	bl	800a008 <xTaskRemoveFromEventList>
 80096de:	4603      	mov	r3, r0
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d001      	beq.n	80096e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80096e4:	f000 fd6a 	bl	800a1bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80096e8:	7bbb      	ldrb	r3, [r7, #14]
 80096ea:	3b01      	subs	r3, #1
 80096ec:	b2db      	uxtb	r3, r3
 80096ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80096f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	dce9      	bgt.n	80096cc <prvUnlockQueue+0x60>
 80096f8:	e000      	b.n	80096fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80096fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	22ff      	movs	r2, #255	; 0xff
 8009700:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009704:	f001 f9ae 	bl	800aa64 <vPortExitCritical>
}
 8009708:	bf00      	nop
 800970a:	3710      	adds	r7, #16
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}

08009710 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b084      	sub	sp, #16
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009718:	f001 f974 	bl	800aa04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009720:	2b00      	cmp	r3, #0
 8009722:	d102      	bne.n	800972a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009724:	2301      	movs	r3, #1
 8009726:	60fb      	str	r3, [r7, #12]
 8009728:	e001      	b.n	800972e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800972a:	2300      	movs	r3, #0
 800972c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800972e:	f001 f999 	bl	800aa64 <vPortExitCritical>

	return xReturn;
 8009732:	68fb      	ldr	r3, [r7, #12]
}
 8009734:	4618      	mov	r0, r3
 8009736:	3710      	adds	r7, #16
 8009738:	46bd      	mov	sp, r7
 800973a:	bd80      	pop	{r7, pc}

0800973c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b084      	sub	sp, #16
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009744:	f001 f95e 	bl	800aa04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009750:	429a      	cmp	r2, r3
 8009752:	d102      	bne.n	800975a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009754:	2301      	movs	r3, #1
 8009756:	60fb      	str	r3, [r7, #12]
 8009758:	e001      	b.n	800975e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800975a:	2300      	movs	r3, #0
 800975c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800975e:	f001 f981 	bl	800aa64 <vPortExitCritical>

	return xReturn;
 8009762:	68fb      	ldr	r3, [r7, #12]
}
 8009764:	4618      	mov	r0, r3
 8009766:	3710      	adds	r7, #16
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}

0800976c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800976c:	b580      	push	{r7, lr}
 800976e:	b08e      	sub	sp, #56	; 0x38
 8009770:	af04      	add	r7, sp, #16
 8009772:	60f8      	str	r0, [r7, #12]
 8009774:	60b9      	str	r1, [r7, #8]
 8009776:	607a      	str	r2, [r7, #4]
 8009778:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800977a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800977c:	2b00      	cmp	r3, #0
 800977e:	d10a      	bne.n	8009796 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009784:	f383 8811 	msr	BASEPRI, r3
 8009788:	f3bf 8f6f 	isb	sy
 800978c:	f3bf 8f4f 	dsb	sy
 8009790:	623b      	str	r3, [r7, #32]
}
 8009792:	bf00      	nop
 8009794:	e7fe      	b.n	8009794 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009798:	2b00      	cmp	r3, #0
 800979a:	d10a      	bne.n	80097b2 <xTaskCreateStatic+0x46>
	__asm volatile
 800979c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097a0:	f383 8811 	msr	BASEPRI, r3
 80097a4:	f3bf 8f6f 	isb	sy
 80097a8:	f3bf 8f4f 	dsb	sy
 80097ac:	61fb      	str	r3, [r7, #28]
}
 80097ae:	bf00      	nop
 80097b0:	e7fe      	b.n	80097b0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80097b2:	2354      	movs	r3, #84	; 0x54
 80097b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80097b6:	693b      	ldr	r3, [r7, #16]
 80097b8:	2b54      	cmp	r3, #84	; 0x54
 80097ba:	d00a      	beq.n	80097d2 <xTaskCreateStatic+0x66>
	__asm volatile
 80097bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c0:	f383 8811 	msr	BASEPRI, r3
 80097c4:	f3bf 8f6f 	isb	sy
 80097c8:	f3bf 8f4f 	dsb	sy
 80097cc:	61bb      	str	r3, [r7, #24]
}
 80097ce:	bf00      	nop
 80097d0:	e7fe      	b.n	80097d0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80097d2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80097d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d01a      	beq.n	8009810 <xTaskCreateStatic+0xa4>
 80097da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d017      	beq.n	8009810 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80097e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097e2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80097e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80097e8:	631a      	str	r2, [r3, #48]	; 0x30
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80097ea:	2300      	movs	r3, #0
 80097ec:	9303      	str	r3, [sp, #12]
 80097ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f0:	9302      	str	r3, [sp, #8]
 80097f2:	f107 0314 	add.w	r3, r7, #20
 80097f6:	9301      	str	r3, [sp, #4]
 80097f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097fa:	9300      	str	r3, [sp, #0]
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	687a      	ldr	r2, [r7, #4]
 8009800:	68b9      	ldr	r1, [r7, #8]
 8009802:	68f8      	ldr	r0, [r7, #12]
 8009804:	f000 f80b 	bl	800981e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009808:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800980a:	f000 f88f 	bl	800992c <prvAddNewTaskToReadyList>
 800980e:	e001      	b.n	8009814 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8009810:	2300      	movs	r3, #0
 8009812:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009814:	697b      	ldr	r3, [r7, #20]
	}
 8009816:	4618      	mov	r0, r3
 8009818:	3728      	adds	r7, #40	; 0x28
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}

0800981e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800981e:	b580      	push	{r7, lr}
 8009820:	b088      	sub	sp, #32
 8009822:	af00      	add	r7, sp, #0
 8009824:	60f8      	str	r0, [r7, #12]
 8009826:	60b9      	str	r1, [r7, #8]
 8009828:	607a      	str	r2, [r7, #4]
 800982a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800982c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800982e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009836:	3b01      	subs	r3, #1
 8009838:	009b      	lsls	r3, r3, #2
 800983a:	4413      	add	r3, r2
 800983c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800983e:	69bb      	ldr	r3, [r7, #24]
 8009840:	f023 0307 	bic.w	r3, r3, #7
 8009844:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009846:	69bb      	ldr	r3, [r7, #24]
 8009848:	f003 0307 	and.w	r3, r3, #7
 800984c:	2b00      	cmp	r3, #0
 800984e:	d00a      	beq.n	8009866 <prvInitialiseNewTask+0x48>
	__asm volatile
 8009850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009854:	f383 8811 	msr	BASEPRI, r3
 8009858:	f3bf 8f6f 	isb	sy
 800985c:	f3bf 8f4f 	dsb	sy
 8009860:	617b      	str	r3, [r7, #20]
}
 8009862:	bf00      	nop
 8009864:	e7fe      	b.n	8009864 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d01f      	beq.n	80098ac <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800986c:	2300      	movs	r3, #0
 800986e:	61fb      	str	r3, [r7, #28]
 8009870:	e012      	b.n	8009898 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009872:	68ba      	ldr	r2, [r7, #8]
 8009874:	69fb      	ldr	r3, [r7, #28]
 8009876:	4413      	add	r3, r2
 8009878:	7819      	ldrb	r1, [r3, #0]
 800987a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800987c:	69fb      	ldr	r3, [r7, #28]
 800987e:	4413      	add	r3, r2
 8009880:	3334      	adds	r3, #52	; 0x34
 8009882:	460a      	mov	r2, r1
 8009884:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009886:	68ba      	ldr	r2, [r7, #8]
 8009888:	69fb      	ldr	r3, [r7, #28]
 800988a:	4413      	add	r3, r2
 800988c:	781b      	ldrb	r3, [r3, #0]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d006      	beq.n	80098a0 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009892:	69fb      	ldr	r3, [r7, #28]
 8009894:	3301      	adds	r3, #1
 8009896:	61fb      	str	r3, [r7, #28]
 8009898:	69fb      	ldr	r3, [r7, #28]
 800989a:	2b0f      	cmp	r3, #15
 800989c:	d9e9      	bls.n	8009872 <prvInitialiseNewTask+0x54>
 800989e:	e000      	b.n	80098a2 <prvInitialiseNewTask+0x84>
			{
				break;
 80098a0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80098a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098a4:	2200      	movs	r2, #0
 80098a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80098aa:	e003      	b.n	80098b4 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80098ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ae:	2200      	movs	r2, #0
 80098b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80098b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098b6:	2b06      	cmp	r3, #6
 80098b8:	d901      	bls.n	80098be <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80098ba:	2306      	movs	r3, #6
 80098bc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80098be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098c2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80098c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098c8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80098ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098cc:	2200      	movs	r2, #0
 80098ce:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80098d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098d2:	3304      	adds	r3, #4
 80098d4:	4618      	mov	r0, r3
 80098d6:	f7ff f9eb 	bl	8008cb0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80098da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098dc:	3318      	adds	r3, #24
 80098de:	4618      	mov	r0, r3
 80098e0:	f7ff f9e6 	bl	8008cb0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80098e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098e8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ec:	f1c3 0207 	rsb	r2, r3, #7
 80098f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098f2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80098f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098f8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80098fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098fc:	2200      	movs	r2, #0
 80098fe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009902:	2200      	movs	r2, #0
 8009904:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009908:	683a      	ldr	r2, [r7, #0]
 800990a:	68f9      	ldr	r1, [r7, #12]
 800990c:	69b8      	ldr	r0, [r7, #24]
 800990e:	f000 ff49 	bl	800a7a4 <pxPortInitialiseStack>
 8009912:	4602      	mov	r2, r0
 8009914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009916:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800991a:	2b00      	cmp	r3, #0
 800991c:	d002      	beq.n	8009924 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800991e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009920:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009922:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009924:	bf00      	nop
 8009926:	3720      	adds	r7, #32
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}

0800992c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b082      	sub	sp, #8
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009934:	f001 f866 	bl	800aa04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009938:	4b2a      	ldr	r3, [pc, #168]	; (80099e4 <prvAddNewTaskToReadyList+0xb8>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	3301      	adds	r3, #1
 800993e:	4a29      	ldr	r2, [pc, #164]	; (80099e4 <prvAddNewTaskToReadyList+0xb8>)
 8009940:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009942:	4b29      	ldr	r3, [pc, #164]	; (80099e8 <prvAddNewTaskToReadyList+0xbc>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d109      	bne.n	800995e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800994a:	4a27      	ldr	r2, [pc, #156]	; (80099e8 <prvAddNewTaskToReadyList+0xbc>)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009950:	4b24      	ldr	r3, [pc, #144]	; (80099e4 <prvAddNewTaskToReadyList+0xb8>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	2b01      	cmp	r3, #1
 8009956:	d110      	bne.n	800997a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009958:	f000 fc54 	bl	800a204 <prvInitialiseTaskLists>
 800995c:	e00d      	b.n	800997a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800995e:	4b23      	ldr	r3, [pc, #140]	; (80099ec <prvAddNewTaskToReadyList+0xc0>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d109      	bne.n	800997a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009966:	4b20      	ldr	r3, [pc, #128]	; (80099e8 <prvAddNewTaskToReadyList+0xbc>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009970:	429a      	cmp	r2, r3
 8009972:	d802      	bhi.n	800997a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009974:	4a1c      	ldr	r2, [pc, #112]	; (80099e8 <prvAddNewTaskToReadyList+0xbc>)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800997a:	4b1d      	ldr	r3, [pc, #116]	; (80099f0 <prvAddNewTaskToReadyList+0xc4>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	3301      	adds	r3, #1
 8009980:	4a1b      	ldr	r2, [pc, #108]	; (80099f0 <prvAddNewTaskToReadyList+0xc4>)
 8009982:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009988:	2201      	movs	r2, #1
 800998a:	409a      	lsls	r2, r3
 800998c:	4b19      	ldr	r3, [pc, #100]	; (80099f4 <prvAddNewTaskToReadyList+0xc8>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	4313      	orrs	r3, r2
 8009992:	4a18      	ldr	r2, [pc, #96]	; (80099f4 <prvAddNewTaskToReadyList+0xc8>)
 8009994:	6013      	str	r3, [r2, #0]
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800999a:	4613      	mov	r3, r2
 800999c:	009b      	lsls	r3, r3, #2
 800999e:	4413      	add	r3, r2
 80099a0:	009b      	lsls	r3, r3, #2
 80099a2:	4a15      	ldr	r2, [pc, #84]	; (80099f8 <prvAddNewTaskToReadyList+0xcc>)
 80099a4:	441a      	add	r2, r3
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	3304      	adds	r3, #4
 80099aa:	4619      	mov	r1, r3
 80099ac:	4610      	mov	r0, r2
 80099ae:	f7ff f98c 	bl	8008cca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80099b2:	f001 f857 	bl	800aa64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80099b6:	4b0d      	ldr	r3, [pc, #52]	; (80099ec <prvAddNewTaskToReadyList+0xc0>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d00e      	beq.n	80099dc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80099be:	4b0a      	ldr	r3, [pc, #40]	; (80099e8 <prvAddNewTaskToReadyList+0xbc>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099c8:	429a      	cmp	r2, r3
 80099ca:	d207      	bcs.n	80099dc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80099cc:	4b0b      	ldr	r3, [pc, #44]	; (80099fc <prvAddNewTaskToReadyList+0xd0>)
 80099ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099d2:	601a      	str	r2, [r3, #0]
 80099d4:	f3bf 8f4f 	dsb	sy
 80099d8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80099dc:	bf00      	nop
 80099de:	3708      	adds	r7, #8
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}
 80099e4:	20006814 	.word	0x20006814
 80099e8:	20006714 	.word	0x20006714
 80099ec:	20006820 	.word	0x20006820
 80099f0:	20006830 	.word	0x20006830
 80099f4:	2000681c 	.word	0x2000681c
 80099f8:	20006718 	.word	0x20006718
 80099fc:	e000ed04 	.word	0xe000ed04

08009a00 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b08a      	sub	sp, #40	; 0x28
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
 8009a08:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d10a      	bne.n	8009a2a <vTaskDelayUntil+0x2a>
	__asm volatile
 8009a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a18:	f383 8811 	msr	BASEPRI, r3
 8009a1c:	f3bf 8f6f 	isb	sy
 8009a20:	f3bf 8f4f 	dsb	sy
 8009a24:	617b      	str	r3, [r7, #20]
}
 8009a26:	bf00      	nop
 8009a28:	e7fe      	b.n	8009a28 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d10a      	bne.n	8009a46 <vTaskDelayUntil+0x46>
	__asm volatile
 8009a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a34:	f383 8811 	msr	BASEPRI, r3
 8009a38:	f3bf 8f6f 	isb	sy
 8009a3c:	f3bf 8f4f 	dsb	sy
 8009a40:	613b      	str	r3, [r7, #16]
}
 8009a42:	bf00      	nop
 8009a44:	e7fe      	b.n	8009a44 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8009a46:	4b2a      	ldr	r3, [pc, #168]	; (8009af0 <vTaskDelayUntil+0xf0>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d00a      	beq.n	8009a64 <vTaskDelayUntil+0x64>
	__asm volatile
 8009a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a52:	f383 8811 	msr	BASEPRI, r3
 8009a56:	f3bf 8f6f 	isb	sy
 8009a5a:	f3bf 8f4f 	dsb	sy
 8009a5e:	60fb      	str	r3, [r7, #12]
}
 8009a60:	bf00      	nop
 8009a62:	e7fe      	b.n	8009a62 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8009a64:	f000 f8de 	bl	8009c24 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8009a68:	4b22      	ldr	r3, [pc, #136]	; (8009af4 <vTaskDelayUntil+0xf4>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	683a      	ldr	r2, [r7, #0]
 8009a74:	4413      	add	r3, r2
 8009a76:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	6a3a      	ldr	r2, [r7, #32]
 8009a7e:	429a      	cmp	r2, r3
 8009a80:	d20b      	bcs.n	8009a9a <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	69fa      	ldr	r2, [r7, #28]
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	d211      	bcs.n	8009ab0 <vTaskDelayUntil+0xb0>
 8009a8c:	69fa      	ldr	r2, [r7, #28]
 8009a8e:	6a3b      	ldr	r3, [r7, #32]
 8009a90:	429a      	cmp	r2, r3
 8009a92:	d90d      	bls.n	8009ab0 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8009a94:	2301      	movs	r3, #1
 8009a96:	627b      	str	r3, [r7, #36]	; 0x24
 8009a98:	e00a      	b.n	8009ab0 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	69fa      	ldr	r2, [r7, #28]
 8009aa0:	429a      	cmp	r2, r3
 8009aa2:	d303      	bcc.n	8009aac <vTaskDelayUntil+0xac>
 8009aa4:	69fa      	ldr	r2, [r7, #28]
 8009aa6:	6a3b      	ldr	r3, [r7, #32]
 8009aa8:	429a      	cmp	r2, r3
 8009aaa:	d901      	bls.n	8009ab0 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8009aac:	2301      	movs	r3, #1
 8009aae:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	69fa      	ldr	r2, [r7, #28]
 8009ab4:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8009ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d006      	beq.n	8009aca <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8009abc:	69fa      	ldr	r2, [r7, #28]
 8009abe:	6a3b      	ldr	r3, [r7, #32]
 8009ac0:	1ad3      	subs	r3, r2, r3
 8009ac2:	2100      	movs	r1, #0
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f000 fe07 	bl	800a6d8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8009aca:	f000 f8b9 	bl	8009c40 <xTaskResumeAll>
 8009ace:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009ad0:	69bb      	ldr	r3, [r7, #24]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d107      	bne.n	8009ae6 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8009ad6:	4b08      	ldr	r3, [pc, #32]	; (8009af8 <vTaskDelayUntil+0xf8>)
 8009ad8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009adc:	601a      	str	r2, [r3, #0]
 8009ade:	f3bf 8f4f 	dsb	sy
 8009ae2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009ae6:	bf00      	nop
 8009ae8:	3728      	adds	r7, #40	; 0x28
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}
 8009aee:	bf00      	nop
 8009af0:	2000683c 	.word	0x2000683c
 8009af4:	20006818 	.word	0x20006818
 8009af8:	e000ed04 	.word	0xe000ed04

08009afc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b084      	sub	sp, #16
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009b04:	2300      	movs	r3, #0
 8009b06:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d017      	beq.n	8009b3e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009b0e:	4b13      	ldr	r3, [pc, #76]	; (8009b5c <vTaskDelay+0x60>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d00a      	beq.n	8009b2c <vTaskDelay+0x30>
	__asm volatile
 8009b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b1a:	f383 8811 	msr	BASEPRI, r3
 8009b1e:	f3bf 8f6f 	isb	sy
 8009b22:	f3bf 8f4f 	dsb	sy
 8009b26:	60bb      	str	r3, [r7, #8]
}
 8009b28:	bf00      	nop
 8009b2a:	e7fe      	b.n	8009b2a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009b2c:	f000 f87a 	bl	8009c24 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009b30:	2100      	movs	r1, #0
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f000 fdd0 	bl	800a6d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009b38:	f000 f882 	bl	8009c40 <xTaskResumeAll>
 8009b3c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d107      	bne.n	8009b54 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009b44:	4b06      	ldr	r3, [pc, #24]	; (8009b60 <vTaskDelay+0x64>)
 8009b46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b4a:	601a      	str	r2, [r3, #0]
 8009b4c:	f3bf 8f4f 	dsb	sy
 8009b50:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009b54:	bf00      	nop
 8009b56:	3710      	adds	r7, #16
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}
 8009b5c:	2000683c 	.word	0x2000683c
 8009b60:	e000ed04 	.word	0xe000ed04

08009b64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b08a      	sub	sp, #40	; 0x28
 8009b68:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009b72:	463a      	mov	r2, r7
 8009b74:	1d39      	adds	r1, r7, #4
 8009b76:	f107 0308 	add.w	r3, r7, #8
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f7f8 fac4 	bl	8002108 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009b80:	6839      	ldr	r1, [r7, #0]
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	68ba      	ldr	r2, [r7, #8]
 8009b86:	9202      	str	r2, [sp, #8]
 8009b88:	9301      	str	r3, [sp, #4]
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	9300      	str	r3, [sp, #0]
 8009b8e:	2300      	movs	r3, #0
 8009b90:	460a      	mov	r2, r1
 8009b92:	491e      	ldr	r1, [pc, #120]	; (8009c0c <vTaskStartScheduler+0xa8>)
 8009b94:	481e      	ldr	r0, [pc, #120]	; (8009c10 <vTaskStartScheduler+0xac>)
 8009b96:	f7ff fde9 	bl	800976c <xTaskCreateStatic>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	4a1d      	ldr	r2, [pc, #116]	; (8009c14 <vTaskStartScheduler+0xb0>)
 8009b9e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009ba0:	4b1c      	ldr	r3, [pc, #112]	; (8009c14 <vTaskStartScheduler+0xb0>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d002      	beq.n	8009bae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009ba8:	2301      	movs	r3, #1
 8009baa:	617b      	str	r3, [r7, #20]
 8009bac:	e001      	b.n	8009bb2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	2b01      	cmp	r3, #1
 8009bb6:	d116      	bne.n	8009be6 <vTaskStartScheduler+0x82>
	__asm volatile
 8009bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bbc:	f383 8811 	msr	BASEPRI, r3
 8009bc0:	f3bf 8f6f 	isb	sy
 8009bc4:	f3bf 8f4f 	dsb	sy
 8009bc8:	613b      	str	r3, [r7, #16]
}
 8009bca:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009bcc:	4b12      	ldr	r3, [pc, #72]	; (8009c18 <vTaskStartScheduler+0xb4>)
 8009bce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009bd2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009bd4:	4b11      	ldr	r3, [pc, #68]	; (8009c1c <vTaskStartScheduler+0xb8>)
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009bda:	4b11      	ldr	r3, [pc, #68]	; (8009c20 <vTaskStartScheduler+0xbc>)
 8009bdc:	2200      	movs	r2, #0
 8009bde:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009be0:	f000 fe6e 	bl	800a8c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009be4:	e00e      	b.n	8009c04 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009bec:	d10a      	bne.n	8009c04 <vTaskStartScheduler+0xa0>
	__asm volatile
 8009bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf2:	f383 8811 	msr	BASEPRI, r3
 8009bf6:	f3bf 8f6f 	isb	sy
 8009bfa:	f3bf 8f4f 	dsb	sy
 8009bfe:	60fb      	str	r3, [r7, #12]
}
 8009c00:	bf00      	nop
 8009c02:	e7fe      	b.n	8009c02 <vTaskStartScheduler+0x9e>
}
 8009c04:	bf00      	nop
 8009c06:	3718      	adds	r7, #24
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}
 8009c0c:	0800af20 	.word	0x0800af20
 8009c10:	0800a1d5 	.word	0x0800a1d5
 8009c14:	20006838 	.word	0x20006838
 8009c18:	20006834 	.word	0x20006834
 8009c1c:	20006820 	.word	0x20006820
 8009c20:	20006818 	.word	0x20006818

08009c24 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009c24:	b480      	push	{r7}
 8009c26:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009c28:	4b04      	ldr	r3, [pc, #16]	; (8009c3c <vTaskSuspendAll+0x18>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	3301      	adds	r3, #1
 8009c2e:	4a03      	ldr	r2, [pc, #12]	; (8009c3c <vTaskSuspendAll+0x18>)
 8009c30:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009c32:	bf00      	nop
 8009c34:	46bd      	mov	sp, r7
 8009c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3a:	4770      	bx	lr
 8009c3c:	2000683c 	.word	0x2000683c

08009c40 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b084      	sub	sp, #16
 8009c44:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009c46:	2300      	movs	r3, #0
 8009c48:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009c4e:	4b41      	ldr	r3, [pc, #260]	; (8009d54 <xTaskResumeAll+0x114>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d10a      	bne.n	8009c6c <xTaskResumeAll+0x2c>
	__asm volatile
 8009c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c5a:	f383 8811 	msr	BASEPRI, r3
 8009c5e:	f3bf 8f6f 	isb	sy
 8009c62:	f3bf 8f4f 	dsb	sy
 8009c66:	603b      	str	r3, [r7, #0]
}
 8009c68:	bf00      	nop
 8009c6a:	e7fe      	b.n	8009c6a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009c6c:	f000 feca 	bl	800aa04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009c70:	4b38      	ldr	r3, [pc, #224]	; (8009d54 <xTaskResumeAll+0x114>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	3b01      	subs	r3, #1
 8009c76:	4a37      	ldr	r2, [pc, #220]	; (8009d54 <xTaskResumeAll+0x114>)
 8009c78:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c7a:	4b36      	ldr	r3, [pc, #216]	; (8009d54 <xTaskResumeAll+0x114>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d161      	bne.n	8009d46 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009c82:	4b35      	ldr	r3, [pc, #212]	; (8009d58 <xTaskResumeAll+0x118>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d05d      	beq.n	8009d46 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009c8a:	e02e      	b.n	8009cea <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c8c:	4b33      	ldr	r3, [pc, #204]	; (8009d5c <xTaskResumeAll+0x11c>)
 8009c8e:	68db      	ldr	r3, [r3, #12]
 8009c90:	68db      	ldr	r3, [r3, #12]
 8009c92:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	3318      	adds	r3, #24
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f7ff f873 	bl	8008d84 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	3304      	adds	r3, #4
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f7ff f86e 	bl	8008d84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cac:	2201      	movs	r2, #1
 8009cae:	409a      	lsls	r2, r3
 8009cb0:	4b2b      	ldr	r3, [pc, #172]	; (8009d60 <xTaskResumeAll+0x120>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	4313      	orrs	r3, r2
 8009cb6:	4a2a      	ldr	r2, [pc, #168]	; (8009d60 <xTaskResumeAll+0x120>)
 8009cb8:	6013      	str	r3, [r2, #0]
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cbe:	4613      	mov	r3, r2
 8009cc0:	009b      	lsls	r3, r3, #2
 8009cc2:	4413      	add	r3, r2
 8009cc4:	009b      	lsls	r3, r3, #2
 8009cc6:	4a27      	ldr	r2, [pc, #156]	; (8009d64 <xTaskResumeAll+0x124>)
 8009cc8:	441a      	add	r2, r3
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	3304      	adds	r3, #4
 8009cce:	4619      	mov	r1, r3
 8009cd0:	4610      	mov	r0, r2
 8009cd2:	f7fe fffa 	bl	8008cca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cda:	4b23      	ldr	r3, [pc, #140]	; (8009d68 <xTaskResumeAll+0x128>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ce0:	429a      	cmp	r2, r3
 8009ce2:	d302      	bcc.n	8009cea <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009ce4:	4b21      	ldr	r3, [pc, #132]	; (8009d6c <xTaskResumeAll+0x12c>)
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009cea:	4b1c      	ldr	r3, [pc, #112]	; (8009d5c <xTaskResumeAll+0x11c>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d1cc      	bne.n	8009c8c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d001      	beq.n	8009cfc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009cf8:	f000 fafc 	bl	800a2f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009cfc:	4b1c      	ldr	r3, [pc, #112]	; (8009d70 <xTaskResumeAll+0x130>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d010      	beq.n	8009d2a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009d08:	f000 f846 	bl	8009d98 <xTaskIncrementTick>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d002      	beq.n	8009d18 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8009d12:	4b16      	ldr	r3, [pc, #88]	; (8009d6c <xTaskResumeAll+0x12c>)
 8009d14:	2201      	movs	r2, #1
 8009d16:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	3b01      	subs	r3, #1
 8009d1c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d1f1      	bne.n	8009d08 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8009d24:	4b12      	ldr	r3, [pc, #72]	; (8009d70 <xTaskResumeAll+0x130>)
 8009d26:	2200      	movs	r2, #0
 8009d28:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009d2a:	4b10      	ldr	r3, [pc, #64]	; (8009d6c <xTaskResumeAll+0x12c>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d009      	beq.n	8009d46 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009d32:	2301      	movs	r3, #1
 8009d34:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009d36:	4b0f      	ldr	r3, [pc, #60]	; (8009d74 <xTaskResumeAll+0x134>)
 8009d38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d3c:	601a      	str	r2, [r3, #0]
 8009d3e:	f3bf 8f4f 	dsb	sy
 8009d42:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009d46:	f000 fe8d 	bl	800aa64 <vPortExitCritical>

	return xAlreadyYielded;
 8009d4a:	68bb      	ldr	r3, [r7, #8]
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	3710      	adds	r7, #16
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}
 8009d54:	2000683c 	.word	0x2000683c
 8009d58:	20006814 	.word	0x20006814
 8009d5c:	200067d4 	.word	0x200067d4
 8009d60:	2000681c 	.word	0x2000681c
 8009d64:	20006718 	.word	0x20006718
 8009d68:	20006714 	.word	0x20006714
 8009d6c:	20006828 	.word	0x20006828
 8009d70:	20006824 	.word	0x20006824
 8009d74:	e000ed04 	.word	0xe000ed04

08009d78 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b083      	sub	sp, #12
 8009d7c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009d7e:	4b05      	ldr	r3, [pc, #20]	; (8009d94 <xTaskGetTickCount+0x1c>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009d84:	687b      	ldr	r3, [r7, #4]
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	370c      	adds	r7, #12
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d90:	4770      	bx	lr
 8009d92:	bf00      	nop
 8009d94:	20006818 	.word	0x20006818

08009d98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b086      	sub	sp, #24
 8009d9c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009da2:	4b4e      	ldr	r3, [pc, #312]	; (8009edc <xTaskIncrementTick+0x144>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	f040 8088 	bne.w	8009ebc <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009dac:	4b4c      	ldr	r3, [pc, #304]	; (8009ee0 <xTaskIncrementTick+0x148>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	3301      	adds	r3, #1
 8009db2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009db4:	4a4a      	ldr	r2, [pc, #296]	; (8009ee0 <xTaskIncrementTick+0x148>)
 8009db6:	693b      	ldr	r3, [r7, #16]
 8009db8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009dba:	693b      	ldr	r3, [r7, #16]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d120      	bne.n	8009e02 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009dc0:	4b48      	ldr	r3, [pc, #288]	; (8009ee4 <xTaskIncrementTick+0x14c>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d00a      	beq.n	8009de0 <xTaskIncrementTick+0x48>
	__asm volatile
 8009dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dce:	f383 8811 	msr	BASEPRI, r3
 8009dd2:	f3bf 8f6f 	isb	sy
 8009dd6:	f3bf 8f4f 	dsb	sy
 8009dda:	603b      	str	r3, [r7, #0]
}
 8009ddc:	bf00      	nop
 8009dde:	e7fe      	b.n	8009dde <xTaskIncrementTick+0x46>
 8009de0:	4b40      	ldr	r3, [pc, #256]	; (8009ee4 <xTaskIncrementTick+0x14c>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	60fb      	str	r3, [r7, #12]
 8009de6:	4b40      	ldr	r3, [pc, #256]	; (8009ee8 <xTaskIncrementTick+0x150>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4a3e      	ldr	r2, [pc, #248]	; (8009ee4 <xTaskIncrementTick+0x14c>)
 8009dec:	6013      	str	r3, [r2, #0]
 8009dee:	4a3e      	ldr	r2, [pc, #248]	; (8009ee8 <xTaskIncrementTick+0x150>)
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	6013      	str	r3, [r2, #0]
 8009df4:	4b3d      	ldr	r3, [pc, #244]	; (8009eec <xTaskIncrementTick+0x154>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	3301      	adds	r3, #1
 8009dfa:	4a3c      	ldr	r2, [pc, #240]	; (8009eec <xTaskIncrementTick+0x154>)
 8009dfc:	6013      	str	r3, [r2, #0]
 8009dfe:	f000 fa79 	bl	800a2f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009e02:	4b3b      	ldr	r3, [pc, #236]	; (8009ef0 <xTaskIncrementTick+0x158>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	693a      	ldr	r2, [r7, #16]
 8009e08:	429a      	cmp	r2, r3
 8009e0a:	d348      	bcc.n	8009e9e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e0c:	4b35      	ldr	r3, [pc, #212]	; (8009ee4 <xTaskIncrementTick+0x14c>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d104      	bne.n	8009e20 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e16:	4b36      	ldr	r3, [pc, #216]	; (8009ef0 <xTaskIncrementTick+0x158>)
 8009e18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009e1c:	601a      	str	r2, [r3, #0]
					break;
 8009e1e:	e03e      	b.n	8009e9e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e20:	4b30      	ldr	r3, [pc, #192]	; (8009ee4 <xTaskIncrementTick+0x14c>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	68db      	ldr	r3, [r3, #12]
 8009e26:	68db      	ldr	r3, [r3, #12]
 8009e28:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	685b      	ldr	r3, [r3, #4]
 8009e2e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009e30:	693a      	ldr	r2, [r7, #16]
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	429a      	cmp	r2, r3
 8009e36:	d203      	bcs.n	8009e40 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009e38:	4a2d      	ldr	r2, [pc, #180]	; (8009ef0 <xTaskIncrementTick+0x158>)
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009e3e:	e02e      	b.n	8009e9e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	3304      	adds	r3, #4
 8009e44:	4618      	mov	r0, r3
 8009e46:	f7fe ff9d 	bl	8008d84 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d004      	beq.n	8009e5c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	3318      	adds	r3, #24
 8009e56:	4618      	mov	r0, r3
 8009e58:	f7fe ff94 	bl	8008d84 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e60:	2201      	movs	r2, #1
 8009e62:	409a      	lsls	r2, r3
 8009e64:	4b23      	ldr	r3, [pc, #140]	; (8009ef4 <xTaskIncrementTick+0x15c>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	4313      	orrs	r3, r2
 8009e6a:	4a22      	ldr	r2, [pc, #136]	; (8009ef4 <xTaskIncrementTick+0x15c>)
 8009e6c:	6013      	str	r3, [r2, #0]
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e72:	4613      	mov	r3, r2
 8009e74:	009b      	lsls	r3, r3, #2
 8009e76:	4413      	add	r3, r2
 8009e78:	009b      	lsls	r3, r3, #2
 8009e7a:	4a1f      	ldr	r2, [pc, #124]	; (8009ef8 <xTaskIncrementTick+0x160>)
 8009e7c:	441a      	add	r2, r3
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	3304      	adds	r3, #4
 8009e82:	4619      	mov	r1, r3
 8009e84:	4610      	mov	r0, r2
 8009e86:	f7fe ff20 	bl	8008cca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e8e:	4b1b      	ldr	r3, [pc, #108]	; (8009efc <xTaskIncrementTick+0x164>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e94:	429a      	cmp	r2, r3
 8009e96:	d3b9      	bcc.n	8009e0c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009e98:	2301      	movs	r3, #1
 8009e9a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e9c:	e7b6      	b.n	8009e0c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009e9e:	4b17      	ldr	r3, [pc, #92]	; (8009efc <xTaskIncrementTick+0x164>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ea4:	4914      	ldr	r1, [pc, #80]	; (8009ef8 <xTaskIncrementTick+0x160>)
 8009ea6:	4613      	mov	r3, r2
 8009ea8:	009b      	lsls	r3, r3, #2
 8009eaa:	4413      	add	r3, r2
 8009eac:	009b      	lsls	r3, r3, #2
 8009eae:	440b      	add	r3, r1
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	2b01      	cmp	r3, #1
 8009eb4:	d907      	bls.n	8009ec6 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	617b      	str	r3, [r7, #20]
 8009eba:	e004      	b.n	8009ec6 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009ebc:	4b10      	ldr	r3, [pc, #64]	; (8009f00 <xTaskIncrementTick+0x168>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	3301      	adds	r3, #1
 8009ec2:	4a0f      	ldr	r2, [pc, #60]	; (8009f00 <xTaskIncrementTick+0x168>)
 8009ec4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009ec6:	4b0f      	ldr	r3, [pc, #60]	; (8009f04 <xTaskIncrementTick+0x16c>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d001      	beq.n	8009ed2 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009ed2:	697b      	ldr	r3, [r7, #20]
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3718      	adds	r7, #24
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}
 8009edc:	2000683c 	.word	0x2000683c
 8009ee0:	20006818 	.word	0x20006818
 8009ee4:	200067cc 	.word	0x200067cc
 8009ee8:	200067d0 	.word	0x200067d0
 8009eec:	2000682c 	.word	0x2000682c
 8009ef0:	20006834 	.word	0x20006834
 8009ef4:	2000681c 	.word	0x2000681c
 8009ef8:	20006718 	.word	0x20006718
 8009efc:	20006714 	.word	0x20006714
 8009f00:	20006824 	.word	0x20006824
 8009f04:	20006828 	.word	0x20006828

08009f08 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b087      	sub	sp, #28
 8009f0c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009f0e:	4b27      	ldr	r3, [pc, #156]	; (8009fac <vTaskSwitchContext+0xa4>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d003      	beq.n	8009f1e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009f16:	4b26      	ldr	r3, [pc, #152]	; (8009fb0 <vTaskSwitchContext+0xa8>)
 8009f18:	2201      	movs	r2, #1
 8009f1a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009f1c:	e03f      	b.n	8009f9e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8009f1e:	4b24      	ldr	r3, [pc, #144]	; (8009fb0 <vTaskSwitchContext+0xa8>)
 8009f20:	2200      	movs	r2, #0
 8009f22:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f24:	4b23      	ldr	r3, [pc, #140]	; (8009fb4 <vTaskSwitchContext+0xac>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	fab3 f383 	clz	r3, r3
 8009f30:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009f32:	7afb      	ldrb	r3, [r7, #11]
 8009f34:	f1c3 031f 	rsb	r3, r3, #31
 8009f38:	617b      	str	r3, [r7, #20]
 8009f3a:	491f      	ldr	r1, [pc, #124]	; (8009fb8 <vTaskSwitchContext+0xb0>)
 8009f3c:	697a      	ldr	r2, [r7, #20]
 8009f3e:	4613      	mov	r3, r2
 8009f40:	009b      	lsls	r3, r3, #2
 8009f42:	4413      	add	r3, r2
 8009f44:	009b      	lsls	r3, r3, #2
 8009f46:	440b      	add	r3, r1
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d10a      	bne.n	8009f64 <vTaskSwitchContext+0x5c>
	__asm volatile
 8009f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f52:	f383 8811 	msr	BASEPRI, r3
 8009f56:	f3bf 8f6f 	isb	sy
 8009f5a:	f3bf 8f4f 	dsb	sy
 8009f5e:	607b      	str	r3, [r7, #4]
}
 8009f60:	bf00      	nop
 8009f62:	e7fe      	b.n	8009f62 <vTaskSwitchContext+0x5a>
 8009f64:	697a      	ldr	r2, [r7, #20]
 8009f66:	4613      	mov	r3, r2
 8009f68:	009b      	lsls	r3, r3, #2
 8009f6a:	4413      	add	r3, r2
 8009f6c:	009b      	lsls	r3, r3, #2
 8009f6e:	4a12      	ldr	r2, [pc, #72]	; (8009fb8 <vTaskSwitchContext+0xb0>)
 8009f70:	4413      	add	r3, r2
 8009f72:	613b      	str	r3, [r7, #16]
 8009f74:	693b      	ldr	r3, [r7, #16]
 8009f76:	685b      	ldr	r3, [r3, #4]
 8009f78:	685a      	ldr	r2, [r3, #4]
 8009f7a:	693b      	ldr	r3, [r7, #16]
 8009f7c:	605a      	str	r2, [r3, #4]
 8009f7e:	693b      	ldr	r3, [r7, #16]
 8009f80:	685a      	ldr	r2, [r3, #4]
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	3308      	adds	r3, #8
 8009f86:	429a      	cmp	r2, r3
 8009f88:	d104      	bne.n	8009f94 <vTaskSwitchContext+0x8c>
 8009f8a:	693b      	ldr	r3, [r7, #16]
 8009f8c:	685b      	ldr	r3, [r3, #4]
 8009f8e:	685a      	ldr	r2, [r3, #4]
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	605a      	str	r2, [r3, #4]
 8009f94:	693b      	ldr	r3, [r7, #16]
 8009f96:	685b      	ldr	r3, [r3, #4]
 8009f98:	68db      	ldr	r3, [r3, #12]
 8009f9a:	4a08      	ldr	r2, [pc, #32]	; (8009fbc <vTaskSwitchContext+0xb4>)
 8009f9c:	6013      	str	r3, [r2, #0]
}
 8009f9e:	bf00      	nop
 8009fa0:	371c      	adds	r7, #28
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa8:	4770      	bx	lr
 8009faa:	bf00      	nop
 8009fac:	2000683c 	.word	0x2000683c
 8009fb0:	20006828 	.word	0x20006828
 8009fb4:	2000681c 	.word	0x2000681c
 8009fb8:	20006718 	.word	0x20006718
 8009fbc:	20006714 	.word	0x20006714

08009fc0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b084      	sub	sp, #16
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
 8009fc8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d10a      	bne.n	8009fe6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd4:	f383 8811 	msr	BASEPRI, r3
 8009fd8:	f3bf 8f6f 	isb	sy
 8009fdc:	f3bf 8f4f 	dsb	sy
 8009fe0:	60fb      	str	r3, [r7, #12]
}
 8009fe2:	bf00      	nop
 8009fe4:	e7fe      	b.n	8009fe4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009fe6:	4b07      	ldr	r3, [pc, #28]	; (800a004 <vTaskPlaceOnEventList+0x44>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	3318      	adds	r3, #24
 8009fec:	4619      	mov	r1, r3
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	f7fe fe8f 	bl	8008d12 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009ff4:	2101      	movs	r1, #1
 8009ff6:	6838      	ldr	r0, [r7, #0]
 8009ff8:	f000 fb6e 	bl	800a6d8 <prvAddCurrentTaskToDelayedList>
}
 8009ffc:	bf00      	nop
 8009ffe:	3710      	adds	r7, #16
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}
 800a004:	20006714 	.word	0x20006714

0800a008 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b086      	sub	sp, #24
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	68db      	ldr	r3, [r3, #12]
 800a014:	68db      	ldr	r3, [r3, #12]
 800a016:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d10a      	bne.n	800a034 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a022:	f383 8811 	msr	BASEPRI, r3
 800a026:	f3bf 8f6f 	isb	sy
 800a02a:	f3bf 8f4f 	dsb	sy
 800a02e:	60fb      	str	r3, [r7, #12]
}
 800a030:	bf00      	nop
 800a032:	e7fe      	b.n	800a032 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	3318      	adds	r3, #24
 800a038:	4618      	mov	r0, r3
 800a03a:	f7fe fea3 	bl	8008d84 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a03e:	4b1d      	ldr	r3, [pc, #116]	; (800a0b4 <xTaskRemoveFromEventList+0xac>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d11c      	bne.n	800a080 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a046:	693b      	ldr	r3, [r7, #16]
 800a048:	3304      	adds	r3, #4
 800a04a:	4618      	mov	r0, r3
 800a04c:	f7fe fe9a 	bl	8008d84 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a050:	693b      	ldr	r3, [r7, #16]
 800a052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a054:	2201      	movs	r2, #1
 800a056:	409a      	lsls	r2, r3
 800a058:	4b17      	ldr	r3, [pc, #92]	; (800a0b8 <xTaskRemoveFromEventList+0xb0>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	4313      	orrs	r3, r2
 800a05e:	4a16      	ldr	r2, [pc, #88]	; (800a0b8 <xTaskRemoveFromEventList+0xb0>)
 800a060:	6013      	str	r3, [r2, #0]
 800a062:	693b      	ldr	r3, [r7, #16]
 800a064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a066:	4613      	mov	r3, r2
 800a068:	009b      	lsls	r3, r3, #2
 800a06a:	4413      	add	r3, r2
 800a06c:	009b      	lsls	r3, r3, #2
 800a06e:	4a13      	ldr	r2, [pc, #76]	; (800a0bc <xTaskRemoveFromEventList+0xb4>)
 800a070:	441a      	add	r2, r3
 800a072:	693b      	ldr	r3, [r7, #16]
 800a074:	3304      	adds	r3, #4
 800a076:	4619      	mov	r1, r3
 800a078:	4610      	mov	r0, r2
 800a07a:	f7fe fe26 	bl	8008cca <vListInsertEnd>
 800a07e:	e005      	b.n	800a08c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a080:	693b      	ldr	r3, [r7, #16]
 800a082:	3318      	adds	r3, #24
 800a084:	4619      	mov	r1, r3
 800a086:	480e      	ldr	r0, [pc, #56]	; (800a0c0 <xTaskRemoveFromEventList+0xb8>)
 800a088:	f7fe fe1f 	bl	8008cca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a08c:	693b      	ldr	r3, [r7, #16]
 800a08e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a090:	4b0c      	ldr	r3, [pc, #48]	; (800a0c4 <xTaskRemoveFromEventList+0xbc>)
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a096:	429a      	cmp	r2, r3
 800a098:	d905      	bls.n	800a0a6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a09a:	2301      	movs	r3, #1
 800a09c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a09e:	4b0a      	ldr	r3, [pc, #40]	; (800a0c8 <xTaskRemoveFromEventList+0xc0>)
 800a0a0:	2201      	movs	r2, #1
 800a0a2:	601a      	str	r2, [r3, #0]
 800a0a4:	e001      	b.n	800a0aa <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a0aa:	697b      	ldr	r3, [r7, #20]
}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	3718      	adds	r7, #24
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}
 800a0b4:	2000683c 	.word	0x2000683c
 800a0b8:	2000681c 	.word	0x2000681c
 800a0bc:	20006718 	.word	0x20006718
 800a0c0:	200067d4 	.word	0x200067d4
 800a0c4:	20006714 	.word	0x20006714
 800a0c8:	20006828 	.word	0x20006828

0800a0cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b083      	sub	sp, #12
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a0d4:	4b06      	ldr	r3, [pc, #24]	; (800a0f0 <vTaskInternalSetTimeOutState+0x24>)
 800a0d6:	681a      	ldr	r2, [r3, #0]
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a0dc:	4b05      	ldr	r3, [pc, #20]	; (800a0f4 <vTaskInternalSetTimeOutState+0x28>)
 800a0de:	681a      	ldr	r2, [r3, #0]
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	605a      	str	r2, [r3, #4]
}
 800a0e4:	bf00      	nop
 800a0e6:	370c      	adds	r7, #12
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ee:	4770      	bx	lr
 800a0f0:	2000682c 	.word	0x2000682c
 800a0f4:	20006818 	.word	0x20006818

0800a0f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b088      	sub	sp, #32
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
 800a100:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d10a      	bne.n	800a11e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a10c:	f383 8811 	msr	BASEPRI, r3
 800a110:	f3bf 8f6f 	isb	sy
 800a114:	f3bf 8f4f 	dsb	sy
 800a118:	613b      	str	r3, [r7, #16]
}
 800a11a:	bf00      	nop
 800a11c:	e7fe      	b.n	800a11c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d10a      	bne.n	800a13a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a124:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a128:	f383 8811 	msr	BASEPRI, r3
 800a12c:	f3bf 8f6f 	isb	sy
 800a130:	f3bf 8f4f 	dsb	sy
 800a134:	60fb      	str	r3, [r7, #12]
}
 800a136:	bf00      	nop
 800a138:	e7fe      	b.n	800a138 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a13a:	f000 fc63 	bl	800aa04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a13e:	4b1d      	ldr	r3, [pc, #116]	; (800a1b4 <xTaskCheckForTimeOut+0xbc>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	685b      	ldr	r3, [r3, #4]
 800a148:	69ba      	ldr	r2, [r7, #24]
 800a14a:	1ad3      	subs	r3, r2, r3
 800a14c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a156:	d102      	bne.n	800a15e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a158:	2300      	movs	r3, #0
 800a15a:	61fb      	str	r3, [r7, #28]
 800a15c:	e023      	b.n	800a1a6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681a      	ldr	r2, [r3, #0]
 800a162:	4b15      	ldr	r3, [pc, #84]	; (800a1b8 <xTaskCheckForTimeOut+0xc0>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	429a      	cmp	r2, r3
 800a168:	d007      	beq.n	800a17a <xTaskCheckForTimeOut+0x82>
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	685b      	ldr	r3, [r3, #4]
 800a16e:	69ba      	ldr	r2, [r7, #24]
 800a170:	429a      	cmp	r2, r3
 800a172:	d302      	bcc.n	800a17a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a174:	2301      	movs	r3, #1
 800a176:	61fb      	str	r3, [r7, #28]
 800a178:	e015      	b.n	800a1a6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	697a      	ldr	r2, [r7, #20]
 800a180:	429a      	cmp	r2, r3
 800a182:	d20b      	bcs.n	800a19c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	681a      	ldr	r2, [r3, #0]
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	1ad2      	subs	r2, r2, r3
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f7ff ff9b 	bl	800a0cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a196:	2300      	movs	r3, #0
 800a198:	61fb      	str	r3, [r7, #28]
 800a19a:	e004      	b.n	800a1a6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a1a6:	f000 fc5d 	bl	800aa64 <vPortExitCritical>

	return xReturn;
 800a1aa:	69fb      	ldr	r3, [r7, #28]
}
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	3720      	adds	r7, #32
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd80      	pop	{r7, pc}
 800a1b4:	20006818 	.word	0x20006818
 800a1b8:	2000682c 	.word	0x2000682c

0800a1bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a1bc:	b480      	push	{r7}
 800a1be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a1c0:	4b03      	ldr	r3, [pc, #12]	; (800a1d0 <vTaskMissedYield+0x14>)
 800a1c2:	2201      	movs	r2, #1
 800a1c4:	601a      	str	r2, [r3, #0]
}
 800a1c6:	bf00      	nop
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ce:	4770      	bx	lr
 800a1d0:	20006828 	.word	0x20006828

0800a1d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b082      	sub	sp, #8
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a1dc:	f000 f852 	bl	800a284 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a1e0:	4b06      	ldr	r3, [pc, #24]	; (800a1fc <prvIdleTask+0x28>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	2b01      	cmp	r3, #1
 800a1e6:	d9f9      	bls.n	800a1dc <prvIdleTask+0x8>
			{
				taskYIELD();
 800a1e8:	4b05      	ldr	r3, [pc, #20]	; (800a200 <prvIdleTask+0x2c>)
 800a1ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1ee:	601a      	str	r2, [r3, #0]
 800a1f0:	f3bf 8f4f 	dsb	sy
 800a1f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a1f8:	e7f0      	b.n	800a1dc <prvIdleTask+0x8>
 800a1fa:	bf00      	nop
 800a1fc:	20006718 	.word	0x20006718
 800a200:	e000ed04 	.word	0xe000ed04

0800a204 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b082      	sub	sp, #8
 800a208:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a20a:	2300      	movs	r3, #0
 800a20c:	607b      	str	r3, [r7, #4]
 800a20e:	e00c      	b.n	800a22a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a210:	687a      	ldr	r2, [r7, #4]
 800a212:	4613      	mov	r3, r2
 800a214:	009b      	lsls	r3, r3, #2
 800a216:	4413      	add	r3, r2
 800a218:	009b      	lsls	r3, r3, #2
 800a21a:	4a12      	ldr	r2, [pc, #72]	; (800a264 <prvInitialiseTaskLists+0x60>)
 800a21c:	4413      	add	r3, r2
 800a21e:	4618      	mov	r0, r3
 800a220:	f7fe fd26 	bl	8008c70 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	3301      	adds	r3, #1
 800a228:	607b      	str	r3, [r7, #4]
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2b06      	cmp	r3, #6
 800a22e:	d9ef      	bls.n	800a210 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a230:	480d      	ldr	r0, [pc, #52]	; (800a268 <prvInitialiseTaskLists+0x64>)
 800a232:	f7fe fd1d 	bl	8008c70 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a236:	480d      	ldr	r0, [pc, #52]	; (800a26c <prvInitialiseTaskLists+0x68>)
 800a238:	f7fe fd1a 	bl	8008c70 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a23c:	480c      	ldr	r0, [pc, #48]	; (800a270 <prvInitialiseTaskLists+0x6c>)
 800a23e:	f7fe fd17 	bl	8008c70 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a242:	480c      	ldr	r0, [pc, #48]	; (800a274 <prvInitialiseTaskLists+0x70>)
 800a244:	f7fe fd14 	bl	8008c70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a248:	480b      	ldr	r0, [pc, #44]	; (800a278 <prvInitialiseTaskLists+0x74>)
 800a24a:	f7fe fd11 	bl	8008c70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a24e:	4b0b      	ldr	r3, [pc, #44]	; (800a27c <prvInitialiseTaskLists+0x78>)
 800a250:	4a05      	ldr	r2, [pc, #20]	; (800a268 <prvInitialiseTaskLists+0x64>)
 800a252:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a254:	4b0a      	ldr	r3, [pc, #40]	; (800a280 <prvInitialiseTaskLists+0x7c>)
 800a256:	4a05      	ldr	r2, [pc, #20]	; (800a26c <prvInitialiseTaskLists+0x68>)
 800a258:	601a      	str	r2, [r3, #0]
}
 800a25a:	bf00      	nop
 800a25c:	3708      	adds	r7, #8
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}
 800a262:	bf00      	nop
 800a264:	20006718 	.word	0x20006718
 800a268:	200067a4 	.word	0x200067a4
 800a26c:	200067b8 	.word	0x200067b8
 800a270:	200067d4 	.word	0x200067d4
 800a274:	200067e8 	.word	0x200067e8
 800a278:	20006800 	.word	0x20006800
 800a27c:	200067cc 	.word	0x200067cc
 800a280:	200067d0 	.word	0x200067d0

0800a284 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b082      	sub	sp, #8
 800a288:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a28a:	e019      	b.n	800a2c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a28c:	f000 fbba 	bl	800aa04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a290:	4b10      	ldr	r3, [pc, #64]	; (800a2d4 <prvCheckTasksWaitingTermination+0x50>)
 800a292:	68db      	ldr	r3, [r3, #12]
 800a294:	68db      	ldr	r3, [r3, #12]
 800a296:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	3304      	adds	r3, #4
 800a29c:	4618      	mov	r0, r3
 800a29e:	f7fe fd71 	bl	8008d84 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a2a2:	4b0d      	ldr	r3, [pc, #52]	; (800a2d8 <prvCheckTasksWaitingTermination+0x54>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	3b01      	subs	r3, #1
 800a2a8:	4a0b      	ldr	r2, [pc, #44]	; (800a2d8 <prvCheckTasksWaitingTermination+0x54>)
 800a2aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a2ac:	4b0b      	ldr	r3, [pc, #44]	; (800a2dc <prvCheckTasksWaitingTermination+0x58>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	3b01      	subs	r3, #1
 800a2b2:	4a0a      	ldr	r2, [pc, #40]	; (800a2dc <prvCheckTasksWaitingTermination+0x58>)
 800a2b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a2b6:	f000 fbd5 	bl	800aa64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f000 f810 	bl	800a2e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a2c0:	4b06      	ldr	r3, [pc, #24]	; (800a2dc <prvCheckTasksWaitingTermination+0x58>)
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d1e1      	bne.n	800a28c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a2c8:	bf00      	nop
 800a2ca:	bf00      	nop
 800a2cc:	3708      	adds	r7, #8
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd80      	pop	{r7, pc}
 800a2d2:	bf00      	nop
 800a2d4:	200067e8 	.word	0x200067e8
 800a2d8:	20006814 	.word	0x20006814
 800a2dc:	200067fc 	.word	0x200067fc

0800a2e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a2e0:	b480      	push	{r7}
 800a2e2:	b083      	sub	sp, #12
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a2e8:	bf00      	nop
 800a2ea:	370c      	adds	r7, #12
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f2:	4770      	bx	lr

0800a2f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b083      	sub	sp, #12
 800a2f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a2fa:	4b0c      	ldr	r3, [pc, #48]	; (800a32c <prvResetNextTaskUnblockTime+0x38>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d104      	bne.n	800a30e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a304:	4b0a      	ldr	r3, [pc, #40]	; (800a330 <prvResetNextTaskUnblockTime+0x3c>)
 800a306:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a30a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a30c:	e008      	b.n	800a320 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a30e:	4b07      	ldr	r3, [pc, #28]	; (800a32c <prvResetNextTaskUnblockTime+0x38>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	68db      	ldr	r3, [r3, #12]
 800a314:	68db      	ldr	r3, [r3, #12]
 800a316:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	685b      	ldr	r3, [r3, #4]
 800a31c:	4a04      	ldr	r2, [pc, #16]	; (800a330 <prvResetNextTaskUnblockTime+0x3c>)
 800a31e:	6013      	str	r3, [r2, #0]
}
 800a320:	bf00      	nop
 800a322:	370c      	adds	r7, #12
 800a324:	46bd      	mov	sp, r7
 800a326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32a:	4770      	bx	lr
 800a32c:	200067cc 	.word	0x200067cc
 800a330:	20006834 	.word	0x20006834

0800a334 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a334:	b480      	push	{r7}
 800a336:	b083      	sub	sp, #12
 800a338:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a33a:	4b0b      	ldr	r3, [pc, #44]	; (800a368 <xTaskGetSchedulerState+0x34>)
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d102      	bne.n	800a348 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a342:	2301      	movs	r3, #1
 800a344:	607b      	str	r3, [r7, #4]
 800a346:	e008      	b.n	800a35a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a348:	4b08      	ldr	r3, [pc, #32]	; (800a36c <xTaskGetSchedulerState+0x38>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d102      	bne.n	800a356 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a350:	2302      	movs	r3, #2
 800a352:	607b      	str	r3, [r7, #4]
 800a354:	e001      	b.n	800a35a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a356:	2300      	movs	r3, #0
 800a358:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a35a:	687b      	ldr	r3, [r7, #4]
	}
 800a35c:	4618      	mov	r0, r3
 800a35e:	370c      	adds	r7, #12
 800a360:	46bd      	mov	sp, r7
 800a362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a366:	4770      	bx	lr
 800a368:	20006820 	.word	0x20006820
 800a36c:	2000683c 	.word	0x2000683c

0800a370 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a370:	b580      	push	{r7, lr}
 800a372:	b084      	sub	sp, #16
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a37c:	2300      	movs	r3, #0
 800a37e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d069      	beq.n	800a45a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a38a:	4b36      	ldr	r3, [pc, #216]	; (800a464 <xTaskPriorityInherit+0xf4>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a390:	429a      	cmp	r2, r3
 800a392:	d259      	bcs.n	800a448 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	699b      	ldr	r3, [r3, #24]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	db06      	blt.n	800a3aa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a39c:	4b31      	ldr	r3, [pc, #196]	; (800a464 <xTaskPriorityInherit+0xf4>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3a2:	f1c3 0207 	rsb	r2, r3, #7
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	6959      	ldr	r1, [r3, #20]
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3b2:	4613      	mov	r3, r2
 800a3b4:	009b      	lsls	r3, r3, #2
 800a3b6:	4413      	add	r3, r2
 800a3b8:	009b      	lsls	r3, r3, #2
 800a3ba:	4a2b      	ldr	r2, [pc, #172]	; (800a468 <xTaskPriorityInherit+0xf8>)
 800a3bc:	4413      	add	r3, r2
 800a3be:	4299      	cmp	r1, r3
 800a3c0:	d13a      	bne.n	800a438 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	3304      	adds	r3, #4
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	f7fe fcdc 	bl	8008d84 <uxListRemove>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d115      	bne.n	800a3fe <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3d6:	4924      	ldr	r1, [pc, #144]	; (800a468 <xTaskPriorityInherit+0xf8>)
 800a3d8:	4613      	mov	r3, r2
 800a3da:	009b      	lsls	r3, r3, #2
 800a3dc:	4413      	add	r3, r2
 800a3de:	009b      	lsls	r3, r3, #2
 800a3e0:	440b      	add	r3, r1
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d10a      	bne.n	800a3fe <xTaskPriorityInherit+0x8e>
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ec:	2201      	movs	r2, #1
 800a3ee:	fa02 f303 	lsl.w	r3, r2, r3
 800a3f2:	43da      	mvns	r2, r3
 800a3f4:	4b1d      	ldr	r3, [pc, #116]	; (800a46c <xTaskPriorityInherit+0xfc>)
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	4013      	ands	r3, r2
 800a3fa:	4a1c      	ldr	r2, [pc, #112]	; (800a46c <xTaskPriorityInherit+0xfc>)
 800a3fc:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a3fe:	4b19      	ldr	r3, [pc, #100]	; (800a464 <xTaskPriorityInherit+0xf4>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a40c:	2201      	movs	r2, #1
 800a40e:	409a      	lsls	r2, r3
 800a410:	4b16      	ldr	r3, [pc, #88]	; (800a46c <xTaskPriorityInherit+0xfc>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	4313      	orrs	r3, r2
 800a416:	4a15      	ldr	r2, [pc, #84]	; (800a46c <xTaskPriorityInherit+0xfc>)
 800a418:	6013      	str	r3, [r2, #0]
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a41e:	4613      	mov	r3, r2
 800a420:	009b      	lsls	r3, r3, #2
 800a422:	4413      	add	r3, r2
 800a424:	009b      	lsls	r3, r3, #2
 800a426:	4a10      	ldr	r2, [pc, #64]	; (800a468 <xTaskPriorityInherit+0xf8>)
 800a428:	441a      	add	r2, r3
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	3304      	adds	r3, #4
 800a42e:	4619      	mov	r1, r3
 800a430:	4610      	mov	r0, r2
 800a432:	f7fe fc4a 	bl	8008cca <vListInsertEnd>
 800a436:	e004      	b.n	800a442 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a438:	4b0a      	ldr	r3, [pc, #40]	; (800a464 <xTaskPriorityInherit+0xf4>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a442:	2301      	movs	r3, #1
 800a444:	60fb      	str	r3, [r7, #12]
 800a446:	e008      	b.n	800a45a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a44c:	4b05      	ldr	r3, [pc, #20]	; (800a464 <xTaskPriorityInherit+0xf4>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a452:	429a      	cmp	r2, r3
 800a454:	d201      	bcs.n	800a45a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a456:	2301      	movs	r3, #1
 800a458:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a45a:	68fb      	ldr	r3, [r7, #12]
	}
 800a45c:	4618      	mov	r0, r3
 800a45e:	3710      	adds	r7, #16
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}
 800a464:	20006714 	.word	0x20006714
 800a468:	20006718 	.word	0x20006718
 800a46c:	2000681c 	.word	0x2000681c

0800a470 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a470:	b580      	push	{r7, lr}
 800a472:	b086      	sub	sp, #24
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a47c:	2300      	movs	r3, #0
 800a47e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d06e      	beq.n	800a564 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a486:	4b3a      	ldr	r3, [pc, #232]	; (800a570 <xTaskPriorityDisinherit+0x100>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	693a      	ldr	r2, [r7, #16]
 800a48c:	429a      	cmp	r2, r3
 800a48e:	d00a      	beq.n	800a4a6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a490:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a494:	f383 8811 	msr	BASEPRI, r3
 800a498:	f3bf 8f6f 	isb	sy
 800a49c:	f3bf 8f4f 	dsb	sy
 800a4a0:	60fb      	str	r3, [r7, #12]
}
 800a4a2:	bf00      	nop
 800a4a4:	e7fe      	b.n	800a4a4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a4a6:	693b      	ldr	r3, [r7, #16]
 800a4a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d10a      	bne.n	800a4c4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a4ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b2:	f383 8811 	msr	BASEPRI, r3
 800a4b6:	f3bf 8f6f 	isb	sy
 800a4ba:	f3bf 8f4f 	dsb	sy
 800a4be:	60bb      	str	r3, [r7, #8]
}
 800a4c0:	bf00      	nop
 800a4c2:	e7fe      	b.n	800a4c2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a4c4:	693b      	ldr	r3, [r7, #16]
 800a4c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4c8:	1e5a      	subs	r2, r3, #1
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4d2:	693b      	ldr	r3, [r7, #16]
 800a4d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4d6:	429a      	cmp	r2, r3
 800a4d8:	d044      	beq.n	800a564 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a4da:	693b      	ldr	r3, [r7, #16]
 800a4dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d140      	bne.n	800a564 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a4e2:	693b      	ldr	r3, [r7, #16]
 800a4e4:	3304      	adds	r3, #4
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f7fe fc4c 	bl	8008d84 <uxListRemove>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d115      	bne.n	800a51e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4f6:	491f      	ldr	r1, [pc, #124]	; (800a574 <xTaskPriorityDisinherit+0x104>)
 800a4f8:	4613      	mov	r3, r2
 800a4fa:	009b      	lsls	r3, r3, #2
 800a4fc:	4413      	add	r3, r2
 800a4fe:	009b      	lsls	r3, r3, #2
 800a500:	440b      	add	r3, r1
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d10a      	bne.n	800a51e <xTaskPriorityDisinherit+0xae>
 800a508:	693b      	ldr	r3, [r7, #16]
 800a50a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a50c:	2201      	movs	r2, #1
 800a50e:	fa02 f303 	lsl.w	r3, r2, r3
 800a512:	43da      	mvns	r2, r3
 800a514:	4b18      	ldr	r3, [pc, #96]	; (800a578 <xTaskPriorityDisinherit+0x108>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	4013      	ands	r3, r2
 800a51a:	4a17      	ldr	r2, [pc, #92]	; (800a578 <xTaskPriorityDisinherit+0x108>)
 800a51c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a51e:	693b      	ldr	r3, [r7, #16]
 800a520:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a52a:	f1c3 0207 	rsb	r2, r3, #7
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a536:	2201      	movs	r2, #1
 800a538:	409a      	lsls	r2, r3
 800a53a:	4b0f      	ldr	r3, [pc, #60]	; (800a578 <xTaskPriorityDisinherit+0x108>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	4313      	orrs	r3, r2
 800a540:	4a0d      	ldr	r2, [pc, #52]	; (800a578 <xTaskPriorityDisinherit+0x108>)
 800a542:	6013      	str	r3, [r2, #0]
 800a544:	693b      	ldr	r3, [r7, #16]
 800a546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a548:	4613      	mov	r3, r2
 800a54a:	009b      	lsls	r3, r3, #2
 800a54c:	4413      	add	r3, r2
 800a54e:	009b      	lsls	r3, r3, #2
 800a550:	4a08      	ldr	r2, [pc, #32]	; (800a574 <xTaskPriorityDisinherit+0x104>)
 800a552:	441a      	add	r2, r3
 800a554:	693b      	ldr	r3, [r7, #16]
 800a556:	3304      	adds	r3, #4
 800a558:	4619      	mov	r1, r3
 800a55a:	4610      	mov	r0, r2
 800a55c:	f7fe fbb5 	bl	8008cca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a560:	2301      	movs	r3, #1
 800a562:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a564:	697b      	ldr	r3, [r7, #20]
	}
 800a566:	4618      	mov	r0, r3
 800a568:	3718      	adds	r7, #24
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}
 800a56e:	bf00      	nop
 800a570:	20006714 	.word	0x20006714
 800a574:	20006718 	.word	0x20006718
 800a578:	2000681c 	.word	0x2000681c

0800a57c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b088      	sub	sp, #32
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
 800a584:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a58a:	2301      	movs	r3, #1
 800a58c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2b00      	cmp	r3, #0
 800a592:	f000 8083 	beq.w	800a69c <vTaskPriorityDisinheritAfterTimeout+0x120>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a596:	69bb      	ldr	r3, [r7, #24]
 800a598:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d10a      	bne.n	800a5b4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800a59e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5a2:	f383 8811 	msr	BASEPRI, r3
 800a5a6:	f3bf 8f6f 	isb	sy
 800a5aa:	f3bf 8f4f 	dsb	sy
 800a5ae:	60fb      	str	r3, [r7, #12]
}
 800a5b0:	bf00      	nop
 800a5b2:	e7fe      	b.n	800a5b2 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a5b4:	69bb      	ldr	r3, [r7, #24]
 800a5b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5b8:	683a      	ldr	r2, [r7, #0]
 800a5ba:	429a      	cmp	r2, r3
 800a5bc:	d902      	bls.n	800a5c4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	61fb      	str	r3, [r7, #28]
 800a5c2:	e002      	b.n	800a5ca <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a5c4:	69bb      	ldr	r3, [r7, #24]
 800a5c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5c8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a5ca:	69bb      	ldr	r3, [r7, #24]
 800a5cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5ce:	69fa      	ldr	r2, [r7, #28]
 800a5d0:	429a      	cmp	r2, r3
 800a5d2:	d063      	beq.n	800a69c <vTaskPriorityDisinheritAfterTimeout+0x120>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a5d4:	69bb      	ldr	r3, [r7, #24]
 800a5d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5d8:	697a      	ldr	r2, [r7, #20]
 800a5da:	429a      	cmp	r2, r3
 800a5dc:	d15e      	bne.n	800a69c <vTaskPriorityDisinheritAfterTimeout+0x120>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a5de:	4b31      	ldr	r3, [pc, #196]	; (800a6a4 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	69ba      	ldr	r2, [r7, #24]
 800a5e4:	429a      	cmp	r2, r3
 800a5e6:	d10a      	bne.n	800a5fe <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 800a5e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ec:	f383 8811 	msr	BASEPRI, r3
 800a5f0:	f3bf 8f6f 	isb	sy
 800a5f4:	f3bf 8f4f 	dsb	sy
 800a5f8:	60bb      	str	r3, [r7, #8]
}
 800a5fa:	bf00      	nop
 800a5fc:	e7fe      	b.n	800a5fc <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a5fe:	69bb      	ldr	r3, [r7, #24]
 800a600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a602:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a604:	69bb      	ldr	r3, [r7, #24]
 800a606:	69fa      	ldr	r2, [r7, #28]
 800a608:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a60a:	69bb      	ldr	r3, [r7, #24]
 800a60c:	699b      	ldr	r3, [r3, #24]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	db04      	blt.n	800a61c <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a612:	69fb      	ldr	r3, [r7, #28]
 800a614:	f1c3 0207 	rsb	r2, r3, #7
 800a618:	69bb      	ldr	r3, [r7, #24]
 800a61a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a61c:	69bb      	ldr	r3, [r7, #24]
 800a61e:	6959      	ldr	r1, [r3, #20]
 800a620:	693a      	ldr	r2, [r7, #16]
 800a622:	4613      	mov	r3, r2
 800a624:	009b      	lsls	r3, r3, #2
 800a626:	4413      	add	r3, r2
 800a628:	009b      	lsls	r3, r3, #2
 800a62a:	4a1f      	ldr	r2, [pc, #124]	; (800a6a8 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800a62c:	4413      	add	r3, r2
 800a62e:	4299      	cmp	r1, r3
 800a630:	d134      	bne.n	800a69c <vTaskPriorityDisinheritAfterTimeout+0x120>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a632:	69bb      	ldr	r3, [r7, #24]
 800a634:	3304      	adds	r3, #4
 800a636:	4618      	mov	r0, r3
 800a638:	f7fe fba4 	bl	8008d84 <uxListRemove>
 800a63c:	4603      	mov	r3, r0
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d115      	bne.n	800a66e <vTaskPriorityDisinheritAfterTimeout+0xf2>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a642:	69bb      	ldr	r3, [r7, #24]
 800a644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a646:	4918      	ldr	r1, [pc, #96]	; (800a6a8 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800a648:	4613      	mov	r3, r2
 800a64a:	009b      	lsls	r3, r3, #2
 800a64c:	4413      	add	r3, r2
 800a64e:	009b      	lsls	r3, r3, #2
 800a650:	440b      	add	r3, r1
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d10a      	bne.n	800a66e <vTaskPriorityDisinheritAfterTimeout+0xf2>
 800a658:	69bb      	ldr	r3, [r7, #24]
 800a65a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a65c:	2201      	movs	r2, #1
 800a65e:	fa02 f303 	lsl.w	r3, r2, r3
 800a662:	43da      	mvns	r2, r3
 800a664:	4b11      	ldr	r3, [pc, #68]	; (800a6ac <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	4013      	ands	r3, r2
 800a66a:	4a10      	ldr	r2, [pc, #64]	; (800a6ac <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800a66c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a66e:	69bb      	ldr	r3, [r7, #24]
 800a670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a672:	2201      	movs	r2, #1
 800a674:	409a      	lsls	r2, r3
 800a676:	4b0d      	ldr	r3, [pc, #52]	; (800a6ac <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	4313      	orrs	r3, r2
 800a67c:	4a0b      	ldr	r2, [pc, #44]	; (800a6ac <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800a67e:	6013      	str	r3, [r2, #0]
 800a680:	69bb      	ldr	r3, [r7, #24]
 800a682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a684:	4613      	mov	r3, r2
 800a686:	009b      	lsls	r3, r3, #2
 800a688:	4413      	add	r3, r2
 800a68a:	009b      	lsls	r3, r3, #2
 800a68c:	4a06      	ldr	r2, [pc, #24]	; (800a6a8 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800a68e:	441a      	add	r2, r3
 800a690:	69bb      	ldr	r3, [r7, #24]
 800a692:	3304      	adds	r3, #4
 800a694:	4619      	mov	r1, r3
 800a696:	4610      	mov	r0, r2
 800a698:	f7fe fb17 	bl	8008cca <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a69c:	bf00      	nop
 800a69e:	3720      	adds	r7, #32
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}
 800a6a4:	20006714 	.word	0x20006714
 800a6a8:	20006718 	.word	0x20006718
 800a6ac:	2000681c 	.word	0x2000681c

0800a6b0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a6b0:	b480      	push	{r7}
 800a6b2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a6b4:	4b07      	ldr	r3, [pc, #28]	; (800a6d4 <pvTaskIncrementMutexHeldCount+0x24>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d004      	beq.n	800a6c6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a6bc:	4b05      	ldr	r3, [pc, #20]	; (800a6d4 <pvTaskIncrementMutexHeldCount+0x24>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a6c2:	3201      	adds	r2, #1
 800a6c4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800a6c6:	4b03      	ldr	r3, [pc, #12]	; (800a6d4 <pvTaskIncrementMutexHeldCount+0x24>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
	}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d2:	4770      	bx	lr
 800a6d4:	20006714 	.word	0x20006714

0800a6d8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b084      	sub	sp, #16
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
 800a6e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a6e2:	4b29      	ldr	r3, [pc, #164]	; (800a788 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a6e8:	4b28      	ldr	r3, [pc, #160]	; (800a78c <prvAddCurrentTaskToDelayedList+0xb4>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	3304      	adds	r3, #4
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f7fe fb48 	bl	8008d84 <uxListRemove>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d10b      	bne.n	800a712 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a6fa:	4b24      	ldr	r3, [pc, #144]	; (800a78c <prvAddCurrentTaskToDelayedList+0xb4>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a700:	2201      	movs	r2, #1
 800a702:	fa02 f303 	lsl.w	r3, r2, r3
 800a706:	43da      	mvns	r2, r3
 800a708:	4b21      	ldr	r3, [pc, #132]	; (800a790 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	4013      	ands	r3, r2
 800a70e:	4a20      	ldr	r2, [pc, #128]	; (800a790 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a710:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a718:	d10a      	bne.n	800a730 <prvAddCurrentTaskToDelayedList+0x58>
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d007      	beq.n	800a730 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a720:	4b1a      	ldr	r3, [pc, #104]	; (800a78c <prvAddCurrentTaskToDelayedList+0xb4>)
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	3304      	adds	r3, #4
 800a726:	4619      	mov	r1, r3
 800a728:	481a      	ldr	r0, [pc, #104]	; (800a794 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a72a:	f7fe face 	bl	8008cca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a72e:	e026      	b.n	800a77e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a730:	68fa      	ldr	r2, [r7, #12]
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	4413      	add	r3, r2
 800a736:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a738:	4b14      	ldr	r3, [pc, #80]	; (800a78c <prvAddCurrentTaskToDelayedList+0xb4>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	68ba      	ldr	r2, [r7, #8]
 800a73e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a740:	68ba      	ldr	r2, [r7, #8]
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	429a      	cmp	r2, r3
 800a746:	d209      	bcs.n	800a75c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a748:	4b13      	ldr	r3, [pc, #76]	; (800a798 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a74a:	681a      	ldr	r2, [r3, #0]
 800a74c:	4b0f      	ldr	r3, [pc, #60]	; (800a78c <prvAddCurrentTaskToDelayedList+0xb4>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	3304      	adds	r3, #4
 800a752:	4619      	mov	r1, r3
 800a754:	4610      	mov	r0, r2
 800a756:	f7fe fadc 	bl	8008d12 <vListInsert>
}
 800a75a:	e010      	b.n	800a77e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a75c:	4b0f      	ldr	r3, [pc, #60]	; (800a79c <prvAddCurrentTaskToDelayedList+0xc4>)
 800a75e:	681a      	ldr	r2, [r3, #0]
 800a760:	4b0a      	ldr	r3, [pc, #40]	; (800a78c <prvAddCurrentTaskToDelayedList+0xb4>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	3304      	adds	r3, #4
 800a766:	4619      	mov	r1, r3
 800a768:	4610      	mov	r0, r2
 800a76a:	f7fe fad2 	bl	8008d12 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a76e:	4b0c      	ldr	r3, [pc, #48]	; (800a7a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	68ba      	ldr	r2, [r7, #8]
 800a774:	429a      	cmp	r2, r3
 800a776:	d202      	bcs.n	800a77e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a778:	4a09      	ldr	r2, [pc, #36]	; (800a7a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	6013      	str	r3, [r2, #0]
}
 800a77e:	bf00      	nop
 800a780:	3710      	adds	r7, #16
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}
 800a786:	bf00      	nop
 800a788:	20006818 	.word	0x20006818
 800a78c:	20006714 	.word	0x20006714
 800a790:	2000681c 	.word	0x2000681c
 800a794:	20006800 	.word	0x20006800
 800a798:	200067d0 	.word	0x200067d0
 800a79c:	200067cc 	.word	0x200067cc
 800a7a0:	20006834 	.word	0x20006834

0800a7a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a7a4:	b480      	push	{r7}
 800a7a6:	b085      	sub	sp, #20
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	60f8      	str	r0, [r7, #12]
 800a7ac:	60b9      	str	r1, [r7, #8]
 800a7ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	3b04      	subs	r3, #4
 800a7b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a7bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	3b04      	subs	r3, #4
 800a7c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a7c4:	68bb      	ldr	r3, [r7, #8]
 800a7c6:	f023 0201 	bic.w	r2, r3, #1
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	3b04      	subs	r3, #4
 800a7d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a7d4:	4a0c      	ldr	r2, [pc, #48]	; (800a808 <pxPortInitialiseStack+0x64>)
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	3b14      	subs	r3, #20
 800a7de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a7e0:	687a      	ldr	r2, [r7, #4]
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	3b04      	subs	r3, #4
 800a7ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	f06f 0202 	mvn.w	r2, #2
 800a7f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	3b20      	subs	r3, #32
 800a7f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
}
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	3714      	adds	r7, #20
 800a800:	46bd      	mov	sp, r7
 800a802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a806:	4770      	bx	lr
 800a808:	0800a80d 	.word	0x0800a80d

0800a80c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a80c:	b480      	push	{r7}
 800a80e:	b085      	sub	sp, #20
 800a810:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a812:	2300      	movs	r3, #0
 800a814:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a816:	4b12      	ldr	r3, [pc, #72]	; (800a860 <prvTaskExitError+0x54>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a81e:	d00a      	beq.n	800a836 <prvTaskExitError+0x2a>
	__asm volatile
 800a820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a824:	f383 8811 	msr	BASEPRI, r3
 800a828:	f3bf 8f6f 	isb	sy
 800a82c:	f3bf 8f4f 	dsb	sy
 800a830:	60fb      	str	r3, [r7, #12]
}
 800a832:	bf00      	nop
 800a834:	e7fe      	b.n	800a834 <prvTaskExitError+0x28>
	__asm volatile
 800a836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a83a:	f383 8811 	msr	BASEPRI, r3
 800a83e:	f3bf 8f6f 	isb	sy
 800a842:	f3bf 8f4f 	dsb	sy
 800a846:	60bb      	str	r3, [r7, #8]
}
 800a848:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a84a:	bf00      	nop
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d0fc      	beq.n	800a84c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a852:	bf00      	nop
 800a854:	bf00      	nop
 800a856:	3714      	adds	r7, #20
 800a858:	46bd      	mov	sp, r7
 800a85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85e:	4770      	bx	lr
 800a860:	2000000c 	.word	0x2000000c
	...

0800a870 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a870:	4b07      	ldr	r3, [pc, #28]	; (800a890 <pxCurrentTCBConst2>)
 800a872:	6819      	ldr	r1, [r3, #0]
 800a874:	6808      	ldr	r0, [r1, #0]
 800a876:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a87a:	f380 8809 	msr	PSP, r0
 800a87e:	f3bf 8f6f 	isb	sy
 800a882:	f04f 0000 	mov.w	r0, #0
 800a886:	f380 8811 	msr	BASEPRI, r0
 800a88a:	4770      	bx	lr
 800a88c:	f3af 8000 	nop.w

0800a890 <pxCurrentTCBConst2>:
 800a890:	20006714 	.word	0x20006714
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a894:	bf00      	nop
 800a896:	bf00      	nop

0800a898 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a898:	4808      	ldr	r0, [pc, #32]	; (800a8bc <prvPortStartFirstTask+0x24>)
 800a89a:	6800      	ldr	r0, [r0, #0]
 800a89c:	6800      	ldr	r0, [r0, #0]
 800a89e:	f380 8808 	msr	MSP, r0
 800a8a2:	f04f 0000 	mov.w	r0, #0
 800a8a6:	f380 8814 	msr	CONTROL, r0
 800a8aa:	b662      	cpsie	i
 800a8ac:	b661      	cpsie	f
 800a8ae:	f3bf 8f4f 	dsb	sy
 800a8b2:	f3bf 8f6f 	isb	sy
 800a8b6:	df00      	svc	0
 800a8b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a8ba:	bf00      	nop
 800a8bc:	e000ed08 	.word	0xe000ed08

0800a8c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b086      	sub	sp, #24
 800a8c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a8c6:	4b46      	ldr	r3, [pc, #280]	; (800a9e0 <xPortStartScheduler+0x120>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	4a46      	ldr	r2, [pc, #280]	; (800a9e4 <xPortStartScheduler+0x124>)
 800a8cc:	4293      	cmp	r3, r2
 800a8ce:	d10a      	bne.n	800a8e6 <xPortStartScheduler+0x26>
	__asm volatile
 800a8d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d4:	f383 8811 	msr	BASEPRI, r3
 800a8d8:	f3bf 8f6f 	isb	sy
 800a8dc:	f3bf 8f4f 	dsb	sy
 800a8e0:	613b      	str	r3, [r7, #16]
}
 800a8e2:	bf00      	nop
 800a8e4:	e7fe      	b.n	800a8e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a8e6:	4b3e      	ldr	r3, [pc, #248]	; (800a9e0 <xPortStartScheduler+0x120>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	4a3f      	ldr	r2, [pc, #252]	; (800a9e8 <xPortStartScheduler+0x128>)
 800a8ec:	4293      	cmp	r3, r2
 800a8ee:	d10a      	bne.n	800a906 <xPortStartScheduler+0x46>
	__asm volatile
 800a8f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f4:	f383 8811 	msr	BASEPRI, r3
 800a8f8:	f3bf 8f6f 	isb	sy
 800a8fc:	f3bf 8f4f 	dsb	sy
 800a900:	60fb      	str	r3, [r7, #12]
}
 800a902:	bf00      	nop
 800a904:	e7fe      	b.n	800a904 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a906:	4b39      	ldr	r3, [pc, #228]	; (800a9ec <xPortStartScheduler+0x12c>)
 800a908:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a90a:	697b      	ldr	r3, [r7, #20]
 800a90c:	781b      	ldrb	r3, [r3, #0]
 800a90e:	b2db      	uxtb	r3, r3
 800a910:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a912:	697b      	ldr	r3, [r7, #20]
 800a914:	22ff      	movs	r2, #255	; 0xff
 800a916:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	781b      	ldrb	r3, [r3, #0]
 800a91c:	b2db      	uxtb	r3, r3
 800a91e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a920:	78fb      	ldrb	r3, [r7, #3]
 800a922:	b2db      	uxtb	r3, r3
 800a924:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a928:	b2da      	uxtb	r2, r3
 800a92a:	4b31      	ldr	r3, [pc, #196]	; (800a9f0 <xPortStartScheduler+0x130>)
 800a92c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a92e:	4b31      	ldr	r3, [pc, #196]	; (800a9f4 <xPortStartScheduler+0x134>)
 800a930:	2207      	movs	r2, #7
 800a932:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a934:	e009      	b.n	800a94a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a936:	4b2f      	ldr	r3, [pc, #188]	; (800a9f4 <xPortStartScheduler+0x134>)
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	3b01      	subs	r3, #1
 800a93c:	4a2d      	ldr	r2, [pc, #180]	; (800a9f4 <xPortStartScheduler+0x134>)
 800a93e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a940:	78fb      	ldrb	r3, [r7, #3]
 800a942:	b2db      	uxtb	r3, r3
 800a944:	005b      	lsls	r3, r3, #1
 800a946:	b2db      	uxtb	r3, r3
 800a948:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a94a:	78fb      	ldrb	r3, [r7, #3]
 800a94c:	b2db      	uxtb	r3, r3
 800a94e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a952:	2b80      	cmp	r3, #128	; 0x80
 800a954:	d0ef      	beq.n	800a936 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a956:	4b27      	ldr	r3, [pc, #156]	; (800a9f4 <xPortStartScheduler+0x134>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f1c3 0307 	rsb	r3, r3, #7
 800a95e:	2b04      	cmp	r3, #4
 800a960:	d00a      	beq.n	800a978 <xPortStartScheduler+0xb8>
	__asm volatile
 800a962:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a966:	f383 8811 	msr	BASEPRI, r3
 800a96a:	f3bf 8f6f 	isb	sy
 800a96e:	f3bf 8f4f 	dsb	sy
 800a972:	60bb      	str	r3, [r7, #8]
}
 800a974:	bf00      	nop
 800a976:	e7fe      	b.n	800a976 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a978:	4b1e      	ldr	r3, [pc, #120]	; (800a9f4 <xPortStartScheduler+0x134>)
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	021b      	lsls	r3, r3, #8
 800a97e:	4a1d      	ldr	r2, [pc, #116]	; (800a9f4 <xPortStartScheduler+0x134>)
 800a980:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a982:	4b1c      	ldr	r3, [pc, #112]	; (800a9f4 <xPortStartScheduler+0x134>)
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a98a:	4a1a      	ldr	r2, [pc, #104]	; (800a9f4 <xPortStartScheduler+0x134>)
 800a98c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	b2da      	uxtb	r2, r3
 800a992:	697b      	ldr	r3, [r7, #20]
 800a994:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a996:	4b18      	ldr	r3, [pc, #96]	; (800a9f8 <xPortStartScheduler+0x138>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	4a17      	ldr	r2, [pc, #92]	; (800a9f8 <xPortStartScheduler+0x138>)
 800a99c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a9a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a9a2:	4b15      	ldr	r3, [pc, #84]	; (800a9f8 <xPortStartScheduler+0x138>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	4a14      	ldr	r2, [pc, #80]	; (800a9f8 <xPortStartScheduler+0x138>)
 800a9a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a9ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a9ae:	f000 f8dd 	bl	800ab6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a9b2:	4b12      	ldr	r3, [pc, #72]	; (800a9fc <xPortStartScheduler+0x13c>)
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a9b8:	f000 f8fc 	bl	800abb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a9bc:	4b10      	ldr	r3, [pc, #64]	; (800aa00 <xPortStartScheduler+0x140>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	4a0f      	ldr	r2, [pc, #60]	; (800aa00 <xPortStartScheduler+0x140>)
 800a9c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a9c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a9c8:	f7ff ff66 	bl	800a898 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a9cc:	f7ff fa9c 	bl	8009f08 <vTaskSwitchContext>
	prvTaskExitError();
 800a9d0:	f7ff ff1c 	bl	800a80c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a9d4:	2300      	movs	r3, #0
}
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	3718      	adds	r7, #24
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	bd80      	pop	{r7, pc}
 800a9de:	bf00      	nop
 800a9e0:	e000ed00 	.word	0xe000ed00
 800a9e4:	410fc271 	.word	0x410fc271
 800a9e8:	410fc270 	.word	0x410fc270
 800a9ec:	e000e400 	.word	0xe000e400
 800a9f0:	20006840 	.word	0x20006840
 800a9f4:	20006844 	.word	0x20006844
 800a9f8:	e000ed20 	.word	0xe000ed20
 800a9fc:	2000000c 	.word	0x2000000c
 800aa00:	e000ef34 	.word	0xe000ef34

0800aa04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800aa04:	b480      	push	{r7}
 800aa06:	b083      	sub	sp, #12
 800aa08:	af00      	add	r7, sp, #0
	__asm volatile
 800aa0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa0e:	f383 8811 	msr	BASEPRI, r3
 800aa12:	f3bf 8f6f 	isb	sy
 800aa16:	f3bf 8f4f 	dsb	sy
 800aa1a:	607b      	str	r3, [r7, #4]
}
 800aa1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800aa1e:	4b0f      	ldr	r3, [pc, #60]	; (800aa5c <vPortEnterCritical+0x58>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	3301      	adds	r3, #1
 800aa24:	4a0d      	ldr	r2, [pc, #52]	; (800aa5c <vPortEnterCritical+0x58>)
 800aa26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800aa28:	4b0c      	ldr	r3, [pc, #48]	; (800aa5c <vPortEnterCritical+0x58>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	2b01      	cmp	r3, #1
 800aa2e:	d10f      	bne.n	800aa50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800aa30:	4b0b      	ldr	r3, [pc, #44]	; (800aa60 <vPortEnterCritical+0x5c>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	b2db      	uxtb	r3, r3
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d00a      	beq.n	800aa50 <vPortEnterCritical+0x4c>
	__asm volatile
 800aa3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa3e:	f383 8811 	msr	BASEPRI, r3
 800aa42:	f3bf 8f6f 	isb	sy
 800aa46:	f3bf 8f4f 	dsb	sy
 800aa4a:	603b      	str	r3, [r7, #0]
}
 800aa4c:	bf00      	nop
 800aa4e:	e7fe      	b.n	800aa4e <vPortEnterCritical+0x4a>
	}
}
 800aa50:	bf00      	nop
 800aa52:	370c      	adds	r7, #12
 800aa54:	46bd      	mov	sp, r7
 800aa56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5a:	4770      	bx	lr
 800aa5c:	2000000c 	.word	0x2000000c
 800aa60:	e000ed04 	.word	0xe000ed04

0800aa64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800aa64:	b480      	push	{r7}
 800aa66:	b083      	sub	sp, #12
 800aa68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800aa6a:	4b12      	ldr	r3, [pc, #72]	; (800aab4 <vPortExitCritical+0x50>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d10a      	bne.n	800aa88 <vPortExitCritical+0x24>
	__asm volatile
 800aa72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa76:	f383 8811 	msr	BASEPRI, r3
 800aa7a:	f3bf 8f6f 	isb	sy
 800aa7e:	f3bf 8f4f 	dsb	sy
 800aa82:	607b      	str	r3, [r7, #4]
}
 800aa84:	bf00      	nop
 800aa86:	e7fe      	b.n	800aa86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800aa88:	4b0a      	ldr	r3, [pc, #40]	; (800aab4 <vPortExitCritical+0x50>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	3b01      	subs	r3, #1
 800aa8e:	4a09      	ldr	r2, [pc, #36]	; (800aab4 <vPortExitCritical+0x50>)
 800aa90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800aa92:	4b08      	ldr	r3, [pc, #32]	; (800aab4 <vPortExitCritical+0x50>)
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d105      	bne.n	800aaa6 <vPortExitCritical+0x42>
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	f383 8811 	msr	BASEPRI, r3
}
 800aaa4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800aaa6:	bf00      	nop
 800aaa8:	370c      	adds	r7, #12
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab0:	4770      	bx	lr
 800aab2:	bf00      	nop
 800aab4:	2000000c 	.word	0x2000000c
	...

0800aac0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800aac0:	f3ef 8009 	mrs	r0, PSP
 800aac4:	f3bf 8f6f 	isb	sy
 800aac8:	4b15      	ldr	r3, [pc, #84]	; (800ab20 <pxCurrentTCBConst>)
 800aaca:	681a      	ldr	r2, [r3, #0]
 800aacc:	f01e 0f10 	tst.w	lr, #16
 800aad0:	bf08      	it	eq
 800aad2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800aad6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aada:	6010      	str	r0, [r2, #0]
 800aadc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aae0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800aae4:	f380 8811 	msr	BASEPRI, r0
 800aae8:	f3bf 8f4f 	dsb	sy
 800aaec:	f3bf 8f6f 	isb	sy
 800aaf0:	f7ff fa0a 	bl	8009f08 <vTaskSwitchContext>
 800aaf4:	f04f 0000 	mov.w	r0, #0
 800aaf8:	f380 8811 	msr	BASEPRI, r0
 800aafc:	bc09      	pop	{r0, r3}
 800aafe:	6819      	ldr	r1, [r3, #0]
 800ab00:	6808      	ldr	r0, [r1, #0]
 800ab02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab06:	f01e 0f10 	tst.w	lr, #16
 800ab0a:	bf08      	it	eq
 800ab0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ab10:	f380 8809 	msr	PSP, r0
 800ab14:	f3bf 8f6f 	isb	sy
 800ab18:	4770      	bx	lr
 800ab1a:	bf00      	nop
 800ab1c:	f3af 8000 	nop.w

0800ab20 <pxCurrentTCBConst>:
 800ab20:	20006714 	.word	0x20006714
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ab24:	bf00      	nop
 800ab26:	bf00      	nop

0800ab28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b082      	sub	sp, #8
 800ab2c:	af00      	add	r7, sp, #0
	__asm volatile
 800ab2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab32:	f383 8811 	msr	BASEPRI, r3
 800ab36:	f3bf 8f6f 	isb	sy
 800ab3a:	f3bf 8f4f 	dsb	sy
 800ab3e:	607b      	str	r3, [r7, #4]
}
 800ab40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ab42:	f7ff f929 	bl	8009d98 <xTaskIncrementTick>
 800ab46:	4603      	mov	r3, r0
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d003      	beq.n	800ab54 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ab4c:	4b06      	ldr	r3, [pc, #24]	; (800ab68 <SysTick_Handler+0x40>)
 800ab4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab52:	601a      	str	r2, [r3, #0]
 800ab54:	2300      	movs	r3, #0
 800ab56:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	f383 8811 	msr	BASEPRI, r3
}
 800ab5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ab60:	bf00      	nop
 800ab62:	3708      	adds	r7, #8
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bd80      	pop	{r7, pc}
 800ab68:	e000ed04 	.word	0xe000ed04

0800ab6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ab70:	4b0b      	ldr	r3, [pc, #44]	; (800aba0 <vPortSetupTimerInterrupt+0x34>)
 800ab72:	2200      	movs	r2, #0
 800ab74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ab76:	4b0b      	ldr	r3, [pc, #44]	; (800aba4 <vPortSetupTimerInterrupt+0x38>)
 800ab78:	2200      	movs	r2, #0
 800ab7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ab7c:	4b0a      	ldr	r3, [pc, #40]	; (800aba8 <vPortSetupTimerInterrupt+0x3c>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	4a0a      	ldr	r2, [pc, #40]	; (800abac <vPortSetupTimerInterrupt+0x40>)
 800ab82:	fba2 2303 	umull	r2, r3, r2, r3
 800ab86:	099b      	lsrs	r3, r3, #6
 800ab88:	4a09      	ldr	r2, [pc, #36]	; (800abb0 <vPortSetupTimerInterrupt+0x44>)
 800ab8a:	3b01      	subs	r3, #1
 800ab8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ab8e:	4b04      	ldr	r3, [pc, #16]	; (800aba0 <vPortSetupTimerInterrupt+0x34>)
 800ab90:	2207      	movs	r2, #7
 800ab92:	601a      	str	r2, [r3, #0]
}
 800ab94:	bf00      	nop
 800ab96:	46bd      	mov	sp, r7
 800ab98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9c:	4770      	bx	lr
 800ab9e:	bf00      	nop
 800aba0:	e000e010 	.word	0xe000e010
 800aba4:	e000e018 	.word	0xe000e018
 800aba8:	20000000 	.word	0x20000000
 800abac:	10624dd3 	.word	0x10624dd3
 800abb0:	e000e014 	.word	0xe000e014

0800abb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800abb4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800abc4 <vPortEnableVFP+0x10>
 800abb8:	6801      	ldr	r1, [r0, #0]
 800abba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800abbe:	6001      	str	r1, [r0, #0]
 800abc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800abc2:	bf00      	nop
 800abc4:	e000ed88 	.word	0xe000ed88

0800abc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800abc8:	b480      	push	{r7}
 800abca:	b085      	sub	sp, #20
 800abcc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800abce:	f3ef 8305 	mrs	r3, IPSR
 800abd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	2b0f      	cmp	r3, #15
 800abd8:	d914      	bls.n	800ac04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800abda:	4a17      	ldr	r2, [pc, #92]	; (800ac38 <vPortValidateInterruptPriority+0x70>)
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	4413      	add	r3, r2
 800abe0:	781b      	ldrb	r3, [r3, #0]
 800abe2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800abe4:	4b15      	ldr	r3, [pc, #84]	; (800ac3c <vPortValidateInterruptPriority+0x74>)
 800abe6:	781b      	ldrb	r3, [r3, #0]
 800abe8:	7afa      	ldrb	r2, [r7, #11]
 800abea:	429a      	cmp	r2, r3
 800abec:	d20a      	bcs.n	800ac04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800abee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abf2:	f383 8811 	msr	BASEPRI, r3
 800abf6:	f3bf 8f6f 	isb	sy
 800abfa:	f3bf 8f4f 	dsb	sy
 800abfe:	607b      	str	r3, [r7, #4]
}
 800ac00:	bf00      	nop
 800ac02:	e7fe      	b.n	800ac02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ac04:	4b0e      	ldr	r3, [pc, #56]	; (800ac40 <vPortValidateInterruptPriority+0x78>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ac0c:	4b0d      	ldr	r3, [pc, #52]	; (800ac44 <vPortValidateInterruptPriority+0x7c>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	429a      	cmp	r2, r3
 800ac12:	d90a      	bls.n	800ac2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ac14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac18:	f383 8811 	msr	BASEPRI, r3
 800ac1c:	f3bf 8f6f 	isb	sy
 800ac20:	f3bf 8f4f 	dsb	sy
 800ac24:	603b      	str	r3, [r7, #0]
}
 800ac26:	bf00      	nop
 800ac28:	e7fe      	b.n	800ac28 <vPortValidateInterruptPriority+0x60>
	}
 800ac2a:	bf00      	nop
 800ac2c:	3714      	adds	r7, #20
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac34:	4770      	bx	lr
 800ac36:	bf00      	nop
 800ac38:	e000e3f0 	.word	0xe000e3f0
 800ac3c:	20006840 	.word	0x20006840
 800ac40:	e000ed0c 	.word	0xe000ed0c
 800ac44:	20006844 	.word	0x20006844

0800ac48 <__libc_init_array>:
 800ac48:	b570      	push	{r4, r5, r6, lr}
 800ac4a:	4d0d      	ldr	r5, [pc, #52]	; (800ac80 <__libc_init_array+0x38>)
 800ac4c:	4c0d      	ldr	r4, [pc, #52]	; (800ac84 <__libc_init_array+0x3c>)
 800ac4e:	1b64      	subs	r4, r4, r5
 800ac50:	10a4      	asrs	r4, r4, #2
 800ac52:	2600      	movs	r6, #0
 800ac54:	42a6      	cmp	r6, r4
 800ac56:	d109      	bne.n	800ac6c <__libc_init_array+0x24>
 800ac58:	4d0b      	ldr	r5, [pc, #44]	; (800ac88 <__libc_init_array+0x40>)
 800ac5a:	4c0c      	ldr	r4, [pc, #48]	; (800ac8c <__libc_init_array+0x44>)
 800ac5c:	f000 f82e 	bl	800acbc <_init>
 800ac60:	1b64      	subs	r4, r4, r5
 800ac62:	10a4      	asrs	r4, r4, #2
 800ac64:	2600      	movs	r6, #0
 800ac66:	42a6      	cmp	r6, r4
 800ac68:	d105      	bne.n	800ac76 <__libc_init_array+0x2e>
 800ac6a:	bd70      	pop	{r4, r5, r6, pc}
 800ac6c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac70:	4798      	blx	r3
 800ac72:	3601      	adds	r6, #1
 800ac74:	e7ee      	b.n	800ac54 <__libc_init_array+0xc>
 800ac76:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac7a:	4798      	blx	r3
 800ac7c:	3601      	adds	r6, #1
 800ac7e:	e7f2      	b.n	800ac66 <__libc_init_array+0x1e>
 800ac80:	0800af58 	.word	0x0800af58
 800ac84:	0800af58 	.word	0x0800af58
 800ac88:	0800af58 	.word	0x0800af58
 800ac8c:	0800af5c 	.word	0x0800af5c

0800ac90 <memcpy>:
 800ac90:	440a      	add	r2, r1
 800ac92:	4291      	cmp	r1, r2
 800ac94:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ac98:	d100      	bne.n	800ac9c <memcpy+0xc>
 800ac9a:	4770      	bx	lr
 800ac9c:	b510      	push	{r4, lr}
 800ac9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aca2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aca6:	4291      	cmp	r1, r2
 800aca8:	d1f9      	bne.n	800ac9e <memcpy+0xe>
 800acaa:	bd10      	pop	{r4, pc}

0800acac <memset>:
 800acac:	4402      	add	r2, r0
 800acae:	4603      	mov	r3, r0
 800acb0:	4293      	cmp	r3, r2
 800acb2:	d100      	bne.n	800acb6 <memset+0xa>
 800acb4:	4770      	bx	lr
 800acb6:	f803 1b01 	strb.w	r1, [r3], #1
 800acba:	e7f9      	b.n	800acb0 <memset+0x4>

0800acbc <_init>:
 800acbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acbe:	bf00      	nop
 800acc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acc2:	bc08      	pop	{r3}
 800acc4:	469e      	mov	lr, r3
 800acc6:	4770      	bx	lr

0800acc8 <_fini>:
 800acc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acca:	bf00      	nop
 800accc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acce:	bc08      	pop	{r3}
 800acd0:	469e      	mov	lr, r3
 800acd2:	4770      	bx	lr
